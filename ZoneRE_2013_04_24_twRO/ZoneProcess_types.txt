struct $_TypeDescriptor$_extraBytes_10 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xa] name
}

struct $_TypeDescriptor$_extraBytes_11 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xb] name
}

struct $_TypeDescriptor$_extraBytes_12 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xc] name
}

struct $_TypeDescriptor$_extraBytes_13 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xd] name
}

struct $_TypeDescriptor$_extraBytes_14 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xe] name
}

struct $_TypeDescriptor$_extraBytes_15 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xf] name
}

struct $_TypeDescriptor$_extraBytes_17 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x11] name
}

struct $_TypeDescriptor$_extraBytes_18 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x12] name
}

struct $_TypeDescriptor$_extraBytes_19 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x13] name
}

struct $_TypeDescriptor$_extraBytes_20 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x14] name
}

struct $_TypeDescriptor$_extraBytes_21 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x15] name
}

struct $_TypeDescriptor$_extraBytes_22 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x16] name
}

struct $_TypeDescriptor$_extraBytes_23 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x17] name
}

struct $_TypeDescriptor$_extraBytes_24 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x18] name
}

struct $_TypeDescriptor$_extraBytes_25 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x19] name
}

struct $_TypeDescriptor$_extraBytes_26 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1a] name
}

struct $_TypeDescriptor$_extraBytes_27 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1b] name
}

struct $_TypeDescriptor$_extraBytes_28 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1c] name
}

struct $_TypeDescriptor$_extraBytes_29 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1d] name
}

struct $_TypeDescriptor$_extraBytes_30 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1e] name
}

struct $_TypeDescriptor$_extraBytes_31 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1f] name
}

struct $_TypeDescriptor$_extraBytes_32 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x20] name
}

struct $_TypeDescriptor$_extraBytes_33 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x21] name
}

struct $_TypeDescriptor$_extraBytes_34 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x22] name
}

struct $_TypeDescriptor$_extraBytes_35 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x23] name
}

struct $_TypeDescriptor$_extraBytes_36 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x24] name
}

struct $_TypeDescriptor$_extraBytes_37 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x25] name
}

struct $_TypeDescriptor$_extraBytes_38 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x26] name
}

struct $_TypeDescriptor$_extraBytes_39 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x27] name
}

struct $_TypeDescriptor$_extraBytes_40 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x28] name
}

struct $_TypeDescriptor$_extraBytes_41 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x29] name
}

struct $_TypeDescriptor$_extraBytes_42 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2a] name
}

struct $_TypeDescriptor$_extraBytes_43 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2b] name
}

struct $_TypeDescriptor$_extraBytes_44 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2c] name
}

struct $_TypeDescriptor$_extraBytes_45 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2d] name
}

struct $_TypeDescriptor$_extraBytes_46 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2e] name
}

struct $_TypeDescriptor$_extraBytes_47 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2f] name
}

struct $_TypeDescriptor$_extraBytes_48 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x30] name
}

struct $_TypeDescriptor$_extraBytes_49 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x31] name
}

struct $_TypeDescriptor$_extraBytes_50 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x32] name
}

struct $_TypeDescriptor$_extraBytes_52 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x34] name
}

struct $_TypeDescriptor$_extraBytes_53 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x35] name
}

struct $_TypeDescriptor$_extraBytes_54 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x36] name
}

struct $_TypeDescriptor$_extraBytes_56 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x38] name
}

struct $_TypeDescriptor$_extraBytes_57 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x39] name
}

struct $_TypeDescriptor$_extraBytes_58 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x3a] name
}

struct $_TypeDescriptor$_extraBytes_60 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x3c] name
}

struct $_TypeDescriptor$_extraBytes_62 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x3e] name
}

struct $_TypeDescriptor$_extraBytes_63 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x3f] name
}

struct $_TypeDescriptor$_extraBytes_64 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x40] name
}

struct $_TypeDescriptor$_extraBytes_65 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x41] name
}

struct $_TypeDescriptor$_extraBytes_67 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x43] name
}

struct $_TypeDescriptor$_extraBytes_69 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x45] name
}

struct $_TypeDescriptor$_extraBytes_70 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x46] name
}

struct $_TypeDescriptor$_extraBytes_73 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x49] name
}

struct $_TypeDescriptor$_extraBytes_76 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x4c] name
}

struct $_TypeDescriptor$_extraBytes_77 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x4d] name
}

struct $_TypeDescriptor$_extraBytes_80 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x50] name
}

struct $_TypeDescriptor$_extraBytes_83 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x53] name
}

struct $_s__CatchableTypeArray$_extraBytes_12 {
  /* this+0x0 */ int nCatchableTypes
  /* this+0x4 */ const struct _s__CatchableType *[0x3] arrayOfCatchableTypes
}

struct $_s__CatchableTypeArray$_extraBytes_8 {
  /* this+0x0 */ int nCatchableTypes
  /* this+0x4 */ const struct _s__CatchableType *[0x2] arrayOfCatchableTypes
}

struct $_s__RTTIBaseClassArray$_extraBytes_12 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x3] arrayOfBaseClassDescriptors
}

struct $_s__RTTIBaseClassArray$_extraBytes_16 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x4] arrayOfBaseClassDescriptors
}

struct $_s__RTTIBaseClassArray$_extraBytes_20 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x5] arrayOfBaseClassDescriptors
}

struct $_s__RTTIBaseClassArray$_extraBytes_24 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x6] arrayOfBaseClassDescriptors
}

struct $_s__RTTIBaseClassArray$_extraBytes_4 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x1] arrayOfBaseClassDescriptors
}

struct $_s__RTTIBaseClassArray$_extraBytes_8 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x2] arrayOfBaseClassDescriptors
}

class CDatabaseLog<SITEMLOG *> {
  CExtendedODBC, offset = 0x0

  public void CDatabaseLog<SITEMLOG *>::AddLog(struct SITEMLOG *)
  public void LogToDatabase()
  public void ConnectToDatabase(const char *)
  public int CDatabaseLog<SITEMLOG *>::GetSize()
  private int SaveToDatabase(void *, struct SITEMLOG *)
  /* this+0x14 */ class std::queue<SITEMLOG *,std::deque<SITEMLOG *,std::allocator<SITEMLOG *> > > m_queLog

  /* this+0x2c */ class CCriticalSection m_csLog

  public void CDatabaseLog<SITEMLOG *>(const class CDatabaseLog<SITEMLOG *> &)
  public void CDatabaseLog<SITEMLOG *>::CDatabaseLog<SITEMLOG *>()
  public void CDatabaseLog<SITEMLOG *>::~CDatabaseLog<SITEMLOG *>()
  public class CDatabaseLog<SITEMLOG *> & operator=(const class CDatabaseLog<SITEMLOG *> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class <CrtImplementationDetails>::NativeDll {
  /* [0x0000:0x00000000] */ static  const unsigned int ProcessDetach
  /* [0x0000:0x00000000] */ static  const unsigned int ProcessAttach
  /* [0x0000:0x00000000] */ static  const unsigned int ThreadAttach
  /* [0x0000:0x00000000] */ static  const unsigned int ThreadDetach
  /* [0x0000:0x00000000] */ static  const unsigned int ProcessVerifier
  public static bool IsInDllMain()
  public static bool IsInProcessAttach()
  public static bool IsInProcessDetach()
  public static bool IsInVcclrit()
  public static bool IsSafeForManagedCode()
}

struct <unnamed-tag> {
  /* this+0x0 */ union Value value

  /* this+0x8 */ int tt
  /* this+0xc */ struct Node * next
}

struct AGIT_DBINFO {
  /* this+0x0 */ char[0x10] mapName
  /* this+0x10 */ char[0x18] agitName
  /* this+0x28 */ int guildID
  /* this+0x2c */ int economy
  /* this+0x30 */ int defense
  /* this+0x34 */ int triggerE
  /* this+0x38 */ int triggerD
  /* this+0x3c */ long nextTime
  /* this+0x40 */ long payTime
  /* this+0x44 */ long createTime
  /* this+0x48 */ unsigned char visibleC
  /* this+0x49 */ unsigned char[0x8] visibleG
}

struct AID_GID_INFO {
  public void AID_GID_INFO(const unsigned long, const unsigned long)
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long GID
}

struct ALL_QUEST_LIST2_INFO {
  /* this+0x0 */ unsigned long questID
  /* this+0x4 */ bool active
  /* this+0x5 */ long quest_svrTime
  /* this+0x9 */ long quest_endTime
  /* this+0xd */ short hunting_count
}

struct AMOUNT_INFO {
  /* this+0x0 */ unsigned long time
  /* this+0x4 */ int amount
}

struct ANON_OBJECT_HEADER {
  /* this+0x0 */ unsigned short Sig1
  /* this+0x2 */ unsigned short Sig2
  /* this+0x4 */ unsigned short Version
  /* this+0x6 */ unsigned short Machine
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ struct _GUID ClassID

  /* this+0x1c */ unsigned long SizeOfData
}

struct ANON_OBJECT_HEADER_BIGOBJ {
  /* this+0x0 */ unsigned short Sig1
  /* this+0x2 */ unsigned short Sig2
  /* this+0x4 */ unsigned short Version
  /* this+0x6 */ unsigned short Machine
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ struct _GUID ClassID

  /* this+0x1c */ unsigned long SizeOfData
  /* this+0x20 */ unsigned long Flags
  /* this+0x24 */ unsigned long MetaDataSize
  /* this+0x28 */ unsigned long MetaDataOffset
  /* this+0x2c */ unsigned long NumberOfSections
  /* this+0x30 */ unsigned long PointerToSymbolTable
  /* this+0x34 */ unsigned long NumberOfSymbols
}

struct ANON_OBJECT_HEADER_V2 {
  /* this+0x0 */ unsigned short Sig1
  /* this+0x2 */ unsigned short Sig2
  /* this+0x4 */ unsigned short Version
  /* this+0x6 */ unsigned short Machine
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ struct _GUID ClassID

  /* this+0x1c */ unsigned long SizeOfData
  /* this+0x20 */ unsigned long Flags
  /* this+0x24 */ unsigned long MetaDataSize
  /* this+0x28 */ unsigned long MetaDataOffset
}

struct ARENA_ROOM_INFO {
  /* this+0x0 */ int fee
  /* this+0x4 */ int lowLevel
  /* this+0x8 */ int highLevel
  /* this+0xc */ class std::list<int,std::allocator<int> > m_exJob

  public void ARENA_ROOM_INFO(const struct ARENA_ROOM_INFO &)
  public void ARENA_ROOM_INFO()
  public void ARENA_ROOM_INFO::~ARENA_ROOM_INFO()
  public struct ARENA_ROOM_INFO & operator=(const struct ARENA_ROOM_INFO &)
  public void * __vecDelDtor(unsigned int)
}

struct ATTACK_INFO {
  public void ATTACK_INFO()
  /* this+0x0 */ class CCharacter * target
  /* this+0x4 */ int position
  /* this+0x8 */ int skillProperty
  /* this+0xc */ int plusATTPowerPercent
  /* this+0x10 */ int plusATTSuccessPercent
  /* this+0x14 */ int calculateType
  /* this+0x18 */ int isRangeAttack
  /* this+0x1c */ unsigned short SKID
  /* this+0x1e */ short skLevel
}

struct ATTACK_PC {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ int damage
  /* this+0x8 */ int attdamage
  /* this+0xc */ unsigned long GRID
  /* this+0x10 */ unsigned long GID
}

struct AUCTIONINFO {
  DBAUCTIONINFO, offset = 0x0

  /* this+0x88 */ int isBuyer
  /* this+0x8c */ unsigned short ITID
  /* this+0x8e */ unsigned short ItemType
  /* this+0x90 */ int count
  /* this+0x94 */ bool IsIdentified
  /* this+0x95 */ bool IsDamaged
  /* this+0x96 */ unsigned char refiningLevel
  /* this+0x97 */ struct EQUIPSLOTINFO slot

}

struct AUCTIONTIME {
  /* this+0x0 */ short Year
  /* this+0x2 */ short Month
  /* this+0x4 */ short Day
  /* this+0x6 */ short Hour
}

struct AUCTION_ITEM_SEARCH_INFO {
  /* this+0x0 */ unsigned long AuctionID
  /* this+0x4 */ char[0x18] SellerName
  /* this+0x1c */ unsigned short ITID
  /* this+0x1e */ int Type
  /* this+0x22 */ short count
  /* this+0x24 */ bool IsIdentified
  /* this+0x25 */ bool IsDamaged
  /* this+0x26 */ unsigned char refiningLevel
  /* this+0x27 */ struct EQUIPSLOTINFO slot

  /* this+0x2f */ int NowPrice
  /* this+0x33 */ int MaxPrice
  /* this+0x37 */ char[0x18] BuyerName
  /* this+0x4f */ long DeleteTime
}

struct AUTOSPELL_MAGIC {
  /* this+0x0 */ unsigned long SKID
  /* this+0x4 */ short level
  /* this+0x6 */ short who
  /* this+0x8 */ int percent
}

struct AUTO_ACT_ITEMINFO {
  /* this+0x0 */ unsigned long itemID
  /* this+0x4 */ short percent
  /* this+0x6 */ short time
}

struct AUTO_ACT_ITEMSCRIPT {
  /* this+0x0 */ unsigned long itemID
  /* this+0x4 */ unsigned long time
  /* this+0x8 */ unsigned char type
}

class ActorScheduler::CScheduler {
    *
  public void ActorScheduler::CScheduler::Process(class CActor *)
  public void ActorScheduler::CScheduler::Insert(const class std::tr1::shared_ptr<ActorScheduler::CTask> &)
  public void ActorScheduler::CScheduler::Init()
  public void ActorScheduler::CScheduler::Delete(const unsigned long)
  public void CScheduler(const class ActorScheduler::CScheduler &)
  public void CScheduler()
  public void ActorScheduler::CScheduler::~CScheduler()
      /* this+0x4 */ class std::multiset<std::tr1::shared_ptr<ActorScheduler::CTask>,ActorScheduler::CScheduler::lcTaskPriority,std::allocator<std::tr1::shared_ptr<ActorScheduler::CTask> > > m_Tasks

  public class ActorScheduler::CScheduler & operator=(const class ActorScheduler::CScheduler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ActorScheduler::CScheduler::lcTaskPriority {
  public bool operator()(const class std::tr1::shared_ptr<ActorScheduler::CTask> &, const class std::tr1::shared_ptr<ActorScheduler::CTask> &)
}

class ActorScheduler::CTask {
    *
  /* this+0x4 */ const unsigned long m_Identity
  /* this+0x8 */ unsigned long m_Time
  public unsigned long GetExecuteTime()
  public unsigned long GetIdentity()
  public bool ActorScheduler::CTask::operator()(class CActor *)
  private void CTask(const class ActorScheduler::CTask &)
  private void CTask()
  public void CTask(const unsigned long, const unsigned long)
  public void ActorScheduler::CTask::~CTask()
  private class ActorScheduler::CTask & operator=(class ActorScheduler::CTask &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ActorScheduler::`anonymous-namespace'::CTaskCompare {
  std::binary_function<std::tr1::shared_ptr<ActorScheduler::CTask>,unsigned long,bool>, offset = 0x0

  public bool operator()(const class std::tr1::shared_ptr<ActorScheduler::CTask> &, const unsigned long &)
}

struct Addr {
  /* this+0x0 */ unsigned long ip
  /* this+0x4 */ int port
  public void GetIp(char *)
  public void SetIp(const char *)
}

struct AllocSSIListInfoData {
    *
  public void AllocSSIListInfoData(const struct AllocSSIListInfoData &)
  public void AllocSSIListInfoData::AllocSSIListInfoData()
  public void AllocSSIListInfoData::~AllocSSIListInfoData()
  public struct SSIListInfo * operator->()
  public bool operator==(struct SSIListInfo *)
  public bool operator==(const struct SSIListInfo *)
  public const struct SSIListInfo * operator const struct SSIListInfo *()
  public const struct SSIListInfo operator const struct SSIListInfo()
  public struct SSIListInfo * operator struct SSIListInfo *()
  public struct SSIListInfo operator struct SSIListInfo()
  /* this+0x4 */ struct SSIListInfo * m_pData
  public struct AllocSSIListInfoData & operator=(const struct AllocSSIListInfoData &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct AmountValue {
  /* this+0x0 */ unsigned long time
  /* this+0x4 */ int resetAmount
  public void AmountValue(unsigned long, int)
}

struct AttrAttackInfo {
  /* this+0x0 */ int[0xa][0xa] val
}

class AutoCS {
    *
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION * m_cs
  public void AutoCS(const class AutoCS &)
  public void AutoCS(struct _RTL_CRITICAL_SECTION *)
  public void ~AutoCS()
  public class AutoCS & operator=(const class AutoCS &)
  public void * __vecDelDtor(unsigned int)
}

struct BATTERY_REPORTING_SCALE {
  /* this+0x0 */ unsigned long Granularity
  /* this+0x4 */ unsigned long Capacity
}

struct BATTLEFIELDINFO {
  /* this+0x0 */ char campID
  /* this+0x2 */ short xPos1
  /* this+0x4 */ short yPos1
  /* this+0x6 */ short xPos2
  /* this+0x8 */ short yPos2
}

struct BATTLEFIELD_MAPINFO {
  /* this+0x0 */ short aX2
  /* this+0x2 */ short aY2
  /* this+0x4 */ short bX2
  /* this+0x6 */ short bY2
  /* this+0x8 */ bool isPointNotify
  /* this+0x9 */ bool isPKPoint
  /* this+0xa */ bool isAlivePCCheck
  /* this+0xb */ bool isNpcNotify
}

struct BATTLEFIELD_STATEINFO {
  /* this+0x0 */ int a_point
  /* this+0x4 */ int b_point
}

struct BATTLE_FIELD_INFO {
  /* this+0x0 */ unsigned long BFNO
  /* this+0x4 */ char[0x38] BattleFieldName
  /* this+0x3c */ short JoinTeam
}

struct BILLING_EXTENSION {
  /* this+0x0 */ unsigned char m_byAllowDeny
  /* this+0x1 */ unsigned long m_dw_1st
  /* this+0x5 */ unsigned long m_dw_2nd
  /* this+0x9 */ unsigned long m_dw_3rd
  /* this+0xd */ unsigned char[0x7] m_byReserved
}

struct BITMAPV4HEADER {
  /* this+0x0 */ unsigned long bV4Size
  /* this+0x4 */ long bV4Width
  /* this+0x8 */ long bV4Height
  /* this+0xc */ unsigned short bV4Planes
  /* this+0xe */ unsigned short bV4BitCount
  /* this+0x10 */ unsigned long bV4V4Compression
  /* this+0x14 */ unsigned long bV4SizeImage
  /* this+0x18 */ long bV4XPelsPerMeter
  /* this+0x1c */ long bV4YPelsPerMeter
  /* this+0x20 */ unsigned long bV4ClrUsed
  /* this+0x24 */ unsigned long bV4ClrImportant
  /* this+0x28 */ unsigned long bV4RedMask
  /* this+0x2c */ unsigned long bV4GreenMask
  /* this+0x30 */ unsigned long bV4BlueMask
  /* this+0x34 */ unsigned long bV4AlphaMask
  /* this+0x38 */ unsigned long bV4CSType
  /* this+0x3c */ struct tagICEXYZTRIPLE bV4Endpoints

  /* this+0x60 */ unsigned long bV4GammaRed
  /* this+0x64 */ unsigned long bV4GammaGreen
  /* this+0x68 */ unsigned long bV4GammaBlue
}

struct BITMAPV5HEADER {
  /* this+0x0 */ unsigned long bV5Size
  /* this+0x4 */ long bV5Width
  /* this+0x8 */ long bV5Height
  /* this+0xc */ unsigned short bV5Planes
  /* this+0xe */ unsigned short bV5BitCount
  /* this+0x10 */ unsigned long bV5Compression
  /* this+0x14 */ unsigned long bV5SizeImage
  /* this+0x18 */ long bV5XPelsPerMeter
  /* this+0x1c */ long bV5YPelsPerMeter
  /* this+0x20 */ unsigned long bV5ClrUsed
  /* this+0x24 */ unsigned long bV5ClrImportant
  /* this+0x28 */ unsigned long bV5RedMask
  /* this+0x2c */ unsigned long bV5GreenMask
  /* this+0x30 */ unsigned long bV5BlueMask
  /* this+0x34 */ unsigned long bV5AlphaMask
  /* this+0x38 */ unsigned long bV5CSType
  /* this+0x3c */ struct tagICEXYZTRIPLE bV5Endpoints

  /* this+0x60 */ unsigned long bV5GammaRed
  /* this+0x64 */ unsigned long bV5GammaGreen
  /* this+0x68 */ unsigned long bV5GammaBlue
  /* this+0x6c */ unsigned long bV5Intent
  /* this+0x70 */ unsigned long bV5ProfileData
  /* this+0x74 */ unsigned long bV5ProfileSize
  /* this+0x78 */ unsigned long bV5Reserved
}

struct BOSS_INFO {
  public void Init(int, int)
  /* this+0x0 */ bool isBossInMap
  /* this+0x4 */ int lastNotifyPositionX
  /* this+0x8 */ int lastNotifyPositionY
  /* this+0xc */ unsigned long lastNotifyTime
  /* this+0x10 */ bool isDead
  /* this+0x12 */ struct _SYSTEMTIME regenSystemTime

  /* this+0x24 */ unsigned long regenTime
  /* this+0x28 */ unsigned long regenTerm
  /* this+0x2c */ class std::list<int,std::allocator<int> > pcList

  public void BOSS_INFO(const struct BOSS_INFO &)
  public void BOSS_INFO()
  public void BOSS_INFO::~BOSS_INFO()
  public struct BOSS_INFO & operator=(const struct BOSS_INFO &)
  public void * __vecDelDtor(unsigned int)
}

struct BROADCAST_INFO {
  /* this+0x0 */ short packetType
  /* this+0x2 */ short broadcastType
  /* this+0x4 */ unsigned long fontColor
  /* this+0x8 */ short fontType
  /* this+0xa */ short fontSize
  /* this+0xc */ short fontAlign
  /* this+0xe */ short fontY
  /* this+0x10 */ char * str
  /* this+0x14 */ int extra
}

struct BSMINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct HDESK__ * hdesk
  /* this+0x8 */ struct HWND__ * hwnd
  /* this+0xc */ struct _LUID luid

}

struct BUYINGSTORE_ITEMEXTRA_INFO {
  /* this+0x0 */ unsigned long SSI_ID
}

struct BUYING_STORE_ITEMLIST {
  /* this+0x0 */ int price
  /* this+0x4 */ short count
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ unsigned short ITID
  public void BUYING_STORE_ITEMLIST(const unsigned short, const int, const short, const unsigned char)
  public void BUYING_STORE_ITEMLIST()
}

struct BlockCnt {
  /* this+0x0 */ struct BlockCnt * previous
  /* this+0x4 */ int breaklist
  /* this+0x8 */ unsigned char nactvar
  /* this+0x9 */ unsigned char upval
  /* this+0xa */ unsigned char isbreakable
}

class C2CharacterServerClient {
  C2Client, offset = 0x0

  public bool isOK()
  public bool C2CharacterServerClient::Init(unsigned int)
  public void C2CharacterServerClient::Send(const int, const char *)
  public void C2CharacterServerClient::Process()
  public bool isAuth()
  public void C2CharacterServerClient::SetAuth(const bool)
  public unsigned long GetLastPacketRecvTM()
  public unsigned long GetLastPacketSendTM()
    /* this+0x514c */ class C2CharacterServerClient::lcProcessStep m_ProcessStep

  private void C2CharacterServerClient::MessageProcess()
  private void C2CharacterServerClient::ProcessCleanUp()
  public static bool C2CharacterServerClient::CreateInstance(class N3IPAddr, int)
  public static void C2CharacterServerClient::DestroyInstance()
  private void C2CharacterServerClient(class C2CharacterServerClient &)
  private void C2CharacterServerClient::C2CharacterServerClient(class N3IPAddr, int)
  private void C2CharacterServerClient::~C2CharacterServerClient()
  private class C2CharacterServerClient & operator=(class C2CharacterServerClient &)
  /* this+0x5158 */ bool m_bOK
  /* [0x0003:0x0004b638] */ static  class C2CharacterServerClient * m_cpSelf
  /* this+0x515c */ class C2CharacterServerClientPacketHandler m_PacketHandler

  /* this+0x5170 */ class N3Scheduler<C2CharacterServerClient> m_Scheduler

  /* this+0x5184 */ bool m_bAuth
  /* this+0x5188 */ unsigned int m_LastPacketSendTM
  private void * __vecDelDtor(unsigned int)
}

class C2CharacterServerClient::lcProcessStep {
    *
    public void operator()(const enum C2CharacterServerClient::lcProcessStep::enumStep)
  public enum C2CharacterServerClient::lcProcessStep::enumStep operator()()
  public void lcProcessStep(class C2CharacterServerClient::lcProcessStep &)
  public void lcProcessStep()
  public void C2CharacterServerClient::lcProcessStep::~lcProcessStep()
  public class C2CharacterServerClient::lcProcessStep & operator=(class C2CharacterServerClient::lcProcessStep &)
  /* this+0x4 */ enum C2CharacterServerClient::lcProcessStep::enumStep m_enumStep
  /* this+0x8 */ unsigned long m_dwRequestTM
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class C2CharacterServerClientPacketHandler {
  CHSvrIOPacketHandler, offset = 0x0

  public void C2CharacterServerClientPacketHandler::OnClose()
  public int C2CharacterServerClientPacketHandler::OnProcess()
  public unsigned int GetLastPacketRecvTM()
  public void SetLastPacketRecvTM(const unsigned long)
  private int C2CharacterServerClientPacketHandler::DispatchPacket(short, int)
  private void OnHZ_PING_LIVE(struct PACKET_HZ_PING_LIVE &)
  private void OnHZ_LOGON_KOR(const struct PACKET_HZ_LOGON_KOR &)
  private void OnHZ_PERSONAL_INFORMATION_PHL(const struct PACKET_HZ_PERSONAL_INFORMATION_PHL *)
  private void OnHZ_PERSONAL_INFORMATION_THAI(const struct PACKET_HZ_PERSONAL_INFORMATION_THAI *)
  private void C2CharacterServerClientPacketHandler::OnHZ_PERSONAL_INFORMATION_TW(const struct PACKET_HZ_PERSONAL_INFORMATION_TW *)
  public void C2CharacterServerClientPacketHandler(class C2CharacterServerClientPacketHandler &)
  public void C2CharacterServerClientPacketHandler::C2CharacterServerClientPacketHandler()
  public void C2CharacterServerClientPacketHandler::~C2CharacterServerClientPacketHandler()
  public class C2CharacterServerClientPacketHandler & operator=(class C2CharacterServerClientPacketHandler &)
  /* this+0x10 */ unsigned long m_dwLastRecvPacketTM
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class C2Client {
  N3Inter, offset = 0x0

  N3Object, offset = 0x4

  public class N3IPAddr C2Client::GetServerIPAddr()
  public int GetServerPortNum()
  public void C2Client::Process()
  public bool C2Client::Init(unsigned int, class CPacketHandler *)
  public void C2Client::AddDisconnectReqCnt(const char *, const int)
  public int C2Client::GetDisconnectReqCnt()
  public void C2Client::Receive(const unsigned int, const unsigned int, const unsigned int)
  public void C2Client(class C2Client &)
  public void C2Client::C2Client(class N3IPAddr, int)
  public void C2Client::~C2Client()
  public class C2Client & operator=(class C2Client &)
  /* this+0xc */ const class N3IPAddr m_ServerIPAddr

  /* this+0x14 */ const int m_ServerPortNum
  /* this+0x18 */ class C2StreamObject m_asyncStream

  /* this+0x510c */ class N3MessageQueue m_MessageQueue

  /* this+0x5148 */ int m_DisconnectReqCnt
  public void * __vecDelDtor(unsigned int)
}

class C2ClientMgr {
  N3Inter, offset = 0x0

  N3Object, offset = 0x4

    public bool isOK()
  public void C2ClientMgr::Process()
  public void C2ClientMgr::OnDisconnect(unsigned int)
  public void C2ClientMgr::Receive(const unsigned int, const unsigned int, const unsigned int)
  private void C2ClientMgr::MessageProcess()
  private void C2ClientMgr::OnMSG_CONNECT_FAIL(unsigned int, class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private void C2ClientMgr::OnMSG_CONNECT_SUCCESS(unsigned int, unsigned int)
  private bool C2ClientMgr::Create()
  private void C2ClientMgr::Destroy()
  public static bool C2ClientMgr::CreateInstance()
  public static void C2ClientMgr::DestroyInstance()
  private void C2ClientMgr(class C2ClientMgr &)
  private void C2ClientMgr::C2ClientMgr()
  private void C2ClientMgr::~C2ClientMgr()
  private class C2ClientMgr & operator=(class C2ClientMgr &)
  /* [0x0003:0x0004b62c] */ static  class C2ClientMgr * m_cpSelf
  /* this+0xc */ bool m_bOK
  /* this+0x10 */ class N3MessageQueue m_MessageQueue

  /* this+0x4c */ class N3Scheduler<C2ClientMgr> m_Scheduler

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class C2ClientWorkThread {
  N3Thread, offset = 0x0

  N3Inter, offset = 0x30

  N3Object, offset = 0x34

    public bool isOK()
  public bool C2ClientWorkThread::Start()
  public void C2ClientWorkThread::Stop()
  private void C2ClientWorkThread::OnMSG_REQUEST_CONNECT(unsigned int, class N3IPAddr, int)
  private unsigned int C2ClientWorkThread::ThreadFunction()
  private void C2ClientWorkThread::PostThreadQuitMessage()
  public void C2ClientWorkThread::Receive(const unsigned int, const unsigned int, const unsigned int)
  public static bool C2ClientWorkThread::CreateInstance()
  public static void C2ClientWorkThread::DestroyInstance()
  private void C2ClientWorkThread(class C2ClientWorkThread &)
  private void C2ClientWorkThread::C2ClientWorkThread()
  private void C2ClientWorkThread::~C2ClientWorkThread()
  private class C2ClientWorkThread & operator=(class C2ClientWorkThread &)
  /* [0x0003:0x0004b630] */ static  class C2ClientWorkThread * m_cpSelf
  /* this+0x3c */ bool m_bOK
  /* this+0x40 */ class N3MessageQueue m_MessageQueue

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class C2InterServerClient {
  C2Client, offset = 0x0

    public bool isOK()
  public bool C2InterServerClient::Init(unsigned int)
  public void C2InterServerClient::Process()
  public void C2InterServerClient::Send(int, const char *)
  public bool isAuth()
  public void SetAuth(bool)
  public unsigned int GetLastPacketRecvTM()
  public unsigned int GetLastPacketSendTM()
  private void C2InterServerClient::MessageProcess()
    /* this+0x514c */ class C2InterServerClient::lcProcessStep m_ProcessStep

  private void C2InterServerClient::ProcessCleanup()
  public static bool C2InterServerClient::CreateInstance(class N3IPAddr, int)
  public static void C2InterServerClient::DestroyInstance()
  private void C2InterServerClient(class C2InterServerClient &)
  private void C2InterServerClient::C2InterServerClient(class N3IPAddr, int)
  private void C2InterServerClient::~C2InterServerClient()
  private class C2InterServerClient & operator=(class C2InterServerClient &)
  /* [0x0003:0x0004b634] */ static  class C2InterServerClient * m_cpSelf
  /* this+0x5158 */ bool m_bOK
  /* this+0x515c */ class C2InterServerClientPacketHandler m_PacketHandler

  /* this+0x8d74 */ class N3Scheduler<C2InterServerClient> m_Scheduler

  /* this+0x8d88 */ bool m_bAuth
  /* this+0x8d8c */ unsigned int m_LastPacketSendTM
  private void * __vecDelDtor(unsigned int)
}

class C2InterServerClient::lcProcessStep {
    *
    /* this+0x4 */ enum C2InterServerClient::lcProcessStep::enumStep m_Step
  /* this+0x8 */ unsigned long m_RequestTM
  public void operator()(const enum C2InterServerClient::lcProcessStep::enumStep)
  public enum C2InterServerClient::lcProcessStep::enumStep operator()()
  public void lcProcessStep(class C2InterServerClient::lcProcessStep &)
  public void lcProcessStep()
  public void C2InterServerClient::lcProcessStep::~lcProcessStep()
  public class C2InterServerClient::lcProcessStep & operator=(class C2InterServerClient::lcProcessStep &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class C2InterServerClientPacketHandler {
  CISvrIOPacketHandler, offset = 0x0

  public void C2InterServerClientPacketHandler::OnClose()
  public int C2InterServerClientPacketHandler::OnProcess()
  public unsigned int GetLastPacketRecvTM()
  public void SetLastPacketRecvTM(unsigned int)
  private int C2InterServerClientPacketHandler::DispatchPacket(short, int)
  private void OnIZ_PING_LIVE(const struct PACKET_IZ_PING_LIVE &)
  private void OnIZ_OTHER_ZONE_PC_SEND_MSG(const struct PACKET_IZ_OTHER_ZONE_PC_SEND_MSG &)
  private void C2InterServerClientPacketHandler::OnIZ_INSTANTMAP_ADD3(const struct PACKET_IZ_INSTANTMAP_ADD3 &)
  private void C2InterServerClientPacketHandler::OnIZ_INSTANTMAP_REMOVE3(const struct PACKET_IZ_INSTANTMAP_REMOVE3 &)
  private void C2InterServerClientPacketHandler::OnIZ_INSTANTMAP_PLAYER_ENTER3(const struct PACKET_IZ_INSTANTMAP_PLAYER_ENTER3 &)
  public void C2InterServerClientPacketHandler(const class C2InterServerClientPacketHandler &)
  public void C2InterServerClientPacketHandler::C2InterServerClientPacketHandler()
  public void C2InterServerClientPacketHandler::~C2InterServerClientPacketHandler()
  /* this+0x3c14 */ unsigned int m_LastPacketRecvTM
  public class C2InterServerClientPacketHandler & operator=(const class C2InterServerClientPacketHandler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class C2StreamObject {
  CAsyncStream, offset = 0x0

    public long GetIOCPoperationCnt()
  public bool C2StreamObject::Open(unsigned int)
  public int C2StreamObject::Close(const bool)
  public void C2StreamObject::Init(class CPacketHandler *)
  public void C2StreamObject::OnComplete(int, unsigned long, struct CAsyncOperation *)
  protected int C2StreamObject::SendDataInQueue(int)
  protected int C2StreamObject::OnRecvCompletion(long)
  public void C2StreamObject(class C2StreamObject &)
  public void C2StreamObject::C2StreamObject(unsigned int, int, int)
  public void C2StreamObject::~C2StreamObject()
  public class C2StreamObject & operator=(class C2StreamObject &)
  /* this+0x50d4 */ long m_IOCPoperationCnt
  /* this+0x50d8 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x50f0 */ const unsigned int m_hClient
  public void * __vecDelDtor(unsigned int)
}

struct CASH_BUY_ITEM {
  /* this+0x0 */ unsigned long item_id
  /* this+0x4 */ int count
  /* this+0x8 */ short tab_code
}

struct CASH_ITEM_LIST {
  public void CASH_ITEM_LIST(const unsigned long, const int)
  /* this+0x0 */ unsigned long item_id
  /* this+0x4 */ int price
}

struct CASH_ITEM_LIST2 {
  public bool operator==(const struct CASH_ITEM_LIST2 &)
  public void CASH_ITEM_LIST2()
  public void CASH_ITEM_LIST2(const unsigned short, const int)
  /* this+0x0 */ unsigned short item_id
  /* this+0x2 */ int price
}

class CAcceptHandler {
    *
  public void CAcceptHandler(const class CAcceptHandler &)
  public void CAcceptHandler::CAcceptHandler()
  public void CAcceptHandler::~CAcceptHandler()
  public int OnConnect(unsigned int, unsigned long)
  public class CAcceptHandler & operator=(const class CAcceptHandler &)
  public void * __vecDelDtor(unsigned int)
}

class CAcceptor {
}

class CActor {
  CCharacter, offset = 0x0

  public int CActor::GetSPcostForSkill(const int, const int, const int, class CSkillTypeInfo *)
  /* this+0x378 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_MspdSlowPercentEfstList

  /* this+0x388 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_MspdHastePercentEfstList

  /* this+0x398 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_AspdSlowPercentEfstList

  /* this+0x3a8 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_AspdHastePercentEfstList

  public void InsertMspdSlowPercentEfstList(const int, const int)
  public void InsertMspdHastePercentEfstList(const int, const int)
  public void InsertAspdSlowPercentEfstList(const int, const int)
  public void InsertAspdHastePercentEfstList(const int, const int)
  public int CActor::ModifyVariableSKcastingTM(const int, const int)
  public void CActor::VariableSKcastingTMPropertyAmountAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void CActor::VariableSKcastingTMPropertyPermillAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void CActor::VariableSKcastingTMPropertyAmountRemove(const class SKcastingTMvarStuff::CIdentity &)
  public void CActor::VariableSKcastingTMPropertyPermillRemove(const class SKcastingTMvarStuff::CIdentity &)
  public int CActor::ModifyFixedSKcastingTM(const int, const int)
  public void CActor::FixedSKcastingTMPropertyAmountAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void CActor::FixedSKcastingTMPropertyPermillAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void CActor::FixedSKcastingTMPropertyAmountRemove(const class SKcastingTMvarStuff::CIdentity &)
  public void CActor::FixedSKcastingTMPropertyPermillRemove(const class SKcastingTMvarStuff::CIdentity &)
  public const char * GetNamePtr()
  /* this+0x3b8 */ int m_BodyStateValue
  /* this+0x3bc */ unsigned long[0x3] m_BodyStateTime
  /* this+0x3c8 */ unsigned long[0x2][0x9] m_HealthStateTime
  /* this+0x410 */ unsigned long[0x9] m_HealthStateValue
  public unsigned long CActor::GetHealthStateRemainMS(const int)
  public unsigned long CActor::GetBodyStateRemainMS(const int)
  public short CActor::GetHealthState()
  public void CActor::ResetHealthState(short)
  /* this+0x434 */ int[0xa] m_resistByProperty
      /* this+0x45c */ class std::map<int,unsigned long,std::less<int>,std::allocator<std::pair<int const ,unsigned long> > > m_effectStateTimeL

  protected void SetEffectStateTimeInfo(unsigned long, int)
  protected void ResetEffectState(int)
  protected void SetEffectState(int)
  public int CActor::GetStateDBFmt(unsigned char *, const int)
  public void CActor::SetStateDBFmt(const unsigned char *, const int)
  public void CActor::ReduceSPByUseSkill(int)
  public bool CActor::IsExistItem(int, int, bool)
  public bool CActor::ConsumeItemByUseSkill(int, int, bool)
  public short CActor::GetAttackSuccessPercent(class CCharacter *, const int, int)
  public int CActor::GetAttackFinalDamage(struct ATTACK_INFO *)
  public int CActor::SkillAttack(struct SKILLATTACK_MSG *, int, int, const bool)
  public short CActor::SplashAttack(int, short, short, int, int, int, unsigned long, void *, int, int)
  public int CActor::SplashAttack2(int, struct PosInfo, int, int, int, struct MSG_TYPE1_TWODWORD *, int, int, struct PosInfo *)
  public int CActor::SetHandicapState(int, class CCharacter *, int, int, int, int, int)
  public bool CActor::ResetHandicapState(class CActor *, const int)
  public const unsigned long CActor::GetHandcapStateRemainTime(const int)
  public bool CActor::IsHandicapState(const int)
  public int CActor::GetCountInArea(int, int, int, int, int, int)
  public int CActor::GetModifiedTargetItemDEF(class CCharacter *)
  public int CActor::GetModifiedTargetStatusDEF(class CCharacter *)
  public int CActor::GetModifiedTargetItemMDEF(class CCharacter *)
  public int CActor::GetModifiedTargetTotalDEF(class CCharacter *)
  public int CActor::GetModifiedTargetTotalMDEF(class CCharacter *)
  public void CActor::ApplyExtraDEF(int &, class CCharacter *)
  public void CActor::ApplyExtraMDEF(int &)
  public int CActor::GetModifiedDamageByTargetDEF(class CCharacter *, const int, const int)
  public int CActor::GetModifiedDamageByTargetMDEF(class CCharacter *, const int, const int)
  private int CActor::GetModifiedTargetStatusMDEF2(class CCharacter *)
  private int CActor::GetModifiedTargetItemMDEF2(class CCharacter *)
  private int CActor::GetModifiedTargetStatusDEF2(class CCharacter *)
  private int CActor::GetModifiedTargetItemDEF2(class CCharacter *)
  public int CActor::SetEffective(int, int, int, int, int, int)
  public int CActor::GetEffective(int, int)
  public void CActor::UpdateEffective(int, int, int)
  public void CActor::ResetEffective(int, int)
  public void CActor::ResetAllEffective(int)
    public void ModifyEffective(const unsigned int, const int, const unsigned long, const int, const int, const int)
  public bool CActor::SetEffectiveCheckup(const int, int &, int &, int &, int &)
  public void CActor::SetEffectiveComplete(const int, const int, const int, const int, const int)
  public bool CActor::ResetEffectiveCheckup(const int, const int, struct EFFECTIVE_INFO *)
  public void CActor::ResetEffectiveComplete(const int, const int, const int, const int)
  public void CActor::UpdateEffectiveTime(int, int)
  public struct EFFECTIVE_INFO * CActor::GetEffectiveInfo(int)
  public void CActor::ProcessAllEffective()
  public bool CActor::IsGroundEffective(int, int &, bool &)
  public void CActor::ProcessGroundEffective(int, int, bool)
  public void CActor::ProcessCheckEffective(int, struct EFFECTIVE_INFO *)
  public void CActor::SetOnShowEFST(int)
  public void CActor::SetOffShowEFST(int)
  public void CActor::GetModifiedHealAmount(int &)
  public void CActor::GetModifiedSPHealAmount(int &)
  public void CActor::OnChangeStatusAmount(int, unsigned short, unsigned long, int)
  public void CActor::NotifyStatusAmount(unsigned short, int)
  public void CActor::ResetStatusAmount(unsigned short, unsigned short)
  public void CActor::ProcessStatusAmount()
  public void CActor::GetPushedPosition(struct PosInfo, struct PosInfo, int, struct PosInfo &)
  public class CCharBuff & InstanceCharBuff()
  public void CActor::BeginSkillPostDelay(unsigned short, int)
  public void CActor::BeginSkillSinglePostDelay(unsigned short, int)
  public void CActor::BeginSkillGlobalPostDelay(unsigned short, int)
  public void CActor::SetSkillSinglePostDelay(unsigned short, unsigned long)
    /* this+0x46c */ class std::map<int,EFFECTIVE_INFO,std::less<int>,std::allocator<std::pair<int const ,EFFECTIVE_INFO> > > m_effectiveList

  /* this+0x47c */ class std::map<int,std::map<unsigned short,AmountValue,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,AmountValue> > >,std::less<int>,std::allocator<std::pair<int const ,std::map<unsigned short,AmountValue,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,AmountValue> > > > > > m_statusEffInfo

  /* this+0x48c */ class CCharBuff m_charBuff2

  protected int CActor::GetPlusPropertyDamage(class CCharacter *, int, int)
  protected int CActor::GetModifyAttackPowerByEffective_Variation(class CCharacter *, int, int)
  public int CActor::GetAdditionalSkillSPCost(const int)
  public int CActor::GetDirection(const struct PosInfo &, const struct PosInfo &)
  public void CActor::GetForwardPosition(int, int, int, int, struct PosInfo &)
  protected void CActor::Init()
  public void CActor::ValidTest_ItemUseBlock()
  public void CActor::ValidTest_MoveBlock()
  public void CActor::ValidTest_SkillUseBlock()
  public void CActor::ValidTest_MeleeAtkBlock()
  public void CActor::ValidTest_ChatBlock()
  /* this+0x4c0 */ class ActorScheduler::CScheduler m_Scheduler

  public void CActor::Process()
  public void CActor::InsertSchedule(class std::tr1::shared_ptr<ActorScheduler::CTask> &)
  public void CActor::DeleteSchedule(const unsigned long)
  public void CActor(class CActor &)
  public void CActor::CActor()
  public void CActor::~CActor()
    public bool CActor::IsActor()
  public enum CActor::SKILL_RETURN CActor::Actor_ThirdJobSkillAttackToCharacter(unsigned short, class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  public enum CActor::SKILL_RETURN CActor::Actor_ThirdJobSkillOperateToCharacter(unsigned short, class CCharacter *, struct MSG_TYPE_SKILLDATA *)
  public enum CActor::SKILL_RETURN CActor::Actor_ThirdJobSkillToGround(unsigned short, struct MSG_TYPE_SKILLDATA *)
  public void CActor::RK_DEATHBOUND_REFLECT(class CCharacter *, int &, short &)
  public void CActor::KnockBack(class CCharacter *, int)
  public bool CActor::IsRightWeaponItemClass(short, short, short)
  public void CActor::Broadcast_ZC_NOTIFY_SKILL2(int, unsigned short, int)
  public void CActor::SkillUseAck(unsigned short, unsigned short, bool, unsigned char)
  protected void CActor::SetBodyStateImpl(const int)
  protected void CActor::ResetBodyStateImpl(const int)
  public void CActor::DetectHidingCharacter(int, struct SKILLATTACK_MSG *, int, int, int)
  public int CActor::UpdateResistByProperty(const int, const int)
  public void CActor::SetEffective_POISONINGWEAPON(const int, class CCharacter *, int)
  public short CActor::GetBodyState()
  private enum CActor::SKILL_RETURN CActor::RK_SONICWAVE(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CActor::RK_DEATHBOUND(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CActor::RK_WINDCUTTER(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CActor::RK_IGNITIONBREAK(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CActor::RK_DRAGONHOWLING(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CActor::RK_GIANTGROWTH(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CActor::GC_CLOAKINGEXCEED(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CActor::GC_PHANTOMMENACE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CActor::GC_HALLUCINATIONWALK(const struct MSG_TYPE_SKILLDATA &)
  private void CActor::ProcessEffective_ELECTRICSHOCKER()
  private void ProcessEffective_CAMOUFLAGE()
  public bool CActor::IsFailStartUseSkill()
  public void CActor::SetHandicapStateEFST(class CCharacter *, const int, const int, const int, const int)
  public void CActor::SetHealthStateTimeInfo(const int, const int, const int)
  public void SetHealthState(short)
  public class CActor & operator=(class CActor &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CActor::GetStateDBFmt::__l2::CStateDBTime {
}

class CActorFormula_CommonSupport {
  public class CCharacter * CActorFormula_CommonSupport::ModifyAttackDamage(class CCharacter *, int &, int, unsigned short, short, bool, int, int)
  public void CActorFormula_CommonSupport::Check_SAFETYWALL(class CCharacter *, int &, short &, int, unsigned short, bool, int)
  public void CActorFormula_CommonSupport::Check_PNEUMA(class CCharacter *, int &, short &, int, unsigned short, bool, int)
  public void CActorFormula_CommonSupport::Check_IMITATIONSKILL(class CCharacter *, unsigned short, short)
  public void CActorFormula_CommonSupport::Check_FOGWALL(class CCharacter *, int &, int, unsigned short)
  public bool CActorFormula_CommonSupport::Check_TargetDamageToZero(class CCharacter *, int &, int, unsigned short, int)
  public void CActorFormula_CommonSupport::Check_TargetModifyDamage(class CCharacter *, int &, int, int, unsigned short)
  public void CActorFormula_CommonSupport::Check_SPIDERWEB(class CCharacter *, int, int &, int)
  public bool CActorFormula_CommonSupport::Check_WEAPONBLOCKING(class CCharacter *, class CCharacter *, const int, const int)
  public void CActorFormula_CommonSupport::Check_VOLCANIC_ASH(int &, const int)
  public void CActorFormula_CommonSupport::ModifyPhysicsAttackHITPercent(class CCharacter *, const int, int &, const int)
  public void CActorFormula_CommonSupport::TargetReflectSkillDamage(class CCharacter *, int &, struct SKILLATTACK_MSG *, class CSkillTypeInfo *, int, int, bool &, const int)
  public void CActorFormula_CommonSupport::TargetReflectAttackDamage(class CCharacter *, int &, short &, int, const int)
  public int CActorFormula_CommonSupport::GetFinalDamageATKPercent_AfterApplyTargetMDEF(class CCharacter *, const unsigned short)
  public void CActorFormula_CommonSupport::EXCEPTION_GetSkillAttackDamage_CheckDistinctDamage(class CCharacter *, int &, const unsigned short, const int, const int)
  public void CActorFormula_CommonSupport::Check_RaceAddDamageSelf(class CPC *, class CCharacter *, const int, int &)
  public void CActorFormula_CommonSupport::Check_AddRaceTolerace(class CPC *, class CCharacter *, const int, int &)
  public void CActorFormula_CommonSupport::Check_ClassAddDamageUSER(class CPC *, class CCharacter *, const int, int &)
  public void CActorFormula_CommonSupport::Check_ClassAddDamageTARGET(class CPC *, class CCharacter *, const int, const int, int &)
  public void CActorFormula_CommonSupport::Check_AddRangeAttackDamageTARGET(class CPC *, const unsigned short, const int, const int, int &)
  public void CActorFormula_CommonSupport::Check_AddRangeAttackDamageUSER(class CPC *, const unsigned short, const int, const int, int &)
  public bool CActorFormula_CommonSupport::IsMagicATKHit(class CCharacter *)
  private bool CActorFormula_CommonSupport::Check_ReflectMagicDamage(class CCharacter *, int, struct SKILLATTACK_MSG *, class CSkillTypeInfo *, int)
  private bool CActorFormula_CommonSupport::Check_PARRYING(class CCharacter *, int &, int)
  private bool CActorFormula_CommonSupport::Check_AUTOGUARD(class CCharacter *, int &, int, unsigned short)
  private void CActorFormula_CommonSupport::Check_LG_REFLECTDAMAGE(class CCharacter *, int)
  private void CActorFormula_CommonSupport::Check_SHIELDSPELL_DEF(class CCharacter *, int, int, int)
  private void CActorFormula_CommonSupport::Check_REFLECTSHIELD(class CCharacter *, int, int)
  private void CActorFormula_CommonSupport::Check_DEATHBOUND(class CCharacter *, int &, short &, int)
  private bool CActorFormula_CommonSupport::Check_ElementalDefensiveEffect(class CCharacter *, int &, short &, const int)
  private bool CActorFormula_CommonSupport::Check_NEUTRALBARRIER(class CCharacter *, int &, int, const int)
  private void CActorFormula_CommonSupport::Check_GRANITIC_ARMOR(int &)
  private void CActorFormula_CommonSupport::Check_ASSUMPTIO2(int &, const unsigned short)
  private bool CActorFormula_CommonSupport::IsPhysicsAttackExceptionMiss(class CCharacter *, int, const int)
  private bool CActorFormula_CommonSupport::IsPhysicsAttackExceptionHit(class CCharacter *, int)
  public void CActorFormula_CommonSupport(class CActor *)
  /* this+0x0 */ class CActor * m_actor
}

class CAgitDB {
  CODBC, offset = 0x0

  public void CAgitDB(const class CAgitDB &)
  public void CAgitDB::CAgitDB()
  public void CAgitDB::~CAgitDB()
  public int CAgitDB::Update(const char *, struct AGIT_DBINFO *)
  public int CAgitDB::Get(class std::vector<AGIT_DBINFO *,std::allocator<AGIT_DBINFO *> > &)
  public class CAgitDB & operator=(const class CAgitDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CAgitInvestMgr {
    *
      public bool isOK()
  public bool CAgitInvestMgr::Init()
  public bool CAgitInvestMgr::SetCycleTBL(const int, const int, const int, const int, const int)
  public void CAgitInvestMgr::SetSchedule(class CAgitMapRes *)
  public const int GetAgitInvestMsg()
  public void SetAgitInvestMsg(const int)
  public long CAgitInvestMgr::GetNextTM(const int)
  public static bool CAgitInvestMgr::CreateInstance()
  public static void CAgitInvestMgr::DestroyInstance()
  private void CAgitInvestMgr::SaveInvestState()
  private void CAgitInvestMgr(const class CAgitInvestMgr &)
  private void CAgitInvestMgr::CAgitInvestMgr()
  private void CAgitInvestMgr::~CAgitInvestMgr()
  private class CAgitInvestMgr & operator=(const class CAgitInvestMgr &)
      /* this+0x4 */ class std::map<int,CAgitInvestMgr::CAgitInvestTBL,std::less<int>,std::allocator<std::pair<int const ,CAgitInvestMgr::CAgitInvestTBL> > > m_mapInvestCycle

  /* [0x0003:0x0004b628] */ static  class CAgitInvestMgr * m_cpSelf
  /* this+0x14 */ bool m_bOK
  /* this+0x18 */ int m_nInvestState
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CAgitInvestMgr::CAgitInvestTBL {
    *
  public void CAgitInvestTBL(const class CAgitInvestMgr::CAgitInvestTBL &)
  public void CAgitInvestTBL(const int, const int, const int, const int)
  public void CAgitInvestMgr::CAgitInvestTBL::~CAgitInvestTBL()
  /* this+0x4 */ int m_nDayOfWeek
  /* this+0x8 */ int m_nHour
  /* this+0xc */ int m_nMin
  /* this+0x10 */ int m_nSec
  public class CAgitInvestMgr::CAgitInvestTBL & operator=(const class CAgitInvestMgr::CAgitInvestTBL &)
  public void * __vecDelDtor(unsigned int)
}

class CAgitMapRes {
  CMapRes, offset = 0x0

  public void CAgitMapRes(const class CAgitMapRes &)
  public void CAgitMapRes::CAgitMapRes(const int)
  public void CAgitMapRes::~CAgitMapRes()
  public void CAgitMapRes::Reset()
  /* this+0x76c */ int m_guildID
  /* this+0x770 */ char[0x18] m_agitName
  /* this+0x788 */ int m_economy
  /* this+0x78c */ int m_defense
  /* this+0x790 */ int m_triggerE
  /* this+0x794 */ int m_triggerD
  /* this+0x798 */ long m_incTime
  /* this+0x79c */ long m_payTime
  /* this+0x7a0 */ int m_noGuardian
  /* this+0x7a4 */ class CNPC *[0x8] m_guardianArray
  /* this+0x7c4 */ class CNPC *[0x3] m_npcArray
  /* this+0x7d0 */ unsigned char m_visibleC
  /* this+0x7d1 */ unsigned char[0x8] m_visibleG
  /* this+0x7dc */ class std::vector<CNPC *,std::allocator<CNPC *> > m_flagNpc

  /* this+0x7ec */ class std::vector<CNPC *,std::allocator<CNPC *> > m_treasureNpc

  /* this+0x7fc */ class std::multimap<long,int,std::less<long>,std::allocator<std::pair<long const ,int> > > m_timerQ

  /* this+0x80c */ int m_isPKTime
  /* this+0x810 */ int m_isDisableSkill
  /* this+0x814 */ int m_createCount
  /* this+0x818 */ int m_siegeTimeVersion
  /* this+0x81c */ char[0x18] m_empeliumConqueror
  /* this+0x834 */ bool m_bInstantMapBlockRequest
  public void CAgitMapRes::OnTimer()
  public int CAgitMapRes::Load(const char *, int, int)
  public static bool CAgitMapRes::SetSiegeTime(const char *, int)
  public static long GetNextSigeTime()
  public static bool CAgitMapRes::SetSiegeTime_v15(const char *, int)
  public static long GetNextSigeTime_v15()
  public void CAgitMapRes::InitAgit(const struct AGIT_DBINFO &)
  public int CAgitMapRes::GetProperty(int, int &)
  public int CAgitMapRes::SetProperty(int, int)
  public int CAgitMapRes::Method(int, int, int)
  public int CAgitMapRes::NpcGetProperty(int, int, int *, int *)
  public int CAgitMapRes::NpcSetProperty(int, int, int)
  public void CAgitMapRes::RegisterNPC(class CNPC *)
  public int CAgitMapRes::RegisterNPC(int, class CNPC *, int *)
  public class CNPC * CAgitMapRes::GetNPC(int)
  public void CAgitMapRes::ChangeOwner(unsigned long)
  public void OnRcvAckFromInter(unsigned char)
  public unsigned long CAgitMapRes::GetGDID()
  public void UnlinkNPC()
  public void CAgitMapRes::Schedule(long, int)
  public int IsPKTime()
  public bool CAgitMapRes::IsAigitMapInit(const unsigned long)
  public static int CAgitMapRes::GetLastSiegemsg(int)
  public static void CAgitMapRes::UpdateLastSiegeMsg(int, int)
  public static bool CAgitMapRes::RegisterFlag(const char *, class CNPC *)
  public static void CAgitMapRes::InsertTable(const char *, int, const char *)
  public static void CAgitMapRes::OnNotifyFromInter(const char *, int)
  public static int CAgitMapRes::IsSiegeTime(class CMapRes *)
  public static int CAgitMapRes::IsSiegeTime()
  public static int IsSiegeTime_ByMapType(int)
  public static int CAgitMapRes::IsSiegeTime_v15()
  public static int CAgitMapRes::OpenHour_SiegeMode(short, unsigned long)
  public static int CAgitMapRes::GetProPertyByMapName(char *, int, int &)
  public static bool IsAgitMap(const char *)
  public bool CAgitMapRes::IsAgit()
  public int GetAgitEconomy()
  public void CAgitMapRes::IncAgitEconomy(const int)
  public void CAgitMapRes::DecAgitEconomy(const int)
  private void CAgitMapRes::TimerProc(long, unsigned long)
  private int CAgitMapRes::GetInvestMoney(int, int *, int)
  private int GetEMoney()
  private int CAgitMapRes::GetECondition()
  private void CAgitMapRes::InvestEconomy()
  private int GetDMoney()
  private int CAgitMapRes::GetDCondition()
  private void CAgitMapRes::InvestDefense()
  private void CAgitMapRes::OnChangeDefense(int)
  private void CAgitMapRes::MakeTreasure()
  private void CAgitMapRes::Flush(int)
  private void CAgitMapRes::OnChangeOwner(int)
  private void SendZenyReqest(unsigned char, int)
  private void CAgitMapRes::SetNextSaveTime()
  private void CAgitMapRes::Save(const bool)
  private void SetEmpeliumCreateTime()
  private int CAgitMapRes::GetTreasureBoxCount()
  private void CAgitMapRes::ExpelOtherGuild()
  /* [0x0003:0x000560c4] */ static  class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,FLAG_INFO *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,FLAG_INFO *> > > m_agitTable

  public void * __vecDelDtor(unsigned int)
}

class CAmpLogonPermit {
  CAsyncMonopolyProcess, offset = 0x0

  public bool CAmpLogonPermit::operator()()
  private bool CAmpLogonPermit::preliminary_inspection()
  private bool CAmpLogonPermit::mercenary()
  private bool CAmpLogonPermit::actor_infomation_first()
  private bool CAmpLogonPermit::actor_infomation_second()
  private bool CAmpLogonPermit::protect()
  private bool CAmpLogonPermit::unknown_first()
  private bool CAmpLogonPermit::skill()
  private bool CAmpLogonPermit::item()
  private bool CAmpLogonPermit::quest()
  private bool CAmpLogonPermit::wedding()
  private bool CAmpLogonPermit::unknown_second()
  private bool CAmpLogonPermit::effect()
  private bool CAmpLogonPermit::expost()
  public void CAmpLogonPermit(const class CAmpLogonPermit &)
  public void CAmpLogonPermit::CAmpLogonPermit(class CPC *, class CLogonPermitADBWork *)
  public void CAmpLogonPermit::~CAmpLogonPermit()
  /* this+0x8 */ class CPC * m_cpPlayer
  /* this+0xc */ class CLogonPermitADBWork * m_cpLogonPermitADBWork
  /* this+0x10 */ const unsigned long m_AID
  /* this+0x14 */ const unsigned long m_GID
    /* this+0x18 */ enum CAmpLogonPermit::enumStep m_Step
  public void * __vecDelDtor(unsigned int)
}

class CAmpOnActorInit {
  CAsyncMonopolyProcess, offset = 0x0

  public bool CAmpOnActorInit::operator()()
  private bool CAmpOnActorInit::StepFunc_Start()
  private bool CAmpOnActorInit::StepFunc_NotifyItem()
  private bool CAmpOnActorInit::StepFunc_Notify()
  private bool CAmpOnActorInit::StepFunc_Map()
  private bool CAmpOnActorInit::StepFunc_End()
  public void CAmpOnActorInit(const class CAmpOnActorInit &)
  public void CAmpOnActorInit(class CPC *)
  public void ~CAmpOnActorInit()
  /* this+0x8 */ class CPC * m_pc
    /* this+0xc */ enum CAmpOnActorInit::enumStep m_Step
  public void * __vecDelDtor(unsigned int)
}

class CArlimiMap2 {
    *
          public void CArlimiMap2(class CArlimiMap2 &)
  public void CArlimiMap2::CArlimiMap2()
  public void CArlimiMap2::~CArlimiMap2()
  /* this+0x4 */ class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA> m_pool

  /* this+0x28 */ class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI> m_maPool

  /* this+0x4c */ class std::map<unsigned long,CArlimiMap2::T_ARLIMI_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CArlimiMap2::T_ARLIMI_DATA *> > > m_arlimiMap

  /* this+0x5c */ class std::map<unsigned long,CArlimiMap2::T_MAP_IN_ARLIMI *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CArlimiMap2::T_MAP_IN_ARLIMI *> > > m_mapInArlimi

  /* this+0x6c */ unsigned int m_index
  public bool CArlimiMap2::AddArlimiMapFromNpc(const int, const unsigned long, const int, const int, const int)
  public const class std::vector<unsigned long,std::allocator<unsigned long> > & CArlimiMap2::GetArlimiIndexList(unsigned long)
  public struct CArlimiMap2::T_ARLIMI_DATA * CArlimiMap2::GetArlimiData(unsigned int)
  public class CArlimiMap2 & operator=(class CArlimiMap2 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CArlimiMap2::T_ARLIMI_DATA {
  /* this+0x0 */ unsigned long t_npcID
  /* this+0x4 */ int t_xPos
  /* this+0x8 */ int t_yPos
  /* this+0xc */ class std::vector<unsigned long,std::allocator<unsigned long> > t_questList

  public void T_ARLIMI_DATA(const struct CArlimiMap2::T_ARLIMI_DATA &)
  public void T_ARLIMI_DATA()
  public void ~T_ARLIMI_DATA()
  public struct CArlimiMap2::T_ARLIMI_DATA & operator=(const struct CArlimiMap2::T_ARLIMI_DATA &)
  public void * __vecDelDtor(unsigned int)
}

struct CArlimiMap2::T_MAP_IN_ARLIMI {
  /* this+0x0 */ unsigned long t_mapID
  /* this+0x4 */ class std::vector<unsigned long,std::allocator<unsigned long> > t_npcList

  public void T_MAP_IN_ARLIMI(const struct CArlimiMap2::T_MAP_IN_ARLIMI &)
  public void T_MAP_IN_ARLIMI()
  public void ~T_MAP_IN_ARLIMI()
  public struct CArlimiMap2::T_MAP_IN_ARLIMI & operator=(const struct CArlimiMap2::T_MAP_IN_ARLIMI &)
  public void * __vecDelDtor(unsigned int)
}

class CAsm {
  public void CAsm::CAsm()
  public void CAsm::~CAsm()
  public bool CAsm::Set(char *)
  public void CAsm::Release()
  public void CAsm::Line(int)
  public void CAsm::Put(char *)
  public void CAsm::Putf(char *, <NoType>)
  public void CAsm::Error(char *)
  public void Errorf(char *, <NoType>)
  public void CAsm::Comment(char *)
  public void CAsm::Commentf(char *, <NoType>)
  /* this+0x0 */ struct _iobuf * m_fp
  /* this+0x4 */ int m_linePos
  public void * __vecDelDtor(unsigned int)
}

class CAsyncMonopolyProcess {
    *
  public bool CAsyncMonopolyProcess::operator()()
  public enum AsyncMonopolyProcess::enumType GetType()
  public void CAsyncMonopolyProcess(const class CAsyncMonopolyProcess &)
  public void CAsyncMonopolyProcess(const enum AsyncMonopolyProcess::enumType)
  public void CAsyncMonopolyProcess::~CAsyncMonopolyProcess()
  /* this+0x4 */ const enum AsyncMonopolyProcess::enumType m_Type
  public void * __vecDelDtor(unsigned int)
}

struct CAsyncOperation {
  _OVERLAPPED, offset = 0x0

  /* this+0x14 */ struct _WSABUF m_dataBuf

  /* this+0x1c */ char[0x2800] m_buffer
    /* this+0x281c */ int m_type
  /* this+0x2820 */ unsigned int m_socket
  /* this+0x2824 */ class CAsyncStream * m_stream
}

class CAsyncStream {
    *
  public void CAsyncStream(const class CAsyncStream &)
  public void CAsyncStream::CAsyncStream(int, int)
  public void CAsyncStream::CAsyncStream()
  public void CAsyncStream::~CAsyncStream()
  public void CAsyncStream::Init(class CPacketHandler *)
  public bool CAsyncStream::Open(unsigned int)
  public void CAsyncStream::Send(int, const char *)
  public bool Send2(const unsigned char *, const int)
  public bool IsSendable2(const int)
  public int CAsyncStream::Close(const bool)
  public unsigned int GetSocket()
  public void CAsyncStream::SetRecvQueueSize(int)
  public void SetSendQueueSize(int)
  public unsigned long GetIP()
  public void CAsyncStream::OnComplete(int, unsigned long, struct CAsyncOperation *)
  public unsigned long GetLastError()
  public class CPacketQueue * GetRecvQueuePtr()
  /* this+0x4 */ unsigned long m_completionKey
    protected int CAsyncStream::SendDataInQueue(int)
  protected int CAsyncStream::OnRecvCompletion(long)
  protected int CAsyncStream::OnSendCompletion(long)
  protected unsigned long CAsyncStream::GenerateCompletionKey()
  /* this+0x8 */ unsigned int m_socket
  /* this+0xc */ class CPacketQueue m_sendQueue

  /* this+0x38 */ class CPacketQueue m_recvQueue

  /* this+0x64 */ struct _RTL_CRITICAL_SECTION m_csLock

  /* this+0x7c */ struct CAsyncOperation m_recvOperation

  /* this+0x28a4 */ struct CAsyncOperation m_sendOperation

  /* this+0x50cc */ class CPacketHandler * m_packetHandler
  /* this+0x50d0 */ unsigned long m_lastError
  public class CAsyncStream & operator=(const class CAsyncStream &)
  public void * __vecDelDtor(unsigned int)
}

class CAttackPlusPowerInfo {
    *
  public void CAttackPlusPowerInfo(const class CAttackPlusPowerInfo &)
  public void CAttackPlusPowerInfo::CAttackPlusPowerInfo()
  public void CAttackPlusPowerInfo::~CAttackPlusPowerInfo()
  public void CAttackPlusPowerInfo::Init(const char *)
  public void CAttackPlusPowerInfo::LoadScript(const char *, int)
  public int CAttackPlusPowerInfo::GetAttackPlusPowerByProperty(int, int)
  public void GetAttackPlusPowerByProperty(int, int, int &)
  public int CAttackPlusPowerInfo::GetAttackPlusPowerByProperty_Variation(int, int, int)
  public int CAttackPlusPowerInfo::GetpropertyID(char *)
  public void CAttackPlusPowerInfo::Reset()
  /* this+0x4 */ struct AttrAttackInfo[0x5] m_info
  /* this+0x7d4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > m_propertyName

  public class CAttackPlusPowerInfo & operator=(const class CAttackPlusPowerInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CAuctionCtrl {
    *
  public void CAuctionCtrl::Init(unsigned long, const char *, const char *)
  public void CAuctionCtrl::Process()
  public int CAuctionCtrl::AddAuction(class CPC *, unsigned long, unsigned long, int, struct CommonItemInfo *, char *, int)
  public int CAuctionCtrl::DeleteAuction(unsigned long, int)
  public int CAuctionCtrl::ChangeBuyerAuction(class CPC *, unsigned long, unsigned long, unsigned long, char *, int)
  public void CAuctionCtrl::FindItem(unsigned long, int, int)
  public void CAuctionCtrl::FindItemAuctionID(unsigned long, unsigned long)
  public void CAuctionCtrl::FindItemName(unsigned long, char *, int)
  public int CAuctionCtrl::AuctionAddCancel(unsigned long, unsigned long, unsigned long)
  public int CAuctionCtrl::ReqMyInfo(int, unsigned long, unsigned long)
  public int CAuctionCtrl::MySellStop(unsigned long, unsigned long, unsigned long)
  public int CAuctionCtrl::GetCountSellItem(unsigned long, unsigned long)
  public int CAuctionCtrl::GetCountBuyItem(unsigned long, unsigned long)
  private int CAuctionCtrl::SendMailAuctionEnd(struct AUCTIONINFO *)
  private int CAuctionCtrl::SendMailAuctionCanle(struct AUCTIONINFO *)
  private int CAuctionCtrl::SendBuyerAuctionCancel(struct AUCTIONINFO *, unsigned long)
  private void CAuctionCtrl::TimeOver(int)
  private struct AUCTIONINFO * CAuctionCtrl::GetAuctionInfo(unsigned long)
  private void CAuctionCtrl::ItemParser(int)
  private int CAuctionCtrl::GetAuctionType(int)
  private void CAuctionCtrl::SendAuctionInfo(unsigned long, int, int, char *, int)
  private void CAuctionCtrl::GetClientItemName(int, char *)
    /* this+0x4 */ int m_ZoneServerID
  /* this+0x8 */ class CAuctionDB m_AuctionDB

  /* this+0x1c */ class CDateTime m_DateTime

  /* this+0x20 */ unsigned long m_lastTime
  /* this+0x24 */ int m_EndChkItemType
  /* this+0x28 */ class std::map<unsigned long,AUCTIONINFO *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,AUCTIONINFO *> > > m_ArmorItem

  /* this+0x38 */ class std::map<unsigned long,AUCTIONINFO *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,AUCTIONINFO *> > > m_WeaponItem

  /* this+0x48 */ class std::map<unsigned long,AUCTIONINFO *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,AUCTIONINFO *> > > m_CardItem

  /* this+0x58 */ class std::map<unsigned long,AUCTIONINFO *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,AUCTIONINFO *> > > m_EtcItem

  /* this+0x68 */ class CMemoryMgr<AUCTIONINFO> m_ArmorPool

  /* this+0x8c */ class CMemoryMgr<AUCTIONINFO> m_WeaponPool

  /* this+0xb0 */ class CMemoryMgr<AUCTIONINFO> m_CardPool

  /* this+0xd4 */ class CMemoryMgr<AUCTIONINFO> m_EtcPool

  public void CAuctionCtrl(class CAuctionCtrl &)
  public void CAuctionCtrl::CAuctionCtrl()
  public void CAuctionCtrl::~CAuctionCtrl()
  public class CAuctionCtrl & operator=(class CAuctionCtrl &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CAuctionDB {
  CODBC, offset = 0x0

  public unsigned long CAuctionDB::AddAuction(unsigned long, struct DBAUCTIONINFO *)
  public int CAuctionDB::DeleteAuction(unsigned long)
  public int CAuctionDB::ChangeBuyerAuction(unsigned long, unsigned long, unsigned long, char *, int)
  public int CAuctionDB::GetAuction(unsigned long, int, class CMemoryMgr<AUCTIONINFO> *, class std::map<unsigned long,AUCTIONINFO *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,AUCTIONINFO *> > > &)
  public int CAuctionDB::GetBuyerAuctionID(unsigned long, unsigned long, unsigned long, unsigned long *)
  public int CAuctionDB::GetSellerAuctionID(unsigned long, unsigned long, unsigned long, unsigned long *)
  public int CAuctionDB::GetCountSellItem(unsigned long, unsigned long, unsigned long)
  public int CAuctionDB::GetCountBuyItem(unsigned long, unsigned long, unsigned long)
  public void CAuctionDB(const class CAuctionDB &)
  public void CAuctionDB::CAuctionDB()
  public void CAuctionDB::~CAuctionDB()
  public class CAuctionDB & operator=(const class CAuctionDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CAutoSpellVar {
    *
  public void CAutoSpellVar::Set(const unsigned int, const unsigned int, const unsigned int)
  public void CAutoSpellVar::Reset(const unsigned int)
  public void CAutoSpellVar::Pause(const unsigned int)
  public void CAutoSpellVar::Resume(const unsigned int)
  public unsigned int GetPermill()
  public unsigned int GetLevel()
  public bool GetActive()
  public void CAutoSpellVar::CAutoSpellVar(const class CAutoSpellVar &)
  public void CAutoSpellVar::CAutoSpellVar()
  public void CAutoSpellVar::~CAutoSpellVar()
    /* this+0x4 */ int m_PlayRefCnt
  /* this+0x8 */ class CAutoSpellVar::lcData m_Data

  /* this+0x18 */ class std::vector<CAutoSpellVar::lcData,std::allocator<CAutoSpellVar::lcData> > m_History

  public class CAutoSpellVar & operator=(const class CAutoSpellVar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CAutoSpellVar::lcData {
    *
  public bool operator<(const class CAutoSpellVar::lcData &)
  public bool operator==(const class CAutoSpellVar::lcData &)
  public void lcData(const class CAutoSpellVar::lcData &)
  public void lcData(const unsigned int, const unsigned int, const unsigned int)
  public void lcData()
  public void CAutoSpellVar::lcData::~lcData()
  /* this+0x4 */ unsigned int m_Identity
  /* this+0x8 */ unsigned int m_Level
  /* this+0xc */ unsigned int m_Permill
  public class CAutoSpellVar::lcData & operator=(const class CAutoSpellVar::lcData &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CBattleFieldMapRes {
  CMapRes, offset = 0x0

  public void CBattleFieldMapRes(const class CBattleFieldMapRes &)
  public void CBattleFieldMapRes::CBattleFieldMapRes(const int)
  public bool CBattleFieldMapRes::IsBattleField()
  public void CBattleFieldMapRes::ClearState()
  public void CBattleFieldMapRes::BroadcastToCamp(char, int, char *)
  public void CBattleFieldMapRes::SetBattleFieldMapInfo(char *, char *)
  public void CBattleFieldMapRes::UpdateCampPoint(char, int)
  public int CBattleFieldMapRes::GetCampPoint(char)
  public void CBattleFieldMapRes::UpdateRespawnPoint2ByNPC(char)
  public void CBattleFieldMapRes::MovePlayerToRespawnPoint(char, short, unsigned long)
  public void CBattleFieldMapRes::UpdateRespawnPoint2(char, short, short)
  public void CBattleFieldMapRes::GetPacketBattleFieldPoint(int &, char *, const int)
  public bool IsPKPoint()
  public bool IsAlivePCCheck()
  public int CBattleFieldMapRes::AddCharacter(int, int, class CCharacter *)
  public void CBattleFieldMapRes::InsertAliveMember(char, unsigned long)
  public void CBattleFieldMapRes::DeleteAliveMember(char, unsigned long)
  public void CBattleFieldMapRes::NotifyCampPoint()
  public void CBattleFieldMapRes::RegisterNpc(class CNPC *)
  public void CBattleFieldMapRes::SendNpcServer()
  public int CBattleFieldMapRes::GetAliveMemberCount(char)
  public void CBattleFieldMapRes::StartAliveCheck()
  public void CBattleFieldMapRes::SetNpcNotify_Switch(const char *)
  public bool CBattleFieldMapRes::SetBattleFieldMovePostion(const char, const int, const int)
  public bool IsAliveCheck()
  /* this+0x76c */ struct BATTLEFIELD_MAPINFO m_mapInfo

  /* this+0x778 */ struct BATTLEFIELD_STATEINFO m_stateInfo

  /* this+0x780 */ class std::list<unsigned long,std::allocator<unsigned long> > m_a_aliveMemberList

  /* this+0x78c */ class std::list<unsigned long,std::allocator<unsigned long> > m_b_aliveMemberList

  /* this+0x798 */ class CNPC * m_campNpc
  /* this+0x79c */ bool m_aliveCheck
  /* this+0x79d */ bool m_checkNpcNoti
  /* this+0x79e */ bool m_campCommand
  public void ~CBattleFieldMapRes()
  public void * __vecDelDtor(unsigned int)
}

class CBigMonster {
  public int CBigMonster::GetRadius(class CCharacter *)
  public bool CBigMonster::InsertTable(const int, const int)
  public bool CBigMonster::LoadLuaFile()
  public static bool CBigMonster::CreateInstance()
  public static void CBigMonster::DestroyInstance()
  public bool isOK()
  public void CBigMonster(const class CBigMonster &)
  private void CBigMonster::CBigMonster()
  private void CBigMonster::~CBigMonster()
    /* [0x0003:0x0004b29c] */ static  class CBigMonster * m_cpSelf
  /* this+0x0 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_mapBigMonster

  /* this+0x10 */ bool m_bOK
  public class CBigMonster & operator=(const class CBigMonster &)
  private void * __vecDelDtor(unsigned int)
}

class CBin {
  public void CBin::CBin()
  public void CBin::~CBin()
  public bool CBin::Set(char *)
  public void CBin::Release()
  public int CBin::GetPos()
  public void CBin::Seek(int)
  public void CBin::WriteByte(int)
  public void CBin::WriteWord(int)
  public void WriteDword(int)
  public void CBin::WriteNum(int)
  public void CBin::WriteStr(char *)
  /* this+0x0 */ struct _iobuf * m_fp
  public void * __vecDelDtor(unsigned int)
}

class CBinBuf {
  public void CBinBuf::CBinBuf()
  public void CBinBuf::~CBinBuf()
  public void CBinBuf::Clear()
  public bool CBinBuf::Load(char *)
  public char * CBinBuf::GetBase()
  public int CBinBuf::GetSize()
  /* this+0x0 */ char * m_buf
  /* this+0x4 */ int m_bufSize
  public void * __vecDelDtor(unsigned int)
}

class CBlock {
  public void CBlock(const class CBlock &)
  public void CBlock::CBlock()
  public void CBlock::~CBlock()
  public bool CBlock::Start(int)
  public bool CBlock::Link(int)
  public bool CBlock::End(int)
  public int CBlock::GetStartId()
  public int CBlock::GetCurId()
  public int CBlock::GetNextId()
  public int CBlock::GetEndId()
  public bool CBlock::GetInfo(int, int &)
  public void CBlock::GetStrInfo(char *, const int)
  public bool CBlock::IsComplete()
  private void CBlock::Label(int, int)
  /* this+0x0 */ int m_alloc
  /* this+0x4 */ int m_pos
  /* this+0x8 */ int m_step
  /* this+0xc */ int m_depth
  /* this+0x10 */ class std::stack<int,std::deque<int,std::allocator<int> > > m_posStack

  /* this+0x28 */ class std::stack<int,std::deque<int,std::allocator<int> > > m_stepStack

  /* this+0x40 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_infoMap

  public class CBlock & operator=(const class CBlock &)
  public void * __vecDelDtor(unsigned int)
}

class CBotMngr {
    *
    /* this+0x4 */ class std::set<short,std::less<short>,std::allocator<short> > m_skills

  /* this+0x14 */ class std::map<int,_BOTDATA,std::less<int>,std::allocator<std::pair<int const ,_BOTDATA> > > m_aidBotData

  /* this+0x24 */ unsigned long m_atmPercent
  /* this+0x28 */ unsigned long m_maxWarning
  /* this+0x2c */ unsigned long m_penaltyTerm
  /* this+0x30 */ unsigned long m_penalty
  public void CBotMngr(const class CBotMngr &)
  public void CBotMngr::CBotMngr()
  public void CBotMngr::~CBotMngr()
  public bool Check(int, short, unsigned long, unsigned long)
  public void Init(const char *)
  public void LoadInf(const char *)
  protected void SetSkills()
  protected int ProcessPenalty(int)
  public class CBotMngr & operator=(const class CBotMngr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CBroadCastFunc {
    *
  public void operator()(class CPC *)
  public void CBroadCastFunc(const class CBroadCastFunc &)
  public void CBroadCastFunc()
  public void CBroadCastFunc::~CBroadCastFunc()
  public class CBroadCastFunc & operator=(const class CBroadCastFunc &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CBroadCastingSpecialItemListMgr {
  public bool isOK()
  public bool CBroadCastingSpecialItemListMgr::InsertItem(const int)
  public bool CBroadCastingSpecialItemListMgr::IsBroadCast(const int)
  public static bool CBroadCastingSpecialItemListMgr::CreateInstance()
  public static void CBroadCastingSpecialItemListMgr::DestroyInstance()
  public void CBroadCastingSpecialItemListMgr(const class CBroadCastingSpecialItemListMgr &)
  private void CBroadCastingSpecialItemListMgr::CBroadCastingSpecialItemListMgr()
  private void CBroadCastingSpecialItemListMgr::~CBroadCastingSpecialItemListMgr()
  private bool CBroadCastingSpecialItemListMgr::Init()
  /* [0x0003:0x0004b2a0] */ static  class CBroadCastingSpecialItemListMgr * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::set<int,std::less<int>,std::allocator<int> > m_Container

  public class CBroadCastingSpecialItemListMgr & operator=(const class CBroadCastingSpecialItemListMgr &)
  private void * __vecDelDtor(unsigned int)
}

class CBuffInfo {
    *
  public void CBuffInfo(const class CBuffInfo &)
  public void CBuffInfo(int, const char *)
  public void Init(bool, bool, bool, bool, bool)
  public bool IsResetPretendDead()
  public bool IsExistScript()
  public int GetType()
  public const char * GetName()
  public bool IsResetDead()
  public void SetResetDead(bool)
  public bool IsResetDispel()
  public void SetResetDispel(bool)
  public bool IsSave()
  public void SetSave(bool)
  public bool IsSend()
  public void SetSend(bool)
  public bool IsIgnorePretendDead()
  public void SetIgnorePretendDead(bool)
  public bool IsDeBuff()
  public void SetDeBuff(bool)
  public bool IsResetCLEARANCE()
  public void SetResetCLEARANCE(bool)
  public bool IsGC_NEWPOISON()
  public void SetGC_NEWPOISON(bool)
  /* this+0x4 */ int m_type
  /* this+0x8 */ bool m_isResetDead
  /* this+0x9 */ bool m_isResetDispel
  /* this+0xa */ bool m_isSave
  /* this+0xb */ bool m_isSend
  /* this+0xc */ bool m_isIgnorePretendDead
  /* this+0xd */ bool m_isDeBuff
  /* this+0xe */ bool m_isResetCLEARANCE
  /* this+0xf */ bool m_isGC_NEWPOISON
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_name

  public void ~CBuffInfo()
  public class CBuffInfo & operator=(const class CBuffInfo &)
  public void * __vecDelDtor(unsigned int)
}

class CBuffInfoMgr {
  public void CBuffInfoMgr::~CBuffInfoMgr()
  public bool Create()
  public bool InitBuffScript()
  public class CBuffInfo * GetBuffInfo(const char *)
  public class CBuffInfo * GetBuffInfo(int)
  public bool IsSendPacket(int)
  public bool RunBuffScript(unsigned long, int, int)
  public int GetBuffType(const char *)
  private class CBuffInfo * AddBuffInfo(int, const char *)
  private class CBuffInfo * AddBuffInfoWithScript(int, const char *)
  private void CBuffInfoMgr::Reset()
  /* this+0x0 */ class std::map<int,CBuffInfo *,std::less<int>,std::allocator<std::pair<int const ,CBuffInfo *> > > m_buffInfoMap

  /* this+0x10 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > m_buffInfoNames

  /* this+0x20 */ class CBinBuf m_binBuf

  public void CBuffInfoMgr(const class CBuffInfoMgr &)
  public void CBuffInfoMgr()
  public class CBuffInfoMgr & operator=(const class CBuffInfoMgr &)
  public void * __vecDelDtor(unsigned int)
}

class CBuffInfoScanner {
  CInterpretHandler, offset = 0x0

  public void CBuffInfoScanner(const class CBuffInfoScanner &)
  public void CBuffInfoScanner()
  public bool Scan(class CBinBuf *)
  public bool OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  public void OnError(const char *)
  private bool FuncBuff(const char *)
  /* this+0x8 */ bool m_isError
  /* this+0xc */ class CInterpreter m_interpreter

  /* this+0x4c */ class CBuffInfoWithScript * m_buffInfoWithScript
  public void ~CBuffInfoScanner()
  public class CBuffInfoScanner & operator=(const class CBuffInfoScanner &)
  public void * __vecDelDtor(unsigned int)
}

class CBuffInfoWithScript {
  CBuffInfo, offset = 0x0

  public void CBuffInfoWithScript(const class CBuffInfoWithScript &)
  public void CBuffInfoWithScript(int, const char *)
  public void ~CBuffInfoWithScript()
  public bool IsExistScript()
  public void AddScript(int, int)
  public int GetScriptPos(int)
  /* this+0x2c */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_scriptPos

  public class CBuffInfoWithScript & operator=(const class CBuffInfoWithScript &)
  public void * __vecDelDtor(unsigned int)
}

class CBuyingStoreItemList {
  public bool CBuyingStoreItemList::OpenFileBuyingStoreItemList()
  public bool CBuyingStoreItemList::IsPossibleTradeItem(const unsigned short)
  /* this+0x0 */ class std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > m_BuyingStoreItemList

  public void CBuyingStoreItemList(const class CBuyingStoreItemList &)
  public void CBuyingStoreItemList()
  public void ~CBuyingStoreItemList()
  public class CBuyingStoreItemList & operator=(const class CBuyingStoreItemList &)
  public void * __vecDelDtor(unsigned int)
}

class CCSAuth {
  private void CCSAuth(const class CCSAuth &)
  public void CCSAuth()
  public void ~CCSAuth()
  public void Init()
  public unsigned long IsAuth()
  public unsigned long GetAuthDword()
  public unsigned long CheckAuthDword(unsigned long)
  public unsigned long GetAuthResults(unsigned long, unsigned long *, unsigned long)
  public unsigned long EncryptPacket(void *, unsigned long)
  public unsigned long DecryptPacket(void *, unsigned long)
  public unsigned long PPGetLastError()
  protected unsigned long TransAuthDword(unsigned long, int)
  protected void np_srandom(unsigned long)
  protected unsigned long np_random()
  protected unsigned long CheckLastPacket(unsigned long)
  private class CCSAuth & operator=(const class CCSAuth &)
  /* this+0x0 */ unsigned long m_dwSeed
  /* this+0x4 */ unsigned long m_dwAuthValue
  /* this+0x8 */ unsigned long m_bAuth
  /* this+0xc */ unsigned long m_dwCurrIndex
  /* this+0x10 */ char[0x5][0x8] m_table
  /* this+0x38 */ unsigned long m_dwClientSequenceNumber
  /* this+0x3c */ unsigned long m_dwServerSequenceNumber
  /* this+0x40 */ unsigned long[0xc] m_adwLastSeqs
  /* this+0x70 */ unsigned long m_dwPPLastError
  /* this+0x74 */ unsigned long m_dwSeq
  public void * __vecDelDtor(unsigned int)
}

class CCSAuth2 {
  public void CCSAuth2()
  public void ~CCSAuth2()
  /* this+0x0 */ struct _GG_AUTH_PROTOCOL * m_pProtocol
  /* this+0x4 */ unsigned long m_bPrtcRef
  /* this+0x8 */ unsigned long m_dwUserFlag
  /* this+0xc */ struct _GG_AUTH_DATA m_AuthQuery

  /* this+0x1c */ struct _GG_AUTH_DATA m_AuthAnswer

  public void Init()
  public unsigned long GetAuthQuery()
  public unsigned long CheckAuthAnswer()
  public void * __vecDelDtor(unsigned int)
}

struct CCallS {
  /* this+0x0 */ function  * func
  /* this+0x4 */ void * ud
}

class CCashItemList {
    *
    private class CCashItemList::ANAYSISRET CCashItemList::Anaysis(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool CCashItemList::Load()
  public void CCashItemList(const class CCashItemList &)
  public void CCashItemList::CCashItemList()
  public void CCashItemList::~CCashItemList()
  public class CCashItemList & operator=(const class CCashItemList &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CCashItemList::ANAYSISRET {
    /* this+0x0 */ class CFTToken Token

  /* this+0x2c */ enum CCashItemList::ANAYSISRET::enumCode Code
  public void ANAYSISRET(const class CCashItemList::ANAYSISRET &)
  public void ANAYSISRET(const enum CCashItemList::ANAYSISRET::enumCode, class CFTToken &)
  public void ANAYSISRET(const enum CCashItemList::ANAYSISRET::enumCode)
  public void CCashItemList::ANAYSISRET::~ANAYSISRET()
  public class CCashItemList::ANAYSISRET & operator=(const class CCashItemList::ANAYSISRET &)
  public void * __vecDelDtor(unsigned int)
}

class CCashItemShopDB {
  CODBCV2, offset = 0x0

  /* [0x0003:0x0004b5dc] */ static  class CCashItemShopDB * m_cpSelf
  private bool CCashItemShopDB::InsertLog(class CCashItemShopLogRecord &)
  public static class CCashItemShopDB * CCashItemShopDB::GetObj()
  public bool CCashItemShopDB::GetCash(const int, const char *, int &, int &)
  public bool PlusUpdateCash(const int, const char *, const int, const int, const int, int &, int &, int &)
  public bool CCashItemShopDB::MinusUpdateCash(const int, const char *, const int, const int, const int, int &, int &, int &)
  public void CCashItemShopDB::Log(const enum CCashItemShopLogRecord::enumACTION, class CPC *, class CNPC *, class IVItItem *, const int, const int, const int, const int)
  public void CCashItemShopDB(const class CCashItemShopDB &)
  private void CCashItemShopDB::CCashItemShopDB()
  private void CCashItemShopDB::~CCashItemShopDB()
  public class CCashItemShopDB & operator=(const class CCashItemShopDB &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CCashItemShopLogRecord {
    *
    /* this+0x8 */ enum CCashItemShopLogRecord::enumACTION m_Action
    /* this+0xc */ int m_ServerID
  /* this+0x10 */ char[0x10] m_MapName
  /* this+0x20 */ int m_AccountID
  /* this+0x24 */ char[0x18] m_AccountName
  /* this+0x3c */ unsigned long m_CharacterID
  /* this+0x40 */ char[0x18] m_CharacterName
  /* this+0x58 */ char[0x14] m_AcceptIPaddr
  /* this+0x6c */ int m_PosX
  /* this+0x70 */ int m_PosY
  /* this+0x74 */ unsigned long m_ItemID
  /* this+0x78 */ char[0x18] m_ItemName
  /* this+0x90 */ unsigned long m_ItemCount
  /* this+0x98 */ __int64 m_ItemSerial
  /* this+0xa0 */ struct EQUIPSLOTINFO m_ItemSlotInfo

  /* this+0xa8 */ int m_RefingLevel
  /* this+0xac */ char[0x33] m_NPCName
  /* this+0xe0 */ int m_ItemCashPrice
  /* this+0xe4 */ int m_ViewCash
  /* this+0xe8 */ int m_BeforeCash
  /* this+0xec */ int m_AfterCash
  protected void CCashItemShopLogRecord::AlwaysDestIncNULLstrncpy(char *, const char *, const int)
  protected void CCashItemShopLogRecord::SetPlayerIdentity(class CPC *)
  protected void CCashItemShopLogRecord::SetShopIdentity(class CNPC *)
  protected void CCashItemShopLogRecord::SetItemIdentity(class IVItItem *)
  protected void CCashItemShopLogRecord::SetCashIdentity(const int, const int, const int, const int)
  protected class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CCashItemShopLogRecord::GetStringFromat()
  public void CCashItemShopLogRecord(const class CCashItemShopLogRecord &)
  public void CCashItemShopLogRecord::CCashItemShopLogRecord()
  public void CCashItemShopLogRecord::~CCashItemShopLogRecord()
  public class CCashItemShopLogRecord & operator=(const class CCashItemShopLogRecord &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CCashItemShopScript {
    *
            /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<CCashItemShopScript::CProduct,std::allocator<CCashItemShopScript::CProduct> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<CCashItemShopScript::CProduct,std::allocator<CCashItemShopScript::CProduct> > > > > m_ItemStandContainer

  /* [0x0003:0x0004b5e0] */ static  class CCashItemShopScript * m_cpSelf
    private class CCashItemShopScript::ANAYSISRET CCashItemShopScript::Anaysis(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public static class CCashItemShopScript * CCashItemShopScript::GetObj()
  public void WriteFile(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public class std::vector<CCashItemShopScript::CProduct,std::allocator<CCashItemShopScript::CProduct> > * CCashItemShopScript::GetStandMapPtr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public int CCashItemShopScript::GetItemPrice(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const unsigned short)
  public bool CCashItemShopScript::Init()
  public void CCashItemShopScript(const class CCashItemShopScript &)
  private void CCashItemShopScript::CCashItemShopScript()
  private void CCashItemShopScript::~CCashItemShopScript()
  public class CCashItemShopScript & operator=(const class CCashItemShopScript &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CCashItemShopScript::ANAYSISRET {
    /* this+0x0 */ class CFTToken Token

  /* this+0x2c */ enum CCashItemShopScript::ANAYSISRET::enumCode Code
  public void ANAYSISRET(const class CCashItemShopScript::ANAYSISRET &)
  public void ANAYSISRET(const enum CCashItemShopScript::ANAYSISRET::enumCode, class CFTToken &)
  public void ANAYSISRET(const enum CCashItemShopScript::ANAYSISRET::enumCode)
  public void CCashItemShopScript::ANAYSISRET::~ANAYSISRET()
  public class CCashItemShopScript::ANAYSISRET & operator=(const class CCashItemShopScript::ANAYSISRET &)
  public void * __vecDelDtor(unsigned int)
}

class CCashItemShopScript::CProduct {
  /* this+0x0 */ unsigned short m_ITID
  /* this+0x4 */ int m_Price
  public bool operator==(const class CCashItemShopScript::CProduct &)
  public void CProduct()
  public void CProduct(const unsigned short, const int)
  public void ~CProduct()
  public void * __vecDelDtor(unsigned int)
}

class CChangeJobADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CChangeJobADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ const unsigned long m_AID
  /* this+0x20 */ const int m_ChangeJob
  /* this+0x24 */ const int m_JobLevel
  /* this+0x28 */ int m_ADD_SYS_SKID
  private bool CChangeJobADBWork::ExecQuery(class NODBCCtrl &)
  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const int GetChanageJob()
  public const int GetADD_SYS_SK_ID()
  public const int GetADD_SYS_SK_DATA()
  public const enum CChangeJobADBWork::enumResult GetResult()
  public void CChangeJobADBWork(const class CChangeJobADBWork &)
  public void CChangeJobADBWork::CChangeJobADBWork(const unsigned long, const unsigned long, const int, const int)
  public void CChangeJobADBWork::~CChangeJobADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CChangeMaterialLog {
  CDatabaseLog<CChangeMaterialLogStuff::CRecord *>, offset = 0x0

  public void CChangeMaterialLog::ConnectToDatabase(const char *)
  public void CChangeMaterialLog::Add(const int, class CPC *, class IVItItem *, const int)
  private int CChangeMaterialLog::SaveToDatabase(void *, class CChangeMaterialLogStuff::CRecord *)
  public void CChangeMaterialLog(const class CChangeMaterialLog &)
  public void CChangeMaterialLog()
  public void ~CChangeMaterialLog()
  public class CChangeMaterialLog & operator=(const class CChangeMaterialLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CChangeMaterialLogStuff::CRecord {
  /* this+0x0 */ const int m_action
  /* this+0x4 */ int m_zsid
  /* this+0x8 */ int m_gid
  /* this+0xc */ char[0x11] m_mapname
  /* this+0x20 */ int m_xpos
  /* this+0x24 */ int m_ypos
  /* this+0x28 */ int m_itid
  /* this+0x2c */ int m_itcnt
  /* this+0x30 */ int[0x4] m_slot
  /* this+0x40 */ int m_itrefinglevel
  /* this+0x48 */ __int64 m_itserial
  public void CRecord(const int)
  public void ~CRecord()
  public void * __vecDelDtor(unsigned int)
}

class CChangeMaterialMgr {
  public bool isOK()
    /* this+0x0 */ class std::map<CChangeMaterialMgrStuff::lcClassification,CChangeMaterialMgrStuff::lcBook,std::less<CChangeMaterialMgrStuff::lcClassification>,std::allocator<std::pair<CChangeMaterialMgrStuff::lcClassification const ,CChangeMaterialMgrStuff::lcBook> > > m_Library

  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CChangeMaterialMgr::InsertRecipe(class std::vector<CChangeMaterialMgrStuff::lcItem,std::allocator<CChangeMaterialMgrStuff::lcItem> >, const class std::vector<CChangeMaterialMgrStuff::lcProduct,std::allocator<CChangeMaterialMgrStuff::lcProduct> > &, const int)
    public struct std::pair<int,std::vector<CChangeMaterialMgrStuff::lcItem,std::allocator<CChangeMaterialMgrStuff::lcItem> > > CChangeMaterialMgr::ChangeMaterial(class std::vector<CChangeMaterialMgrStuff::lcItem,std::allocator<CChangeMaterialMgrStuff::lcItem> > &)
  public void CChangeMaterialMgr::PriceTest()
  public static bool CChangeMaterialMgr::CreateInstance()
  public static void CChangeMaterialMgr::DestroyInstance()
  public void CChangeMaterialMgr(const class CChangeMaterialMgr &)
  private void CChangeMaterialMgr::CChangeMaterialMgr()
  private void CChangeMaterialMgr::~CChangeMaterialMgr()
  private bool CChangeMaterialMgr::Init()
  /* [0x0003:0x0004b2a4] */ static  class CChangeMaterialMgr * m_cpSelf
  /* this+0x10 */ bool m_bOK
  public class CChangeMaterialMgr & operator=(const class CChangeMaterialMgr &)
  private void * __vecDelDtor(unsigned int)
}

class CChangeMaterialMgrStuff::lcBook {
  /* this+0x0 */ class std::vector<CChangeMaterialMgrStuff::lcRecipe,std::allocator<CChangeMaterialMgrStuff::lcRecipe> > m_Recipes

  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CChangeMaterialMgrStuff::lcBook::InsertRecipe(const class std::vector<CChangeMaterialMgrStuff::lcItem,std::allocator<CChangeMaterialMgrStuff::lcItem> >, const class std::vector<CChangeMaterialMgrStuff::lcProduct,std::allocator<CChangeMaterialMgrStuff::lcProduct> >, const int)
  public void lcBook(const class CChangeMaterialMgrStuff::lcBook &)
  public void lcBook()
  public void CChangeMaterialMgrStuff::lcBook::~lcBook()
  public class CChangeMaterialMgrStuff::lcBook & operator=(const class CChangeMaterialMgrStuff::lcBook &)
  public void * __vecDelDtor(unsigned int)
}

class CChangeMaterialMgrStuff::lcClassification {
  /* this+0x0 */ class std::vector<int,std::allocator<int> > m_Materials

  public bool CChangeMaterialMgrStuff::lcClassification::operator<(const class CChangeMaterialMgrStuff::lcClassification &)
  public void lcClassification(const class CChangeMaterialMgrStuff::lcClassification &)
  public void CChangeMaterialMgrStuff::lcClassification::lcClassification(const class std::vector<CChangeMaterialMgrStuff::lcItem,std::allocator<CChangeMaterialMgrStuff::lcItem> > &)
  public void CChangeMaterialMgrStuff::lcClassification::~lcClassification()
  public class CChangeMaterialMgrStuff::lcClassification & operator=(const class CChangeMaterialMgrStuff::lcClassification &)
  public void * __vecDelDtor(unsigned int)
}

class CChangeMaterialMgrStuff::lcItem {
  /* this+0x0 */ int m_ID
  /* this+0x4 */ int m_Cnt
  public bool operator<(const class CChangeMaterialMgrStuff::lcItem &)
  public void lcItem(const int, const int)
  public void lcItem()
  public void ~lcItem()
  public void * __vecDelDtor(unsigned int)
}

class CChangeMaterialMgrStuff::lcProduct {
  CChangeMaterialMgrStuff::lcItem, offset = 0x0

  /* this+0x8 */ int m_PermillRandomFactor
  public void lcProduct(const class CChangeMaterialMgrStuff::lcItem &, const int)
  public void ~lcProduct()
  public void * __vecDelDtor(unsigned int)
}

class CChangeMaterialMgrStuff::lcRecipe {
  /* this+0x0 */ class std::vector<CChangeMaterialMgrStuff::lcItem,std::allocator<CChangeMaterialMgrStuff::lcItem> > m_Materials

  /* this+0x10 */ class std::vector<CChangeMaterialMgrStuff::lcProduct,std::allocator<CChangeMaterialMgrStuff::lcProduct> > m_Products

  /* this+0x20 */ int m_PermillRandomFactor
  public bool CChangeMaterialMgrStuff::lcRecipe::operator==(const class CChangeMaterialMgrStuff::lcRecipe &)
  public void CChangeMaterialMgrStuff::lcRecipe::lcRecipe(const class CChangeMaterialMgrStuff::lcRecipe &)
  public void lcRecipe(const class std::vector<CChangeMaterialMgrStuff::lcItem,std::allocator<CChangeMaterialMgrStuff::lcItem> >, const class std::vector<CChangeMaterialMgrStuff::lcProduct,std::allocator<CChangeMaterialMgrStuff::lcProduct> >, const int)
  public void CChangeMaterialMgrStuff::lcRecipe::~lcRecipe()
  public class CChangeMaterialMgrStuff::lcRecipe & operator=(const class CChangeMaterialMgrStuff::lcRecipe &)
  public void * __vecDelDtor(unsigned int)
}

class CCharBuff {
    *
            public void CCharBuff(const class CCharBuff &)
  public void CCharBuff()
  public void CCharBuff::~CCharBuff()
  public void SetOwner(class CCharacter *)
  public bool CCharBuff::UpdateParameterValue(unsigned short, int)
  public int CCharBuff::GetParameterValue(unsigned short)
  public void Update_Damaged_DirectSubPercent(int)
  public void Update_Damaged_MagicSubPercent(int)
  public int Get_Damaged_DirectSubPercent()
  public int Get_Damaged_MagicSubPercent()
  public void Update_Heal_HP_ModifyPercent(int)
  public void Update_Heal_SP_ModifyPercent(int)
  public int Get_Heal_HP_ModifyPercent()
  public int Get_Heal_SP_ModifyPercent()
  public void Update_ImmuneMagic_Percent(int)
  public int Get_ImmnueMagic_Percnet()
  public void CCharBuff::Reset()
  /* this+0x4 */ class CCharacter * m_owner
  /* this+0x8 */ struct CCharBuff::CHAR_BUFF_STATUS m_status

  /* this+0x1c */ struct CCharBuff::CHAR_BUFF_DAMAGED m_damaged

  /* this+0x24 */ struct CCharBuff::CHAR_BUFF_HEAL m_heal

  /* this+0x2c */ struct CCharBuff::CHAR_BUFF_ASPD m_aspd

  /* this+0x30 */ struct CCharBuff::CHAR_BUFF_IMMUNEMAGIC m_immuneMagic

  public class CCharBuff & operator=(const class CCharBuff &)
  public void * __vecDelDtor(unsigned int)
}

struct CCharBuff::CHAR_BUFF_ASPD {
  /* this+0x0 */ int plusAttackSpeedPercent
}

struct CCharBuff::CHAR_BUFF_DAMAGED {
  /* this+0x0 */ int directSubPercent
  /* this+0x4 */ int magicSubPercent
}

struct CCharBuff::CHAR_BUFF_HEAL {
  /* this+0x0 */ int hp_modifyPercent
  /* this+0x4 */ int sp_modifyPercent
}

struct CCharBuff::CHAR_BUFF_IMMUNEMAGIC {
  /* this+0x0 */ int percent
}

struct CCharBuff::CHAR_BUFF_STATUS {
  /* this+0x0 */ int flee
  /* this+0x4 */ int atk
  /* this+0x8 */ int mhpPercent
  /* this+0xc */ int mspPercent
  /* this+0x10 */ int hit
}

class CCharInfoDB {
  CODBC, offset = 0x0

  public void CCharInfoDB(const class CCharInfoDB &)
  public void CCharInfoDB::CCharInfoDB()
  public void CCharInfoDB::~CCharInfoDB()
  public void UpdateItemStoreMoney(int, int)
  public void DeleteItem(int)
  public void GetCharacterName(int, char *)
  public int CCharInfoDB::LoadMPInfo(unsigned long, class std::list<MannerPointData,std::allocator<MannerPointData> > *, int &)
  public void DeleteMP(unsigned long, unsigned long)
  public int InsertNewMP(unsigned long, unsigned long, int)
  public int CCharInfoDB::GetCharacterID(char *, unsigned long &, unsigned long &)
  public int UpdatePVPEvent(char *, char *)
  public int GetPVPEvent(char *, char *)
  public void CCharInfoDB::GetErrorString(void *, char *)
  public int CCharInfoDB::GetShortCutKey(unsigned long, unsigned char *)
  public int CCharInfoDB::UpdateShortCutKey(unsigned long, unsigned char *)
  private int CCharInfoDB::InsertHuntingList(int)
  private int CCharInfoDB::InsertTimeList(int)
  public int CCharInfoDB::SelectHuntingList(unsigned long, unsigned char *)
  public int CCharInfoDB::UpdateHuntingList(unsigned long, unsigned char *, int)
  public int CCharInfoDB::SelectTimeList(unsigned long, unsigned char *)
  public int CCharInfoDB::UpdateTimeList(unsigned long, unsigned char *, int)
  public class CCharInfoDB & operator=(const class CCharInfoDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CCharMTInfo {
    *
  public void CCharMTInfo(const class CCharMTInfo &)
  public void CCharMTInfo::CCharMTInfo()
  public void CCharMTInfo::~CCharMTInfo()
  public void CCharMTInfo::Init()
  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CCharMTInfo::LoadAttackMTInfo()
  public void LoadAttackedMTInfo()
  public int CCharMTInfo::GetAttackMT(unsigned long, unsigned long)
  public int GetAttackedMT(unsigned long)
  private unsigned long CCharMTInfo::GetJobType(unsigned long)
  /* this+0x4 */ int[0x18][0x1d] m_attackMTInfo
  /* this+0xae4 */ int m_attackedMTInfo
  /* this+0xae8 */ class std::map<unsigned long,std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > > > > m_attackMotionTime

  /* this+0xaf8 */ class std::vector<int,std::allocator<int> > m_itemClassList

  public class CCharMTInfo & operator=(const class CCharMTInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CCharSkill {
  public void CCharSkill()
  public int CCharSkill::OperSkillToChar(class CCharacter *, class CCharacter *, int, struct MSG_TYPE4_FIVEDWORD *)
  public int CCharSkill::OnGroundSkill(class CCharacter *, int, int, struct MSG_TYPE5_SIXDWORD *)
  public int CCharSkill::OnTouchedSkillObj(class CCharacter *, class CCharacter *, int, struct MSG_TYPE4_FIVEDWORD *, int)
  public int CCharSkill::AttSkillToChar(class CCharacter *, class CCharacter *, int, struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *)
  public bool CCharSkill::PreApplySkill(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  public bool CCharSkill::PostApplySkill(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  public class std::vector<CSplashCellPosInfo,std::allocator<CSplashCellPosInfo> > CCharSkill::GetSplashCells(const unsigned long, const struct PosInfo, const struct PosInfo, const int, const int)
  public int CCharSkill::GetPlusATTPower_KN_BRANDISHSPEAR(int, int, int, int)
  private int CCharSkill::UseSkill_ST_FULLSTRIP(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_RG_CLOSECONFINE(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_HP_ASSUMPTIO(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_ASC_METEORASSAULT(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_MER_SCAPEGOAT(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_NPC_HELLPOWER(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_NPC_WIDEHELLDIGNITY(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_NPC_INVINCIBLE(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_NPC_INVINCIBLEOFF(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_GM_SANDMAN(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_CASH_BLESSING(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_CASH_INCAGI(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_CASH_ASSUMPTIO(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_NPC_ALLHEAL(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_ASC_BREAKER(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *)
  private int CCharSkill::UseSkill_HW_NAPALMVULCAN(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *)
  private int CCharSkill::UseSkill_SN_SHARPSHOOTING(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *)
  private int CCharSkill::UseSkill_HW_GANBANTEIN(class CCharacter *, struct MSG_TYPE5_SIXDWORD *)
  private int CCharSkill::UseSkill_SA_LANDPROTECTOR(class CCharacter *, struct MSG_TYPE5_SIXDWORD *)
  private int CCharSkill::TouchedSkill_PF_SPIDERWEB(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, int)
  private int CCharSkill::TouchedSkill_NPC_EARTHQUAKE(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, int)
  private int CCharSkill::TouchedSkill_NPC_EVILLAND(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, int)
  private bool CCharSkill::PreApply_HW_NAPALMVULCAN(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private bool CCharSkill::PreApply_NPC_DRAGONFEAR(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private bool CCharSkill::PreApply_NPC_EARTHQUAKE(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private bool CCharSkill::PreApply_SKILLTYPEINFO2(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private bool CCharSkill::PreApply_NPC_WIDESIGHT(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private bool CCharSkill::PreApply_NPC_EXPULSION(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private bool CCharSkill::PreApply_NPC_SLOWCAST(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private bool CCharSkill::PostApply_ASC_METEORASSAULT(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private bool CCharSkill::PostApply_HW_NAPALMVULCAN(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private bool CCharSkill::PostApply_SKILLTYPEINFO2(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG *, void *)
  private int CCharSkill::UseSkill_RG_STRIPWEAPON(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, bool)
  private int CCharSkill::UseSkill_RG_STRIPSHIELD(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, bool)
  private int CCharSkill::UseSkill_RG_STRIPARMOR(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, bool)
  private int CCharSkill::UseSkill_RG_STRIPHELM(class CCharacter *, class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, bool)
  private int CCharSkill::UseSkill_PF_SPIDERWEB(class CCharacter *, class CCharacter *, struct MSG_TYPE5_SIXDWORD *)
  private int CCharSkill::UseSkill_NPC_EARTHQUAKE(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_SKILLTYPEINFO2(class CCharacter *, class CCharacter *, int, struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *)
  private int CCharSkill::UseSkill_SOUND(class CCharacter *, int, struct MSG_TYPE4_FIVEDWORD *)
  private int CCharSkill::UseSkill_GROUND_SKILLTYPEINFO2(class CCharacter *, int, struct MSG_TYPE5_SIXDWORD *, int)
  private bool CCharSkill::IsEnableStrip(class CCharacter *, class CCharacter *, int, int &)
  private int CCharSkill::ExecuteTargetSkill(class CCharacter *, class CCharacter *, int, struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *)
  private int CCharSkill::ExecuteSplashSkill(class CCharacter *, class CCharacter *, struct STRUCT_SK_SPLASH *, int, struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *)
  private bool CCharSkill::ParseSkillInfo(class CCharacter *, class std::map<unsigned long,void *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,void *> > > &, class CCharacter *, struct SKILLATTACK_MSG *, void *, bool)
  private void CCharSkill::BroadcastSkillEffect(class CCharacter *, unsigned short, unsigned long, unsigned long, short, bool)
  private void CCharSkill::BroadcastSkillEffect(class CCharacter *, unsigned short, unsigned long, int)
  private bool CCharSkill::SetEffective_SKILLTYPEINFO2(class CCharacter *, int, int, int)
}

class CCharacter {
  CClient, offset = 0x0

  public int GetNeighborPlayerNum()
  public void CCharacter::RecycleInit()
  /* this+0x28 */ class FactorVAR::BOOLvar mfvarb_RNG_Physics_ATKED_Cancel

  /* this+0x40 */ class FactorVAR::BOOLvar mfvarb_Skill_ATKED_Cancel

  /* this+0x58 */ class FactorVAR::MAXvar mfvarm_Melee_Physics_ATKED_Cancel_Percent

  /* this+0x70 */ class FactorVAR::MAXvar mfvarm_Magic_ATKED_Cancel_Percent

  /* this+0x88 */ class FactorVAR::MAXvar m_fvarm_Item_DEF_INC_Percent

  /* this+0xa0 */ class FactorVAR::MAXvar m_fvarm_Item_DEF_DEC_Percent

  /* this+0xb8 */ class FactorVAR::SUMvar m_fvars_Item_DEF_INC_Amount

  /* this+0xd0 */ class FactorVAR::MAXvar m_fvarm_Status_DEF_INC_Percent

  /* this+0xe8 */ class FactorVAR::SUMvar m_fvars_Status_DEF_INC_Amount

  /* this+0x100 */ class FactorVAR::BOOLvar m_fvarb_HEALTH_BLOODING_Cancel

  /* this+0x118 */ class FactorVAR::BOOLvar m_fvarb_BODYSTATE_STONECURSE_Cancel

  /* this+0x130 */ class FactorVAR::MAXvar m_fvarm_Move_Speed_DEC_Percent

  /* this+0x148 */ class FactorVAR::INDvar m_fvarind_Appoint_Skill_MATK_Percent

  /* this+0x15c */ class FactorVAR::INDHISTORYvar m_fvarindhistory_Appoint_Skill_Change_Property

  /* this+0x170 */ class FactorVAR::INDMAXHISTORYvar m_fvarindmaxhistory_UseSkill_ConsumItem_CancelPermil

  /* this+0x184 */ class FactorVAR::SUMHISTORYvar m_fvarshistory_ItemMATK_Amount

  /* this+0x19c */ class FactorVAR::INDSUMHISTORYvar m_fvarindsumhistory_GlobalPostDelay_Percent

  /* this+0x1b0 */ class FactorVAR::INDMINHISTORYvar m_fvarindminhistory_UseSkill_SPcost_Percent

  /* this+0x1c4 */ class FactorVAR::HISTORYvar m_fvarh_ATK_Property

  /* this+0x1dc */ class FactorVAR::SUMHISTORYvar m_fvarshistory_INC_ItemATK_Percent

  /* this+0x1f4 */ class FactorVAR::SUMHISTORYvar m_fvarshistory_ItemATK_Amount

  /* this+0x20c */ class FactorVAR::SUMvar m_fvars_FinalDamage_DEC_Amount

  /* this+0x224 */ class FactorVAR::PassiveSKHPSPRecovery m_fvarPassiveSKHPRecovery

  /* this+0x240 */ class FactorVAR::PassiveSKHPSPRecovery m_fvarPassiveSKSPRecovery

  /* this+0x25c */ class FactorVAR::SUMHISTORYvar m_fvarshistory_NearPhysicsAtkPercent

  /* this+0x274 */ class FactorVAR::BOOLvar m_fvarb_WearTakeOff_Forbid

  /* this+0x28c */ class FactorVAR::BOOLvar m_fvarb_MoveBlock

  /* this+0x2a4 */ class FactorVAR::BOOLvar m_fvarb_SkillUseBlock

  /* this+0x2bc */ class FactorVAR::BOOLvar m_fvarb_ItemUseBlock

  /* this+0x2d4 */ class FactorVAR::BOOLvar m_fvarb_MeleeAtkBlock

  /* this+0x2ec */ class std::vector<FactorVAR::Fvar *,std::allocator<FactorVAR::Fvar *> > m_fvars

  /* this+0x2fc */ class CInstantVar m_InstantVar

  public int GetInstantVar(const enum CInstantVar::enumVAR)
  public void SetInstantVar(const enum CInstantVar::enumVAR, const int)
  public int SetInstantVarIncrement(const enum CInstantVar::enumVAR)
    /* this+0x310 */ struct CCharacter::CHARACTER_PROPERTY_INFO m_characterPInfo

  public int CCharacter::GetWeaponProperty(int, int)
  public void CCharacter::AddErrorCnt(const char *, const int, const unsigned long, const unsigned long)
  public void CCharacter(class CCharacter &)
  public void CCharacter::CCharacter()
  public void CCharacter::~CCharacter()
  public bool CCharacter::IsActor()
  public void CCharacter::Init()
  public int CCharacter::GetType()
  public class CMapRes * GetMapRes()
  public int CCharacter::IsItPossible(int)
  public int CCharacter::IsSiegeMode()
  public unsigned long GetAccountID()
  public int CCharacter::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public int CCharacter::GetParameterValue(unsigned short, int &)
  public int CCharacter::UpdateParameterValue(unsigned short, int)
  public void InsertCommand(struct COMMAND_QUEUE *)
  public void CheckCommandQueue()
  public void CCharacter::DisableCommand(unsigned long)
  public struct COMMAND_QUEUE * CCharacter::SearchCommand(unsigned long)
  public int IsMyArea(class CCharacter *, int)
  public unsigned long CCharacter::GetState()
  public int CCharacter::GetScale()
  public int IsTarget(class CCharacter *, unsigned long)
  public int CCharacter::IsDamageMotionPossible()
  public int CCharacter::IsRightProperty(int)
  public int CCharacter::IsAvoidable(int, int, int)
  public int CCharacter::IsInitingState()
  public int CCharacter::IsLucky()
  public void CCharacter::OnShowEffect(int)
  public void CCharacter::OnShowEffect3(int, int)
  public void CCharacter::OnShowScript(const char *)
  public void CCharacter::MultiCast(char *, int)
  public int CCharacter::IsDirectPath(class CCharacter *, int)
  public int CCharacter::GetEffectState()
  public class std::vector<CCharacter *,std::allocator<CCharacter *> > * CCharacter::GetSectionList()
  public void CCharacter::SetSectionList(class std::vector<CCharacter *,std::allocator<CCharacter *> > *)
  public void CCharacter::OnMsgFromItemServer(unsigned long, class CITZMsg *)
  public int CCharacter::GetEffective(int, int)
  public int CCharacter::SetEffective(int, int, int, int, int, int)
  public void CCharacter::UpdateEffective(int, int, int)
  public void CCharacter::ResetEffective(int, int)
  public void CCharacter::GetModifiedHealAmount(int &)
  public bool CCharacter::IsBattleFieldMode()
  public char CCharacter::GetCampID()
  public void CCharacter::SetCampID(char)
  public bool CCharacter::IsTargetInBattleField(class CCharacter *, unsigned long, int &)
  /* this+0x328 */ int m_type
  /* this+0x32c */ class std::list<COMMAND_QUEUE,std::allocator<COMMAND_QUEUE> > m_commandQueue

  /* this+0x338 */ class CNeighborCache m_neighborCache

  /* this+0x370 */ class CMapRes * m_mapRes
  /* this+0x374 */ class std::vector<CCharacter *,std::allocator<CCharacter *> > * m_sectionList
  public class CCharacter & operator=(class CCharacter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CCharacter::CHARACTER_PROPERTY_INFO {
  /* this+0x0 */ int bodyState
  /* this+0x4 */ int healthState
  /* this+0x8 */ int armor
  /* this+0xc */ int currentProperty
  /* this+0x10 */ int attack
  /* this+0x14 */ int effectState
}

class CCharacterMgr {
    *
  public bool CCharacterMgr::InstantMapAdd(const int, const class CMapInfo &)
  public void CCharacterMgr::InstantMapRemove(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool isOK()
  private void CCharacterMgr(class CCharacterMgr &)
  private void CCharacterMgr::CCharacterMgr()
  private void CCharacterMgr::~CCharacterMgr()
  private class CCharacterMgr & operator=(class CCharacterMgr &)
  public static bool CCharacterMgr::CreateInstance()
  public static void CCharacterMgr::DestroyInstance()
  /* [0x0003:0x0004b2ac] */ static  class CCharacterMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  public void CCharacterMgr::Init(int)
  public int CCharacterMgr::AddCharacter(class CCharacter *)
  public void CCharacterMgr::RemoveCharacter(class CCharacter *)
  public void CCharacterMgr::Free(class CCharacter *)
  public class CItem * CCharacterMgr::AllocItem()
  public class CItem * CCharacterMgr::CreateItem(class CITP *, struct ITEM_INFO *)
  public class CItem * CCharacterMgr::GetNeighborhoodItem(short, short, short, class CMapRes *)
  public class CSkill * CCharacterMgr::AllocSkill()
  public class CSkill * CCharacterMgr::CreateSkill3(const int, class CMapRes * const, const int, const int, const unsigned int, const char, const unsigned long, unsigned long, const short, const unsigned short, const int, const int, const int)
  public class CSkill * CCharacterMgr::CreateSkill2(const unsigned int, const int, const int, class CMapRes * const, const int, const unsigned long, unsigned long, const short, const unsigned short, const int, const int, const int, const char)
  private void ImplGetSkill(const int, const int, class std::vector<CSkill *,std::allocator<CSkill *> > &, class CMapRes *, class CCharacter *)
  public class CSkill * CCharacterMgr::GetSkillWithSKGroupUniqueID(const int, const int, const unsigned int, class CMapRes *)
  public class CSkill * CCharacterMgr::GetSkill(int, int, int, class CMapRes *)
  public class CSkill * CCharacterMgr::GetSkill(int, int, class CMapRes *)
  public int CCharacterMgr::GetSkillList(int, int, class std::vector<CSkill *,std::allocator<CSkill *> > &, class CCharacter *, class CMapRes *)
  public bool IntersectionSkill(class CMapRes *, const int, const int, const int, const int)
  public void DestroyAllNPC()
  public class CNPC * CCharacterMgr::AddNPC(void *, const unsigned long, const unsigned long)
  public int GetMonsterCount()
  public void CCharacterMgr::SendMsgFromNPCServer(unsigned long, unsigned long, class CMsg *, unsigned long, unsigned long)
  public void CCharacterMgr::SendToNPCServer(int, const char *)
  public void CCharacterMgr::RegisterBossInMap(class CNPC *)
  public class CNPC * CCharacterMgr::FindBossInMap(int)
  public bool CheckChashTraderNpc()
  public unsigned char CCharacterMgr::GetNpcType(unsigned long)
  public void ClearBossInMap()
  public class CPC * CCharacterMgr::AllocPC()
  public class CPC * CCharacterMgr::FindPCByGID(unsigned long)
  public int CCharacterMgr::FindPC(class CCharacter *)
  public int CCharacterMgr::GetPCCountIntheMap(char *)
  public int GetPCFreeSize()
  public class CPC * CCharacterMgr::FindCharacterByIndex(const unsigned long, const int)
  public class CCharacter * CCharacterMgr::FindCharacter(unsigned long, unsigned long)
  public class CPC * CCharacterMgr::FindCharacter(const char *)
  public unsigned long CCharacterMgr::GetAID()
  public void CCharacterMgr::PutAID(unsigned long)
  public class CCharacter * CCharacterMgr::FastFindCharacter(unsigned long)
  public int CCharacterMgr::SendMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public int CCharacterMgr::SendMsg(class CCharacter *, unsigned long, unsigned long, int, int, int, class MSGpar::CVar)
  public void CCharacterMgr::SendCommand(unsigned long, class CITZMsg *)
  public char * CCharacterMgr::GetCharName(unsigned long)
  public void CCharacterMgr::GetVar(unsigned long, class CMsg *, class CMsg *)
  public void CCharacterMgr::GetVarFromPC(unsigned long, class CMsg *, class CMsg *)
  public void CCharacterMgr::ProcessAllCharacter()
  public void CCharacterMgr::Multicast(class CMapRes *, int, int, int, char *, int)
  public int CCharacterMgr::GetCurPlayChar()
  public int CCharacterMgr::GetCurValidPlayChar()
  public int CCharacterMgr::GetCurDisconnectCountPlayChar()
  public void CCharacterMgr::BroadCast(class CBroadCastFunc &)
  public void CCharacterMgr::BroadCast(int, char *)
  public void CCharacterMgr::BroadCastExceptME(int, char *, const char *)
  public void CCharacterMgr::SendToHServer(int, const char *)
  public void CCharacterMgr::SendToIServer(int, const char *)
  public class IVItEquipItem * CCharacterMgr::GetEquipItem(unsigned long, unsigned long)
  public char * CCharacterMgr::GetGuildName(unsigned long)
  public void CCharacterMgr::AddWarpNpcList(class CMapRes *, class CNPC *)
  public void CCharacterMgr::RemoveWarpNpcList(class CMapRes *, class CNPC *)
  public class std::vector<CNPC *,std::allocator<CNPC *> > CCharacterMgr::GetWarpNpcList(class CMapRes *)
  public void CCharacterMgr::Flush(int, int, int)
  public void CCharacterMgr::ExpelOtherGuild(const int, const int)
  public int GetSkillSize()
  public int CCharacterMgr::GetSkillObjCnt()
  public int CCharacterMgr::GetSkillObjCapacity()
  public int CCharacterMgr::GetItemObjCnt()
  public int CCharacterMgr::GetItemObjCapacity()
  public void CCharacterMgr::InitLotto()
  public short CCharacterMgr::GetDistance(class CCharacter *, class CCharacter *)
  public int CCharacterMgr::KickPlayerInMap(const int)
  public class CPC * CCharacterMgr::GetOnePlayerInMap(const int)
  public void CCharacterMgr::FinalDungeon_Skill(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CCharacterMgr::FinalDungeon_Item(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CCharacterMgr::FinalDungeon_Npc(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CCharacterMgr::FinalDungeon_NpcEvent(const char *)
  private class CNPC * CCharacterMgr::AllocNPC(unsigned char)
  private class CNPC * CCharacterMgr::FindNPCByAID(unsigned long)
  private class CItem * CCharacterMgr::SearchItem(unsigned long)
  private class CSkill * CCharacterMgr::SearchSkill(unsigned long)
  private void CCharacterMgr::AddPCToIndexInfo(unsigned long, int, unsigned long)
  private class CCharacter * CCharacterMgr::SearchPCFromIndexInfo(unsigned long)
  private void CCharacterMgr::DeletePCFromIndexInfo(unsigned long)
  private void CCharacterMgr::OnDisconnect(class CPC *)
  private void CCharacterMgr::OnDisconnect_STEP_NONE(class CPC *)
  private void CCharacterMgr::OnDisconnect_STEP_REMOVE(class CPC *)
  private void CCharacterMgr::OnDisconnect_STEP_ARRANGE(class CPC *)
  private void CCharacterMgr::OnDisconnect_STEP_ASYNCDB_SAVE_REQUEST(class CPC * const)
  private void CCharacterMgr::OnDisconnect_STEP_COMPLETE(class CPC *)
  private void CCharacterMgr::OnDisconnect_STEP_ASYNCDB_SAVE_COMPLETE(class CPC *)
  private int IsSendable(class CPC *)
  /* this+0x8 */ class CPC * * m_PC
  /* this+0xc */ int m_PCCount
  /* this+0x10 */ long m_curPlayChar
  /* this+0x14 */ long m_curValidPlayChar
  /* this+0x18 */ long m_curDisconnectCountPlayChar
  /* this+0x1c */ class CMemoryMgr<CPC> m_pcMemoryPool

  /* this+0x40 */ class CMemoryMgr<CItem> m_itemMemoryPool

  /* this+0x64 */ class CMemoryMgr<CSkill> m_skillMemoryPool

  /* this+0x88 */ class std::map<unsigned long,CItem *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CItem *> > > m_item

  /* this+0x98 */ class std::map<unsigned long,CSkill *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CSkill *> > > m_skill

  /* this+0xa8 */ class std::map<int,CNPC *,std::less<int>,std::allocator<std::pair<int const ,CNPC *> > > m_npcMap

  /* this+0xb8 */ class std::list<int,std::allocator<int> > m_AIDPool

  /* this+0xc4 */ struct _RTL_CRITICAL_SECTION m_csPC

  /* this+0xdc */ class std::map<unsigned long,PC_INDEX_DATA,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,PC_INDEX_DATA> > > m_pcNonclusteredIndex

    /* this+0xec */ class std::map<unsigned int,std::vector<unsigned int,std::allocator<unsigned int> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<unsigned int,std::allocator<unsigned int> > > > > m_WarpNPCList2nd

  /* this+0xfc */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_bossInMap

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CCharacterNameDictionary {
    *
  public bool isOK()
  public const char * CCharacterNameDictionary::GetActorName(const unsigned int)
  public void CCharacterNameDictionary::LoadingRequest(const unsigned int)
  public void CCharacterNameDictionary::LoadingComplete(const unsigned int, class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const enum CLoadCharNameADBWork::enumResult)
  public void CCharacterNameDictionary::LoadingReplay(const unsigned int)
  public float CCharacterNameDictionary::GetHitRate()
  public unsigned int GetCurMaxNum()
  public void CCharacterNameDictionary::shutdownlog()
  public static bool CCharacterNameDictionary::CreateInstance()
  public static void CCharacterNameDictionary::DestroyInstance()
  public void CCharacterNameDictionary(const class CCharacterNameDictionary &)
  private void CCharacterNameDictionary::CCharacterNameDictionary(const int, const int, const float)
  private void CCharacterNameDictionary::~CCharacterNameDictionary()
  private bool CCharacterNameDictionary::Create(const int)
  private void CCharacterNameDictionary::Destroy()
  private void CCharacterNameDictionary::LoadingRequestAsyncDBWork(const unsigned long)
  /* [0x0003:0x0004b2c8] */ static  class CCharacterNameDictionary * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ const int m_FinalMaxNameCardNum
  /* this+0xc */ const float m_DesireHitRate
  /* this+0x10 */ int m_CurMaxNameCardNum
  /* this+0x14 */ unsigned int m_TotalSuccessCnt
  /* this+0x18 */ unsigned int m_TotalRefCnt
          /* this+0x1c */ class std::map<unsigned int,CCharacterNameDictionary::lcNameCard *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CCharacterNameDictionary::lcNameCard *> > > m_Dictionary

    /* this+0x2c */ class std::multiset<CCharacterNameDictionary::lcPriority,CCharacterNameDictionary::lcPriority,std::allocator<CCharacterNameDictionary::lcPriority> > m_PriorityTree

  /* this+0x3c */ class CCharacterNameDictionary::lcAppUniqueCntGenerator m_AppUniqueCntGenerator

  /* [0x0003:0x00011d84] */ static  class CCharacterNameDictionary::lcNameCard m_DefaultNameCard

  private void * __vecDelDtor(unsigned int)
}

class CCharacterNameDictionary::lcAppUniqueCntGenerator {
  public unsigned int operator unsigned int()
  public void lcAppUniqueCntGenerator()
  /* this+0x0 */ unsigned int m_Cnt
}

class CCharacterNameDictionary::lcNameCard {
  public unsigned int Factor()
  public void Init(const unsigned int, const unsigned int)
  public void CCharacterNameDictionary::lcNameCard::lcNameCard(const unsigned int, const unsigned int)
  /* this+0x0 */ unsigned int m_ActorID
  /* this+0x4 */ char[0x19] m_ActorName
  /* this+0x20 */ unsigned int m_CreateAppUniqueCnt
  /* this+0x24 */ unsigned int m_AccessCnt
  /* this+0x28 */ bool m_LoadingComplete
}

class CCharacterNameDictionary::lcPriority {
  public bool operator()(const class CCharacterNameDictionary::lcPriority &, const class CCharacterNameDictionary::lcPriority &)
  public unsigned int GetActorID()
  public class CCharacterNameDictionary::lcNameCard * GetNameCardPtr()
  public void lcPriority(const class CCharacterNameDictionary::lcPriority &)
  public void lcPriority(class CCharacterNameDictionary::lcNameCard *)
  public void ~lcPriority()
  /* this+0x0 */ class CCharacterNameDictionary::lcNameCard * m_cpNameCard
  public void __dflt_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CCheckUseItemList {
  public void CCheckUseItemList(const class CCheckUseItemList &)
  private void CCheckUseItemList::CCheckUseItemList()
  private void CCheckUseItemList::~CCheckUseItemList()
  public static bool CCheckUseItemList::CreateInstance()
  public static void CCheckUseItemList::DestroyInstance()
  public void CCheckUseItemList::AddItemID_Create(unsigned short)
  public bool CCheckUseItemList::IsLimited_Create(unsigned short)
  /* this+0x0 */ class std::map<unsigned short,char,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,char> > > m_createItemList

  /* [0x0003:0x0004b26c] */ static  class CCheckUseItemList * m_self
  public class CCheckUseItemList & operator=(const class CCheckUseItemList &)
  private void * __vecDelDtor(unsigned int)
}

class CClient {
    *
  public void CClient(const class CClient &)
  public void CClient::CClient()
  public void CClient::~CClient()
  public int CClient::GetType()
  public void CClient::AddErrorCnt(const char *, const int, const unsigned long, const unsigned long)
  public void CClient::Init()
  public int CClient::IsErrorClient()
  public int IsErrorServer()
  public int Close()
  public void CClient::Send(int, const char *)
  public int GetErrorCount()
  /* this+0x4 */ class CAsyncStream * m_asyncStream
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_disconnector_cs

  /* this+0x20 */ unsigned long m_dwErrorCount
  /* this+0x24 */ unsigned long m_nBanTime
  public class CClient & operator=(const class CClient &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CClosure {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x6 */ unsigned char isC
  /* this+0x7 */ unsigned char nupvalues
  /* this+0x8 */ union GCObject * gclist
  /* this+0xc */ struct Table * env
  /* this+0x10 */ function  * f
  /* this+0x18 */ struct lua_TValue[0x1] upvalue
}

class CCompiler {
  CScriptHandler, offset = 0x0

      public void CCompiler(const class CCompiler &)
  public void CCompiler::CCompiler()
  public void CCompiler::~CCompiler()
  public bool CCompiler::LoadEnum(const char *, int)
  public bool CCompiler::LoadDef(char *)
  public bool CCompiler::SetBin(char *)
  public bool CCompiler::SetAsm(char *)
  public bool CCompiler::Run(const char *, int)
  public void CCompiler::Optimize()
  public void CCompiler::SetCmd(int, char *)
  public void CCompiler::Release()
  public void CCompiler::SetGlobalErrorFunc(function  *)
  public bool CCompiler::OnControl(class CScriptLine &, int)
  public bool CCompiler::OnCommand(class CScriptLine &, int)
  public bool CCompiler::OnFunc(class CScriptLine &, int, char *)
  public bool CCompiler::OnVar(class CScriptLine &, char *)
  private bool CCompiler::CmdBlockBreak(class CScriptLine &)
  private bool CCompiler::CmdVar(class CScriptLine &)
  private bool CCompiler::CmdIf(class CScriptLine &)
  private bool CCompiler::CmdElseIf(class CScriptLine &)
  private bool CCompiler::CmdElse(class CScriptLine &)
  private bool CCompiler::CmdEndIf(class CScriptLine &)
  private bool CCompiler::CmdEnd(class CScriptLine &)
  private bool CCompiler::CmdDeclare(class CScriptLine &)
  private bool CCompiler::CmdDefine(class CScriptLine &)
  private bool CCompiler::CmdSwitch(class CScriptLine &)
  private bool CCompiler::CmdCase(class CScriptLine &)
  private bool CCompiler::CmdBreak(class CScriptLine &)
  private bool CCompiler::CmdDefault(class CScriptLine &)
  private bool CCompiler::CmdEndSwitch(class CScriptLine &)
  private bool CCompiler::CmdDefCmd(class CScriptLine &)
  private bool CCompiler::CmdWhile(class CScriptLine &)
  private bool CCompiler::CmdEndWhile(class CScriptLine &)
  private bool CCompiler::CmdExitWhile(class CScriptLine &)
  private void CCompiler::WriteGotoBlock(int)
  private void CCompiler::WriteCode(int)
  private void CCompiler::WriteFunc(int)
  private void CCompiler::WriteCall(char *)
  private void CCompiler::WriteType(char)
  private void CCompiler::WriteVar(char *)
  private void CCompiler::WriteNum(int)
  private void CCompiler::WriteStr(char *)
  private bool CCompiler::WriteOp(char *)
  private bool CCompiler::GetDefVar(class CScriptLine &, char *, int &)
  private bool CCompiler::Value(class CScriptLine &, bool)
  private bool CCompiler::IsNum(char *)
  private void CCompiler::Goto(int)
  private void CCompiler::Error(char *, <NoType>)
  private bool CCompiler::CheckSwitchBlock()
  /* this+0x8 */ bool m_isError
  /* this+0xc */ int m_nSwitch
  /* this+0x10 */ bool m_isCase
  /* this+0x14 */ class CBlock m_block

  /* this+0x64 */ class CScript m_script

  /* this+0x9c */ class CAsm m_asm

  /* this+0xa4 */ class CBin m_bin

  /* this+0xa8 */ class std::vector<CCompiler::GotoInfo,std::allocator<CCompiler::GotoInfo> > m_gotoInfo

  /* this+0xb8 */ class std::deque<int,std::allocator<int> > m_label

  /* this+0xd0 */ class std::map<int,bool,std::less<int>,std::allocator<std::pair<int const ,bool> > > m_blockCheckMap

  /* this+0xe0 */ class std::stack<int,std::deque<int,std::allocator<int> > > m_whileStack

  /* this+0xf8 */ int m_nIf
  /* this+0xfc */ int[0x1e] m_nSwitchInIf
  /* this+0x174 */ int m_whileBlock
  /* this+0x178 */ int m_nCmd
  /* this+0x17c */ function  * m_globalErrorFunc
  /* this+0x180 */ char[0x100] m_fileName
  public class CCompiler & operator=(const class CCompiler &)
  public void * __vecDelDtor(unsigned int)
}

struct CCompiler::GotoInfo {
  /* this+0x0 */ int pos
  /* this+0x4 */ int id
}

class CCompositionLog {
  CDatabaseLog<SCOMPOSITIONLOG *>, offset = 0x0

  public void CCompositionLog::AddCompositionLog(class CPC *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned short, unsigned long)
  public void CCompositionLog::ConnectToDatabase(const char *)
  private int CCompositionLog::SaveToDatabase(void *, struct SCOMPOSITIONLOG *)
  public void CCompositionLog(const class CCompositionLog &)
  public void CCompositionLog()
  public void ~CCompositionLog()
  public class CCompositionLog & operator=(const class CCompositionLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CConnector {
    *
  public void CConnector(const class CConnector &)
  public void CConnector()
  public void ~CConnector()
  public unsigned int Connect(const struct Addr &)
  public class CConnector & operator=(const class CConnector &)
  public void * __vecDelDtor(unsigned int)
}

class CCookingSystem {
              public static bool CCookingSystem::CreateInstance()
  public static void CCookingSystem::DestroyInstance()
  public bool CCookingSystem::LoadLuaFile()
  public const class std::vector<unsigned short const ,std::allocator<unsigned short const > > & GetCookingBookList()
  public void CCookingSystem::GetCookingList(const class std::vector<unsigned short const ,std::allocator<unsigned short const > > &, class std::map<unsigned short const ,std::vector<CCookingSystem::_StuffInfo const ,std::allocator<CCookingSystem::_StuffInfo const > >,std::less<unsigned short const >,std::allocator<std::pair<unsigned short const ,std::vector<CCookingSystem::_StuffInfo const ,std::allocator<CCookingSystem::_StuffInfo const > > > > > &)
  public const class std::vector<CCookingSystem::_StuffInfo const ,std::allocator<CCookingSystem::_StuffInfo const > > & CCookingSystem::GetStuffList(const unsigned short)
  public int CCookingSystem::GetCookLevel(const unsigned short)
  public const class std::vector<CCookingSystem::_CreatingInfo const ,std::allocator<CCookingSystem::_CreatingInfo const > > & CCookingSystem::GetCreateItemList(const unsigned short)
  public void CCookingSystem::InsertCookingInfo(const unsigned short, const unsigned short, const int, const class std::vector<CCookingSystem::_StuffInfo const ,std::allocator<CCookingSystem::_StuffInfo const > > &, const class std::vector<CCookingSystem::_CreatingInfo const ,std::allocator<CCookingSystem::_CreatingInfo const > > &)
  public void CCookingSystem::MakeCookingBooList()
  public bool IsOK()
  /* this+0x0 */ bool m_isOK
  /* this+0x4 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Load_LuaFileName

  /* this+0x20 */ class std::map<unsigned short const ,std::map<unsigned short const ,std::vector<CCookingSystem::_StuffInfo const ,std::allocator<CCookingSystem::_StuffInfo const > >,std::less<unsigned short const >,std::allocator<std::pair<unsigned short const ,std::vector<CCookingSystem::_StuffInfo const ,std::allocator<CCookingSystem::_StuffInfo const > > > > >,std::less<unsigned short const >,std::allocator<std::pair<unsigned short const ,std::map<unsigned short const ,std::vector<CCookingSystem::_StuffInfo const ,std::allocator<CCookingSystem::_StuffInfo const > >,std::less<unsigned short const >,std::allocator<std::pair<unsigned short const ,std::vector<CCookingSystem::_StuffInfo const ,std::allocator<CCookingSystem::_StuffInfo const > > > > > > > > m_CookingInfo

  /* this+0x30 */ class std::map<unsigned short const ,std::map<unsigned short const ,std::vector<CCookingSystem::_CreatingInfo const ,std::allocator<CCookingSystem::_CreatingInfo const > >,std::less<unsigned short const >,std::allocator<std::pair<unsigned short const ,std::vector<CCookingSystem::_CreatingInfo const ,std::allocator<CCookingSystem::_CreatingInfo const > > > > >,std::less<unsigned short const >,std::allocator<std::pair<unsigned short const ,std::map<unsigned short const ,std::vector<CCookingSystem::_CreatingInfo const ,std::allocator<CCookingSystem::_CreatingInfo const > >,std::less<unsigned short const >,std::allocator<std::pair<unsigned short const ,std::vector<CCookingSystem::_CreatingInfo const ,std::allocator<CCookingSystem::_CreatingInfo const > > > > > > > > m_CreatingItemInfo

  /* this+0x40 */ class std::vector<unsigned short const ,std::allocator<unsigned short const > > m_CookingBookList

  /* this+0x50 */ class std::map<unsigned short const ,unsigned short,std::less<unsigned short const >,std::allocator<std::pair<unsigned short const ,unsigned short> > > m_CookofLevel

  /* [0x0003:0x0004b268] */ static  class CCookingSystem * m_cpSelf
  public void CCookingSystem(const class CCookingSystem &)
  private void CCookingSystem::CCookingSystem()
  private void ~CCookingSystem()
  private void * __vecDelDtor(unsigned int)
}

struct CCookingSystem::_CreatingInfo {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ unsigned short num
  /* this+0x4 */ int Rate
}

struct CCookingSystem::_StuffInfo {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ unsigned short num
}

class CCreatePackageScript {
    *
                  /* this+0x4 */ class std::map<int,CCreatePackageScript::IPPackage,std::less<int>,std::allocator<std::pair<int const ,CCreatePackageScript::IPPackage> > > m_PackageContainer

  /* [0x0003:0x0004b270] */ static  class CCreatePackageScript * m_cpSelf
  /* this+0x14 */ bool m_bOK
  private bool Anaysis_InsertPackage(const int, class CCreatePackageScript::IPPackage &)
  private class CCreatePackageScript::ANAYSISRET CCreatePackageScript::Anaysis(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private class CCreatePackageScript::ANAYSISRET CCreatePackageScript::Anaysis_Package(const int, class CFTLexicalAnaysis &)
  private class CCreatePackageScript::ANAYSISRET CCreatePackageScript::Anaysis_Box_Must(class CCreatePackageScript::IPPackage &, class CFTLexicalAnaysis &)
  private class CCreatePackageScript::ANAYSISRET CCreatePackageScript::Anaysis_Box_Random(class CCreatePackageScript::IPPackage &, class CFTLexicalAnaysis &)
  private void UnpackItemPackage_RandomBox(class CCreatePackageScript::IPBox * const, class std::vector<CCreatePackageScript::PackageItem,std::allocator<CCreatePackageScript::PackageItem> > &)
  public bool CCreatePackageScript::isOK()
  public bool CCreatePackageScript::Init()
  public class std::vector<CCreatePackageScript::PackageItem,std::allocator<CCreatePackageScript::PackageItem> > UnpackItemPackage(const int)
  public static bool CCreatePackageScript::CreateInstance()
  public static void CCreatePackageScript::DestroyInstance()
  public bool CCreatePackageScript::Convert_NeoPakcageItem()
  public void CCreatePackageScript(const class CCreatePackageScript &)
  private void CCreatePackageScript::CCreatePackageScript()
  private void CCreatePackageScript::~CCreatePackageScript()
  public class CCreatePackageScript & operator=(const class CCreatePackageScript &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CCreatePackageScript::ANAYSISRET {
    /* this+0x0 */ class CFTToken Token

  /* this+0x2c */ enum CCreatePackageScript::ANAYSISRET::enumCode Code
  public void ANAYSISRET(const class CCreatePackageScript::ANAYSISRET &)
  public void ANAYSISRET(const enum CCreatePackageScript::ANAYSISRET::enumCode, class CFTToken &)
  public void ANAYSISRET(const enum CCreatePackageScript::ANAYSISRET::enumCode)
  public void CCreatePackageScript::ANAYSISRET::~ANAYSISRET()
  public class CCreatePackageScript::ANAYSISRET & operator=(const class CCreatePackageScript::ANAYSISRET &)
  public void * __vecDelDtor(unsigned int)
}

class CCreatePackageScript::IPBox {
          /* this+0x0 */ class std::vector<CCreatePackageScript::IPBox::Item,std::allocator<CCreatePackageScript::IPBox::Item> > ItemList

  /* this+0x10 */ int gift_total_number
  /* this+0x14 */ enum CCreatePackageScript::IPBox::enumType Type
  public bool CCreatePackageScript::IPBox::Insert(class CCreatePackageScript::IPBox::Item &)
  public void Clear()
  public int GetNumber()
  public void CCreatePackageScript::IPBox::IPBox(const class CCreatePackageScript::IPBox &)
  public void CCreatePackageScript::IPBox::IPBox()
  public void CCreatePackageScript::IPBox::~IPBox()
  public class CCreatePackageScript::IPBox & operator=(const class CCreatePackageScript::IPBox &)
  public void * __vecDelDtor(unsigned int)
}

class CCreatePackageScript::IPBox::Item {
  CCreatePackageScript::PackageItem, offset = 0x0

  /* this+0x10 */ int gift_number
  /* this+0x14 */ int random_factor
  public void Item()
}

class CCreatePackageScript::IPPackage {
  /* this+0x0 */ class std::vector<CCreatePackageScript::IPBox,std::allocator<CCreatePackageScript::IPBox> > m_BoxList

  public void Clear()
  public int GetNumber()
  public bool CCreatePackageScript::IPPackage::Insert(class CCreatePackageScript::IPBox &)
  public void IPPackage(const class CCreatePackageScript::IPPackage &)
  public void IPPackage()
  public void CCreatePackageScript::IPPackage::~IPPackage()
  public class CCreatePackageScript::IPPackage & operator=(const class CCreatePackageScript::IPPackage &)
  public void * __vecDelDtor(unsigned int)
}

class CCreatePackageScript::PackageItem {
  /* this+0x0 */ int ITID
  /* this+0x4 */ int Count
  /* this+0x8 */ int HireHour
  /* this+0xc */ bool bBroadcasting
  public void PackageItem()
}

class CCriticalSection {
  /* this+0x0 */ struct _RTL_CRITICAL_SECTION m_CriticalSection

  public void CCriticalSection()
  public void CCriticalSection::~CCriticalSection()
  public void Init()
  public void Delete()
  public void Enter()
  public void Leave()
  public void * __vecDelDtor(unsigned int)
}

class CDBScriptInfo {
    *
  public void CDBScriptInfo(const class CDBScriptInfo &)
  public void CDBScriptInfo::CDBScriptInfo()
  public void CDBScriptInfo::~CDBScriptInfo()
  public int Load(const char *)
  public const char * Search(const char *)
  /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > m_map

  public class CDBScriptInfo & operator=(const class CDBScriptInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CDBStatement {
  public void CDBStatement()
  public void CDBStatement::~CDBStatement()
  public void * operator void *()
  public bool CDBStatement::Init(void *)
  /* this+0x0 */ void * m_hStmt
  public void * __vecDelDtor(unsigned int)
}

class CDGNpcBin {
    *
  public void CDGNpcBin(const class CDGNpcBin &)
  public void CDGNpcBin::CDGNpcBin()
  public void CDGNpcBin::~CDGNpcBin()
  /* this+0x4 */ class CBinBuf m_binBuf

  public void ClearBinBuff()
  public bool CDGNpcBin::LoadScriptBin(const char *)
  public class CBinBuf * GetBinBuff()
  public class CDGNpcBin & operator=(const class CDGNpcBin &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CDGNpcMgr {
    *
    public void CDGNpcMgr(const class CDGNpcMgr &)
  public void CDGNpcMgr::CDGNpcMgr()
  public void CDGNpcMgr::~CDGNpcMgr()
  /* [0x0003:0x0004b5d4] */ static  class CDGNpcMgr * m_cpSelf
  /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CDGNpcBin *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CDGNpcBin *> > > m_map

  public void CDGNpcMgr::Clear()
  public static class CDGNpcMgr * CDGNpcMgr::GetObj()
  public bool CDGNpcMgr::AddInstantMap(const char *)
  public void DeleteDunGeon(const char *)
  public class CDGNpcBin * CDGNpcMgr::FindDunGeonBin(const char *)
  public class CDGNpcMgr & operator=(const class CDGNpcMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CDateTime {
  public void CDateTime::AddTime(int, int, int)
  public int CDateTime::CheckTimeOut(long)
  public int CheckTimeOut()
  public void CDateTime::GetNowTime()
  public void CDateTime::SetTime(short, short, short, short)
  public void CDateTime::GetTime(short &, short &, short &, short &)
  public long GetTime_t()
  public struct tagTIMESTAMP_STRUCT operator struct tagTIMESTAMP_STRUCT()
  public long operator __w64 long()
  public int GetYear()
  public int GetMonth()
  public int GetDay()
  public int GetHour()
  public int GetMin()
  public int GetSec()
  /* this+0x0 */ long m_time
  public void CDateTime::CDateTime(int, int, int, int, int, int, int)
  public void CDateTime()
  public void CDateTime::CDateTime(const long)
  public void ~CDateTime()
  public void * __vecDelDtor(unsigned int)
}

class CDeleteCoupleADBWork {
  NAsyncDBWork, offset = 0x0

    public const enum CDeleteCoupleADBWork::enumResult GetResult()
  public const unsigned long GetGID()
  /* this+0x14 */ enum CDeleteCoupleADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  private bool CDeleteCoupleADBWork::ExecQuery(class NODBCCtrl &)
  public void CDeleteCoupleADBWork(const class CDeleteCoupleADBWork &)
  public void CDeleteCoupleADBWork::CDeleteCoupleADBWork(const unsigned long, const unsigned long)
  public void ~CDeleteCoupleADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CDeleteFamilyADBWork {
  NAsyncDBWork, offset = 0x0

    public const enum CDeleteFamilyADBWork::enumResult GetResult()
  public const unsigned long GetBabyGID()
  /* this+0x14 */ enum CDeleteFamilyADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_BabyGID
  private bool ExecQuery(class NODBCCtrl &)
  public void CDeleteFamilyADBWork(const class CDeleteFamilyADBWork &)
  public void CDeleteFamilyADBWork(const unsigned long, const unsigned long)
  public void ~CDeleteFamilyADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CDisconnectLog {
  NFileLog, offset = 0x0

  public bool isOK()
  public static bool CDisconnectLog::CreateInstance()
  public static void CDisconnectLog::DestroyInstance()
  private void CDisconnectLog(class CDisconnectLog &)
  private void CDisconnectLog::CDisconnectLog()
  private void CDisconnectLog::~CDisconnectLog()
  private class CDisconnectLog & operator=(class CDisconnectLog &)
  /* [0x0003:0x0004b2c4] */ static  class CDisconnectLog * m_cpSelf
  /* this+0x828 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CDungeonScript {
    *
    public void CDungeonScript(const class CDungeonScript &)
  public void CDungeonScript::CDungeonScript()
  public void CDungeonScript::~CDungeonScript()
  /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CList *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CList *> > > m_map

  public bool CDungeonScript::Insert(const char *)
  public bool CDungeonScript::AddScript(const char *, const char *)
  public const char * CDungeonScript::GetDungeonName()
  public bool CDungeonScript::GetList(const char *, class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &)
  public void CDungeonScript::GetNext()
  public int GetCount()
  public class CDungeonScript & operator=(const class CDungeonScript &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CEffect3rdDeleteADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CEffect3rdDeleteADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ const unsigned long m_AID
  /* this+0x20 */ const int m_EffectID
  private bool CEffect3rdDeleteADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CEffect3rdDeleteADBWork::Effect3rd_Delete(class NODBCCtrl &, const int, const int)
  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const enum CEffect3rdDeleteADBWork::enumResult GetResult()
  public void CEffect3rdDeleteADBWork(const class CEffect3rdDeleteADBWork &)
  public void CEffect3rdDeleteADBWork::CEffect3rdDeleteADBWork(const unsigned long, const unsigned long, const int)
  public void CEffect3rdDeleteADBWork::~CEffect3rdDeleteADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CEffect3rdUpdateAllADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CEffect3rdUpdateAllADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ const unsigned long m_AID
  /* this+0x20 */ class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > m_List

  private bool CEffect3rdUpdateAllADBWork::ExecQuery(class NODBCCtrl &)
  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const enum CEffect3rdUpdateAllADBWork::enumResult GetResult()
  public void CEffect3rdUpdateAllADBWork(const class CEffect3rdUpdateAllADBWork &)
  public void CEffect3rdUpdateAllADBWork::CEffect3rdUpdateAllADBWork(const unsigned long, const unsigned long)
  public void CEffect3rdUpdateAllADBWork::~CEffect3rdUpdateAllADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CEfstScriptEventHandler {
  CScriptEventHandler, offset = 0x0

  public void CEfstScriptEventHandler::Set(const int, const unsigned int)
  private bool CEfstScriptEventHandler::OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  public void CEfstScriptEventHandler(const class CEfstScriptEventHandler &)
  public void CEfstScriptEventHandler::CEfstScriptEventHandler()
  public void CEfstScriptEventHandler::~CEfstScriptEventHandler()
  /* this+0x78 */ unsigned int m_Identity
  public class CEfstScriptEventHandler & operator=(const class CEfstScriptEventHandler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CElementalCreateADBWork {
  NAsyncDBWork, offset = 0x0

    public unsigned long GetGID()
  public unsigned long GetAID()
  public enum CElementalCreateADBWork::enumResult GetResult()
  public enum ElementalStuff::enumKind GetKind()
  public enum ElementalStuff::enumScale GetScale()
  public class ElementalStuff::ESummaryData GetSummaryData()
  public int GetLifeTM()
  public int GetReduceSPAmount()
  private bool CElementalCreateADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CElementalCreateADBWork::Create(class NODBCCtrl &)
  public void CElementalCreateADBWork(const class CElementalCreateADBWork &)
  public void CElementalCreateADBWork::CElementalCreateADBWork(const unsigned long, const unsigned long, const enum ElementalStuff::enumKind, const enum ElementalStuff::enumScale, const class ElementalStuff::ESummaryData &, const int, const int)
  public void CElementalCreateADBWork::~CElementalCreateADBWork()
  /* this+0x14 */ enum CElementalCreateADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ const enum ElementalStuff::enumKind m_Kind
  /* this+0x20 */ const enum ElementalStuff::enumScale m_Scale
  /* this+0x24 */ const class ElementalStuff::ESummaryData m_SummaryData

  /* this+0x50 */ const int m_LifeTM
  /* this+0x54 */ const int m_ReduceSPAmount
  public void * __vecDelDtor(unsigned int)
}

class CElementalDeleteADBWork {
  NAsyncDBWork, offset = 0x0

    public unsigned long GetGID()
  public unsigned long GetAID()
  public enum CElementalDeleteADBWork::enumResult GetResult()
  private bool CElementalDeleteADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CElementalDeleteADBWork::Delete(class NODBCCtrl &)
  public void CElementalDeleteADBWork(const class CElementalDeleteADBWork &)
  public void CElementalDeleteADBWork::CElementalDeleteADBWork(const unsigned long, const unsigned long)
  public void CElementalDeleteADBWork::~CElementalDeleteADBWork()
  /* this+0x14 */ enum CElementalDeleteADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  public void * __vecDelDtor(unsigned int)
}

class CEraseQuestDBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ unsigned long m_GID
  /* this+0x18 */ unsigned long m_QID
  /* this+0x1c */ enum CEraseQuestDBWork::enumResult m_Result
  public const enum CEraseQuestDBWork::enumResult GetResult()
  public const unsigned long GetGID()
  public const unsigned long GetQID()
  private bool CEraseQuestDBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CEraseQuestDBWork::EraseQuest(class NODBCCtrl &, const int, const int)
  public void CEraseQuestDBWork::Init(const unsigned long, const unsigned long, const unsigned long)
  public void CEraseQuestDBWork(const class CEraseQuestDBWork &)
  private void CEraseQuestDBWork::CEraseQuestDBWork()
  private void CEraseQuestDBWork::~CEraseQuestDBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CErrorLog {
    *
  public void CErrorLog(const class CErrorLog &)
  public void CErrorLog::CErrorLog()
  public void CErrorLog::~CErrorLog()
  public void CErrorLog::CmtLog(const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int, const int)
  public void KillAllLog(char *)
  public void CErrorLog::MoveLog(char *)
  public void CErrorLog::MoveLogFmt(const char *, <NoType>)
  public void CErrorLog::CreateLog(char *)
  public void CErrorLog::PacketErrorLog(char *, unsigned long)
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_csCriticalError

  public class CErrorLog & operator=(const class CErrorLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CExpParameter {
  CODBC, offset = 0x0

  public void CExpParameter(const class CExpParameter &)
  public void CExpParameter::CExpParameter()
  public void CExpParameter::~CExpParameter()
  public void CExpParameter::Init(const char *)
  public void CExpParameter::GetExpParameter()
  public void CExpParameter::GetNoviceExpParameter()
  public void CExpParameter::GetSecondExpParameter()
  public void CExpParameter::GetFirstJobExpParameter()
  public int CExpParameter::GetNextJobExp(short, short)
  public void CExpParameter::GetGuildExpParameter()
  public int CExpParameter::GetGuildNextExp(short)
  public int CExpParameter::GetNextExp(const short, const short)
  public void CExpParameter::GetExpParameter2()
  public void CExpParameter::GetNoviceExpParameter2()
  public void CExpParameter::GetFirstJobExpParameter2()
  public void CExpParameter::Get_Ninja_Gunner_JobExpParameter()
  public void CExpParameter::GetSecondJobExpParameter2()
  public void CExpParameter::GetExpParameter3()
  public void CExpParameter::GetThirdJobExpParameter()
  /* this+0x14 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_expValue3

  /* this+0x24 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_thirdJobExpValue

  public void CExpParameter::InitExpTable_Homun(char *)
  public int CExpParameter::GetNextExp_Homun(const short, const int)
  /* this+0x34 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_expValue

  /* this+0x44 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_jobNoviceExpValue

  /* this+0x54 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_jobFirstJobExpValue

  /* this+0x64 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_jobSecondExpValue

  /* this+0x74 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_guildexpValue

  /* this+0x84 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_expValue2

  /* this+0x94 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_jobNoviceExpValue2

  /* this+0xa4 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_jobFirstJobExpValue2

  /* this+0xb4 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_job_Ninja_Gunner_ExpValue

  /* this+0xc4 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_jobSecondExpValue2

  /* this+0xd4 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_expVal_Homun

  public class CExpParameter & operator=(const class CExpParameter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CExtendedODBC {
  CODBC, offset = 0x0

  public void CExtendedODBC(const class CExtendedODBC &)
  public void CExtendedODBC::CExtendedODBC()
  public void CExtendedODBC::~CExtendedODBC()
  public int CExtendedODBC::Connect(const char *, const char *)
  public int CExtendedODBC::Query(void *, const char *, <NoType>)
  public int CExtendedODBC::AllocStmt(void * *)
  public void CExtendedODBC::FreeStmt(void * *, int)
  public void CExtendedODBC::GetErrorString(void *, char *)
  public int CExtendedODBC::IsError(short)
  public class CExtendedODBC & operator=(const class CExtendedODBC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CFSM {
    *
  public void CFSM(const class CFSM &)
  public void CFSM::CFSM()
  public void CFSM::~CFSM()
  public void CFSM::Init(unsigned long)
  public class CFSMState * CFSM::GetFSMState(unsigned long)
  public void DeleteState(unsigned long)
  public void CFSM::AddFSMState(unsigned long, unsigned long, unsigned long, unsigned long)
  public void CFSM::Destroy()
  /* this+0x4 */ unsigned long m_fsmID
  /* this+0x8 */ class std::map<unsigned long,CFSMState *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CFSMState *> > > m_fsmState

  public class CFSM & operator=(const class CFSM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CFSMMgr {
    *
  public void CFSMMgr(const class CFSMMgr &)
  public void CFSMMgr::CFSMMgr()
  public void CFSMMgr::~CFSMMgr()
  public void CFSMMgr::Init()
  public void Load()
  public void LoadScript(const char *, int)
  public void Insert(char *, char *, char *, char *, char *)
  public class CFSM * CFSMMgr::GetFSM(unsigned long)
  public void Destroy()
  public unsigned long CFSMMgr::GetKeyWord(const char *)
  public int CFSMMgr::Load_FSM_NpcScript()
  public bool CFSMMgr::SetDefined(const char *, const char *, const char *, const char *, const char *)
  private void CFSMMgr::AddFSM(struct SCRIPT_INPUT *)
  private void DeleteFSM(unsigned long)
  /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > > m_scriptKeyword

  /* this+0x14 */ class std::map<unsigned long,CFSM *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CFSM *> > > m_fsm

  public class CFSMMgr & operator=(const class CFSMMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CFSMState {
    *
  public void CFSMState(const class CFSMState &)
  public void CFSMState::CFSMState()
  public void CFSMState::~CFSMState()
  public void CFSMState::AddTransition(unsigned long, unsigned long, unsigned long)
  public int CFSMState::GetOutput(unsigned long, unsigned long &, unsigned long &)
  public void CFSMState::Init(unsigned long)
  private void CFSMState::Destroy()
  /* this+0x4 */ int m_count
  /* this+0x8 */ unsigned long[0xa] m_transition
  /* this+0x30 */ struct OUTPUT_DATA *[0x40] m_table
  public class CFSMState & operator=(const class CFSMState &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CFTFile {
    *
  /* this+0x4 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strFileName

  /* this+0x20 */ char * m_pBuffer
  /* this+0x24 */ int m_TotalBytes
  /* this+0x28 */ bool m_bOK
  /* this+0x2c */ int m_ReadPositionIdx
  /* this+0x30 */ int m_Line
  /* this+0x34 */ int m_Col
  private bool CFTFile::Load()
  private long CFTFile::GetLength()
  protected bool CFTFile::isOK()
  protected bool CFTFile::ReadByte(char &)
  protected void CFTFile::UndoByte()
  protected bool CFTFile::ViewByte(char &)
  protected int CFTFile::GetCurLine()
  protected int CFTFile::GetCurCol()
  protected bool CFTFile::isEOF()
  protected const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CFTFile::GetFileName()
  public void CFTFile(const class CFTFile &)
  protected void CFTFile::CFTFile(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  protected void CFTFile::~CFTFile()
  protected void * __vecDelDtor(unsigned int)
}

class CFTLexicalAnaysis {
  CFTFile, offset = 0x0

  /* this+0x38 */ bool m_bOK
      /* this+0x3c */ class std::vector<CFTToken,std::allocator<CFTToken> > m_TokenList

  /* this+0x4c */ class std::_Vector_iterator<std::_Vector_val<CFTToken,std::allocator<CFTToken> > > m_CurReadyTokenItor

    private bool CFTLexicalAnaysis::isNumeric(const char)
  private bool CFTLexicalAnaysis::isDelimiter(const char)
  private int CFTLexicalAnaysis::isLetter(const char)
  private bool CFTLexicalAnaysis::isAlpha(const char)
  private bool CFTLexicalAnaysis::Init()
  private class CFTLexicalAnaysis::FTLARETURN CFTLexicalAnaysis::StringAnaysisV2()
  private class CFTLexicalAnaysis::FTLARETURN CFTLexicalAnaysis::SymbolAnaysisV2()
  private class CFTLexicalAnaysis::FTLARETURN CFTLexicalAnaysis::NumberAnaysisV2()
  private class CFTLexicalAnaysis::FTLARETURN CFTLexicalAnaysis::Anaysis()
  private int CFTLexicalAnaysis::RemoveComment()
  private int CFTLexicalAnaysis::RemoveGarbage()
  public bool CFTLexicalAnaysis::isOK()
  public bool CFTLexicalAnaysis::GetToken(class CFTToken &)
  public bool CFTLexicalAnaysis::ViewToken(class CFTToken &)
  public void CFTLexicalAnaysis(const class CFTLexicalAnaysis &)
  public void CFTLexicalAnaysis::CFTLexicalAnaysis(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CFTLexicalAnaysis::~CFTLexicalAnaysis()
  public void * __vecDelDtor(unsigned int)
}

class CFTLexicalAnaysis::FTLARETURN {
    /* this+0x0 */ enum CFTLexicalAnaysis::FTLARETURN::enumReturnCode m_Code
  /* this+0x4 */ class CFTToken m_Token

  public void CFTLexicalAnaysis::FTLARETURN::FTLARETURN(const class CFTLexicalAnaysis::FTLARETURN &)
  public void CFTLexicalAnaysis::FTLARETURN::FTLARETURN(const enum CFTLexicalAnaysis::FTLARETURN::enumReturnCode)
  public void CFTLexicalAnaysis::FTLARETURN::FTLARETURN(const enum CFTLexicalAnaysis::FTLARETURN::enumReturnCode, class CFTToken)
  public void CFTLexicalAnaysis::FTLARETURN::~FTLARETURN()
  public class CFTLexicalAnaysis::FTLARETURN & operator=(const class CFTLexicalAnaysis::FTLARETURN &)
  public void * __vecDelDtor(unsigned int)
}

class CFTToken {
    *
    /* this+0x4 */ enum CFTToken::enumType m_Type
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Value

  /* this+0x24 */ int m_Line
  /* this+0x28 */ int m_Col
  public enum CFTToken::enumType CFTToken::GetType()
  public int CFTToken::GetINT()
  public bool CFTToken::GetBOOL()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CFTToken::GetSTRING()
  public int CFTToken::GetLine()
  public int CFTToken::GetCol()
  public void CFTToken::CFTToken(const class CFTToken &)
  public void CFTToken::CFTToken(const enum CFTToken::enumType, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int)
  public void CFTToken::CFTToken()
  public void CFTToken::~CFTToken()
  public class CFTToken & CFTToken::operator=(const class CFTToken &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CFixedSKcastingTMvar {
  CSKcastingTMvar, offset = 0x0

  public int CFixedSKcastingTMvar::Get(const int, const int)
  public void CFixedSKcastingTMvar(const class CFixedSKcastingTMvar &)
  public void CFixedSKcastingTMvar::CFixedSKcastingTMvar()
  public void CFixedSKcastingTMvar::~CFixedSKcastingTMvar()
  public class CFixedSKcastingTMvar & operator=(const class CFixedSKcastingTMvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CFontShopMgr {
    *
  /* [0x0003:0x0004b618] */ static  class CFontShopMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
      /* this+0x8 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_FontListMap

      /* this+0x18 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_Font2ITIDMap

  private void CFontShopMgr::ErrorMessageBox(const char *, <NoType>)
  private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CFontShopMgr::GetTokenInfoStr(class N2FTAToken &, class N2FTAFile &)
  private bool CFontShopMgr::GetFTAToken(class N2FTALexicalAnalyzer &, class N2FTALexicalAnalyzer::FTARet &, enum N2FTAToken::enumTYPE)
  private bool PeekFTAToken(class N2FTALexicalAnalyzer &, class N2FTALexicalAnalyzer::FTARet &, enum N2FTAToken::enumTYPE)
  private bool CFontShopMgr::Anaysis(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private bool CFontShopMgr::Create()
  public bool isOK()
  public bool CFontShopMgr::Change(class CPC *, const int)
  public void CFontShopMgr::Expire(class CPC *, const int)
  public short CFontShopMgr::GetValidFont(class CPC *, const short)
  public static bool CFontShopMgr::CreateInstance()
  public static void CFontShopMgr::DestroyInstance()
  public void CFontShopMgr(const class CFontShopMgr &)
  private void CFontShopMgr::CFontShopMgr()
  private void CFontShopMgr::~CFontShopMgr()
  public class CFontShopMgr & operator=(const class CFontShopMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CFreeMapMgr {
    *
  /* this+0x4 */ class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_FreeMapList

  public int Init()
  public int Load()
  public int isUseMap(class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CFreeMapMgr(const class CFreeMapMgr &)
  public void CFreeMapMgr()
  public void ~CFreeMapMgr()
  public class CFreeMapMgr & operator=(const class CFreeMapMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CFuncExtraction {
    *
  public void CFuncExtraction(const class CFuncExtraction &)
  public void CFuncExtraction()
  public void ~CFuncExtraction()
  /* this+0x4 */ class CQVar m_data

  public bool SetData(const char *)
  public bool GetFuncValue(const char *, class std::vector<CQVar,std::allocator<CQVar> > &)
  public class CFuncExtraction & operator=(const class CFuncExtraction &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CGMWhisperLog {
  CDatabaseLog<SPACKETLOG *>, offset = 0x0

  public void AddPacketLog(class CPC *, unsigned long, unsigned long)
  public void CGMWhisperLog::ConnectToDatabase(const char *)
  private int CGMWhisperLog::SaveToDatabase(void *, struct SPACKETLOG *)
  public void CGMWhisperLog(const class CGMWhisperLog &)
  public void CGMWhisperLog()
  public void ~CGMWhisperLog()
  public class CGMWhisperLog & operator=(const class CGMWhisperLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CGVar {
    *
  /* [0x0003:0x0004b2e0] */ static  class CGVar * m_cpSelf
  /* this+0x4 */ int m_DBColumnSizeBodyItem
  /* this+0x8 */ int m_DBColumnSizeStoreItem
  /* this+0xc */ int m_DBColumnSizeCartItem
  /* this+0x10 */ unsigned int m_valid_client_file_length
  /* this+0x14 */ int m_character_data_save_interval_minute
  /* this+0x18 */ bool m_bIsMaskPlayerNameBSI
  /* this+0x19 */ bool m_bFreeServer_Always_PK_in_Agit_Map
  /* this+0x1a */ bool m_bAgainstServerSiegeWarfare
    /* this+0x1c */ struct CGVar::<unnamed-type-m_UserBlock> m_UserBlock

  /* this+0x34 */ class PERSONAL_INFO::CPersonalFactor m_WorldFactor

  /* this+0x40 */ int m_AsyncDBThreadNum
  /* this+0x44 */ bool m_bOK
  private bool CGVar::Create()
  private void Destory()
  private const bool CGVar::isOK()
  public int GetDBColumnSizeBodyItem()
  public int GetDBColumnSizeStoreItem()
  public int GetDBColumnSizeCartItem()
  public void CGVar::SetWorldFactor(const int, const int, const int)
  public int GetWorldExp()
  public int GetWorldDeath()
  public int GetWorldDrop()
  public int GetUserBlockSecond_when_reassembly_time_out()
  public int GetUserBlockSecond_when_reassembly_invalid()
  public int GetUserBlockSecond_when_reassembly_modifyIMT_winsock()
  public int GetUserBlockSecond_when_reassembly_modifyIMT_gdi32()
  public int GetUserBlockSecond_when_reassembly_hackshield()
  public int GetUserBlockSecond_when_found_unknown_packet()
  public int GetCharacterDataSaveIntervalMinute()
  public int GetAsyncDBThreadNum()
  public unsigned int get_valid_client_file_length()
  public unsigned int CGVar::GetUsedMemoryBytes()
  public bool IsMaskPlayerNameBSI()
  public bool IsFreeServerAlwaysPKinAgitMap()
  public bool IsAgainstServerSiegeWarfare()
  public int GetHSID()
  public void SetHSID(const int)
  public int GetIrMailExpireDay()
  public int GetMIN_ZENY_ITEMLOG_EXECEXCHANGEITEM()
  public static bool CGVar::CreateInstance()
  public static void CGVar::DestoryInstance()
  private void CGVar(class CGVar &)
  private void CGVar::CGVar()
  private void CGVar::~CGVar()
  private class CGVar & operator=(class CGVar &)
  /* this+0x48 */ int m_HSID
  /* this+0x4c */ int m_IrMailExpireDay
  /* this+0x50 */ int m_MIN_ZENY_ITEMLOG_EXECEXCHANGEITEM
  /* this+0x54 */ float m_DenominatorData
  public float GetDenominatorData()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct CGVar::<unnamed-type-m_UserBlock> {
  /* this+0x0 */ int when_reassembly_time_out
  /* this+0x4 */ int when_reassembly_invalid
  /* this+0x8 */ int when_reassembly_modifyIMT_winsock
  /* this+0xc */ int when_reassembly_modifyIMT_gdi32
  /* this+0x10 */ int when_reassembly_hackshield
  /* this+0x14 */ int when_found_unknown_packet
}

class CGameGuardLog {
  CSectionLog, offset = 0x0

  public void CGameGuardLog(const class CGameGuardLog &)
  private void CGameGuardLog::CGameGuardLog()
  private void CGameGuardLog::~CGameGuardLog()
  /* [0x0003:0x0004b648] */ static  class CGameGuardLog * m_isSelf
  public static bool CGameGuardLog::CreateInstance()
  public static void CGameGuardLog::DestroyInstance()
  public class CGameGuardLog & operator=(const class CGameGuardLog &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CGenetic3rd2SkillDataMgr {
    public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CGenetic3rd2SkillDataMgr::InsertPharmacyRecipe(const class CGenetic3rd2SkillDataMgrStuff::lcItem &, const class std::vector<CGenetic3rd2SkillDataMgrStuff::lcItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcItem> > &, const class CGenetic3rd2SkillDataMgrStuff::lcItem &, const int)
  public const class std::map<int,CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe,std::less<int>,std::allocator<std::pair<int const ,CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe> > > & GetPharmacyBook()
  /* this+0x0 */ class std::map<int,CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe,std::less<int>,std::allocator<std::pair<int const ,CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe> > > m_PharmacyBook

    public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CGenetic3rd2SkillDataMgr::InsertBombRecipe(const class CGenetic3rd2SkillDataMgrStuff::lcItem &, const class std::vector<CGenetic3rd2SkillDataMgrStuff::lcItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcItem> > &, const class CGenetic3rd2SkillDataMgrStuff::lcItem &, const int)
  public const class std::map<int,CGenetic3rd2SkillDataMgrStuff::lcBombRecipe,std::less<int>,std::allocator<std::pair<int const ,CGenetic3rd2SkillDataMgrStuff::lcBombRecipe> > > & GetBombBook()
  /* this+0x10 */ class std::map<int,CGenetic3rd2SkillDataMgrStuff::lcBombRecipe,std::less<int>,std::allocator<std::pair<int const ,CGenetic3rd2SkillDataMgrStuff::lcBombRecipe> > > m_BombBook

      /* this+0x20 */ class std::map<int,CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe,std::less<int>,std::allocator<std::pair<int const ,CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe> > > m_MixCookingBook

  /* this+0x30 */ class std::vector<CGenetic3rd2SkillDataMgrStuff::lcMixCookingCompensationItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcMixCookingCompensationItem> > m_MixCookingCompensationNote

  public const class std::map<int,CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe,std::less<int>,std::allocator<std::pair<int const ,CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe> > > & GetMixCookingBook()
  public const class std::vector<CGenetic3rd2SkillDataMgrStuff::lcMixCookingCompensationItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcMixCookingCompensationItem> > & GetMixCookingCompensationNote()
  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CGenetic3rd2SkillDataMgr::InsertMixCookingRecipe(const class CGenetic3rd2SkillDataMgrStuff::lcItem &, const class std::vector<CGenetic3rd2SkillDataMgrStuff::lcItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcItem> > &, const class CGenetic3rd2SkillDataMgrStuff::lcItem &, const int)
  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CGenetic3rd2SkillDataMgr::InsertMixCookingCompensationMemo(const class CGenetic3rd2SkillDataMgrStuff::lcMixCookingCompensationItem &)
  public bool isOK()
  public static bool CGenetic3rd2SkillDataMgr::CreateInstance()
  public static void CGenetic3rd2SkillDataMgr::DestroyInstance()
  public void CGenetic3rd2SkillDataMgr(const class CGenetic3rd2SkillDataMgr &)
  private void CGenetic3rd2SkillDataMgr::CGenetic3rd2SkillDataMgr()
  private void CGenetic3rd2SkillDataMgr::~CGenetic3rd2SkillDataMgr()
  private bool CGenetic3rd2SkillDataMgr::Init()
  /* [0x0003:0x0004b2b0] */ static  class CGenetic3rd2SkillDataMgr * m_cpSelf
  /* this+0x40 */ bool m_bOK
  public class CGenetic3rd2SkillDataMgr & operator=(const class CGenetic3rd2SkillDataMgr &)
  private void * __vecDelDtor(unsigned int)
}

struct CGenetic3rd2SkillDataMgr::Init::__l4::tagLuaGlueFunc {
  /* this+0x0 */ function  * func
  /* this+0x4 */ const char * name
}

class CGenetic3rd2SkillDataMgrStuff::lcBombRecipe {
  CGenetic3rd2SkillDataMgrStuff::lcRecipe, offset = 0x0

  /* this+0x18 */ class CGenetic3rd2SkillDataMgrStuff::lcItem m_Manual

  /* this+0x20 */ int m_DifficultFactor
  public void CGenetic3rd2SkillDataMgrStuff::lcBombRecipe::lcBombRecipe(const class CGenetic3rd2SkillDataMgrStuff::lcBombRecipe &)
  public void lcBombRecipe(class CGenetic3rd2SkillDataMgrStuff::lcItem, class std::vector<CGenetic3rd2SkillDataMgrStuff::lcItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcItem> >, class CGenetic3rd2SkillDataMgrStuff::lcItem, int)
  public void CGenetic3rd2SkillDataMgrStuff::lcBombRecipe::~lcBombRecipe()
  public class CGenetic3rd2SkillDataMgrStuff::lcBombRecipe & operator=(const class CGenetic3rd2SkillDataMgrStuff::lcBombRecipe &)
  public void * __vecDelDtor(unsigned int)
}

class CGenetic3rd2SkillDataMgrStuff::lcItem {
  /* this+0x0 */ int m_ID
  /* this+0x4 */ int m_Cnt
  public void Set(const int, const int)
  public void lcItem()
  public void lcItem(const int, const int)
  public void ~lcItem()
  public void * __vecDelDtor(unsigned int)
}

class CGenetic3rd2SkillDataMgrStuff::lcMixCookingCompensationItem {
  CGenetic3rd2SkillDataMgrStuff::lcItem, offset = 0x0

  /* this+0x8 */ int m_PermillRandomFactor
  public bool operator==(const class CGenetic3rd2SkillDataMgrStuff::lcMixCookingCompensationItem &)
  public void lcMixCookingCompensationItem(const int, const int, const int)
  public void ~lcMixCookingCompensationItem()
  public void * __vecDelDtor(unsigned int)
}

class CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe {
  CGenetic3rd2SkillDataMgrStuff::lcRecipe, offset = 0x0

  /* this+0x18 */ class CGenetic3rd2SkillDataMgrStuff::lcItem m_Manual

  /* this+0x20 */ int m_DifficultFactor
  public void CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe::lcMixCookingRecipe(const class CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe &)
  public void lcMixCookingRecipe(class CGenetic3rd2SkillDataMgrStuff::lcItem, class std::vector<CGenetic3rd2SkillDataMgrStuff::lcItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcItem> >, class CGenetic3rd2SkillDataMgrStuff::lcItem, int)
  public void CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe::~lcMixCookingRecipe()
  public class CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe & operator=(const class CGenetic3rd2SkillDataMgrStuff::lcMixCookingRecipe &)
  public void * __vecDelDtor(unsigned int)
}

class CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe {
  CGenetic3rd2SkillDataMgrStuff::lcRecipe, offset = 0x0

  /* this+0x18 */ class CGenetic3rd2SkillDataMgrStuff::lcItem m_Manual

  /* this+0x20 */ int m_DifficultFactor
  public void CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe::lcPharmacyRecipe(const class CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe &)
  public void lcPharmacyRecipe(class CGenetic3rd2SkillDataMgrStuff::lcItem, class std::vector<CGenetic3rd2SkillDataMgrStuff::lcItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcItem> >, class CGenetic3rd2SkillDataMgrStuff::lcItem, int)
  public void CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe::~lcPharmacyRecipe()
  public class CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe & operator=(const class CGenetic3rd2SkillDataMgrStuff::lcPharmacyRecipe &)
  public void * __vecDelDtor(unsigned int)
}

class CGenetic3rd2SkillDataMgrStuff::lcRecipe {
  /* this+0x0 */ class std::vector<CGenetic3rd2SkillDataMgrStuff::lcItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcItem> > m_Materials

  /* this+0x10 */ class CGenetic3rd2SkillDataMgrStuff::lcItem m_Product

  public void CGenetic3rd2SkillDataMgrStuff::lcRecipe::lcRecipe(const class CGenetic3rd2SkillDataMgrStuff::lcRecipe &)
  public void lcRecipe(const class std::vector<CGenetic3rd2SkillDataMgrStuff::lcItem,std::allocator<CGenetic3rd2SkillDataMgrStuff::lcItem> > &, const class CGenetic3rd2SkillDataMgrStuff::lcItem &)
  public void CGenetic3rd2SkillDataMgrStuff::lcRecipe::~lcRecipe()
  public class CGenetic3rd2SkillDataMgrStuff::lcRecipe & operator=(const class CGenetic3rd2SkillDataMgrStuff::lcRecipe &)
  public void * __vecDelDtor(unsigned int)
}

class CGeneticSlingItemMgr {
  public void CGeneticSlingItemMgr::OnThrow(const int, class CActor *, class CActor *)
  public void CGeneticSlingItemMgr::OnConsume(const int, class CPC *)
  public static bool CGeneticSlingItemMgr::CreateInstance()
  public static void CGeneticSlingItemMgr::DestroyInstance()
  public bool isOK()
  /* [0x0003:0x0004b2b4] */ static  class CGeneticSlingItemMgr * m_cpSelf
  /* this+0x0 */ bool m_bOK
  private void CGeneticSlingItemMgr::CGeneticSlingItemMgr()
  private void ~CGeneticSlingItemMgr()
  private void * __vecDelDtor(unsigned int)
}

class CGlobalVarDB {
  CODBC, offset = 0x0

  public void CGlobalVarDB(const class CGlobalVarDB &)
  public void CGlobalVarDB::CGlobalVarDB()
  public void CGlobalVarDB::~CGlobalVarDB()
  public int CGlobalVarDB::CreateGlobalVar(const char *, int)
  public int CGlobalVarDB::GetGlobalVar(const char *, int &)
  public int CGlobalVarDB::SetGlobalVar(const char *, int)
  public int CGlobalVarDB::IncGlobalVar(const char *, int)
  public int CGlobalVarDB::DecGlobalVar(const char *, int)
  public bool CGlobalVarDB::CreateGlobalStr(const char *, char *)
  public bool CGlobalVarDB::GetGlobalStr(const char *, char *)
  public bool CGlobalVarDB::SetGlobalStr(const char *, char *)
  public class CGlobalVarDB & operator=(const class CGlobalVarDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CGuild {
    *
  public int FindBanishMember(int)
  public void CGuild::UpdateMemberStatus(int, int, short, int, short, short, short)
  public void UpdateMemberJob_Level(int, int, int)
  public void CGuild::UpdateMemberChangePos(unsigned long, unsigned long)
  public void CGuild::UpdateMemberPosition(unsigned long, char *, int, int, int)
  public int CGuild::FindAllyGuild(unsigned long)
  public int CGuild::FindHostileGuild(unsigned long)
  public int CGuild::IsMaster(unsigned long)
  public int CGuild::GetPosJoinRight(unsigned long)
  public int CGuild::GetPosPenaltyRight(unsigned long)
  public int CGuild::GetAllyCount()
  public int CGuild::GetHostileCount()
  public void GetGuildInfo(struct GUILDINFO &)
  public void CGuild(class CGuild &)
  public void CGuild::CGuild()
  public void CGuild::~CGuild()
  public void CGuild::Init()
  public void CGuild::DeleteMPosition()
  public void CGuild::DeleteBanishInfo()
  public void CGuild::DeleteMInfo()
  public void CGuild::DeleteAllyInfo()
  public int CGuild::DeleteFirstBanishInfo()
  public void CGuild::ClearAll()
  public void SetGuildMasterName(char *)
  public void SetGuildName(char *)
  public void CGuild::SetGuildInfo(struct GUILDINFO *)
  public void SetGuildLevel(int)
  public void SetMaxUserNum(int)
  public void SetGuildExp(int)
  public void SetGDID(unsigned long)
  public void SetLevel(int)
  public void SetSkillPoint(int)
  public void SetSkillData(const unsigned char *, const int)
  public int CGuild::GetGuildMemberOnline()
  public char * CGuild::GetPosName(unsigned long)
  public char * GetMemberName(unsigned long)
  public int GetMemberExp(unsigned long)
  public int GetMemberLevel(unsigned long)
  public int GetMemberClass(unsigned long)
  public void CGuild::GetGuildPosID(char *, const int)
  public int CGuild::GetGuildPosID(unsigned long)
  public int CGuild::isJoinRight(unsigned long)
  public int CGuild::isPenaltyRight(unsigned long)
  public void CGuild::AddGuildMInfo(struct GUILDMINFO *)
  public void CGuild::AddGuildAllyInfo(struct GUILDALLYINFO *)
  public void CGuild::AddGuildBanishInfo(struct GUILDBANISHINFO *)
  public void CGuild::AddGuildMPosition(struct GUILDMPOSITION *)
  public int CGuild::GetAverageLevel()
  public int CGuild::GetGuildMSize()
  public int GetGuildMAllocSize()
  public int FindMember(unsigned long)
  public int CGuild::GetGuildAllySize()
  public int CGuild::GetGuildBanishSize()
  public int CGuild::GetGuildMPosSize()
  public int UpdateMoney(int, int)
  public struct GUILDMINFO * CGuild::AllocGuildMInfo()
  public struct GUILDALLYINFO * CGuild::AllocGuildAllyInfo()
  public struct GUILDBANISHINFO * CGuild::AllocGuildBanishInfo()
  public struct GUILDMPOSITION * CGuild::AllocGuildMPosition()
  public void CGuild::DeleteGuildAllyInfo(unsigned long, int)
  public void DeleteGuildBanishInfo(unsigned long)
  public void CGuild::DeleteGuildMInfo(unsigned long)
  public int CGuild::AddGuildExp(unsigned long, int)
  public int CGuild::GetServiceRate(unsigned long)
  public void GetGuildMemberInfo(unsigned long, struct GUILD_MEMBER_INFO &)
  public void CGuild::GetGuildBanishInfo(char *, const int)
  public void CGuild::GetGuildAllyInfo(char *, const int)
  public void CGuild::GetGuildMPosition(char *, const int)
  public void InitGuildMInfo(struct GUILDMINFO *, char *, char *, unsigned long, unsigned long, unsigned long, int, int, int, int)
  public void CGuild::InitGuildMInfo(struct GUILDMINFO *, char *, char *, unsigned long, unsigned long, unsigned long, int, int, int, int, int, int, int)
  public int GetGDID()
  public int GetLevel()
  public char * GetGuildName()
  public char * GetMasterName()
  public int GetMaxUserNum()
  public int GetHonor()
  public int GetVirtue()
  public int GetType()
  public int GetClass()
  public int GetMoney()
  public int GetArenaWin()
  public int GetArenaLose()
  public int GetArenaDrawn()
  public char * GetManageLand()
  public int GetExp()
  public int GetPoint()
  public char * GetDesc()
  public char * GetNotice()
  public char * GetNoticeSubject()
  public void UpdateNotice(const unsigned long, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public void SetEmblemVersion(int)
  public void SetEmblemLoad(int)
  public char * GetEmblem()
  public int GetEmblemVersion()
  public int IsEmblemLoad()
  public int GetEmblemSize()
  /* this+0x4 */ int m_GDID
  /* this+0x8 */ int m_level
  /* this+0xc */ char[0x18] m_guildName
  /* this+0x24 */ char[0x18] m_guildMasterName
  /* this+0x3c */ int m_maxUserNum
  /* this+0x40 */ int m_userNum
  /* this+0x44 */ int m_honor
  /* this+0x48 */ int m_virtue
  /* this+0x4c */ int m_type
  /* this+0x50 */ int m_class
  /* this+0x54 */ int m_money
  /* this+0x58 */ int m_arenaWin
  /* this+0x5c */ int m_arenaLose
  /* this+0x60 */ int m_arenaDrawn
  /* this+0x64 */ char[0x18] m_manageLand
  /* this+0x7c */ int m_exp
  /* this+0x80 */ int m_point
  /* this+0x84 */ char[0x50] m_desc
  /* this+0xd4 */ struct GUILDNOTICE m_guildNotice

  /* this+0x18c */ char[0xc00] m_guildEmblem
  /* this+0xd8c */ int m_isEmblemLoad
  /* this+0xd90 */ int m_emblemSize
  /* this+0xd94 */ int m_emblemVersion
  /* this+0xd98 */ class std::vector<GUILDMINFO *,std::allocator<GUILDMINFO *> > m_guildMInfo

  /* this+0xda8 */ class std::vector<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > m_guildAllyInfo

  /* this+0xdb8 */ class std::vector<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > m_guildBanishInfo

  /* this+0xdc8 */ class std::vector<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > m_guildMPosition

  /* this+0xdd8 */ class CMemoryMgr<GUILDMINFO> m_GuildMInfoMPool

  /* this+0xdfc */ class CMemoryMgr<GUILDALLYINFO> m_GuildAllyInfoMPool

  /* this+0xe20 */ class CMemoryMgr<GUILDBANISHINFO> m_GuildBanishInfoMPool

  /* this+0xe44 */ class CMemoryMgr<GUILDMPOSITION> m_GuildMPositionMPool

  protected void SetMoney(int)
  protected int AddMoney(int)
  /* this+0xe68 */ int m_skillDataLength
  /* this+0xe6c */ int m_skillPoint
  /* this+0xe70 */ unsigned char[0x12c] m_skillData
  public class CGuild & operator=(class CGuild &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CGuildDB {
  CODBC, offset = 0x0

  public void CGuildDB(const class CGuildDB &)
  public void CGuildDB::CGuildDB()
  public void CGuildDB::~CGuildDB()
  public int CGuildDB::Init(const char *, const char *)
  public unsigned long GetTableDWORD(unsigned long, int)
  public void GetTableChar(unsigned long, int, char *, int)
  public int UpdateTableChar(unsigned long, char *, int)
  public int UpdateTableDWORD(unsigned long, unsigned long, int)
  public int GetGuildList(int, int, int, int &, char *, int)
  public int GetGuildID(char *)
  private unsigned long GetDWORD(unsigned long, char *)
  private void GetChar(unsigned long, char *, char *, int)
  private void CGuildDB::InitStoredProcTable()
  /* this+0x14 */ class std::map<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> > > m_getProcTable

  public class CGuildDB & operator=(const class CGuildDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CGuildMgr {
    *
  public class CGuild * CGuildMgr::SearchGuild(unsigned long)
  public void CGuildMgr(const class CGuildMgr &)
  public void CGuildMgr::CGuildMgr()
  public void CGuildMgr::~CGuildMgr()
  public void CGuildMgr::Init()
  public void CGuildMgr::ClearGuildInfo()
  public int CGuildMgr::AddGuild(class CGuild *)
  public unsigned long GetGuildSize()
  /* this+0x4 */ class std::map<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> > > m_guildInfo

  public class CGuildMgr & operator=(const class CGuildMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CHARACTER_INFO {
  /* this+0x0 */ unsigned long GID
  /* this+0x4 */ int exp
  /* this+0x8 */ int money
  /* this+0xc */ int jobexp
  /* this+0x10 */ int joblevel
  /* this+0x14 */ int bodystate
  /* this+0x18 */ int healthstate
  /* this+0x1c */ int effectstate
  /* this+0x20 */ int virtue
  /* this+0x24 */ int honor
  /* this+0x28 */ short jobpoint
  /* this+0x2a */ int hp
  /* this+0x2e */ int maxhp
  /* this+0x32 */ short sp
  /* this+0x34 */ short maxsp
  /* this+0x36 */ short speed
  /* this+0x38 */ short job
  /* this+0x3a */ short head
  /* this+0x3c */ short weapon
  /* this+0x3e */ short level
  /* this+0x40 */ short sppoint
  /* this+0x42 */ short accessory
  /* this+0x44 */ short shield
  /* this+0x46 */ short accessory2
  /* this+0x48 */ short accessory3
  /* this+0x4a */ short headpalette
  /* this+0x4c */ short bodypalette
  /* this+0x4e */ unsigned char[0x18] name
  /* this+0x66 */ unsigned char Str
  /* this+0x67 */ unsigned char Agi
  /* this+0x68 */ unsigned char Vit
  /* this+0x69 */ unsigned char Int
  /* this+0x6a */ unsigned char Dex
  /* this+0x6b */ unsigned char Luk
  /* this+0x6c */ unsigned char CharNum
  /* this+0x6d */ unsigned char haircolor
  /* this+0x6e */ short bIsChangedCharName
  /* this+0x70 */ unsigned char[0x10] mapName
  /* this+0x80 */ long DeleteReservedDate
  /* this+0x84 */ int nRobe
  /* this+0x88 */ int m_nchrSlotCnt
  /* this+0x8c */ int nCharNameChangeCnt
}

struct CHARACTER_LIST {
  /* this+0x0 */ unsigned long dwGID
  /* this+0x4 */ unsigned char SlotIdx
}

struct CHARINFO_FROM_CHARACTERDB {
  /* this+0x0 */ int GID
  /* this+0x4 */ int exp
  /* this+0x8 */ int AID
  /* this+0xc */ int GuildID
  /* this+0x10 */ int money
  /* this+0x14 */ int jobexp
  /* this+0x18 */ int joblevel
  /* this+0x1c */ int bodystate
  /* this+0x20 */ int healthstate
  /* this+0x24 */ int effectstate
  /* this+0x28 */ int virtue
  /* this+0x2c */ int honor
  /* this+0x30 */ int hp
  /* this+0x34 */ short maxhp
  /* this+0x36 */ short sp
  /* this+0x38 */ short maxsp
  /* this+0x3a */ short xPos
  /* this+0x3c */ short yPos
  /* this+0x3e */ short speed
  /* this+0x40 */ short jobpoint
  /* this+0x42 */ short sxPos
  /* this+0x44 */ short syPos
  /* this+0x46 */ short head
  /* this+0x48 */ short weapon
  /* this+0x4a */ short accessory
  /* this+0x4c */ short accessory2
  /* this+0x4e */ short accessory3
  /* this+0x50 */ short headpalette
  /* this+0x52 */ short bodypalette
  /* this+0x54 */ short cookMastery
  /* this+0x56 */ char[0x18] name
  /* this+0x6e */ char[0x10] mapname
  /* this+0x7e */ char[0x10] restartMapName
  /* this+0x8e */ short job
  /* this+0x90 */ short clevel
  /* this+0x92 */ short sppoint
  /* this+0x94 */ char Str
  /* this+0x95 */ char Agi
  /* this+0x96 */ char Vit
  /* this+0x97 */ char Int
  /* this+0x98 */ char Dex
  /* this+0x99 */ char Luk
  /* this+0x9a */ char CharNum
  /* this+0x9b */ unsigned char haircolor
    /* this+0x9c */ struct CHARINFO_FROM_CHARACTERDB::tagParty Party

  /* this+0x9d */ bool bOpenEquipmentWin
  /* this+0x9e */ short font
  /* this+0xa0 */ char[0x4] ZenyCheckSum
  /* this+0xa4 */ short robe
  /* this+0xa6 */ int chrSlotChangeCnt
  /* this+0xaa */ int charNameChangeCnt
}

struct CHARINFO_FROM_CHARACTERDB::tagParty {
  /* this+0x0 */ unsigned char Config
}

struct CHARINFO_TO_CHARACTERDB {
  /* this+0x0 */ int exp
  /* this+0x4 */ int GuildID
  /* this+0x8 */ int money
  /* this+0xc */ int jobexp
  /* this+0x10 */ int joblevel
  /* this+0x14 */ int bodystate
  /* this+0x18 */ int healthstate
  /* this+0x1c */ int effectstate
  /* this+0x20 */ int virtue
  /* this+0x24 */ int honor
  /* this+0x28 */ int hp
  /* this+0x2c */ short maxhp
  /* this+0x2e */ short sp
  /* this+0x30 */ short maxsp
  /* this+0x32 */ short xPos
  /* this+0x34 */ short yPos
  /* this+0x36 */ short speed
  /* this+0x38 */ short jobpoint
  /* this+0x3a */ short sxPos
  /* this+0x3c */ short syPos
  /* this+0x3e */ short job
  /* this+0x40 */ short clevel
  /* this+0x42 */ short sppoint
  /* this+0x44 */ short head
  /* this+0x46 */ short weapon
  /* this+0x48 */ short accessory
  /* this+0x4a */ short accessory2
  /* this+0x4c */ short accessory3
  /* this+0x4e */ short headpalette
  /* this+0x50 */ short bodypalette
  /* this+0x52 */ short cookMastery
  /* this+0x54 */ char[0x10] mapname
  /* this+0x64 */ char[0x10] restartMapName
  /* this+0x74 */ unsigned char Str
  /* this+0x75 */ unsigned char Agi
  /* this+0x76 */ unsigned char Vit
  /* this+0x77 */ unsigned char Int
  /* this+0x78 */ unsigned char Dex
  /* this+0x79 */ unsigned char Luk
  /* this+0x7a */ unsigned char haircolor
    /* this+0x7b */ struct CHARINFO_TO_CHARACTERDB::tagParty Party

  /* this+0x7c */ bool bOpenEquipmentWin
  /* this+0x7d */ short font
  /* this+0x7f */ char[0x4] ZenyCheckSum
  /* this+0x83 */ short robe
  /* this+0x85 */ int chrSlotChange
  /* this+0x89 */ int charNameChangeCnt
}

struct CHARINFO_TO_CHARACTERDB::tagParty {
  /* this+0x0 */ unsigned char Config
}

class CHPAmount {
    *
  public int operator int()
  public class CHPAmount & CHPAmount::operator+=(const int)
  public class CHPAmount & operator=(const class CHPAmount &)
  public class CHPAmount & CHPAmount::operator=(const int)
  public void CHPAmount::Init()
  public void CHPAmount::RecoveryProhibitionSet()
  public void CHPAmount::RecoveryProhibitionReset()
  public void CHPAmount::SetForceAmout(const int)
  public void CHPAmount(const class CHPAmount &)
  public void CHPAmount::CHPAmount()
  public void CHPAmount::~CHPAmount()
  /* this+0x4 */ int m_Amount
  /* this+0x8 */ int m_RecoveryProhibitionRefCnt
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CHSvrIOPacketHandler {
  CPacketHandler, offset = 0x0

  public void CHSvrIOPacketHandler(const class CHSvrIOPacketHandler &)
  public void CHSvrIOPacketHandler::CHSvrIOPacketHandler()
  public void CHSvrIOPacketHandler::~CHSvrIOPacketHandler()
  public int CHSvrIOPacketHandler::OnProcess()
  private int CHSvrIOPacketHandler::DispatchPacket(short, int)
  private void CHSvrIOPacketHandler::OnXX_CONNECT()
  private void CHSvrIOPacketHandler::OnHZ_HZ_ZSVR_INFO(const struct PACKET_HZ_ZSVR_INFO &)
  private void CHSvrIOPacketHandler::OnDisconnect(int, int)
  private void CHSvrIOPacketHandler::OnLogonRefuse(int)
  private void CHSvrIOPacketHandler::OnLogonPermit(int)
  private void OnHZ_LOGON_CHN(struct PACKET_HZ_LOGON_CHN &)
  private void CHSvrIOPacketHandler::OnMapMove(const unsigned long, const unsigned long)
  private void CHSvrIOPacketHandler::OnHServerRestart(int)
  private void CHSvrIOPacketHandler::OnInfoRemainTime(int)
  private void CHSvrIOPacketHandler::OnResRemainTime(int)
  private void OnHZ_NOTIFY_PCBANG(const struct PACKET_HZ_NOTIFY_PCBANG &)
  private void OnHZ_PERSONAL_INFORMATION(const struct PACKET_HZ_PERSONAL_INFORMATION &)
  private void CHSvrIOPacketHandler::OnHZ_PERSONAL_INFORMATION_2ND(const struct PACKET_HZ_PERSONAL_INFORMATION_2ND *)
  private void OnHZ_PERSONAL_INFORMATION_BRZ(const struct PACKET_HZ_PERSONAL_INFORMATION_BRZ *)
  private void OnHZ_PERSONAL_INFORMATION_CHN(const struct PACKET_HZ_PERSONAL_INFORMATION_CHN *)
  private void OnHZ_FATIGUE_INFO_CHN(const struct PACKET_HZ_FATIGUE_INFO_CHN &)
  private void CHSvrIOPacketHandler::OnHZ_LOGON_TW(const struct PACKET_HZ_LOGON_TW &)
  private void OnHZ_PING(const struct PACKET_HZ_PING &)
  private void CHSvrIOPacketHandler::OnNotifyPCBangPlayingTime(int)
  private void CHSvrIOPacketHandler::OnHZ_CHAR_NAME_CHANGED(const struct PACKET_HZ_CHAR_NAME_CHANGED &)
  private void CHSvrIOPacketHandler::OnHZ_USER_COUNT_REQ(const struct PACKET_HZ_USER_COUNT_REQ &)
  private void CHSvrIOPacketHandler::OnHZ_AUTH_ACK(const struct PACKET_HZ_AUTH_ACK &)
  private void CHSvrIOPacketHandler::OnXX_DISCONNECT(const struct PACKET_XX_DISCONNECT &)
  /* this+0x8 */ unsigned long m_OverPopulationCheckTM
  /* this+0xc */ bool m_bOverPopulation
  public class CHSvrIOPacketHandler & operator=(const class CHSvrIOPacketHandler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CHomunDataSaveADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ const unsigned long m_AID
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ enum CHomunDataSaveADBWork::enumResult m_Result
  /* this+0x20 */ class HomunDataStuff::CHomunData m_HomunData

  public const unsigned long GetGID()
  public const unsigned long GetAID()
  public const enum CHomunDataSaveADBWork::enumResult GetResult()
  private bool CHomunDataSaveADBWork::ExecQuery(class NODBCCtrl &)
  public void CHomunDataSaveADBWork(const class CHomunDataSaveADBWork &)
  public void CHomunDataSaveADBWork::CHomunDataSaveADBWork(const unsigned long, const unsigned long)
  public void CHomunDataSaveADBWork::~CHomunDataSaveADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CHomunLog {
  CDatabaseLog<SHOMUNLOG *>, offset = 0x0

  public void CHomunLog::AddHomunLog(class CNpcHomun *, struct HOMUN_DBINFO *, short)
  public void CHomunLog::ConnectToDatabase(const char *)
  private int CHomunLog::SaveToDatabase(void *, struct SHOMUNLOG *)
  public void CHomunLog(const class CHomunLog &)
  public void CHomunLog()
  public void ~CHomunLog()
  public class CHomunLog & operator=(const class CHomunLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CHomunSkillUpdateADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CHomunSkillUpdateADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ const unsigned long m_AID
  /* this+0x20 */ int m_ID
  /* this+0x24 */ int m_Level
  /* this+0x28 */ int m_RemainMS
  /* this+0x2c */ int m_Attr
  /* this+0x30 */ int m_Data
  public void CHomunSkillUpdateADBWork::Init(const int, const int, const int, const int, const int)
  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const int GetSkillID()
  public const enum CHomunSkillUpdateADBWork::enumResult GetResult()
  private bool CHomunSkillUpdateADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN Insert(class NODBCCtrl &, const int, const int, const int, const int)
  public void CHomunSkillUpdateADBWork(const class CHomunSkillUpdateADBWork &)
  public void CHomunSkillUpdateADBWork::CHomunSkillUpdateADBWork(const unsigned long, const unsigned long)
  public void CHomunSkillUpdateADBWork::~CHomunSkillUpdateADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CHostPathInfo {
  CPathInfo, offset = 0x0

  /* this+0x1c */ struct MOVEINFO m_moveInfo

  public void CHostPathInfo::InitPosition(int, int, unsigned char)
  public void CHostPathInfo(const class CHostPathInfo &)
  public void CHostPathInfo()
  public void CHostPathInfo::~CHostPathInfo()
  public class CHostPathInfo & operator=(const class CHostPathInfo &)
  public void * __vecDelDtor(unsigned int)
}

class CHuntInfo {
    *
  public void CHuntInfo(const class CHuntInfo &)
  public void CHuntInfo::CHuntInfo()
  public void CHuntInfo::~CHuntInfo()
  /* this+0x4 */ unsigned int m_questID
  /* this+0x8 */ unsigned int m_huntIdent
  /* this+0xc */ short m_huntCount
  /* this+0xe */ short m_maxCount
  /* this+0x10 */ unsigned long m_mobGID
  public bool CHuntInfo::SetMission(const unsigned int, const unsigned int, const unsigned long, const int, const int)
  public int CHuntInfo::GetCount()
  public int CHuntInfo::PlusOneCount()
  public int GetMaxCount()
  public unsigned long GetMobGID()
  public unsigned long GetQuestID()
  public int GetHuntIdent()
  public bool CHuntInfo::GetCompleteHunting()
  public class CHuntInfo & operator=(const class CHuntInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CHuntingList {
    *
  public void CHuntingList(const class CHuntingList &)
  public void CHuntingList::CHuntingList()
  public void CHuntingList::~CHuntingList()
  public bool CHuntingList::IsHuntingListFull()
  public int CHuntingList::FindHuntingList(int)
  public int CHuntingList::AddHuntingList(int)
  public bool CHuntingList::DeleteHuntingList(int)
  public bool CHuntingList::SetHuntingList(int, int)
  public void CHuntingList::ClearHuntingList()
  public int CHuntingList::ReadBinary(unsigned char *, int)
  public int CHuntingList::WriteBinary(unsigned char *, int &)
  public bool CHuntingList::PlusOneCount(int)
  public void CHuntingList::DisplayHuntingList(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public void CHuntingList::DisplayHuntingList2(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public int CHuntingList::UseHuntingList()
  public int CHuntingList::CheckHuntingList(int)
    /* this+0x4 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_mob2Count

  public class CHuntingList & operator=(const class CHuntingList &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CIMWTWork {
    *
    /* this+0x4 */ const enum CIMWTWork::enumTYPE m_Type
  private void CIMWTWork::Run()
  public const enum CIMWTWork::enumTYPE GetType()
  public void CIMWTWork(const class CIMWTWork &)
  public void CIMWTWork::CIMWTWork(const enum CIMWTWork::enumTYPE)
  public void CIMWTWork::~CIMWTWork()
  public void * __vecDelDtor(unsigned int)
}

class CIMWTWork_LoadMap {
  CIMWTWork, offset = 0x0

    /* this+0x8 */ class CInstantMapRes * const m_cpInstantMapRes
  /* this+0xc */ bool m_bOK
  /* this+0x10 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_MapName

  /* this+0x2c */ const int m_MapID
  /* this+0x30 */ const int m_MapType
  /* this+0x34 */ enum CIMWTWork_LoadMap::enumResult m_Result
  public const bool isOK()
  public class CInstantMapRes * GetMapResPtr()
  public const enum CIMWTWork_LoadMap::enumResult GetResult()
  public void CIMWTWork_LoadMap::Run()
  public void CIMWTWork_LoadMap(const class CIMWTWork_LoadMap &)
  public void CIMWTWork_LoadMap::CIMWTWork_LoadMap(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, class CInstantMapRes * const)
  public void CIMWTWork_LoadMap::~CIMWTWork_LoadMap()
  public void * __vecDelDtor(unsigned int)
}

class CISvrIOPacketHandler {
  CPacketHandler, offset = 0x0

  public void CISvrIOPacketHandler(const class CISvrIOPacketHandler &)
  public void CISvrIOPacketHandler::CISvrIOPacketHandler()
  public void CISvrIOPacketHandler::~CISvrIOPacketHandler()
  public int CISvrIOPacketHandler::OnProcess()
  public void CISvrIOPacketHandler::SetLastError(unsigned long)
  /* this+0x8 */ int m_OldHeader
  /* this+0xc */ unsigned short m_OldPacketSize
  /* this+0x10 */ unsigned long m_lastError
  private int CISvrIOPacketHandler::DispatchPacket(short, int)
  private void CISvrIOPacketHandler::OnWhisper(int)
  private void CISvrIOPacketHandler::OnWhisper_2(int)
  private void CISvrIOPacketHandler::OnWhisperAck(int)
  private void CISvrIOPacketHandler::OnUserCount(int)
  private void CISvrIOPacketHandler::OnIZ_BROADCAST(const struct PACKET_IZ_BROADCAST *)
  private void CISvrIOPacketHandler::OnSpecialMove(int)
  private void CISvrIOPacketHandler::OnAddMemberToGroup(int)
  private void CISvrIOPacketHandler::OnDeleteMemberFromGroup(int)
  private void CISvrIOPacketHandler::OnAckMakeGroup(int)
  private void CISvrIOPacketHandler::OnGroupList(int)
  private void CISvrIOPacketHandler::OnAckReqJoinGroup(int)
  private void CISvrIOPacketHandler::OnReqJoinGroup(int)
  private void CISvrIOPacketHandler::OnGRIDUpdate(int)
  private void CISvrIOPacketHandler::OnChatParty(int)
  private void CISvrIOPacketHandler::OnDisconnectAll(int)
  private void CISvrIOPacketHandler::OnReqServerState(int)
  private void CISvrIOPacketHandler::OnResultGuildMake(int)
  private void CISvrIOPacketHandler::OnReqJoinGuild(int)
  private void OnReqJoinGuild2(const struct PACKET_IZ_REQ_JOIN_GUILD2 &)
  private void CISvrIOPacketHandler::OnAckReqJoinGuild(int)
  private void CISvrIOPacketHandler::OnUpdateCharGDID(int)
  private void CISvrIOPacketHandler::OnGuildInfo(int)
  private void OnAckGuildZeny(int)
  private void CISvrIOPacketHandler::OnDisconnectCharacter(int)
  private void CISvrIOPacketHandler::OnChangeOwnerAgit(int)
  private void CISvrIOPacketHandler::OnDivorce(int)
  private void CISvrIOPacketHandler::OnFriendsList(int)
  private void CISvrIOPacketHandler::OnFriendsState(int)
  private void CISvrIOPacketHandler::OnAddFriend(int)
  private void CISvrIOPacketHandler::OnDeleteFriends(int)
  private void CISvrIOPacketHandler::OnMailReqGetList(int)
  private void CISvrIOPacketHandler::OnMailReqOpen(int)
  private void CISvrIOPacketHandler::OnMailReqGetItem(int)
  private void CISvrIOPacketHandler::OnMailReqSend(int)
  private void CISvrIOPacketHandler::OnMailReceive(int)
  private void CISvrIOPacketHandler::OnMailAckMailDelete(int)
  private void CISvrIOPacketHandler::OnMailAckMailReturn(int)
  private void CISvrIOPacketHandler::OnAckLogon(int)
  private void CISvrIOPacketHandler::OnChkProcessTime(int)
  private void CISvrIOPacketHandler::OnReqGroupInfoChangeV2(int)
  private void CISvrIOPacketHandler::OnChangeGroupMaster(int)
  private void CISvrIOPacketHandler::OnSeekParty(int)
  private void CISvrIOPacketHandler::OnSeekPartyMember(int)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_SYNC2(const int)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_SUBSCRIPTION_INFO2(const int)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_INFO2(const int)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_MSG2(const int)
  private void CISvrIOPacketHandler::OnINSTANTMAP_CREATE_REQ(const struct PACKET_IZ_INSTANTMAP_CREATE_REQ &)
  private void OnINSTANTMAP_PLAYER_ENTER(const struct PACKET_IZ_INSTANTMAP_PLAYER_ENTER &)
  private void CISvrIOPacketHandler::OnINSTNATMAP_DESTROY(const struct PACKET_IZ_INSTNATMAP_DESTROY &)
  private void CISvrIOPacketHandler::OnXX_CONNECT(const struct PACKET_XX_CONNECT &)
  private void CISvrIOPacketHandler::OnXX_DISCONNECT(const struct PACKET_XX_DISCONNECT &)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_MSG(const struct PACKET_IZ_MEMORIALDUNGEON_MSG &)
  private void CISvrIOPacketHandler::OnIZ_PARTY_JOIN_REQ(const struct PACKET_IZ_PARTY_JOIN_REQ &)
  private void CISvrIOPacketHandler::OnIZ_PARTY_JOIN_REQ_ACK(const struct PACKET_IZ_PARTY_JOIN_REQ_ACK &)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_SUBSCRIPTION_INFO(const struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_INFO &)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_SUBSCRIPTION_NOTIFY(const struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_NOTIFY &)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_INFO(const struct PACKET_IZ_MEMORIALDUNGEON_INFO &)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_NOTIFY(const struct PACKET_IZ_MEMORIALDUNGEON_NOTIFY &)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_SYNC(const struct PACKET_IZ_MEMORIALDUNGEON_SYNC &)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_VISA(const struct PACKET_IZ_MEMORIALDUNGEON_VISA &)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_COMMAND(const struct PACKET_IZ_MEMORIALDUNGEON_COMMAND &)
  private void CISvrIOPacketHandler::OnIZ_MEMORIALDUNGEON_OPENSTATE(const struct PACKET_IZ_MEMORIALDUNGEON_OPENSTATE &)
  private void CISvrIOPacketHandler::OnIZ_BROADCASTING_SPECIAL_ITEM_OBTAIN(const class std::vector<unsigned char,std::allocator<unsigned char> > &)
  private void CISvrIOPacketHandler::OnIZ_REQ_EDIT_EXP(const struct PACKET_IZ_REQ_EDIT_EXP &)
  private void OnIZ_LEAVE_GROUP(const struct PACKET_IZ_LEAVE_GROUP &)
  private void OnIZ_GPK_DYNCODE_RELOAD(const struct PACKET_IZ_GPK_DYNCODE_RELOAD &)
  private void OnIZ_IRMAIL_NOTIFY(const struct PACKET_IZ_IRMAIL_NOTIFY &)
  private void CISvrIOPacketHandler::OnIZ_AUTH_ACK(const struct PACKET_IZ_AUTH_ACK &)
  private void OnIZ_INFO_ENTRY_QUEUE_APPLY(const struct PACKET_IZ_INFO_ENTRY_QUEUE_APPLY &)
  private void OnIZ_NOTIFY_ENTRY_QUEUE_APPLY(const struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_APPLY *)
  private void OnIZ_RESULT_ENTRY_QUEUE_APPLY(const struct PACKET_IZ_RESULT_ENTRY_QUEUE_APPLY &)
  private void OnIZ_NOTIFY_ENTRY_QUEUE_CANCEL(const struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_CANCEL &)
  private void OnIZ_RESULT_ENTRY_QUEUE_CANCEL(const struct PACKET_IZ_RESULT_ENTRY_QUEUE_CANCEL &)
  private void OnIZ_ENTRY_QUEUE_ADMISSION(const struct PACKET_IZ_ENTRY_QUEUE_ADMISSION &)
  private void OnIZ_NOTIFY_ENTRY_QUEUE_ADMISSION_ACCEPT(const struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_ADMISSION_ACCEPT &)
  private void OnIZ_RESULT_ENTRY_QUEUE_ADMISSION_ACCEPT(const struct PACKET_IZ_RESULT_ENTRY_QUEUE_ADMISSION_ACCEPT &)
  private void OnIZ_NOTIFY_ENTRY_QUEUE_ADMISSION_REFUSE(const struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_ADMISSION_REFUSE &)
  private void OnIZ_RESULT_ENTRY_QUEUE_ADMISSION_REFUSE(const struct PACKET_IZ_RESULT_ENTRY_QUEUE_ADMISSION_REFUSE &)
  private void OnIZ_LOBBY_ADMISSION(const struct PACKET_IZ_LOBBY_ADMISSION &)
  private void OnIZ_LOBBY_ADMISSION_V2(const struct PACKET_IZ_LOBBY_ADMISSION_V2 &)
  private void OnIZ_NOTIFY_LOBBY_ADMISSION_ACCEPT(const struct PACKET_IZ_NOTIFY_LOBBY_ADMISSION_ACCEPT &)
  private void OnIZ_RESULT_LOBBY_ADMISSION_ACCEPT(const struct PACKET_IZ_RESULT_LOBBY_ADMISSION_ACCEPT &)
  private void OnIZ_NOTIFY_LOBBY_ADMISSION_REFUSE(const struct PACKET_IZ_NOTIFY_LOBBY_ADMISSION_REFUSE &)
  private void OnIZ_RESULT_LOBBY_ADMISSION_REFUSE(const struct PACKET_IZ_RESULT_LOBBY_ADMISSION_REFUSE &)
  private void OnIZ_ENTRY_QUEUE_LOGOUT(const struct PACKET_IZ_ENTRY_QUEUE_LOGOUT &)
  private void OnIZ_ENTRY_QUEUE_MOVE_ROOM(const struct PACKET_IZ_ENTRY_QUEUE_MOVE_ROOM &)
  private void OnIZ_LOBBY_MOVE_ROOM(const struct PACKET_IZ_LOBBY_MOVE_ROOM &)
  private void OnIZ_ENTRY_QUEUE_RANKING(const struct PACKET_IZ_ENTRY_QUEUE_RANKING &)
  private void OnIZ_NOTIFY_ENTRY_QUEUE_RANKING(const struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_RANKING &)
  private void OnIZ_NOTIFY_MAKERRANK(const struct PACKET_IZ_NOTIFY_MAKERRANK &)
  private void OnIZ_SET_EFFECT_HIGH_RANKER(const struct PACKET_IZ_SET_EFFECT_HIGH_RANKER &)
  private void OnIZ_RESET_EFFECT_HIGH_RANKER(const struct PACKET_IZ_RESET_EFFECT_HIGH_RANKER &)
  /* this+0x14 */ char[0x3c00] m_PacketBuffer
  public class CISvrIOPacketHandler & operator=(const class CISvrIOPacketHandler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CISvrIOPacketHandler::DispatchPacket::__l48::TEMPHEADER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
}

struct CISvrIOPacketHandler::DispatchPacket::__l49::TEMPHEADER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
}

class CITP {
    *
  public void CITP(const class CITP &)
  public void CITP::CITP()
  public void CITP::Init()
  public unsigned short CITP::GetType()
  public void CITP::GetAttackValue(short &)
  public void CITP::GetDefence(short &)
  public unsigned short CITP::GetLocation(short)
  public int CITP::IsApparel()
  public short CITP::PlusDexValue()
  public short CITP::PlusStrValue()
  public short CITP::PlusIntValue()
  public short CITP::PlusLukValue()
  public short CITP::PlusAgiValue()
  public short CITP::PlusVitValue()
  public void CITP::GetMagicDefence(short &)
  public int CITP::GetStatus()
  public int CITP::GetAttRange()
  public short CITP::GetClass()
  public int CITP::GetItemLevel()
  public int CITP::IsRefinable()
  public int CITP::IsDamagable()
  public int CITP::GetMaxSlot()
  public int CITP::GetProperty()
  public int CITP::IsMovable()
  public unsigned long CITP::GetAvailableJobCode()
  public bool CITP::IsCashItem()
  public bool CITP::IsWeapon()
  public bool CITP::IsRangeWeapon()
  public bool CITP::IsPickUpNotifyParty()
  public short CITP::GetMATK()
  public bool CITP::IsBothHandWeapon()
  public void SetUseEvent(bool)
  public bool IsUsableLevel(const int)
  public unsigned long GetBitExpressionJob(short)
  public void SetBindOnEquip()
  public bool IsBindOnEquip()
  /* this+0x4 */ unsigned short m_ITID
  /* this+0x8 */ int m_weight
  /* this+0xc */ int m_price
  /* this+0x10 */ int m_location
  /* this+0x14 */ char[0x18] m_name
  /* this+0x2c */ int m_isRefinable
  /* this+0x30 */ int m_isDamagable
  /* this+0x34 */ int m_isMovable
  /* this+0x38 */ unsigned long m_availableJob
  /* this+0x3c */ bool m_bCashItem
  /* this+0x3d */ bool m_isUseEvent
  /* this+0x3e */ bool m_isBindOnEquip
  /* this+0x40 */ short m_minLevel
  /* this+0x42 */ short m_maxLevel
  public class CITP & operator=(const class CITP &)
}

class CITPAmmo {
  CITP, offset = 0x0

  public unsigned short CITPAmmo::GetType()
  public int CITPAmmo::IsApparel()
  public void CITPAmmo::GetAttackValue(short &)
  public unsigned short CITPAmmo::GetLocation(short)
  public int CITPAmmo::GetProperty()
  public unsigned long CITPAmmo::GetAvailableJobCode()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_property
  public void CITPAmmo(const class CITPAmmo &)
  public void CITPAmmo()
  public class CITPAmmo & operator=(const class CITPAmmo &)
}

class CITPArmor {
  CITP, offset = 0x0

  public void CITPArmor::Init()
  public unsigned short CITPArmor::GetType()
  public void CITPArmor::GetDefence(short &)
  public int CITPArmor::IsApparel()
  public short CITPArmor::GetClass()
  public unsigned short CITPArmor::GetLocation(short)
  public short CITPArmor::PlusDexValue()
  public short CITPArmor::PlusStrValue()
  public short CITPArmor::PlusIntValue()
  public short CITPArmor::PlusLukValue()
  public short CITPArmor::PlusAgiValue()
  public short CITPArmor::PlusVitValue()
  public void CITPArmor::GetMagicDefence(short &)
  public int CITPArmor::GetMaxSlot()
  public bool CITPArmor::IsPickUpNotifyParty()
  /* this+0x44 */ int m_defencePower
  /* this+0x48 */ int m_maxSlot
  /* this+0x4c */ int m_str
  /* this+0x50 */ int m_int
  /* this+0x54 */ int m_vit
  /* this+0x58 */ int m_dex
  /* this+0x5c */ int m_agi
  /* this+0x60 */ int m_luk
  /* this+0x64 */ int m_mdef
  /* this+0x68 */ int m_maxHp
  /* this+0x6c */ int m_effect
  /* this+0x70 */ int m_maxSp
  /* this+0x74 */ int m_sex
  /* this+0x78 */ short m_class
  public void CITPArmor(const class CITPArmor &)
  public void CITPArmor()
  public class CITPArmor & operator=(const class CITPArmor &)
}

class CITPArmorMB {
  CITPArmor, offset = 0x0

  public unsigned short CITPArmorMB::GetType()
  public unsigned short CITPArmorMB::GetLocation(short)
  public void CITPArmorMB(const class CITPArmorMB &)
  public void CITPArmorMB()
  public class CITPArmorMB & operator=(const class CITPArmorMB &)
}

class CITPArmorTB {
  CITPArmor, offset = 0x0

  public unsigned short CITPArmorTB::GetType()
  public unsigned short CITPArmorTB::GetLocation(short)
  public void CITPArmorTB(const class CITPArmorTB &)
  public void CITPArmorTB()
  public class CITPArmorTB & operator=(const class CITPArmorTB &)
}

class CITPArmorTM {
  CITPArmor, offset = 0x0

  public unsigned short CITPArmorTM::GetType()
  public unsigned short CITPArmorTM::GetLocation(short)
  public void CITPArmorTM(const class CITPArmorTM &)
  public void CITPArmorTM()
  public class CITPArmorTM & operator=(const class CITPArmorTM &)
}

class CITPArmorTMB {
  CITPArmor, offset = 0x0

  public unsigned short CITPArmorTMB::GetType()
  public unsigned short CITPArmorTMB::GetLocation(short)
  public void CITPArmorTMB(const class CITPArmorTMB &)
  public void CITPArmorTMB()
  public class CITPArmorTMB & operator=(const class CITPArmorTMB &)
}

class CITPArrow {
  CITP, offset = 0x0

  public void CITPArrow::Init()
  public unsigned short CITPArrow::GetType()
  public int CITPArrow::IsApparel()
  public void CITPArrow::GetAttackValue(short &)
  public unsigned short CITPArrow::GetLocation(short)
  public int CITPArrow::GetProperty()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_property
  public void CITPArrow(const class CITPArrow &)
  public void CITPArrow()
  public class CITPArrow & operator=(const class CITPArrow &)
}

class CITPBothhand {
  CITP, offset = 0x0

  public void CITPBothhand::Init()
  public unsigned short CITPBothhand::GetType()
  public void CITPBothhand::GetAttackValue(short &)
  public int CITPBothhand::IsApparel()
  public short CITPBothhand::GetClass()
  public unsigned short CITPBothhand::GetLocation(short)
  public short CITPBothhand::PlusDexValue()
  public short CITPBothhand::PlusStrValue()
  public short CITPBothhand::PlusIntValue()
  public short CITPBothhand::PlusLukValue()
  public short CITPBothhand::PlusAgiValue()
  public short CITPBothhand::PlusVitValue()
  public int CITPBothhand::GetAttRange()
  public int CITPBothhand::GetProperty()
  public int CITPBothhand::GetItemLevel()
  public int CITPBothhand::GetMaxSlot()
  public bool CITPBothhand::IsWeapon()
  public bool CITPBothhand::IsRangeWeapon()
  public bool CITPBothhand::IsPickUpNotifyParty()
  public short CITPBothhand::GetMATK()
  public bool CITPBothhand::IsBothHandWeapon()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ short m_MATK
  /* this+0x4c */ int m_AR
  /* this+0x50 */ int m_maxSlot
  /* this+0x54 */ int m_str
  /* this+0x58 */ int m_int
  /* this+0x5c */ int m_vit
  /* this+0x60 */ int m_dex
  /* this+0x64 */ int m_agi
  /* this+0x68 */ int m_luk
  /* this+0x6c */ int m_effect
  /* this+0x70 */ int m_sex
  /* this+0x74 */ int m_level
  /* this+0x78 */ short m_class
  /* this+0x7c */ int m_property
  public void CITPBothhand(const class CITPBothhand &)
  public void CITPBothhand()
  public class CITPBothhand & operator=(const class CITPBothhand &)
}

class CITPBow {
  CITP, offset = 0x0

  public void CITPBow::Init()
  public unsigned short CITPBow::GetType()
  public void CITPBow::GetAttackValue(short &)
  public int CITPBow::IsApparel()
  public short CITPBow::GetClass()
  public unsigned short CITPBow::GetLocation(short)
  public short CITPBow::PlusDexValue()
  public short CITPBow::PlusStrValue()
  public short CITPBow::PlusIntValue()
  public short CITPBow::PlusLukValue()
  public short CITPBow::PlusAgiValue()
  public short CITPBow::PlusVitValue()
  public int CITPBow::GetAttRange()
  public int CITPBow::GetProperty()
  public int CITPBow::GetItemLevel()
  public int CITPBow::GetMaxSlot()
  public bool CITPBow::IsWeapon()
  public bool CITPBow::IsRangeWeapon()
  public bool CITPBow::IsPickUpNotifyParty()
  public bool CITPBow::IsBothHandWeapon()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_AR
  /* this+0x4c */ int m_maxSlot
  /* this+0x50 */ int m_str
  /* this+0x54 */ int m_int
  /* this+0x58 */ int m_vit
  /* this+0x5c */ int m_dex
  /* this+0x60 */ int m_agi
  /* this+0x64 */ int m_luk
  /* this+0x68 */ int m_effect
  /* this+0x6c */ int m_sex
  /* this+0x70 */ int m_level
  /* this+0x74 */ short m_class
  /* this+0x78 */ int m_property
  public void CITPBow(const class CITPBow &)
  public void CITPBow()
  public class CITPBow & operator=(const class CITPBow &)
}

class CITPCannonball {
  CITP, offset = 0x0

  public unsigned short CITPCannonball::GetType()
  public int CITPCannonball::IsApparel()
  public void CITPCannonball::GetAttackValue(short &)
  public unsigned short CITPCannonball::GetLocation(short)
  public int CITPCannonball::GetProperty()
  public unsigned long CITPCannonball::GetAvailableJobCode()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_property
  public void CITPCannonball(const class CITPCannonball &)
  public void CITPCannonball()
  public class CITPCannonball & operator=(const class CITPCannonball &)
}

class CITPCard {
  CITP, offset = 0x0

  public void CITPCard::Init()
  public unsigned short CITPCard::GetType()
  public int CITPCard::IsApparel()
  public int CITPCard::GetProperty()
  /* this+0x44 */ unsigned long m_effect
  public int GetCompositionType()
  public int GetCompositionPos()
  public int CITPCard::IsCompositionable(class CITP *)
  public bool CITPCard::IsPickUpNotifyParty()
  /* this+0x48 */ int m_property
  /* this+0x4c */ int m_class
  /* this+0x50 */ int m_compositionType
  /* this+0x54 */ int m_compositionPos
  public void CITPCard(const class CITPCard &)
  public void CITPCard()
  public class CITPCard & operator=(const class CITPCard &)
}

class CITPCashPointItem {
  CITP, offset = 0x0

  public void CITPCashPointItem::Init()
  public unsigned short CITPCashPointItem::GetType()
  public int CITPCashPointItem::IsApparel()
  public short CITPCashPointItem::GetChangeItemID()
  public short CITPCashPointItem::GetCount()
  /* this+0x44 */ unsigned short m_ChangeItemID
  /* this+0x48 */ int m_Count
  public void CITPCashPointItem(const class CITPCashPointItem &)
  public void CITPCashPointItem()
  public void CITPCashPointItem::~CITPCashPointItem()
  public class CITPCashPointItem & operator=(const class CITPCashPointItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CITPEvent {
  CITP, offset = 0x0

  public void CITPEvent::Init()
  public unsigned short CITPEvent::GetType()
  public int CITPEvent::IsApparel()
  public void CITPEvent(const class CITPEvent &)
  public void CITPEvent()
  public class CITPEvent & operator=(const class CITPEvent &)
}

class CITPGun {
  CITP, offset = 0x0

  public void CITPGun::Init()
  public unsigned short CITPGun::GetType()
  public void CITPGun::GetAttackValue(short &)
  public int CITPGun::IsApparel()
  public short CITPGun::GetClass()
  public unsigned short CITPGun::GetLocation(short)
  public short CITPGun::PlusDexValue()
  public short CITPGun::PlusStrValue()
  public short CITPGun::PlusIntValue()
  public short CITPGun::PlusLukValue()
  public short CITPGun::PlusAgiValue()
  public short CITPGun::PlusVitValue()
  public int CITPGun::GetAttRange()
  public int CITPGun::GetProperty()
  public int CITPGun::GetItemLevel()
  public int CITPGun::GetMaxSlot()
  public bool CITPGun::IsWeapon()
  public bool CITPGun::IsRangeWeapon()
  public bool CITPGun::IsPickUpNotifyParty()
  public bool CITPGun::IsBothHandWeapon()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_AR
  /* this+0x4c */ int m_maxSlot
  /* this+0x50 */ int m_str
  /* this+0x54 */ int m_int
  /* this+0x58 */ int m_vit
  /* this+0x5c */ int m_dex
  /* this+0x60 */ int m_agi
  /* this+0x64 */ int m_luk
  /* this+0x68 */ int m_effect
  /* this+0x6c */ int m_sex
  /* this+0x70 */ int m_level
  /* this+0x74 */ short m_class
  /* this+0x78 */ int m_property
  public void CITPGun(const class CITPGun &)
  public void CITPGun()
  public class CITPGun & operator=(const class CITPGun &)
}

class CITPHeal {
  CITP, offset = 0x0

  public void CITPHeal::Init()
  public unsigned short CITPHeal::GetType()
  public int CITPHeal::IsApparel()
  public int CITPHeal::GetStatus()
  /* this+0x44 */ int m_minHp
  /* this+0x48 */ int m_maxHp
  /* this+0x4c */ int m_minSp
  /* this+0x50 */ int m_maxSp
  /* this+0x54 */ int m_abuse_gause
  /* this+0x58 */ int m_states
  public void CITPHeal(const class CITPHeal &)
  public void CITPHeal()
  public class CITPHeal & operator=(const class CITPHeal &)
}

class CITPMgr {
  CODBC, offset = 0x0

  public void CITPMgr(const class CITPMgr &)
  public void CITPMgr::CITPMgr()
  public void CITPMgr::~CITPMgr()
  public bool CITPMgr::Save(const char *)
  public void CITPMgr::Init(const char *)
  public void CITPMgr::LoadITP()
  public class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > > & GetNameMap()
  public class std::map<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > > & GetCombiItemList()
  public void InsertITP()
  public class CITP * CITPMgr::GetITP(unsigned short)
  public enum enumInventoryItemType CITPMgr::GetInventoryItemType(const unsigned short)
  public unsigned long CITPMgr::GetEffectID(const char *)
  public unsigned short CITPMgr::GetITID(const char *)
  public int CITPMgr::FindITID(const char *, unsigned long *)
  public short CITPMgr::GetItemWeight(unsigned short)
  public int CITPMgr::IsApparel(unsigned short)
  public int CITPMgr::IsCashPointItem(unsigned short)
  public char * CITPMgr::GetItemName(unsigned short)
  public void DBClose()
  public bool CITPMgr::IsScrollItem(unsigned short)
  public const bool CITPMgr::IsCostumeItem(const unsigned long)
  private void CITPMgr::GetQuest()
  private void CITPMgr::GetArmor(unsigned long)
  private void CITPMgr::GetCannonball()
  private void CITPMgr::GetArrow()
  private void CITPMgr::GetAmmo()
  private void CITPMgr::GetGun()
  private void CITPMgr::GetWeapon()
  private void CITPMgr::GetBothhand()
  private void CITPMgr::GetBow()
  private void CITPMgr::GetEvent()
  private void CITPMgr::GetSpecial()
  private void CITPMgr::GetHeal()
  private void CITPMgr::GetCard()
  private void CITPMgr::GetCashPointItem()
  private bool CITPMgr::GetThrow()
  private void CITPMgr::LoadItemMoveInfo()
  private bool CITPMgr::LoadCashItemList()
  private int CITPMgr::LoadCombiItemList(const char *)
  private void CITPMgr::LoadScrollItemList()
  private void CITPMgr::LoadItemBindOnEquip()
  private int CITPMgr::AddITP(class CITP *)
          /* this+0x14 */ class std::map<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> > > m_itp

  /* this+0x24 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > > m_itemName

  /* this+0x34 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > > m_effect

  /* this+0x44 */ class std::map<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > > m_combiItem

  /* this+0x54 */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > > m_scrollItem

  public class CITPMgr & operator=(const class CITPMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CITPQuest {
  CITP, offset = 0x0

  public void CITPQuest::Init()
  public unsigned short CITPQuest::GetType()
  public int CITPQuest::IsApparel()
  public void CITPQuest(const class CITPQuest &)
  public void CITPQuest()
  public class CITPQuest & operator=(const class CITPQuest &)
}

class CITPSpecial {
  CITP, offset = 0x0

  public void CITPSpecial::Init()
  public unsigned short CITPSpecial::GetType()
  public int CITPSpecial::IsApparel()
  /* this+0x44 */ unsigned long m_effect
  public void CITPSpecial(const class CITPSpecial &)
  public void CITPSpecial()
  public class CITPSpecial & operator=(const class CITPSpecial &)
}

class CITPThrow {
  CITP, offset = 0x0

  public unsigned short CITPThrow::GetType()
  public int CITPThrow::IsApparel()
  public void CITPThrow::GetAttackValue(short &)
  public unsigned short CITPThrow::GetLocation(short)
  public int CITPThrow::GetProperty()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_property
  public void CITPThrow(const class CITPThrow &)
  public void CITPThrow()
  public class CITPThrow & operator=(const class CITPThrow &)
}

class CITPWeapon {
  CITP, offset = 0x0

  public void CITPWeapon::Init()
  public unsigned short CITPWeapon::GetType()
  public void CITPWeapon::GetAttackValue(short &)
  public int CITPWeapon::IsApparel()
  public short CITPWeapon::GetClass()
  public unsigned short CITPWeapon::GetLocation(short)
  public short CITPWeapon::PlusDexValue()
  public short CITPWeapon::PlusStrValue()
  public short CITPWeapon::PlusIntValue()
  public short CITPWeapon::PlusLukValue()
  public short CITPWeapon::PlusAgiValue()
  public short CITPWeapon::PlusVitValue()
  public int CITPWeapon::GetAttRange()
  public int CITPWeapon::GetProperty()
  public int CITPWeapon::GetItemLevel()
  public int CITPWeapon::GetMaxSlot()
  public bool CITPWeapon::IsWeapon()
  public bool CITPWeapon::IsRangeWeapon()
  public bool CITPWeapon::IsPickUpNotifyParty()
  public short CITPWeapon::GetMATK()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ short m_MATK
  /* this+0x4c */ int m_AR
  /* this+0x50 */ int m_maxSlot
  /* this+0x54 */ int m_str
  /* this+0x58 */ int m_int
  /* this+0x5c */ int m_vit
  /* this+0x60 */ int m_dex
  /* this+0x64 */ int m_agi
  /* this+0x68 */ int m_luk
  /* this+0x6c */ int m_effect
  /* this+0x70 */ int m_sex
  /* this+0x74 */ int m_level
  /* this+0x78 */ short m_class
  /* this+0x7c */ int m_property
  public void CITPWeapon(const class CITPWeapon &)
  public void CITPWeapon()
  public class CITPWeapon & operator=(const class CITPWeapon &)
}

class CITZMsg {
  CMsg, offset = 0x0

  public void CITZMsg()
  /* this+0x18 */ int m_ITID
}

class CIVItItemFactory {
  CInventoryItemFactory, offset = 0x0

  public void CIVItItemFactory(class CIVItItemFactory &)
  public void CIVItItemFactory::CIVItItemFactory()
  public void CIVItItemFactory::~CIVItItemFactory()
  public void CIVItItemFactory::Init()
  public void CIVItItemFactory::Reset()
  public class IVItItem * CIVItItemFactory::AllocInventoryItem(unsigned short, short)
  public void CIVItItemFactory::FreeInventoryItem(class InventoryItem *)
  /* this+0x4 */ class CMemoryMgr<IVItNormalItem> m_NIMPool

  /* this+0x28 */ class CMemoryMgr<IVItNormalArrowItem> m_NAIMPool

  /* this+0x4c */ class CMemoryMgr<IVItEquipItem> m_EIMPool

  /* this+0x70 */ class CMemoryMgr<IVItQuestItem> m_QIMPool

  /* this+0x94 */ class CMemoryMgr<IVItCashPointItem> m_CPIPool

  public class CIVItItemFactory & operator=(class CIVItItemFactory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CIVItSkillFactory {
  CInventoryItemFactory, offset = 0x0

  public void CIVItSkillFactory(const class CIVItSkillFactory &)
  public void CIVItSkillFactory()
  public void ~CIVItSkillFactory()
  public class CIVItSkillFactory & operator=(const class CIVItSkillFactory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CIdentity {
    *
  public void CIdentity(const class CIdentity &)
  public void CIdentity()
  public void ~CIdentity()
  /* this+0x4 */ unsigned int m_identity
  public int Get()
  public class CIdentity & operator=(const class CIdentity &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CImitationInventory {
    *
    public enum CImitationInventory::IsAddableItemToBodyRet operator enum CImitationInventory::IsAddableItemToBodyRet()
  public void CImitationInventory(const class CImitationInventory &)
  public void CImitationInventory(class CPCItemInventoryMgr &, const int, const int, const class std::vector<CImitationInventoryItem,std::allocator<CImitationInventoryItem> > &)
  public void ~CImitationInventory()
  private void Add(class CImitationInventoryItem)
  private enum CImitationInventory::IsAddableItemToBodyRet IsAddable(const int, const int)
  /* this+0x4 */ class CPCItemInventoryMgr & m_InventoryMgr
  /* this+0x8 */ int m_weight
  /* this+0xc */ int m_size
  /* this+0x10 */ class std::vector<CImitationInventoryItem,std::allocator<CImitationInventoryItem> > m_Bag

  /* this+0x20 */ enum CImitationInventory::IsAddableItemToBodyRet m_Ret
  public void * __vecDelDtor(unsigned int)
}

class CImitationInventoryItem {
  /* this+0x0 */ int m_ID
  /* this+0x4 */ int m_count
  /* this+0x8 */ __int64 m_unique_identity_number
  /* this+0x10 */ long m_hire_expire_date
  /* this+0x14 */ unsigned long m_CreateGID
  public bool operator==(const class CImitationInventoryItem &)
  public void CImitationInventoryItem(const int, const int)
  public void CImitationInventoryItem()
}

class CImportantItem {
  public void CImportantItem(const class CImportantItem &)
  public void CImportantItem()
  public void ~CImportantItem()
  public void CImportantItem::LoadImportantItem()
  public int CImportantItem::IsImportantItem(unsigned long)
  /* this+0x0 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_mapImportantItem

  public class CImportantItem & operator=(const class CImportantItem &)
  public void * __vecDelDtor(unsigned int)
}

class CInsertCoupleADBWork {
  NAsyncDBWork, offset = 0x0

    public const unsigned long GetAID()
  public const unsigned long GetMale_GID()
  public const unsigned long GetFemale_GID()
  public const struct _SYSTEMTIME & GetWeddingTime()
  public const enum CInsertCoupleADBWork::enumResult GetResult()
  /* this+0x14 */ enum CInsertCoupleADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_AID
  /* this+0x1c */ const unsigned long m_MaleGID
  /* this+0x20 */ const unsigned long m_FemaleGID
  /* this+0x24 */ const struct _SYSTEMTIME m_WeddingTime

  private bool CInsertCoupleADBWork::ExecQuery(class NODBCCtrl &)
  public void CInsertCoupleADBWork(const class CInsertCoupleADBWork &)
  public void CInsertCoupleADBWork::CInsertCoupleADBWork(const unsigned long, const unsigned long, const unsigned long)
  public void ~CInsertCoupleADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CInsertFamilyADBWork {
  NAsyncDBWork, offset = 0x0

    public const enum CInsertFamilyADBWork::enumResult GetResult()
  public const int GetIndex()
  public const unsigned long GetFather_GID()
  public const unsigned long GetMother_GID()
  public const unsigned long GetBaby_GID()
  public const struct _SYSTEMTIME & GetWeddingTime()
  /* this+0x14 */ enum CInsertFamilyADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_FatherGID
  /* this+0x1c */ const unsigned long m_MotherGID
  /* this+0x20 */ const unsigned long m_BabyGID
  /* this+0x24 */ const struct _SYSTEMTIME m_Time

  /* this+0x34 */ int m_Index
  private bool CInsertFamilyADBWork::ExecQuery(class NODBCCtrl &)
  public void CInsertFamilyADBWork(const class CInsertFamilyADBWork &)
  public void CInsertFamilyADBWork::CInsertFamilyADBWork(const unsigned long, const unsigned long, const unsigned long, const unsigned long)
  public void ~CInsertFamilyADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CInsertQuestDBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ unsigned long m_GID
  /* this+0x18 */ unsigned long m_QID
  /* this+0x1c */ short m_Complete
  /* this+0x1e */ short m_Active
  /* this+0x20 */ unsigned long m_Mob_1_Id
  /* this+0x24 */ unsigned long m_Mob_2_Id
  /* this+0x28 */ unsigned long m_Mob_3_Id
  /* this+0x2c */ short m_Mob_1_Count
  /* this+0x2e */ short m_Mob_2_Count
  /* this+0x30 */ short m_Mob_3_Count
  /* this+0x34 */ long m_PlayTime
  /* this+0x38 */ enum CInsertQuestDBWork::enumResult m_Result
  public const enum CInsertQuestDBWork::enumResult GetResult()
  public const unsigned long GetGID()
  public const unsigned long GetQID()
  private bool CInsertQuestDBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CInsertQuestDBWork::InsertQuest(class NODBCCtrl &, const int, const int, const short, const short, const int, const short, const int, const short, const int, const short, const long)
  public void CInsertQuestDBWork::Init(const unsigned int, const int, const int, const short, const short, const int, const short, const int, const short, const int, const short, const long)
  public void CInsertQuestDBWork(const class CInsertQuestDBWork &)
  private void CInsertQuestDBWork::CInsertQuestDBWork()
  private void CInsertQuestDBWork::~CInsertQuestDBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CInstantMapConfiguration {
    *
  /* [0x0003:0x0004b608] */ static  class CInstantMapConfiguration * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ int m_FirstScriptEventRunSecond
  /* this+0xc */ bool m_Allow
  /* this+0x10 */ int m_expect_maximum_life_minute
  private bool CInstantMapConfiguration::Create()
  private void Destroy()
  public bool isOK()
  public int GetFirstScriptEventRunSecond()
  public bool IsAllow()
  public int GetExpectMaximumLifeMinute()
  public static bool CInstantMapConfiguration::CreateInstance()
  public static void CInstantMapConfiguration::DestroyInstance()
  public void CInstantMapConfiguration(const class CInstantMapConfiguration &)
  private void CInstantMapConfiguration::CInstantMapConfiguration()
  private void CInstantMapConfiguration::~CInstantMapConfiguration()
  public class CInstantMapConfiguration & operator=(const class CInstantMapConfiguration &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CInstantMapCtrl {
  N3Object, offset = 0x0

  N3Inter, offset = 0x8

    /* this+0xc */ const int m_hInstantMapID
  /* this+0x10 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_MapName

  /* this+0x2c */ const int m_MapType
  /* this+0x30 */ const unsigned int m_hRequestN2Obj
  /* this+0x34 */ class CInstantMapRes * m_cpInstantMapRes
  /* this+0x38 */ class N3MessageQueue m_MessageQueue

  /* this+0x74 */ bool m_bOK
  /* this+0x78 */ unsigned long m_ScriptFirstEventRequestTM
    /* this+0x7c */ enum CInstantMapCtrl::enumSTATE m_State
  /* this+0x80 */ function  * m_ProcessFuncPtr
  private void CInstantMapCtrl::ProcCreate(const int, const int, const int)
  private void CInstantMapCtrl::ProcCreate_MSG_REQUEST_MAPLOADING()
  private void CInstantMapCtrl::ProcCreate_WorkerThread_MSG_RESPONSE_WORK(const class CIMWTWork *)
  private void CInstantMapCtrl::ProcDestroy(const int, const int, const int)
  private void CInstantMapCtrl::ProcOperation(const int, const int, const int)
  public const bool isOK()
  public void CInstantMapCtrl::Process()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CInstantMapCtrl::GetMapName()
  public const int GetMapID()
  public const unsigned int GetRequestN2Obj()
  public class CInstantMapRes * GetMapResPtr()
  public const bool IsDestroyReady()
  public void CInstantMapCtrl::Receive(const unsigned int, const unsigned int, const unsigned int)
  public void CInstantMapCtrl(class CInstantMapCtrl &)
  public void CInstantMapCtrl::CInstantMapCtrl(const unsigned int, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void CInstantMapCtrl::~CInstantMapCtrl()
  public class CInstantMapCtrl & operator=(class CInstantMapCtrl &)
  public void * __vecDelDtor(unsigned int)
}

class CInstantMapMgr {
    *
      /* this+0x4 */ class std::map<unsigned int,CInstantMapCtrl *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMapCtrl *> > > m_InstantMapCtrlContainer

  /* this+0x14 */ bool m_bOK
  /* [0x0003:0x0004b60c] */ static  class CInstantMapMgr * m_cpSelf
  private bool CInstantMapMgr::Create()
  private void CInstantMapMgr::Destory()
  private const bool isOK()
  private class CInstantMapCtrl * GetInstantMapCtrlPtr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void CInstantMapMgr::Process()
  public bool CInstantMapMgr::Start()
  public void CInstantMapMgr::Stop()
  public bool CInstantMapMgr::RequestCreate(const unsigned int, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void CInstantMapMgr::RequestDestory(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public int GetCtrlCount()
  public void CInstantMapMgr::Add(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int, const bool)
  public void CInstantMapMgr::Remove(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void CInstantMapMgr::SetPlayerEnter(const int, const bool)
  public void CInstantMapMgr::DisconnectISVR()
  public static bool CInstantMapMgr::CreateInstance()
  public static void CInstantMapMgr::DestoryInstance()
  public void CInstantMapMgr(const class CInstantMapMgr &)
  private void CInstantMapMgr::CInstantMapMgr()
  private void CInstantMapMgr::~CInstantMapMgr()
  public class CInstantMapMgr & operator=(const class CInstantMapMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CInstantMapRes {
  CMapRes, offset = 0x0

  /* this+0x76c */ bool m_bOK
  private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CInstantMapRes::GetLoadFileName()
  public const bool CInstantMapRes::isInstantMap()
  public const bool isOK()
  public void CInstantMapRes(const class CInstantMapRes &)
  public void CInstantMapRes::CInstantMapRes(const int)
  public void CInstantMapRes::~CInstantMapRes()
  public void * __vecDelDtor(unsigned int)
}

class CInstantMapWorkerThread {
  N3Object, offset = 0x0

  N3Thread, offset = 0x8

  N3Inter, offset = 0x38

    /* [0x0003:0x0004b610] */ static  class CInstantMapWorkerThread * m_cpSelf
  /* this+0x3c */ class N3MessageQueue m_MessageQueue

  /* this+0x78 */ bool m_bOK
  private unsigned int CInstantMapWorkerThread::ThreadFunction()
  private void CInstantMapWorkerThread::PostThreadQuitMessage()
  public bool CInstantMapWorkerThread::Start()
  public void CInstantMapWorkerThread::Stop()
  public const bool isOK()
  public void CInstantMapWorkerThread::Receive(const unsigned int, const unsigned int, const unsigned int)
  public static bool CInstantMapWorkerThread::CreateInstance()
  public static void CInstantMapWorkerThread::DestoryInstance()
  private void CInstantMapWorkerThread(class CInstantMapWorkerThread &)
  private void CInstantMapWorkerThread::CInstantMapWorkerThread()
  private void CInstantMapWorkerThread::~CInstantMapWorkerThread()
  private class CInstantMapWorkerThread & operator=(class CInstantMapWorkerThread &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CInstantVar {
    *
      /* this+0x4 */ class std::map<enum CInstantVar::enumVAR,int,std::less<enum CInstantVar::enumVAR>,std::allocator<std::pair<enum CInstantVar::enumVAR const ,int> > > m_Variables

  public void Init()
  public int CInstantVar::operator()(const enum CInstantVar::enumVAR)
  public void CInstantVar::operator()(const enum CInstantVar::enumVAR, const int)
  public void CInstantVar(const class CInstantVar &)
  public void CInstantVar()
  public void CInstantVar::~CInstantVar()
  public class CInstantVar & operator=(const class CInstantVar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CInterpretHandler {
    *
  public void CInterpretHandler(const class CInterpretHandler &)
  public void CInterpretHandler::CInterpretHandler()
  public void CInterpretHandler::~CInterpretHandler()
  public void CInterpretHandler::SetVarMap(struct VarMap *)
  public bool OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  public void OnError(const char *)
  /* this+0x4 */ struct VarMap * m_varMap
  public class CInterpretHandler & operator=(const class CInterpretHandler &)
  public void * __vecDelDtor(unsigned int)
}

class CInterpreter {
    *
  public void CInterpreter(const class CInterpreter &)
  public void CInterpreter::CInterpreter()
  public void CInterpreter::~CInterpreter()
  public void CInterpreter::Clear()
  public void CInterpreter::RegisterHandler(class CInterpretHandler *)
  public bool CInterpreter::Scan(class CBinBuf *, int)
  public bool CInterpreter::Run(class CBinBuf *, int, bool)
  public bool CInterpreter::Proc()
  public int CInterpreter::GetCurPos()
  public void SetVar(const char *, int)
  protected bool CInterpreter::CodeFunc(struct TokenData &)
  protected bool CInterpreter::CodeMov()
  protected bool CInterpreter::CodeAdd()
  protected bool CInterpreter::CodeSub()
  protected bool CInterpreter::CodeMul()
  protected bool CInterpreter::CodeDiv()
  protected bool CInterpreter::CodeMod()
  protected bool CInterpreter::CodeInc()
  protected bool CInterpreter::CodeDec()
  protected bool CInterpreter::CodeCmp()
  protected bool CInterpreter::CodeGoto()
  protected bool CInterpreter::CodePush()
  protected bool CInterpreter::CodePop()
  protected bool CInterpreter::CodeCase()
  protected bool CInterpreter::CheckType(char)
  protected bool CInterpreter::ReadCode(int &)
  protected bool CInterpreter::ReadNum(int &)
  protected bool CInterpreter::ReadStr(char *, const int)
  protected bool CInterpreter::ReadValue(struct TokenData &)
  protected bool CInterpreter::ReadVar(char *, const int)
  protected void CInterpreter::Error(char *, <NoType>)
  /* this+0x4 */ struct VarMap m_varMap

  private bool CInterpreter::Goto(int)
  private bool CInterpreter::PeekByte(unsigned char &)
  private bool CInterpreter::GetByte(unsigned char &)
  private bool CInterpreter::GetWord(unsigned short &)
  private bool GetDword(unsigned long &)
  private bool CInterpreter::GetNum(int &)
  private bool CInterpreter::GetStr(char *, const int)
  /* this+0x14 */ class std::stack<TokenData,std::deque<TokenData,std::allocator<TokenData> > > m_tokenDataStack

  /* this+0x2c */ class CInterpretHandler * m_handler
  /* this+0x30 */ char * m_bin
  /* this+0x34 */ int m_pos
  /* this+0x38 */ int m_size
  /* this+0x3c */ bool m_scan
  /* this+0x3d */ bool m_gotoLock
  public class CInterpreter & operator=(const class CInterpreter &)
  public void * __vecDelDtor(unsigned int)
}

class CInventory {
    *
  public void CInventory(const class CInventory &)
  public void CInventory::CInventory()
  public void CInventory::~CInventory()
  public void CInventory::Delete(struct Request *)
  public void CInventory::Load(struct Request *)
  public void CInventory::Save(struct Request *)
  public int CInventory::OnRequest(struct Request *)
  public class CInventory & operator=(const class CInventory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CInventoryItemFactory {
    *
  public void CInventoryItemFactory(const class CInventoryItemFactory &)
  public void CInventoryItemFactory::CInventoryItemFactory()
  public void CInventoryItemFactory::~CInventoryItemFactory()
  public class CInventoryItemFactory & operator=(const class CInventoryItemFactory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CItem {
  CCharacter, offset = 0x0

  public void CItem(class CItem &)
  public void CItem::CItem()
  public void CItem::~CItem()
  public const char * GetName()
  public unsigned long CItem::GetAccountID()
  public void CItem::Init(class CITP *, struct ITEM_INFO *)
  public void CItem::UpdateItem(class std::vector<CCharacter *,std::allocator<CCharacter *> > *)
  public void Reset()
  public int CItem::OnProcess()
  public void CItem::CheckStateChange()
  public int CItem::IsMyArea(class CCharacter *, int)
  public void CItem::NotifyUpdateInfo(class CPC *)
  public void CItem::OnDisappear()
  public int CItem::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public int CItem::GetParameterValue(unsigned short, int &)
  public int CItem::UpdateParameterValue(unsigned short, int)
  public void CItem::InsertCommand(struct COMMAND_QUEUE *)
  public void CItem::CheckCommandQueue()
  public void CItem::DisableCommand(unsigned long)
  public int CItem::IsTarget(class CCharacter *, unsigned long)
  public void CItem::SetAccountID(unsigned long)
  public unsigned short CItem::GetITID()
  public unsigned short GetCount()
  /* this+0x378 */ struct ITEM_INFO m_itemInfo

  public void SetPickableType(unsigned long)
  public unsigned long GetPickableType()
  public void SetPickableParty(unsigned long)
  public unsigned long GetPickablePartyID()
  public void CItem::AddPickupablePC(unsigned long, unsigned long)
  public int CItem::IsPickUpable(unsigned long)
  public void SetUniqueIdentifyNumber(const __int64)
  public __int64 GetUniqueIdentityNumber()
  public long GetHireExpireDate()
  public void SetPickableTime(unsigned long)
  public unsigned long GetMakerGID()
  private void CItem::InitThePCCacheInfo(int)
  /* this+0x3e0 */ unsigned long m_ITAID
  /* this+0x3e4 */ unsigned long m_pickableType
  /* this+0x3e8 */ unsigned long m_pickablePARTYID
  /* this+0x3ec */ class std::vector<PICKUPABLE_PCLIST,std::allocator<PICKUPABLE_PCLIST> > m_pickupablePCList

  /* this+0x3fc */ unsigned long m_pickableTime
  public class CItem & operator=(class CItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CItemDBFmtBuffer {
    *
  public const unsigned char * GetDataPtr()
  public int GetCapacity()
  public int GetSize()
  public void Init()
  public void CItemDBFmtBuffer(class CItemDBFmtBuffer &)
  public void CItemDBFmtBuffer::CItemDBFmtBuffer(int)
  public void CItemDBFmtBuffer::~CItemDBFmtBuffer()
  public class CItemDBFmtBuffer & operator=(class CItemDBFmtBuffer &)
  /* this+0x4 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_data

  public void * __vecDelDtor(unsigned int)
}

class CItemList {
  public void CItemList::CItemList()
  public void CItemList::~CItemList()
    public void CItemList::LoadFromFile(const char *, int)
  public int CItemList::GetNth(int)
  /* this+0x0 */ int m_itemNum
  /* this+0x4 */ int[0x3e8] m_itemArray
  public void * __vecDelDtor(unsigned int)
}

class CItemListV2 {
  public void CItemListV2(const class CItemListV2 &)
  public void CItemListV2::CItemListV2()
  public void CItemListV2::~CItemListV2()
  public bool CItemListV2::Load(const char *)
  public bool CItemListV2::IsPartOfItemList(const unsigned short)
  /* this+0x0 */ class std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > m_ItemList

  public class CItemListV2 & operator=(const class CItemListV2 &)
  public void * __vecDelDtor(unsigned int)
}

class CItemLog {
  CDatabaseLog<SITEMLOG *>, offset = 0x0

    public void CItemLog::AddItemLog(int, class CPC *, class CCharacter *, class IVItItem *, int, int, char *, const __int64)
  public void CItemLog::AddMailAuctionLog(unsigned long, int, unsigned long, unsigned long, char *, unsigned long, unsigned long, char *, struct CommonItemInfo *, int)
  public void CItemLog::AddMailSendLog(unsigned long, int, class CPC *, unsigned long, unsigned long, char *, struct CommonItemInfo *, int)
  public void CItemLog::AddMailReceiveLog(int, class CPC *, unsigned long, unsigned long, char *, struct CommonItemInfo *, int)
  public void CItemLog::AddItemLogOnMoney(int, class CPC *, class CCharacter *, int, int, unsigned long, const __int64)
  public void CItemLog::ConnectToDatabase(const char *)
  public void AddCITPLog(int, class CPC *, class CPC *, class CITP *, int, int)
  private int CItemLog::SaveToDatabase(void *, struct SITEMLOG *)
  private int SaveToDatabaseV1(void *, struct SITEMLOG *)
  private int CItemLog::SaveToDatabaseV2(void * const, struct SITEMLOG *)
  public void CItemLog(const class CItemLog &)
  public void CItemLog()
  public void ~CItemLog()
  public class CItemLog & operator=(const class CItemLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CItemPackageScript {
    *
                  /* this+0x4 */ class std::map<int,CItemPackageScript::IPPackage,std::less<int>,std::allocator<std::pair<int const ,CItemPackageScript::IPPackage> > > m_PackageContainer

  /* [0x0003:0x0004b5e4] */ static  class CItemPackageScript * m_cpSelf
  /* this+0x14 */ bool m_bOK
  private bool Anaysis_InsertPackage(const int, class CItemPackageScript::IPPackage &)
  private class CItemPackageScript::ANAYSISRET CItemPackageScript::Anaysis(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private class CItemPackageScript::ANAYSISRET CItemPackageScript::Anaysis_Package(const int, class CFTLexicalAnaysis &)
  private class CItemPackageScript::ANAYSISRET CItemPackageScript::Anaysis_Box_Must(class CItemPackageScript::IPPackage &, class CFTLexicalAnaysis &)
  private class CItemPackageScript::ANAYSISRET CItemPackageScript::Anaysis_Box_Random(class CItemPackageScript::IPPackage &, class CFTLexicalAnaysis &)
  private void UnpackItemPackage_RandomBox(class CItemPackageScript::IPBox * const, class std::vector<CItemPackageScript::PackageItem,std::allocator<CItemPackageScript::PackageItem> > &)
  public bool CItemPackageScript::isOK()
  public bool CItemPackageScript::Init()
  public class std::vector<CItemPackageScript::PackageItem,std::allocator<CItemPackageScript::PackageItem> > UnpackItemPackage(const int)
  public static bool CItemPackageScript::CreateInstance()
  public static void CItemPackageScript::DestroyInstance()
  public bool CItemPackageScript::Convert_NeoPakcageItem()
  public void CItemPackageScript(const class CItemPackageScript &)
  private void CItemPackageScript::CItemPackageScript()
  private void CItemPackageScript::~CItemPackageScript()
  public class CItemPackageScript & operator=(const class CItemPackageScript &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CItemPackageScript::ANAYSISRET {
    /* this+0x0 */ class CFTToken Token

  /* this+0x2c */ enum CItemPackageScript::ANAYSISRET::enumCode Code
  public void ANAYSISRET(const class CItemPackageScript::ANAYSISRET &)
  public void ANAYSISRET(const enum CItemPackageScript::ANAYSISRET::enumCode, class CFTToken &)
  public void ANAYSISRET(const enum CItemPackageScript::ANAYSISRET::enumCode)
  public void CItemPackageScript::ANAYSISRET::~ANAYSISRET()
  public class CItemPackageScript::ANAYSISRET & operator=(const class CItemPackageScript::ANAYSISRET &)
  public void * __vecDelDtor(unsigned int)
}

class CItemPackageScript::IPBox {
          /* this+0x0 */ class std::vector<CItemPackageScript::IPBox::Item,std::allocator<CItemPackageScript::IPBox::Item> > ItemList

  /* this+0x10 */ int gift_total_number
  /* this+0x14 */ enum CItemPackageScript::IPBox::enumType Type
  public bool CItemPackageScript::IPBox::Insert(class CItemPackageScript::IPBox::Item &)
  public void Clear()
  public int GetNumber()
  public void CItemPackageScript::IPBox::IPBox(const class CItemPackageScript::IPBox &)
  public void CItemPackageScript::IPBox::IPBox()
  public void CItemPackageScript::IPBox::~IPBox()
  public class CItemPackageScript::IPBox & operator=(const class CItemPackageScript::IPBox &)
  public void * __vecDelDtor(unsigned int)
}

class CItemPackageScript::IPBox::Item {
  CItemPackageScript::PackageItem, offset = 0x0

  /* this+0x10 */ int gift_number
  /* this+0x14 */ int random_factor
  public void Item()
}

class CItemPackageScript::IPPackage {
  /* this+0x0 */ class std::vector<CItemPackageScript::IPBox,std::allocator<CItemPackageScript::IPBox> > m_BoxList

  public void Clear()
  public int GetNumber()
  public bool CItemPackageScript::IPPackage::Insert(class CItemPackageScript::IPBox &)
  public void IPPackage(const class CItemPackageScript::IPPackage &)
  public void IPPackage()
  public void CItemPackageScript::IPPackage::~IPPackage()
  public class CItemPackageScript::IPPackage & operator=(const class CItemPackageScript::IPPackage &)
  public void * __vecDelDtor(unsigned int)
}

class CItemPackageScript::PackageItem {
  /* this+0x0 */ int ITID
  /* this+0x4 */ int Count
  /* this+0x8 */ int HireHour
  /* this+0xc */ bool bBroadcasting
  public void PackageItem()
}

class CItemReuseLimit {
  public bool CItemReuseLimit::Init()
  public bool CItemReuseLimit::GetItemReuseLimit(unsigned long, struct ITEMREUSE &)
  /* this+0x0 */ class std::map<unsigned long,ITEMREUSE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,ITEMREUSE> > > m_info

  public void CItemReuseLimit(const class CItemReuseLimit &)
  public void CItemReuseLimit()
  public void ~CItemReuseLimit()
  public class CItemReuseLimit & operator=(const class CItemReuseLimit &)
  public void * __vecDelDtor(unsigned int)
}

class CItemScriptEventHandler {
  CScriptEventHandler, offset = 0x0

  public void CItemScriptEventHandler::Set(class CSpecialItemMgr *, int *, int, int, const unsigned int)
  public int GetAID()
  public bool CItemScriptEventHandler::Run(class CBinBuf *, int)
  public void CItemScriptEventHandler(const class CItemScriptEventHandler &)
  public void CItemScriptEventHandler()
  public void CItemScriptEventHandler::~CItemScriptEventHandler()
  private bool CItemScriptEventHandler::OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  private void CItemScriptEventHandler::OnError(const char *)
  private void CItemScriptEventHandler::Free()
  /* this+0x78 */ int * m_pParam
  /* this+0x7c */ int[0xa] m_nRetParam
  /* this+0xa4 */ class CSpecialItemMgr * m_ptrItemMgr
  /* this+0xa8 */ int m_CharId
  /* this+0xac */ int m_nScanItem
  /* this+0xb0 */ unsigned int m_Identity
  public class CItemScriptEventHandler & operator=(const class CItemScriptEventHandler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CJobCodeForItem {
  CInterpretHandler, offset = 0x0

  public void CJobCodeForItem(const class CJobCodeForItem &)
  public void CJobCodeForItem::CJobCodeForItem()
  public void CJobCodeForItem::~CJobCodeForItem()
  public bool CJobCodeForItem::Init()
  public bool CJobCodeForItem::IsJobForEquip(short, unsigned long)
  public bool CJobCodeForItem::IsJobForArrow(short)
  public bool CJobCodeForItem::OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  public void CJobCodeForItem::OnError(const char *)
  protected bool CJobCodeForItem::Compile()
  protected bool CJobCodeForItem::FuncSet(class std::deque<TokenData,std::allocator<TokenData> > &)
  protected bool CJobCodeForItem::FuncSetJC_EXN(class std::deque<TokenData,std::allocator<TokenData> > &)
  protected bool CJobCodeForItem::FuncSetJC_ALL(class std::deque<TokenData,std::allocator<TokenData> > &)
  protected bool CJobCodeForItem::FuncSetGroup(class std::deque<TokenData,std::allocator<TokenData> > &)
  protected bool CJobCodeForItem::FuncSet2(class std::deque<TokenData,std::allocator<TokenData> > &)
  /* this+0x8 */ class CInterpreter m_interpreter

  /* this+0x48 */ class std::map<int,std::set<short,std::less<short>,std::allocator<short> >,std::less<int>,std::allocator<std::pair<int const ,std::set<short,std::less<short>,std::allocator<short> > > > > m_map

  /* this+0x58 */ class std::map<int,std::set<short,std::less<short>,std::allocator<short> >,std::less<int>,std::allocator<std::pair<int const ,std::set<short,std::less<short>,std::allocator<short> > > > > m_jobGroup

  /* this+0x68 */ unsigned long m_allJobsCode
  /* this+0x6c */ unsigned long m_allJobsCodeWithoutNovice
      public class CJobCodeForItem & operator=(const class CJobCodeForItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CLASS_INFO {
  /* this+0x0 */ int ignoreDEFCount
  /* this+0x4 */ short plusMDamagePercent
  /* this+0x6 */ short ignoreMDEFPercent
  /* this+0x8 */ short ignoreDEFPercent
}

class CLevelLog {
  CDatabaseLog<SLEVELLOG *>, offset = 0x0

  public void CLevelLog(const class CLevelLog &)
  public void CLevelLog::CLevelLog()
  public void CLevelLog::~CLevelLog()
  public void AddLevelLog(int, int, const char *, int, int)
  public void CLevelLog::ConnectToDatabase(const char *)
  private int CLevelLog::SaveToDatabase(void *, struct SLEVELLOG *)
  public class CLevelLog & operator=(const class CLevelLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CLevelPenaltyMgr {
    *
  public float CLevelPenaltyMgr::GetExpRatio(const int, class CCharacter *)
  public int CLevelPenaltyMgr::GetItemDropPercent(const int, class CCharacter *)
  public bool isOK()
  public static bool CLevelPenaltyMgr::CreateInstance()
  public static void CLevelPenaltyMgr::DestroyInstance()
  private bool CLevelPenaltyMgr::LoadTbl(const char *, int *)
  private int GetTblIdx(int)
  private bool CLevelPenaltyMgr::Create()
  public void CLevelPenaltyMgr(const class CLevelPenaltyMgr &)
  private void CLevelPenaltyMgr::CLevelPenaltyMgr()
  private void CLevelPenaltyMgr::~CLevelPenaltyMgr()
  /* [0x0003:0x0004b2b8] */ static  class CLevelPenaltyMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
    /* this+0x8 */ int[0x51] m_ExpTbl
  /* this+0x14c */ int[0x51] m_ItemDropTbl
  /* this+0x290 */ int[0x51] m_MvpExpTbl
  /* this+0x3d4 */ int[0x51] m_MvpItemDropTbl
  public class CLevelPenaltyMgr & operator=(const class CLevelPenaltyMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CList {
    *
    public void CList(const class CList &)
  public void CList::CList()
  public void CList::~CList()
  /* this+0x4 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_list

  public bool CList::AddScript(const char *)
  public bool CList::GetList(class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &)
  public class CList & operator=(const class CList &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CLoadCartADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ unsigned long m_AID
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ enum CLoadCartADBWork::enumResult m_Result
  /* this+0x20 */ unsigned char[0x3fac] m_Data
  /* this+0x3fcc */ int m_Length
  /* this+0x3fd0 */ int m_SKLevel
  public const enum CLoadCartADBWork::enumResult GetResult()
  public const unsigned long GetGID()
  public const unsigned long GetAID()
  private bool CLoadCartADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLoadCartADBWork::LoadCart(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLoadCartADBWork::InsertCart(class NODBCCtrl &)
  public void CLoadCartADBWork::Init(const unsigned long, const unsigned long, const int)
  public void CLoadCartADBWork(const class CLoadCartADBWork &)
  private void CLoadCartADBWork::CLoadCartADBWork()
  private void CLoadCartADBWork::~CLoadCartADBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CLoadCharNameADBWork {
  NAsyncDBWork, offset = 0x0

    public enum CLoadCharNameADBWork::enumResult GetResult()
  public unsigned long GetGID()
  public const char * GetNamePtr()
  public void CLoadCharNameADBWork(const class CLoadCharNameADBWork &)
  public void CLoadCharNameADBWork::CLoadCharNameADBWork(const unsigned int, const unsigned long)
  public void CLoadCharNameADBWork::~CLoadCharNameADBWork()
  private bool CLoadCharNameADBWork::ExecQuery(class NODBCCtrl &)
  /* this+0x14 */ const unsigned long m_GID
  /* this+0x18 */ enum CLoadCharNameADBWork::enumResult m_Result
  /* this+0x1c */ char[0x19] m_CharacterName
  public void * __vecDelDtor(unsigned int)
}

class CLoadDGScriptList {
    *
  public void CLoadDGScriptList(const class CLoadDGScriptList &)
  public void CLoadDGScriptList::CLoadDGScriptList()
  public void CLoadDGScriptList::~CLoadDGScriptList()
  /* this+0x4 */ char * m_buff
  /* this+0x8 */ int m_tSize
  /* this+0xc */ class CDungeonScript m_list

  public bool CLoadDGScriptList::Load(const char *)
  public bool CuttingNote()
  public bool CLoadDGScriptList::Parsing()
  public int GetListCount()
  public const char * CLoadDGScriptList::GetList(class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &)
  public void CLoadDGScriptList::GetNext()
  public class CLoadDGScriptList & operator=(const class CLoadDGScriptList &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CLoadStoreADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ unsigned long m_AID
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ enum CLoadStoreADBWork::enumResult m_Result
  /* this+0x20 */ unsigned char[0x3fac] m_Data
  /* this+0x3fcc */ int m_Length
  public const enum CLoadStoreADBWork::enumResult GetResult()
  public const unsigned long GetGID()
  public const unsigned long GetAID()
  private bool CLoadStoreADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLoadStoreADBWork::LoadStore(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLoadStoreADBWork::InsertStore(class NODBCCtrl &)
  public void CLoadStoreADBWork::Init(const unsigned long, const unsigned long)
  public void CLoadStoreADBWork(const class CLoadStoreADBWork &)
  private void CLoadStoreADBWork::CLoadStoreADBWork()
  private void CLoadStoreADBWork::~CLoadStoreADBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CLoadWarpInfoADBWork {
  NAsyncDBWork, offset = 0x0

      public const enum CLoadWarpInfoADBWork::enumResult GetResult()
  public const unsigned long GetGID()
  public const struct WARPPORTAL_INFO & GetWarpInfo()
  public const int GetLoadType()
  /* this+0x14 */ enum CLoadWarpInfoADBWork::enumResult m_Result
  /* this+0x18 */ int m_LoadType
  /* this+0x1c */ const unsigned long m_GID
  /* this+0x20 */ struct WARPPORTAL_INFO m_WarpInfo

  private bool CLoadWarpInfoADBWork::ExecQuery(class NODBCCtrl &)
  public void CLoadWarpInfoADBWork(const class CLoadWarpInfoADBWork &)
  public void CLoadWarpInfoADBWork::CLoadWarpInfoADBWork(const unsigned long, const unsigned long, const int)
  public void ~CLoadWarpInfoADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CLog {
    *
  public void CLog(const class CLog &)
  public void CLog::CLog()
  public void CLog::~CLog()
  public void Init(const char *, const char *)
  public void Insert(int, const char *)
  public void CLog::Reset()
  public int SaveLog()
  public int GetFreeSize()
  /* this+0x4 */ char[0x20] m_logFName
  /* this+0x24 */ char[0x20] m_logDir
  /* this+0x44 */ char[0x800] m_buffer
  /* this+0x844 */ int m_bufferSize
  /* this+0x848 */ int m_bufferCounter
  public class CLog & operator=(const class CLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CLogonPermitADBWork {
  NAsyncDBWork, offset = 0x0

                          /* this+0x14 */ unsigned long m_AID
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ short m_SelectedCharNum
  /* this+0x1e */ char[0x18] m_IDstr
  /* this+0x38 */ unsigned long m_TotalUsingTime
  /* this+0x3c */ enum CLogonPermitADBWork::enumResult m_Result
  public const unsigned long GetGID()
  public const unsigned long GetAID()
  public const char * GetIDstr()
  public const unsigned long GettotalUsingTime()
  public const int GetSelectedCharNum()
  public const enum CLogonPermitADBWork::enumResult GetResult()
  /* this+0x40 */ class CLogonPermitADBWork::CBodyItemData m_BodyItemInfo

  /* this+0x3ff0 */ class CLogonPermitADBWork::CCharacterInfoData m_CharacterInfo

  /* this+0x40a0 */ class CLogonPermitADBWork::CSkill3rdData m_Skill3rdData

  /* this+0x40b0 */ class CLogonPermitADBWork::CMercenaryData m_MercenaryData

  /* this+0x44fc */ class CLogonPermitADBWork::CEffect3rd m_Effect3rd

  /* this+0x4510 */ class CLogonPermitADBWork::CStateData m_StateData

  /* this+0x4714 */ class CLogonPermitADBWork::CHomunLogonData m_HomunData

  /* this+0x478c */ class CLogonPermitADBWork::CQuestEventData m_questData

  /* this+0x4798 */ class CLogonPermitADBWork::CBattleFieldData m_battleFieldData

  /* this+0x47a0 */ class CLogonPermitADBWorkStuff::CElementalData m_Elemental

  /* this+0x47e4 */ struct CLogonPermitADBWork::CoupleInfo m_CoupleInfo

  /* this+0x482c */ struct CLogonPermitADBWork::FamilyInfo m_FamilyInfo

  private bool CLogonPermitADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadBodyItemInfo(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::InsertBodyItem(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadCharacterInfo(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::Skill3rd_Load(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::Skill3rd_Load_LowerVer(class NODBCCtrl &)
    private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::Skill3rd_Load_WarpInfo(class NODBCCtrl &, const unsigned long, struct CLogonPermitADBWork::tagWARPPORTALINFO &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::Skill3rd_Delete_LowerVer(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::Skill3rd_InsertAll(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN InsertSkillData(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadMercenaryData_Owner(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadMercenaryData_Info(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadMercenaryData_Effect(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadMercenaryData_State(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::Effect3rd_Load(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::Effect3rd_Load_LowerVer(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::Effect3rd_Delete_LowerVer(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadStateData(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::InsertStateData(class NODBCCtrl &)
  private struct std::pair<bool,bool> CLogonPermitADBWork::ExecQuery_Homun(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadHomunData(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadHomunData_Effect(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadHomunData_Skill(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN LoadHomunData_Skill_LowerVer(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadQuestEventInfo(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN InsertQuestEvent(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadBattleFieldInfo(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadCoupleInfo(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CLogonPermitADBWork::LoadFamilyInfo(class NODBCCtrl &)
  public void CLogonPermitADBWork::Init(const unsigned long, const unsigned long, const int, const char *, const unsigned long)
  public void CLogonPermitADBWork(const class CLogonPermitADBWork &)
  private void CLogonPermitADBWork::CLogonPermitADBWork()
  private void CLogonPermitADBWork::~CLogonPermitADBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CLogonPermitADBWork::CBattleFieldData {
  /* this+0x0 */ char m_campID
  /* this+0x2 */ short m_x
  /* this+0x4 */ short m_y
  public void Init()
  public void CBattleFieldData()
  public void ~CBattleFieldData()
  public void * __vecDelDtor(unsigned int)
}

class CLogonPermitADBWork::CBodyItemData {
  /* this+0x0 */ int m_length
  /* this+0x4 */ unsigned char[0x3fac] m_Data
  public void Init()
  public void CBodyItemData()
  public void ~CBodyItemData()
  public void * __vecDelDtor(unsigned int)
}

class CLogonPermitADBWork::CCharacterInfoData {
  /* this+0x0 */ struct CHARINFO_FROM_CHARACTERDB m_data

  public void CCharacterInfoData()
  public void ~CCharacterInfoData()
  public void * __vecDelDtor(unsigned int)
}

class CLogonPermitADBWork::CEffect3rd {
  /* this+0x0 */ class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > m_List

  /* this+0x10 */ bool m_bConvertLowerVer
  public void Init()
  public void CEffect3rd(const class CLogonPermitADBWork::CEffect3rd &)
  public void CEffect3rd()
  public void CLogonPermitADBWork::CEffect3rd::~CEffect3rd()
  public class CLogonPermitADBWork::CEffect3rd & operator=(const class CLogonPermitADBWork::CEffect3rd &)
  public void * __vecDelDtor(unsigned int)
}

class CLogonPermitADBWork::CHomunLogonData {
  HomunDataStuff::CHomunData, offset = 0x0

  /* this+0x28 */ struct HOMUN_DBINFO m_Data

  /* this+0x74 */ bool m_bLowerVersion
  public void CLogonPermitADBWork::CHomunLogonData::Init()
  public void CHomunLogonData(const class CLogonPermitADBWork::CHomunLogonData &)
  public void CHomunLogonData()
  public void CLogonPermitADBWork::CHomunLogonData::~CHomunLogonData()
  public class CLogonPermitADBWork::CHomunLogonData & operator=(const class CLogonPermitADBWork::CHomunLogonData &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CLogonPermitADBWork::CMercenaryData {
  /* this+0x0 */ struct CPCBattleMercenary::tagDBData m_Owner

  /* this+0x1c */ struct CMercenaryDBV2::DBINFO m_Info

  /* this+0x44 */ unsigned char[0x200] m_EffectData
  /* this+0x244 */ int m_EffectLength
  /* this+0x248 */ unsigned char[0x200] m_StateData
  /* this+0x448 */ int m_StateLength
  public void Init()
  public void CMercenaryData()
  public void ~CMercenaryData()
  public void * __vecDelDtor(unsigned int)
}

class CLogonPermitADBWork::CQuestEventData {
      /* this+0x0 */ class std::list<CLogonPermitADBWork::CQuestEventData::tQuest,std::allocator<CLogonPermitADBWork::CQuestEventData::tQuest> > m_list

  public void Init()
  public void CQuestEventData(const class CLogonPermitADBWork::CQuestEventData &)
  public void CQuestEventData()
  public void CLogonPermitADBWork::CQuestEventData::~CQuestEventData()
  public class CLogonPermitADBWork::CQuestEventData & operator=(const class CLogonPermitADBWork::CQuestEventData &)
  public void * __vecDelDtor(unsigned int)
}

struct CLogonPermitADBWork::CQuestEventData::tQuest {
  /* this+0x0 */ unsigned long m_qid
  /* this+0x4 */ bool m_active
  /* this+0x5 */ bool m_complete
  /* this+0x8 */ unsigned long m_hunt_1_mob
  /* this+0xc */ short m_hunt_1_count
  /* this+0x10 */ unsigned long m_hunt_2_mob
  /* this+0x14 */ short m_hunt_2_count
  /* this+0x18 */ unsigned long m_hunt_3_mob
  /* this+0x1c */ short m_hunt_3_count
  /* this+0x20 */ long m_playTime
  public void tQuest()
}

class CLogonPermitADBWork::CSkill3rdData {
      /* this+0x0 */ class std::vector<CLogonPermitADBWork::CSkill3rdData::tagSkill,std::allocator<CLogonPermitADBWork::CSkill3rdData::tagSkill> > m_List

  public int CLogonPermitADBWork::CSkill3rdData::GetTotalFirstJobSkillLevel(const int)
  public int CLogonPermitADBWork::CSkill3rdData::GetTotalSecondJobSkillLevel(const int)
  public void Init()
  public void CSkill3rdData(const class CLogonPermitADBWork::CSkill3rdData &)
  public void CSkill3rdData()
  public void CLogonPermitADBWork::CSkill3rdData::~CSkill3rdData()
  public class CLogonPermitADBWork::CSkill3rdData & operator=(const class CLogonPermitADBWork::CSkill3rdData &)
  public void * __vecDelDtor(unsigned int)
}

struct CLogonPermitADBWork::CSkill3rdData::tagSkill {
  /* this+0x0 */ int ID
  /* this+0x4 */ int Level
  /* this+0x8 */ int RemainMS
  /* this+0xc */ int Data
  public void tagSkill()
}

class CLogonPermitADBWork::CStateData {
  /* this+0x0 */ unsigned char[0x200] m_Data
  /* this+0x200 */ int m_Length
  public void Init()
  public void CStateData()
  public void ~CStateData()
  public void * __vecDelDtor(unsigned int)
}

struct CLogonPermitADBWork::CoupleInfo {
  /* this+0x0 */ unsigned long MaleGID
  /* this+0x4 */ unsigned long FemaleGID
  /* this+0x8 */ char[0x18] MaleName
  /* this+0x20 */ char[0x18] FemaleName
  /* this+0x38 */ struct _SYSTEMTIME WeddingTime

  public void Init()
  public void CoupleInfo()
}

struct CLogonPermitADBWork::FamilyInfo {
  /* this+0x0 */ unsigned long index
  /* this+0x4 */ unsigned long father_GID
  /* this+0x8 */ unsigned long mother_GID
  /* this+0xc */ unsigned long baby_GID
  /* this+0x10 */ char[0x18] FatherName
  /* this+0x28 */ char[0x18] motherName
  /* this+0x40 */ char[0x18] babyName
  /* this+0x58 */ struct _SYSTEMTIME Time

  public void Init()
  public void FamilyInfo()
}

struct CLogonPermitADBWork::tagWARPPORTALINFO {
    /* this+0x0 */ struct CLogonPermitADBWork::tagWARPPORTALINFO::<unnamed-type-Warp>[0x3] Warp
}

struct CLogonPermitADBWork::tagWARPPORTALINFO::<unnamed-type-Warp> {
  /* this+0x0 */ char[0x10] mapName
  /* this+0x10 */ short xPos
  /* this+0x12 */ short yPos
}

class CLogonPermitADBWorkStuff::CElementalData {
  /* this+0x0 */ int m_Kind
  /* this+0x4 */ int m_Scale
  /* this+0x8 */ class ElementalStuff::ESummaryData m_SummaryData

  /* this+0x34 */ class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > m_EfstList

  public void Init()
  public bool isExist()
  public void CElementalData(const class CLogonPermitADBWorkStuff::CElementalData &)
  public void CElementalData()
  public void CLogonPermitADBWorkStuff::CElementalData::~CElementalData()
  public class CLogonPermitADBWorkStuff::CElementalData & operator=(const class CLogonPermitADBWorkStuff::CElementalData &)
  public void * __vecDelDtor(unsigned int)
}

class CLottoDB {
  CODBC, offset = 0x0

  public void CLottoDB(const class CLottoDB &)
  public void CLottoDB::CLottoDB()
  public void CLottoDB::~CLottoDB()
  public int CLottoDB::GetLotto(int, struct _LOTTO_NUMBERS &)
  public int CLottoDB::InsertLotto(int, struct _LOTTO_NUMBERS &)
  public class CLottoDB & operator=(const class CLottoDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMEventDB {
  CODBCV2, offset = 0x0

  public bool CMEventDB::LoadV2(int, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &)
  public bool CMEventDB::LoadV2_Type3(int, int, int, const char *, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &)
  public bool CMEventDB::LoadV2_Type4(int, int, int, const char *, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &)
  public bool CMEventDB::LoadV2_Type5(int, int, int, const char *, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &, class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > &, int)
  public bool CMEventDB::DeleteV2(int, int, int, const char *, int)
  public void CMEventDB(const class CMEventDB &)
  public void CMEventDB::CMEventDB()
  public void CMEventDB::~CMEventDB()
  public class CMEventDB & operator=(const class CMEventDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMVPInfo {
  CODBC, offset = 0x0

  public void CMVPInfo(const class CMVPInfo &)
  public void CMVPInfo::CMVPInfo()
  public void CMVPInfo::~CMVPInfo()
  public void CMVPInfo::Reset()
  public void CMVPInfo::LoadInfoFromDB()
  public struct MVPINFO * CMVPInfo::GetInfo(unsigned long)
  public void CMVPInfo::Init(const char *, const char *)
  private void CMVPInfo::AddInfo(unsigned long, struct MVPINFO *)
  /* this+0x14 */ class std::map<unsigned long,MVPINFO *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,MVPINFO *> > > m_info

  public class CMVPInfo & operator=(const class CMVPInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CM_Power_Data_s {
  /* this+0x0 */ unsigned long PD_Size
  /* this+0x4 */ enum _DEVICE_POWER_STATE PD_MostRecentPowerState
  /* this+0x8 */ unsigned long PD_Capabilities
  /* this+0xc */ unsigned long PD_D1Latency
  /* this+0x10 */ unsigned long PD_D2Latency
  /* this+0x14 */ unsigned long PD_D3Latency
  /* this+0x18 */ enum _DEVICE_POWER_STATE[0x7] PD_PowerStateMapping
  /* this+0x34 */ enum _SYSTEM_POWER_STATE PD_DeepestSystemWake
}

class CMakerRankDB {
  CODBC, offset = 0x0

  public void CMakerRankDB(const class CMakerRankDB &)
  public void CMakerRankDB::CMakerRankDB()
  public void CMakerRankDB::~CMakerRankDB()
  public int CMakerRankDB::UpdateMakerRank(unsigned long, char *, int, int)
  public int CMakerRankDB::GetMakerRank(unsigned long, int &, int)
  public int Get_TOP_MakerRank(int, struct MAKER_RANKING *)
  public class CMakerRankDB & operator=(const class CMakerRankDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMakerRankMgr {
  public void CMakerRankMgr(const class CMakerRankMgr &)
  public void CMakerRankMgr::CMakerRankMgr()
  public void CMakerRankMgr::~CMakerRankMgr()
  public void CMakerRankMgr::ResetMakerRankList(int)
  public void SortMakerRankList(int)
  public void Get_TOP_MakerRank(int)
  public int CMakerRankMgr::UpdateMakerRank(class CPC *, int, int, int &)
  public void CMakerRankMgr::GetMakerRank(unsigned long, int &, int)
  public int CMakerRankMgr::GetMakerPower(unsigned long, int)
  public void CMakerRankMgr::SetMakerRankList(char *)
  public int CMakerRankMgr::GetRankFromTop10(class CPC *)
  /* this+0x0 */ class std::map<unsigned long,MAKERINFO,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,MAKERINFO> > >[0x7] m_MakerRankList
  /* this+0x70 */ struct MAKER_RANKING[0xa][0x7] m_MakerRank
  public class CMakerRankMgr & operator=(const class CMakerRankMgr &)
  public void * __vecDelDtor(unsigned int)
}

class CMakingLog {
  CDatabaseLog<SMAKINGLOG *>, offset = 0x0

  public void CMakingLog::AddMakingLog(class CPC *, unsigned char, unsigned long, unsigned long, unsigned long, unsigned long)
  public void CMakingLog::ConnectToDatabase(const char *)
  private int CMakingLog::SaveToDatabase(void *, struct SMAKINGLOG *)
  public void CMakingLog(const class CMakingLog &)
  public void CMakingLog()
  public void ~CMakingLog()
  public class CMakingLog & operator=(const class CMakingLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMapInfo {
    *
  /* this+0x4 */ int MapID
  /* this+0x8 */ char[0x18] Name
  /* this+0x20 */ int type
  /* this+0x24 */ bool bPlayerEnter
  /* this+0x28 */ int ZSID
  public void CMapInfo::CMapInfo(const class CMapInfo &)
  public void CMapInfo()
  public void CMapInfo::~CMapInfo()
  public class CMapInfo & operator=(const class CMapInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMapInfoMgr {
    *
  public bool isOK()
  public int CMapInfoMgr::GetServerID(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public int GetMapID(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public int GetMapType(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool CMapInfoMgr::IsSiege(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool CMapInfoMgr::InstantMapAdd2(const class CMapInfo &)
  public void CMapInfoMgr::InstantMapRemove(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool CMapInfoMgr::GetPlayerEnter(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMapInfoMgr::SetPlayerEnter(const unsigned int, const bool)
  public void CMapInfoMgr::SetPlayerEnter(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const bool)
  public struct std::pair<int,bool> CMapInfoMgr::GetZSVRandPlayerEnter(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public class std::vector<int,std::allocator<int> > CMapInfoMgr::GetMapIDList()
  public struct std::pair<bool,CMapInfo> CMapInfoMgr::GetMapInfo(const int)
  private bool CMapInfoMgr::Create(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private void Destroy()
  private struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CMapInfoMgr::LoadMapInfo(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public static bool CMapInfoMgr::CreateInstance(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public static void CMapInfoMgr::DestroyInstance()
  public void CMapInfoMgr(class CMapInfoMgr &)
  public void CMapInfoMgr::CMapInfoMgr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMapInfoMgr::~CMapInfoMgr()
  public class CMapInfoMgr & operator=(class CMapInfoMgr &)
  /* [0x0003:0x0004b650] */ static  class CMapInfoMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
    /* this+0x8 */ class std::map<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> > > m_MapInfoTbl

    /* this+0x18 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > m_MappingTbl

  public void * __vecDelDtor(unsigned int)
}

class CMapPropertyCountPK {
    *
  public void CMapPropertyCountPK(class CMapPropertyCountPK &)
  public void CMapPropertyCountPK::CMapPropertyCountPK()
  public void CMapPropertyCountPK::~CMapPropertyCountPK()
  public bool CMapPropertyCountPK::UpdateWinPoint(unsigned long, int)
  public bool CMapPropertyCountPK::DeleteWinPoint(unsigned long)
  public void CMapPropertyCountPK::Reset()
  public int GetPCRanking(unsigned long)
  /* this+0x4 */ class CMemoryMgr<WINPOINT> m_winpointPool

  /* this+0x28 */ class std::list<WINPOINT *,std::allocator<WINPOINT *> > m_list

  /* this+0x34 */ class std::map<unsigned long,WINPOINT *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,WINPOINT *> > > m_map

  private void CMapPropertyCountPK::DeleteFromList(struct WINPOINT *)
  private class std::_List_iterator<std::_List_val<WINPOINT *,std::allocator<WINPOINT *> > > CMapPropertyCountPK::UpperBound(int)
  private void CMapPropertyCountPK::BroadCastRankingInfo()
  private void CMapPropertyCountPK::ClearWinpoint()
  public class CMapPropertyCountPK & operator=(class CMapPropertyCountPK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMapRes {
    *
  /* this+0x4 */ class CMapTypeProperty & m_Property
  public const bool CMapRes::isInstantMap()
  public bool CMapRes::IsPropertyBlockSkill(const int, const int)
  public bool CMapRes::IsPropertyBlockItem(const int)
  public bool CMapRes::IsPropertyBlockEquipItem(const int)
  public bool CMapRes::IsPropertyBlockBuff(const int)
  public int CMapRes::GetPropertyTrapDurationPercent(const int)
  public int CMapRes::GetSkillDamagePercent(const int)
  public void CMapRes::GetProprtyByteArray(unsigned char *, const int)
  public void CMapRes(const class CMapRes &)
  public void CMapRes::CMapRes(const int)
  public void CMapRes::~CMapRes()
  public int CMapRes::Load(const char *, int, int)
  public void CMapRes::Reset()
  public void CMapRes::OnTimer()
  public unsigned long CMapRes::GetGDID()
  public const char * GetName()
  public int GetID()
  public int GetType()
  public int GetHeight()
  public int GetWidth()
  public void CMapRes::GetRandomPos(int &, int &, int, int, unsigned long)
  public int CMapRes::GetRandomPos(int &, int &)
  public int CMapRes::GetRandomPosByRange(int &, int &, int, int, unsigned long)
  public int CMapRes::GetRandomPosExceptWarp(int &, int &)
  public int CMapRes::GetValidPos(int &, int &)
  public int CMapRes::UpdateTileInfo(int, int, int)
  public int CMapRes::IsItPossible(int)
  public void CMapRes::Broadcast(const struct BROADCAST_INFO *)
  public void CMapRes::Send(int, const char *, int, int)
  public int CMapRes::IsWaterCell(int, int)
  public int CMapRes::IsMovableCell(int, int)
  public int CMapRes::IsConnected(int, int, int, int)
  public int CMapRes::IsArrowCrossCell(int, int)
  public int CMapRes::IsDirectPath(int, int, int, int, int)
  public bool CMapRes::IsDirectPath2(const int, const int, const int, const int, const unsigned char)
  public int CMapRes::IsValidPosition(int, int)
  public int CMapRes::IsExsistCells(int, int, int, unsigned long)
  public int IsValidCell(int, int)
  public class std::vector<CCharacter *,std::allocator<CCharacter *> > * GetSectionByCellPos(int, int)
  public int GetEmptyPosition(unsigned long, int &, int &)
  public int CMapRes::AddCharacter(int, int, class CCharacter *)
  public void RemoveCharacter(class CCharacter *)
  public int GetTotalSectionSize()
  public int MoveCharacter(class std::vector<CCharacter *,std::allocator<CCharacter *> > *, class std::vector<CCharacter *,std::allocator<CCharacter *> > *, class CCharacter *)
  public int MoveChracter(class std::vector<CCharacter *,std::allocator<CCharacter *> > *, class std::_Vector_iterator<std::_Vector_val<CCharacter *,std::allocator<CCharacter *> > > &, int, int, class CCharacter *)
  public void GetNeighborhoodSections(int, int, int, struct NEIGHBORHOOD_SECTION *)
  public int GetSectionSize()
  public class std::vector<CCharacter *,std::allocator<CCharacter *> > * * GetSectionList()
  public int FindPath(unsigned long, int, int, int, int, int, int, int, class CPathInfo *)
  public int IsEmptyPos(unsigned long, int, int)
  public int CMapRes::GetCellType(int, int)
  public bool IsVillage()
  public void SectionMgrInit()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CMapRes::GetLoadFileName()
  public bool CMapRes::IsBattleField()
  public bool CMapRes::IsAgit()
  public bool CMapRes::AllocMapPropertyCountPK()
  public bool CMapRes::UpdateWinPoint(unsigned long, int)
  public bool CMapRes::DeleteWinPoint(unsigned long)
  public void CMapRes::AddMobTombInfo(const unsigned long, const short, const short, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public void DeleteMobTombInfo(const unsigned long)
  public const struct stMobTombInfo & CMapRes::GetMobTombInfo(const unsigned long)
  public void CMapRes::Process()
  public unsigned long CMapRes::InsertSchedule(class std::tr1::shared_ptr<MapResScheduler::CTask> &)
  public void DeleteSchedule(const unsigned long)
  public class MapResScheduler::CTask * GetTask(const unsigned long)
  public void CMapRes::Insert_QuestArlimiCheck(const unsigned long)
    /* this+0x8 */ class CMapRes::CArlimi_Check m_Arlimi_Check

  private void ArlimiProcess()
  private void RemoveArlimiCheckList(const unsigned long)
  private unsigned char CMapRes::GetTileInfo(int, int)
  /* this+0x30 */ int m_height
  /* this+0x34 */ int m_width
  /* this+0x38 */ unsigned char * m_TileInfo
  /* this+0x3c */ int m_mapType
  /* this+0x40 */ int m_mapID
  /* this+0x44 */ char[0x10] m_mapName
  /* this+0x54 */ class CPathFinder m_pathFinder

  /* this+0x714 */ class CSectionMgr m_sectionMgr

  /* this+0x740 */ int m_pcCount
  /* this+0x744 */ class CMapPropertyCountPK * m_mapPropertyCountPK
  /* this+0x748 */ class MapResScheduler::CScheduler m_Scheduler

  /* this+0x75c */ class std::map<unsigned long,stMobTombInfo,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,stMobTombInfo> > > m_MobTombList

  public void * __vecDelDtor(unsigned int)
}

class CMapRes::CArlimi_Check {
  public void CMapRes::CArlimi_Check::AddArlimiCheckList(const unsigned long, const class std::vector<unsigned long,std::allocator<unsigned long> > &)
  public void CMapRes::CArlimi_Check::RemoveArlimiCheckList(const unsigned long)
  public void CMapRes::CArlimi_Check::Process(const unsigned long)
  public void CArlimi_Check(const class CMapRes::CArlimi_Check &)
  public void CArlimi_Check()
  public void CMapRes::CArlimi_Check::~CArlimi_Check()
  /* this+0x0 */ class std::map<unsigned long,std::vector<unsigned long,std::allocator<unsigned long> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<unsigned long,std::allocator<unsigned long> > > > > m_Arlimi_CheckList

  /* this+0x10 */ class std::deque<unsigned long,std::allocator<unsigned long> > m_pcCurAIDList

  public class CMapRes::CArlimi_Check & operator=(const class CMapRes::CArlimi_Check &)
  public void * __vecDelDtor(unsigned int)
}

struct CMapRes::Load::__l24::AttrCell {
  /* this+0x0 */ float h1
  /* this+0x4 */ float h2
  /* this+0x8 */ float h3
  /* this+0xc */ float h4
  /* this+0x10 */ int flag
}

class CMapResMgr {
    *
  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CMapResMgr::Init(int)
  public class CMapRes * CMapResMgr::GetMapRes(const char *)
  public class CMapRes * CMapResMgr::GetFirstMap()
  public int CMapResMgr::UpdateTileInfo(class CMapRes *, int, int, int, unsigned long)
  public bool CMapResMgr::UpdateWinPoint(class CMapRes *, unsigned int, int)
  public bool CMapResMgr::DeleteWinPoint(class CMapRes *, unsigned long)
  public int CMapResMgr::GetTotalSectionSize()
  public void CMapResMgr::Process()
  public void CMapResMgr::OnDisoranizeGuild(unsigned long)
  public void UnlinkNPC()
  public void CMapResMgr::OnChangeEmblem(unsigned long, short)
  public void CMapResMgr::OnDeleteRelated(unsigned long, unsigned long)
  public bool CMapResMgr::LoadBattleFieldMapInfo()
  public int GetPcRanking(class CMapRes *, unsigned long)
  public void CMapResMgr::OutputAll()
  public void CMapResMgr::OnChangeGDForce(unsigned long)
  public bool CMapResMgr::InstantMapAdd(class CMapRes * const)
  public void CMapResMgr::InstantMapRemove(class CMapRes * const)
  public int GetServiceMapNum()
  public class std::vector<int,std::allocator<int> > GetServiceMapIDList()
  public void CMapResMgr(const class CMapResMgr &)
  public void CMapResMgr::CMapResMgr()
  public void CMapResMgr::~CMapResMgr()
      /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMapRes *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMapRes *> > > m_map

  /* this+0x14 */ class CPollTimer m_timer

  public class CMapResMgr & operator=(const class CMapResMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMapTypeProperty {
    *
  /* this+0x4 */ bool m_bOK
        /* this+0x8 */ class std::map<int,CMapTypeProperty::tagSelectedObject,std::less<int>,std::allocator<std::pair<int const ,CMapTypeProperty::tagSelectedObject> > > m_BlockSkillContainer

      /* this+0x18 */ class std::vector<int,std::allocator<int> > m_BlockItemContainer

      /* this+0x28 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_TrapDurationContainer

      /* this+0x38 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_SkillDamageContainer

      /* this+0x48 */ class std::vector<int,std::allocator<int> > m_BlockEquipItemContainer

      /* this+0x58 */ class std::vector<int,std::allocator<int> > m_BlockBuffContainer

  /* this+0x68 */ bool m_MAPPROPERTY_PK
  /* this+0x69 */ bool m_MAPPROPERTY_TELEPORT
  /* this+0x6a */ bool m_MAPPROPERTY_NOTREMEMBER
  /* this+0x6b */ bool m_MAPPROPERTY_ITEMDROP
  /* this+0x6c */ bool m_MAPPROPERTY_EXP
  /* this+0x6d */ bool m_MAPPROPERTY_DISCONNECT_NOTREMEMBER
  /* this+0x6e */ bool m_MAPPROPERTY_CALLMONSTER
  /* this+0x6f */ bool m_MAPPROPERTY_PARTY
  /* this+0x70 */ bool m_MAPPROPERTY_GUILD
  /* this+0x71 */ bool m_MAPPROPERTY_SIEGE
  /* this+0x72 */ bool m_MAPPROPERTY_PKSERVER
  /* this+0x73 */ bool m_MAPPROPERTY_PVPSERVER
  /* this+0x74 */ bool m_MAPPROPERTY_DENYSKILL
  /* this+0x75 */ bool m_MAPPROPERTY_TURBOTRACK
  /* this+0x76 */ bool m_MAPPROPERTY_DENY_BUTTERFLY
  /* this+0x77 */ bool m_MAPPROPERTY_USE_SIMPLE_EFFECT
  /* this+0x78 */ bool m_MAPPROPERTY_DISABLE_LOCKON
  /* this+0x79 */ bool m_MAPPROPERTY_COUNT_PK
  /* this+0x7a */ bool m_MAPPROPERTY_NO_PARTY_FORMATION
  /* this+0x7b */ bool m_MAPPROPERTY_BATTLEFIELD
  /* this+0x7c */ bool m_MAPPROPERTY_HIDING_DAMAGE
  /* this+0x7d */ bool m_MAPPROPERTY_DISABLE_KNOCKBACK
  /* this+0x7e */ bool m_MAPPROPERTY_LONG_INSUPERABLE_TIME
  /* this+0x7f */ bool m_MAPPROPERTY_NO_CHATTING
  /* this+0x80 */ bool m_MAPPROPERTY_DISABLE_COSTUMEITEM
  /* this+0x81 */ bool m_MAPPROPERTY_PREVENT_PARTY_MAKE
  /* this+0x82 */ bool m_MAPPROPERTY_PREVENT_PARTY_JOIN
  /* this+0x83 */ bool m_MAPPROPERTY_PREVENT_PARTY_LEAVE
  /* this+0x84 */ bool m_MAPPROPERTY_PREVENT_PARTY_EXPEL
  /* this+0x85 */ bool m_MAPPROPERTY_PREVENT_PARTY_MASTER_CHANGE
  /* this+0x88 */ int m_MAPPROPERTY_NAMED_BOOTY
  /* this+0x8c */ int m_MAPPROPERTY_SIEGETIME_VERSION
  /* this+0x90 */ int m_MAPPROPERTY_GOTOTOWN
  /* this+0x94 */ int m_MAPPROPERTY_NORMAL_DAMAGE
  /* this+0x98 */ int m_MAPPROPERTY_RANGE_DAMAGE
  /* this+0x9c */ int m_MAPPROPERTY_ALL_SKILL_DAMAGE
  /* this+0xa0 */ const int m_mapType
  private bool CMapTypeProperty::AddBlockSkill(const int, const struct CMapTypeProperty::tagSelectedObject)
  private bool CMapTypeProperty::AddBlockItem(const int)
  private bool CMapTypeProperty::AddProperty(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const bool)
  private bool CMapTypeProperty::AddPropertyValue(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  private bool CMapTypeProperty::AddTrapDurationPercent(const int, const int)
  private bool CMapTypeProperty::AddSkillDamagePercent(const int, const int)
  private bool CMapTypeProperty::AddBlockEquipItem(const int)
  private bool CMapTypeProperty::AddBlockBuff(const int)
  public bool isOK()
  public bool CMapTypeProperty::isBlockSkill(const int, const int)
  public bool CMapTypeProperty::isBlockItem(const int)
  public bool CMapTypeProperty::isBlockEquipItem(const int)
  public bool CMapTypeProperty::isBlockBuff(const int)
  public int CMapTypeProperty::IsItPossible(int)
  public int CMapTypeProperty::GetTrapDurationPercent(const int)
  public int CMapTypeProperty::GetSkillDamagePercent(const int)
  public void CMapTypeProperty::GetByteArray(unsigned char *, const int)
  public void CMapTypeProperty::CMapTypeProperty(const class CMapTypeProperty &)
  public void CMapTypeProperty::CMapTypeProperty(const int)
  public void CMapTypeProperty::~CMapTypeProperty()
  public void * __vecDelDtor(unsigned int)
}

struct CMapTypeProperty::tagSelectedObject {
  /* this(bf)+0x0:0x0 len(0x1) */ int bPlayer
  /* this(bf)+0x0:0x1 len(0x1) */ int bMonster
  /* this(bf)+0x0:0x2 len(0x1) */ int bHomun
  /* this(bf)+0x0:0x3 len(0x1) */ int bMercenary
  /* this(bf)+0x4:0x0 len(0x20) */ int unused
}

class CMapTypePropertyMgr {
    *
  /* [0x0003:0x0004b5d8] */ static  class CMapTypePropertyMgr * m_cpSelf
  /* [0x0003:0x00011dd0] */ static  const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_MapTypePropertyFileName

  /* this+0x4 */ bool m_bOK
      /* this+0x8 */ class std::map<int,CMapTypeProperty,std::less<int>,std::allocator<std::pair<int const ,CMapTypeProperty> > > m_MapTypePropertyContainer

  /* this+0x18 */ class CMapTypeProperty m_DefaultProperty

  private bool CMapTypePropertyMgr::Create()
  private void Destroy()
  private bool CMapTypePropertyMgr::GetFTAToken(class N2FTALexicalAnalyzer &, class N2FTALexicalAnalyzer::FTARet &, enum N2FTAToken::enumTYPE)
  private bool CMapTypePropertyMgr::PeekFTAToken(class N2FTALexicalAnalyzer &, class N2FTALexicalAnalyzer::FTARet &, enum N2FTAToken::enumTYPE)
  private bool CMapTypePropertyMgr::Anaysis(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private bool CMapTypePropertyMgr::Anaysis_ADD_BLOCK_SKILL(class N2FTALexicalAnalyzer &, class CMapTypeProperty &, class N2FTALexicalAnalyzer::FTARet &)
  private bool CMapTypePropertyMgr::Anaysis_ADD_BLOCK_ITEM(class N2FTALexicalAnalyzer &, class CMapTypeProperty &, class N2FTALexicalAnalyzer::FTARet &)
  private bool CMapTypePropertyMgr::Anaysis_ADD_PROPERTY(class N2FTALexicalAnalyzer &, class CMapTypeProperty &, class N2FTALexicalAnalyzer::FTARet &)
  private bool CMapTypePropertyMgr::Anaysis_ADD_PROPERTY_VALUE(class N2FTALexicalAnalyzer &, class CMapTypeProperty &, class N2FTALexicalAnalyzer::FTARet &)
  private bool CMapTypePropertyMgr::Anaysis_ADJUST_TRAP_DURATION(class N2FTALexicalAnalyzer &, class CMapTypeProperty &, class N2FTALexicalAnalyzer::FTARet &)
  private bool CMapTypePropertyMgr::Anaysis_ADJUST_SKILL_DAMAGE(class N2FTALexicalAnalyzer &, class CMapTypeProperty &, class N2FTALexicalAnalyzer::FTARet &)
  private bool CMapTypePropertyMgr::Anaysis_ADD_BLOCK_EQUIPITEM(class N2FTALexicalAnalyzer &, class CMapTypeProperty &, class N2FTALexicalAnalyzer::FTARet &)
  private bool CMapTypePropertyMgr::Anaysis_ADD_BLOCK_BUFF(class N2FTALexicalAnalyzer &, class CMapTypeProperty &, class N2FTALexicalAnalyzer::FTARet &)
  private void CMapTypePropertyMgr::ErrorMessageBox(class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const char *, <NoType>)
  private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CMapTypePropertyMgr::GetTokenInfoStr(class N2FTAToken &, class N2FTAFile &)
  private int CMapTypePropertyMgr::GetSKID(class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool isOK()
  public class CMapTypeProperty & CMapTypePropertyMgr::GetProperty(const int)
  public static bool CMapTypePropertyMgr::CreateInstance()
  public static void CMapTypePropertyMgr::DestroyInstance()
  public void CMapTypePropertyMgr(const class CMapTypePropertyMgr &)
  private void CMapTypePropertyMgr::CMapTypePropertyMgr()
  private void CMapTypePropertyMgr::~CMapTypePropertyMgr()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMatchTable {
    *
  public void CMatchTable(const class CMatchTable &)
  public void CMatchTable::CMatchTable()
  public void CMatchTable::~CMatchTable()
  public void CMatchTable::LoadFromFile(const char *)
    public int CMatchTable::GetRandomMatch(int)
  public int StringToKey(char *)
  public int StringToDest(char *)
  /* this+0x4 */ class std::map<int,std::vector<int,std::allocator<int> > *,std::less<int>,std::allocator<std::pair<int const ,std::vector<int,std::allocator<int> > *> > > m_matchMap

  public class CMatchTable & operator=(const class CMatchTable &)
  public void * __vecDelDtor(unsigned int)
}

class CMaxHpSp {
    *
  public void CMaxHpSp(const class CMaxHpSp &)
  public void CMaxHpSp::CMaxHpSp()
  public void CMaxHpSp::~CMaxHpSp()
  public void CMaxHpSp::Init()
  public int CMaxHpSp::LoadSp()
  public int CMaxHpSp::LoadHp()
  public int GetSp(int, int)
  public int GetHp(int, int)
  public int CMaxHpSp::LoadMaxHPSP()
  public int CMaxHpSp::LoadSp2()
  public int CMaxHpSp::LoadHp2()
  public int CMaxHpSp::GetSp2(int, int)
  public int CMaxHpSp::GetHp2(int, int)
  /* this+0x4 */ int[0x65][0x15] m_maxSp
  /* this+0x2128 */ int[0x65][0x15] m_maxHp
    /* this+0x424c */ class std::map<unsigned long,std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > > > > m_maxSPValue

  /* this+0x425c */ class std::map<unsigned long,std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > > > > m_maxHPValue

  public class CMaxHpSp & operator=(const class CMaxHpSp &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeon {
    *
  /* this+0x4 */ unsigned long m_ExistZSID
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name

  /* this+0x24 */ unsigned long m_hPartyID
  /* this+0x28 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_PartyName

  /* this+0x44 */ unsigned long m_MemorialDungeonID
  /* this+0x48 */ int m_Factor
  public void CMemorialDungeon::CMemorialDungeon(const class CMemorialDungeon &)
  public void CMemorialDungeon::CMemorialDungeon(const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const unsigned long, const int)
  public void CMemorialDungeon::~CMemorialDungeon()
  public class CMemorialDungeon & operator=(const class CMemorialDungeon &)
  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonMgr {
    *
    /* [0x0003:0x0004b614] */ static  class CMemorialDungeonMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
      /* this+0x8 */ class std::map<unsigned long,CMemorialDungeon,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon> > > m_Container

  /* this+0x18 */ enum CMemorialDungeonMgr::enumOpenState m_OpenState
  private bool CMemorialDungeonMgr::Create()
  private void Destroy()
  public bool isOK()
  public void CMemorialDungeonMgr::Add(const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const unsigned long, const int)
  public void CMemorialDungeonMgr::Remove(const unsigned long)
  public bool CMemorialDungeonMgr::Exist(const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMemorialDungeonMgr::DisconnectISVR()
  public enum CMemorialDungeonMgr::enumOpenState GetOpenState()
  public void SetOpenState(enum CMemorialDungeonMgr::enumOpenState)
  public static bool CMemorialDungeonMgr::CreateInstance()
  public static void CMemorialDungeonMgr::DestroyInstance()
  public void CMemorialDungeonMgr(const class CMemorialDungeonMgr &)
  private void CMemorialDungeonMgr::CMemorialDungeonMgr()
  private void CMemorialDungeonMgr::~CMemorialDungeonMgr()
  public class CMemorialDungeonMgr & operator=(const class CMemorialDungeonMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMemoryAllocator<SSIListInfo> {
    *
  public void CMemoryAllocator<SSIListInfo>(const class CMemoryAllocator<SSIListInfo> &)
  public void CMemoryAllocator<SSIListInfo>::CMemoryAllocator<SSIListInfo>()
  public void CMemoryAllocator<SSIListInfo>::~CMemoryAllocator<SSIListInfo>()
  public struct SSIListInfo * CMemoryAllocator<SSIListInfo>::Alloc()
  public void CMemoryAllocator<SSIListInfo>::Free(struct SSIListInfo *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryAllocator<SSIListInfo>::AllFree()
  /* this+0x4 */ class std::map<SSIListInfo *,bool,std::less<SSIListInfo *>,std::allocator<std::pair<SSIListInfo * const,bool> > > m_list

  public class CMemoryAllocator<SSIListInfo> & operator=(const class CMemoryAllocator<SSIListInfo> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<AUCTIONINFO> {
    *
  public bool CMemoryMgr<AUCTIONINFO>::Init(const int)
  public struct AUCTIONINFO * CMemoryMgr<AUCTIONINFO>::Alloc()
  public void CMemoryMgr<AUCTIONINFO>::Free(struct AUCTIONINFO *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<AUCTIONINFO>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<AUCTIONINFO>(class CMemoryMgr<AUCTIONINFO> &)
  public void CMemoryMgr<AUCTIONINFO>::CMemoryMgr<AUCTIONINFO>()
  public void CMemoryMgr<AUCTIONINFO>::~CMemoryMgr<AUCTIONINFO>()
  public class CMemoryMgr<AUCTIONINFO> & operator=(class CMemoryMgr<AUCTIONINFO> &)
    /* this+0x4 */ class CMemoryMgr<AUCTIONINFO>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<AUCTIONINFO>::lcMemory {
    *
  /* this+0x4 */ struct AUCTIONINFO * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<AUCTIONINFO>::lcMemory &)
  public void CMemoryMgr<AUCTIONINFO>::lcMemory::lcMemory()
  public void CMemoryMgr<AUCTIONINFO>::lcMemory::~lcMemory()
  public class CMemoryMgr<AUCTIONINFO>::lcMemory & operator=(const class CMemoryMgr<AUCTIONINFO>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA> {
    *
  public bool CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::Init(const int)
  public struct CArlimiMap2::T_ARLIMI_DATA * CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::Alloc()
  public void Free(struct CArlimiMap2::T_ARLIMI_DATA *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>(class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA> &)
  public void CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>()
  public void CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::~CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>()
  public class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA> & operator=(class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA> &)
    /* this+0x4 */ class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::lcMemory {
    *
  /* this+0x4 */ struct CArlimiMap2::T_ARLIMI_DATA * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::lcMemory &)
  public void CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::lcMemory::lcMemory()
  public void CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::lcMemory::~lcMemory()
  public class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::lcMemory & operator=(const class CMemoryMgr<CArlimiMap2::T_ARLIMI_DATA>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI> {
    *
  public bool CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::Init(const int)
  public struct CArlimiMap2::T_MAP_IN_ARLIMI * CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::Alloc()
  public void Free(struct CArlimiMap2::T_MAP_IN_ARLIMI *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>(class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI> &)
  public void CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>()
  public void CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::~CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>()
  public class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI> & operator=(class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI> &)
    /* this+0x4 */ class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::lcMemory {
    *
  /* this+0x4 */ struct CArlimiMap2::T_MAP_IN_ARLIMI * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::lcMemory &)
  public void CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::lcMemory::lcMemory()
  public void CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::lcMemory::~lcMemory()
  public class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::lcMemory & operator=(const class CMemoryMgr<CArlimiMap2::T_MAP_IN_ARLIMI>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CAsyncStream> {
    *
  public bool CMemoryMgr<CAsyncStream>::Init(const int)
  public class CAsyncStream * CMemoryMgr<CAsyncStream>::Alloc()
  public void CMemoryMgr<CAsyncStream>::Free(class CAsyncStream *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CAsyncStream>(class CMemoryMgr<CAsyncStream> &)
  public void CMemoryMgr<CAsyncStream>::CMemoryMgr<CAsyncStream>()
  public void CMemoryMgr<CAsyncStream>::~CMemoryMgr<CAsyncStream>()
  public class CMemoryMgr<CAsyncStream> & operator=(class CMemoryMgr<CAsyncStream> &)
    /* this+0x4 */ class CMemoryMgr<CAsyncStream>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CAsyncStream>::lcMemory {
    *
  /* this+0x4 */ class CAsyncStream * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CAsyncStream>::lcMemory &)
  public void CMemoryMgr<CAsyncStream>::lcMemory::lcMemory()
  public void CMemoryMgr<CAsyncStream>::lcMemory::~lcMemory()
  public class CMemoryMgr<CAsyncStream>::lcMemory & operator=(const class CMemoryMgr<CAsyncStream>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CItem> {
    *
  public bool CMemoryMgr<CItem>::Init(const int)
  public class CItem * CMemoryMgr<CItem>::Alloc()
  public void CMemoryMgr<CItem>::Free(class CItem *)
  public int GetFreeSize()
  public int CMemoryMgr<CItem>::GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CItem>(class CMemoryMgr<CItem> &)
  public void CMemoryMgr<CItem>::CMemoryMgr<CItem>()
  public void CMemoryMgr<CItem>::~CMemoryMgr<CItem>()
  public class CMemoryMgr<CItem> & operator=(class CMemoryMgr<CItem> &)
    /* this+0x4 */ class CMemoryMgr<CItem>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CItem>::lcMemory {
    *
  /* this+0x4 */ class CItem * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CItem>::lcMemory &)
  public void CMemoryMgr<CItem>::lcMemory::lcMemory()
  public void CMemoryMgr<CItem>::lcMemory::~lcMemory()
  public class CMemoryMgr<CItem>::lcMemory & operator=(const class CMemoryMgr<CItem>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CItemScriptEventHandler> {
    *
  public bool CMemoryMgr<CItemScriptEventHandler>::Init(const int)
  public class CItemScriptEventHandler * CMemoryMgr<CItemScriptEventHandler>::Alloc()
  public void CMemoryMgr<CItemScriptEventHandler>::Free(class CItemScriptEventHandler *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CItemScriptEventHandler>(class CMemoryMgr<CItemScriptEventHandler> &)
  public void CMemoryMgr<CItemScriptEventHandler>::CMemoryMgr<CItemScriptEventHandler>()
  public void CMemoryMgr<CItemScriptEventHandler>::~CMemoryMgr<CItemScriptEventHandler>()
  public class CMemoryMgr<CItemScriptEventHandler> & operator=(class CMemoryMgr<CItemScriptEventHandler> &)
    /* this+0x4 */ class CMemoryMgr<CItemScriptEventHandler>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CItemScriptEventHandler>::lcMemory {
    *
  /* this+0x4 */ class CItemScriptEventHandler * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CItemScriptEventHandler>::lcMemory &)
  public void CMemoryMgr<CItemScriptEventHandler>::lcMemory::lcMemory()
  public void CMemoryMgr<CItemScriptEventHandler>::lcMemory::~lcMemory()
  public class CMemoryMgr<CItemScriptEventHandler>::lcMemory & operator=(const class CMemoryMgr<CItemScriptEventHandler>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CPC> {
    *
  public bool CMemoryMgr<CPC>::Init(const int)
  public class CPC * CMemoryMgr<CPC>::Alloc()
  public void CMemoryMgr<CPC>::Free(class CPC *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CPC>(class CMemoryMgr<CPC> &)
  public void CMemoryMgr<CPC>::CMemoryMgr<CPC>()
  public void CMemoryMgr<CPC>::~CMemoryMgr<CPC>()
  public class CMemoryMgr<CPC> & operator=(class CMemoryMgr<CPC> &)
    /* this+0x4 */ class CMemoryMgr<CPC>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CPC>::lcMemory {
    *
  /* this+0x4 */ class CPC * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CPC>::lcMemory &)
  public void CMemoryMgr<CPC>::lcMemory::lcMemory()
  public void CMemoryMgr<CPC>::lcMemory::~lcMemory()
  public class CMemoryMgr<CPC>::lcMemory & operator=(const class CMemoryMgr<CPC>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CQuestProviso2::TPROVISO> {
    *
  public bool CMemoryMgr<CQuestProviso2::TPROVISO>::Init(const int)
  public struct CQuestProviso2::TPROVISO * CMemoryMgr<CQuestProviso2::TPROVISO>::Alloc()
  public void Free(struct CQuestProviso2::TPROVISO *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<CQuestProviso2::TPROVISO>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<CQuestProviso2::TPROVISO>(class CMemoryMgr<CQuestProviso2::TPROVISO> &)
  public void CMemoryMgr<CQuestProviso2::TPROVISO>::CMemoryMgr<CQuestProviso2::TPROVISO>()
  public void CMemoryMgr<CQuestProviso2::TPROVISO>::~CMemoryMgr<CQuestProviso2::TPROVISO>()
  public class CMemoryMgr<CQuestProviso2::TPROVISO> & operator=(class CMemoryMgr<CQuestProviso2::TPROVISO> &)
    /* this+0x4 */ class CMemoryMgr<CQuestProviso2::TPROVISO>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CQuestProviso2::TPROVISO>::lcMemory {
    *
  /* this+0x4 */ struct CQuestProviso2::TPROVISO * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CQuestProviso2::TPROVISO>::lcMemory &)
  public void CMemoryMgr<CQuestProviso2::TPROVISO>::lcMemory::lcMemory()
  public void CMemoryMgr<CQuestProviso2::TPROVISO>::lcMemory::~lcMemory()
  public class CMemoryMgr<CQuestProviso2::TPROVISO>::lcMemory & operator=(const class CMemoryMgr<CQuestProviso2::TPROVISO>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CRoom> {
    *
  public bool CMemoryMgr<CRoom>::Init(const int)
  public class CRoom * CMemoryMgr<CRoom>::Alloc()
  public void CMemoryMgr<CRoom>::Free(class CRoom *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CRoom>(class CMemoryMgr<CRoom> &)
  public void CMemoryMgr<CRoom>::CMemoryMgr<CRoom>()
  public void CMemoryMgr<CRoom>::~CMemoryMgr<CRoom>()
  public class CMemoryMgr<CRoom> & operator=(class CMemoryMgr<CRoom> &)
    /* this+0x4 */ class CMemoryMgr<CRoom>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CRoom>::lcMemory {
    *
  /* this+0x4 */ class CRoom * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CRoom>::lcMemory &)
  public void CMemoryMgr<CRoom>::lcMemory::lcMemory()
  public void CMemoryMgr<CRoom>::lcMemory::~lcMemory()
  public class CMemoryMgr<CRoom>::lcMemory & operator=(const class CMemoryMgr<CRoom>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CSkill> {
    *
  public bool CMemoryMgr<CSkill>::Init(const int)
  public class CSkill * CMemoryMgr<CSkill>::Alloc()
  public void CMemoryMgr<CSkill>::Free(class CSkill *)
  public int GetFreeSize()
  public int CMemoryMgr<CSkill>::GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CSkill>(class CMemoryMgr<CSkill> &)
  public void CMemoryMgr<CSkill>::CMemoryMgr<CSkill>()
  public void CMemoryMgr<CSkill>::~CMemoryMgr<CSkill>()
  public class CMemoryMgr<CSkill> & operator=(class CMemoryMgr<CSkill> &)
    /* this+0x4 */ class CMemoryMgr<CSkill>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CSkill>::lcMemory {
    *
  /* this+0x4 */ class CSkill * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CSkill>::lcMemory &)
  public void CMemoryMgr<CSkill>::lcMemory::lcMemory()
  public void CMemoryMgr<CSkill>::lcMemory::~lcMemory()
  public class CMemoryMgr<CSkill>::lcMemory & operator=(const class CMemoryMgr<CSkill>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CZGuildInfo> {
    *
  public bool CMemoryMgr<CZGuildInfo>::Init(const int)
  public class CZGuildInfo * CMemoryMgr<CZGuildInfo>::Alloc()
  public void CMemoryMgr<CZGuildInfo>::Free(class CZGuildInfo *)
  public int CMemoryMgr<CZGuildInfo>::GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CZGuildInfo>(class CMemoryMgr<CZGuildInfo> &)
  public void CMemoryMgr<CZGuildInfo>::CMemoryMgr<CZGuildInfo>()
  public void CMemoryMgr<CZGuildInfo>::~CMemoryMgr<CZGuildInfo>()
  public class CMemoryMgr<CZGuildInfo> & operator=(class CMemoryMgr<CZGuildInfo> &)
    /* this+0x4 */ class CMemoryMgr<CZGuildInfo>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CZGuildInfo>::lcMemory {
    *
  /* this+0x4 */ class CZGuildInfo * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CZGuildInfo>::lcMemory &)
  public void CMemoryMgr<CZGuildInfo>::lcMemory::lcMemory()
  public void CMemoryMgr<CZGuildInfo>::lcMemory::~lcMemory()
  public class CMemoryMgr<CZGuildInfo>::lcMemory & operator=(const class CMemoryMgr<CZGuildInfo>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<ClientCache> {
    *
  public bool CMemoryMgr<ClientCache>::Init(const int)
  public struct ClientCache * CMemoryMgr<ClientCache>::Alloc()
  public void CMemoryMgr<ClientCache>::Free(struct ClientCache *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<ClientCache>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<ClientCache>(class CMemoryMgr<ClientCache> &)
  public void CMemoryMgr<ClientCache>::CMemoryMgr<ClientCache>()
  public void CMemoryMgr<ClientCache>::~CMemoryMgr<ClientCache>()
  public class CMemoryMgr<ClientCache> & operator=(class CMemoryMgr<ClientCache> &)
    /* this+0x4 */ class CMemoryMgr<ClientCache>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<ClientCache>::lcMemory {
    *
  /* this+0x4 */ struct ClientCache * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<ClientCache>::lcMemory &)
  public void CMemoryMgr<ClientCache>::lcMemory::lcMemory()
  public void CMemoryMgr<ClientCache>::lcMemory::~lcMemory()
  public class CMemoryMgr<ClientCache>::lcMemory & operator=(const class CMemoryMgr<ClientCache>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<EATING_ITEM_INVENTORY> {
    *
  public bool CMemoryMgr<EATING_ITEM_INVENTORY>::Init(const int)
  public struct EATING_ITEM_INVENTORY * CMemoryMgr<EATING_ITEM_INVENTORY>::Alloc()
  public void CMemoryMgr<EATING_ITEM_INVENTORY>::Free(struct EATING_ITEM_INVENTORY *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<EATING_ITEM_INVENTORY>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<EATING_ITEM_INVENTORY>(class CMemoryMgr<EATING_ITEM_INVENTORY> &)
  public void CMemoryMgr<EATING_ITEM_INVENTORY>::CMemoryMgr<EATING_ITEM_INVENTORY>()
  public void CMemoryMgr<EATING_ITEM_INVENTORY>::~CMemoryMgr<EATING_ITEM_INVENTORY>()
  public class CMemoryMgr<EATING_ITEM_INVENTORY> & operator=(class CMemoryMgr<EATING_ITEM_INVENTORY> &)
    /* this+0x4 */ class CMemoryMgr<EATING_ITEM_INVENTORY>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<EATING_ITEM_INVENTORY>::lcMemory {
    *
  /* this+0x4 */ struct EATING_ITEM_INVENTORY * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<EATING_ITEM_INVENTORY>::lcMemory &)
  public void CMemoryMgr<EATING_ITEM_INVENTORY>::lcMemory::lcMemory()
  public void CMemoryMgr<EATING_ITEM_INVENTORY>::lcMemory::~lcMemory()
  public class CMemoryMgr<EATING_ITEM_INVENTORY>::lcMemory & operator=(const class CMemoryMgr<EATING_ITEM_INVENTORY>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDALLYINFO> {
    *
  public bool CMemoryMgr<GUILDALLYINFO>::Init(const int)
  public struct GUILDALLYINFO * CMemoryMgr<GUILDALLYINFO>::Alloc()
  public void CMemoryMgr<GUILDALLYINFO>::Free(struct GUILDALLYINFO *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<GUILDALLYINFO>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<GUILDALLYINFO>(class CMemoryMgr<GUILDALLYINFO> &)
  public void CMemoryMgr<GUILDALLYINFO>::CMemoryMgr<GUILDALLYINFO>()
  public void CMemoryMgr<GUILDALLYINFO>::~CMemoryMgr<GUILDALLYINFO>()
  public class CMemoryMgr<GUILDALLYINFO> & operator=(class CMemoryMgr<GUILDALLYINFO> &)
    /* this+0x4 */ class CMemoryMgr<GUILDALLYINFO>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDALLYINFO>::lcMemory {
    *
  /* this+0x4 */ struct GUILDALLYINFO * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<GUILDALLYINFO>::lcMemory &)
  public void CMemoryMgr<GUILDALLYINFO>::lcMemory::lcMemory()
  public void CMemoryMgr<GUILDALLYINFO>::lcMemory::~lcMemory()
  public class CMemoryMgr<GUILDALLYINFO>::lcMemory & operator=(const class CMemoryMgr<GUILDALLYINFO>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDBANISHINFO> {
    *
  public bool CMemoryMgr<GUILDBANISHINFO>::Init(const int)
  public struct GUILDBANISHINFO * CMemoryMgr<GUILDBANISHINFO>::Alloc()
  public void CMemoryMgr<GUILDBANISHINFO>::Free(struct GUILDBANISHINFO *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<GUILDBANISHINFO>(class CMemoryMgr<GUILDBANISHINFO> &)
  public void CMemoryMgr<GUILDBANISHINFO>::CMemoryMgr<GUILDBANISHINFO>()
  public void CMemoryMgr<GUILDBANISHINFO>::~CMemoryMgr<GUILDBANISHINFO>()
  public class CMemoryMgr<GUILDBANISHINFO> & operator=(class CMemoryMgr<GUILDBANISHINFO> &)
    /* this+0x4 */ class CMemoryMgr<GUILDBANISHINFO>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDBANISHINFO>::lcMemory {
    *
  /* this+0x4 */ struct GUILDBANISHINFO * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<GUILDBANISHINFO>::lcMemory &)
  public void CMemoryMgr<GUILDBANISHINFO>::lcMemory::lcMemory()
  public void CMemoryMgr<GUILDBANISHINFO>::lcMemory::~lcMemory()
  public class CMemoryMgr<GUILDBANISHINFO>::lcMemory & operator=(const class CMemoryMgr<GUILDBANISHINFO>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDMINFO> {
    *
  public bool CMemoryMgr<GUILDMINFO>::Init(const int)
  public struct GUILDMINFO * CMemoryMgr<GUILDMINFO>::Alloc()
  public void CMemoryMgr<GUILDMINFO>::Free(struct GUILDMINFO *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<GUILDMINFO>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<GUILDMINFO>(class CMemoryMgr<GUILDMINFO> &)
  public void CMemoryMgr<GUILDMINFO>::CMemoryMgr<GUILDMINFO>()
  public void CMemoryMgr<GUILDMINFO>::~CMemoryMgr<GUILDMINFO>()
  public class CMemoryMgr<GUILDMINFO> & operator=(class CMemoryMgr<GUILDMINFO> &)
    /* this+0x4 */ class CMemoryMgr<GUILDMINFO>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDMINFO>::lcMemory {
    *
  /* this+0x4 */ struct GUILDMINFO * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<GUILDMINFO>::lcMemory &)
  public void CMemoryMgr<GUILDMINFO>::lcMemory::lcMemory()
  public void CMemoryMgr<GUILDMINFO>::lcMemory::~lcMemory()
  public class CMemoryMgr<GUILDMINFO>::lcMemory & operator=(const class CMemoryMgr<GUILDMINFO>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDMPOSITION> {
    *
  public bool CMemoryMgr<GUILDMPOSITION>::Init(const int)
  public struct GUILDMPOSITION * CMemoryMgr<GUILDMPOSITION>::Alloc()
  public void CMemoryMgr<GUILDMPOSITION>::Free(struct GUILDMPOSITION *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<GUILDMPOSITION>(class CMemoryMgr<GUILDMPOSITION> &)
  public void CMemoryMgr<GUILDMPOSITION>::CMemoryMgr<GUILDMPOSITION>()
  public void CMemoryMgr<GUILDMPOSITION>::~CMemoryMgr<GUILDMPOSITION>()
  public class CMemoryMgr<GUILDMPOSITION> & operator=(class CMemoryMgr<GUILDMPOSITION> &)
    /* this+0x4 */ class CMemoryMgr<GUILDMPOSITION>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDMPOSITION>::lcMemory {
    *
  /* this+0x4 */ struct GUILDMPOSITION * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<GUILDMPOSITION>::lcMemory &)
  public void CMemoryMgr<GUILDMPOSITION>::lcMemory::lcMemory()
  public void CMemoryMgr<GUILDMPOSITION>::lcMemory::~lcMemory()
  public class CMemoryMgr<GUILDMPOSITION>::lcMemory & operator=(const class CMemoryMgr<GUILDMPOSITION>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItCashPointItem> {
    *
  public bool CMemoryMgr<IVItCashPointItem>::Init(const int)
  public class IVItCashPointItem * CMemoryMgr<IVItCashPointItem>::Alloc()
  public void CMemoryMgr<IVItCashPointItem>::Free(class IVItCashPointItem *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<IVItCashPointItem>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<IVItCashPointItem>(class CMemoryMgr<IVItCashPointItem> &)
  public void CMemoryMgr<IVItCashPointItem>::CMemoryMgr<IVItCashPointItem>()
  public void CMemoryMgr<IVItCashPointItem>::~CMemoryMgr<IVItCashPointItem>()
  public class CMemoryMgr<IVItCashPointItem> & operator=(class CMemoryMgr<IVItCashPointItem> &)
    /* this+0x4 */ class CMemoryMgr<IVItCashPointItem>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItCashPointItem>::lcMemory {
    *
  /* this+0x4 */ class IVItCashPointItem * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<IVItCashPointItem>::lcMemory &)
  public void CMemoryMgr<IVItCashPointItem>::lcMemory::lcMemory()
  public void CMemoryMgr<IVItCashPointItem>::lcMemory::~lcMemory()
  public class CMemoryMgr<IVItCashPointItem>::lcMemory & operator=(const class CMemoryMgr<IVItCashPointItem>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItEquipItem> {
    *
  public bool CMemoryMgr<IVItEquipItem>::Init(const int)
  public class IVItEquipItem * CMemoryMgr<IVItEquipItem>::Alloc()
  public void CMemoryMgr<IVItEquipItem>::Free(class IVItEquipItem *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<IVItEquipItem>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<IVItEquipItem>(class CMemoryMgr<IVItEquipItem> &)
  public void CMemoryMgr<IVItEquipItem>::CMemoryMgr<IVItEquipItem>()
  public void CMemoryMgr<IVItEquipItem>::~CMemoryMgr<IVItEquipItem>()
  public class CMemoryMgr<IVItEquipItem> & operator=(class CMemoryMgr<IVItEquipItem> &)
    /* this+0x4 */ class CMemoryMgr<IVItEquipItem>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItEquipItem>::lcMemory {
    *
  /* this+0x4 */ class IVItEquipItem * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<IVItEquipItem>::lcMemory &)
  public void CMemoryMgr<IVItEquipItem>::lcMemory::lcMemory()
  public void CMemoryMgr<IVItEquipItem>::lcMemory::~lcMemory()
  public class CMemoryMgr<IVItEquipItem>::lcMemory & operator=(const class CMemoryMgr<IVItEquipItem>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItNormalArrowItem> {
    *
  public bool CMemoryMgr<IVItNormalArrowItem>::Init(const int)
  public class IVItNormalArrowItem * CMemoryMgr<IVItNormalArrowItem>::Alloc()
  public void CMemoryMgr<IVItNormalArrowItem>::Free(class IVItNormalArrowItem *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<IVItNormalArrowItem>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<IVItNormalArrowItem>(class CMemoryMgr<IVItNormalArrowItem> &)
  public void CMemoryMgr<IVItNormalArrowItem>::CMemoryMgr<IVItNormalArrowItem>()
  public void CMemoryMgr<IVItNormalArrowItem>::~CMemoryMgr<IVItNormalArrowItem>()
  public class CMemoryMgr<IVItNormalArrowItem> & operator=(class CMemoryMgr<IVItNormalArrowItem> &)
    /* this+0x4 */ class CMemoryMgr<IVItNormalArrowItem>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItNormalArrowItem>::lcMemory {
    *
  /* this+0x4 */ class IVItNormalArrowItem * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<IVItNormalArrowItem>::lcMemory &)
  public void CMemoryMgr<IVItNormalArrowItem>::lcMemory::lcMemory()
  public void CMemoryMgr<IVItNormalArrowItem>::lcMemory::~lcMemory()
  public class CMemoryMgr<IVItNormalArrowItem>::lcMemory & operator=(const class CMemoryMgr<IVItNormalArrowItem>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItNormalItem> {
    *
  public bool CMemoryMgr<IVItNormalItem>::Init(const int)
  public class IVItNormalItem * CMemoryMgr<IVItNormalItem>::Alloc()
  public void CMemoryMgr<IVItNormalItem>::Free(class IVItNormalItem *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<IVItNormalItem>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<IVItNormalItem>(class CMemoryMgr<IVItNormalItem> &)
  public void CMemoryMgr<IVItNormalItem>::CMemoryMgr<IVItNormalItem>()
  public void CMemoryMgr<IVItNormalItem>::~CMemoryMgr<IVItNormalItem>()
  public class CMemoryMgr<IVItNormalItem> & operator=(class CMemoryMgr<IVItNormalItem> &)
    /* this+0x4 */ class CMemoryMgr<IVItNormalItem>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItNormalItem>::lcMemory {
    *
  /* this+0x4 */ class IVItNormalItem * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<IVItNormalItem>::lcMemory &)
  public void CMemoryMgr<IVItNormalItem>::lcMemory::lcMemory()
  public void CMemoryMgr<IVItNormalItem>::lcMemory::~lcMemory()
  public class CMemoryMgr<IVItNormalItem>::lcMemory & operator=(const class CMemoryMgr<IVItNormalItem>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItQuestItem> {
    *
  public bool CMemoryMgr<IVItQuestItem>::Init(const int)
  public class IVItQuestItem * CMemoryMgr<IVItQuestItem>::Alloc()
  public void CMemoryMgr<IVItQuestItem>::Free(class IVItQuestItem *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<IVItQuestItem>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<IVItQuestItem>(class CMemoryMgr<IVItQuestItem> &)
  public void CMemoryMgr<IVItQuestItem>::CMemoryMgr<IVItQuestItem>()
  public void CMemoryMgr<IVItQuestItem>::~CMemoryMgr<IVItQuestItem>()
  public class CMemoryMgr<IVItQuestItem> & operator=(class CMemoryMgr<IVItQuestItem> &)
    /* this+0x4 */ class CMemoryMgr<IVItQuestItem>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<IVItQuestItem>::lcMemory {
    *
  /* this+0x4 */ class IVItQuestItem * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<IVItQuestItem>::lcMemory &)
  public void CMemoryMgr<IVItQuestItem>::lcMemory::lcMemory()
  public void CMemoryMgr<IVItQuestItem>::lcMemory::~lcMemory()
  public class CMemoryMgr<IVItQuestItem>::lcMemory & operator=(const class CMemoryMgr<IVItQuestItem>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<WINPOINT> {
    *
  public bool CMemoryMgr<WINPOINT>::Init(const int)
  public struct WINPOINT * CMemoryMgr<WINPOINT>::Alloc()
  public void CMemoryMgr<WINPOINT>::Free(struct WINPOINT *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<WINPOINT>(class CMemoryMgr<WINPOINT> &)
  public void CMemoryMgr<WINPOINT>::CMemoryMgr<WINPOINT>()
  public void CMemoryMgr<WINPOINT>::~CMemoryMgr<WINPOINT>()
  public class CMemoryMgr<WINPOINT> & operator=(class CMemoryMgr<WINPOINT> &)
    /* this+0x4 */ class CMemoryMgr<WINPOINT>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<WINPOINT>::lcMemory {
    *
  /* this+0x4 */ struct WINPOINT * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<WINPOINT>::lcMemory &)
  public void CMemoryMgr<WINPOINT>::lcMemory::lcMemory()
  public void CMemoryMgr<WINPOINT>::lcMemory::~lcMemory()
  public class CMemoryMgr<WINPOINT>::lcMemory & operator=(const class CMemoryMgr<WINPOINT>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMerceDB {
  CODBC, offset = 0x0

  public void CMerceDB(const class CMerceDB &)
  public void CMerceDB::CMerceDB()
  public void CMerceDB::~CMerceDB()
  public int CMerceDB::InsertHomunInfo(int, struct HOMUN_DBINFO *)
  public int CMerceDB::SaveHomunInfo(int, struct HOMUN_DBINFO *)
  public void CMerceDB::DeleteHomunInfo(int)
  public class CMerceDB & operator=(const class CMerceDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMercenaryConfiguration {
    *
  /* [0x0003:0x0004b28c] */ static  class CMercenaryConfiguration * m_cpSelf
  /* this+0x4 */ const char * m_ConfigurationFileName
  /* this+0x8 */ bool m_bOK
      /* this+0xc */ class std::map<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<int>,std::allocator<std::pair<int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > m_ScrollContainer

  private bool CMercenaryConfiguration::Create()
  public bool isOK()
  public bool CMercenaryConfiguration::isScroll(int)
  public static bool CMercenaryConfiguration::CreateInstance()
  public static void CMercenaryConfiguration::DestroyInstance()
  public void CMercenaryConfiguration(const class CMercenaryConfiguration &)
  private void CMercenaryConfiguration::CMercenaryConfiguration()
  private void CMercenaryConfiguration::~CMercenaryConfiguration()
  public class CMercenaryConfiguration & operator=(const class CMercenaryConfiguration &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMercenaryCreateADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CMercenaryCreateADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ const unsigned long m_AID
  /* this+0x20 */ const int m_Job
  /* this+0x24 */ const int m_RemainLifeSECOND
  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const int GetJob()
  public const enum CMercenaryCreateADBWork::enumResult GetResult()
  private bool CMercenaryCreateADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CMercenaryCreateADBWork::Create(class NODBCCtrl &)
  public void CMercenaryCreateADBWork(const class CMercenaryCreateADBWork &)
  public void CMercenaryCreateADBWork::CMercenaryCreateADBWork(const unsigned long, const unsigned long, const int, const int)
  public void CMercenaryCreateADBWork::~CMercenaryCreateADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CMercenaryDBV2 {
  CODBCV2, offset = 0x0

    /* [0x0003:0x0004b290] */ static  class CMercenaryDBV2 * m_cpSelf
  /* this+0x10 */ bool m_bOK
  public bool CMercenaryDBV2::isOK()
  public static class CMercenaryDBV2 * GetObj()
  public static bool CMercenaryDBV2::CreateInstance(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const enum CODBCV2Connector::enumConncetType)
  public static void CMercenaryDBV2::DestoryInstance()
  public void CMercenaryDBV2(const class CMercenaryDBV2 &)
  private void CMercenaryDBV2::CMercenaryDBV2(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const enum CODBCV2Connector::enumConncetType)
  private void CMercenaryDBV2::~CMercenaryDBV2()
  public class CMercenaryDBV2 & operator=(const class CMercenaryDBV2 &)
  private void * __vecDelDtor(unsigned int)
}

struct CMercenaryDBV2::DBINFO {
  /* this+0x0 */ int TypicalJob
  /* this+0x4 */ int Job
  /* this+0x8 */ int RemainLifeSECOND
  /* this+0xc */ int Property
  /* this+0x10 */ int BodyState
  /* this+0x14 */ int HealthState
  /* this+0x18 */ int EffectState
  /* this+0x1c */ int approval_monster_kill_counter
  /* this+0x20 */ int hp
  /* this+0x24 */ int sp
}

class CMercenaryDeleteADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CMercenaryDeleteADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ const unsigned long m_AID
  /* this+0x20 */ const int m_reason
  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const enum CMercenaryDeleteADBWork::enumResult GetResult()
  public const int GetReason()
  private bool CMercenaryDeleteADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CMercenaryDeleteADBWork::Delete(class NODBCCtrl &)
  public void CMercenaryDeleteADBWork(const class CMercenaryDeleteADBWork &)
  public void CMercenaryDeleteADBWork::CMercenaryDeleteADBWork(const unsigned long, const unsigned long, const int)
  public void CMercenaryDeleteADBWork::~CMercenaryDeleteADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CMercenaryLog {
  CDatabaseLog<CMercenaryLogRecord *>, offset = 0x0

  private int CMercenaryLog::SaveToDatabase(void *, class CMercenaryLogRecord *)
  public void CMercenaryLog::ConnectToDatabase(const char *)
  public void CMercenaryLog::Add(const enum CMercenaryLogRecord::enumType, class CNpcMercenary * const, class CPC * const)
  public void CMercenaryLog(const class CMercenaryLog &)
  public void CMercenaryLog::CMercenaryLog()
  public void CMercenaryLog::~CMercenaryLog()
  public class CMercenaryLog & operator=(const class CMercenaryLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMercenaryLogRecord {
    /* this+0x0 */ enum CMercenaryLogRecord::enumType m_Type
  /* this+0x4 */ unsigned long m_dwAccountID
  /* this+0x8 */ char[0x19] m_szAccountName
  /* this+0x24 */ unsigned long m_dwCharacterID
  /* this+0x28 */ char[0x19] m_szCharacterName
  /* this+0x44 */ int m_Job
  /* this+0x48 */ int m_RemainLifeSECOND
  /* this+0x4c */ int m_approval_monster_kill_counter
  private void AlwaysDestIncNULLstrncpy(char * const, const char *, const int)
  public void CMercenaryLogRecord::CMercenaryLogRecord(const enum CMercenaryLogRecord::enumType, class CNpcMercenary * const, class CPC * const)
}

class CMercenarySkillMgr {
    *
  /* [0x0003:0x0004b294] */ static  class CMercenarySkillMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
            /* this+0x8 */ class std::map<int,std::vector<CMercenarySkillMgr::SKILLINFO,std::allocator<CMercenarySkillMgr::SKILLINFO> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<CMercenarySkillMgr::SKILLINFO,std::allocator<CMercenarySkillMgr::SKILLINFO> > > > > m_JobSkillContainer

    private bool CMercenarySkillMgr::Create()
  private void Destory()
  private class CMercenarySkillMgr::ANAYSISRET CMercenarySkillMgr::Anaysis(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private class CMercenarySkillMgr::ANAYSISRET CMercenarySkillMgr::Anaysis_JobBlock(class CFTLexicalAnaysis &, const int)
  public bool CMercenarySkillMgr::isOK()
  public void CMercenarySkillMgr::AddSkill(const class CNpcMercenary *)
  public static bool CMercenarySkillMgr::CreateInstance()
  public static void CMercenarySkillMgr::DestoryInstance()
  public void CMercenarySkillMgr(const class CMercenarySkillMgr &)
  private void CMercenarySkillMgr::CMercenarySkillMgr()
  private void CMercenarySkillMgr::~CMercenarySkillMgr()
  public class CMercenarySkillMgr & operator=(const class CMercenarySkillMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMercenarySkillMgr::ANAYSISRET {
    /* this+0x0 */ class CFTToken Token

  /* this+0x2c */ enum CMercenarySkillMgr::ANAYSISRET::enumCode Code
  public void ANAYSISRET(const class CMercenarySkillMgr::ANAYSISRET &)
  public void ANAYSISRET(const enum CMercenarySkillMgr::ANAYSISRET::enumCode, class CFTToken &)
  public void ANAYSISRET(const enum CMercenarySkillMgr::ANAYSISRET::enumCode)
  public void CMercenarySkillMgr::ANAYSISRET::~ANAYSISRET()
  public class CMercenarySkillMgr::ANAYSISRET & operator=(const class CMercenarySkillMgr::ANAYSISRET &)
  public void * __vecDelDtor(unsigned int)
}

class CMercenarySkillMgr::SKILLINFO {
  /* this+0x0 */ int SKID
  /* this+0x4 */ int Level
  public void SKILLINFO()
}

class CMobileEvent {
    *
  public void CMobileEvent(const class CMobileEvent &)
  public void CMobileEvent::CMobileEvent()
  public void CMobileEvent::~CMobileEvent()
  public void CMobileEvent::Init(int, int)
  public bool CMobileEvent::GetMEventZeny(int, int &)
  public bool CMobileEvent::GetMEventItem(int, int &, short &)
  public bool GetMEventCoupon(int, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public void CMobileEvent::GetMEventZenyName(int, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public void CMobileEvent::GetMEventItemName(int, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public void CMobileEvent::GetMEventItemID(int, int &)
  public void GetMEventCouponName(int, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public bool CMobileEvent::Load(int)
  public bool CMobileEvent::DeleteMEventZeny(int)
  public bool CMobileEvent::DeleteMEventItem(int)
  public bool DeleteMEventCoupon(int)
  public bool GetIsLoad()
  public bool CMobileEvent::ReLoad(int)
  public int CMobileEvent::CheckExpireTime(unsigned short, unsigned short, unsigned short)
  /* this+0x4 */ class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > m_zenyList

  /* this+0x14 */ class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > m_itemList

  /* this+0x24 */ class std::vector<_MEventItemInfo,std::allocator<_MEventItemInfo> > m_couponList

  /* this+0x34 */ bool m_isLoaded
  /* this+0x38 */ int m_GID
  /* this+0x3c */ int m_AID
  public class CMobileEvent & operator=(const class CMobileEvent &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMonParameterMgr {
  CODBC, offset = 0x0

  CMonsterParameterTable, offset = 0x14

  public void CMonParameterMgr(const class CMonParameterMgr &)
  public void CMonParameterMgr::CMonParameterMgr()
  public void CMonParameterMgr::~CMonParameterMgr()
  public int CMonParameterMgr::GetJobID(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMonParameterMgr::Init(const char *)
  public struct MONPARAMETER * CMonParameterMgr::GetMonParameter(unsigned long)
  public struct MONSPAWN_SETINFO * CMonParameterMgr::GetMonSpawnInfo(unsigned long)
  public const char * CMonParameterMgr::GetMonsterName(unsigned long)
  public int CMonParameterMgr::GetMonsterType(unsigned long)
  public bool CMonParameterMgr::SetMonsterNameAndAIType(unsigned long, const char *, int)
  private void Load(const char *, const char *)
  private void CMonParameterMgr::LoadSpawnInfo()
  private void InsertMonParameter(char *, struct MONPARAMETER *)
  private bool CMonParameterMgr::LoadMonParameter()
  private void CMonParameterMgr::LoadMonMakingItem()
  private void AddMonParameter(unsigned long, struct MONPARAMETER *)
  private void CMonParameterMgr::Destroy()
  private void CMonParameterMgr::LoadEventMonParameter()
  private void CMonParameterMgr::LoadEventMonMakingItem()
  /* this+0x38 */ class std::map<unsigned long,MONPARAMETER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,MONPARAMETER *> > > m_parameter

  /* this+0x48 */ class std::map<unsigned long,MONSPAWN_SETINFO,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,MONSPAWN_SETINFO> > > m_spawnSetData

  public class CMonParameterMgr & operator=(const class CMonParameterMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMonsterParameterTable {
    *
  public void CMonsterParameterTable(const class CMonsterParameterTable &)
  public void CMonsterParameterTable::CMonsterParameterTable()
  public void CMonsterParameterTable::~CMonsterParameterTable()
  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CMonsterParameterTable::SetTable(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMonsterParameterTable::SetTable()
  public void CMonsterParameterTable::Clear()
  public void CMonsterParameterTable::SaveToFileMobName(const char *)
  public void CMonsterParameterTable::SaveToFileNpcSpr(const char *)
  /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > > m_spriteName

  /* this+0x14 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > > m_mobName

  public class CMonsterParameterTable & operator=(const class CMonsterParameterTable &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMonsterTransformMgr {
  public class std::tr1::tuple<bool,bool,int,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> CMonsterTransformMgr::IsTransform(class CPC *, const int)
  public bool CMonsterTransformMgr::InsertTbl(const unsigned short, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool CMonsterTransformMgr::LoadLuaFile()
  public bool isOK()
  public static bool CMonsterTransformMgr::CreateInstance()
  public static void CMonsterTransformMgr::DestroyInstance()
  public void CMonsterTransformMgr(const class CMonsterTransformMgr &)
  private void CMonsterTransformMgr::CMonsterTransformMgr()
  private void CMonsterTransformMgr::~CMonsterTransformMgr()
  /* [0x0003:0x0004b298] */ static  class CMonsterTransformMgr * m_cpSelf
      /* this+0x0 */ class std::map<int,CMonsterTransformMgr::lcData,std::less<int>,std::allocator<std::pair<int const ,CMonsterTransformMgr::lcData> > > m_mapMonsterTransform

  /* this+0x10 */ bool m_bOK
  public class CMonsterTransformMgr & operator=(const class CMonsterTransformMgr &)
  private void * __vecDelDtor(unsigned int)
}

class CMonsterTransformMgr::lcData {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strQualification

  /* this+0x1c */ const int m_Job
  public void lcData(const class CMonsterTransformMgr::lcData &)
  public void lcData(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMonsterTransformMgr::lcData::~lcData()
  public void * __vecDelDtor(unsigned int)
}

class CMsg {
  public unsigned long GetMsgID()
  public void SetMsgID(unsigned long)
  /* this+0x0 */ int par1
  /* this+0x4 */ int par2
  /* this+0x8 */ int par3
  /* this+0xc */ int par4
  /* this+0x10 */ int par5
  /* this+0x14 */ unsigned long m_MID
}

class CMyMiniDumpUnhandledExceptionHandler {
  private static long CMyMiniDumpUnhandledExceptionHandler::UnhandledExceptionHandler(struct _EXCEPTION_POINTERS *)
  private static void MyStackWalk(const struct _SYSTEMTIME &, struct _EXCEPTION_POINTERS *)
  public static bool CMyMiniDumpUnhandledExceptionHandler::CreateInstance(function  *)
  public static void CMyMiniDumpUnhandledExceptionHandler::DestroyInstance()
  private bool isOK()
  private void CMyMiniDumpUnhandledExceptionHandler::CMyMiniDumpUnhandledExceptionHandler(function  *)
  private void ~CMyMiniDumpUnhandledExceptionHandler()
  /* [0x0003:0x0004b764] */ static  class CMyMiniDumpUnhandledExceptionHandler * m_cpSelf
  /* this+0x0 */ bool m_bOK
  /* [0x0003:0x0004b660] */ static  char[0x104] m_MoudleFilePath
  /* [0x0003:0x0004b768] */ static  char[0x104] m_MoudleFileName
  /* [0x0003:0x0004b86c] */ static  function  * m_pOutputFunc
  private void * __vecDelDtor(unsigned int)
}

class CMyPoint {
  public void CMyPoint(const int, const int)
  public int x()
  public int y()
  /* this+0x0 */ int m_x
  /* this+0x4 */ int m_y
}

class CMyRect {
  public void CMyRect(const int, const int, const int, const int)
  public int left()
  public int top()
  public int right()
  public int bottom()
  public int centerXpos()
  public int centerYpos()
  public int width()
  public int height()
  public class CMyPoint LeftTop()
  public class CMyPoint RightTop()
  public class CMyPoint LeftBottom()
  public class CMyPoint RightBottom()
  public bool CMyRect::IsMyPoint(const class CMyPoint &)
  public bool CMyRect::IsIntersection(const class CMyRect &)
  /* this+0x0 */ int m_left
  /* this+0x4 */ int m_top
  /* this+0x8 */ int m_width
  /* this+0xc */ int m_height
}

class CNPC {
  CActor, offset = 0x0

  public const char * CNPC::GetNamePtr()
  public int GetJobType()
  public void CNPC(class CNPC &)
  public void CNPC::CNPC()
  public void CNPC::~CNPC()
  public unsigned long GetMyCreatorPCAID()
  public void CNPC::Init()
  public void CNPC::InitTimeInfo()
  public void CNPC::Reset()
  public unsigned char GetNPCType()
  public void CNPC::OnDead(unsigned long)
  public void CNPC::Send(const int, char *)
  public void CNPC::NotifySkillAction(class CCharacter *, class CCharacter *, class CCharacter *, int, short, short, unsigned short)
  public void CNPC::SkillUseAck(unsigned short, unsigned short, bool, unsigned char)
  public void CNPC::OnProcess()
  public int CNPC::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public int CNPC::GetParameterValue(unsigned short, int &)
  public int CNPC::UpdateParameterValue(unsigned short, int)
  public void CNPC::CheckCommandQueue()
  public void CNPC::DisableCommand(unsigned long)
  public void CNPC::InsertCommand(struct COMMAND_QUEUE *)
  public int CNPC::IsMyArea(class CCharacter *, int)
  public int CNPC::IsTarget(class CCharacter *, unsigned long)
  public void CNPC::OnMsgFromItemServer(unsigned long, class CITZMsg *)
  public class CCharacter * CNPC::GetMyOwner()
  public int GetErrorCount()
  public void SetErrorCount(int)
  public unsigned long CNPC::GetAccountID()
  public int CNPC::GetAttackPoint(class CCharacter *, unsigned short, int)
  public int CNPC::IsDamageMotionPossible()
  public int CNPC::IsRightProperty(int)
  public unsigned long CNPC::GetState()
  public int CNPC::IsMovable()
  public int CNPC::IsAttackable()
  public int CNPC::IsAvoidable(int, int, int)
  public unsigned short CNPC::GetLostItem(int, class CCharacter * const)
  public int CNPC::GetSpeed()
  public int CNPC::GetATKHasteVal1()
  public int CNPC::GetATKHasteVal2()
  public int CNPC::GetAttackSlowValue()
  public int CNPC::GetMoveHasteValue()
  public int CNPC::GetMoveSlowValue()
  public int CNPC::GetScale()
  public int CNPC::GetAvoidableSuccessPercent()
  public short CNPC::GetStatusDef()
  public short CNPC::GetDefencePoint()
  public int CNPC::GetModifiedValueByEnemySize(int)
  public short CNPC::GetItemMagicDef()
  public short CNPC::GetStatusMagicDef()
  public int CNPC::GetBaseFlee()
  public int CNPC::GetBaseHit()
  public int CNPC::GetItemAttPower()
  public int CNPC::GetStatusAttPower()
  public int GetDeadTime()
  public void SetParentAID(unsigned long)
  public unsigned long GetParentAID()
  public void SetParentGID(unsigned long)
  public unsigned long GetParentGID()
  public void SetRegen(int)
  public int IsRegen()
  public int CNPC::GetMaxHP()
  public int CNPC::GetMaxSP()
  public short CNPC::GetDexValue()
  public short CNPC::GetIntValue()
  public char * GetAccountName()
  public short GetAttackRange()
  public int CNPC::GetRevivalTerm()
  public int CNPC::GetAttackMotionTime()
  public int CNPC::GetAttackedMotionTime()
  public int IsCritical()
  public void CNPC::SetEffectStateTimeInfo(unsigned long, int)
  public struct NpcInfo * GetCharacterInfo()
  public unsigned long GetCurrentFSMState()
  public void CNPC::SetCurrentFSMState(unsigned long)
  public void CNPC::OnUseSkill(unsigned short, int, int, int, int)
  public class CCharacter * CNPC::GetTarget()
  public void SetFSMDependent(int)
  public int IsFSMDependent()
  public void StopMove()
  public int CNPC::IsMovableAround(int)
  public unsigned long GetEnemyAID()
  public void SetEnemyAID(unsigned long)
  public void CNPC::ResetHealthState(short)
  public void CNPC::SetBodyState(short)
  public void CNPC::SetHealthState(short)
  public void CNPC::SetCurrentState(short)
  public void CNPC::SetEffectState(int)
  public void CNPC::SetSpeed(int)
  public void SetZenyLost()
  public int IsZenyLost()
  public int CNPC::InitByPacket(void *)
  public int SetAccountID(int)
  public bool CNPC::RegistBattleFiledNpc(const char *)
  public int CNPC::GetBattleFieldAliveMemberCount(const char)
  public void CNPC::KVM_StartAliveCheck()
  public void CNPC::KVM_Npc_Noti(const char *)
  public void CNPC::InitSkill()
  public void CNPC::Dump(int, int)
  public void CNPC::OnEmotion(int)
  public void CNPC::ChangeSprite(unsigned long)
  public int CNPC::IsSameGuild(int)
  public void CNPC::Revival()
  public struct COMMAND_QUEUE * CNPC::SearchCommand(unsigned long)
  public int CNPC::IsRechargeTime()
  public void CNPC::CancelNPCSkill()
  public void CNPC::SetRangedAttacked(bool, unsigned long)
  public void CNPC::SetRudeAttacked(bool, unsigned long)
  public void SetAttackedSkillID(unsigned long)
  public void CNPC::ResetEffectState(int)
  public void CNPC::OnTeleportCharacter(int, int, int)
  public void CNPC::OnGroundSkill(int, int, int)
  public void CNPC::OnTouchedSkillObject(int, int, int)
  public void CNPC::OperationSkillToCharacter(int, int, int)
  public void CNPC::SPAttackSkillToCharacter(int, int, int)
  public void CNPC::OperationSkillToSelf(int, int, int)
  public short CNPC::SplashAttack(int, short, short, int, int, int, unsigned long, void *, int, int)
  public int CNPC::SplashAttack2(int, struct PosInfo, int, int, int, struct MSG_TYPE1_TWODWORD *, int, int, struct PosInfo *)
  public void CNPC::SplashAttack3(int, struct PosInfo, int, struct MSG_TYPE1_TWODWORD *, int, int)
  public void CNPC::SplashNapalmBeat(struct SKILLATTACK_MSG *, short, short, int, unsigned long)
  public void CNPC::GetPushedPosition2(int, int, int, int, struct PosInfo &)
  public void GetSplashCells(struct PosInfo, struct PosInfo, int, int, struct PosInfo *)
  public void CNPC::GetSplashCells2(struct PosInfo, struct PosInfo, int, struct PosInfo *)
  public int CNPC::GetFireWallNeighborCells(short, short, int, int, int *)
  public void CNPC::NotifyUseSkill(unsigned short, unsigned long, unsigned long, short, bool)
  public void CNPC::NotifyGroundSkillUsing(unsigned short, short, short, short, unsigned long)
  public void CNPC::DetectHidingCharacter(int, struct SKILLATTACK_MSG *, int, int, int)
  public void CNPC::SummonMonster(struct SummonMobList *, unsigned short, int, int)
  public void CNPC::Metamorphosis(struct SummonMobList *)
  public class CCharacter * CNPC::AddMonster(unsigned long, int, int)
  public void CNPC::ModifyDamage(int &, int, int, class CCharacter *, unsigned short)
  public void CNPC::ModifyDamage_ATKED(class CCharacter *, int &, int, int, int, int)
    public bool CNPC::IsMustDamageOne(const int, const int)
  public int GetParameterAttr()
  public void SetParameterAttr(enum CNPC::enumATTRMASK)
  public void ReSetParameterAttr(enum CNPC::enumATTRMASK)
  public void CNPC::NotifyMissSkill(unsigned short, unsigned long, unsigned long, int)
  public void NeighborPCAttack(int, short, short, int, int, int, unsigned long, struct MSG_TYPE1_TWODWORD *, int, int)
  public int CNPC::GetMagicAttackModifiedPower(class CCharacter *, int, int, unsigned short, int)
  public void CNPC::Enable()
  public void CNPC::Disable()
  public int CNPC::IsEnable()
  public void CNPC::OnChangeDefense(int, int)
  public int CNPC::SetParameter()
  public void InitCache()
  public void CNPC::OnChangeGuildID()
  public void CNPC::SetATKPercentInfo(int, unsigned long, int)
  public void CNPC::SetDEFPercentInfo(int, unsigned long, int)
  public void CNPC::ResetATKPercentInfo(int)
  public void CNPC::ResetDEFPercentInfo(int)
  public void CNPC::SetMATKPercentInfo(int, unsigned long, int)
  public void CNPC::SetMDEFPercentInfo(int, unsigned long, int)
  public void ResetMATKPercentInfo(int)
  public void CNPC::ResetMDEFPercentInfo(int)
  public unsigned short GetSpellCasting()
  public void CNPC::ModifyAttackPowerByEffective(class CCharacter *, int, int &)
  public int CNPC::IsSiegeMode()
  public int CNPC::OnWhereMyMob_XPos(const char *)
  public int CNPC::OnWhereMyMob_YPos(const char *)
  public unsigned long CNPC::FindMyMobAID(const char *)
  public void CNPC::SetSpellCasting(const unsigned short)
  public int CNPC::GetSKLevel(const int)
  public bool CNPC::OpSKToChar_SKID_ML_DEVOTION(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  public void CNPC::OpSKToSelf_SKID_ML_DEFENDER(const int)
  public void CNPC::OpSKToSelf_SKID_MER_MAGNIFICAT(const int, const int, const int, const int)
  public void CNPC::OpSKToSelf_SKID_MER_AUTOBERSERK()
  public void CNPC::NotifyParameter(unsigned short, int)
  public void CNPC::ResetEffective_after_EFST_DEFENDER()
    protected void CNPC::CollideSplashAttack(const int, class CCharacter * const, class CCharacter * const, const int, const unsigned short, const int, class std::map<CCharacter *,CollideInfo,std::less<CCharacter *>,std::allocator<std::pair<CCharacter * const,CollideInfo> > > &)
  private void DispatchCommand(struct COMMAND_QUEUE *)
  private void CNPC::OnUseGroundSkill(int, struct MSG_TYPE1_TWODWORD *, int, int)
  private void CNPC::NPC_WIDEHEALTHFEAR(const int)
  private void CNPC::NPC_WIDEBODYBURNNING(const int)
  private void CNPC::NPC_WIDEFROSTMISTY(const int)
  private void CNPC::NPC_WIDE_COLD(const int)
  private void CNPC::NPC_WIDE_DEEP_SLEEP(const int)
  private void CNPC::NPC_WIDESIREN(const int)
  public int CNPC::GetEmblemVersion()
  public unsigned long CNPC::GetNeighborPcNumber(int)
  public void CNPC::CheckSpecialState(unsigned long)
  public void CNPC::CheckCondition(unsigned long)
  public class CItem * CNPC::CreateItemOnMap(unsigned short, int, int, int)
  public short CNPC::GetAttackSuccessPercent(class CCharacter *, const int, int, const int)
  protected int CNPC::GetAttackFinalDamage(class CCharacter *, int, int, unsigned short, int, int)
  public int CNPC::GetAttackFinalDamage(struct ATTACK_INFO *)
  public void AddSpecialZoneList(unsigned long)
  public void CNPC::DelSpecialZoneList()
  public int CNPC::SetEffective(int, int, int, int, int, int)
  public void CNPC::ResetEffective(int, int)
  public bool CNPC::IsGroundEffective(int, int &, bool &)
  public void CNPC::ProcessGroundEffective(int, int, bool)
  public void CNPC::SetOnShowEFST(int)
  public void CNPC::SetOffShowEFST(int)
  public void CNPC::OnChangeStatusAmount(int, unsigned short, unsigned long, int)
  public void CNPC::NotifyStatusAmount(unsigned short, int)
  public bool CNPC::ApplyStatusAmount(unsigned short, int &)
  public short CNPC::GetBodyState()
  public short CNPC::GetHealthState()
  public void CNPC::Chat(const char *, unsigned long)
  public char CNPC::GetCampID()
  public void CNPC::SetCampID(char)
  public short CNPC::GetAttSucPercent()
  public int CNPC::GetModifiedTargetStatusDEF(class CCharacter *)
  private int CNPC::GetModifiedTargetStatusDEF2(class CCharacter *)
  private int CNPC::GetModifiedTargetItemMDEF2(class CCharacter *)
  public void CNPC::ApplyExtraDEF(int &, class CCharacter *)
  public void CNPC::ApplyExtraMDEF(int &)
  public int GetMinusStdPropertyDamage(class CCharacter *, int, unsigned short, int)
  public int CNPC::GetRoomSize()
  public int CNPC::GetPhysicsFinalDamage(class CCharacter *, int, int, unsigned short, int, int)
  public int CNPC::GetPhysicsBaseATKPower(class CCharacter *, unsigned short, int)
  public int CNPC::GetMagicFinalDamage(class CCharacter *, int, int, unsigned short)
  public int CNPC::GetMagicFinalATKPower(class CCharacter *, int, int, unsigned short, int)
  public int CNPC::GetMagicTargetSKValue(class CCharacter *, const int, const unsigned short)
  public int CNPC::GetTargetSTDValue(class CCharacter *, int, unsigned short, int)
  public int CNPC::ProcessRevengeEnemy(class CCharacter *)
  protected void CNPC::InitCore()
  protected void CNPC::AddMYMob(unsigned long)
  protected void CNPC::OnMyMonsterDead(unsigned long, unsigned long)
  protected int CNPC::StartPath(struct PACKET_CZ_REQUEST_MOVE *, unsigned long)
  protected int CNPC::OnMove(struct PACKET_CZ_REQUEST_MOVE *)
  protected void CNPC::MultiCastStateInfo()
  protected void CNPC::NotifyInfoToSection()
  protected short CNPC::GetCurrentState()
  protected int CNPC::GetEffectState()
  protected int GetMYMobSize()
  protected int CNPC::SpawnMyMob(unsigned long)
  protected void CNPC::OnResetMyMob()
  protected void CNPC::UseSkillToCharacter(int, int, int)
  protected int CNPC::GetMagicAttackFinalDamage(class CCharacter *, int, int, unsigned short)
  protected int CNPC::GetMagicAttPower()
  protected int CNPC::SkillAttack(struct SKILLATTACK_MSG *, int, int, const bool)
  protected void SplashDamageAttack(int, short, short, short, int, unsigned long)
  protected void CNPC::OnMoveStop(int, int, int, const bool)
  protected void CNPC::OnCM_KNOCKBACK(const int, const int, const bool, const bool)
  protected void CNPC::OnChangeAGI(int, int, int)
  protected void CNPC::OnChangeDEX(int, int, int)
  protected void CNPC::OnChangeINT(int, int, int)
  protected void CNPC::OnChangeLUK(int, int, int)
  protected void CNPC::OnChangeSTR(int, int, int)
  protected void CNPC::OnChangeVIT(int, int, int)
  protected void CNPC::InitThePCCacheInfo(int)
  protected void CNPC::OnShowEffect(int)
  protected void CNPC::OnShowEffect3(int, int)
  protected void CNPC::OnShowScript(const char *)
  protected short CNPC::GetAvoidPercent_Client()
    protected const struct CNPC::stTombInfo & SetTombInfo()
  protected void SetTombInfo(const short, const short, const unsigned long, const unsigned long)
  public void SetUseTomb(const bool)
  public bool GetUseTomb()
  public void CNPC::DisappearBossTomb()
  /* this+0x4d4 */ struct NpcTimeInfo m_characterTimeInfo

  /* this+0x510 */ class CNPCSkill m_npcSkill

  /* this+0x588 */ class std::list<EATING_ITEM_INVENTORY *,std::allocator<EATING_ITEM_INVENTORY *> > m_eatingItem

  /* this+0x594 */ class CMemoryMgr<EATING_ITEM_INVENTORY> m_eatingItemMPool

  /* this+0x5b8 */ class CHostPathInfo m_pathInfo

  /* this+0x5f0 */ class CNPCUpdater m_npcUpdater

  /* this+0x604 */ unsigned long m_currentState
  /* this+0x608 */ unsigned long m_myParentAID
  /* this+0x60c */ unsigned long m_myParentGID
  /* this+0x610 */ int m_isSkilledFromCrucis
  /* this+0x614 */ int m_isFSMDependent
  /* this+0x618 */ int m_asDelta
  /* this+0x61c */ class std::list<MYMOBDATA,std::allocator<MYMOBDATA> > m_myMobList

  /* this+0x628 */ class std::map<int,AMOUNT_INFO,std::less<int>,std::allocator<std::pair<int const ,AMOUNT_INFO> > > m_ATKPercentList

  /* this+0x638 */ class std::map<int,AMOUNT_INFO,std::less<int>,std::allocator<std::pair<int const ,AMOUNT_INFO> > > m_DEFPercentList

  /* this+0x648 */ class std::map<int,AMOUNT_INFO,std::less<int>,std::allocator<std::pair<int const ,AMOUNT_INFO> > > m_MATKPercentList

  /* this+0x658 */ class std::map<int,AMOUNT_INFO,std::less<int>,std::allocator<std::pair<int const ,AMOUNT_INFO> > > m_MDEFPercentList

  /* this+0x668 */ int m_isMagicLocked
  /* this+0x66c */ int m_isRangeAttacked
  /* this+0x670 */ int m_isRudeAttacked
  /* this+0x674 */ unsigned long m_attackedSkillID
  /* this+0x678 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_invincibleInfo

  /* this+0x688 */ struct NpcInfo m_characterInfo

  /* this+0x7c0 */ class CNPCStateUpdater m_npcStateUpdater

  /* this+0x7e8 */ unsigned char m_npcType
  protected unsigned long CNPC::GetRoomID()
  protected void CNPC::SetRoomID(unsigned long)
  /* this+0x7ec */ class CPollTimer m_emoticonTM

  /* this+0x7f4 */ class std::list<unsigned long,std::allocator<unsigned long> > m_specialZoneList

  /* this+0x800 */ struct CNPC::stTombInfo m_TombInfo

  private void CNPC::PA_PRESSURE(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private void CNPC::CR_ACIDDEMONSTRATION(class CCharacter *, const struct MSG_TYPE4_FIVEDWORD * const, struct SKILLATTACK_MSG &)
  private void CNPC::SA_LANDPROTECTOR(const int, const int, const int, const int)
  private void CNPC::ST_FULLSTRIP(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  private void CNPC::MO_BALKYOUNG(class CCharacter *, const int, struct SKILLATTACK_MSG *)
  private void CNPC::NPC_ASSASSINCROSS(const int, const int)
  private void CNPC::NPC_DISSONANCE(const int)
  private void CNPC::NPC_UGLYDANCE(const int)
  private void CNPC::MO_EXTREMITYFIST(class CCharacter *, struct SKILLATTACK_MSG *)
  private bool CNPC::RG_STRIPWEAPON(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, const bool)
  private bool CNPC::RG_STRIPSHIELD(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, const bool)
  private bool CNPC::RG_STRIPARMOR(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, const bool)
  private bool CNPC::RG_STRIPHELM(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, const bool)
  private void CNPC::OnCM_MODIFY_SKILLCOUNT(class CCharacter *)
  public int SkillAttackEx(struct SKILLATTACK_MSG *, const int, const int, const bool)
  public class CNPC & operator=(class CNPC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNPC2ZMsg {
  CMsg, offset = 0x0

}

class CNPC::Neighbor {
  /* this+0x0 */ class std::vector<CCharacter *,std::allocator<CCharacter *> > * m_pSectionList
  /* this+0x4 */ class CCharacter * m_pCharacter
  public void Neighbor(class CCharacter *, class std::vector<CCharacter *,std::allocator<CCharacter *> > *)
}

struct CNPC::stTombInfo {
  public void stTombInfo()
  public void Reset()
  /* this+0x0 */ bool bUse
  /* this+0x2 */ short hour
  /* this+0x4 */ short min
  /* this+0x8 */ unsigned long MPV_GID
  /* this+0xc */ unsigned long MOB_AID
}

class CNPCAddSkillInfo {
    *
  public void CNPCAddSkillInfo::~CNPCAddSkillInfo()
  public class std::vector<NPCSKILLINFO *,std::allocator<NPCSKILLINFO *> > * CNPCAddSkillInfo::Find(int, int)
  public int CNPCAddSkillInfo::Load(const char *)
  public const char * CNPCAddSkillInfo::GetNPCChat(int, unsigned long &)
  private int CNPCAddSkillInfo::LoadEntry(char *, char *, char *, int, int, int, unsigned long, char *, char *, char *, char *, char *, char *)
  private int CNPCAddSkillInfo::SetSkillInfo(struct NPCSKILLINFO *, char * *)
  private void CNPCAddSkillInfo::InitKeyword()
  private unsigned long CNPCAddSkillInfo::GetKeyWord(const char *)
  private class std::vector<NPCSKILLINFO *,std::allocator<NPCSKILLINFO *> > * CNPCAddSkillInfo::InsertNewSkill(int, int)
  private void CNPCAddSkillInfo::Free()
  private bool CNPCAddSkillInfo::LoadNPCChat()
  /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > > m_scriptKeyword

  /* this+0x14 */ class std::map<unsigned long,std::map<unsigned long,std::vector<NPCSKILLINFO *,std::allocator<NPCSKILLINFO *> > *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<NPCSKILLINFO *,std::allocator<NPCSKILLINFO *> > *> > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::map<unsigned long,std::vector<NPCSKILLINFO *,std::allocator<NPCSKILLINFO *> > *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<NPCSKILLINFO *,std::allocator<NPCSKILLINFO *> > *> > > > > > m_map

  /* this+0x24 */ class std::map<unsigned long,NPC_CHAT_INFO,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,NPC_CHAT_INFO> > > m_chat

  public void CNPCAddSkillInfo(const class CNPCAddSkillInfo &)
  public void CNPCAddSkillInfo::CNPCAddSkillInfo()
  public class CNPCAddSkillInfo & operator=(const class CNPCAddSkillInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNPCFormula_MagicSupport {
  CActorFormula_CommonSupport, offset = 0x0

  public int CNPCFormula_MagicSupport::GetMagicAtkerSTDValue(class CCharacter *, int, int)
  public int CNPCFormula_MagicSupport::GetMagicTargetSTDValue(class CCharacter *, int, unsigned short, int)
  public int GetMagicAtkerSKValue(class CCharacter *, int, unsigned short)
  public int CNPCFormula_MagicSupport::GetMagicTargetSKValue(class CCharacter *, const int, const unsigned short)
  public void CNPCFormula_MagicSupport::ModifyMagicFinalATKPowerByTargetMDEF(class CCharacter *, int &)
  public void CNPCFormula_MagicSupport::ModifyMagicFinalATKPower_AfterApplyTargetMDEF(class CCharacter *, int &, unsigned short)
  public void CNPCFormula_MagicSupport(class CNPC *)
  /* this+0x4 */ class CNPC * m_npc
}

class CNPCFormula_PhysicsSupport {
  CActorFormula_CommonSupport, offset = 0x0

  public bool CNPCFormula_PhysicsSupport::IsPhysicsATKHit(class CCharacter *, const int, const int, const int, const int)
  public int CNPCFormula_PhysicsSupport::GetPhysicsFinalATKPower(class CCharacter *, int, int, unsigned short, int)
  public void CNPCFormula_PhysicsSupport::ModifyPhysicsFinalATKPowerByTargetDEF(class CCharacter *, int &)
  public void CNPCFormula_PhysicsSupport::ModifyPhysicsFinalATKPower_AfterApplyTargetDEF(class CCharacter *, int &, unsigned short)
  public int CNPCFormula_PhysicsSupport::GetPhysicsStatusPower()
  public int CNPCFormula_PhysicsSupport::GetPhysicsItemPower(class CCharacter *, unsigned short, int &)
  public int CNPCFormula_PhysicsSupport::GetPhysicsATKProperty(class CCharacter *, int)
  public bool CNPCFormula_PhysicsSupport::IsEnableRevengeEnemy(class CCharacter *, bool &)
  public bool CNPCFormula_PhysicsSupport::ProcessRevengeEnemyNoDamage(class CCharacter *)
  public bool CNPCFormula_PhysicsSupport::ProcessActionAttackCounter(class CCharacter *)
  public void CNPCFormula_PhysicsSupport::PreWork_BeforeActionAttack(class CCharacter *)
  public int CNPCFormula_PhysicsSupport::GetActionAttackDamage(class CCharacter *, int &, int)
  public void CNPCFormula_PhysicsSupport(class CNPC *)
  private int CNPCFormula_PhysicsSupport::GetPhysicsAtkerSTDValue(class CCharacter *, int, int)
  private int CNPCFormula_PhysicsSupport::GetPhysicsTargetSTDValue(class CCharacter *, int, int, unsigned short)
  private int CNPCFormula_PhysicsSupport::GetPhysicsAtkerSKValue(class CCharacter *, int, unsigned short, int)
  private int CNPCFormula_PhysicsSupport::GetPhysicsTargetSKValue(class CCharacter *, const unsigned short, const int, const int)
  /* this+0x4 */ class CNPC * m_npc
}

class CNPCFormula_SkillAttackSupport {
  CActorFormula_CommonSupport, offset = 0x0

  public bool CNPCFormula_SkillAttackSupport::IsEnableSkillAttack(class CCharacter *, struct SKILLATTACK_MSG *)
  public int CNPCFormula_SkillAttackSupport::GetSkillAttackDamage(class CCharacter *, int, int, int &, int, int, struct SKILLATTACK_MSG *)
  public bool CNPCFormula_SkillAttackSupport::Check_KAITE(class CCharacter *, int, struct PACKET_ZC_NOTIFY_SKILL2 *, class CSkillTypeInfo *, int)
  public void CNPCFormula_SkillAttackSupport(class CNPC *)
  /* this+0x4 */ class CNPC * m_npc
}

class CNPCSkill {
    *
  public void CNPCSkill::ForceUseSkill(unsigned short, int, int, int)
  public void CNPCSkill::ForceUseSkill(unsigned long, unsigned short, int, int, int)
  public void CNPCSkill(const class CNPCSkill &)
  public void CNPCSkill::CNPCSkill()
  public void CNPCSkill::~CNPCSkill()
  public void CNPCSkill::Init()
  public void SetMyOwner(class CNPC *)
  public int CNPCSkill::OnProcess()
  public void CNPCSkill::OnUseSkill(unsigned short, int, int, int, int)
  public void CNPCSkill::OnUseGroundSkill(int, struct MSG_TYPE1_TWODWORD *, int, int)
  public void CNPCSkill::StartUseSkill()
  public void CNPCSkill::EndUseSkill(unsigned short)
  public void CNPCSkill::CancelSkill(int)
  public int CNPCSkill::IsSkillUsable(unsigned long)
  public void SetNPCJob(int)
  public int CNPCSkill::GetSkillLevel(unsigned long)
  public void CNPCSkill::SetPostDelayTimer(unsigned long)
  public void ResetPostDelayTimer(unsigned long)
  public void SetFSMReleaseTime(unsigned long)
  public void CNPCSkill::ProcessFSMReleaseTime()
  public void SetInfoByCreatorPC(unsigned long, unsigned long)
  public unsigned long GetMyCreatorPCAID()
  public void SetEmoticon(short)
  public void SetAITypeAfter(short)
  public bool IsUsingPlayingSkill()
  public void CNPCSkill::SetPosPlayingSkill(const short, const short)
  public void CNPCSkill::AddPlayingSkill(const unsigned long, const int, int, int)
  public void CNPCSkill::DeletePlayingSkill(const int)
  public void CNPCSkill::DestroyPlayingSkill()
  private void CNPCSkill::ResetAttackedState()
  private int CNPCSkill::IsCondition(class CNPC *, int, int)
  private int CNPCSkill::IsComradeCondition(class CNPC *, int, int)
  private void CNPCSkill::ProcessPostDelayTimer()
  private int CNPCSkill::GetPostDelayTime(unsigned long)
  private struct NPCSKILLINFO * CNPCSkill::GetNPCSkillInfo(unsigned long)
  private int CNPCSkill::IsAvailableSkill(const unsigned long, const int)
  private void CNPCSkill::ProcessSkillPreDelayTime(struct NPCSKILLINFO *)
  /* this+0x4 */ int m_isSkillUsing
  /* this+0x8 */ int m_isNoDispel
  /* this+0xc */ int m_npcJob
  /* this+0x10 */ unsigned long m_lastSkillTime
  /* this+0x14 */ unsigned long m_fsmReleaseTime
  /* this+0x18 */ int m_reactRangeAttack
  /* this+0x1c */ unsigned long m_rangeAttackEnemyID
  /* this+0x20 */ int m_reactRudeAttack
  /* this+0x24 */ unsigned long m_rudeAttackEnemyID
  /* this+0x28 */ int m_isRebirth
  /* this+0x2c */ unsigned long m_myFriendID
  /* this+0x30 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_postDelayTimer

  /* this+0x40 */ class CNPC * m_npc
  /* this+0x44 */ int m_sanctuaryCnt
  /* this+0x48 */ int m_stormGustCnt
  /* this+0x4c */ unsigned long m_lifeTime
  /* this+0x50 */ unsigned long m_creatorPCAID
  /* this+0x54 */ unsigned short m_spellCastingSKID
  /* this+0x58 */ unsigned long m_trickSkillDelayTime
  /* this+0x5c */ int m_emoticon
  /* this+0x60 */ int m_aiType
  /* this+0x64 */ int m_chatNo
    /* this+0x68 */ class std::vector<CNPCSkill::PlayingSkillInfo,std::allocator<CNPCSkill::PlayingSkillInfo> > m_PlayingSkillList

  public class CNPCSkill & operator=(const class CNPCSkill &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CNPCSkill::PlayingSkillInfo {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ int SKID
  /* this+0x8 */ int DeltaPosX
  /* this+0xc */ int DeltaPosY
  public void PlayingSkillInfo()
  public void PlayingSkillInfo(const unsigned long, const int, const int, const int)
  public bool operator==(const struct CNPCSkill::PlayingSkillInfo &)
}

class CNPCStateUpdater {
    *
  public void CNPCStateUpdater(const class CNPCStateUpdater &)
  public void CNPCStateUpdater::CNPCStateUpdater()
  public void CNPCStateUpdater::~CNPCStateUpdater()
  public void CNPCStateUpdater::Init()
  public void CNPCStateUpdater::Reset(unsigned long)
  public void CNPCStateUpdater::SetMyOwner(class CNPC *)
  public int CNPCStateUpdater::ProcessInput(class CCharacter *, unsigned long, int)
  public int CNPCStateUpdater::DispatchInput(class CCharacter *, unsigned long &, int)
  public void CNPCStateUpdater::DispatchOutput(class CCharacter *, unsigned long, unsigned long, unsigned long)
  public int CNPCStateUpdater::DirectPathCheck(class CCharacter *, class CNPC *)
  public void CNPCStateUpdater::CheckInput()
  public void CNPCStateUpdater::OnStartWait(unsigned long)
  public void CNPCStateUpdater::OnAttacked(int)
  public class CFSM * CNPCStateUpdater::GetFSM()
  public void CNPCStateUpdater::SetFSM(class CFSM *)
  public void CNPCStateUpdater::SetItemLostFlag(int)
  public int CNPCStateUpdater::IsItemLost()
  public unsigned short CNPCStateUpdater::GetLostItem(int, class CCharacter * const)
  public void CNPCStateUpdater::NotifyPickupablePCToItem(class CItem *, struct SORTED_PCLIST *)
  public void CNPCStateUpdater::Disappear(int, unsigned long)
  public void CNPCStateUpdater::OnCallTouchEvent(class CPC *, unsigned long)
  public void CNPCStateUpdater::OnCallClickEvent(class CPC *, unsigned long)
  public void CNPCStateUpdater::OnCallArenaStart(unsigned long)
  public void CNPCStateUpdater::OnTradeStart(class CPC *, unsigned long)
  public void CNPCStateUpdater::OnCallTouchNpcEvent(class CNPC *, unsigned long)
  public void CNPCStateUpdater::OnCallTouchEvent2(class CPC *, unsigned long)
  public void CNPCStateUpdater::OnCashTradeStart(class CPC *, unsigned long, unsigned long)
  public void OnMoveStart(unsigned long)
  public void OnStopAndCallClickEvent(class CPC *, unsigned long)
  /* this+0x4 */ struct NPC_STATEINFO m_npcStateInfo

  public void CNPCStateUpdater::OnClickMobTombEvent(class CPC *, unsigned long)
  private void CNPCStateUpdater::GiveQuestDropItem(class CPC *)
  private void CNPCStateUpdater::OnStartRandomMove(unsigned long)
  private void CNPCStateUpdater::OnExpelEnemy(class CCharacter *, unsigned long, unsigned long)
  private int CNPCStateUpdater::OnRevengeEnemy(class CCharacter *)
  private int CNPCStateUpdater::RevengeEnemy(class CCharacter *, unsigned long)
  private unsigned long CNPCStateUpdater::IsInputOccured(unsigned long, int &)
  private void CNPCStateUpdater::OnSearchEnemy(unsigned long)
  private void CNPCStateUpdater::OnRevival(unsigned long)
  private void CNPCStateUpdater::OnMoveToMyOwner(unsigned long)
  private void CNPCStateUpdater::DropItem(unsigned long)
  private class CItem * CNPCStateUpdater::CreateItemOnPosition(unsigned short, int)
  private void CNPCStateUpdater::OnMoveToItem(class CPC *, unsigned long)
  private void CNPCStateUpdater::OnPickUpItem(class CPC *, unsigned long)
  private void CNPCStateUpdater::OnStopMove(class CPC *, unsigned long)
  private void CNPCStateUpdater::OnChangeEnemy(class CPC *, unsigned long)
  private void CNPCStateUpdater::OnRevengeRandom(unsigned long)
  private bool CNPCStateUpdater::DisappearBattleFieldMonster(unsigned long)
  private int CNPCStateUpdater::IsFSMDependent()
  /* this+0x18 */ int m_isItemLost
  /* this+0x1c */ int m_isZenyLost
  /* this+0x20 */ class CNPC * m_npc
  /* this+0x24 */ class CFSM * m_fsm
  public class CNPCStateUpdater & operator=(const class CNPCStateUpdater &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNPCUpdater {
    *
  public void CNPCUpdater(const class CNPCUpdater &)
  public void CNPCUpdater::CNPCUpdater()
  public void CNPCUpdater::~CNPCUpdater()
  public void CNPCUpdater::SetMyOwner(class CNPC *)
  public int CNPCUpdater::SetAccountID(int)
  public void SetAccountName(const char *)
  public void CNPCUpdater::SetValidate(int)
  public int CNPCUpdater::IsMyArea(class CCharacter *, int, int)
  public int CNPCUpdater::IsMyArea(class CCharacter *, int)
  public int IsSomeOne(int, int, int)
  public void Pause(unsigned long)
  public int CNPCUpdater::AddSectionMgr()
  public void CNPCUpdater::RemoveSectionMgr()
  public class CNPC * CNPCUpdater::GetNeighborFriendNpc(int, unsigned long)
  public class CPC * CNPCUpdater::GetNeighborPc(int)
  public class CPC * CNPCUpdater::GetTouchedPC(const int, const int)
  public class CPC * CNPCUpdater::GetNeighborPcExceptG(int)
  public class CPC * CNPCUpdater::GetNeighborLowerLevelPc(int, int)
  public class CCharacter * CNPCUpdater::GetNeighborEnemy(int)
  public class CCharacter * CNPCUpdater::GetMyOwnerEnemy(int)
  public void AddEnemy(unsigned long, unsigned long, unsigned long, int, int)
  public void CNPCUpdater::AddEnemy(class CCharacter *, int, int)
  public class CCharacter * CNPCUpdater::GetEnemy_AttackMyOwer(int)
  public int CNPCUpdater::InitPosition(int, int, unsigned char)
  public short GetEnemy(unsigned long)
  public void CNPCUpdater::GiveExpToPC()
  public int IsPurchaseItemExist(unsigned short)
  public void CNPCUpdater::NotifyUpdateInfo(class CPC *)
  public void CNPCUpdater::StopMoveSlowly()
  public void CNPCUpdater::StopMove()
  public void CNPCUpdater::StopMove(short, short, int, const bool)
  public unsigned long CNPCUpdater::GetAccountID()
  public void CNPCUpdater::NotifyStopMove(unsigned long)
  public int CNPCUpdater::IsValid()
  public void CNPCUpdater::Stop()
  public struct MVPINFO * CNPCUpdater::GetMVPInfo()
  public unsigned long CNPCUpdater::GetMVP()
  public void CNPCUpdater::GetPickableSortList(struct SORTED_PCLIST *)
  public class CPC * CNPCUpdater::GetNearestPcMoreThanEnemy(int, int)
  public void CNPCUpdater::CheckMove()
  public void CNPCUpdater::CheckState()
  public unsigned long CNPCUpdater::GetNeighborPcNumber(int)
  public class CNPC * CNPCUpdater::GetNeighborNPC(int, int)
  public void CNPCUpdater::NotifyOptionalInfo(class CPC *, int)
  /* this+0x4 */ class CNPC * m_npc
  private void CNPCUpdater::UpdateCharacter(class std::vector<CCharacter *,std::allocator<CCharacter *> > *)
  private void NotifyDisconnect()
  private void CNPCUpdater::ResetAttackPCList()
  /* this+0x8 */ class std::list<ATTACK_PC,std::allocator<ATTACK_PC> > m_attackPC

  public class CNPCUpdater & operator=(const class CNPCUpdater &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNeighborCache {
    *
  public void CNeighborCache(class CNeighborCache &)
  public void CNeighborCache::CNeighborCache()
  public void CNeighborCache::~CNeighborCache()
  public void CNeighborCache::Reset()
  public void Delete(unsigned long)
  public class std::vector<ClientCache *,std::allocator<ClientCache *> > & CNeighborCache::GetListPoint()
  public int CNeighborCache::GetUpdateInfo(class CCharacter *, class CPC *)
  public void CNeighborCache::OnMultiCast(class CCharacter *, int, char *, int)
  public class CPC * CNeighborCache::FindPC(unsigned long)
  public void CNeighborCache::Init()
  public void CNeighborCache::InitThePCCacheInfo(unsigned long)
  public int CNeighborCache::GetNum()
  private struct ClientCache * CNeighborCache::Search(unsigned long, unsigned long)
  private struct ClientCache * CNeighborCache::Insert(class CPC *)
  private int CNeighborCache::CheckUpdateInfo(struct ClientCache *, class CCharacter *, class CPC *)
  /* this+0x4 */ class std::vector<ClientCache *,std::allocator<ClientCache *> > m_List

  /* this+0x14 */ class CMemoryMgr<ClientCache> m_cacheMPool

  public class CNeighborCache & operator=(class CNeighborCache &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNewLogRecoder {
    *
  public void CNewLogRecoder::Add(void *)
  public void CNewLogRecoder::BeginSaveToDatabase()
  public void EndSaveToDatabase()
  public unsigned int CNewLogRecoder::ThreadFunction()
  public void CNewLogRecoder(const class CNewLogRecoder &)
  public void CNewLogRecoder()
  public void CNewLogRecoder::~CNewLogRecoder()
  /* this+0x4 */ bool m_bReqExit
  /* this+0x8 */ class std::list<void *,std::allocator<void *> > m_listDatabaseLog

  public class CNewLogRecoder & operator=(const class CNewLogRecoder &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNewPoisonItemInfo {
    *
              public const class std::list<CNewPoisonItemInfo::NEWPOISON_MATERIAL,std::allocator<CNewPoisonItemInfo::NEWPOISON_MATERIAL> > * CNewPoisonItemInfo::GetNewPoisonMaterial(const int)
  public const class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > & GetPoisoningWeaponList()
  public int CNewPoisonItemInfo::GetMakableNewPoisonByLevel(int)
  public int CNewPoisonItemInfo::GetMakeSuccessPercentByLevel(int)
  public int CNewPoisonItemInfo::GetMakableNewPoisonMinCount(int)
  public int CNewPoisonItemInfo::GetMakableNewPoisonMaxCount(int)
  public int CNewPoisonItemInfo::GetMagicMushroomRandomSKID()
  public bool CNewPoisonItemInfo::IsApplyPosion(class CActor *)
  public int CNewPoisonItemInfo::GetDealyTime(const int)
  public int CNewPoisonItemInfo::GetEFSTid(const int)
  public static bool CNewPoisonItemInfo::CreateInstance()
  public static void CNewPoisonItemInfo::DestroyInstance()
  public bool isOK()
  public void CNewPoisonItemInfo(const class CNewPoisonItemInfo &)
  private void CNewPoisonItemInfo::CNewPoisonItemInfo()
  private void CNewPoisonItemInfo::~CNewPoisonItemInfo()
  private bool CNewPoisonItemInfo::Init()
    /* this+0x4 */ class std::vector<short,std::allocator<short> > m_newpoison_MakeSuccessPercent

  /* this+0x14 */ class std::vector<short,std::allocator<short> > m_newpoison_MakeMinCount

  /* this+0x24 */ class std::vector<short,std::allocator<short> > m_newpoison_MakeMaxCount

  /* this+0x34 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_newpoison_MakableItem

  /* this+0x44 */ class std::vector<unsigned short,std::allocator<unsigned short> > m_newpoison_MagicMushroomRandomSkill

  /* this+0x54 */ class std::map<int,std::list<CNewPoisonItemInfo::NEWPOISON_MATERIAL,std::allocator<CNewPoisonItemInfo::NEWPOISON_MATERIAL> >,std::less<int>,std::allocator<std::pair<int const ,std::list<CNewPoisonItemInfo::NEWPOISON_MATERIAL,std::allocator<CNewPoisonItemInfo::NEWPOISON_MATERIAL> > > > > m_newpoisonMaterials

  /* this+0x64 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_poisoningWeaponListR2

  /* this+0x74 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_buffDelayTimeListR2

  /* [0x0003:0x0004b274] */ static  class CNewPoisonItemInfo * m_cpSelf
  /* this+0x84 */ bool m_bOK
  private bool CNewPoisonItemInfo::Load_MakeSuccessPercent(struct lua_State *)
  private bool CNewPoisonItemInfo::Load_MakeMinCount(struct lua_State *)
  private bool CNewPoisonItemInfo::Load_MakeMaxCount(struct lua_State *)
  private bool CNewPoisonItemInfo::Load_MakableItem(struct lua_State *)
  private bool CNewPoisonItemInfo::Load_Materials(struct lua_State *)
  private bool CNewPoisonItemInfo::Load_PoisoningWeaponList(struct lua_State *)
  private bool CNewPoisonItemInfo::Load_BuffDelayTimeList(struct lua_State *)
  private bool CNewPoisonItemInfo::Load_MagicMushroomRandomSkillList(struct lua_State *)
  private bool CNewPoisonItemInfo::Load_Value(struct lua_State *, const char *, class std::vector<short,std::allocator<short> > *)
  public class CNewPoisonItemInfo & operator=(const class CNewPoisonItemInfo &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct CNewPoisonItemInfo::NEWPOISON_MATERIAL {
  /* this+0x0 */ int itemID
  /* this+0x4 */ short count
}

class CNode {
    *
    public void CNode(const class CNode &)
  public void CNode::CNode()
  public void CNode::~CNode()
  /* this+0x4 */ class std::map<int,unsigned int,std::less<int>,std::allocator<std::pair<int const ,unsigned int> > > m_map

  /* this+0x14 */ unsigned long m_mobGID
  public void CNode::Init(unsigned long)
  public void CNode::Clear()
  public void CNode::DeleteNode(const unsigned int, const int)
  public bool CNode::Set(const unsigned long, const int)
  public int GetIdentList(class std::list<int,std::allocator<int> > &)
  public int GetQIDList(class std::list<unsigned int,std::allocator<unsigned int> > &)
  public int CNode::GetALLList(class std::map<int,unsigned int,std::less<int>,std::allocator<std::pair<int const ,unsigned int> > > &)
  public int GetCount()
  public class CNode & operator=(const class CNode &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNpc {
  public void CNpc(const class CNpc &)
  public void CNpc::CNpc()
  public void CNpc::~CNpc()
  public void CNpc::Clear()
  public int GetId()
  public int GetType()
  public char * GetName()
  public void CNpc::SetInfo(int, const struct NpcSvrNpcInfo *)
  public int CNpc::GetLocalVarIdx(char *)
  public bool CNpc::SetLocalVarName(int, const char *)
  public int GetLocalVar(int)
  public char * GetLocalVarName(int)
  public void IncLocalVar(int, int)
  public void DecLocalVar(int, int)
  public void SetLocalVar(int, int)
  public void CNpc::InitTimer()
  public void CNpc::OnTimer()
  public void CNpc::PauseTimer()
  public void AddTimer(unsigned long)
  public void SubTimer(unsigned long)
  public int CNpc::SetActionScript(int, int, class std::deque<TokenData,std::allocator<TokenData> > &)
  public int CNpc::GetActionScriptIdx(int, int, char *)
  public int CNpc::GetActionScriptPos(int)
  public bool GetOnInit()
  public void SetOnInit(bool)
  public int IsNpcType()
  public char * GetMapName()
  /* this+0x0 */ int m_id
  /* this+0x4 */ int m_type
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_name

  /* this+0x24 */ int m_npcType
  /* this+0x28 */ char[0x10] m_mapName
  /* this+0x38 */ int[0x10] m_param
  /* this+0x78 */ char[0x64][0x10] m_ParamName
  /* this+0x6b8 */ int[0x32] m_actionScriptPos
  /* this+0x780 */ struct TokenData[0x32] m_actionScriptParam
  /* this+0xe88 */ int[0x32] m_actionScriptAction
  /* this+0xf50 */ int[0x32] m_actionScriptOnTimerActIdx
  /* this+0x1018 */ int m_timerEventNo
  /* this+0x101c */ unsigned long m_baseTime
  /* this+0x1020 */ int m_onTimerActIdx
  /* this+0x1024 */ int m_onTimerActNo
  /* this+0x1028 */ int m_actCount
  /* this+0x102c */ bool m_OnInit
  public class CNpc & operator=(const class CNpc &)
  public void * __vecDelDtor(unsigned int)
}

class CNpcElemental {
  CNpcMob, offset = 0x0

  public int CNpcElemental::GetModifiedValueByEnemySize(int)
  public void CNpcElemental::NotifyParameter(unsigned short, int)
  public void CNpcElemental::OnDead(unsigned long)
  public class CCharacter * CNpcElemental::GetMyOwner()
  public int CNpcElemental::UpdateParameterValue(unsigned short, int)
  public int CNpcElemental::IsTarget(class CCharacter *, unsigned long)
  public void CNpcElemental::Reset()
  public int CNpcElemental::GetBaseFlee()
  public int CNpcElemental::GetBaseHit()
  public int CNpcElemental::GetMaxSP()
  public int CNpcElemental::GetSpeed()
  public int SkillAttackExt(struct SKILLATTACK_MSG *, int, int, const bool)
  public class CPC * CNpcElemental::GetOwner()
  public void CNpcElemental::ChangeControlMode(const int)
  public int CNpcElemental::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public int GetSP()
  public void CNpcElemental::ReduceSPByUseSkill(int)
  public enum ElementalStuff::enumKind GetKind()
  public enum ElementalStuff::enumScale GetScale()
  public void CNpcElemental::PacketSend_ZC_EL_INIT()
  public void CNpcElemental::InsertEnemyInfo(struct ENEMY_INFO *)
  public void CNpcElemental::UpdateEnemyInfo()
  public void CNpcElemental::SetSummaryData(const enum ElementalStuff::enumKind, const enum ElementalStuff::enumScale, const class ElementalStuff::ESummaryData &)
  public void CNpcElemental::SetEfstData(const class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > &)
  public void CNpcElemental::GetSummaryData(class ElementalStuff::ESummaryData &)
  public void CNpcElemental::GetEffectData(class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > &)
  public void CNpcElemental(class CNpcElemental &)
  public void CNpcElemental::CNpcElemental()
  public void CNpcElemental::~CNpcElemental()
  private int CNpcElemental::GetMagicAttPower()
  private void CNpcElemental::InitCore()
  private bool CNpcElemental::IsEnableThirdJobSkillOperate(const int, class CCharacter *, class CSkillTypeInfo *)
  private void CNpcElemental::ChangeHP(const int)
  private void CNpcElemental::ChangeSP(const int)
  private void CNpcElemental::BroadcastHP()
  private void CNpcElemental::OnThirdJobSkillOperateToCharacter(unsigned short, int, struct MSG_TYPE_SKILLDATA *, class MSGpar::CVar)
  private void CNpcElemental::OnThirdJobSkillAttackToCharacter(unsigned short, int, struct MSG_TYPE_SKILLDATA *, class MSGpar::CVar)
  private void CNpcElemental::OnTouchedSkillObject(int, int, int)
  private void CNpcElemental::OnADD_EXP(class CCharacter *, const int)
  private void CNpcElemental::OnSHARE_EXP(class CCharacter *, const int)
  private int CNpcElemental::OnGET_GRID_IFEXPSHARE(class CCharacter *, int, int, int, class MSGpar::CVar)
  private void CNpcElemental::OnADD_JOBEXP(class CCharacter *, const int, const int, const int)
  private void CNpcElemental::OnSHARE_JOBEXP(class CCharacter *, const int)
  private void CNpcElemental::EL_FIRE_MANTLE_OnTouched(class CCharacter *, const int, const unsigned long)
  private void CNpcElemental::EL_WATER_BARRIER_OnTouched(class CCharacter *, const int, const unsigned long)
  private void CNpcElemental::EL_ZEPHYR__OnTouched(class CCharacter *, const int, const unsigned long)
  private void CNpcElemental::EL_POWER_OF_GAIA_OnTouched(class CCharacter *, const int, const unsigned long)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_CIRCLE_OF_FIRE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_FIRE_CLOAK(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_FIRE_MANTLE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_WATER_SCREEN(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_WATER_DROP(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_WATER_BARRIER(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_WIND_STEP(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_WIND_CURTAIN(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_ZEPHYR(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_SOLID_SKIN(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_STONE_SHIELD(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_POWER_OF_GAIA(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_PYROTECHNIC(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_HEATER(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_TROPIC(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_AQUAPLAY(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_COOLER(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_CHILLY_AIR(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_GUST(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_BLAST(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_WILD_STORM(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_PETROLOGY(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_CURSED_SOIL(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_UPHEAVAL(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_FIRE_ARROW(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_FIRE_BOMB(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_FIRE_WAVE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_ICE_NEEDLE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_WATER_SCREW(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_TIDAL_WEAPON(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_WIND_SLASH(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_HURRICANE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_TYPOON_MIS(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_STONE_HAMMER(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_ROCK_CRUSHER(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CNpcElemental::EL_STONE_RAIN(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  /* this+0x854 */ class std::vector<ENEMY_INFO,std::allocator<ENEMY_INFO> > m_enemyInfo

  /* this+0x864 */ enum ElementalStuff::enumKind m_Kind
  /* this+0x868 */ enum ElementalStuff::enumScale m_Scale
  /* this+0x86c */ int m_flee
  /* this+0x870 */ int m_hit
  /* this+0x874 */ int m_matk
  public class CNpcElemental & operator=(class CNpcElemental &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CNpcElemental::EL_FIRE_MANTLE::__l6::<unnamed-type-Tbl> {
  /* this+0x0 */ int dx
  /* this+0x4 */ int dy
}

class CNpcEvent {
  CScriptEventHandler, offset = 0x0

  public void CNpcEvent(const class CNpcEvent &)
  public void CNpcEvent::CNpcEvent()
  public void CNpcEvent::~CNpcEvent()
  public void CNpcEvent::Clear()
  public void End()
  public bool IsEmpty()
  public char * CNpcEvent::GetDungeonIdent()
  public bool CNpcEvent::Run_Dungeon(class CNpcMgr *, class CBinBuf *, const char *, unsigned int, int, int, int)
  public bool CNpcEvent::Run(class CNpcMgr *, class CBinBuf *, int, int, int)
  public unsigned int CNpcEvent::Proc(bool)
  public void CNpcEvent::Answer(int, int)
  public bool CNpcEvent::OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  public void CNpcEvent::OnError(const char *)
  public void CNpcEvent::Stop()
  public void CNpcEvent::StopDungern()
  public class CNpc * GetNpc()
  public void SetReserveTime(unsigned long)
  public unsigned long GetReserveTime()
  public bool IsGlobalEvent()
  public bool GetOnInit()
  public void SetOnInit(bool)
  /* [0x0003:0x0004b5d0] */ static  int m_serverID
  protected void CNpcEvent::EventLog(char *, <NoType>)
  private int CNpcEvent::GetCharacterVar(int, int)
  private bool CNpcEvent::GlobalFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  private bool CNpcEvent::DefaultNpcFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  private bool CNpcEvent::FuncChangePallete(int, int)
  private bool CNpcEvent::FuncCallMonster(char *, int, char *, int, int, int, int, int, bool)
  private bool CNpcEvent::FuncAddSkill(int, int, int, int)
  private bool CNpcEvent::FuncOtherNpcCmd(const char *, char *)
  private bool CNpcEvent::FuncStrLocalVar(int, char *)
  private bool CNpcEvent::FuncSetArenaEventSize(int)
  private bool CNpcEvent::FuncGetArenaEventSize(struct TokenData &)
  private bool CNpcEvent::FuncMakeWaitingRoom(char *, int)
  private bool CNpcEvent::FuncEnableArena()
  private bool CNpcEvent::FuncDisableArena()
  private bool CNpcEvent::FuncWarpWaitingPcToArena(char *, int, int)
  private bool CNpcEvent::FuncResetMyMob()
  private bool CNpcEvent::FuncWarpAllPcInTheMap(char *, int, int)
  private bool CNpcEvent::FuncBroadcastInTheMap(char *)
  private bool CNpcEvent::FuncAddNpcTimer(char *, int)
  private bool CNpcEvent::FuncSubNpcTimer(char *, int)
  private bool CNpcEvent::FuncEnableNpc(char *)
  private bool CNpcEvent::FuncDisableNpc(char *)
  private bool CNpcEvent::FuncCallNpc(char *, int, char *, int, int, int)
  private bool CNpcEvent::FuncSetFeeZeny(int)
  private bool CNpcEvent::FuncSetFeeItem(int, int)
  private bool CNpcEvent::FuncSetReqLevel(int, int)
  private bool CNpcEvent::FuncSetTexJob(int)
  private bool CNpcEvent::FuncDisableItemMove()
  private bool CNpcEvent::FuncEnableItemMove()
  private bool CNpcEvent::FuncSuccessRefItem(int)
  private bool CNpcEvent::FuncFailedRefItem(int)
  private bool CNpcEvent::FuncSetEffectStatus(int)
  private bool CNpcEvent::FuncResetStat()
  private bool CNpcEvent::FuncTrace(char *)
  private bool CNpcEvent::FuncVar(int, struct TokenData &)
  private bool CNpcEvent::FuncLV(char *, struct TokenData &)
  private bool CNpcEvent::FuncNpcV(char *, int, struct TokenData &)
  private bool CNpcEvent::FuncIncLocalVar(char *, int)
  private bool CNpcEvent::FuncDecLocalVar(char *, int)
  private bool CNpcEvent::FuncSetLocalVar(char *, int)
  private bool CNpcEvent::FuncGetEquipIsIdentify(int, struct TokenData &)
  private bool CNpcEvent::FuncGetEquipRefineryCnt(int, struct TokenData &)
  private bool CNpcEvent::FuncGetEquipRefineryCost(int, struct TokenData &)
  private bool CNpcEvent::FuncGetEquipWeaponLv(int, struct TokenData &)
  private bool CNpcEvent::FuncGetEquipIsEnableRef(int, struct TokenData &)
  private bool FuncLastNpcName(char *)
  private bool CNpcEvent::FuncInitTimer()
  private bool CNpcEvent::FuncLabel(int, class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool FuncRegSay(char *)
  private bool FuncRegMapMove(const char *, int, int)
  private bool CNpcEvent::FuncRegSellItem(int)
  private bool CNpcEvent::FuncMob(int, struct NpcSvrNpcInfo *)
  private bool CNpcEvent::FuncCompass(int, int, int, int, const char *)
  private bool CNpcEvent::FuncNpc(struct NpcSvrNpcInfo *, bool)
  private unsigned long CNpcEvent::FuncNpc2(struct NpcSvrNpcInfo *, bool)
  private bool CNpcEvent::FuncInput(struct TokenData &)
  private bool CNpcEvent::FuncDlgWrite(int, int)
  private bool CNpcEvent::FuncNude()
  private bool CNpcEvent::FuncCart(int)
  private bool CNpcEvent::FuncStore()
  private bool CNpcEvent::FuncMenu(const char *, bool)
  private bool CNpcEvent::FuncJobChange(int)
  private bool CNpcEvent::FuncGetMoney(int)
  private bool CNpcEvent::FuncDropMoney(int, struct TokenData &)
  private bool CNpcEvent::FuncSetItem(int, int)
  private bool CNpcEvent::FuncGetItem(int, int)
  private bool CNpcEvent::FuncGetItem2(const int, const int, const int, const int)
  private bool CNpcEvent::FuncDropItem(int, int)
  private bool CNpcEvent::FuncExchangeItem(int, int, int, int)
  private bool CNpcEvent::FuncInc(int, int)
  private bool CNpcEvent::FuncDec(int, int)
  private bool CNpcEvent::FuncHeal(int, int)
  private bool FuncRand(int, int, struct TokenData &)
  private bool CNpcEvent::FuncLot(int, int, struct TokenData &)
  private bool CNpcEvent::FuncGetPcCount(const char *, struct TokenData &)
  private bool CNpcEvent::FuncError(struct TokenData &)
  private bool CNpcEvent::FuncCheckPoint(const char *, int, int)
  private bool CNpcEvent::FuncShowDigit(int)
  private bool CNpcEvent::FuncEnableSkill(int, int)
  private bool CNpcEvent::FuncDisableSkill(int)
  private bool CNpcEvent::FuncSetParameter(int, int)
  private bool CNpcEvent::FuncEmotion(char *, int)
  private bool CNpcEvent::FuncChangeSpr(char *, int)
  private bool CNpcEvent::FuncGetEquipCount(int, struct TokenData &)
  private bool CNpcEvent::FuncAgitGet(char *, int, struct TokenData &)
  private bool CNpcEvent::FuncAgitSet(int, int)
  private bool CNpcEvent::FuncAgitFunc(int, int, int)
  private bool CNpcEvent::FuncAgitNpcGet(int, int, struct TokenData &)
  private bool CNpcEvent::FuncAgitNpcSet(int, int, int)
  private bool CNpcEvent::FuncIsGuildMaster(int, struct TokenData &)
  private bool CNpcEvent::FuncAgitRegister(char *)
  private bool CNpcEvent::FuncBroadcast(bool, char *, int, int, int, int, char *)
  private bool CNpcEvent::FuncSound(char *, int, int, int)
  private bool CNpcEvent::FuncGetDamagedItemNum(struct TokenData &)
  private bool CNpcEvent::FuncRepairDamagedItem()
  private bool CNpcEvent::FuncSavePPL(int)
  private bool CNpcEvent::FuncAgitEmblemFlag(char *)
  private bool CNpcEvent::FuncChangeEXP(int)
  private bool CNpcEvent::FuncServerTime(struct TokenData &)
  private bool CNpcEvent::FuncGetLocalVarName(int, struct TokenData &)
  private bool CNpcEvent::FuncGetMarried(struct TokenData &)
  private bool CNpcEvent::FuncGetGuildName(struct TokenData &)
  private bool CNpcEvent::FuncCountDown(int)
  private bool CNpcEvent::FuncGetNeighborPcNumber(int, struct TokenData &)
  private bool CNpcEvent::FuncGetNamedItem(int, int)
  private bool CNpcEvent::FuncDropNamedItem(int, int)
  private bool CNpcEvent::FuncGetCountOfMyNameItem(int, struct TokenData &)
  private bool CNpcEvent::FuncChangeHairStyle(int)
  private bool CNpcEvent::FuncShowEffect(const char *, int)
  private bool CNpcEvent::FuncFalcon(int)
  private bool CNpcEvent::FuncPeco(int)
  private bool CNpcEvent::FuncCheckMaxZeny(int, struct TokenData &)
  private bool CNpcEvent::FuncCheckMaxCount(int, int, struct TokenData &)
  private bool CNpcEvent::FuncCheckMaxWeight(int, int, struct TokenData &)
  private bool CNpcEvent::FuncMGetEventItem(int, struct TokenData &)
  private bool CNpcEvent::FuncMGetEventZeny(int, struct TokenData &)
  private bool CNpcEvent::FuncMGetEventItemName(int, struct TokenData &)
  private bool CNpcEvent::FuncMGetEventZenyName(int, struct TokenData &)
  private bool CNpcEvent::FuncCreateGuild(char *)
  private bool CNpcEvent::FuncCreateGlobalVar(const char *, int)
  private bool CNpcEvent::FuncGetGlobalVar(const char *, struct TokenData &)
  private bool CNpcEvent::FuncSetGlobalVar(const char *, int)
  private bool CNpcEvent::FuncStrCmp(const char *, const char *, struct TokenData &)
  private bool CNpcEvent::FuncStrStr(const char *, const char *, struct TokenData &)
  private bool CNpcEvent::FuncUpgradeGuildLevel()
  private bool CNpcEvent::FuncCreateGlobalStr(const char *, char *)
  private bool CNpcEvent::FuncGetGlobalStr(const char *, struct TokenData &)
  private bool CNpcEvent::FuncSetGlobalStr(const char *, char *)
  private bool CNpcEvent::FuncDivorce()
  private bool CNpcEvent::FuncPEventGet(struct TokenData &)
  private bool CNpcEvent::FuncPEventAdd(int, struct TokenData &)
  private bool CNpcEvent::FuncPEventDel(int, struct TokenData &)
  private bool CNpcEvent::FuncPCDataMoveToPVP()
  private bool CNpcEvent::FuncMGetEventItemID(int, struct TokenData &)
  private bool CNpcEvent::FuncGetJobExp(int)
  private bool CNpcEvent::FuncDropJobExp(int)
  private bool CNpcEvent::FuncChkSkill(int, struct TokenData &)
  private bool CNpcEvent::FuncGetBodyState(int, int)
  private bool CNpcEvent::FuncGetHealthState(int, int)
  private bool CNpcEvent::FuncUseSkillToPC(int, int, int, int)
  private bool CNpcEvent::FuncIsBaby(struct TokenData &)
  private bool CNpcEvent::FuncGetLotto(int, struct TokenData &)
  private bool CNpcEvent::FuncSetLotto(int, int, int, int, int, int)
  private bool CNpcEvent::FuncInitLotto()
  private bool CNpcEvent::FuncOpenAuction()
  private bool CNpcEvent::FuncOpenMailing()
  private bool CNpcEvent::FuncStripPC(int)
  private bool CNpcEvent::FuncPushPC(int, int)
  private bool CNpcEvent::FuncItemDown(int, int, int, int)
  private bool CNpcEvent::FuncSetNumArray(int, int)
  private bool CNpcEvent::FuncGetNumArray(int, struct TokenData &)
  private bool CNpcEvent::FuncShuffleNumbers(int, int)
  private bool CNpcEvent::FuncPartyName(struct TokenData &)
  private bool CNpcEvent::FuncChangeSpeed(int, int)
  private bool CNpcEvent::FuncIsSiegeTime(struct TokenData &)
  private bool CNpcEvent::FuncConsumeSpecialItem(int)
  private bool CNpcEvent::FuncSetItemPartyInMap(int, int)
  private bool CNpcEvent::FuncIsHuntingListFull(struct TokenData &)
  private bool CNpcEvent::FuncFindHuntingList(int, struct TokenData &)
  private bool CNpcEvent::FuncAddHuntingList(int)
  private bool CNpcEvent::FuncDeleteHuntingList(int)
  private bool CNpcEvent::FuncDisplayHuntingList(struct TokenData &)
  private bool CNpcEvent::FuncDisplayHuntingList2(struct TokenData &)
  private bool CNpcEvent::FuncSetHuntingList(int, int)
  private bool CNpcEvent::FuncClearHuntingList()
  private bool CNpcEvent::FUNCUseHuntingList(struct TokenData &)
  private bool CNpcEvent::FUNCCheckHuntingList(int, struct TokenData &)
  private bool CNpcEvent::FuncIsTimeListFull(struct TokenData &)
  private bool CNpcEvent::FuncFindTimeList(int, struct TokenData &)
  private bool CNpcEvent::FuncAddTimeList(int)
  private bool CNpcEvent::FuncDeleteTimeList(int)
  private bool CNpcEvent::FuncDisplayTimeList(struct TokenData &)
  private bool CNpcEvent::FuncSetTimeList(int, int)
  private bool CNpcEvent::FuncClearTimeList()
  private bool CNpcEvent::FuncChangeCellType(int, int, int)
  private bool CNpcEvent::FuncGetCellType(int, int, struct TokenData &)
  private bool FuncIsPcCafe(struct TokenData &)
  private bool CNpcEvent::FuncGetPayType(struct TokenData &)
  private bool CNpcEvent::FuncGetConnectionArea(struct TokenData &)
  private bool CNpcEvent::FuncGetConnectionState(struct TokenData &)
  private bool FuncIsPremiumPcCafe(struct TokenData &)
  private bool CNpcEvent::FuncGetPetEgg(int)
  private bool CNpcEvent::FuncCashItem(char *)
  private bool FuncMovePos(int, int)
  private bool FuncMoveWait(int)
  private bool CNpcEvent::FuncRefinery(int, struct TokenData &)
  private bool CNpcEvent::FuncRelaodMobileEvent()
  private bool CNpcEvent::FuncSetTempTime(int)
  private bool CNpcEvent::FuncElapseTempTime(int, struct TokenData &)
  private bool CNpcEvent::FuncGetInventoryRemainCount(int, int, struct TokenData &)
  private bool CNpcEvent::FuncIsBeginQuest(int, struct TokenData &)
  private bool CNpcEvent::FuncSetQuest(int)
  private bool CNpcEvent::FuncChangQuest(int, int)
  private bool CNpcEvent::FuncEraseQuest(int)
  private bool CNpcEvent::FuncComplateQuest(int)
  private bool CNpcEvent::FuncCompleteQuest_Between(int, int)
  private bool CNpcEvent::FuncRecall_CompleteQuest(int)
  private bool CNpcEvent::FuncCheckQuest_Hunting(int, struct TokenData &)
  private bool CNpcEvent::FuncCheckQuest_PlayTime(int, struct TokenData &)
  private bool CNpcEvent::FuncPCDataMoveTo_Sakray()
  private bool CNpcEvent::FuncCallGuardian(char *, int, char *, int, int)
  private bool CNpcEvent::FuncGetLastSiegeMsg(char *, struct TokenData &)
  private bool CNpcEvent::FuncDialog(char *, int)
  private bool CNpcEvent::FuncDialog2(const char * const, const int, const int)
  private bool CNpcEvent::FuncWaitDialog(int)
  private bool CNpcEvent::FuncWaitDialog2(const int, const int)
  private bool CNpcEvent::FuncCloseDialog(int)
  private bool CNpcEvent::FuncDlgWriteStr(int)
  private bool CNpcEvent::FuncMapMove(const char *, int, int)
  private bool CNpcEvent::FuncMdungeon_Subscription(const char *, struct TokenData &)
  private bool CNpcEvent::FuncMdungeon_Enter(const char *, struct TokenData &)
  private bool CNpcEvent::FuncMdungeon_List(const char *, const char *, const char *)
  private bool CNpcEvent::FuncMdungeon_Destroy(const char *)
  private bool CNpcEvent::FuncMdungeon_OpenState(const int, struct TokenData &)
  private bool CNpcEvent::FuncMDungeon_NpcName(const char *, struct TokenData &)
  private bool CNpcEvent::FuncMDungeon_MapName(const char *, struct TokenData &)
  private bool CNpcEvent::FuncMDungeon_Npc(struct NpcSvrNpcInfo *, bool)
  private bool CNpcEvent::FuncMDungeon_PutMob(const char *, int, int, int, int, int, int, int, int, int, char *)
  private bool CNpcEvent::FuncCampCode(char *, int, int)
  private bool CNpcEvent::FuncGetCampCode(struct TokenData &)
  private bool CNpcEvent::FuncCallCampMob(int, int, int, char *, char *)
  private bool CNpcEvent::FuncSetRP2(int, int)
  private bool CNpcEvent::FuncMassSetRP2(char *, int, int)
  private bool CNpcEvent::FuncPlayerToRP(int)
  private bool CNpcEvent::FuncUpdateCampPoint(char *, int)
  private bool CNpcEvent::FuncGetCampPoint(char *, struct TokenData &)
  private bool CNpcEvent::FuncResetCampPoint()
  private bool CNpcEvent::FuncMyMobSkillUse(const char *, int, int, int, int)
  private bool CNpcEvent::FuncWhereMyMob_X(const char *, struct TokenData &)
  private bool CNpcEvent::FuncWhereMyMob_Y(const char *, struct TokenData &)
  private bool CNpcEvent::FuncWideMobSkillUse(int, int, int, int, int, int, int)
  private bool CNpcEvent::FuncWideMobSkillUse2(struct MSG_TYPE7_EIGHTWORD *)
  private bool CNpcEvent::FuncCheckSiegeTime(int, struct TokenData &)
  private bool CNpcEvent::FuncIsBender(struct TokenData &)
  private bool CNpcEvent::FuncGetNpcPosition(const char *, struct TokenData &)
  private bool FuncChangMoveSpeed(int)
  private bool CNpcEvent::FuncProgressBar(const char *, int)
  private bool CNpcEvent::FuncMercenaryCheck(struct TokenData &)
  private bool CNpcEvent::FuncMercenaryType(struct TokenData &)
  private bool CNpcEvent::FuncIsFreeServer(struct TokenData &)
  private bool CNpcEvent::FuncCheckPartyJob(struct TokenData &)
  private bool CNpcEvent::FuncClearBuff()
  private bool CNpcEvent::FuncCheckAlive(const char *, struct TokenData &)
  private bool CNpcEvent::FuncKVMNpc(struct NpcSvrNpcInfo *)
  private bool CNpcEvent::FuncKVMStartAliveCheck()
  private bool CNpcEvent::FuncPVPRankCheck(struct TokenData &)
  private bool CNpcEvent::FuncKvm_Npc_Noti(const char *)
  private bool CNpcEvent::FuncGetItemSocket(const int, const int, const int, const int, const int)
  private bool CNpcEvent::FuncGetNonSlotItemSocket(const int, const int, const int, const int, const int)
  private bool CNpcEvent::FuncGetNonSlotItemSocket2(const int, const int, const int, const int, const int, const int)
  private bool CNpcEvent::FuncGetMyMercenary(struct TokenData &)
  private bool CNpcEvent::FuncErrorLog(const char *)
  private bool CNpcEvent::FuncIsMadogear(struct TokenData &)
  private bool CNpcEvent::FuncSetMadogear(const char *)
  private bool CNpcEvent::FuncIsAllianceGuild(int, struct TokenData &)
  private bool CNpcEvent::FuncOpenHour_SiegeMode(int, int, struct TokenData &)
  private bool CNpcEvent::FuncSetBattleFieldMovePosition(const char *, const char *, const int, const int)
  private bool CNpcEvent::FuncGetEquipcompositionType(const int, const int, struct TokenData &)
  private bool CNpcEvent::FuncGetEquipDBName(const int, struct TokenData &)
  private bool CNpcEvent::FuncGetEquipcardID(const int, const int, struct TokenData &)
  private bool CNpcEvent::Funcdropequipitem(const int)
  private bool CNpcEvent::Funcgetrefitem(const int, const char *)
  private bool CNpcEvent::OnFUNC_ADDQUESTINFO(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_ADDQUESTINFO2(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_SETQUESTJOB(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_SETQUESTSEX(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_SETQUESTLEVEL(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_SETQUESTJOBLEVEL(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_SETQUESTITEM(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_SETQUESTHOMUNLEVEL(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_SETQUESTHOMUNTYPE(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_SETQUESTQUESTITEM(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::OnFUNC_SETQUESQUEST(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CNpcEvent::ADD_QUESTINFO(const int, const int, const int, const unsigned long, const int, const int, const int)
  private bool CNpcEvent::SetQuestJob(const int, const int)
  private bool CNpcEvent::SetQuestSex(const int, const int)
  private bool CNpcEvent::SetQuestLevel(const int, const int, const int)
  private bool CNpcEvent::SetQuestItem(const int, const int, const int)
  private bool CNpcEvent::SetQuestHomunLevel(const int, const int, const int)
  private bool CNpcEvent::SetQuestHomunType(const int, const int)
  private bool CNpcEvent::SetQuestQuestItem(const int, const int, const int, const int, const char * const)
  private bool CNpcEvent::SetQuestJobLevel(const int, const int, const int)
  private bool CNpcEvent::SetQuestQuest(const int, const int, const int)
  private bool CNpcEvent::FuncTalkShow(const char *, const char *)
  private bool CNpcEvent::FuncRentItem(const int, const int)
  private bool CNpcEvent::FuncGetMonsterHP(const char *, struct TokenData &)
  private bool CNpcEvent::FuncMonsterTalkShow(const char *, const char *)
  private bool CNpcEvent::FuncSetMonsterHP(const char *, const int, struct TokenData &)
  private bool CNpcEvent::FuncItemDown2(const int, int, int, const int, const int, const int, const int, const int)
  private bool CNpcEvent::FuncGetElapsedTimer(struct TokenData &)
  private bool CNpcEvent::FuncIsEnableNpc(const char *, struct TokenData &)
  private bool CNpcEvent::FuncGetNpcMonsterX(const char *, const char *, struct TokenData &)
  private bool CNpcEvent::FuncGetNpcMonsterY(const char *, const char *, struct TokenData &)
  private bool CNpcEvent::FuncDelayTime(const int)
  private bool CNpcEvent::FuncSetMonsterHP2(const char *, const char *, const int, struct TokenData &)
  private bool CNpcEvent::FuncGetRankingPoint(const int, struct TokenData &)
  private bool CNpcEvent::FuncIncRankingPoint(const int, const int)
  private bool CNpcEvent::FuncDecRankingPoint(const int, const int)
  private bool CNpcEvent::FuncNpcMontransform(const int, const int)
  private bool CNpcEvent::FuncPartyMapMove(const int, const char *, const int, const int)
  private bool CNpcEvent::FuncIsPremium(struct TokenData &)
  private bool GetNpcParm(struct NpcSvrNpcInfo *)
  private void CNpcEvent::TraceCurPos()
  private void CNpcEvent::Wait(int, int)
  private class CAgitMapRes * CNpcEvent::GetAgit(char *)
  private class CBattleFieldMapRes * CNpcEvent::GetCurrentBattleFieldMapRes()
  /* this+0x78 */ class CBinBuf * m_binBuf
  /* this+0x7c */ class CNpcMgr * m_npcMgr
  /* this+0x80 */ class CNpc * m_npc
  /* this+0x84 */ int m_pcId
  /* this+0x88 */ int m_npcId
  /* this+0x8c */ int m_waitTime
  /* this+0x90 */ int m_waitType
  /* this+0x94 */ bool m_isDisableItemMove
  /* this+0x98 */ int m_min
  /* this+0x9c */ int m_max
  /* this+0xa0 */ int m_error
  /* this+0xa4 */ int m_input
  /* this+0xa8 */ bool m_dialogFlag
  /* this+0xac */ int m_curInitNpc
  /* this+0xb0 */ char[0x4] m_dgIdent
  /* this+0xb4 */ unsigned int m_instantID
  /* this+0xb8 */ unsigned long m_reserveTime
  /* this+0xbc */ class std::vector<int,std::allocator<int> > m_initList

  /* this+0xcc */ bool m_OnInit
  /* this+0xd0 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_numArray

  public int GetDeleteCount()
  public void AddDeleteCount()
  /* this+0xe0 */ int m_DeleteCount
  private void FuncSavePosition()
  private void FuncMoveToSavePosition()
  public class CNpcEvent & operator=(const class CNpcEvent &)
  public void * __vecDelDtor(unsigned int)
}

class CNpcEventLog {
  CSectionLog, offset = 0x0

  public void CNpcEventLog(const class CNpcEventLog &)
  private void CNpcEventLog::CNpcEventLog()
  private void CNpcEventLog::~CNpcEventLog()
  /* [0x0003:0x0004b64c] */ static  class CNpcEventLog * m_isSelf
  public static bool CNpcEventLog::CreateInstance()
  public static void CNpcEventLog::DestroyInstance()
  public class CNpcEventLog & operator=(const class CNpcEventLog &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CNpcEvt {
  CNPC, offset = 0x0

  public void CNpcEvt(class CNpcEvt &)
  public void CNpcEvt::CNpcEvt()
  public void CNpcEvt::~CNpcEvt()
  public void CNpcEvt::OnProcess()
  public int CNpcEvt::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public int CNpcEvt::GetEmblemVersion()
  public int CNpcEvt::IsSellItem(unsigned short)
  public void CNpcEvt::OnMsgFromNPCServer(unsigned long, unsigned long, class CMsg *, unsigned long, unsigned long)
  public int CNpcEvt::IsArenaPossible()
  public void SetGraffiti(int)
  public bool CNpcEvt::IsTouchObject(unsigned long)
  public void CNpcEvt::AddTouchObjects(unsigned long)
  public void CNpcEvt::CheckTouchObjects()
  /* this+0x810 */ bool m_isSecertChshShop
  private void CNpcEvt::InitCore()
  private void AddSkill(class CMsg *)
  private void SetArenaEventsize(int)
  private void CNpcEvt::OnMakeWaitingRoom(int, int, int)
  private void EnableArena()
  private void DisableArena()
  private void CNpcEvt::OnWarpWaitingPCTOARENA(class CMsg *)
  private void CNpcEvt::OnWarpAllPCInTheMap(class CMsg *)
  private void CNpcEvt::OnBroadcastInthemap(class CMsg *)
  private void CNpcEvt::OnBroadcast(class CMsg *)
  private void CNpcEvt::OnOpenDiaLog(class CMsg *)
  private void CNpcEvt::OnOpenDiaLog2(class CMsg *)
  private void CNpcEvt::OnMapMove(class CMsg *)
  private void CNpcEvt::OnDisableItemMove(class CMsg *)
  private void CNpcEvt::OnEnableItemMove(class CMsg *)
  private void CNpcEvt::OnSuccessRefItem(int, class CMsg *)
  private void CNpcEvt::OnFailedRefItem(int, class CMsg *)
  private void CNpcEvt::OnSetEffectState(int, int)
  private void CNpcEvt::OnSetFeeZeny(int, int)
  private void CNpcEvt::OnSetFeeItem(int, int, int)
  private void CNpcEvt::OnSetLevel(int, int, int)
  private void CNpcEvt::OnSetExJob(int, int)
  private void CNpcEvt::OnChangeMoney(int, int)
  private void CNpcEvt::OnResetStat(int)
  private void CNpcEvt::OnResetSkill(int)
  private void CNpcEvt::OnShowImage(unsigned long, int, int)
  private void CNpcEvt::OnChangePalete(unsigned long, int, int)
  private void CNpcEvt::OnCompass(unsigned long, int, int, int, int, int)
  private void CNpcEvt::OnCheckPoint(unsigned long, int, int, int)
  private void CNpcEvt::OnWaitDialog(unsigned long)
  private void CNpcEvt::OnWaitDialog2(const unsigned long, const int)
  private void CNpcEvt::OnCloseDialog(unsigned long)
  private void CNpcEvt::OnSetItem(unsigned long, int, int)
  private void CNpcEvt::OnChangeItem(const unsigned long, const int, const int, const int, const int, const int)
  private void CNpcEvt::OnGetItemSocket(unsigned long, class CMsg *, int)
  private void CNpcEvt::OnNonSlotGetItemSocket(unsigned long, class CMsg *, int)
  private void CNpcEvt::OnNonSlotGetItemSocket2(unsigned long, class CMsg *, int)
  private void CNpcEvt::OnChangeVar(unsigned long, int, int)
  private void CNpcEvt::OnDLG_Write(unsigned long)
  private void CNpcEvt::OnNude(unsigned long)
  private void CNpcEvt::OnCartOn(unsigned long)
  private void CNpcEvt::OnNotifyStoredItem(unsigned long)
  private void CNpcEvt::OnMenu(unsigned long, int, int)
  private void CNpcEvt::OnTradeNpcCommandRegister(unsigned long, int, int)
  private void CNpcEvt::OnShowDigit(unsigned long, int)
  private void CNpcEvt::OnEnableSkill(unsigned long, int, int)
  private void CNpcEvt::OnDisableSkill(unsigned long, int)
  private void CNpcEvt::OnSound(unsigned long, class CMsg *)
  private void CNpcEvt::OnDLG_WriteStr(unsigned long)
  private void CNpcEvt::UseSkillToPC(unsigned long, unsigned long, int, int, int, int)
  private void CNpcEvt::OnCashTradeNpcCommandRegister(unsigned long, class CMsg *)
  private void CNpcEvt::OnCashItemList(unsigned long, class CMsg *)
  private void OnUpdateContectPcList(unsigned long, class CMsg *)
  private void OnAddMoveNpcCommand(unsigned long, class CMsg *)
  private void CNpcEvt::OnReloadMobileEvent(unsigned long, class CMsg *)
  private void CNpcEvt::OnEventItem(unsigned long, class CMsg *)
  private void CNpcEvt::OnMyMobSkillUse(unsigned long, class CMsg *)
  private void CNpcEvt::OnWideMobSkillUse(unsigned long, class CMsg *, int, int)
  private void CNpcEvt::OnWideMobSkillUse2(unsigned long, class CMsg *)
  private void OnMoveNpcSpeedChange(int)
  private int GetArenaEventSize()
  private class CRoom * CNpcEvt::GetMyRoom()
  private void CNpcEvt::OnPurchaseItem(class CCharacter *)
  private void CNpcEvt::OnZNCloseDialog(int)
  private void CNpcEvt::OnInputEditDlg(int, unsigned long)
  private void CNpcEvt::OnInputEditDlgStr(int, unsigned long)
  private void CNpcEvt::OnWarpCharBetweenServer(unsigned long)
  private void CNpcEvt::MulticastRoomNewEntry(unsigned long)
  /* this+0x814 */ class std::list<int,std::allocator<int> > m_sellList

  /* this+0x820 */ class std::vector<CCashItemShopScript::CProduct,std::allocator<CCashItemShopScript::CProduct> > m_cashMap

  /* this+0x830 */ int m_isArenaPossible
  /* this+0x834 */ int m_arenaEventSize
  /* this+0x838 */ int m_flagGraffitiNum
  /* this+0x83c */ class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_touchObjects

  private void CNpcEvt::MobTombClick(const unsigned int)
  private void CNpcEvt::Dialog(const char *, const unsigned int)
  public class CNpcEvt & operator=(class CNpcEvt &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNpcHomun {
  CNPC, offset = 0x0

  public void CNpcHomun(class CNpcHomun &)
  public void CNpcHomun::CNpcHomun()
  public void CNpcHomun::~CNpcHomun()
  public void CNpcHomun::Init()
  public int CNpcHomun::GetParameterValue(unsigned short, int &)
  public int CNpcHomun::UpdateParameterValue(unsigned short, int)
  public int CNpcHomun::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public void CNpcHomun::OnProcess()
  public int CNpcHomun::IsTarget(class CCharacter *, unsigned long)
  public class CCharacter * CNpcHomun::GetMyOwner()
  public int SkillAttackExt(struct SKILLATTACK_MSG *, int, int, const bool)
  public static bool staticIsMutationType(const int)
  public static bool staticIsEvolutionType(const int)
      /* this+0x810 */ class std::multiset<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_spiritsTime

  private void CNpcHomun::AddSpirits(const int)
  private void CNpcHomun::MinusSpirits(const int)
  private void CNpcHomun::UpdateSpiritsInfo()
  private void CNpcHomun::NotifySpiritsInfo()
  private void CNpcHomun::ParseSpiritsSaveInfo()
  private void CNpcHomun::SetEffectiveSpiritsSaveInfo()
  private void CNpcHomun::SetSkillSinglePostDelay(unsigned short, unsigned long)
  private bool CNpcHomun::IsEndPostdelaySkill(const unsigned short)
  private int CNpcHomun::GetOwnerCategoryThirdJob()
  private bool IsMutationType()
  private short GetCategoryMutationJobType()
  private short CNpcHomun::GetCategoryEvolutionJobType()
  private short CNpcHomun::GetCategoryBirthJobType()
  private int CNpcHomun::IsSatisfySkill(const unsigned short, const short, const short)
  private unsigned short CNpcHomun::GetHomunFoodItemID()
  private void CNpcHomun::SaveHomunData()
  private void CNpcHomun::OnOpSkillToCharacterMER(const unsigned short, const int, struct MSG_TYPE4_FIVEDWORD *)
  private void CNpcHomun::OnOpSkillToGroundMER(const unsigned short, const int, struct MSG_TYPE5_SIXDWORD *)
  private void CNpcHomun::OnTouchedSkillObjectMER(int, int, int)
  private void CNpcHomun::OnProcessEffect_Attack(class CCharacter *, const int, const int, const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_NEEDLE_OF_PARALYZE(class CCharacter *, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_PAIN_KILLER(class CCharacter *, const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_POISON_MIST(const int, const int, const int)
  private void CNpcHomun::MH_POISON_MIST_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_SUMMON_LEGION(class CCharacter *, const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_ERASER_CUTTER(class CCharacter *, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_XENO_SLASHER(const int, const int, const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_OVERED_BOOST(class CPC *, const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_SILENT_BREEZE(class CCharacter *, const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_LIGHT_OF_REGENE(class CPC *, const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_STYLE_CHANGE()
  private void CNpcHomun::MH_STYLE_CHANGEoperation(const bool)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_SONIC_CLAW(class CCharacter *, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_SILVERVEIN_RUSH(const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_MIDNIGHT_FRENZY(const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_STAHL_HORN(class CCharacter *, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_GOLDENE_FERSE(const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_STEINWAND(const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_HEILIGE_STANGE(class CCharacter *, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_ANGRIFFS_MODUS(const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_TINDER_BREAKER(class CCharacter *, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_CBC(const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_EQC(const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_MAGMA_FLOW(const int)
  private void CNpcHomun::MH_MAGMA_FLOWoperation()
  private enum CActor::SKILL_RETURN CNpcHomun::MH_GRANITIC_ARMOR(const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_LAVA_SLIDE(const int, const int, const int)
  private void CNpcHomun::MH_LAVA_SLIDE_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_PYROCLASTIC(const int)
  private enum CActor::SKILL_RETURN CNpcHomun::MH_VOLCANIC_ASH(const int, const int, const int)
  private void CNpcHomun::MH_VOLCANIC_ASH_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  public void CNpcHomun::UpdateSkillDB(const unsigned short, struct HO_SKINFO &)
  public void CNpcHomun::LoadSkill(const class std::map<unsigned short,HO_SKINFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HO_SKINFO> > > &)
  public bool CNpcHomun::IsReadyMutationHomun()
  public void CNpcHomun::CompleteMutationHomun(const int, const struct HOMUN_DBINFO *, const class std::map<unsigned short,HO_SKINFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HO_SKINFO> > > &)
  public void CNpcHomun::GetEffectData(class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > &)
  public void CNpcHomun::SetEffectData(const class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > &)
  public void CNpcHomun::GetSkillData(class std::map<unsigned short,HO_SKINFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HO_SKINFO> > > &)
  public void CNpcHomun::OnAttacked(const int)
  public int GetNumOfSpirits()
  public int CNpcHomun::GetBaseFlee()
  public void CNpcHomun::Send(const int, char *)
  public void CNpcHomun::SendStateHomun(char, int)
  public void CNpcHomun::OnTimerHomun()
  public void CNpcHomun::OnReqRename(char *)
  public void CNpcHomun::SetCharInfo(struct HOMUN_DBINFO *)
  public void CNpcHomun::InitProperty()
  public void CNpcHomun::InitTimer(unsigned long)
  public void CNpcHomun::InitConditionTime()
  public void CNpcHomun::IsLevelUp()
  public void CNpcHomun::UpdateHomunDBInfo(struct HOMUN_DBINFO *)
  public void CNpcHomun::SetModifiedState(int)
  public void CNpcHomun::ResetModifiedState(int)
  public int CNpcHomun::EvolutionHomun()
  public int CNpcHomun::IsEvolutionType()
  public void CNpcHomun::StartUseSkill()
  public int CNpcHomun::IsSkillUsable(unsigned short)
  public int CNpcHomun::IsSkillEnable(unsigned short, int, class CCharacter *)
  public short CNpcHomun::GetSKLevel(unsigned short)
  public void CNpcHomun::UpgradeSKLevel(unsigned short)
  public class CPC * CNpcHomun::GetOwner()
  public int CNpcHomun::GetSP()
  public int CNpcHomun::GetMaxHP()
  public int CNpcHomun::GetMaxSP()
  public short CNpcHomun::GetStrValue()
  public short CNpcHomun::GetDexValue()
  public short CNpcHomun::GetVitValue()
  public short CNpcHomun::GetIntValue()
  public short CNpcHomun::GetAgiValue()
  public int GetLukValue()
  public int GetFullness()
  public int GetRelation()
  public void CNpcHomun::ProcessEffect_ATK(class CCharacter *, int &, int, int)
  public int CNpcHomun::GetInvincibleTimeInfo(int)
  public short CNpcHomun::GetJobType()
  public short CNpcHomun::GetRelationGrade(short)
  public void CNpcHomun::NotifyStatusAmount(unsigned short, int)
  public bool CNpcHomun::ApplyStatusAmount(unsigned short, int &)
  private void CNpcHomun::InitCore()
  private int CNpcHomun::IsRechargeTime()
  private void CNpcHomun::ApplyLevelStatWeight()
  private int CNpcHomun::GetMagicAttPower()
  private short CNpcHomun::GetDefencePoint()
  private short CNpcHomun::GetStatusDef()
  private void CNpcHomun::NotifyParameter(const int, const int)
  private void CNpcHomun::UpdateMagicItemDefPower()
  private short CNpcHomun::GetStatusMagicDef()
  private short CNpcHomun::GetItemMagicDef()
  private int GetMATKPoint_Client()
  private int GetMDEF_Client()
    /* this+0x820 */ struct CNpcHomun::<unnamed-type-m_MATK> m_MATK

  private int CNpcHomun::GetItemAttPower()
  private int CNpcHomun::GetStatusAttPower()
  private int GetItemPowerMin()
  private int GetItemPowerMax()
  private int GetStatusMagicPower()
  private int GetMagicItemPowerMin()
  private int CNpcHomun::GetMagicItemPowerMax()
  private short CNpcHomun::GetAvoidPercent_Client()
  private void CNpcHomun::CheckState(unsigned long)
  private void CNpcHomun::SaveCharInfo(int)
  private void CNpcHomun::DeleteCharInfo(int)
  private int CNpcHomun::AddSkill(unsigned short, struct HO_SKINFO *, bool, int)
  private struct HO_SKINFO * CNpcHomun::GetSkill(unsigned short)
  private void CNpcHomun::NotifyAllSKInfo()
  private void CNpcHomun::NotifySKInfo(unsigned short, int)
  private void CNpcHomun::ChkAllEnableSkill()
  private void CNpcHomun::ApplyPassiveSkill(unsigned short, short)
  private void CNpcHomun::AddFinalSkill()
  private void CNpcHomun::OnChangedHP()
  private void CNpcHomun::OnChangedSP()
  private void CNpcHomun::OnFeed(class CPC *)
  private void CNpcHomun::OnAddExp(class CCharacter *, int, int)
  private void CNpcHomun::OnShareExp(class CCharacter *, int, int)
  private void CNpcHomun::ModifyFullness(int)
  private void CNpcHomun::ModifyRelationship(float)
  private void CNpcHomun::SendProperty()
  private void CNpcHomun::SetInvincibleTimeInfo(unsigned long, int)
  private void CNpcHomun::SetBodyStateTimeInfo(unsigned long, unsigned long, int)
  private short CNpcHomun::GetATKPoint_Client()
  private short CNpcHomun::GetCRI_Client()
  private short CNpcHomun::GetDEF_Client()
  private short CNpcHomun::GetATKTime_Client()
  private int CNpcHomun::GetFullnessGrade(int)
  private int CNpcHomun::GetRecoverSPD_HP()
  private int CNpcHomun::GetRecoverSPD_SP()
  private int GetEmotion_Feed(int, int)
  private void CNpcHomun::UpdateStatusATKpower()
  private void CNpcHomun::UpgradeStatus_LevelUp()
  private void CNpcHomun::OPSkillToSelf(int, int, int)
  private void CNpcHomun::ATKSkillToChar(int, int, int)
  private int CNpcHomun::SK_LIF_Heal(class CPC *, const struct MSG_TYPE4_FIVEDWORD &)
  private int CNpcHomun::SK_LIF_Avoid(class CPC *, struct MSG_TYPE4_FIVEDWORD *)
  private int CNpcHomun::SK_LIF_Change(class CPC *, struct MSG_TYPE4_FIVEDWORD *)
  private int CNpcHomun::SK_AMI_Castle(class CPC *)
  private int CNpcHomun::SK_AMI_Defence(class CPC *, struct MSG_TYPE4_FIVEDWORD *)
  private int CNpcHomun::SK_AMI_BloodLust(class CPC *, struct MSG_TYPE4_FIVEDWORD *)
  private int CNpcHomun::SK_FLI_Fleet(class CPC *, struct MSG_TYPE4_FIVEDWORD *)
  private int CNpcHomun::SK_FLI_Speed(struct MSG_TYPE4_FIVEDWORD *)
  private int CNpcHomun::SK_VAN_Chaotic(class CPC *, struct MSG_TYPE4_FIVEDWORD *)
  private int CNpcHomun::SK_VAN_Explosion(class CPC *, struct MSG_TYPE4_FIVEDWORD *)
  /* this+0x828 */ class CPollTimer m_timerF

  /* this+0x830 */ class CPollTimer m_timerHunger

  /* this+0x838 */ class CPollTimer m_timerState

  /* this+0x840 */ int m_modified
  /* this+0x844 */ int m_fullGrade
  /* this+0x848 */ int m_fullness
  /* this+0x84c */ float m_relation
  /* this+0x850 */ int m_SKPoint
  /* this+0x854 */ class std::map<unsigned short,HO_SKINFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HO_SKINFO> > > m_skill

  /* this+0x864 */ struct EXTInfo m_EXTInfo

  public class CNpcHomun & operator=(class CNpcHomun &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CNpcHomun::<unnamed-type-m_MATK> {
  /* this+0x0 */ int minimum
  /* this+0x4 */ int maximum
}

class CNpcMercenary {
  CNPC, offset = 0x0

  public int CNpcMercenary::GetSPcostForSkill(const int, const int, const int, class CSkillTypeInfo *)
      /* this+0x810 */ struct CNpcMercenary::tagActiveSkillCount m_ActiveSkillCount

  /* this+0x820 */ long m_ExpireTM
  /* this+0x824 */ int m_SKPoint
  /* this+0x828 */ int m_approval_monster_kill_counter
  /* this+0x82c */ int m_total_call_number
  /* this+0x830 */ int m_faith2
  /* this+0x834 */ bool m_bReady
  /* this+0x838 */ class CPollTimer m_timerState

  /* this+0x840 */ unsigned long m_gageRefreshTime
  /* this+0x844 */ unsigned long m_AttReqLastTime
  /* this+0x848 */ unsigned long m_lastTargetAID
  /* this+0x84c */ bool m_bDevotion
  /* this+0x850 */ class std::vector<ENEMY_INFO,std::allocator<ENEMY_INFO> > m_enemyInfo

    /* this+0x860 */ class CNpcMercenary::Teleport m_Teleport

        /* this+0x86c */ class std::map<int,CNpcMercenary::MERSkill,std::less<int>,std::allocator<std::pair<int const ,CNpcMercenary::MERSkill> > > m_Skill

  public void CNpcMercenary::PacketSend_ZC_MER_INIT()
  public void CNpcMercenary::PacketSend_ZC_MER_SKILLINFO_LIST()
  public void PacketSend_ZC_MER_SKILLINFO_UPDATE(const int, const bool)
  public void CNpcMercenary::PacketSend_ZC_DEVOTIONLIST(unsigned long, short)
  public void CNpcMercenary::Send(const int, char *)
  private void CNpcMercenary::InitCore()
  private void CNpcMercenary::OnTimer()
  public bool isEffectApply(const int)
  private class CNpcMercenary::MERSkill * CNpcMercenary::GetSkill(const int)
  private bool IsSatisfySkill(const int, const int)
  private void ApplyPassiveSkill(const int, const int)
  private void ChkAllEnableSkill()
  public bool CNpcMercenary::IsSkillUsable(const unsigned short)
  public bool CNpcMercenary::IsSkillEnable(const int, const int, class CCharacter * const)
  public void CNpcMercenary::StartUseSkill()
  public void CNpcMercenary::ReduceSPByUseSkill(int)
  public bool CNpcMercenary::ParseEffectData(const int, const unsigned char *)
  public int CNpcMercenary::GetEffectDBFmt(const unsigned char *, const int)
  public int CNpcMercenary::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public void CNpcMercenary::OnADDSKILL(struct SKILLINFO *)
  public void CNpcMercenary::OnATKSKILL_TOCHAR_MER(const int, const int, const struct MSG_TYPE4_FIVEDWORD *)
  public void CNpcMercenary::OnGroundSkill_MER(const int, const int, const struct MSG_TYPE5_SIXDWORD *)
  public void CNpcMercenary::UseSkillToCharacter_MER(const int, const int, const struct MSG_TYPE4_FIVEDWORD *)
  public void CNpcMercenary::SPAttackSkillToCharacter_MER(const int, const int, const struct MSG_TYPE4_FIVEDWORD *)
  public void CNpcMercenary::OperationSkillToSelf_MER(const int, const int, const struct MSG_TYPE4_FIVEDWORD *)
  public void CNpcMercenary::OnADD_EXP(class CCharacter *, const int)
  public void CNpcMercenary::OnSHARE_EXP(class CCharacter *, const int)
  public void CNpcMercenary::OnADD_JOBEXP(class CCharacter *, const int, const int, const int)
  public void CNpcMercenary::OnSHARE_JOBEXP(class CCharacter *, const int)
  public void CNpcMercenary::OnKILLED(class CCharacter * const, class CCharacter * const)
  public void CNpcMercenary::OnHEAL_HP(const int)
  public void CNpcMercenary::OnHEAL_SP(const int)
  public void CNpcMercenary::OnTIME_BODYSTATE(const unsigned long, const unsigned long, const int)
  public void CNpcMercenary::OnTIME_HEALTHSTATE(const int, const int, const int)
  public void CNpcMercenary::OnDEVOTIONLIST_REMOVE(const int)
  public void CNpcMercenary::OnBLESSING_FROM_ACOLYTE(class CCharacter *, int, int, int)
  private void CNpcMercenary::ChangeHP(const int)
  private void CNpcMercenary::ChangeSP(const int)
  private void CNpcMercenary::ChangeFAITH(const int)
  private void CNpcMercenary::BroadcastHP()
  public void CNpcMercenary::OnEmployTimeExpire()
  public bool isDevotion()
  public void CNpcMercenary::SetBodyStateTimeInfo(unsigned long, unsigned long, int)
  public void CNpcMercenary::OnDead(unsigned long)
  public int CNpcMercenary::UpdateParameterValue(unsigned short, int)
  public bool CNpcMercenary::OpSKToChar_SKID_ML_DEVOTION(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *)
  public void CNpcMercenary::OpSKToSelf_SKID_ML_DEFENDER(const int)
  public void CNpcMercenary::NotifyParameter(unsigned short, int)
  public void CNpcMercenary::ResetEffective_after_EFST_DEFENDER()
  public void CNpcMercenary::OpSKToSelf_SKID_MER_MAGNIFICAT(const int, const int, const int, const int)
  public int CNpcMercenary::GetModifiedValueByEnemySize(int)
  public int CNpcMercenary::IsInitingState()
  public class CCharacter * CNpcMercenary::GetMyOwner()
  public int CNpcMercenary::GetMaxSP()
  public short CNpcMercenary::GetJob()
  public int CNpcMercenary::GetSP()
  public short CNpcMercenary::GetCRI()
  public short CNpcMercenary::GetDEF()
  public short GetVitValue()
  public short CNpcMercenary::GetDexValue()
  public int CNpcMercenary::GetMagicAttPower()
  public short CNpcMercenary::GetIntValue()
  public short CNpcMercenary::GetMdef()
  public static int CNpcMercenary::GetTypicalJob(const int)
  public int CNpcMercenary::GetTypicalJob()
  public int CNpcMercenary::GetSKLevel(const int)
  public int CNpcMercenary::GetSKType(const int)
  public class CPC * CNpcMercenary::GetOwner()
  public int GetDesX()
  public int GetDesY()
  public int GetCurX()
  public int GetCurY()
  public unsigned long CNpcMercenary::GetAttackLastTime()
  public void CNpcMercenary::SetAttackLastTime(const unsigned long)
  public int CNpcMercenary::GetSKCastingTM(class CSkillTypeInfo *, short, class CCharacter *, int, int)
  public int CNpcMercenary::GetRemainLifeSECOND()
  public int GetApprovalMonsterKillCounter()
  public int CNpcMercenary::IsTarget(class CCharacter *, unsigned long)
  public void CNpcMercenary::OnProcess()
  public void CNpcMercenary::Release()
  public void SetReady(const bool)
  public void CNpcMercenary::Approval_Monster_Kill()
  public int CNpcMercenary::GetHPHealVelocity()
  public int CNpcMercenary::GetSPHealVelocity()
  public void CNpcMercenary::ProcAutoHPSPCharge(const unsigned long)
  public void CNpcMercenary::ReductionPredelay(int &)
  public void SetLastTargetAID(const unsigned long)
  public unsigned long GetLastTargetAID()
  public int CNpcMercenary::GetMoveHasteValue1()
  public int CNpcMercenary::GetMoveHasteValue2()
  public int CNpcMercenary::GetInvincibleTimeInfo(int)
  private void CNpcMercenary::SetInvincibleTimeInfo(unsigned long, int)
  public void CNpcMercenary::InitEnemyInfo()
  public struct ENEMY_INFO * CNpcMercenary::SearchEnemyInfo(unsigned long)
  public void CNpcMercenary::InsertEnemyInfo(struct ENEMY_INFO *)
  public void CNpcMercenary::UpdateEnemyInfo()
  public struct CPCBattleMercenary::TypicalJobInfo operator struct CPCBattleMercenary::TypicalJobInfo()
  public struct CMercenaryDBV2::DBINFO operator struct CMercenaryDBV2::DBINFO()
  public class CNpcMercenary & operator=(class CNpcMercenary &)
  public class CNpcMercenary & CNpcMercenary::operator=(const struct CPCBattleMercenary::TypicalJobInfo &)
  public class CNpcMercenary & CNpcMercenary::operator=(const struct CMercenaryDBV2::DBINFO &)
  public void CNpcMercenary(class CNpcMercenary &)
  public void CNpcMercenary::CNpcMercenary()
  public void CNpcMercenary::~CNpcMercenary()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNpcMercenary::MERSkill {
  /* this+0x0 */ int m_SKID
  /* this+0x4 */ int m_Level
  /* this+0x8 */ int m_Type
  public void MERSkill()
}

class CNpcMercenary::Teleport {
  /* this+0x0 */ class CPollTimer m_timer

  /* this+0x8 */ bool m_bActive
  public void Init()
  public bool isCheckTime(const unsigned long)
  public void SetActive(const bool)
  public bool isActive()
}

struct CNpcMercenary::tagActiveSkillCount {
    /* this+0x0 */ int SKIDTRAP
  /* this+0x4 */ int LANDMINE
  /* this+0x8 */ int SANDMAN
  /* this+0xc */ int FREEZINGTRAP
}

class CNpcMgr {
    *
  public void CNpcMgr::Clear()
  public class CNpc * CNpcMgr::Add(int)
  public class CNpc * CNpcMgr::Get(int)
  public class CNpc * CNpcMgr::GetFromName(const char *)
  public void CNpcMgr::Delete(int)
  public void CNpcMgr(const class CNpcMgr &)
  public void CNpcMgr::CNpcMgr()
  public void CNpcMgr::~CNpcMgr()
  /* this+0x4 */ class std::map<int,CNpc *,std::less<int>,std::allocator<std::pair<int const ,CNpc *> > > m_map

  public class CNpcMgr & operator=(const class CNpcMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNpcMob {
  CNPC, offset = 0x0

  public void CNpcMob(class CNpcMob &)
  public void CNpcMob::CNpcMob()
  public void CNpcMob::~CNpcMob()
  public void CNpcMob::Reset()
  public void CNpcMob::OnProcess()
  public int CNpcMob::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public int CNpcMob::GetInvincibleTimeInfo(int)
  public int CNpcMob::ChkGndSkillDurability()
  public void SetEffectByGospel(class CCharacter *)
  public void ResetEffectByGospel(int)
  public void CNpcMob::ResetEffectiveByDispel()
  public int GetMonsterDBDef()
  public int GetMonsterDBMdef()
  public short CheckBossEnableRegen()
    public void GetBossRegenSystemTime(unsigned long &, unsigned long &)
  public bool IsBossInMap()
  public void CNpcMob::SetBossRegenTime(const unsigned long)
  public int CNpcMob::GetRevivalTerm()
  protected void CNpcMob::InitCore()
  private void CNpcMob::OnHealHP(int)
  private void CNpcMob::OnDecreaseDef(class CCharacter *, int)
  private void CNpcMob::OnSetBossInMap()
  private void CNpcMob::OnRequestBossInfo(class CCharacter *)
  private void CNpcMob::OnReqAddBossPCList(class CCharacter *)
  private void CNpcMob::OnReqDelBossPCList(class CCharacter *)
  private void CNpcMob::OnBlessingFromAcolyte(class CCharacter *, int, int, int)
  private void CNpcMob::OnCureFromAcolyte()
  private void OnResurrection(int)
  private void CNpcMob::SetInvincibleTimeInfo(unsigned long, int)
  private void CNpcMob::SetBodyStateTimeInfo(unsigned long, unsigned long, int)
  private void CNpcMob::UpdateBossInfo()
  private char * CNpcMob::GetBossInfo(bool)
  /* this+0x810 */ class CPollTimer m_stateTimer

  /* this+0x818 */ struct BOSS_INFO m_bossInfo

  /* this+0x850 */ int m_SvrScriptAppID
  public void SetSvrScriptAppID(int)
  public int GetSvrScriptAppID()
  private void CNpcMob::CreateMobTomb(const unsigned int)
  public class CNpcMob & operator=(class CNpcMob &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNpcMobRecycleMgr {
  public class CNpcMob * CNpcMobRecycleMgr::Get()
  public void CNpcMobRecycleMgr::Put(class CNpcMob *)
  public int GetMgrNum()
  public void CNpcMobRecycleMgr::Process()
  public bool isOK()
  public static bool CNpcMobRecycleMgr::CreateInstance()
  public static void CNpcMobRecycleMgr::DestroyInstance()
  public void CNpcMobRecycleMgr(const class CNpcMobRecycleMgr &)
  private void CNpcMobRecycleMgr::CNpcMobRecycleMgr(const int)
  private void CNpcMobRecycleMgr::~CNpcMobRecycleMgr()
  /* [0x0003:0x0004b288] */ static  class CNpcMobRecycleMgr * m_cpSelf
    /* this+0x0 */ class std::list<CNpcMob *,std::allocator<CNpcMob *> > m_WastepaperBasket

  /* this+0xc */ bool m_bOK
  /* this+0x10 */ const int m_MaxGeneratorNum
  /* this+0x14 */ int m_GeneratorCnt
  private void * __vecDelDtor(unsigned int)
}

class CNpcPet {
  CNPC, offset = 0x0

  public void CNpcPet(class CNpcPet &)
  public void CNpcPet::CNpcPet()
  public void CNpcPet::~CNpcPet()
  public void CNpcPet::OnProcess()
  public int CNpcPet::GetSpeed()
  public void SetOwnerAID(unsigned long)
  public int GetPetDBKey()
  public void CNpcPet::ModifyFullness(int)
  public void CNpcPet::ModifyRelationship(int)
  public void CNpcPet::SendPetState(char, int)
  public void CNpcPet::MultiCastPetState(char, int)
  public void CNpcPet::ModifyAccessary(int)
  public int CNpcPet::GetPetRG(int)
  public int CNpcPet::GetPetFG(int)
  public int CNpcPet::GetPerformanceNo(int)
  public void CNpcPet::OnTimerPet()
  public void CNpcPet::InitPetTimer(unsigned long)
  public void CNpcPet::SendPetProperty()
  public void CNpcPet::UpdateDB()
  public void CNpcPet::InitPetProperty(const struct PET_PROPERTY &)
  public unsigned short CNpcPet::GetPetFoodKind()
  public int GetPetJob()
  public void CNpcPet::ModifyLocation(int, int)
  public void CNpcPet::OnRenamePet(char *)
  public void CNpcPet::OnPetMsg(class CPC *, int, int)
  public int CNpcPet::IsWearable(unsigned short)
  public int GetRelationship()
  public void CNpcPet::ConvertInto_PET_PROPERTY(struct PET_PROPERTY &)
  public bool CNpcPet::UpdateDB_WithGID()
  public void CNpcPet::AddLog(int)
  public int GetNameModified()
  private void CNpcPet::InitCore()
  private class CPC * CNpcPet::GetOwner()
  private unsigned long GetOwnerAID()
  /* this+0x810 */ int m_modified
  /* this+0x814 */ int m_fullness
  /* this+0x818 */ int m_relationship
  /* this+0x81c */ struct PET_INFO * m_petInfo
  /* this+0x820 */ int m_dbkey
  /* this+0x824 */ int m_myOwnerAID
  /* this+0x828 */ int m_fullGrade
  /* this+0x82c */ class CPollTimer m_timerF

  /* this+0x834 */ class CPollTimer m_timerHunger

  /* this+0x83c */ class CPollTimer m_timerDB

  public class CNpcPet & operator=(class CNpcPet &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CNpcSvr {
  public void CNpcSvr(const class CNpcSvr &)
  public void CNpcSvr::CNpcSvr()
  public void CNpcSvr::~CNpcSvr()
  public bool CNpcSvr::Start()
  public void CNpcSvr::Process()
  public int CNpcSvr::SendMsg(unsigned long, unsigned long, class CZNPC2Msg *)
  public int CNpcSvr::RunEvent(int, int, int, int, bool)
  public void CNpcSvr::CancelEvent(int)
  public bool CNpcSvr::IsExistScriptEvent(const int, const int)
  public class CStaticNpcMgr * GetStaticNpcMgr()
  public bool ClearFirstEvent()
  public void CNpcSvr::FinalNpcEvent(class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CNpcSvr::FinalDungeonNpc(int)
  public bool CNpcSvr::AddDunGeon(const char *, unsigned int)
  public int CNpcSvr::RunEvent_Dungeon(int, int, int, int, class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, unsigned int, bool)
  /* this+0x0 */ class std::multiset<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_npcNames

  /* this+0x10 */ class std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_cmdothernpcNames

  private void CNpcSvr::Clear()
  private bool LoadScript()
  /* this+0x20 */ class CBinBuf m_binBuf

  /* this+0x28 */ class CStaticNpcMgr m_staticNpcMgr

  /* this+0x3c */ int m_eventNo
  /* this+0x40 */ bool m_clearFirstEvent
  /* this+0x44 */ class pool<CNpcEvent> m_pool

  /* this+0x54 */ class std::map<int,CNpcEvent *,std::less<int>,std::allocator<std::pair<int const ,CNpcEvent *> > > m_eventMap

  /* this+0x64 */ class CDGNpcMgr m_dungeonNpcMgr

  public class CNpcSvr & operator=(const class CNpcSvr &)
  public void * __vecDelDtor(unsigned int)
}

class CODBC {
    *
  public void * operator void *()
  public void CODBC(const class CODBC &)
  public void CODBC::CODBC()
  public void CODBC::~CODBC()
  public void CODBC::Reset()
  public void CODBC::GetErrorString(void *, char *)
  public int CODBC::Init(const char *, const char *)
  /* this+0x4 */ void * m_henv
  /* this+0x8 */ void * m_hdbc
  /* this+0xc */ void * m_hstmt
  /* this+0x10 */ short m_retcode
  public class CODBC & operator=(const class CODBC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CODBCHandler {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class CODBC * m_cpODBC
  /* this+0xc */ void * m_hStmt
  private bool Init()
  public bool isOK()
  public short ExecDirect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public short UnBind()
  public short BindCol(unsigned short, short, void *, long, long *)
  public short BindParameter(unsigned short, short, short, short, unsigned long, short, void *, long, long *)
  public short GetData(unsigned short, short, void *, long, long *)
  public short CloseCursor()
  public short PutData(void *, long)
  public short Fetch()
  public short ParamData(void * *)
  public void * operator void *()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetErrorString()
  public void OutputErrorString(const char *, const int, const char *)
  public void CODBCHandler(const class CODBCHandler &)
  public void CODBCHandler(class CODBC *)
  public void ~CODBCHandler()
  public class CODBCHandler & operator=(const class CODBCHandler &)
  public void * __vecDelDtor(unsigned int)
}

class CODBCV2 {
    *
  /* this+0x4 */ void * m_henv
  /* this+0x8 */ void * m_hdbc
  /* this+0xc */ class CODBCV2Connector * m_cpConnector
  public bool CODBCV2::Init(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const enum CODBCV2Connector::enumConncetType, const bool)
  public void * const CODBCV2::GetDBCHandle()
  public void CODBCV2::Disconnect()
  public void CODBCV2::AsyncConnect()
  public bool CODBCV2::SyncConnect()
  public void CODBCV2(const class CODBCV2 &)
  public void CODBCV2::CODBCV2()
  public void CODBCV2::~CODBCV2()
  public class CODBCV2 & operator=(const class CODBCV2 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CODBCV2Connector {
    *
    /* this+0x4 */ void * m_copyhENV
  /* this+0x8 */ void * m_copyhDBC
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strDSN

  /* this+0x28 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strID

  /* this+0x44 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strPassword

  /* this+0x60 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strDB

  /* this+0x7c */ void * m_hThread
  /* this+0x80 */ const enum CODBCV2Connector::enumConncetType m_ConnectType
    /* this+0x84 */ class CODBCV2Connector::CState m_State

  private static unsigned int CODBCV2Connector::ThreadFunctionCaller(void *)
  private bool CODBCV2Connector::Connect()
  /* this+0xa0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strFileDSN

  protected bool CODBCV2Connector::isConnect()
  protected void CODBCV2Connector::AsyncConnect()
  protected void CODBCV2Connector::Disconnect()
  protected void CODBCV2Connector::SyncConnect()
  public void CODBCV2Connector(const class CODBCV2Connector &)
  protected void CODBCV2Connector::CODBCV2Connector(void * const, void * const, class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, enum CODBCV2Connector::enumConncetType)
  protected void CODBCV2Connector::~CODBCV2Connector()
  protected void * __vecDelDtor(unsigned int)
}

class CODBCV2Connector::CState {
    /* this+0x0 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x18 */ enum CODBCV2Connector::CState::enumState m_State
  public enum CODBCV2Connector::CState::enumState operator enum CODBCV2Connector::CState::enumState()
  public bool CODBCV2Connector::CState::operator==(const enum CODBCV2Connector::CState::enumState &)
  public bool CODBCV2Connector::CState::operator!=(const enum CODBCV2Connector::CState::enumState &)
  public void CODBCV2Connector::CState::CState(const enum CODBCV2Connector::CState::enumState)
  public void CODBCV2Connector::CState::~CState()
  public void * __vecDelDtor(unsigned int)
}

class CODBCV2Handler {
    *
  /* this+0x4 */ void * m_hStmt
  /* this+0x8 */ class CODBCV2 * m_vcpODBCV2
  /* this+0xc */ bool m_bError
  /* this+0xd */ const bool m_bReqAutoAsyncConnectWhenError
  public short CODBCV2Handler::BindParameter(unsigned short, short, short, short, unsigned long, short, void *, long, long *)
  public short CODBCV2Handler::ExecDirect(unsigned char *, long)
  public short CODBCV2Handler::BindCol(unsigned short, short, void *, long, long *)
  public short CODBCV2Handler::Fetch()
  public void * operator void *()
  public void CODBCV2Handler(const class CODBCV2Handler &)
  public void CODBCV2Handler::CODBCV2Handler(class CODBCV2 *, const bool)
  public void CODBCV2Handler::~CODBCV2Handler()
  public void * __vecDelDtor(unsigned int)
}

class CODBCV2Util {
    *
  /* [0x0003:0x0004b87c] */ static  class CODBCV2Util * m_cpSelf
  public static class CODBCV2Util * CODBCV2Util::GetObj()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CODBCV2Util::GetErrorString(const short, void * const)
  public bool AddSystemDSN(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CODBCV2Util(const class CODBCV2Util &)
  private void CODBCV2Util::CODBCV2Util()
  private void CODBCV2Util::~CODBCV2Util()
  public class CODBCV2Util & operator=(const class CODBCV2Util &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct COMMAND_QUEUE {
    public void COMMAND_QUEUE::COMMAND_QUEUE(const struct COMMAND_QUEUE &)
  public void COMMAND_QUEUE::COMMAND_QUEUE()
  public void SetAtkUseSkill()
  public void SetAtkSpell(unsigned short)
  /* this+0x0 */ unsigned long commandID
  /* this+0x4 */ unsigned long executionTime
  /* this+0x8 */ unsigned long sender
  /* this+0xc */ unsigned long par1
  /* this+0x10 */ unsigned long par2
  /* this+0x14 */ unsigned long par3
  /* this+0x18 */ unsigned long par4
  /* this+0x1c */ unsigned long par5
  /* this+0x20 */ unsigned long par6
  /* this+0x24 */ class MSGpar::CVar par7

  public void ~COMMAND_QUEUE()
  public void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CEraseQuestDBWork> {
  public class CEraseQuestDBWork * CObjectRecycleMgr<CEraseQuestDBWork>::Get()
  public void CObjectRecycleMgr<CEraseQuestDBWork>::Put(class CEraseQuestDBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CEraseQuestDBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CEraseQuestDBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CEraseQuestDBWork> * Instance()
  /* [0x0003:0x000563a4] */ static  class CObjectRecycleMgr<CEraseQuestDBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CEraseQuestDBWork *,std::allocator<CEraseQuestDBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CEraseQuestDBWork>(const class CObjectRecycleMgr<CEraseQuestDBWork> &)
  private void CObjectRecycleMgr<CEraseQuestDBWork>::CObjectRecycleMgr<CEraseQuestDBWork>(const int)
  private class CObjectRecycleMgr<CEraseQuestDBWork> & operator=(const class CObjectRecycleMgr<CEraseQuestDBWork> &)
  private void CObjectRecycleMgr<CEraseQuestDBWork>::~CObjectRecycleMgr<CEraseQuestDBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CInsertQuestDBWork> {
  public class CInsertQuestDBWork * CObjectRecycleMgr<CInsertQuestDBWork>::Get()
  public void CObjectRecycleMgr<CInsertQuestDBWork>::Put(class CInsertQuestDBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CInsertQuestDBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CInsertQuestDBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CInsertQuestDBWork> * Instance()
  /* [0x0003:0x000563a8] */ static  class CObjectRecycleMgr<CInsertQuestDBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CInsertQuestDBWork *,std::allocator<CInsertQuestDBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CInsertQuestDBWork>(const class CObjectRecycleMgr<CInsertQuestDBWork> &)
  private void CObjectRecycleMgr<CInsertQuestDBWork>::CObjectRecycleMgr<CInsertQuestDBWork>(const int)
  private class CObjectRecycleMgr<CInsertQuestDBWork> & operator=(const class CObjectRecycleMgr<CInsertQuestDBWork> &)
  private void CObjectRecycleMgr<CInsertQuestDBWork>::~CObjectRecycleMgr<CInsertQuestDBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CLoadCartADBWork> {
  public class CLoadCartADBWork * CObjectRecycleMgr<CLoadCartADBWork>::Get()
  public void CObjectRecycleMgr<CLoadCartADBWork>::Put(class CLoadCartADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CLoadCartADBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CLoadCartADBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CLoadCartADBWork> * Instance()
  /* [0x0003:0x00056260] */ static  class CObjectRecycleMgr<CLoadCartADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CLoadCartADBWork *,std::allocator<CLoadCartADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CLoadCartADBWork>(const class CObjectRecycleMgr<CLoadCartADBWork> &)
  private void CObjectRecycleMgr<CLoadCartADBWork>::CObjectRecycleMgr<CLoadCartADBWork>(const int)
  private class CObjectRecycleMgr<CLoadCartADBWork> & operator=(const class CObjectRecycleMgr<CLoadCartADBWork> &)
  private void CObjectRecycleMgr<CLoadCartADBWork>::~CObjectRecycleMgr<CLoadCartADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CLoadStoreADBWork> {
  public class CLoadStoreADBWork * CObjectRecycleMgr<CLoadStoreADBWork>::Get()
  public void CObjectRecycleMgr<CLoadStoreADBWork>::Put(class CLoadStoreADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CLoadStoreADBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CLoadStoreADBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CLoadStoreADBWork> * Instance()
  /* [0x0003:0x0005625c] */ static  class CObjectRecycleMgr<CLoadStoreADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CLoadStoreADBWork *,std::allocator<CLoadStoreADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CLoadStoreADBWork>(const class CObjectRecycleMgr<CLoadStoreADBWork> &)
  private void CObjectRecycleMgr<CLoadStoreADBWork>::CObjectRecycleMgr<CLoadStoreADBWork>(const int)
  private class CObjectRecycleMgr<CLoadStoreADBWork> & operator=(const class CObjectRecycleMgr<CLoadStoreADBWork> &)
  private void CObjectRecycleMgr<CLoadStoreADBWork>::~CObjectRecycleMgr<CLoadStoreADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CLogonPermitADBWork> {
  public class CLogonPermitADBWork * CObjectRecycleMgr<CLogonPermitADBWork>::Get()
  public void CObjectRecycleMgr<CLogonPermitADBWork>::Put(class CLogonPermitADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CLogonPermitADBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CLogonPermitADBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CLogonPermitADBWork> * Instance()
  /* [0x0003:0x00056370] */ static  class CObjectRecycleMgr<CLogonPermitADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CLogonPermitADBWork *,std::allocator<CLogonPermitADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CLogonPermitADBWork>(const class CObjectRecycleMgr<CLogonPermitADBWork> &)
  private void CObjectRecycleMgr<CLogonPermitADBWork>::CObjectRecycleMgr<CLogonPermitADBWork>(const int)
  private class CObjectRecycleMgr<CLogonPermitADBWork> & operator=(const class CObjectRecycleMgr<CLogonPermitADBWork> &)
  private void CObjectRecycleMgr<CLogonPermitADBWork>::~CObjectRecycleMgr<CLogonPermitADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CNpcElemental> {
  public class CNpcElemental * CObjectRecycleMgr<CNpcElemental>::Get()
  public void CObjectRecycleMgr<CNpcElemental>::Put(class CNpcElemental *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CNpcElemental>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CNpcElemental>::DestoryInstance()
  public static class CObjectRecycleMgr<CNpcElemental> * Instance()
  /* [0x0003:0x00056378] */ static  class CObjectRecycleMgr<CNpcElemental> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CNpcElemental *,std::allocator<CNpcElemental *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CNpcElemental>(const class CObjectRecycleMgr<CNpcElemental> &)
  private void CObjectRecycleMgr<CNpcElemental>::CObjectRecycleMgr<CNpcElemental>(const int)
  private class CObjectRecycleMgr<CNpcElemental> & operator=(const class CObjectRecycleMgr<CNpcElemental> &)
  private void CObjectRecycleMgr<CNpcElemental>::~CObjectRecycleMgr<CNpcElemental>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CPartyBookingDeleteADBWork> {
  public class CPartyBookingDeleteADBWork * CObjectRecycleMgr<CPartyBookingDeleteADBWork>::Get()
  public void CObjectRecycleMgr<CPartyBookingDeleteADBWork>::Put(class CPartyBookingDeleteADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CPartyBookingDeleteADBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CPartyBookingDeleteADBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CPartyBookingDeleteADBWork> * Instance()
  /* [0x0003:0x000563b8] */ static  class CObjectRecycleMgr<CPartyBookingDeleteADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CPartyBookingDeleteADBWork *,std::allocator<CPartyBookingDeleteADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CPartyBookingDeleteADBWork>(const class CObjectRecycleMgr<CPartyBookingDeleteADBWork> &)
  private void CObjectRecycleMgr<CPartyBookingDeleteADBWork>::CObjectRecycleMgr<CPartyBookingDeleteADBWork>(const int)
  private class CObjectRecycleMgr<CPartyBookingDeleteADBWork> & operator=(const class CObjectRecycleMgr<CPartyBookingDeleteADBWork> &)
  private void CObjectRecycleMgr<CPartyBookingDeleteADBWork>::~CObjectRecycleMgr<CPartyBookingDeleteADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CPartyBookingInsertADBWork> {
  public class CPartyBookingInsertADBWork * CObjectRecycleMgr<CPartyBookingInsertADBWork>::Get()
  public void CObjectRecycleMgr<CPartyBookingInsertADBWork>::Put(class CPartyBookingInsertADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CPartyBookingInsertADBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CPartyBookingInsertADBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CPartyBookingInsertADBWork> * Instance()
  /* [0x0003:0x000563b4] */ static  class CObjectRecycleMgr<CPartyBookingInsertADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CPartyBookingInsertADBWork *,std::allocator<CPartyBookingInsertADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CPartyBookingInsertADBWork>(const class CObjectRecycleMgr<CPartyBookingInsertADBWork> &)
  private void CObjectRecycleMgr<CPartyBookingInsertADBWork>::CObjectRecycleMgr<CPartyBookingInsertADBWork>(const int)
  private class CObjectRecycleMgr<CPartyBookingInsertADBWork> & operator=(const class CObjectRecycleMgr<CPartyBookingInsertADBWork> &)
  private void CObjectRecycleMgr<CPartyBookingInsertADBWork>::~CObjectRecycleMgr<CPartyBookingInsertADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CPartyBookingSearchWork> {
  public class CPartyBookingSearchWork * CObjectRecycleMgr<CPartyBookingSearchWork>::Get()
  public void CObjectRecycleMgr<CPartyBookingSearchWork>::Put(class CPartyBookingSearchWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CPartyBookingSearchWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CPartyBookingSearchWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CPartyBookingSearchWork> * Instance()
  /* [0x0003:0x000563bc] */ static  class CObjectRecycleMgr<CPartyBookingSearchWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CPartyBookingSearchWork *,std::allocator<CPartyBookingSearchWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CPartyBookingSearchWork>(const class CObjectRecycleMgr<CPartyBookingSearchWork> &)
  private void CObjectRecycleMgr<CPartyBookingSearchWork>::CObjectRecycleMgr<CPartyBookingSearchWork>(const int)
  private class CObjectRecycleMgr<CPartyBookingSearchWork> & operator=(const class CObjectRecycleMgr<CPartyBookingSearchWork> &)
  private void CObjectRecycleMgr<CPartyBookingSearchWork>::~CObjectRecycleMgr<CPartyBookingSearchWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CPartyBookingUpdateADBWork> {
  public class CPartyBookingUpdateADBWork * CObjectRecycleMgr<CPartyBookingUpdateADBWork>::Get()
  public void CObjectRecycleMgr<CPartyBookingUpdateADBWork>::Put(class CPartyBookingUpdateADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CPartyBookingUpdateADBWork>::CreateInstance(const int)
  public static void DestoryInstance()
  public static class CObjectRecycleMgr<CPartyBookingUpdateADBWork> * Instance()
  /* [0x0003:0x000563b0] */ static  class CObjectRecycleMgr<CPartyBookingUpdateADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CPartyBookingUpdateADBWork *,std::allocator<CPartyBookingUpdateADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CPartyBookingUpdateADBWork>(const class CObjectRecycleMgr<CPartyBookingUpdateADBWork> &)
  private void CObjectRecycleMgr<CPartyBookingUpdateADBWork>::CObjectRecycleMgr<CPartyBookingUpdateADBWork>(const int)
  private class CObjectRecycleMgr<CPartyBookingUpdateADBWork> & operator=(const class CObjectRecycleMgr<CPartyBookingUpdateADBWork> &)
  private void CObjectRecycleMgr<CPartyBookingUpdateADBWork>::~CObjectRecycleMgr<CPartyBookingUpdateADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CSaveAllADBWork> {
  public class CSaveAllADBWork * CObjectRecycleMgr<CSaveAllADBWork>::Get()
  public void CObjectRecycleMgr<CSaveAllADBWork>::Put(class CSaveAllADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CSaveAllADBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CSaveAllADBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CSaveAllADBWork> * Instance()
  /* [0x0003:0x00056258] */ static  class CObjectRecycleMgr<CSaveAllADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CSaveAllADBWork *,std::allocator<CSaveAllADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CSaveAllADBWork>(const class CObjectRecycleMgr<CSaveAllADBWork> &)
  private void CObjectRecycleMgr<CSaveAllADBWork>::CObjectRecycleMgr<CSaveAllADBWork>(const int)
  private class CObjectRecycleMgr<CSaveAllADBWork> & operator=(const class CObjectRecycleMgr<CSaveAllADBWork> &)
  private void CObjectRecycleMgr<CSaveAllADBWork>::~CObjectRecycleMgr<CSaveAllADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CSaveBodyItemADBWork> {
  public class CSaveBodyItemADBWork * CObjectRecycleMgr<CSaveBodyItemADBWork>::Get()
  public void CObjectRecycleMgr<CSaveBodyItemADBWork>::Put(class CSaveBodyItemADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CSaveBodyItemADBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CSaveBodyItemADBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CSaveBodyItemADBWork> * Instance()
  /* [0x0003:0x0005626c] */ static  class CObjectRecycleMgr<CSaveBodyItemADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CSaveBodyItemADBWork *,std::allocator<CSaveBodyItemADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CSaveBodyItemADBWork>(const class CObjectRecycleMgr<CSaveBodyItemADBWork> &)
  private void CObjectRecycleMgr<CSaveBodyItemADBWork>::CObjectRecycleMgr<CSaveBodyItemADBWork>(const int)
  private class CObjectRecycleMgr<CSaveBodyItemADBWork> & operator=(const class CObjectRecycleMgr<CSaveBodyItemADBWork> &)
  private void CObjectRecycleMgr<CSaveBodyItemADBWork>::~CObjectRecycleMgr<CSaveBodyItemADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CSaveCartADBWork> {
  public class CSaveCartADBWork * CObjectRecycleMgr<CSaveCartADBWork>::Get()
  public void CObjectRecycleMgr<CSaveCartADBWork>::Put(class CSaveCartADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CSaveCartADBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CSaveCartADBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CSaveCartADBWork> * Instance()
  /* [0x0003:0x00056264] */ static  class CObjectRecycleMgr<CSaveCartADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CSaveCartADBWork *,std::allocator<CSaveCartADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CSaveCartADBWork>(const class CObjectRecycleMgr<CSaveCartADBWork> &)
  private void CObjectRecycleMgr<CSaveCartADBWork>::CObjectRecycleMgr<CSaveCartADBWork>(const int)
  private class CObjectRecycleMgr<CSaveCartADBWork> & operator=(const class CObjectRecycleMgr<CSaveCartADBWork> &)
  private void CObjectRecycleMgr<CSaveCartADBWork>::~CObjectRecycleMgr<CSaveCartADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CSaveQuestEventDBWork> {
  public class CSaveQuestEventDBWork * Get()
  public void CObjectRecycleMgr<CSaveQuestEventDBWork>::Put(class CSaveQuestEventDBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CreateInstance(const int)
  public static void DestoryInstance()
  public static class CObjectRecycleMgr<CSaveQuestEventDBWork> * Instance()
  /* [0x0003:0x000563ec] */ static  class CObjectRecycleMgr<CSaveQuestEventDBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CSaveQuestEventDBWork *,std::allocator<CSaveQuestEventDBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CSaveQuestEventDBWork>(const class CObjectRecycleMgr<CSaveQuestEventDBWork> &)
  private void CObjectRecycleMgr<CSaveQuestEventDBWork>(const int)
  private class CObjectRecycleMgr<CSaveQuestEventDBWork> & operator=(const class CObjectRecycleMgr<CSaveQuestEventDBWork> &)
  private void ~CObjectRecycleMgr<CSaveQuestEventDBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CSaveStoreADBWork> {
  public class CSaveStoreADBWork * CObjectRecycleMgr<CSaveStoreADBWork>::Get()
  public void CObjectRecycleMgr<CSaveStoreADBWork>::Put(class CSaveStoreADBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CSaveStoreADBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CSaveStoreADBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CSaveStoreADBWork> * Instance()
  /* [0x0003:0x00056268] */ static  class CObjectRecycleMgr<CSaveStoreADBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CSaveStoreADBWork *,std::allocator<CSaveStoreADBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CSaveStoreADBWork>(const class CObjectRecycleMgr<CSaveStoreADBWork> &)
  private void CObjectRecycleMgr<CSaveStoreADBWork>::CObjectRecycleMgr<CSaveStoreADBWork>(const int)
  private class CObjectRecycleMgr<CSaveStoreADBWork> & operator=(const class CObjectRecycleMgr<CSaveStoreADBWork> &)
  private void CObjectRecycleMgr<CSaveStoreADBWork>::~CObjectRecycleMgr<CSaveStoreADBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CObjectRecycleMgr<CUpdateQuestDBWork> {
  public class CUpdateQuestDBWork * CObjectRecycleMgr<CUpdateQuestDBWork>::Get()
  public void CObjectRecycleMgr<CUpdateQuestDBWork>::Put(class CUpdateQuestDBWork *)
  public bool isOK()
  public int GetObjectNewCnt()
  public int GetObjectDeleteCnt()
  public int GetObjectMaxCnt()
  public static bool CObjectRecycleMgr<CUpdateQuestDBWork>::CreateInstance(const int)
  public static void CObjectRecycleMgr<CUpdateQuestDBWork>::DestoryInstance()
  public static class CObjectRecycleMgr<CUpdateQuestDBWork> * Instance()
  /* [0x0003:0x000563ac] */ static  class CObjectRecycleMgr<CUpdateQuestDBWork> * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::list<CUpdateQuestDBWork *,std::allocator<CUpdateQuestDBWork *> > m_WastepaperBasket

  /* this+0x10 */ int m_ObjectNewCnt
  /* this+0x14 */ int m_ObjectDeleteCnt
  /* this+0x18 */ const int m_ObjectMaxCnt
  private void CObjectRecycleMgr<CUpdateQuestDBWork>(const class CObjectRecycleMgr<CUpdateQuestDBWork> &)
  private void CObjectRecycleMgr<CUpdateQuestDBWork>::CObjectRecycleMgr<CUpdateQuestDBWork>(const int)
  private class CObjectRecycleMgr<CUpdateQuestDBWork> & operator=(const class CObjectRecycleMgr<CUpdateQuestDBWork> &)
  private void CObjectRecycleMgr<CUpdateQuestDBWork>::~CObjectRecycleMgr<CUpdateQuestDBWork>()
  private void * __vecDelDtor(unsigned int)
}

class CPC {
  CActor, offset = 0x0

    /* this+0x4d4 */ class CVariableSKcastingTMvar m_VariableSKcasingTMvar

  public int CPC::ModifyVariableSKcastingTM(const int, const int)
  public void CPC::VariableSKcastingTMPropertyAmountAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void CPC::VariableSKcastingTMPropertyPermillAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void CPC::VariableSKcastingTMPropertyAmountRemove(const class SKcastingTMvarStuff::CIdentity &)
  public void CPC::VariableSKcastingTMPropertyPermillRemove(const class SKcastingTMvarStuff::CIdentity &)
  /* this+0x500 */ class CFixedSKcastingTMvar m_FixedSKcasingTMvar

  public int CPC::ModifyFixedSKcastingTM(const int, const int)
  public void CPC::FixedSKcastingTMPropertyAmountAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void CPC::FixedSKcastingTMPropertyPermillAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void CPC::FixedSKcastingTMPropertyAmountRemove(const class SKcastingTMvarStuff::CIdentity &)
  public void CPC::FixedSKcastingTMPropertyPermillRemove(const class SKcastingTMvarStuff::CIdentity &)
  public bool CPC::AsyncMonopolyProcess()
  public enum AsyncMonopolyProcess::enumType CPC::GetAsyncMonopolyProcessType()
  public void CPC::SetAsyncMonopolyProcess(class std::tr1::shared_ptr<CAsyncMonopolyProcess> &)
  /* this+0x52c */ class std::tr1::shared_ptr<CAsyncMonopolyProcess> m_AsyncMonopolyProcessPtr

  public const char * CPC::GetNamePtr()
  public int SkillAttackExt(struct SKILLATTACK_MSG *, int, int, const bool)
  /* this+0x534 */ int m_StoreMaxItemSize
  public int GetStoreMaxItemSize()
  public const int GetMapID()
  public void CPC::ForceMapMove_To_RestartMap()
  public bool IsPartyJoinMSGRefuse()
  public bool IsOpenEquipmentWin()
    /* this+0x538 */ enum CPC::enumDisconnectStep m_DisconnectStep
  public void SetDisconnectStep(const enum CPC::enumDisconnectStep)
  public const enum CPC::enumDisconnectStep GetDisconnectStep()
  public class CPCClientUpdater * GetClientUpdaterPtr()
  public void CPC::AsyncSaveBodyItem()
  public void CPC::AsyncSaveCart()
  public void CPC::AsyncSaveCharacterInfo(const int)
  public void CPC::AsyncLoadStore()
  public void CPC::OnCM_NOTIFY_STOREDITEM()
  public void CPC::AsyncSaveStore(const bool)
  public void CPC::AsyncLoadCart(class CCharacter * const)
  public void CPC::AsyncSaveALL_AFTER_ACTION_NONE()
  public void CPC::AsyncSaveALL_AFTER_ACTION_ANYTIME()
  public void CPC::AsyncSaveALL_AFTER_ACTION_XXX()
  public void CPC::AsyncDBComplete_LoadCart(const int, const unsigned char *, const int)
  public void CPC::GetStoreItemDBFormat(class CItemDBFmtBuffer &)
  public void StoreItemReset()
  public int GetBodyItemSize()
  /* this+0x53c */ class CPCHireItemCtrl m_HireItemCtrl

  public void CPC::GetDBInfo(const int, struct CHARINFO_TO_CHARACTERDB &)
  public class IVItItem * CPC::SearchItemByUniqueIdentityNum(const enum enumInventoryType, const __int64)
  public void HireItemCheckAdd(const enum enumInventoryType, class IVItItem *)
  public void CPC::TransferSKILLtoPARTYmember(class CCharacter * const, const int, const int, const int, const int, const int)
  public void MercenaryCall_Create_After(const int)
  public void MercenaryCall_Delete_After(const int)
  /* this+0x554 */ class CPCElemental m_Elemental

  public int CPC::GetAdditionalSkillSPCost(const int)
  public void SendPVPPoint()
  public int CPC::GetCountOfMyNameItem(int)
  public void SetBanTime(unsigned long)
  public unsigned long GetBanTime()
  public void CPC(class CPC &)
  public void CPC::CPC()
  public void CPC::~CPC()
  public void CPC::Init(class CAsyncStream *, unsigned long)
  public void CPC::GameGuardInit()
  public int CPC::OnProcess()
  public unsigned long CPC::GetAccountID()
  public const char * GetAccountName()
  public int IsMapType(int)
  public int CPC::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public int CPC::GetParameterValue(unsigned short, int &)
  public int CPC::UpdateParameterValue(unsigned short, int)
  public int CPC::GetBodyItemCount(unsigned short, int &)
  public int CPC::UpdateBodyItemCount(unsigned short, int, bool)
  public class IVItItem * CPC::UpdateBodyItemCountByNPC(unsigned short, int, bool)
  public void CPC::InsertCommand(struct COMMAND_QUEUE *)
  public void CPC::DisableCommand(unsigned long)
  public void CPC::CheckCommandQueue()
  public struct COMMAND_QUEUE * CPC::SearchCommand(unsigned long)
  public int CPC::IsMyArea(class CCharacter *, int)
  public int CPC::IsTarget(class CCharacter *, unsigned long)
  public int CPC::GetScale()
  public void CPC::OnMsgFromItemServer(unsigned long, class CITZMsg *)
  public void ProcessRegionSkill(int, short, class CCharacter *, int, int)
  public unsigned short CPC::GetItemCount(unsigned short)
  public int GetJustBodyItemCount(unsigned short, int &)
  public int CPC::GetEquipItemCount(unsigned short, int &)
  public int CPC::IsDisconnectable()
  public void CPC::GetAttackLastTime(long &)
  public void CPC::SetAttackLastTime(long)
  public void CPC::GetLastAttackedTime(long &)
  public void CPC::SetLastAttackedTime(long)
  public int GetErrorCount()
  public int CPC::AddExWhisperList(const char *)
  public int CPC::DeleteExWhisperList(const char *)
  public void CPC::SettingWhisperState(int)
  public void CPC::GetWhisperList(int &, char *, const int)
  public int CPC::SearchWhisperList(const char *)
  public void CPC::MulticastDestroyRoom()
  public void CPC::RoomNewEntry(unsigned long)
  public void CPC::MulticastRoomNewEntry(unsigned long)
  public int CPC::IsSendable()
  public bool IsSendable2(const int)
  public int CPC::IsLockOnMode()
  public void CPC::SetLockOnMode(int)
  public unsigned long CPC::GetTargetAID()
  public void CPC::SetTargetAID(unsigned long)
  public void CPC::CancelLockOnMode()
  public class CPacketHandler * CPC::GetPacketHandler()
  public void CPC::Reset()
  public unsigned long CPC::GetState()
  public void CPC::SetState(unsigned long)
  public unsigned long CPC::GetRoomID()
  public void CPC::SetRoomID(unsigned long)
  public int CPC::isNotifyPosition(short, short)
  public int isPartyMaster()
  public void CPC::NotifyPositionToParty(short, short)
  public void CPC::NotifyPositionToGuild(short, short)
  public void CPC::NotifyHpToParty(const unsigned long, const int, const int)
  public void CPC::NotifyParameter(unsigned long, int)
  public unsigned long CPC::GetCharacterID()
  public void CPC::SkillUseAck(unsigned short, unsigned short, bool, unsigned char)
  public int GetJob()
  public int GetPureJob()
  public int CPC::GetCategoryFirstJob()
  public int GetCategorySecondJob()
  public static int CPC::GetCategorySecondJob(const int)
  public int CPC::GetCategoryThirdJob()
  public void CPC::ChangeJob(int)
  public void CPC::ChangeJobAfter(const int, const int, const int)
  public int CPC::GetSP()
  public void CPC::DrainDamage(int)
  public int CPC::GetNormalAttackPower(class CCharacter *, int, int, unsigned short, short, int)
  public short GetAttPowerOnClient()
  public short CPC::GetAttackSuccessPercent(class CCharacter *, const int, int)
  public short GetAttMPower()
  public short CPC::GetRefiningAttPower(int)
  public short GetRefiningAttPowerOnClient()
  public short CPC::GetItemDef(int, int)
  public short CPC::GetStatusDef()
  public short CPC::GetAttSucPercentOnClient()
  public int CPC::GetAvoidableSucPerOnClient()
  public int CPC::GetPlusAvoidableSucPerOnClient()
  public int CPC::GetWeaponProperty(int, int)
  public void CPC::ReqItemIdentify(short)
  public void CPC::ReqItemCompositionList(short)
  public void CPC::ReqItemComposition(short, short)
  public void CPC::ReqItemRepair(const struct REPAIRITEM_INFO &)
  public void CPC::ReqWeaponRefine(short)
  public int CPC::IsDamageMotionPossible()
  public int CPC::IsRightProperty(int)
  public int CPC::IsMovable()
  public int CPC::IsAvoidable(int, int, int)
  public bool CPC::IsAvoidableImpl(const int, const int, const bool)
  public short CPC::GetAttackCount(bool &)
  public int CPC::IsAttackable(unsigned short)
  public int CPC::IsPickable()
  public int CPC::IsSkillUsable(unsigned short)
  public int CPC::IsSkillEnable(int, int, class CCharacter *)
  public int CPC::IsSitable()
  public int CPC::IsCritical(class CCharacter *, int)
  public int CPC::IsLucky()
  public int IsTouchableState(unsigned long)
  public void CPC::AddTouchNPCList(unsigned long)
  public short CPC::GetCriticalSuccessValue()
  public int CPC::GetPlusAttRange()
  public void CPC::SetEffectStateTimeInfo(unsigned long, int)
  public void CPC::SetBodyStateTimeInfo(unsigned long, unsigned long, int)
  public void CPC::SetInvincibleTimeInfo(unsigned long, int)
  public int CPC::GetInvincibleTimeInfo(int)
  public int CPC::GetSpeed()
  public int CPC::GetAttackHasteValue1()
  public int CPC::GetAttackHasteValue2()
  public int CPC::GetAttackSlowValue()
  public int CPC::GetMoveHasteValue1()
  public int CPC::GetMoveHasteValue2()
  public int CPC::GetMoveSlowValue()
  public int CPC::GetBodyMaxItemWeight()
  public int CPC::GetCartMaxItemWeight()
  public int GetBodyMaxItemSize()
  public int GetCartMaxItemSize()
  public int CPC::GetBodyItemWeight()
  public int GetExchangeMaxItemSize()
  public int GetMailMaxItemSize()
  public int GetMCStoreMaxSize()
  public void SetChatLog(char *, char *)
  public void InsertChatLog(char *, int)
  public int CPC::IsMyPartyMember(unsigned long)
  public int CPC::IsPKModeON()
  public int CPC::IsRightForm(int, int, int, int)
  public void CPC::ChangePKMode(bool)
  public void CPC::InformAttFailureForDistance(unsigned long, short, short)
  public void ResetStatus()
  public void CPC::SetEffectState(int)
  public void CPC::Act_EFST_KAAHI()
  public int CPC::Act_EFST_DWARNING(class CCharacter *)
  public int CPC::Act_EFST_DBLOCK(class CCharacter *, int)
  public int CPC::Act_EFST_KAUPE()
  public void CPC::ResetHealthState(short)
  public void CPC::ReductionPredelay(int &)
  public class IVItEquipItem * CPC::GetEquipItem(unsigned long)
  public int IsFirstJob()
  public int IsSecondJob()
  public int IsThirdJob()
  public int CPC::GetHealAmount(class CCharacter *, short, unsigned short)
  public short CPC::ModifyDamage(class CCharacter *, int &, int, int, unsigned long &, unsigned short, short)
  public void OnSendBattelFileList(const short)
  private void CPC::ModifyDamage_EFST_DEVOTION(class CNpcMercenary * const, int &, unsigned long &, const int, const int, const unsigned short)
  public int CPC::AttackByAutoSpell(unsigned long)
  public bool AttackByAutoSpell_MO_TRIPLEATTACK(const unsigned long)
  public void CPC::ModifyAttackPowerByEffective(class CCharacter *, int, int &)
  public void CPC::SetSpellCasting(unsigned short, short)
  public unsigned short GetSpellCasting()
  public int CPC::IsUsableCellforWaterSkill(int, int)
  public void AddSpeicalZoneList(unsigned long)
  public void CPC::NotifyDevotionList()
  public void CPC::NotifyRecoveryValue(int, int, int)
  public void CPC::NotifyRecoveryValue2(int, int, int)
  public class CNPC * CPC::SummonMobBySkill(int, int, int, int, int)
  public void CPC::UpdateCreatedMobCount(int, int)
  public void CPC::DelSpecialZoneList()
  public void CPC::NotifyUseSkill(unsigned short, unsigned long, unsigned long, short, bool)
  public short CPC::GetDexValue()
  public short CPC::GetStrValue()
  public short CPC::GetIntValue()
  public short CPC::GetLukValue()
  public short CPC::GetAgiValue()
  public short CPC::GetVitValue()
  public short CPC::GetDefaultDexValue()
  public short CPC::GetDefaultStrValue()
  public short CPC::GetDefaultIntValue()
  public short CPC::GetDefaultLukValue()
  public short CPC::GetDefaultAgiValue()
  public short CPC::GetDefaultVitValue()
  public short CPC::GetDexPlusValue()
  public short CPC::GetStrPlusValue()
  public short CPC::GetIntPlusValue()
  public short CPC::GetLukPlusValue()
  public short CPC::GetAgiPlusValue()
  public short CPC::GetVitPlusValue()
  public void SetPlusDexValueByJob(int)
  public void SetPlusStrValueByJob(int)
  public void SetPlusIntValueByJob(int)
  public void SetPlusLukValueByJob(int)
  public void SetPlusAgiValueByJob(int)
  public void SetPlusVitValueByJob(int)
  public int CPC::IsMCStoreOpen()
  public int CPC::IsWarpPossible()
  public int IsValid()
  public void SetValid(const int)
  public int CPC::GetEffectState()
  public int CPC::GetAvoidableSuccessPercent()
  public short CPC::GetStatusAttPower()
  public int CPC::GetItemAttPower(int, int, int)
  public short GetMagicAttMaxPowOnClient()
  public short GetMagicAttMinPowOnClient()
  public short CPC::GetItemMagicDef()
  public short CPC::GetStatusMagicDef()
  public int CPC::GetMagicAttackFinalDamage(class CCharacter *, int, int, unsigned short, const int)
  public void CPC::HealStatus(int)
  public void CPC::NotifyActionFailure(unsigned long)
  public void CPC::NotifyArrowEquiped(unsigned short)
  public class CITP * CPC::GetITPEquipedWeapon()
  public short GetEquipedWeaponType()
  public int CPC::ConsumeItem(unsigned short, int, class IVItItem *, const short)
  public int CPC::ConsumeItemForSkill(unsigned short, int)
  public int CPC::ConsumeJamstone(unsigned short, int, int)
  public int CPC::ConsumeEquipedArrow(short)
  public unsigned long GetCurrentAreaAID(int)
  public unsigned long CPC::GetGroupIDIFexpShare()
  public int CPC::GetMaxHP()
  public short CPC::GetMaxSP()
  public int CPC::GetAttackMotionTime()
  public int CPC::GetAttackedMotionTime()
  public void CPC::PurchaseItemFromMCStore(unsigned long, int, char *, const unsigned long)
  public void CPC::SelectDealType(unsigned long, unsigned char)
  public void CPC::PurchaseItem(int, char *)
  public void CPC::SellItem(const class std::vector<CZ_SELL_ITEM,std::allocator<CZ_SELL_ITEM> > &)
  public void CPC::ReqExchangeItem(unsigned long)
  public void CPC::AckReqExchangeItem(unsigned char)
  public void CPC::AddExchangeItem(short, int)
  public void CPC::ConcludeExchangeItem()
  public void CPC::CancelExchangeItem()
  public void CPC::Send(int, const char *)
  public bool Send2(const unsigned char *, const int)
  public void CPC::ForceSend(int, char *)
  public void CPC::OnDispatchClientRequest(struct Request *)
  public void CloseStore()
  public int IsStoreOpen()
  public void CPC::ParseDBFmtStoreItemData(const int, const unsigned char *)
  public bool IsExchangeOpen()
  public void CPC::ReqMakingItem(struct MAKABLEITEM_INFO *)
  public void ReqNameByGID(unsigned long)
  public void CPC::AddMoney(int)
  public void CPC::DeleteMoney(int)
  public int GetMoney()
  public bool CPC::IsAddableMoney(const __int64)
  public void OnReqOpenMCStore(int, char *)
  public void CPC::OnReqItemListFromMCStore(unsigned long)
  public void CPC::NotifyMCStore(unsigned long)
  public void Save(struct Request *)
  public void CPC::CancelMCStore()
  public double CPC::GetAttackDistance()
  public void CPC::NotifyAttackRange()
  public int CPC::ChkGndSkillDurability()
  public void SetSPPoint(int)
  public void CPC::OnResetStat()
  public void CPC::OnResetSkill3rd()
  public void CPC::OnResetSkill3rdAfter()
  public void CPC::ResetEffectState(int)
  public void CPC::InitEnemyInfo()
  public void CPC::InsertEnemyInfo(struct ENEMY_INFO *)
  public void CPC::UpdateEnemyInfo()
  public struct ENEMY_INFO * CPC::SearchEnemyInfo(unsigned long)
  public void SetLoadingCompleteTime(unsigned long)
  public unsigned long GetLoadingCompleteTime()
  public int CPC::IsInitingState()
  public bool CPC::IsInvincibleTime()
  public void SetLastSendTime(unsigned long)
  public unsigned long GetLastSendTime()
  public void CPC::PingSend()
  public void SetDisconnectStartTime(unsigned long)
  public unsigned long GetDisconnectTime()
  public unsigned long GetIp()
  public class CAsyncStream * GetStream()
  public struct CharacterInfo * GetCharacterInfo()
  public class CPCBattle * GetPCBattle()
  public int GetDesX()
  public int GetDesY()
  public int GetPVPWinPoint()
  public void SetPVPWinPoint(int)
  public void CPC::UpdatePVPWinPoint(int)
  public void CPC::SetPVPRanking(int)
  public int GetPVPRanking()
  public void SetPVPTotal(int)
  public int GetPVPTotal()
  public void CPC::MulticastEffect(int)
  public class CNPC * CPC::CallMonster(int, int, int, const char *, const char *, int, int, int)
  public void CPC::CallPet(class IVItEquipItem *)
  public void CPC::RemovePet()
  public int CPC::GetPetRelationship()
  public int CPC::IsPetActive()
  public void CPC::SetParameterValue(unsigned short, int)
  public void CPC::OnEmotion(int)
  public int CPC::IsSiegeMode()
  public void ReStart(unsigned long)
  public int CPC::IsGuildMaster(int)
  public int CPC::GetGDID()
  public int CPC::IsMyAgitCase()
  public int IsReadyToSave()
  public int CPC::ModifyMoney(int)
  public int CPC::IsAlly(unsigned long)
  public int CPC::IsMyGuildMember(class CCharacter *, int)
  public int GetPartyItemPickupRule()
  public int GetPartyItemDivisionRule()
  public int CPC::GetDamagedItemNum()
  public void CPC::RepairDamagedItem()
  public void SetEventNo(int)
  public int GetEventNo()
  public int CPC::IsBadGuy()
  public void CPC::OnEnableItemMove(int)
  public void CPC::OnDisableItemMove()
  public int CPC::IsItemMovable()
  public void CPC::ServerMove()
  public void TakeOffEquip(unsigned long)
  public void CPC::CheckWeaponState()
  public char * GetCharacterName()
  public void CPC::OnMakeCouple(unsigned long)
  public void CPC::SetCoupleInfo(const unsigned long, const unsigned long, const char *, const char *, const struct _SYSTEMTIME &, const bool)
  public char * GetPartnerName()
  public void CPC::SetPartnerInfo(unsigned long, const char *)
  public char * CPC::GetGuildName()
  public int CPC::GetGuildSkillLevel(unsigned short)
  public void CPC::SetEffectByGospel(class CCharacter *)
  public void CPC::ResetEffectByGospel(int)
  public void CPC::OnShowEffect(int)
  public void CPC::OnShowEffect3(int, int)
  public void CPC::OnShowScript(const char *)
  public bool CPC::IsMaxZeny(int)
  public bool CPC::CheckZeny(int)
  public int CPC::IsMaxCount(int, int)
  public bool CPC::IsMaxWeight(int, int)
  public bool CPC::GetMEventZenyName(int, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public bool CPC::GetMEventItemName(int, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public bool CPC::GetMEventItemID(int, int &)
  public bool CPC::GetMEventZeny(int)
  public bool CPC::GetMEventItem(int, int &, short &, int)
  public bool CPC::ReqNpcCreateGuild(char *)
  public bool CPC::Divorce()
  public void CPC::NotifyDivorce(unsigned long, char *)
  public void CPC::DeleteMarriagering()
  public struct PARTNER_INFO * GetMarriedInfo()
  public int CPC::IsInventoryRemainCount(int, int)
  public void SetLastTargetAID(unsigned long)
  public unsigned long GetLastTargetAID()
  public void CPC::InitMobileEvent()
  public int noExistPoint()
  public void SetEventPoint(int)
  public void CPC::PCDataMoveToPVP()
  public int CPC::IsBaby()
  public void CPC::OnMakeFamily(unsigned long, unsigned long)
  public void CPC::OnDeleteCoupleAfter()
  public void CPC::OnMakeCoupleAfter(const unsigned long, const struct _SYSTEMTIME &)
  public void CPC::OnMakeFamilyAfter(const int, const unsigned long, const unsigned long)
  public void CPC::OnDeleteFamilyAfter()
  public void CPC::SetFamilyInfo(const int, const unsigned long, const unsigned long, const unsigned long, const char *, const char *, const char *)
  public struct FAMILY_INFO * GetFamilyInfo()
  public void SetFamilyExpOption(short)
  public void OnDeleteFamily()
  public int CPC::MoveForward(unsigned long, int &, int &, int, int, int)
  public void CPC::SetReadyMotion(int)
  public void SetWorldEntrance(const bool)
  public bool GetWorldEntrance()
  /* this+0x55c */ bool m_bWorldEntrance
  public const class PERSONAL_INFO::CPersonalInfo & GetPtrPersonalInfo()
  public int GetPersonalDropFactor()
  public int GetPersonalPayType()
  public int GetPersonalExpFactor()
  public int GetPersonalConnectionArea()
  public int GetPersonalConnectionState()
  public int IsPcBang()
  public int GetPcBangPremiumType()
  public int GetPVPPoint()
  public void SetPVPPoint(int)
  public void UpdatePVPPoint(int)
  public void SendPVPPoint2()
  public int GetWinPoint()
  public void AddWinPoint()
  public void SetWinPoint(int)
  public int GetLosePoint()
  public void AddLosePoint()
  public void SetLosePoint(int)
  public void CPC::SetPlusMakerPower()
  public void SetLessEffect(int)
  public int GetLessEffect()
  public int CPC::IsCrazyKiller()
  public int CPC::IsGiveExpToCrazyKiller()
  public int CPC::IsPossibleToGetExp()
  public void CPC::ProcessPKInfo()
  public int CPC::SavePKInfo()
  public int CPC::UpdatePKInfo(class CPC *, class CPC *)
  public void CPC::SetPKInfo(int, int, char *, char *, int)
  public void CPC::SetKillerSystem()
  public void CPC::NotifyPKInfo()
  public void CPC::GetPKInfo()
  public void CPC::CheckPalmStrike()
  public void CPC::NotifyAttackAction(class CCharacter *, class CCharacter *, class CCharacter *, int, int)
  public void CPC::NotifySkillAction(class CCharacter *, class CCharacter *, class CCharacter *, int, short, short, unsigned short)
  public char * CPC::GetRestartMapName()
  public int CPC::IsSkillEnableMapProperty(int)
  public void CPC::OnAckStorePassword(struct PACKET_CZ_ACK_STORE_PASSWORD &)
  public void CPC::OnAckCashPassword(struct PACKET_CZ_ACK_CASH_PASSWORD &)
  public bool CPC::GetLotto(int, int &)
  public bool CPC::SetLotto(int, int, int, int, int, int)
  public void InitLotto()
  public int CPC::PutInventoryBinaryItem(char *, int)
  public const char * GetPartyName()
  public int CPC::isBodyAddMailItem(unsigned short, unsigned long, int, struct EQUIPSLOTINFO, __int64)
  public void CPC::SetLastOpenMailName(char *)
  public int GetItemScriptEventNo()
  public void CPC::ResetItemScriptEvent()
  public void CPC::ReduceSPByUseSkill(int)
  public bool IsExistEquipedArrowItem(const int, const int)
  public bool ConsumeEquipedArrowItemByUseSkill(const int, const int)
  public bool CPC::IsExistItem(int, int, bool)
  public bool CPC::ConsumeItemByUseSkill(int, int, bool)
  private int CPC::GetAttackFinalDamage(class CCharacter *, int, int, int, int, int, int, unsigned short, short)
  public int CPC::GetAttackFinalDamage(struct ATTACK_INFO *)
  public int CPC::GetModifiedTargetItemDEF(class CCharacter *)
  private int CPC::GetModifiedTargetItemMDEF2(class CCharacter *)
  public int CPC::GetModifiedTargetItemMDEF(class CCharacter *)
  public void CPC::ApplyExtraDEF(int &, class CCharacter *)
  public void CPC::ApplyExtraMDEF(int &)
  public int CPC::SetEffective(int, int, int, int, int, int)
  public void CPC::ResetEffective(int, int)
  public bool CPC::IsGroundEffective(int, int &, bool &)
  public void CPC::ProcessGroundEffective(int, int, bool)
  public void CPC::SetOnShowEFST(int)
  public void CPC::SetOffShowEFST(int)
  public void CPC::OnChangeStatusAmount(int, unsigned short, unsigned long, int)
  public void CPC::NotifyStatusAmount(unsigned short, int)
  public bool CPC::IsDeadState()
  public void CPC::SendNPCCashPoint(unsigned long, int, int)
  public void CPC::InsertCashPointItem(unsigned short, short, const int, const int, const int, const int, char *)
  public void UnLockCashPoint()
  public void CPC::SendPacketToPartyInMap(int, char *, bool)
  public void CPC::SendPacketToPartyInMapOuterRange(int, char *)
  public void CPC::NotifyEquipItemDamaged(unsigned short)
  public short GetSkillLevel(unsigned short, int)
  public short CPC::GetHealthState()
  public short CPC::GetBodyState()
  public short GetExtDodgePercent()
  public short GetPerfectExtDodgePercent()
  public short GetPlusHitPercent()
  public void AsyncDBComplete_LoadQuestEvent(class std::list<CLogonPermitADBWork::CQuestEventData::tQuest,std::allocator<CLogonPermitADBWork::CQuestEventData::tQuest> > &)
  public int GetPlusPowerOfItem(unsigned long)
  public char CPC::GetCampID()
  public void CPC::SetCampID(char)
  public void CPC::SetBattleFieldInfo(char, short, short, bool)
  public void UpdateBattleFieldRespawnPoint2(short, short)
  public void CPC::MoveToBattleFieldRespawnPoint(short, unsigned long)
  public bool CPC::NotifyHPToBattleFieldCamp(unsigned long, int, int, const char *)
  public void CPC::BroadcastHP(unsigned long, int, int)
  public void CPC::BroadcastHP()
  public void CPC::ClearDevotionList()
  public void CPC::OnStopedProgress()
  public int CPC::MyPartyJobCheck()
  public void CPC::CheckBlockEquipItem()
  public bool CPC::IsMapPropertyBlockEquipItem(const int)
  public void CPC::CheckBlockBuff()
  public int GetPlusStdPropertyDamage(class CCharacter *, int, int, int, unsigned short, short, int)
  public int GetPlusFinalDamage(class CCharacter *, int, unsigned short, short, int, bool, int)
  public int GetPlusStdPropertyMagicDamage(class CCharacter *, int)
  public int GetPlusFinalMagicDamage(class CCharacter *, int, unsigned short)
  public int GetMinusStdPropertyDamage(class CCharacter *, int, unsigned short, int, bool)
  public int GetMinusFinalDamage(class CCharacter *, int, int)
  public void CPC::SendQuestNotifyEffect(unsigned long, short, short, short, short)
  public void CPC::CheckEquipItemUsableLevel()
  public void CPC::NotifyInfoToSection()
  private void CPC::CheckMove()
  private void CPC::CheckStateChange()
  private void CPC::CheckSpecialState(unsigned long)
  private void CPC::CheckMannerPoint()
  private void CPC::CheckGuildPassiveSkill()
  private void CPC::CheckTouchNPCList()
  private int CPC::IsMovableAround(int)
  private void CPC::OnCheckPoint(int)
  private void CPC::DispatchCommand(int)
  private void CPC::ResetCommandQueue()
  private void CPC::DisableAllCommand()
  private void CPC::OnExecExchangeItem(int, const int, const int)
  private void CPC::ResetExchangeItemInfo()
  private void CPC::CartOff()
  private void CPC::MultiCastStateInfo()
  private int GetPartyInMyMapTotalLevel()
  private int GetPartyInMyMapTotalNextExp()
  private int CPC::GetPartyMemberCountInMyMap()
  private void CPC::OnDeleteMemberFromGroup(int, int)
  private void CPC::OnAckMakeGroup(int, int)
  private void CPC::OnGroupList(int, int, int)
  private void CPC::OnAckReqJoinGroup(int, int)
  private void CPC::OnReqJoinGroup(int, int)
  private void CPC::OnNotifyPositionParty(class CCharacter *, int, int, int)
  private void CPC::OnNotifyPositionGuild(class CCharacter *, int, int, int)
  private void CPC::OnGRIDUpdate(int, int)
  private void CPC::OnChatParty(int, int, int)
  private void OnDeleteFromGroupLIst(int)
  private void DeleteCommand(unsigned long)
  private void CPC::OnAddExp(class CCharacter *, int, int)
  private void CPC::AddExp(class CCharacter *, int)
  private void CPC::OnAddJobExp(class CCharacter *, int, int, int)
  private void CPC::AddJobExp(class CCharacter *, int)
  private int CPC::IsShareEnable()
  private void CPC::OnShareExp(class CCharacter *, int)
  private void CPC::OnShareJobExp(class CCharacter *, int)
  private void CPC::OnAddPartyExp(int, int, int)
  private void CPC::OnAddPartyJOBExp(int, int, int)
  private void CPC::OnAddVirtue(int)
  private void CPC::OnDead(unsigned long, int &)
  private void CPC::OnNotifyMakableWeaponItemList()
  private void CPC::OnNotifyMakableMetalItemList()
  private void CPC::OnMVPItem(int)
  private void CPC::OnMVPExp(int)
  private void CPC::OnAddSkill(int)
  private void CPC::MultiCastMVP()
  private void CPC::OnSkillLevelUp(int)
  private void CPC::OnHPPlus(int, int, int)
  private void CPC::OnSPPlus(int, int, int)
  private void CPC::OnUseSkill(int, int, int, int)
  private void CPC::OnUseGroundSkill(int, int, int, int)
  private void CPC::ActSkillToChar_SpATK(int, int, int)
  private void CPC::OPSkillToRangeGuild(int, int, int)
  private void CPC::OPSkillToGuild(int, int, int)
  private void CPC::AttSkillToChar22_1(int, int, int)
  private void SPAttSkillToChar22_1(int, int, int)
  private void CPC::SPAttSkillToChar22_2(int, int, int)
  private void CPC::OperSkillToChar22_1(int, int, int)
  private int CPC::OperSkillToChar22_1_SA_family(const int, const int, const int, const int, const int, const int, class CCharacter * const)
  private void CPC::OperSkillToSelf22_1(int, int, int)
  private void CPC::OnGroundSkill22_1(int, int, int)
  private void CPC::OnTouchedSkillObj22_1(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, int)
  private void CPC::OnTouchedSkillObj22_2(class CCharacter *, struct MSG_TYPE4_FIVEDWORD *, int)
  private int CPC::IsSkillEnable22_1(int, int, int &, class CCharacter *)
  private int CPC::IsSkillEnable22_2(int, int, int &, class CCharacter *)
  private int CPC::GetGrandCrossPos(int, int, int, struct PosInfo *)
  private void SetMagicTargetAID(unsigned long)
  private unsigned long GetMagicTargetAID()
  private void CPC::CancelCasting(int)
  private void CPC::OnAutoSpellList(int, int, int)
  private void CPC::ApplyPlusHpSp(int, int, int)
  private void CPC::OnNotifyMakablePotionItemList()
  private void CPC::AM_ReqMakingItem(struct MAKABLEITEM_INFO *)
  private void CPC::AM_ReqMakingHomun()
  private void CPC::AttSkillToChar22_2(int, int, int)
  private void CPC::OperSkillToChar22_2(int, int, int, class MSGpar::CVar)
  private void CPC::OperSkillToSelf22_2(int, int, int)
  private void CPC::OnGroundSkill22_2(int, int, int)
  private int CPC::SkillAttack(struct SKILLATTACK_MSG *, int, int, const bool)
  private void CPC::OnCM_WARP_BETWEENSERVER()
  private void CPC::OnCM_MODIFY_SKILLCOUNT(class CCharacter *, const int, const int, const int)
  private void OnCM_CLEAR_EVENT()
  private void OnCM_CLEAR_DIALOG(const int)
  private void OnCM_CLOSE_DIALOG(const int)
  private void OnCM_SHOW_IMAGE(const int, const char *)
  private void OnCM_NOTIFY_BAN(const unsigned long, const int)
  private void OnCM_SEND_PACKET(const int, char *)
  private void OnCM_SET_SCRIPT_EVENT_NO(const int)
  private int OnCM_GET_GRID_IFEXPSHARE()
  private void OnCM_ATTACKSKILL_TOCHARACTER(const int, const int, const int)
  private void OnCM_OPERATIONSKILL_TOCHARACTER(const int, const int, const int)
  private void OnCM_OPERATIONSKILL_TOSELF(const int, const int, const int)
  private unsigned long OnCM_GET_CHARACTERID()
  private void OnCM_PROCESSEFFECT_ATTACK(class CCharacter *, const int, const int, const int)
  private void OnCM_NAVIGATION_ACTIVE(const int, const int, const int)
  private void CPC::OnCM_NOTIFY_HP_PARTY(class CCharacter *, const int, const int, const int)
  private void CPC::OnCM_ADD_MEMBER_TO_GROUP(const int, const int)
  public short CPC::SplashAttack(int, short, short, int, int, int, unsigned long, void *, int, int)
  public void CPC::SplashImplicitAttack(const int, short, const short, const int, const unsigned long, const bool)
  private int CPC::SplashAttack2(int, struct PosInfo, int, int, int, struct MSG_TYPE1_TWODWORD *, int, int, struct PosInfo *)
  private void CPC::SplashAttack3(int, struct PosInfo, int, struct MSG_TYPE1_TWODWORD *, int, int)
  private void CPC::CollideSplashAttack(int, class CCharacter *, class CCharacter *, int, int, unsigned short, int, class std::map<CCharacter *,CollideInfo,std::less<CCharacter *>,std::allocator<std::pair<CCharacter * const,CollideInfo> > > &)
  private int CPC::AddRandomAttackPower(const int, const int)
  private void CPC::OnTouchedSkillObject(int, int, int)
  private void CPC::OnHealHP(int)
  private void CPC::OnGroundSkill(int, int, int)
  private void CPC::OnTeleportCharacter(int, int, int)
  private void CPC::OnWarpCharacter(int, int, int)
  private void CPC::OnWarpPositionRemember(int, int, int)
  private void CPC::OnStarPlaceRemember(int, int, int)
  private void CPC::OnBlessingFromAcolyte(class CCharacter *, int, int, int)
  private void CPC::OnPlusAttRangeOnVulture(int, int, int)
  private void CPC::OnIncCarry(int)
  private void CPC::OnIncCarry2(int, int, int)
  private void CPC::OnSgDevil(int, int, int)
  private void CPC::OnSgFriend(int, int, int)
  private void CPC::OnVending(int, int, int)
  /* this+0x55d */ unsigned char m_MaxItemCnt_BuyingStore
  public const unsigned char GetMaxItemCnt_BuyingStore()
  public bool IsOpenBuyingStore()
  public void CPC::OnBuyingStore(int, int, int)
  public void CPC::OnReqClickToBuyingStore(const unsigned long)
  public void CPC::OnNotifyItemInfoInBuyingStore(const unsigned long)
  public void NotifyBuyingStore(const unsigned long)
  public void CancelBuyingStore()
  /* this+0x560 */ int m_SSI_LimitSearchCnt
  /* this+0x564 */ int m_SSI_OpenType
  public void CPC::OpenSearchStoreInfo(const int, const int)
  public void CPC::ClearSearchStoreInfo()
  public void SetSSI_LimitSearchCnt(const int)
  public const int GetSSI_LimitSearchCnt()
  public const int GetSSI_OpenType()
  public void CPC::OnResurrection(int, const int)
  public void CPC::OnMoveStop(int, int, int, bool)
  public void CPC::OnCM_KNOCKBACK(const int, const int, int, const bool)
  public void CPC::OnMoveFast(const int, const int)
  public int CPC::IsAttackableRange(class CCharacter *)
  public void CPC::OnGroupInfoChange(int)
  public void CPC::ReqGroupInfoChangeV2(int, int)
  public void CPC::OnDlgWrite(int)
  public void CPC::OnDlgWriteStr(int)
  public void CPC::OnHealByPercent(int, int)
  public void CPC::OnCompass(int, int, int)
  public void CPC::OnShowImage(int, int)
  public void CPC::OnChangePalette(int, int)
  public void CPC::OnChangeAGI(int, int, int)
  public void CPC::OnChangeDEX(int, int, int)
  public void CPC::OnChangeINT(int, int, int)
  public void CPC::OnChangeLUK(int, int, int)
  public void CPC::OnChangeSTR(int, int, int)
  public void CPC::OnChangeVIT(int, int, int)
  public void CPC::OnCureFromAcolyte()
  public void CPC::OnNotifyItemInfoInMCStore(int)
  public class IVItItem * CPC::OnAddItem(int, int, int, int, bool, const int)
  public void CPC::OnAddReservedEmpeliumItem()
  public void CPC::OnNotifyMannerPointGiven(class CCharacter *, int, int)
  public void CPC::OnItemIdentifySkill(int, int, int)
  public void CPC::OnSuccessOfItemRef(int)
  public void CPC::OnFailureOfItemRef(int)
  public void CPC::OnStandardStatChange(unsigned long)
  public void CPC::OnPVPPlusPoint(int)
  public void CPC::OnNotifyRankingInfo(int, int)
  public short CPC::GetCurrentState()
  public void CPC::SetBodyState(short)
  public void CPC::SetHealthState(short)
  public void CPC::SetCurrentState(short)
  public void CPC::AddGroupMember(unsigned long)
  public void CPC::DeleteGroupMember(unsigned long)
  public void CPC::ResetGroupMember()
  public void CPC::DetectHidingCharacter(int, struct SKILLATTACK_MSG *, int, int, int)
  public void CPC::KnuckBack(class CCharacter *, short, int, short)
  private void CPC::NotifyGroundSkillUsing(unsigned short, short, short, short, unsigned long)
  private int CPC::GetFireWallNeighborCells(short, short, int, int, int *)
  private void CPC::GetIceWallNeighborCells(short, short, int, int, int, struct PosInfo *)
  private void CPC::GetPushedPosition2(int, int, int, int, struct PosInfo &)
  private int GetSplashCells(struct PosInfo, struct PosInfo, int, int, struct PosInfo *)
  private void CPC::GetSplashCells2(struct PosInfo, struct PosInfo, int, struct PosInfo *)
  private void CPC::NotifyItemThrowed(short, short)
  private void CPC::NotifyDeleteItemFromBody(const unsigned short, const short, const short)
  private void CPC::InitTime()
  private int GetLockCounter()
  private void ModifyLockCounter(int)
  private void CPC::OnSummon(const int)
  private void CPC::OnDamagedWeapon()
  private void CPC::OnDamagedArmor()
  private void CPC::OnSendPlayBgm(const char *)
  private void CPC::OnDamageEquipment(int)
  private void CPC::UpdateAttackMotionTime()
  private void CPC::UpdateAvoidableSucPerOnClient()
  private void CPC::UpdateStatusAttPower()
  private void CPC::UpdateAttSucPercentOnClient()
  private void CPC::StartCapture(int)
  private void CPC::TryCaptureMonster(unsigned long)
  private void CPC::CommandPet(char)
  private void CPC::RenamePet(char *)
  private void CPC::SelectPetEgg(int)
  private void CPC::GetPetEggInfo(int)
  private void CPC::SendMsgToPet(int, int)
  private void CPC::OnFeedPet()
  private void CPC::OnUseIncubator()
  private int CPC::ConvertPetToPetEgg()
  private class CNpcPet * CPC::GetMyPetObject()
  private int CPC::OnUsePetAcc(unsigned short)
  private void CPC::PetAct(int)
  private int CPC::IsPetWearable(unsigned short)
  private int CPC::IsEnableCart()
  private int CPC::IsSucessCooking(short, short)
  private int CPC::CheckGameGuard()
  private void CPC::SetGameGuard(struct _GG_AUTH_DATA *)
  private void CPC::OnCM_NOTIFY_CASHITEM()
  private bool CPC::IsCaptureSuccess(class CNPC *, int)
  private bool CPC::IsCapturable(class CNPC *)
  private void CPC::OnCooking(short)
  private void CPC::OnChangedHP()
  private void CPC::OnChangedSP()
  private void CPC::MoveItem(unsigned char, short, int)
  private void CPC::LoadEffect3rd(class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > &)
  public void CPC::GetEfstListDBFmt_And_UpdateResetFlag(class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > &, const bool)
  private int CPC::AddMailAndAuctionItem(int, short, int)
  private void CPC::OnConSumeSpecialItem(int)
  private void CPC::OnHuntingList(int)
  private void CPC::LoadHuntingList()
  private void CPC::LoadTimeList()
  private void CPC::SaveHuntingList()
  private void CPC::SaveTimeList()
  private int CPC::GetPetEgg(int)
  private void CPC::GetCashPoint(unsigned long)
  private void CPC::PCBuyCashPointItem(unsigned short, short, int, int)
  private void SimpleCashShop()
  private void SendSimpleCashShopItemList(int, int)
  private void CheckSimpleCashShopBTNShow()
  public void SetSimpleCashShopOpen(bool)
  public bool GetSimpleCashShopOpen()
  public void CPC::SendZCMsg(const unsigned short)
  private void CPC::OnAddParamTimeByFood(unsigned short, unsigned long, int, int)
  private bool CPC::IsEnableSetEFSTFood(unsigned short, int)
  private int CPC::GetEfst_PlusExp(const unsigned short, const int)
  private void CPC::ModifyExpByDeathPenalty(int &, int &)
  private void CPC::OnPartyCall()
  private void CPC::OnStandingResurrection()
  private void CPC::OnUseBossPerception(unsigned long)
  private void CPC::OnNotifyBossInfo(char *)
  private void CPC::OnOpenDialogWriteStr(unsigned long)
  private void CPC::ApplyHealSkillPercent(int &)
  private bool CPC::IsAttackHit(class CCharacter *, const int, const int, const int)
  private bool IsMagicAttackHit(class CCharacter *)
  private void GetPlusATTPowerPercent(int &)
  private void GetPlusATTSuccessPercent(int &)
  private int CPC::GetPlusPropertyDamageWithBlackSmithWeapon(class CCharacter *, int, int, int, int, unsigned short)
  private void GetPlusMagicPowerPercent(int &)
  private void ResetDeadCount()
  private void AddDeadCount()
  private short GetDeadCount()
  private bool CPC::AutoGoToTown()
  private int GetIgnoreDEFDamage()
  private bool ReduceSPByNormalAttack(int)
  private int CPC::GetRandomRefinePower(int)
  private void ModifyItemPowerByScale(int &, int, int)
  private int GetStatusPowerModifyValue(class CCharacter *)
  public int CPC::GetMagicAttackModifiedPower(class CCharacter *, int, int, unsigned short, int)
  public void CPC::ChangePropertyTolerance(int, int, int)
  public void CPC::ChangeRaceTolerance(int, int)
  public void CPC::OnQuestHuntingList(int)
  public void CPC::SetSkillSinglePostDelay(unsigned short, unsigned long)
  public void CPC::UpdateRaceInfo(const int, const int, const int, const int)
  public void CPC::SendZCWhisperFromServer(const char *, <NoType>)
  public void CPC::OnNotifyMakableRuneItemList(int)
  public void CPC::RK_ReqMakingItem(struct MAKABLEITEM_INFO *)
  public int CPC::IsSuccessRuneUse(int)
  public void CPC::OnNotifyMakableNewPoisonList()
  public void CPC::GC_ReqMakingItem(const struct MAKABLEITEM_INFO &)
  public void CPC::NC_MAGICDECOY_operate(const int)
  public int CPC::GetEnableMaxNumSpirits(int)
  public bool CPC::DetectAndReleaseHidingState(class CCharacter *)
  public int GetEnableDelayTimeForComboAttack()
  public int GetComboAttackPostDelayTime(int)
  public int CPC::GetPlusRefinerySuccessPercent()
  public int CPC::DownGradeOfItemRef(int, int)
  public int CPC::SuccessRandomRefItem(int, int)
  public void CPC::OnSECashShopOpen()
  public void CPC::OnSEGetCashShopList(const short)
  public void CPC::OnSEPcBuyCashItemList(const int, const class std::vector<CASH_BUY_ITEM,std::allocator<CASH_BUY_ITEM> > &, const int)
  public bool CPC::OnSeBuyCashItem(const int, const int, const int, int &)
  public void CPC::ProcessActionAttack(struct PACKET_ZC_NOTIFY_ACT3 *, int)
  public int CPC::GetPhysicsFinalDamage(class CCharacter *, int, int, int, int, int, int, unsigned short, short)
  public int CPC::GetPhysicsBaseATKPower(class CCharacter *, int, int, unsigned short, short, int)
  public int CPC::GetPhysicsTargetSKValue(class CCharacter *, const unsigned short, const int, const int)
  public int CPC::GetMagicFinalDamage(class CCharacter *, int, int, unsigned short, const int)
  public int CPC::GetMagicBaseATKPower(class CCharacter *)
  public int CPC::GetMagicFinalATKPower(class CCharacter *, int, int, unsigned short, int, int)
  public int CPC::GetMagicTargetSKValue(class CCharacter *, const int, const unsigned short)
  public int CPC::GetTargetSTDValue(class CCharacter *, int, unsigned short, int, bool)
  public void CPC::ModifyDamage_ATKED(class CCharacter *, int &, int, int, int, int, int)
  public int CPC::SkillAttack_Manual(struct SKILLATTACK_MSG *, const int, const int)
  private void CPC::MO_TRIPLEATTACK(int, struct SKILLATTACK_MSG &, struct MSG_TYPE4_FIVEDWORD *)
  private void CPC::MO_BODYRELOCATION(const int, const int, const int)
  private int CPC::MO_EXTREMITYFIST(class CCharacter *, int, const int, const int)
  private void CPC::BA_DISSONANCE(struct MSG_TYPE4_FIVEDWORD *, const int)
  private void CPC::BA_APPLEIDUN_OnTouched(class CCharacter *, const int, const int, const int)
  private int CPC::AM_CALLHOMUN(const int)
  private int CPC::CR_ACIDDEMONSTRATION(class CCharacter *, const int, const int, const int)
  private int CPC::LK_SPIRALPIERCE(struct SKILLATTACK_MSG &, class CCharacter *)
  private bool CPC::GD_EMERGENCYCALL(class CZGuildInfo *)
  private bool CPC::IsCancelCasting()
  private void CPC::OnThirdJobSkillAttackToCharacter(unsigned short, int, struct MSG_TYPE_SKILLDATA *, class MSGpar::CVar)
  private void CPC::OnThirdJobSkillOperateToCharacter(unsigned short, int, struct MSG_TYPE_SKILLDATA *, class MSGpar::CVar)
  private void CPC::OnThirdJobSkillToGround(unsigned short, struct MSG_TYPE_SKILLDATA *)
  private bool CPC::IsEnableThirdJobSkillAttack(unsigned short, class CCharacter *)
  private bool CPC::IsEnableThirdJobSkillOperate(const int, class CCharacter *, class CSkillTypeInfo *)
  private void CPC::SA_LANDPROTECTOR(const int, const int, const int, const int, const int)
  private enum CActor::SKILL_RETURN CPC::RK_ENCHANTBLADE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::RK_HUNDREDSPEAR(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::RK_MILLENNIUMSHIELD(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::ALL_RAY_OF_PROTECTION(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::RK_CRUSHSTRIKE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::RK_REFRESH(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::RK_STONEHARDSKIN(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RK_VITALITYACTIVATION(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RK_STORMBLAST(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RK_FIGHTINGSPIRIT(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RK_ABUNDANCE(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RK_DRAGONBREATH(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RK_PHANTOMTHRUST(class CCharacter *, struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::GC_VENOMIMPRESS(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::GC_CROSSIMPACT(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::GC_DARKILLUSION(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::GC_ANTIDOTE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::GC_WEAPONBLOCKING(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::GC_COUNTERSLASH(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::GC_WEAPONCRUSH(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::GC_VENOMPRESSURE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::GC_POISONSMOKE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::GC_ROLLINGCUTTER(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::GC_POISONINGWEAPON(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::GC_POISONINGWEAPONoperation(const int)
  private enum CActor::SKILL_RETURN CPC::GC_CREATENEWPOISON(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::GC_CROSSRIPPERSLASHER(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::RA_COBALTTRAP(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::RA_COBALTTRAP_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CPC::RA_MAGENTATRAP(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::RA_MAGENTATRAP_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CPC::RA_MAIZETRAP(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::RA_MAIZETRAP_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CPC::RA_VERDURETRAP(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::RA_VERDURETRAP_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CPC::RA_ARROWSTORM(class CCharacter *, struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RA_FEARBREEZE(const struct MSG_TYPE_SKILLDATA &)
  private int CPC::RA_FEARBREEZE_AttackCount()
  private enum CActor::SKILL_RETURN CPC::RA_AIMEDBOLT(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::RA_WUGSTRIKE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::RA_DETONATOR(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RA_ELECTRICSHOCKER(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::RA_ELECTRICSHOCKER_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CPC::RA_CLUSTERBOMB(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::RA_CLUSTERBOMB_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CPC::RA_WUGRIDER(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RA_WUGDASH(struct MSG_TYPE_SKILLDATA *)
  private void CPC::RA_WUGDASH_EFFECT()
  private enum CActor::SKILL_RETURN CPC::RA_WUGBITE(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::RA_SENSITIVEKEEN(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::RA_FIRINGTRAP(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::RA_FIRINGTRAP_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CPC::RA_ICEBOUNDTRAP(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::RA_ICEBOUNDTRAP_OnTouched(class CCharacter *, const unsigned long, const int, const int, const short)
  private enum CActor::SKILL_RETURN CPC::RA_CAMOUFLAGE(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::RA_WUGMASTERY(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_BOOSTKNUCKLE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::NC_PILEBUNKER(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::NC_VULCANARM(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::NC_FLAMELAUNCHER(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::NC_COLDSLOWER(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_ARMSCANNON(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_ACCELERATION(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_HOVERING(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_F_SIDESLIDE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_B_SIDESLIDE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_SELFDESTRUCTION(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_SHAPESHIFT(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_EMERGENCYCOOL(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_INFRAREDSCAN(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_ANALYZE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_MAGNETICFIELD(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_NEUTRALBARRIER(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_STEALTHFIELD(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_REPAIR(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_POWERSWING(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::NC_AXETORNADO(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_AXEBOOMERANG(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::NC_SILVERSNIPER(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_MAGICDECOY(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::NC_DISJOINT(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::LG_CANNONSPEAR(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::LG_BANISHINGPOINT(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::LG_SHIELDPRESS(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::LG_REFLECTDAMAGE(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_PINPOINTATTACK(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::LG_TRAMPLE(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_FORCEOFVANGUARD(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_RAGEBURST(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::LG_SHIELDSPELL(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_EXEEDBREAK(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_OVERBRAND(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_OVERBRAND_BRANDISH(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_OVERBRAND_PLUSATK(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::LG_PRESTIGE(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_BANDING(struct MSG_TYPE_SKILLDATA *)
  private void CPC::LG_BANDING_OnTouched(class CCharacter *, const short)
  private enum CActor::SKILL_RETURN CPC::LG_MOONSLASHER(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_RAYOFGENESIS(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_PIETY(class CCharacter *, struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_EARTHDRIVE(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::LG_HESPERUSLIT(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::LG_INSPIRATION(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_DRAGONCOMBO(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *, const bool)
  private enum CActor::SKILL_RETURN CPC::SR_SKYNETBLOW(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_EARTHSHAKER(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_RAMPAGEBLASTER(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_KNUCKLEARROW(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::SR_FALLENEMPIRE(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *, const bool)
  private enum CActor::SKILL_RETURN CPC::SR_TIGERCANNON(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *, const bool)
  private enum CActor::SKILL_RETURN CPC::SR_GATEOFHELL(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::SR_CRESCENTELBOW(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_CRESCENTELBOW_AUTOSPELL(class CCharacter *, struct MSG_TYPE_SKILLDATA *, const int)
  private enum CActor::SKILL_RETURN CPC::SR_WINDMILL(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_RAISINGDRAGON(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_GENTLETOUCH_QUIET(class CCharacter *, struct MSG_TYPE_SKILLDATA *, struct SKILLATTACK_MSG *)
  private enum CActor::SKILL_RETURN CPC::SR_GENTLETOUCH_CURE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SR_GENTLETOUCH_ENERGYGAIN(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_GENTLETOUCH_CHANGE(class CCharacter *, struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_GENTLETOUCH_REVITALIZE(class CCharacter *, struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_ASSIMILATEPOWER(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_POWERVELOCITY(class CCharacter *, struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_CURSEDCIRCLE(struct MSG_TYPE_SKILLDATA *)
  private enum CActor::SKILL_RETURN CPC::SR_LIGHTNINGWALK(struct MSG_TYPE_SKILLDATA *)
  private void CPC::SetComboAttackPostDelay(int, bool, int, int)
  private enum CActor::SKILL_RETURN CPC::SR_HOWLINGOFLION(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SR_RIDEINLIGHTNING(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_PROPERTYWALK(const struct MSG_TYPE_SKILLDATA &, const int)
  private void CPC::SO_PROPERTYWALK_InstallActor(const int, const int)
  private void CPC::SO_PROPERTYWALK_OnTouched(class CCharacter *, const unsigned long, const short, const int, const int, const unsigned long)
  private enum CActor::SKILL_RETURN CPC::SO_SPELLFIST(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_PSYCHIC_WAVE(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::SO_PSYCHIC_WAVE_OnTouched(class CCharacter *, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::SO_CLOUD_KILL(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::SO_CLOUD_KILL_OnTouched(class CCharacter *, const int, const unsigned long)
  private enum CActor::SKILL_RETURN CPC::SO_POISON_BUSTER(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::SO_STRIKING(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_EARTHGRAVE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_DIAMONDDUST(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_WARMER(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::SO_WARMER_OnTouched(class CCharacter *, const int)
  private enum CActor::SKILL_RETURN CPC::SO_VACUUM_EXTREME(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::SO_VACUUM_EXTREME_OnTouched(class CCharacter *, const int, const unsigned long)
  private enum CActor::SKILL_RETURN CPC::SO_VARETYR_SPEAR(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  private enum CActor::SKILL_RETURN CPC::SO_ARRULLO(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_EL_CONTROL(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_SUMMON_AGNI(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_SUMMON_AQUA(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_SUMMON_VENTUS(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_SUMMON_TERA(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_EL_ACTION(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_EL_ANALYSIS(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::SO_EL_ANALYSIS_DISASSEMBLY(const bool, const class std::vector<std::pair<int,int>,std::allocator<std::pair<int,int> > > &)
  private void CPC::SO_EL_ANALYSIS_COMBINATION(const bool, const class std::vector<std::pair<int,int>,std::allocator<std::pair<int,int> > > &)
  private enum CActor::SKILL_RETURN CPC::SO_EL_CURE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::SO_FIRE_INSIGNIA(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::SO_FIRE_INSIGNIA_OnTouched(class CCharacter *, const int)
  private enum CActor::SKILL_RETURN CPC::SO_WATER_INSIGNIA(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::SO_WATER_INSIGNIA_OnTouched(class CCharacter *, const int)
  private enum CActor::SKILL_RETURN CPC::SO_WIND_INSIGNIA(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::SO_WIND_INSIGNIA_OnTouched(class CCharacter *, const int)
  private enum CActor::SKILL_RETURN CPC::SO_EARTH_INSIGNIA(const struct MSG_TYPE_SKILLDATA &)
  private void CPC::SO_EARTH_INSIGNIA_OnTouched(class CCharacter *, const int)
  /* this+0x568 */ class std::map<unsigned short,fatsovector<unsigned long>,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,fatsovector<unsigned long> > > > m_PropertyWalkList

  public void CPC::ClearElemental()
  public class CNpcElemental * CPC::GetNpcElemental()
  public void TeleportElemental()
  public enum CActor::SKILL_RETURN CPC::GN_CART_TORNADO(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::GN_CARTCANNON(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::GN_CARTBOOST(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::GN_THORNS_TRAP(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::GN_THORNS_TRAP_OnTouched(class CCharacter *, const int, const int)
  public enum CActor::SKILL_RETURN CPC::GN_BLOOD_SUCKER(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::GN_SPORE_EXPLOSION(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::GN_WALLOFTHORN(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public void CPC::GN_WALLOFTHORN_OnTouched(class CCharacter *, const int, const unsigned long)
  public enum CActor::SKILL_RETURN CPC::GN_CRAZYWEED(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::GN_CRAZYWEED_ATK(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::GN_DEMONIC_FIRE(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::GN_DEMONIC_FIRE_OnTouched(class CCharacter *, const int, const int)
  public enum CActor::SKILL_RETURN CPC::GN_FIRE_EXPANSION(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::GN_FIRE_EXPANSION_SMOKE_POWDER_OnTouched(class CCharacter *, const int)
  public void CPC::GN_FIRE_EXPANSION_TEAR_GAS_OnTouched(class CCharacter *, const int)
  public enum CActor::SKILL_RETURN CPC::GN_FIRE_EXPANSION_ACID(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::GN_HELLS_PLANT(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::GN_HELLS_PLANT_OnTouched(class CCharacter *, const int, const int)
  public enum CActor::SKILL_RETURN CPC::GN_MANDRAGORA(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::GN_CHANGEMATERIAL(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::GN_CHANGEMATERIAL_operation(const bool, const class std::vector<std::pair<int,int>,std::allocator<std::pair<int,int> > > &)
  public enum CActor::SKILL_RETURN CPC::GN_MIX_COOKING(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::GN_MIX_COOKING_operation(const int)
  public enum CActor::SKILL_RETURN CPC::GN_MAKEBOMB(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::GN_MAKEBOMB_operation(const int)
  public enum CActor::SKILL_RETURN CPC::GN_S_PHARMACY(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::GN_S_PHARMACY_operation(const int)
  public enum CActor::SKILL_RETURN CPC::GN_SLINGITEM(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::GN_SLINGITEM_RANGEMELEEATK(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &, const int)
  public enum CActor::SKILL_RETURN CPC::AB_JUDEX(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, const struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::AB_ANCILLA(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_CLEMENTIA(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_CANTO(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_CHEAL(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_ADORAMUS(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::AB_EPICLESIS(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::AB_EPICLESIS_OnTouched(class CCharacter *, const int)
  public enum CActor::SKILL_RETURN CPC::WL_WHITEIMPRISON(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_FROSTMISTY(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_COMET(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_EARTHSTRAIN(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::WL_EARTHSTRAIN_OnTouched(class CCharacter *, const int, const unsigned long)
  public enum CActor::SKILL_RETURN CPC::WL_HELLINFERNO(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, const struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_MARSHOFABYSS(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, const struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::AB_PRAEFATIO(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_ORATIO(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_LAUDAAGNUS(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_LAUDARAMUS(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_RENOVATIO(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_SECRAMENT(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_CLEARANCE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_EXPIATIO(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_DUPLELIGHT(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::AB_DUPLELIGHT_MELEE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::AB_DUPLELIGHT_MAGIC(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::AB_SILENTIUM(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_SOULEXPANSION(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_JACKFROST(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_RECOGNIZEDSPELL(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_SIENNAEXECRATE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_STASIS(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_DRAINLIFE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_CRIMSONROCK(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_CHAINLIGHTNING(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_CHAINLIGHTNING_ATK(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &, class MSGpar::CVar)
  public enum CActor::SKILL_RETURN CPC::WL_TETRAVORTEX(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &, class MSGpar::CVar)
  public enum CActor::SKILL_RETURN CPC::WL_SUMMONFB(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_SUMMON_ATK_FIRE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_SUMMONBL(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_SUMMON_ATK_WIND(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_SUMMONWB(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_SUMMON_ATK_WATER(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_SUMMONSTONE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WL_SUMMON_ATK_GROUND(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_RELEASE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WL_READING_SB(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public void CPC::WL_READING_SBoperation(const int)
  public enum CActor::SKILL_RETURN CPC::SC_FATALMENACE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::SC_REPRODUCE(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_AUTOSHADOWSPELL(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_SHADOWFORM(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_TRIANGLESHOT(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::SC_BODYPAINT(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_INVISIBILITY(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_DEADLYINFECT(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_ENERVATION(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_GROOMY(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_IGNORANCE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_LAZINESS(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_UNLUCKY(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_WEAKNESS(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_STRIPACCESSARY(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_MANHOLE(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::SC_MANHOLE_OnTouched(class CCharacter *, const int, const unsigned long, const int, const int)
  public enum CActor::SKILL_RETURN CPC::SC_DIMENSIONDOOR(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::SC_DIMENSIONDOOR_OnTouched(class CCharacter *)
  public enum CActor::SKILL_RETURN CPC::SC_CHAOSPANIC(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_MAELSTROM(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::SC_BLOODYLUST(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::SC_BLOODYLUST_OnTouched(class CCharacter *, const int)
  public enum CActor::SKILL_RETURN CPC::SC_FEINTBOMB(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WA_SWING_DANCE(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WA_SYMPHONY_OF_LOVER(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WA_MOONLIT_SERENADE(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::MI_RUSH_WINDMILL(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::MI_ECHOSONG(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::MI_HARMONIZE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_METALICSOUND(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public enum CActor::SKILL_RETURN CPC::WM_REVERBERATION(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::WM_REVERBERATION_OnTouched(class CCharacter *, const int, const int)
  public enum CActor::SKILL_RETURN CPC::WM_REVERBERATION_MELEE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &, const int)
  public enum CActor::SKILL_RETURN CPC::WM_REVERBERATION_MAGIC(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &, const int)
  public enum CActor::SKILL_RETURN CPC::WM_DOMINION_IMPULSE(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_SEVERE_RAINSTORM(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_SEVERE_RAINSTORM_MELEE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &, const int)
  public enum CActor::SKILL_RETURN CPC::WM_POEMOFNETHERWORLD(const struct MSG_TYPE_SKILLDATA &)
  public void CPC::WM_POEMOFNETHERWORLD_OnTouched(class CCharacter *, const int, const int)
  public enum CActor::SKILL_RETURN CPC::WM_VOICEOFSIREN(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_DEADHILLHERE(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_LULLABY_DEEPSLEEP(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_SIRCLEOFNATURE(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_RANDOMIZESPELL(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_GLOOMYDAY(class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_GREAT_ECHO(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_SONG_OF_MANA(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_DANCE_WITH_WUG(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_SOUND_OF_DESTRUCTION(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_SATURDAY_NIGHT_FEVER(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_LERADS_DEW(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_MELODYOFSINK(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_BEYOND_OF_WARCRY(const struct MSG_TYPE_SKILLDATA &)
  public enum CActor::SKILL_RETURN CPC::WM_UNLIMITED_HUMMING_VOICE(const struct MSG_TYPE_SKILLDATA &)
  private enum CActor::SKILL_RETURN CPC::MC_CARTDECORATE(const struct MSG_TYPE_SKILLDATA &)
  public bool CPC::IsRightWeaponItemClass(short, short, short)
  public void UpdatePlusATKByRace(int, int)
  public class CCharacter * CPC::GetCharacterInPos(int, int)
  public bool CPC::IsCurrentEquipItemID(int, int)
  public bool CPC::IsCurrentEquipOrHaveItemID(int, int)
  public void CPC::ReleaseCursedCircleTarget()
  /* this+0x578 */ class CRACE_INFO m_RaceInfo

  public void SetRaceInfo(const int, const enum CRACE_INFO::FIELD_TYPE, const int, const int)
  public int GetRaceInfo(const int, const enum CRACE_INFO::FIELD_TYPE, const int)
  /* this+0x7b4 */ class std::list<int,std::allocator<int> > m_captureItemList

  /* this+0x7c0 */ int m_useIncubator
  /* this+0x7c4 */ bool m_isPetOwner
  /* this+0x7c8 */ struct CharacterInfo m_characterInfo

  /* this+0xc1c */ struct CharacterTimeInfo m_characterTimeInfo

  /* this+0xc84 */ struct PLUSSTATUS_BYJOB m_plusStatusByJob

  /* this+0xc9c */ class CPollTimer m_emoticonTM

  /* this+0xca4 */ int m_isMapLoading
  /* this+0xca8 */ unsigned long m_MapLoadingTick
  /* this+0xcac */ int m_invalidPacket
  /* this+0xcb0 */ int m_isValid
  /* this+0xcb4 */ class PERSONAL_INFO::CPersonalInfo m_PersonalInfo

  /* this+0xd08 */ int m_isPKModeON
  /* this+0xd0c */ int m_index
  /* this+0xd10 */ unsigned long m_ip
  /* this+0xd14 */ unsigned long m_lastNPCAID
  /* this+0xd18 */ short m_npcTouchCount
  public void SetLastCardIndex(short)
  public short GetLastCardIndex()
  /* this+0xd1a */ short m_lastCardIndex
  /* this+0xd1c */ int m_isItemMovable
  /* this+0xd20 */ int m_isAuctionOpen
  /* this+0xd24 */ int m_isMailOpen
  /* this+0xd28 */ int m_isTraderOpen
  /* this+0xd2c */ class std::list<unsigned long,std::allocator<unsigned long> > m_groupMember

  /* this+0xd38 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > > m_whisperExRegister

  /* this+0xd48 */ class CHostPathInfo m_pathInfo

  /* this+0xd80 */ class CPCClientUpdater m_pcClientUpdater

  /* this+0xd8c */ class CPCItem m_pcItem

  /* this+0xdb4 */ class CPCItemInventoryMgr m_pcitemInventoryMgr

  /* this+0x1114 */ class CPCSkill m_pcSkill

  /* this+0x1308 */ class CPCPacketHandler m_packetHandler

  /* this+0x13a8 */ class CPCBattle m_pcBattle

  /* this+0x1e58 */ struct EXCHANGEITEM_INFO m_exchangeItemInfo

  /* this+0x1e64 */ struct MannerPointInfo m_mannerPoint

  /* this+0x1e78 */ class std::list<unsigned long,std::allocator<unsigned long> > m_touchNPCList

  /* this+0x1e84 */ class std::vector<ENEMY_INFO,std::allocator<ENEMY_INFO> > m_enemyInfo

  /* this+0x1e94 */ class CPCQuestEvent m_questEvent

  /* this+0x1efc */ class std::multiset<DisappearAmount,DisappearAmountPrority,std::allocator<DisappearAmount> > m_disappearHP_ItemList

  /* this+0x1f0c */ class std::multiset<DisappearAmount,DisappearAmountPrority,std::allocator<DisappearAmount> > m_disappearSP_ItemList

  /* this+0x1f1c */ int m_skillUseRefCounter
  /* this+0x1f20 */ int m_lockCounter
  /* this+0x1f24 */ unsigned long m_lastSendTime
  /* this+0x1f28 */ unsigned long m_loadingCompleteTime
  /* this+0x1f2c */ unsigned long m_DisconnetTime
  /* this+0x1f30 */ int m_pvpWinPoint
  /* this+0x1f34 */ int m_pvpRanking
  /* this+0x1f38 */ unsigned long m_pvpFGStratTime
  /* this+0x1f3c */ int m_pvpTotal
  /* this+0x1f40 */ int m_myPetID
  public void SetMyPetID(int)
  public int GetMyPetID()
  /* this+0x1f44 */ bool m_isProgress
  /* this+0x1f48 */ unsigned long m_gageRefreshTime
  /* this+0x1f4c */ int m_eventNo
  /* this+0x1f50 */ int m_makingItemFlag
  /* this+0x1f54 */ class std::list<unsigned long,std::allocator<unsigned long> > m_devotionList

  /* this+0x1f60 */ unsigned long m_magicTargetAID
  /* this+0x1f64 */ struct PARTNER_INFO m_marriageInfo

  /* this+0x1f84 */ int m_specialSP
  /* this+0x1f88 */ int m_specialDeath
  public int CPC::IsFirstJobORLowLevel()
  /* this+0x1f8c */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_invincibleInfo

  /* this+0x1f9c */ unsigned long m_lastTargetAID
  /* this+0x1fa0 */ class std::map<unsigned long,PalmStrikeInfo,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,PalmStrikeInfo> > > m_palmstrikeList

  /* this+0x1fb0 */ class CMobileEvent m_mobileEvent

  /* this+0x1ff0 */ struct FAMILY_INFO m_familyInfo

  /* this+0x2050 */ int m_noPointEvent
  /* this+0x2054 */ struct PVPINFO m_pvp

  /* this+0x2060 */ int m_makerRankPoint
  /* this+0x2064 */ int m_makerAMPoint
  /* this+0x2068 */ int m_isLessEffect
  /* this+0x206c */ struct PKInfo m_PKInfo

  /* this+0x20c0 */ class CCSAuth2 m_GameGuardAuth

  /* this+0x20ec */ int m_isSetGameGuard
  /* this+0x20f0 */ unsigned long m_lastGameGuardCheckTime
  /* this+0x20f4 */ struct _STORE_PASSWORD_INFO m_storePasswordInfo

  /* this+0x210c */ struct _CASHSHOP_PASSWORD_INFO m_CashPasswordInfo

  /* this+0x2128 */ struct _LOTTO_NUMBERS m_lottoNumbers

  /* this+0x2144 */ short m_cookSucc_Tool
  /* this+0x2148 */ class CHuntingList m_huntingList

  /* this+0x215c */ class CTimeList m_timeList

  /* this+0x2170 */ class CPCProperty * m_pcproperty
  /* this+0x2174 */ struct BATTLEFIELDINFO m_battleFieldInfo

  /* this+0x2180 */ long m_clientVersion
  public void CPC::SetMapLoadingFlag(int)
  public void SetAuctionOpenFlag(int)
  public void SetMailOpenFlag(int)
  public int isAuctionOpen()
  public int isMailOpen()
  public void CPC::AuctionOpen()
  public void CPC::MailOpen()
  /* this+0x2184 */ int isInitSendGameGuard
  /* this+0x2188 */ int m_CashPoint
  /* this+0x218c */ int m_itemScriptEventNo
  /* this+0x2190 */ bool m_isSetEffectiveBySpecialItem
  /* this+0x2194 */ unsigned long m_scrollItemIndex
  /* this+0x2198 */ bool m_open_simpleCashShop
  public int isChangeShortCutKey()
  public void CPC::OnShortcutKey_Change(int, struct tagShortCutKey)
  public void CPC::SendShortCutKeyInfo()
  public void CPC::SaveShortCut()
  /* this+0x219c */ class CPubScheduler m_PubScheduler

  public void CPC::ScriptTimeClear()
  public void CPC::SetScriptTime(int)
  public int CPC::GetScriptTime(int)
  /* this+0x21b0 */ class std::map<int,unsigned long,std::less<int>,std::allocator<std::pair<int const ,unsigned long> > > m_scriptTimeMap

  public void SetSE_CashPoint(const int)
  public int GetSE_CashPoint()
  public void SetOpenSeSimpleCashShop()
  public void CancelOpenSeSimpleCashShop()
  public bool IsOpenSeSimpleCashShop()
    /* this+0x21c0 */ int m_seCashPoint
  /* this+0x21c4 */ bool m_Open_SeSimpleCashShop
  /* this+0x21c8 */ class CHPAmount m_HPAmount

  private int HPAmountAdd(const int)
  private void HPAmountSetForce(const int)
  private void HPAmountSet(const int)
  /* this+0x21d4 */ class CSPAmount m_SPAmount

  private void SPAmountAdd(const int)
  private void SPAmountSetForce(const int)
  private void SPAmountSet(const int)
  public int HPAmountGet()
  public int SPAmountGet()
  public int CPC::GetSPcostForSkill(const int, const int, const int, class CSkillTypeInfo *)
  public class CPC & operator=(class CPC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCBattle {
    *
  public void ReflectDamageEx(class CCharacter *, int)
  public void CPCBattle(const class CPCBattle &)
  public void CPCBattle::CPCBattle()
  public void CPCBattle::~CPCBattle()
  public void CPCBattle::Init()
  public void CPCBattle::Reset()
  public void SetMyOwner(class CPC *)
  public void CPCBattle::CheckStateChange()
  public void CPCBattle::CheckConsumedArrow(int)
  public void CPCBattle::ActSkillToChar_ATK(int, int, int)
  public void CPCBattle::OPSkillToCharacter(int, int, int)
  public void CPCBattle::OPSkillToCharacter_AL_HEAL(const int, const int, const int, const struct MSG_TYPE4_FIVEDWORD *, const int, const int, const int, class CCharacter *)
  public void CPCBattle::OPSkillToSelf(int, int, int)
  public struct OptionInfo * GetOptionInfo()
  public int GetPhysicalATKDamage(class CCharacter *, int, struct PACKET_ZC_NOTIFY_ACT *, bool &)
  public int CPCBattle::GetMagicATKPower(class CCharacter *, bool)
  public int CPCBattle::GetDamagePercent(unsigned long, unsigned short)
  public int CPCBattle::GetDamagePercent_SKID(const int, const int)
  public int CPCBattle::GetHealPercent_ITEM(unsigned short)
  public class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > & GetDropItemList_KILL(int)
  public int CPCBattle::GetSKCastingTM(class CSkillTypeInfo *, short, class CCharacter *, int, int, int)
  public int CPCBattle::GetSoulLinkSKCastingTM(unsigned short, short, int)
  public void CPCBattle::SetHealPercent_ITEM(unsigned short, int)
  public void CPCBattle::SetAutoSpell2(const int, const int, const int, const int, const unsigned int)
  public void CPCBattle::SetAutoSpell2_MLEATKED(const int, const int, const int, const int, const unsigned int)
  public void CPCBattle::SetAutoSpell2_MLEATKED_Short(const int, const int, const int, const int, const unsigned int)
  public void CPCBattle::SetAutoSpell2_MLEATKED_Long(const int, const int, const int, const int, const unsigned int)
  public void CPCBattle::SetAutoSpell2_MAGATKED(const int, const int, const int, const int, const unsigned int)
  public void CPCBattle::SetAutoSpell2_MLEATK(const int, const int, const int, const int, const unsigned int)
  public void CPCBattle::SetAutoSpell2_RANGEATK(const int, const int, const int, const int, const unsigned int)
  public void CPCBattle::ResetAutoSpell2(const int, const int, const unsigned int)
  public void CPCBattle::ResetAutoSpell2_MLEATKED(const int, const int, const unsigned int)
  public void CPCBattle::ResetAutoSpell2_MLEATKED_Short(const int, const int, const unsigned int)
  public void CPCBattle::ResetAutoSpell2_MLEATKED_Long(const int, const int, const unsigned int)
  public void CPCBattle::ResetAutoSpell2_MAGATKED(const int, const int, const unsigned int)
  public void CPCBattle::ResetAutoSpell2_MLEATK(const int, const int, const unsigned int)
  public void CPCBattle::ResetAutoSpell2_RANGEATK(const int, const int, const unsigned int)
  public void CPCBattle::PauseAutoSpell2(const int, const int, const unsigned int)
  public void CPCBattle::PauseAutoSpell2_MLEATKED(const int, const int, const unsigned int)
  public void CPCBattle::PauseAutoSpell2_MLEATKED_Short(const int, const int, const unsigned int)
  public void CPCBattle::PauseAutoSpell2_MLEATKED_Long(const int, const int, const unsigned int)
  public void CPCBattle::PauseAutoSpell2_MAGATKED(const int, const int, const unsigned int)
  public void CPCBattle::PauseAutoSpell2_MLEATK(const int, const int, const unsigned int)
  public void CPCBattle::PauseAutoSpell2_RANGEATK(const int, const int, const unsigned int)
  public void CPCBattle::ResumeAutoSpell2(const int, const int, const unsigned int)
  public void CPCBattle::ResumeAutoSpell2_MLEATKED(const int, const int, const unsigned int)
  public void CPCBattle::ResumeAutoSpell2_MLEATKED_Short(const int, const int, const unsigned int)
  public void CPCBattle::ResumeAutoSpell2_MLEATKED_Long(const int, const int, const unsigned int)
  public void CPCBattle::ResumeAutoSpell2_MAGATKED(const int, const int, const unsigned int)
  public void CPCBattle::ResumeAutoSpell2_MLEATK(const int, const int, const unsigned int)
  public void CPCBattle::ResumeAutoSpell2_RANGEATK(const int, const int, const unsigned int)
  public void CPCBattle::SetPushingSkill(int, int)
  public void CPCBattle::SetATKPercentInfo(int, unsigned long, int)
  public void CPCBattle::SetDEFPercentInfo(int, unsigned long, int)
  public void CPCBattle::SetMATKPercentInfo(int, unsigned long, int)
  public void CPCBattle::SetMDEFPercentInfo(int, unsigned long, int)
  public void CPCBattle::SetDamagePercent_PROP(unsigned short, int, unsigned short)
  public void CPCBattle::SetDamagePercent_SKID(unsigned short, int, unsigned short)
  public void CPCBattle::SetDamagePercent_MON(unsigned short, int, unsigned short)
  public void CPCBattle::SetMagicDamagePercent_MON(unsigned short, int, unsigned short)
  public void CPCBattle::SetMagicDamagePercent_PROP(const unsigned short, const int)
  public int CPCBattle::GetMagicDamagePercent_PROP(const unsigned short)
  public void CPCBattle::SetBadState_ArrowATK(int, int, unsigned short)
  public void CPCBattle::SetBadState_MLEATK(int, int, unsigned short)
  public void CPCBattle::SetBadState_MLEAttacked(int, int, unsigned short)
  public void CPCBattle::SetBadState_MATK(int, int, unsigned short)
  public void CPCBattle::SetBadState_MAttacked(int, int, unsigned short)
  public void CPCBattle::SetDropItemOfRace_KILL(int, unsigned short, int)
  public void CPCBattle::SetDamage_PropTM(unsigned short, unsigned short, int, int, unsigned short)
  public void CPCBattle::ResetPushingSkill(int)
  public void CPCBattle::ResetATKPercentInfo(int)
  public void CPCBattle::ResetDEFPercentInfo(const int)
  public void CPCBattle::ResetMATKPercentInfo(int)
  public void CPCBattle::ResetMDEFPercentInfo(int)
  public void ModifyDamage_ATK(class CCharacter *, int &, int, int, int)
  public void CPCBattle::ModifyDamage_ATKED(class CCharacter *, int &, int, int, int, int, int)
  public void CPCBattle::ModifyDamage_MATK(class CCharacter *, int &)
  public void CPCBattle::ProcessEffect_ATK(class CCharacter *, int, int, int)
  public void CPCBattle::ProcessEffectOnKill(class CCharacter *, int, unsigned short)
  public void CPCBattle::ApplyEffect_ATKED(class CCharacter *, int, int, unsigned short, int)
  public int CPCBattle::ReflectMagic(class CCharacter *, struct SKILLATTACK_MSG *, int)
  public int CPCBattle::IsImmuneMagic(class CCharacter *, int)
  public void CPCBattle::OnDoubleCasting(int, int, int, int)
  public int CPCBattle::SetEffectiveByTarotCard(class CCharacter *)
  public void CPCBattle::SetSkillCastTimePercent(unsigned short, int)
  public int CPCBattle::GetSkillCastTimePercent(unsigned short)
  public void CPCBattle::SetHPAmountTime(unsigned short, unsigned long, short)
  public void CPCBattle::SetSPAmountTime(unsigned short, unsigned long, short)
  public void CPCBattle::SetHPPercentTime(unsigned short, unsigned long, short)
  public void CPCBattle::SetSPPercentTime(unsigned short, unsigned long, short)
  public void CPCBattle::ProcessItemHealRegularly()
  public void CPCBattle::SetSkillAutoSpell(unsigned long, unsigned long, unsigned long, short, short)
  public void CPCBattle::ResetSkillAutoSpell(unsigned long, unsigned long, unsigned long, short, short)
  public void CPCBattle::SetHomunDBInfo(struct HOMUN_DBINFO *)
  public class CNpcHomun * CPCBattle::CallHomun(short)
  public void CPCBattle::RemoveHomun()
  public void SetMyHomunID(int)
  public int GetMyHomunID()
  public struct HOMUN_DBINFO * GetHomunDBInfo()
  public class CNpcHomun * CPCBattle::GetMyHomun()
  public short CPCBattle::IsCallableHomun()
  public int CPCBattle::RestHomun(int)
  public void CPCBattle::EvolutionHomun()
  public bool CPCBattle::SetReadyMutationHomun()
  public bool CPCBattle::MutationHomun(const int)
  public void CPCBattle::SetHomunDBFmt(const class CLogonPermitADBWork::CHomunLogonData &)
  public void GetHomunDBFmt(class HomunDataStuff::CHomunData &)
  public void UpdateHomunData(class CNpcHomun *)
  public void CPCBattle::SetMerceDBInfo(struct MERSOL_DBINFO *)
  public struct MERSOL_DBINFO * GetMerceDBInfo()
  public void CPCBattle::SetDropItemOfMonster_Kill(unsigned short, unsigned short, int)
  public bool CPCBattle::GetDropItemOfMonster_Kill(unsigned short, class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > &)
  /* this+0x4 */ class CPCBattleMercenary m_Mercenary

    public bool CPCBattle::MercenaryCall(const enum CPCBattle::enumMercenary_CallType, const int)
  public bool CPCBattle::MercenaryCall_Create(const int)
  public bool CPCBattle::MercenaryCall_Load()
  public void CPCBattle::Mercenary_Delete(const int)
  public void CPCBattle::Mercenary_Release(const bool)
  public void CPCBattle::MercenaryCall_Create_After(const int)
  public void CPCBattle::MercenaryCall_Delete_After(const int)
  public void CPCBattle::Mercenary_TYPICALJOBINFO_CHANGED()
  public void CPCBattle::Mercenary_SaveToProxyDB()
  public void CPCBattle::SetMercenaryID(const int)
  public int GetMercenaryID()
  public short GetFaith()
  public short GetSummonCount(short)
  public short GetMerceType(short)
  public class CNpcMercenary * CPCBattle::GetMercenary()
  public int GetEnemyAID()
  public short CPCBattle::GetMercenaryJob()
  public int CPCBattle::GetMercenary_Type()
  public void CPCBattle::CheckSkillSpecialOption(unsigned long, class CCharacter *, short, short)
  public unsigned long GetActivatedSkill()
  public unsigned long GetDeactivatedSkill()
  public void CPCBattle::SetSkillActivate(unsigned long, unsigned long, unsigned long, unsigned long)
  public void CPCBattle::ResetSkillActivate(unsigned long, unsigned long, unsigned long, unsigned long)
  public void CPCBattle::AddState_SKID(short, unsigned long, short, int)
  public void CPCBattle::SubState_SKID(short, unsigned long, short, int)
  public void CPCBattle::SetAutoSpellMagic(unsigned long, short, short, int)
  public void CPCBattle::ResetAutoSpellMagic(unsigned long, short, short, int)
  public short CPCBattle::IsHomunState()
  private void CPCBattle::ReflectDamage(class CCharacter *, int)
  private void CPCBattle::ProcessAutoSpell(class CCharacter *, int)
  private void CPCBattle::ProcessAutoSpell_ATKED(class CCharacter *, int, int)
  private void CPCBattle::UseAutoSpell(unsigned short, class CCharacter *, short, class MSGpar::CVar)
  private void CPCBattle::UseAutoSpellToGround(unsigned short, short, short, short)
  private void CPCBattle::AutoSpell(const class std::map<unsigned short,CAutoSpellVar,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CAutoSpellVar> > > &, class CCharacter *, bool)
  private void CheckAutoSpellList(class std::map<unsigned short,MSG_TYPE1_TWODWORD,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,MSG_TYPE1_TWODWORD> > > *, class CCharacter *, int)
  private void CPCBattle::ProcessRegionSkill(int, short, class CCharacter *, int, int)
  private int CPCBattle::PartySkill(int, short)
  private void CPCBattle::CheckAutoActItem(unsigned char)
  private void CPCBattle::ProcessAutoActItemScript()
  private void CPCBattle::AddAutoActItem(unsigned char, unsigned long, short, short)
  private void CPCBattle::SubAutoActItem(unsigned char, unsigned long, short, short)
  private void CPCBattle::AddAutoActItemScript(unsigned char, unsigned long, unsigned long)
  private void CPCBattle::SubAutoActItemScript(unsigned char, unsigned long)
  private int CPCBattle::GetTotalHealRegularlyAmount(class std::map<unsigned short,HEAL_REGULARLY_INFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HEAL_REGULARLY_INFO> > > *)
  private void CPCBattle::ProcessTargetAttackedBuff(class CCharacter *, unsigned short)
  private void CPCBattle::SetTargetAttackedBuff(unsigned long, short, unsigned short, unsigned long, unsigned long)
  private void CPCBattle::ResetTargetAttackedBuff(unsigned long, short, unsigned short, unsigned long, unsigned long)
  private void CPCBattle::ProcessSkillActivate()
  private void CPCBattle::CheckSkillAutoSpell(unsigned long, class CCharacter *, short, short)
  private void CPCBattle::CheckSkillActivate(unsigned long)
  private void CPCBattle::CheckSkillHandicap(unsigned long, class CCharacter *, const short)
  private void CPCBattle::CheckAutoSpellMagic(class CCharacter *)
  private void CPCBattle::CheckPushingSkill(unsigned long, class CCharacter *)
  private int CPCBattle::SK_SM_Bash(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_TF_SprinkleSand(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_TF_ThrowStone(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private void CPCBattle::SK_KN_ChargeATK(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private void CPCBattle::SK_WZ_SightBlaster(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_BA_PangVoice(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private int CPCBattle::SK_DC_WinkCharm(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private int CPCBattle::SK_BS_Greed(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_PR_Redemtio(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_MO_KITranslation(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private int CPCBattle::SK_MO_Balkyoung(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_RG_CloseConfine(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private void CPCBattle::SK_SA_CreateConverter(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_SA_ElementalCHG(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private int CPCBattle::SK_GS_Glittering(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_GS_Fling(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private int CPCBattle::SK_GS_BullsEye(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_GS_MadnessCancel(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_GS_Adjustment(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_GS_Increasing(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_GS_MagicalBullet(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_GS_Cracker(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private int CPCBattle::SK_GS_FullBuster(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *)
  private void CPCBattle::SK_GS_SingleAction(struct MSG_TYPE4_FIVEDWORD *)
  private void CPCBattle::SK_GS_SnakeEye(struct MSG_TYPE4_FIVEDWORD *)
  private void CPCBattle::SK_NJ_TobidoUgu(struct MSG_TYPE4_FIVEDWORD *)
  private void CPCBattle::SK_NJ_NinPou(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_GS_Disarm(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private int CPCBattle::SK_GS_PiercingShot(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_GS_Desperado(struct MSG_TYPE4_FIVEDWORD *)
  private void CPCBattle::SK_GS_GatlingFever(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_NJ_Syuriken(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_NJ_Kunai(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_NJ_ZenyNage(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private void CPCBattle::SK_NJ_TatamiGaeshi(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_NJ_KasumiKiri(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private void CPCBattle::SK_NJ_ShadowJump(struct MSG_TYPE5_SIXDWORD *)
  private int CPCBattle::SK_NJ_KiriKage(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_NJ_Utsusemi(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_NJ_BunsinJyutsu(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_NJ_KaenSin(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_NJ_BakuenRyu(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private int CPCBattle::SK_NJ_HyousenSou(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *)
  private void CPCBattle::SK_NJ_SuiTon(struct MSG_TYPE5_SIXDWORD *)
  private int CPCBattle::SK_NJ_HyouSyouRaku(struct MSG_TYPE4_FIVEDWORD *)
  private int SK_NJ_Raigekisai(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_NJ_Nen(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_NJ_Issen(struct MSG_TYPE4_FIVEDWORD *, struct SKILLATTACK_MSG *, class CCharacter *)
  private int CPCBattle::SK_ALL_PARTYFLEE(struct MSG_TYPE4_FIVEDWORD *)
  private int CPCBattle::SK_ALL_ANGEL_PROTECT(struct MSG_TYPE4_FIVEDWORD *, class CCharacter *)
  private int CPCBattle::ALL_SONKRAN(const struct MSG_TYPE4_FIVEDWORD &, class CCharacter *)
  private int CPCBattle::ALL_ODINS_POWER(class CCharacter *, const int, const int)
  /* this+0x454 */ class CPC * m_pc
  /* this+0x458 */ int m_enemyAID
  /* this+0x45c */ int m_isReflectedMAGIC
  /* this+0x460 */ unsigned short m_DoubleCastingSKID
  /* this+0x464 */ struct OptionInfo m_optionInfo

  /* this+0x4c0 */ int m_myHomunID
  /* this+0x4c4 */ struct HOMUN_DBINFO m_homunDBInfo

  /* this+0x510 */ class CPCBattleHomun m_Homun

  /* this+0x530 */ struct MERSOL_DBINFO m_merceDBInfo

  /* this+0x55c */ int m_mercenaryID
  /* this+0x560 */ short m_faith
  /* this+0x562 */ short[0x3] m_summonCount
  /* this+0x568 */ class std::map<int,AMOUNT_INFO,std::less<int>,std::allocator<std::pair<int const ,AMOUNT_INFO> > > m_ATKPercentList

  /* this+0x578 */ class std::map<int,AMOUNT_INFO,std::less<int>,std::allocator<std::pair<int const ,AMOUNT_INFO> > > m_DEFPercentList

  /* this+0x588 */ class std::map<int,AMOUNT_INFO,std::less<int>,std::allocator<std::pair<int const ,AMOUNT_INFO> > > m_MATKPercentList

  /* this+0x598 */ class std::map<int,AMOUNT_INFO,std::less<int>,std::allocator<std::pair<int const ,AMOUNT_INFO> > > m_MDEFPercentList

  /* this+0x5a8 */ class std::map<unsigned short,MSG_TYPE1_TWODWORD,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,MSG_TYPE1_TWODWORD> > > m_pushSkillList

  /* this+0x5b8 */ class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >[0x2] m_damagePercent_PROP
  /* this+0x5d8 */ class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >[0x2] m_damagePercent_SKID
  /* this+0x5f8 */ class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >[0x2] m_damagePercent_MON
  /* this+0x618 */ class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >[0x2] m_magicDamagePercent_MON
  /* this+0x638 */ class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > m_magicDamagePercent_PROP

  /* this+0x648 */ class std::map<unsigned short,PropTM_Info,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,PropTM_Info> > >[0x2] m_damageTM_PROP
  /* this+0x668 */ class std::map<unsigned short,CAutoSpellVar,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CAutoSpellVar> > >[0x2] m_AutoSpell
  /* this+0x688 */ class std::map<unsigned short,CAutoSpellVar,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CAutoSpellVar> > >[0x2] m_AutoSpell_MLEATKED
  /* this+0x6a8 */ class std::map<unsigned short,CAutoSpellVar,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CAutoSpellVar> > >[0x2] m_AutoSpell_MLEATKED_Short
  /* this+0x6c8 */ class std::map<unsigned short,CAutoSpellVar,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CAutoSpellVar> > >[0x2] m_AutoSpell_MLEATKED_Long
  /* this+0x6e8 */ class std::map<unsigned short,CAutoSpellVar,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CAutoSpellVar> > >[0x2] m_AutoSpell_MAGATKED
  /* this+0x708 */ class std::map<unsigned short,CAutoSpellVar,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CAutoSpellVar> > >[0x2] m_AutoSpell_MLEATK
  /* this+0x728 */ class std::map<unsigned short,CAutoSpellVar,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CAutoSpellVar> > >[0x2] m_AutoSpell_RANGEATK
  /* this+0x748 */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > >[0x2] m_badState_ArrowATK
  /* this+0x768 */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > >[0x2] m_badState_MLEATK
  /* this+0x788 */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > >[0x2] m_badState_MLEAttacked
  /* this+0x7a8 */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > >[0x2] m_badState_MATK
  /* this+0x7c8 */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > >[0x2] m_badState_MAttacked
      /* this+0x7e8 */ class std::map<int,CPCBattle::stBADSTATE_EFST_INFO,std::less<int>,std::allocator<std::pair<int const ,CPCBattle::stBADSTATE_EFST_INFO> > >[0x2][0x6] m_badSate_EFST_ATK
  public void CPCBattle::SetBadState_EFSTATK(const int, const unsigned short, const unsigned short, const int, const unsigned short)
  public void CPCBattle::ResetBadState_EFSTATK()
    public void CPCBattle::SetHandicapState_Race(const int, const int, const int, const int)
  public void ResetHandicapState_Race()
  public void CPCBattle::SetNumDef_Race(const int, const int, const int, const int)
  public void CPCBattle::SetNumMDef_Race(const int, const int, const int, const int)
  public void CPCBattle::SetPerDef_Self(const int)
  public void CPCBattle::SetPerMDef_Self(const int)
  public void CPCBattle::SetPerDamage_Race(const int, const int, const int)
  /* this+0x8a8 */ class CPCBattle::CAttackInfoForRace m_AttackInfoForRace

  /* this+0x8b8 */ class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > m_healPercent_ITEM

  /* this+0x8c8 */ class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >[0xb] m_dropItemOfRace_KILL
  /* this+0x978 */ class std::map<unsigned short,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > > > > m_dropItemOfMonster_KILL

  /* this+0x988 */ class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > m_skillCastTimePercent

  /* this+0x998 */ class std::map<unsigned short,HEAL_REGULARLY_INFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HEAL_REGULARLY_INFO> > > m_HPhealRegularlyAmountInfo

  /* this+0x9a8 */ class std::map<unsigned short,HEAL_REGULARLY_INFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HEAL_REGULARLY_INFO> > > m_SPhealRegularlyAmountInfo

  /* this+0x9b8 */ class std::map<unsigned short,HEAL_REGULARLY_INFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HEAL_REGULARLY_INFO> > > m_HPhealRegularlyPercentInfo

  /* this+0x9c8 */ class std::map<unsigned short,HEAL_REGULARLY_INFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HEAL_REGULARLY_INFO> > > m_SPhealRegularlyPercentInfo

  /* this+0x9d8 */ class std::map<unsigned char,std::list<AUTO_ACT_ITEMINFO,std::allocator<AUTO_ACT_ITEMINFO> >,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,std::list<AUTO_ACT_ITEMINFO,std::allocator<AUTO_ACT_ITEMINFO> > > > > m_autoActItemInfo

  /* this+0x9e8 */ class std::list<AUTO_ACT_ITEMSCRIPT,std::allocator<AUTO_ACT_ITEMSCRIPT> > m_autoActItemScriptList

  /* this+0x9f4 */ class std::list<TARGET_ATTACKED_BUFF,std::allocator<TARGET_ATTACKED_BUFF> > m_targetAttackedBuff

  /* this+0xa00 */ int[0xa] m_damageMeleeTolerace
  /* this+0xa28 */ int[0xa] m_damageMagicTolerace
  /* this+0xa50 */ class std::map<unsigned long,std::list<SKILL_AUTOSPELL,std::allocator<SKILL_AUTOSPELL> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::list<SKILL_AUTOSPELL,std::allocator<SKILL_AUTOSPELL> > > > > m_skillAutoSpellInfo

  /* this+0xa60 */ struct _SKILL_ACTIVE_INFO m_skillActiveInfo

  /* this+0xa84 */ class std::map<unsigned long,std::list<SKILL_HANDICAP,std::allocator<SKILL_HANDICAP> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::list<SKILL_HANDICAP,std::allocator<SKILL_HANDICAP> > > > > m_skillHandicapInfo

  /* this+0xa94 */ class std::list<AUTOSPELL_MAGIC,std::allocator<AUTOSPELL_MAGIC> > m_autoSpellMagicList

              /* this+0xaa0 */ class std::map<unsigned short,std::map<unsigned short,CPCBattle::unionSkillStdOption,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CPCBattle::unionSkillStdOption> > >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::map<unsigned short,CPCBattle::unionSkillStdOption,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CPCBattle::unionSkillStdOption> > > > > > m_SkillSTD

  private void CPCBattle::OperateSkillStdOption(const unsigned short, const unsigned long, const union CPCBattle::unionSkillStdOption &)
  private void CPCBattle::OperateFUNC_ADDSKILLSP(const unsigned short, const int)
  private void CPCBattle::OperateFUNC_ADDSKILLDELAY(const unsigned short, const int)
  private void CPCBattle::OperateFUNC_ADDSTATECASTTIME(const unsigned short, const int)
  private const union CPCBattle::unionSkillStdOption * CPCBattle::GetSkillStdOption(const unsigned short, const unsigned long)
  private int CPCBattle::GetAdditionalSkillSPCost(const unsigned short)
  private int CPCBattle::GetAdditionalSkillDelayTime(const unsigned short)
  private int CPCBattle::GetAdditionalSkillStateCastTime(const unsigned short)
  public class CPCBattle & operator=(const class CPCBattle &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCBattle::CAttackInfoForRace {
      public const int size()
  public const struct CPCBattle::CAttackInfoForRace::stValues & CPCBattle::CAttackInfoForRace::GetInfo(const int, const int)
  public const class std::map<int,CPCBattle::CAttackInfoForRace::stValues,std::less<int>,std::allocator<std::pair<int const ,CPCBattle::CAttackInfoForRace::stValues> > > & CPCBattle::CAttackInfoForRace::GetInfo(const int)
  public void CPCBattle::CAttackInfoForRace::AddAttackInfoForRace(const int, const int, const int, const int, const int)
  public void Reset()
  private void CPCBattle::CAttackInfoForRace::add(const int, const int, const int, const int, const int)
  /* this+0x0 */ class std::map<int,std::map<int,CPCBattle::CAttackInfoForRace::stValues,std::less<int>,std::allocator<std::pair<int const ,CPCBattle::CAttackInfoForRace::stValues> > >,std::less<int>,std::allocator<std::pair<int const ,std::map<int,CPCBattle::CAttackInfoForRace::stValues,std::less<int>,std::allocator<std::pair<int const ,CPCBattle::CAttackInfoForRace::stValues> > > > > > m_RaceAtkInfo

  public void CPCBattle::CAttackInfoForRace::~CAttackInfoForRace()
  public void CAttackInfoForRace(const class CPCBattle::CAttackInfoForRace &)
  public void CAttackInfoForRace()
  public class CPCBattle::CAttackInfoForRace & operator=(const class CPCBattle::CAttackInfoForRace &)
  public void * __vecDelDtor(unsigned int)
}

struct CPCBattle::CAttackInfoForRace::stValues {
  /* this+0x0 */ int value1
  /* this+0x4 */ int value2
  /* this+0x8 */ int value3
  public void stValues(const int, const int, const int)
  public void stValues()
}

struct CPCBattle::stBADSTATE_EFST_INFO {
  /* this+0x0 */ unsigned short wPercent
  /* this+0x4 */ unsigned long dwKeepTime
}

struct CPCBattle::tagSkillData {
  /* this+0x0 */ int Data
}

struct CPCBattle::tagSkillDelay {
  /* this+0x0 */ int DelayTime
}

struct CPCBattle::tagSkillSP {
  /* this+0x0 */ int SpValue
}

struct CPCBattle::tagSkillStateCastTime {
  /* this+0x0 */ int CastTime
}

union CPCBattle::unionSkillStdOption {
  /* this+0x0 */ struct CPCBattle::tagSkillSP m_tagSkillSP

  /* this+0x0 */ struct CPCBattle::tagSkillDelay m_tagSkillDelay

  /* this+0x0 */ struct CPCBattle::tagSkillData m_tagSkillData

  /* this+0x0 */ struct CPCBattle::tagSkillStateCastTime m_tagSkillStateCastTime

  public void operator+=(const union CPCBattle::unionSkillStdOption &)
  public void unionSkillStdOption()
}

class CPCBattleHomun {
  public void CPCBattleHomun(const class CPCBattleHomun &)
  public void CPCBattleHomun::CPCBattleHomun()
  public void CPCBattleHomun::~CPCBattleHomun()
  public void CPCBattleHomun::Reset()
  public void SetHomunDBFmt(const class CLogonPermitADBWork::CHomunLogonData &)
  public void CPCBattleHomun::GetHomunDBFmt(class CNpcHomun *, class HomunDataStuff::CHomunData &)
  public void UpdateHomunData(class CNpcHomun *)
  private void SetHomunEffectData(const class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > &)
  public void SetHomunEffectData()
  public const class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > & GetHomunEffectData()
  public const class std::map<unsigned short,HO_SKINFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HO_SKINFO> > > & GetHomunSkillData()
  private void SetHomunSkillData()
  private void SetHomunSkillData(const class std::map<unsigned short,HO_SKINFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HO_SKINFO> > > &)
  /* this+0x0 */ class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > m_EfstList

  /* this+0x10 */ class std::map<unsigned short,HO_SKINFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HO_SKINFO> > > m_Skill

  public class CPCBattleHomun & operator=(const class CPCBattleHomun &)
  public void * __vecDelDtor(unsigned int)
}

class CPCBattleMercenary {
    *
            /* this+0x4 */ bool m_bCall
  /* this+0x5 */ bool m_bModify
  /* this+0x8 */ class std::map<int,CPCBattleMercenary::TypicalJobInfo,std::less<int>,std::allocator<std::pair<int const ,CPCBattleMercenary::TypicalJobInfo> > > m_TypicalJobInfoContainer

  /* this+0x18 */ enum CPCBattleMercenary::enumWorkStep m_WorkStep
    /* this+0x1c */ class CPCBattleMercenary::CProxyDB m_ProxyDB

  public void CPCBattleMercenary::Clear()
  public const enum CPCBattleMercenary::enumWorkStep GetWorkStep()
  public void SetWorkStep(const enum CPCBattleMercenary::enumWorkStep)
  public bool isCall()
  public bool CPCBattleMercenary::GetTypicalJobInfo(const int, struct CPCBattleMercenary::TypicalJobInfo &)
  public bool CPCBattleMercenary::InsertTypicalJobInfo(const int, struct CPCBattleMercenary::TypicalJobInfo)
  public void CPCBattleMercenary::UpdateTypicalJobInfo(const int, struct CPCBattleMercenary::TypicalJobInfo)
  public void CPCBattleMercenary::SetCall(int)
  public int CPCBattleMercenary::GetTotalSummonNum(const int)
  public int CPCBattleMercenary::GetFaith(const int)
  public void CPCBattleMercenary::SubFaith(const int, const int)
  public void CPCBattleMercenary::AddFaith(const int, const int)
  public class CPCBattleMercenary & operator=(const class CPCBattleMercenary &)
  public class CPCBattleMercenary & CPCBattleMercenary::operator=(const struct CPCBattleMercenary::tagDBData &)
  public struct CPCBattleMercenary::tagDBData operator struct CPCBattleMercenary::tagDBData()
  public void CPCBattleMercenary(const class CPCBattleMercenary &)
  public void CPCBattleMercenary::CPCBattleMercenary()
  public void CPCBattleMercenary::~CPCBattleMercenary()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCBattleMercenary::CProxyDB {
  /* this+0x0 */ bool m_bLoad
  /* this+0x4 */ struct CMercenaryDBV2::DBINFO m_Info

  /* this+0x2c */ unsigned char[0x200] m_EffectData
  /* this+0x22c */ int m_EffectLength
  /* this+0x230 */ unsigned char[0x200] m_StateData
  /* this+0x430 */ int m_StateLength
  public void CProxyDB()
  public void ~CProxyDB()
  public void * __vecDelDtor(unsigned int)
}

struct CPCBattleMercenary::TypicalJobInfo {
  /* this+0x0 */ int tatal_call_number
  /* this+0x4 */ int faith
  public void TypicalJobInfo()
}

struct CPCBattleMercenary::tagDBData {
  /* this+0x0 */ int m_Call
  /* this+0x4 */ struct CPCBattleMercenary::TypicalJobInfo m_arch

  /* this+0xc */ struct CPCBattleMercenary::TypicalJobInfo m_spear

  /* this+0x14 */ struct CPCBattleMercenary::TypicalJobInfo m_sword

  public void tagDBData()
}

class CPCBodyItemIV {
  CPCItemInventory, offset = 0x0

  public void CPCBodyItemIV(const class CPCBodyItemIV &)
  public void CPCBodyItemIV::CPCBodyItemIV()
  public void CPCBodyItemIV::~CPCBodyItemIV()
  public class IVItItem * CPCBodyItemIV::Add(class IVItItem *, int, int)
  public int CPCBodyItemIV::IdentifyItem(short)
  public void DeadPenalty(int)
  public void SendNotifyQuest()
  public class std::vector<short,std::allocator<short> > CPCBodyItemIV::GetIsMergeItemList()
  public void CPCBodyItemIV::Init()
  public void CPCBodyItemIV::Reset()
  public int CPCBodyItemIV::Delete(short, short)
  public int CPCBodyItemIV::Delete(short)
  public int CPCBodyItemIV::GetSize()
  /* this+0x20 */ int m_questItemCount
  public class CPCBodyItemIV & operator=(const class CPCBodyItemIV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCBuyingStore {
      public void CPCBuyingStore(const class CPCBuyingStore &)
  public void CPCBuyingStore::CPCBuyingStore()
  public void CPCBuyingStore::~CPCBuyingStore()
  public void CPCBuyingStore::Init()
  public void CPCBuyingStore::Reset()
  public void CPCBuyingStore::CreateStore(const char *, const int)
  public bool CPCBuyingStore::SetItem(const unsigned short, const int, const short, const unsigned char)
  public void CPCBuyingStore::SubItmeCount(const unsigned short, const int)
  public const char * GetStoreName()
  public const int GetLimitMoney()
  public bool IsStoreOpen()
  public const unsigned long GetID()
  public const int GetListSize()
  public const unsigned long SubLimitMoney(const int)
  public const bool CPCBuyingStore::IsTradeBuyingStore(const int)
  public const int CPCBuyingStore::GetPrice(const unsigned short)
  public const class std::vector<BUYING_STORE_ITEMLIST,std::allocator<BUYING_STORE_ITEMLIST> > & GetItemList()
  public class std::_Vector_const_iterator<std::_Vector_val<BUYING_STORE_ITEMLIST,std::allocator<BUYING_STORE_ITEMLIST> > > List_begin()
  public class std::_Vector_const_iterator<std::_Vector_val<BUYING_STORE_ITEMLIST,std::allocator<BUYING_STORE_ITEMLIST> > > List_end()
  public const struct std::pair<int,short> CPCBuyingStore::GetPriceAndCnt(const unsigned short)
  public const unsigned int CPCBuyingStore::GetSSI_ID(const unsigned short)
  /* this+0x0 */ class std::map<unsigned short,BUYINGSTORE_ITEMEXTRA_INFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,BUYINGSTORE_ITEMEXTRA_INFO> > > m_item_extraInfo

  private void DeleteExtraInfo(short)
  /* this+0x10 */ char[0x50] m_StoreName
  /* this+0x60 */ bool m_isStoreOpen
  /* this+0x64 */ unsigned long m_ID
  /* this+0x68 */ int m_nLimitMoney
  /* [0x0003:0x0004b27c] */ static  unsigned long m_GeratorID
  /* this+0x6c */ class std::vector<BUYING_STORE_ITEMLIST,std::allocator<BUYING_STORE_ITEMLIST> > m_ItemList

  public class CPCBuyingStore & operator=(const class CPCBuyingStore &)
  public void * __vecDelDtor(unsigned int)
}

class CPCCartItemIV {
  CPCItemInventory, offset = 0x0

  public void CPCCartItemIV(const class CPCCartItemIV &)
  public void CPCCartItemIV::CPCCartItemIV()
  public void CPCCartItemIV::~CPCCartItemIV()
  public void CPCCartItemIV::Init()
  public class IVItItem * CPCCartItemIV::Add(class IVItItem *, int, int)
  public int CPCCartItemIV::Delete(short, short)
  public int CPCCartItemIV::Delete(short)
  public class IVItItem * CPCCartItemIV::Remove(short, short)
  public void SetCartOnFlag(int)
  public int IsCartOn()
  public void CPCCartItemIV::Reset()
  /* this+0x20 */ int m_isFirstCartOn
  public class CPCCartItemIV & operator=(const class CPCCartItemIV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCClientUpdater {
    *
  public void CPCClientUpdater(const class CPCClientUpdater &)
  public void CPCClientUpdater::CPCClientUpdater()
  public void CPCClientUpdater::~CPCClientUpdater()
  public void CPCClientUpdater::SetMyOwner(class CPC *)
  public void CPCClientUpdater::Init()
  public void CPCClientUpdater::SetAccountID(int)
  public void CPCClientUpdater::SetCharacterID(int)
  public void CPCClientUpdater::SetAccountName(const char *)
  public void CPCClientUpdater::SetCharacterName(const char *)
  public void CPCClientUpdater::SetAuthCode(int)
  public void CPCClientUpdater::SetSendable(int)
  public void CPCClientUpdater::InitPosition(int, int, unsigned char)
  public void CPCClientUpdater::SetIndex(int)
  public int CPCClientUpdater::IsMyArea(class CCharacter *, int, int)
  public int CPCClientUpdater::IsMyArea(class CCharacter *, int)
  public int CPCClientUpdater::AddSectionMgr()
  public void CPCClientUpdater::RemoveSectionMgr()
  public void SaveCharUsingTime()
  public int CPCClientUpdater::IsNeighborhood(int, int, int, int, int *, int *)
  public int CPCClientUpdater::MapMove(const char *, short, short, unsigned long, int)
  private int CPCClientUpdater::MapMove_SameServer(const char *, short, short)
  private int CPCClientUpdater::MapMove_OtherServer(const int, const char *, short, short, const unsigned long)
  private bool CPCClientUpdater::MapMove_OtherServer_Part1(const unsigned long, const int)
  public void CPCClientUpdater::MapMove_OtherServer_Part2(const unsigned long, const int)
  public void CPCClientUpdater::OnDead(unsigned long)
  public void CPCClientUpdater::PCDataMoveToPVP()
  public unsigned long CPCClientUpdater::GetAccountID()
  public unsigned long CPCClientUpdater::GetCharacterID()
  public void CPCClientUpdater::SetParameterPointValue()
  public int GetAuthCode()
  public int GetErrorCount()
  public void CPCClientUpdater::NotifyParameter(unsigned short, int)
  public int CPCClientUpdater::GetParPointValue(char)
  public void CPCClientUpdater::ReStart(unsigned long)
  public int CPCClientUpdater::IsSendable()
  /* this+0x4 */ unsigned char m_disconnectType
  public void CPCClientUpdater::NotifyDisconnect()
  public int CPCClientUpdater::GetSPHealVelocity()
  public int CPCClientUpdater::GetHPHealVelocity()
  public int CPCClientUpdater::GetStatusUpgradeCost(const int)
  public void CPCClientUpdater::StopMove()
  public void CPCClientUpdater::NotifyStopMove(const bool)
  public void CPCClientUpdater::NotifyStatuePlusInfo()
  public void CPCClientUpdater::ReleaseEffectState()
  public void CatchInfo(unsigned long)
  public void CatchInfoRemove(unsigned long)
  public void CPCClientUpdater::RestartAtCampBase(unsigned long)
  /* this+0x8 */ class CPC * m_pc
  private void CPCClientUpdater::UpdateCharacter(class std::vector<CCharacter *,std::allocator<CCharacter *> > *)
  private void CPCClientUpdater::OnClearDialog(int)
  private void CPCClientUpdater::OnDialog(int, int, int)
  private void CPCClientUpdater::OnDialog2(const unsigned long, const int, const int, const int)
  private void CPCClientUpdater::OnWaitDialog(int)
  private void CPCClientUpdater::OnWaitDialog2(const int, const int)
  private void CPCClientUpdater::OnCloseDialog(int)
  private void CPCClientUpdater::OnNavigationActive(int, int, int)
  private void CPCClientUpdater::OnProgress(unsigned long, unsigned long)
  private void CPCClientUpdater::OnPorgressCancel()
  private void CPCClientUpdater::OnMenuList(int, int, int)
  private void CPCClientUpdater::NotifyLongParameter(unsigned short, int)
  private void CPCClientUpdater::NotifyBan(const unsigned long, const int)
  private int UpdateState(unsigned char, unsigned char)
  private void CPCClientUpdater::IncreaseJobPoint(short)
  private void CPCClientUpdater::IncreaseSkillPoint(short)
  private void CPCClientUpdater::ReqStatus()
  private void CPCClientUpdater::NotifyUpdateInfo(class CPC *)
  private void CPCClientUpdater::NotifyMoveToNeighborCharacter()
  private void Pause(unsigned long)
  private void Reset()
  private void CPCClientUpdater::OnWhisper(int, short, char *)
  private void CPCClientUpdater::OnWhisper_2(int, short, char *)
  private void CPCClientUpdater::OnWhisperAck(unsigned char)
  private void CPCClientUpdater::OnUserCount(int)
  private void CPCClientUpdater::OnChat(class CCharacter *, int, char *)
  private void CPCClientUpdater::NotifyStatusParameter(unsigned long, int, int)
  private void CPCClientUpdater::NotifyRankingInfo(class CPC *)
  private void CPCClientUpdater::NotifySpiritsInfo(class CPC *)
  private void CPCClientUpdater::NotifySpriteChange(class CPC *, int, int)
  private void CPCClientUpdater::AckStatusToGM(class CPC *)
  private void CPCClientUpdater::NotifyBattleFieldCampInfo(class CPC *)
  private void BroadcastHP()
  private void CPCClientUpdater::NotifyMillenniumShieldInfo(class CPC *, short)
  private void CPCClientUpdater::NotifyForceOfVanguardInfo(class CPC *, short)
  private void CPCClientUpdater::NotifyOptionalInfo(class CPC *, int)
  public class CPCClientUpdater & operator=(const class CPCClientUpdater &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCElemental {
    public void CPCElemental::Init()
  public enum CPCElemental::enumState GetState()
  public void SetState(enum CPCElemental::enumState)
  public bool CPCElemental::Create_Before(class CPC *, const enum ElementalStuff::enumKind, const enum ElementalStuff::enumScale, const int, const int)
  public void CPCElemental::Create_After(class CPC *, const class CElementalCreateADBWork *)
  public void CPCElemental::Delete(class CPC *)
  public void CPCElemental::Load(class CPC *, const class CLogonPermitADBWorkStuff::CElementalData &)
  public void CPCElemental::GetSaveData(class CPC *, class CSaveAllADBWorkStuff::CElementalData &)
  public void CPCElemental::Release()
  public unsigned long CPCElemental::GetAID()
  /* this+0x0 */ enum CPCElemental::enumState m_State
  /* this+0x4 */ unsigned long m_AID
  public void CPCElemental::CPCElemental()
  public void ~CPCElemental()
  public void * __vecDelDtor(unsigned int)
}

class CPCEquipedItemIV {
  CPCItemInventory, offset = 0x0

  public void CPCEquipedItemIV(const class CPCEquipedItemIV &)
  public void CPCEquipedItemIV::CPCEquipedItemIV()
  public void CPCEquipedItemIV::~CPCEquipedItemIV()
  public void CPCEquipedItemIV::Init()
  public class IVItItem * CPCEquipedItemIV::Add(class IVItItem *, int, int)
  public class IVItItem * CPCEquipedItemIV::Remove(short, short)
  public int CPCEquipedItemIV::Delete(short, short)
  public short CPCEquipedItemIV::GetStatusValueOfEquipedItem(unsigned long)
  public short CPCEquipedItemIV::GetPlusPowerOfItem(unsigned long)
  public void Equip(unsigned short, class IVItItem *)
  public int CPCEquipedItemIV::IsEquipable(unsigned short &, class IVItItem *, const unsigned long)
  public class CITP * CPCEquipedItemIV::GetITPEquipedWeapon()
  public class IVItEquipItem * CPCEquipedItemIV::GetEquipedItem(unsigned long)
  public class CITP * CPCEquipedItemIV::GetITPEquipedArmor()
  public class IVItItem * CPCEquipedItemIV::GetEquipedArrow()
  public void CPCEquipedItemIV::TakeOffAllEquip()
  public void CPCEquipedItemIV::TakeOffEquipItem(unsigned long)
  public void CPCEquipedItemIV::DeadPenalty(int)
  public void CPCEquipedItemIV::DropItem(unsigned long)
  public int CPCEquipedItemIV::GetRefiningAttackValue(class IVItItem *, class CITP *)
  public void CPCEquipedItemIV::MoveBack_NORMALARROWITEM()
  public unsigned long CPCEquipedItemIV::GetLocation(const class IVItItem *)
  protected void CPCEquipedItemIV::PlusStatus(class CITP *)
  protected void CPCEquipedItemIV::MinusStatus(class CITP *)
  protected void OnEquip(class IVItItem *)
  protected int CPCEquipedItemIV::IsAvailablePos(unsigned short &)
  protected void CPCEquipedItemIV::SetPos(unsigned short, class IVItItem *)
  protected void CPCEquipedItemIV::ProcessItemPropertyOnTakeOff(class IVItItem *)
  protected void CPCEquipedItemIV::ProcessItemProperty(class IVItItem *)
  protected short CPCEquipedItemIV::GetJob()
  protected int CPCEquipedItemIV::GetLevel()
  protected void CPCEquipedItemIV::SetItemPointerNull(class IVItItem *)
  /* this+0x20 */ struct ITEM_PLUSSTATUS_VALUE m_statusValueOfItem

  /* this+0x2c */ struct ITEM_PLUSPOWEROFITEM m_plusPowerOfItem

  private void CPCEquipedItemIV::SetPosAvailable(unsigned short &)
  /* this+0x40 */ class IVItItem * m_head
  /* this+0x44 */ class IVItItem * m_body
  /* this+0x48 */ class IVItItem * m_larm
  /* this+0x4c */ class IVItItem * m_rarm
  /* this+0x50 */ class IVItItem * m_robe
  /* this+0x54 */ class IVItItem * m_shoes
  /* this+0x58 */ class IVItItem * m_accessory1
  /* this+0x5c */ class IVItItem * m_accessory2
  /* this+0x60 */ class IVItItem * m_head2
  /* this+0x64 */ class IVItItem * m_head3
  /* this+0x68 */ class IVItItem * m_arrow
  /* this+0x6c */ unsigned short m_wearState
  /* this+0x70 */ class IVItItem * m_costume_head
  /* this+0x74 */ class IVItItem * m_costume_head2
  /* this+0x78 */ class IVItItem * m_costume_head3
  /* this+0x7c */ class IVItItem * m_costume_robe
  public void CPCEquipedItemIV::ForceChangeSpriteCostume()
  public void CPCEquipedItemIV::ForceChangeSpriteNonCostume()
  private const bool CPCEquipedItemIV::IsChangeSprite(const unsigned long)
  private const bool CPCEquipedItemIV::IsChangeSprite2(const unsigned long)
  private void CPCEquipedItemIV::ChangeSpriteNonCostume(const unsigned long, const short)
  private const class IVItItem * CPCEquipedItemIV::GetEquipNonCostumeItem(const unsigned long)
  private void CPCEquipedItemIV::ResetSprite(const unsigned long, const short)
  private void CPCEquipedItemIV::ResetSprite2(const unsigned long, const short, bool *)
  public class CPCEquipedItemIV & operator=(const class CPCEquipedItemIV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCExchangeItemIV {
  CPCItemInventory, offset = 0x0

  public void CPCExchangeItemIV(const class CPCExchangeItemIV &)
  public void CPCExchangeItemIV::CPCExchangeItemIV()
  public void CPCExchangeItemIV::~CPCExchangeItemIV()
  public void CPCExchangeItemIV::Init()
  public class IVItItem * CPCExchangeItemIV::Add(class IVItItem *, int, int)
  public void CPCExchangeItemIV::SetMoney(int)
  public int CPCExchangeItemIV::GetMoney()
  public void CPCExchangeItemIV::Reset()
  /* this+0x20 */ int m_money
  public class CPCExchangeItemIV & operator=(const class CPCExchangeItemIV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCExtraItemIV {
  CPCItemInventory, offset = 0x0

  public void CPCExtraItemIV::Init()
  public class IVItItem * CPCExtraItemIV::Add(class IVItItem *, int, int)
  public void CPCExtraItemIV::SetMoney(int)
  public int CPCExtraItemIV::GetMoney()
  public void CPCExtraItemIV::Reset()
  /* this+0x20 */ int m_money
  public void CPCExtraItemIV(const class CPCExtraItemIV &)
  public void CPCExtraItemIV::CPCExtraItemIV()
  public void CPCExtraItemIV::~CPCExtraItemIV()
  public class CPCExtraItemIV & operator=(const class CPCExtraItemIV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCFormula_CommonSupport {
  CActorFormula_CommonSupport, offset = 0x0

  public void CPCFormula_CommonSupport::Check_MonsterType(class CCharacter *, int &, short &, unsigned short, bool)
  public void CPCFormula_CommonSupport::Check_MAPPROPERTY(class CCharacter *, int &, short &, int, unsigned short, bool)
  public bool CPCFormula_CommonSupport::Check_BASILICA(class CCharacter *, int &)
  public bool CPCFormula_CommonSupport::Check_MAGICROD(class CCharacter *, int &, unsigned short, short)
  public bool CPCFormula_CommonSupport::Check_TAEKWONCLASS_DODGE(class CCharacter *, int &, int)
  public bool CPCFormula_CommonSupport::Check_DEVOTION(class CCharacter *, int &, int, int, unsigned long &, unsigned short)
  public bool CPCFormula_CommonSupport::Check_SHADOWFORM(class CCharacter *, int &, int, int, unsigned long &, unsigned short)
  public bool CPCFormula_CommonSupport::Check_WATER_SCREEN(class CCharacter *, int &, int, int, unsigned long &, unsigned short)
  public void CPCFormula_CommonSupport::ProcessAtkerEffectByAttack(class CCharacter *, int, int, bool)
  public void CPCFormula_CommonSupport::ProcessTargetEffectByAttacked(class CCharacter *, int &, int, int, int, int)
  public void CPCFormula_CommonSupport(class CPC *)
  private void CPCFormula_CommonSupport::Check_SetHandicapStateByAttack(class CCharacter *, int, bool)
  private void CPCFormula_CommonSupport::Check_SNATCHER(class CCharacter *, int, bool)
  private void CPCFormula_CommonSupport::Check_MELTDOWN(class CCharacter *)
  private void CPCFormula_CommonSupport::Check_AtkerSTDByAttack(class CCharacter *)
  private void CPCFormula_CommonSupport::Check_STAR(class CCharacter *)
  private void CPCFormula_CommonSupport::Check_STONEHARDSKIN(class CCharacter *, int, int)
  private void CPCFormula_CommonSupport::Check_ENERGYCOAT(class CCharacter *, int &)
  private void CPCFormula_CommonSupport::Check_SWORDREJECT(class CCharacter *, int &)
  private void CPCFormula_CommonSupport::Check_POISONREACT(class CCharacter *)
  private void CPCFormula_CommonSupport::Check_NINJA(class CCharacter *, int &)
  private void CPCFormula_CommonSupport::Check_SetHandicapStateByAttacked(class CCharacter *, int)
  private void CPCFormula_CommonSupport::Check_PYROCLASTIC(class CCharacter *, int, bool)
  /* this+0x4 */ class CPC * m_pc
}

class CPCFormula_MagicSupport {
  CActorFormula_CommonSupport, offset = 0x0

  public void CPCFormula_MagicSupport::PreWork_BeforeGetMagicFinalDamage(class CCharacter *, int &, const int)
  public int CPCFormula_MagicSupport::GetMagicItemPower()
  public void CPCFormula_MagicSupport::ModifyMagicBaseATKPower(int &)
  public int CPCFormula_MagicSupport::GetMagicAtkerSTDValue(class CCharacter *, int, int)
  public int CPCFormula_MagicSupport::GetMagicTargetSTDValue(class CCharacter *, int, unsigned short, int)
  public int CPCFormula_MagicSupport::GetMagicAtkerSKValue(class CCharacter *, int, unsigned short)
  public int CPCFormula_MagicSupport::GetMagicTargetSKValue(class CCharacter *, const int, const unsigned short)
  public void CPCFormula_MagicSupport::ModifyMagicFinalATKPowerByTargetMDEF(class CCharacter *, int &)
  public void CPCFormula_MagicSupport::ModifyMagicFinalATKPower_AfterApplyTargetMDEF(class CCharacter *, int &, unsigned short)
  public void CPCFormula_MagicSupport(class CPC *)
  /* this+0x4 */ class CPC * m_pc
}

class CPCFormula_PhysicsSupport {
  CPCFormula_CommonSupport, offset = 0x0

  public void CPCFormula_PhysicsSupport::PreWork_BeforeGetPhysicsFinalDamage(int &, int &, unsigned short)
  public bool CPCFormula_PhysicsSupport::IsPhysicsATKHit(class CCharacter *, int, int, int, unsigned short &)
  public int CPCFormula_PhysicsSupport::GetPhysicsFinalATKPower(class CCharacter *, int, int, int, int, int, int, unsigned short, short)
  public bool CPCFormula_PhysicsSupport::PreWork_BeforeGetPhysicsBaseATKPower(int)
  public int CPCFormula_PhysicsSupport::GetPhysicsStatusPower(class CCharacter *)
  public int CPCFormula_PhysicsSupport::GetPhysicsItemPower(class CCharacter *, int, int, int, unsigned short, int)
  public int CPCFormula_PhysicsSupport::GetPhysicsExceptionalBaseATKPower(class CCharacter *, int)
  public int GetPhysicsBaseATKPower(class CCharacter *)
  public void CPCFormula_PhysicsSupport::ModifyPhysicsFinalATKPowerByTargetDEF(class CCharacter *, int &, int)
  public void CPCFormula_PhysicsSupport::ModifyPhysicsFinalATKPower_AfterApplyTargetDEF(class CCharacter *, int &, int, int, unsigned short)
  public bool CPCFormula_PhysicsSupport::IsEnableActionAttack(class CCharacter *, int, bool &)
  public void CPCFormula_PhysicsSupport::ResetHidingStateByActionAttack()
  public int CPCFormula_PhysicsSupport::GetActionAttackATKProperty()
  public bool CPCFormula_PhysicsSupport::ProcessActionAttackCounter(class CCharacter *, int, int)
  public bool CPCFormula_PhysicsSupport::SetActionAttackStartTime(unsigned long &)
  public void CPCFormula_PhysicsSupport::MotivateSkillByActionAttack(class CCharacter *)
  public void CPCFormula_PhysicsSupport::Check_AssassinWeapon(class CCharacter *, int &, short &)
  public void CPCFormula_PhysicsSupport::Check_Kagerou_OboroWeapon(class CCharacter *, int &, short &)
  public void CPCFormula_PhysicsSupport::InsertActionImplicitAttackCommandQueue(class CCharacter *, const int, const int, const int, const bool)
  public void CPCFormula_PhysicsSupport::InsertActionAttackCommandQueue(class CCharacter *, int, short, int, int, int, int)
  public void CPCFormula_PhysicsSupport::PostWork_AfterActionAttack(int, int)
  public int CPCFormula_PhysicsSupport::GetActionAttackDamage(class CCharacter *, int, struct PACKET_ZC_NOTIFY_ACT3 *)
  public bool CPCFormula_PhysicsSupport::GetActionAttackCount(short &, int &)
  public void CPCFormula_PhysicsSupport(class CPC *)
  public int GetPhysicsTargetSTDValueExposed(class CCharacter *, int, int, int, int, unsigned short, short)
  private void CPCFormula_PhysicsSupport::Check_OVERTHRUST()
  private void CPCFormula_PhysicsSupport::ModifyPlusATKPercent_PhysicsFinalDamage(int &, unsigned short)
  private void CPCFormula_PhysicsSupport::ModifyPlusHITPercent_PhysicsFinalDamage(int &)
  private bool ReduceSPByPhysicsATK(const int)
  private void CPCFormula_PhysicsSupport::ModifyPhysicsItemPowerByScale(class CCharacter *, int &, int)
  private int CPCFormula_PhysicsSupport::GetPhysicsAtkerSTDValue(class CCharacter *, int, int, int, int, unsigned short, short)
  private int CPCFormula_PhysicsSupport::GetPhysicsTargetSTDValue(class CCharacter *, int, int, int, int, unsigned short, short)
  private int CPCFormula_PhysicsSupport::GetPhysicsAtkerSKValue(class CCharacter *, int, int, int, unsigned short, short, int)
  private int CPCFormula_PhysicsSupport::GetPhysicsTargetSKValue(class CCharacter *, const unsigned short, const int, const int)
}

class CPCFormula_SkillAttackSupport {
  CPCFormula_CommonSupport, offset = 0x0

  public bool CPCFormula_SkillAttackSupport::IsEnableSkillAttack(class CCharacter *, struct SKILLATTACK_MSG *)
  public int CPCFormula_SkillAttackSupport::GetSkillAttackProperty(struct SKILLATTACK_MSG *, class CSkillTypeInfo *)
  public int CPCFormula_SkillAttackSupport::GetSkillAttackPattern(struct SKILLATTACK_MSG *, class CSkillTypeInfo *)
  public int CPCFormula_SkillAttackSupport::GetSkillAttackDamage(class CCharacter *, int, int, int &, int, int, struct SKILLATTACK_MSG *)
  public bool CPCFormula_SkillAttackSupport::Check_KAITE(class CCharacter *, int, struct PACKET_ZC_NOTIFY_SKILL2 *, class CSkillTypeInfo *, int)
  public void CPCFormula_SkillAttackSupport::InsertSkillAttackCommandQueue(class CCharacter *, struct SKILLATTACK_MSG *, int, int, int, int)
  public void CPCFormula_SkillAttackSupport(class CPC *)
  private int CPCFormula_SkillAttackSupport::GetSkillAttackDamageCalculateType(class CCharacter *, struct SKILLATTACK_MSG *)
}

class CPCFriendClass {
    *
  public static void CPCFriendClass::HPRecoveryProhibitionSet(class CPC *)
  public static void CPCFriendClass::HPRecoveryProhibitionReset(class CPC *)
  public static void CPCFriendClass::SPRecoveryProhibitionSet(class CPC *)
  public static void CPCFriendClass::SPRecoveryProhibitionReset(class CPC *)
  public static void CPCFriendClass::SetPERSONAL_INFOMATION(class CPC *, bool, int, int, int, int, unsigned long, short, short, int, int, int, int, const struct PACKET_ZC_PERSONAL_INFOMATION::DETAIL_EXP_INFO &, const struct PACKET_ZC_PERSONAL_INFOMATION::DETAIL_EXP_INFO &, const struct PACKET_ZC_PERSONAL_INFOMATION::DETAIL_EXP_INFO &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_YAMIKUMO(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_JYUMONJIKIRI(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_SETSUDAN(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_BAKURETSU(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_HAPPOKUNAI(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_MUCHANAGE(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_MAKIBISHI(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static void CPCFriendClass::KO_MAKIBISHI_OnTouched(class CPC *, class CCharacter *, const int, const unsigned long, const int, const int)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_MEIKYOUSISUI(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_ZANZOU(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_HUUMARANKA(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_JYUSATSU(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_KAHU_ENTEN(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_HYOUHU_HUBUKI(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_KAZEHU_SEIRAN(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_DOHU_KOUKAI(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_KAIHOU(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &, struct SKILLATTACK_MSG &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_ZENKAI(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static void CPCFriendClass::KO_ZENKAI_OnTouched(class CPC *, class CCharacter *, const unsigned long)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_KYOUGAKU(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_GENWAKU(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KO_IZAYOI(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KG_KAGEHUMI(class CPC *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KG_KYOMU(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::KG_KAGEMUSYA(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::OB_ZANGETSU(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::OB_OBOROGENSOU(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public static enum CActor::SKILL_RETURN CPCFriendClass::OB_AKAITSUKI(class CPC *, class CCharacter *, const struct MSG_TYPE_SKILLDATA &)
  public static bool CPCFriendClass::CheckNPCAround(class CPC *)
  public void CPCFriendClass(const class CPCFriendClass &)
  private void CPCFriendClass()
  private void ~CPCFriendClass()
  public class CPCFriendClass & operator=(const class CPCFriendClass &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CPCHireItemCtrl {
    *
          /* this+0x4 */ class std::map<__int64,CPCHireItemCtrl::CRequest,std::less<__int64>,std::allocator<std::pair<__int64 const ,CPCHireItemCtrl::CRequest> > > m_ReqContainer

  /* this+0x14 */ class CPC * m_cpMyOwnerPC
  private bool CPCHireItemCtrl::RequestProcess(const __int64, class CPCHireItemCtrl::CRequest &)
  private unsigned long CPCHireItemCtrl::GetNexCheckTime(const long, const unsigned long, const class IVItItem * const)
  protected void CPCHireItemCtrl::Init(class CPC *)
  protected void CPCHireItemCtrl::Reset()
  protected void CPCHireItemCtrl::Process()
  public void RequestAdd(const enum enumInventoryType, class IVItItem *)
  public void RequestRemove(class IVItItem * const)
  public void CPCHireItemCtrl(const class CPCHireItemCtrl &)
  public void CPCHireItemCtrl::CPCHireItemCtrl()
  public void CPCHireItemCtrl::~CPCHireItemCtrl()
  public class CPCHireItemCtrl & operator=(const class CPCHireItemCtrl &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCHireItemCtrl::CRequest {
  /* this+0x0 */ enum enumInventoryType m_InventoryType
  /* this+0x4 */ unsigned long m_RequestCheckTime
  /* this+0x8 */ int m_ErrorCount
  public void CRequest(const enum enumInventoryType, const unsigned long)
}

class CPCHuntIndex {
    *
    public void CPCHuntIndex(const class CPCHuntIndex &)
  public void CPCHuntIndex::CPCHuntIndex()
  public void CPCHuntIndex::~CPCHuntIndex()
  /* this+0x4 */ class std::map<unsigned long,CNode *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CNode *> > > m_map

  public void CPCHuntIndex::Clear()
  public void DeleteHunt(unsigned long)
  public void CPCHuntIndex::EraseHuntIdent(const unsigned long, const unsigned int, const int)
  public bool CPCHuntIndex::AddHuntList(const unsigned int, unsigned long, int)
  public int GetHuntIdentList(unsigned long, class std::list<int,std::allocator<int> > &)
  public int GetHuntQIDList(const unsigned int, class std::list<unsigned int,std::allocator<unsigned int> > &)
  public int CPCHuntIndex::GetHuntAllInfo(const unsigned int, class std::map<int,unsigned int,std::less<int>,std::allocator<std::pair<int const ,unsigned int> > > &)
  public class CPCHuntIndex & operator=(const class CPCHuntIndex &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCHuntMissionMgr {
    *
    public void CPCHuntMissionMgr(const class CPCHuntMissionMgr &)
  public void CPCHuntMissionMgr::CPCHuntMissionMgr()
  public void CPCHuntMissionMgr::~CPCHuntMissionMgr()
  /* this+0x4 */ class std::map<unsigned int,CHuntInfo *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CHuntInfo *> > > m_map

  public void CPCHuntMissionMgr::Reset()
  public class CHuntInfo * CPCHuntMissionMgr::Get(const unsigned int)
  public void Del(const unsigned int)
  public class CPCHuntMissionMgr & operator=(const class CPCHuntMissionMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCItem {
    *
  public void CPCItem(const class CPCItem &)
  public void CPCItem::CPCItem()
  public void CPCItem::~CPCItem()
  public void CPCItem::Init()
  public void CPCItem::SetMyOwner(class CPC *)
  public int CPCItem::ParseItem(const char *, short)
  public int CPCItem::ParseStoredItem(const char *, short)
  public int CPCItem::ParseCartItem(const char *, short)
  public void CPCItem::CheckStateSpecialItem()
  public void CPCItem::OnEquipedSpecialITM(unsigned long)
  public void CPCItem::OnTakeOffSpecialITM(unsigned long)
  public void RefreshEquipItem()
  public int GetCombinationItemCount()
  private int CPCItem::IsEquipedSPItem(unsigned long)
  private void CPCItem::CHK_CompleteCombination()
  private void CPCItem::CHK_ReleaseCombination()
  /* this+0x4 */ class CPC * m_pc
  /* this+0x8 */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > > m_equipedSPItem

  /* this+0x18 */ class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > m_isCombination

  public class CPCItem & operator=(const class CPCItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCItemInventory {
  CInventory, offset = 0x0

  public void CPCItemInventory(const class CPCItemInventory &)
  public void CPCItemInventory::CPCItemInventory()
  public void CPCItemInventory::~CPCItemInventory()
  public void CPCItemInventory::Init()
  public class IVItItem * CPCItemInventory::Add(class IVItItem *, int, int)
  public int CPCItemInventory::Delete(short, short)
  public int CPCItemInventory::Delete(short)
  public class IVItItem * CPCItemInventory::Remove(short, short)
  public void CPCItemInventory::DeleteAll()
  public void CPCItemInventory::GetAllItemWithDBFormat(class CItemDBFmtBuffer &, const bool)
  public void CPCItemInventory::GetAllNormalItemInfoWithBinaryFormat3(class std::vector<unsigned char,std::allocator<unsigned char> > &)
  public void CPCItemInventory::GetAllEquipedItemInfoWithBinaryFormat3(class std::vector<unsigned char,std::allocator<unsigned char> > &, const bool)
  public int CPCItemInventory::OnRequest(struct Request *)
  public void PlusWeight(int)
  public void CPCItemInventory::MinusWeight(int)
  public int GetWeight()
  public int CPCItemInventory::GetSize()
  public int CPCItemInventory::IsAlreadyExist(class IVItItem *)
  public void SetOwner(class CPCItemInventoryMgr *)
  public class IVItItem * CPCItemInventory::SearchItemByUniqueIdentityNum(const __int64)
  public class IVItItem * CPCItemInventory::SearchItemByIndex(short)
  public class IVItItem * CPCItemInventory::SearchItemByID(unsigned short, bool)
  public class IVItItem * CPCItemInventory::SearchItem(unsigned short, unsigned long, const __int64)
  public class IVItItem * CPCItemInventory::SearchItemByID_GID(unsigned short, unsigned long)
  public class std::_Vector_iterator<std::_Vector_val<IVItItem *,std::allocator<IVItItem *> > > GetDataBeginIterator()
  public class std::_Vector_iterator<std::_Vector_val<IVItItem *,std::allocator<IVItItem *> > > GetDataEndIterator()
  public class IVItItem * CPCItemInventory::GetFirstItem()
  public class IVItItem * PeekFirstItem()
  public void CPCItemInventory::SendNotifyQuest()
  public void CPCItemInventory::Reset()
  /* this+0x4 */ class CPCItemInventoryMgr * m_owner
  /* this+0x8 */ short m_indexIncrement
  /* this+0xc */ int m_weight
  /* this+0x10 */ class std::vector<IVItItem *,std::allocator<IVItItem *> > m_itemData

  public class CPCItemInventory & operator=(const class CPCItemInventory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCItemInventoryMgr {
    *
  public void GetAllEquipedItemInfoWithBinaryFormat3(class std::vector<unsigned char,std::allocator<unsigned char> > &, const bool)
  public void CPCItemInventoryMgr::GetBodyItemDBFormat(class CItemDBFmtBuffer &)
  public void CPCItemInventoryMgr::GetCartItemDBFormat(class CItemDBFmtBuffer &)
  public void CPCItemInventoryMgr::GetStoreItemDBFormat(class CItemDBFmtBuffer &)
  public void StoreItemReset()
  public int IsCartOn()
  public void CPCItemInventoryMgr(class CPCItemInventoryMgr &)
  public void CPCItemInventoryMgr::CPCItemInventoryMgr()
  public void CPCItemInventoryMgr::~CPCItemInventoryMgr()
  public void CPCItemInventoryMgr::Init()
  public void CPCItemInventoryMgr::Reset()
  public void CPCItemInventoryMgr::SetMyOwner(class CPC *)
  public void CPCItemInventoryMgr::OnMediatorRequest(struct Request *)
  public void CPCItemInventoryMgr::OnDispatchClientRequest(struct Request *)
  public int IsBodyItemParsing()
  public class IVItItem * CPCItemInventoryMgr::Add(class IVItItem *, unsigned long, unsigned short, int, int)
  public int CPCItemInventoryMgr::isBodyAddMailItem(unsigned short, unsigned long, int, struct EQUIPSLOTINFO, __int64)
  public class IVItItem * CPCItemInventoryMgr::Remove(unsigned long, short, short)
  public void CPCItemInventoryMgr::NotifyPickUpToParty(class IVItItem *)
  public static int CPCItemInventoryMgr::DBValueParser(struct CommonItemInfo *, char *, int)
  private static int DBValueParserV3under(struct CommonItemInfo *, char *, int)
  private static int CPCItemInventoryMgr::DBValueParserV4(struct CommonItemInfo *, char *, const int)
  private static int CPCItemInventoryMgr::DBValueParserV4_INVENTORYITEMTYPE_NORMALITEM(const unsigned short, struct CommonItemInfo *, char *)
  private static int CPCItemInventoryMgr::DBValueParserV4_INVENTORYITEMTYPE_NORMALARROWITEM(const unsigned short, struct CommonItemInfo *, char *)
  private static int CPCItemInventoryMgr::DBValueParserV4_INVENTORYITEMTYPE_EQUIPITEM(const unsigned short, struct CommonItemInfo *, char *)
  private static int CPCItemInventoryMgr::DBValueParserV4_INVENTORYITEMTYPE_CASHPOINTITEM(const unsigned short, struct CommonItemInfo *, char *)
  public enum PASERRET::enumError CPCItemInventoryMgr::Parse(struct Request *, const bool, const bool, const bool)
  private enum PASERRET::enumError CPCItemInventoryMgr::ParseV4(struct Request *, const bool, const bool, const bool)
  private int ParseV3under(struct Request *, int, int, int)
  private class PASERRET CPCItemInventoryMgr::ParseV4_INVENTORYITEMTYPE_NORMALITEM(const unsigned short, const int, const int, class CReadBufferAddapter &, const bool)
  private class PASERRET CPCItemInventoryMgr::ParseV4_INVENTORYITEMTYPE_NORMALARROWITEM(const unsigned short, const int, const int, class CReadBufferAddapter &, const bool)
  private class PASERRET CPCItemInventoryMgr::ParseV4_INVENTORYITEMTYPE_EQUIPITEM(const unsigned short, const int, const int, class CReadBufferAddapter &, const bool)
  private class PASERRET CPCItemInventoryMgr::ParseV4_INVENTORYITEMTYPE_QUESTITEM(const unsigned short, const int, const int, class CReadBufferAddapter &, const bool)
  private class PASERRET CPCItemInventoryMgr::ParseV4_INVENTORYITEMTYPE_CASHPOINTITEM(const unsigned short, const int, const int, class CReadBufferAddapter &, const bool)
  private class IVItItem * CPCItemInventoryMgr::GetThrowItem(const short, const short, const int)
  public void CPCItemInventoryMgr::HireItemCheckAdd(const enum enumInventoryType, class IVItItem *)
  public unsigned long CPCItemInventoryMgr::GetEquipLocationbyIndex(const int)
  public void CPCItemInventoryMgr::ChangeMaterial(const class std::vector<std::pair<int,int>,std::allocator<std::pair<int,int> > > &)
  public void CPCItemInventoryMgr::GN_MIX_COOKING_operation(const int)
  public void CPCItemInventoryMgr::GN_MAKEBOMB_operation(const int)
  public void CPCItemInventoryMgr::GN_S_PHARMACY_operation(const int)
  public int CPCItemInventoryMgr::Save(struct Request *)
  public void CPCItemInventoryMgr::MoveItem(unsigned char, short, int)
  public class IVItItem * CPCItemInventoryMgr::SearchItemByID(unsigned long, unsigned short)
  public const class std::vector<unsigned short const ,std::allocator<unsigned short const > > CPCItemInventoryMgr::SearchItemByID(unsigned long, const class std::vector<unsigned short const ,std::allocator<unsigned short const > > &)
  public class IVItItem * CPCItemInventoryMgr::SearchItemByUniqueIdentityNum(const enum enumInventoryType, const __int64)
  public class IVItItem * CPCItemInventoryMgr::SearchItem(unsigned long, short)
  public int CPCItemInventoryMgr::DeleteItem(unsigned long, short, short)
  public void CPCItemInventoryMgr::DeleteAllBodyItem()
  public void CPCItemInventoryMgr::NotifyItemInfo(const unsigned long)
  public void CPCItemInventoryMgr::RefreshItemWeight()
  public bool CPCItemInventoryMgr::ParseDBFmtBodyItemData(const int, const unsigned char *)
  public bool CPCItemInventoryMgr::IsBodyItemEmpty()
  public void CPCItemInventoryMgr::OnHireItemReturn(const short)
  public class CItem * CPCItemInventoryMgr::OnThrowItem(short, short, int)
  public void CPCItemInventoryMgr::OnUseItem(short, unsigned long)
  public bool OnUseItem_Individual_Checkup(const int)
  public void OnUserItem_Individual_Complete(const int)
  public void CPCItemInventoryMgr::OnWearItem(short, unsigned short)
  public void CPCItemInventoryMgr::OnPickUpItem(unsigned long)
  public void CPCItemInventoryMgr::OnTakeOffEquip(short)
  public short CPCItemInventoryMgr::GetStatusValueOfEquipedItem(unsigned long)
  public int CPCItemInventoryMgr::GetBodyItemWeight()
  public int GetCartItemWeight()
  public int CPCItemInventoryMgr::GetExchangeItemWeight()
  public int CPCItemInventoryMgr::GetBodyItemCount(unsigned short, int &)
  public int CPCItemInventoryMgr::GetJustBodyItemCount(unsigned short, int &)
  public int CPCItemInventoryMgr::GetJustEquipItemCount(unsigned short, int &)
  public bool CPCItemInventoryMgr::IsHaveBodyItem(unsigned short, bool)
  public void CPCItemInventoryMgr::OnSetBodyItem(int, int, int)
    public int CPCItemInventoryMgr::IsAddableMoreItemToBody(unsigned short, short, class CPC *)
  public void CPCItemInventoryMgr::OnExecExchangeItem(int, const int, const int)
  public void CPCItemInventoryMgr::CancelExchangeItem()
  public void CPCItemInventoryMgr::TakeOffEquip(unsigned long)
  public void CPCItemInventoryMgr::TakeOffAllEquip()
  public int CPCItemInventoryMgr::GetBodyItemWeightByPercent()
  public class CITP * CPCItemInventoryMgr::GetITPEquipedWeapon()
  public short CPCItemInventoryMgr::GetEquipedWeaponType()
  public class CITP * CPCItemInventoryMgr::GetITPEquipedArmor()
  public int CPCItemInventoryMgr::GetPlusPowerOfItem(unsigned long)
  public class IVItItem * CPCItemInventoryMgr::UpdateBodyItemCount(unsigned short, int, unsigned short, bool)
  public int CPCItemInventoryMgr::GetAttackDistance()
  public class IVItItem * CPCItemInventoryMgr::GetEquipedArrow()
  public int CPCItemInventoryMgr::OnNotifyItemIdentifyList()
  public int CPCItemInventoryMgr::OnNotifyMakingArrowList()
  public int CPCItemInventoryMgr::OnNotifyMakingElementalList()
  public int CPCItemInventoryMgr::OnNotifyCookingList()
  public int CPCItemInventoryMgr::OnNotifyRepairItemList(class CPC *)
  public void CPCItemInventoryMgr::IdentifyItem(short)
  public class IVItEquipItem * CPCItemInventoryMgr::GetEquipedItem(unsigned long)
  public void CPCItemInventoryMgr::ReqItemCompositionList(short)
  public void CPCItemInventoryMgr::ReqItemComposition(short, short)
  public void CPCItemInventoryMgr::ReqMakeArrow(unsigned short)
  public void CPCItemInventoryMgr::ReqMakeItem(short, unsigned short)
  public void CPCItemInventoryMgr::DeadPenaltyInEquip(int)
  public void DeadPenaltyInBody(int)
  public int CPCItemInventoryMgr::CheckMaxItemCount(int, int)
  public int CPCItemInventoryMgr::isAddBodyItem(int, int)
  public bool CPCItemInventoryMgr::isAddBodyCashItem(int, int)
  public bool CPCItemInventoryMgr::IsMaxWeight(int, int)
  public int CPCItemInventoryMgr::OnNotifyWeaponItemList()
  public int CPCItemInventoryMgr::IsInventoryRemainCount(int, int)
  public class IVItItem * CPCItemInventoryMgr::OnGetItemSocket(int, int *)
  public class IVItItem * CPCItemInventoryMgr::OnGetNonSlotItemSocket(const unsigned short, int *, const unsigned char)
  public bool CPCItemInventoryMgr::ParseDBFmtCartItemData(const int, const unsigned char *)
  public void CPCItemInventoryMgr::NotifyStoreItemCountInfo()
  public void CPCItemInventoryMgr::CloseStore()
  public int CPCItemInventoryMgr::IsStoreOpen()
  public void CPCItemInventoryMgr::ParseDBFmtStoreItemData(const int, const unsigned char *)
  public void CPCItemInventoryMgr::NotifyAckAddItemToCart(unsigned char, class IVItItem *)
  public void CPCItemInventoryMgr::NotifyCartItemCountInfo()
  public void CPCItemInventoryMgr::CloseCart()
  public void OnReqOpenMCStore(int, char *)
  public void CPCItemInventoryMgr::OnReqOpenMCStore2(int, char *)
  public void CPCItemInventoryMgr::NotifyItemInfoInMCStore(unsigned long)
  public void CPCItemInventoryMgr::PurchaseItemFromMCStore(unsigned long, int, char *, const unsigned long)
  public void CPCItemInventoryMgr::NotifyMCStore(unsigned long)
  public void CPCItemInventoryMgr::CancelMCStore()
  public void CPCItemInventoryMgr::NotifyMYMCStoreItemInfo()
  public int CPCItemInventoryMgr::IsMCStoreOpen()
  public void CPCItemInventoryMgr::NotifyMySellableItem(float)
  public void CPCItemInventoryMgr::PurchaseItemR2(const int, const char *)
  public void CPCItemInventoryMgr::SellItem(const class std::vector<CZ_SELL_ITEM,std::allocator<CZ_SELL_ITEM> > &, const float)
  public void CPCItemInventoryMgr::OnExchangeItem(int)
  public class IVItItem * CPCItemInventoryMgr::AllocInventoryItem(unsigned short, short)
  public void CPCItemInventoryMgr::FreeInventoryItem(class InventoryItem *)
  public void CPCItemInventoryMgr::UpgradeRefiningLevel(unsigned long, int)
  public void CPCItemInventoryMgr::DestoryItemOnRefining(unsigned long)
  public void CPCItemInventoryMgr::NotifyAckAddItemToBody(unsigned long, class IVItItem *)
  public void CPCItemInventoryMgr::InsertEmpeliumItem(unsigned short)
  public int CPCItemInventoryMgr::GetEmpeliumItem()
  public void CallPet(class IVItEquipItem *)
  public int CPCItemInventoryMgr::SendPetEggList()
  public void CPCItemInventoryMgr::ConvertPetEggToPet(short)
  public int CPCItemInventoryMgr::ConvertPetToPetEgg(int, int)
  public class IVItItem * CPCItemInventoryMgr::SearchPet(int)
  public class CPC * GetPC()
  public int CPCItemInventoryMgr::GetDamagedItemNum()
  public void CPCItemInventoryMgr::RepairDamagedItem()
  public void CPCItemInventoryMgr::RandomDivision(class CItem *)
  public int CPCItemInventoryMgr::GetCountItemOfMyGID(unsigned long)
  public int CPCItemInventoryMgr::RemoveItemOfMyGID(unsigned long, int)
  public void CPCItemInventoryMgr::CreateItemOfMyGID(unsigned long, int, unsigned long)
  public class IVItEquipItem * CPCItemInventoryMgr::ConvertPet(class IVItItem *)
  public int GetMailItemSize()
  public void CPCItemInventoryMgr::CancelMailItem(int, int)
  public int CPCItemInventoryMgr::GetMailItem(class IVItItem &, int &, class CItemDBFmtBuffer &, unsigned long &)
  public int CPCItemInventoryMgr::PutMailBinaryItem(char *, int)
  public int GetAuctionItemSize()
  public void CPCItemInventoryMgr::CancelAuctionItem()
  public int CPCItemInventoryMgr::GetAuctionItem(class IVItItem &, int &, class CItemDBFmtBuffer &)
  public class IVItItem * CPCItemInventoryMgr::BuyCashPointItem(const unsigned short)
  public int CPCItemInventoryMgr::GetBlacksmithPlusAttackPower(int)
  public bool CPCItemInventoryMgr::GetBlacksmithWeaponProperty(int, int &)
  public void CPCItemInventoryMgr::SetItemPartyInMap(int, int, int)
  public void CPCItemInventoryMgr::DownGradeRefiningLevel(unsigned long, int)
  public short CPCItemInventoryMgr::GetEquipeditemLocation(const short)
  public bool CPCItemInventoryMgr::IsUnPackItem(const class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > &)
  public const bool IsOpenBuyingStore()
  public const unsigned long GetBuyingStoreID()
  public const char * GetBuyingStoreName()
  public const int GetBuyingStoreItemListCnt()
  public const int GetLimitMoneyBuyingStore()
  public const int SubLimitMoneyBuyingStore(const int)
  public const bool IsTradeBuyingStore(const int)
  public void ResetBuyingStore()
  public void CreateBuyingStore(const char *, const int)
  public bool SetItemBuyingStore(const unsigned short, const int, const short, const unsigned char)
  public const unsigned long GetBuyingStoreSSI_ID(const unsigned short)
  public const int GetPriceBuyingStore(const short)
  public const struct std::pair<int,short> GetPriceAndCntBuyingStore(const short)
  public bool CPCItemInventoryMgr::IsPossibleTradeItem(const unsigned short)
  public void CPCItemInventoryMgr::CancelBuyingStore()
  public void CPCItemInventoryMgr::CloseBuyingStore()
  public void CPCItemInventoryMgr::SendMyItemListBuyingStore()
  public void CPCItemInventoryMgr::MutiCast_NotifyBuyingStoreEntry()
  public void CPCItemInventoryMgr::NotifyDisappearBuyingStoreEntry()
  public void CPCItemInventoryMgr::NotifyByingStoreEntry(const unsigned long)
  public void CPCItemInventoryMgr::SendFailedOpenBuyingStore(const int, const int)
  public void CPCItemInventoryMgr::SendtoSeller_FailedTradeBuyingStore(const int, const unsigned short)
  public void CPCItemInventoryMgr::SendtoBuyer_FailedTradeBuyingStore(const int)
  public void CPCItemInventoryMgr::NotifyItemInfoInBuyingStore(const unsigned long)
  public void CPCItemInventoryMgr::OpenBuyingStore(const struct PACKET_CZ_REQ_OPEN_BUYING_STORE *, class std::vector<PRODUCTINFO_IN_BUYING_STORE const *,std::allocator<PRODUCTINFO_IN_BUYING_STORE const *> > &)
  public void CPCItemInventoryMgr::ReqTradeBuyingStore(const char *, const int)
  public int CPCItemInventoryMgr::GetBodyItemSize()
  public void ForceChangeSpriteNonCostume()
  public void ForceChangeSpriteCostume()
  public void CPCItemInventoryMgr::SendMergeItemOpen()
  public void CPCItemInventoryMgr::MergeItem(const class std::vector<short,std::allocator<short> > &)
  private void OnInventoryTabPlace(const int, bool)
  private int CPCItemInventoryMgr::GetExchangeItemSize()
  /* this+0x4 */ class std::list<unsigned short,std::allocator<unsigned short> > m_tempItemInventory

  private void CPCItemInventoryMgr::NotifyAckAddItemToStore(class IVItItem *)
  private void CPCItemInventoryMgr::NotifySoldedResultOnMCStore(short, short)
  private class IVItEquipItem * CPCItemInventoryMgr::ConvertPetEgg(class IVItItem *)
  private bool CPCItemInventoryMgr::IsEnable_UseItem(unsigned short)
  private static bool CPCItemInventoryMgr::Check_PetNameModified(int, struct EQUIPSLOTINFO *)
  private void CPCItemInventoryMgr::OnUsePackageItem(const int, const int, const int, const unsigned long, class IVItItem * const)
  /* this+0x10 */ class CPCBodyItemIV m_bodyItem

  /* this+0x34 */ class CPCCartItemIV m_cartItem

  /* this+0x58 */ class CPCStoreItemIV m_storeItem

  /* this+0x7c */ class CPCExchangeItemIV m_exchangeItem

  /* this+0xa0 */ class CPCExtraItemIV m_MailItem

  /* this+0xc4 */ class CPCExtraItemIV m_AuctionItem

  /* this+0xe8 */ class CPCEquipedItemIV m_equipedItem

  /* this+0x168 */ class CPCMCStoreItemIV m_mcStoreItem

  /* this+0x220 */ class CIVItItemFactory m_IVItItemFactory

  /* this+0x2d8 */ class CPC * m_owner
  /* this+0x2dc */ int m_bodyItemParsing
  /* this+0x2e0 */ unsigned long m_MCStoreUniqueID
  /* this+0x2e4 */ class CPCBuyingStore m_BuyingStore

  private bool CPCItemInventoryMgr::OnUseIUtemCashPointItem(const int, class CITPCashPointItem * const)
  public class CPCItemInventoryMgr & operator=(class CPCItemInventoryMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCMCStoreItemIV {
  CPCItemInventory, offset = 0x0

  public void CPCMCStoreItemIV(const class CPCMCStoreItemIV &)
  public void CPCMCStoreItemIV::CPCMCStoreItemIV()
  public void CPCMCStoreItemIV::~CPCMCStoreItemIV()
  public void CPCMCStoreItemIV::Init()
  public class IVItItem * CPCMCStoreItemIV::Add(class IVItItem *, int, int)
  public int CPCMCStoreItemIV::Delete(short, short)
  public int CPCMCStoreItemIV::Delete(short)
  public class IVItItem * CPCMCStoreItemIV::Remove(short, short)
  public int CPCMCStoreItemIV::GetPrice(short)
  public const char * GetMCStoreName()
  public int IsMCStoreOpen()
  public void CPCMCStoreItemIV::SetMCStoreName(char *)
  public void CPCMCStoreItemIV::Reset()
  public const unsigned long CPCMCStoreItemIV::GetSSI_ID(const short)
  protected void CPCMCStoreItemIV::DeleteExtraInfo(short)
  /* this+0x20 */ class std::map<short,MCSTORE_ITEMEXTRA_INFO,std::less<short>,std::allocator<std::pair<short const ,MCSTORE_ITEMEXTRA_INFO> > > m_extraInfo

  /* this+0x30 */ char[0x80] m_MCStoreName
  /* this+0xb0 */ int m_isMCStoreOpen
  /* this+0xb4 */ unsigned long m_dwUniqueID
  public class CPCMCStoreItemIV & operator=(const class CPCMCStoreItemIV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCPacketHandler {
  CPacketHandler, offset = 0x0

  public void CPCPacketHandler(const class CPCPacketHandler &)
  public void CPCPacketHandler::CPCPacketHandler()
  public void CPCPacketHandler::~CPCPacketHandler()
  public void CPCPacketHandler::OnRecvOverflow(int)
  public void CPCPacketHandler::OnRecv(int)
  public void CPCPacketHandler::OnClose()
  public int CPCPacketHandler::OnProcess()
  public void CPCPacketHandler::SetMyOwner(class CPC *)
  public void CPCPacketHandler::AddSendBytes(int)
  public void CPCPacketHandler::Init()
  public void CPCPacketHandler::OnBroadCast(int)
  public void CPCPacketHandler::OnMove(struct PACKET_CZ_REQUEST_MOVE *)
  public int CPCPacketHandler::StartPath(const unsigned char *, const unsigned long)
  public void CPCPacketHandler::LockOnAttack()
  public void CPCPacketHandler::RequestSit()
  public void CPCPacketHandler::CounterAttack(unsigned long)
  public void CPCPacketHandler::OnSit()
  public void UseForcedSkill(char *)
  public void UnLockCashPoint()
  private int OnShandaProcess()
  private int CPCPacketHandler::DispatchPacket(short, int)
  private void CPCPacketHandler::OnEnter(const unsigned long, const unsigned long, const int, const unsigned long, const unsigned char)
  private void CPCPacketHandler::OnChat(const struct PACKET_CZ_REQUEST_CHAT *)
  private void CPCPacketHandler::OnCZ_REQUEST_MOVE(const unsigned char *)
  private void CPCPacketHandler::OnRequestTime(const unsigned long)
  private void CPCPacketHandler::OnActorInit(int)
  private void CPCPacketHandler::OnCZ_CONTACTNPC(const struct PACKET_CZ_CONTACTNPC &)
  private void CPCPacketHandler::OnReqName(const unsigned long)
  private void CPCPacketHandler::OnWhisper(int)
  private void CPCPacketHandler::OnChangeDir(const short, const unsigned char)
  private void CPCPacketHandler::OnDisconnectCharacter(int)
  private void CPCPacketHandler::OnDisconnectAllCharacter(int)
  private void CPCPacketHandler::OnReqAct1(int, char *)
  private void CPCPacketHandler::OnReqAct2(const unsigned long, const unsigned char, const bool)
  private void CPCPacketHandler::OnMakeGroup(int)
  private void CPCPacketHandler::OnReqJoinGroup(int)
  private void CPCPacketHandler::OnJoinGroup(int)
  private void OnCZ_REQ_JOIN_GUILD2(const struct PACKET_CZ_REQ_JOIN_GUILD2 &)
  private void CPCPacketHandler::OnReqExpelGroupMember(int)
  private void CPCPacketHandler::OnReqNameByGID(const unsigned long)
  private void CPCPacketHandler::OnCZ_ITEM_PICKUP(const unsigned long)
  private void CPCPacketHandler::OnThrowItem(const unsigned short, const short)
  private void CPCPacketHandler::OnUseItem(int)
  private void CPCPacketHandler::OnUseItem2(const unsigned short, const unsigned long)
  private void CPCPacketHandler::OnWearEquip(int)
  private void CPCPacketHandler::OnTakeOffEquip(int)
  private void CPCPacketHandler::OnPurchaseItem(int)
  private void OnSellItem(int)
  private void CPCPacketHandler::OnItemExplanationByName(int)
  private void CPCPacketHandler::OnChooseMenu(int)
  private void CPCPacketHandler::OnReqNextScript(int)
  private void CPCPacketHandler::OnRestart(int)
  private void CPCPacketHandler::OnRestart_QUIT_RESTART()
  private void CPCPacketHandler::OnRestart_QUIT_EXIT()
  private bool CPCPacketHandler::OnRestart_QUIT_EXIT_Part1()
  public void CPCPacketHandler::OnRestart_QUIT_EXIT_Part2()
  private void CPCPacketHandler::OnStatusChange(const struct PACKET_CZ_STATUS_CHANGE &)
  private void CPCPacketHandler::OnReqEmotion(int)
  private void CPCPacketHandler::OnReqUserCount(int)
  private void CPCPacketHandler::OnSelectDealType(int)
  private void CPCPacketHandler::OnSettingWhisperPC(int)
  private void CPCPacketHandler::OnSettingWhisperState(int)
  private void CPCPacketHandler::OnReqWhisperList(int)
  private void CPCPacketHandler::OnCreateChatRoom(int)
  private void CPCPacketHandler::OnReqEnterRoom(int)
  private void CPCPacketHandler::OnChangeChatRoom(int)
  private void CPCPacketHandler::OnReqChangeRole(int)
  private void CPCPacketHandler::OnReqExpelMember(int)
  private void CPCPacketHandler::OnExitRoom(int)
  private void CPCPacketHandler::OnReqExchangeItem(int)
  private void CPCPacketHandler::OnAckReqExchangeItem(int)
  private void CPCPacketHandler::OnExecExchangeItem(int)
  private void CPCPacketHandler::OnAddExchangeItem(int)
  private void CPCPacketHandler::OnConcludeExchangeItem(int)
  private void CPCPacketHandler::OnCancelExchangeItem(int)
  private void CPCPacketHandler::OnCancelLockOn(int)
  private void CPCPacketHandler::OnMoveItemFromBodyToStore(const short, const int)
  private void CPCPacketHandler::OnMoveItemFromStoreToBody(const short, const int)
  private void CPCPacketHandler::OnMoveItemFromBodyToCart(int)
  private void CPCPacketHandler::OnMoveItemFromCartToBody(int)
  private void CPCPacketHandler::OnMoveItemFromStoreToCart(int)
  private void CPCPacketHandler::OnMoveItemFromCartToStore(int)
  private void CPCPacketHandler::OnCloseStore(int)
  private void CPCPacketHandler::OnChatParty(int)
  private void CPCPacketHandler::OnUpgradeSkillLevel(int)
  private void CPCPacketHandler::OnUseSkill(const unsigned short, const short, unsigned long)
  private void CPCPacketHandler::OnUseGuildSkill(const unsigned short, const short, const unsigned long)
  private void CPCPacketHandler::OnUseSkill_Merce(const unsigned short, const short, const unsigned long)
  private void CPCPacketHandler::OnSelectWarpPoint(int)
  private void CPCPacketHandler::OnRememberWarpPoint(int)
  private void CPCPacketHandler::OnCartOff(int)
  private void CPCPacketHandler::OnReqCloseMCStore(int)
  private void CPCPacketHandler::OnReqOpenMCStore(int)
  private void CPCPacketHandler::OnReqOpenMCStore2(int)
  private void CPCPacketHandler::PurchaseItemFromMCStore(int)
  private void CPCPacketHandler::PurchaseItemFromMCStore2(int)
  private void CPCPacketHandler::OnReqItemListFromMCStore(int)
  private void CPCPacketHandler::OnPKModeChange(int)
  private void CPCPacketHandler::OnItemCreate(int)
  private void CPCPacketHandler::OnAdminMapMove(int)
  private void CPCPacketHandler::OnInputEditDlg(int)
  private void CPCPacketHandler::OnCloseDialog(int)
  private void CPCPacketHandler::OnReqItemIdentify(int)
  private void CPCPacketHandler::OnReqItemCompositionList(int)
  private void CPCPacketHandler::OnReqItemComposition(int)
  private void CPCPacketHandler::OnReqDisconnect(int)
  private void CPCPacketHandler::OnSelectAutoSpell(int)
  private void CPCPacketHandler::OnReqGuildMenuInterface(int)
  private void CPCPacketHandler::OnReqGuildMenu(int)
  private void CPCPacketHandler::OnReqGuildEmblemImg(int)
  private void CPCPacketHandler::OnRegisterGuildEmblemImg(int)
  private void CPCPacketHandler::OnReqChangeMemberPos(int)
  private void CPCPacketHandler::OnReqOpenMemberInfo(int)
  private void CPCPacketHandler::OnReqLeaveGuild(int)
  private void CPCPacketHandler::OnReqBanGuild(int)
  private void CPCPacketHandler::OnReqDisorganizeGuild(int)
  private void CPCPacketHandler::OnReqChangeGuildPositionInfo(int)
  private void CPCPacketHandler::OnReqHostileGuild(int)
  private void CPCPacketHandler::SendAckReqAllyGuild(unsigned long, unsigned char)
  private void CPCPacketHandler::SendAckReqHostileGuild(unsigned long, unsigned char)
  private void CPCPacketHandler::OnReqAllyGuild(int)
  private void CPCPacketHandler::OnAllyGuild(int)
  private void CPCPacketHandler::OnGuildNotice(int)
  private void CPCPacketHandler::OnGuildChat(int)
  private void CPCPacketHandler::OnReqMakeGuild(int)
  private void CPCPacketHandler::OnReqJoinGuild(int)
  private void CPCPacketHandler::OnJoinGuild(int)
  private void CPCPacketHandler::OnReqDeleteRelatedGuild(int)
  private void OnReqGuildMemberInfo(int)
  private void CPCPacketHandler::OnResetParameter(int)
  private void CPCPacketHandler::OnChangeMapType(int)
  private void CPCPacketHandler::OnLocalBroadCast(int)
  private void CPCPacketHandler::OnShift(int)
  private void CPCPacketHandler::OnChangeEffectState(int)
  public void CPCPacketHandler::ResetReqGuildTime()
  private void CPCPacketHandler::OnGuildZeny(int)
  private void CPCPacketHandler::OnReqMakingItem(int)
  private void CPCPacketHandler::OnReqUSE_SKILL_TOGROUND_WITHTALKBOX(const short, const unsigned short, const short, const short, const char *)
  private void CPCPacketHandler::OnGiveMannerPoint(int)
  private void CPCPacketHandler::OnGiveMannerPointByName(int)
  private void CPCPacketHandler::OnTryCaptureMonster(int)
  private void CPCPacketHandler::OnCommandPet(int)
  private void CPCPacketHandler::OnRenamePet(int)
  private void CPCPacketHandler::OnRenameHomun(int)
  private void CPCPacketHandler::OnSelectPetEgg(int)
  private void CPCPacketHandler::OnPetEggInfo(int)
  private void CPCPacketHandler::OnPetAct(int)
  private void CPCPacketHandler::OnMakingItem()
  private void CPCPacketHandler::OnCZ_REMOVE_AID(const struct PACKET_CZ_REMOVE_AID &)
  private void CPCPacketHandler::OnRecall(int)
  private void CPCPacketHandler::OnRecallGID(int)
  private void CPCPacketHandler::OnReqEncryption(int)
  private void CPCPacketHandler::OnInputEditDlgStr(int)
  private void CPCPacketHandler::OnAddFriend(int)
  private void CPCPacketHandler::OnDeleteFriend(int)
  private void CPCPacketHandler::OnAckReqAddFriends(int)
  private void OnReqPVPPoint(int)
  private void CPCPacketHandler::OnReqStatus(int)
  private void CPCPacketHandler::OnReqMakerRanking(const short, const int)
  private void CPCPacketHandler::OnReqKSY(int)
  private void CPCPacketHandler::OnLessEffect(int)
  private void CPCPacketHandler::OnAckGameGuard(int)
  private void CPCPacketHandler::OnRequestMoveToOwner(int)
  private void CPCPacketHandler::OnRequestMoveNpc(int)
  private void CPCPacketHandler::OnRequestActNpc(int)
  private void CPCPacketHandler::OnCommandMercenary(int)
  private void CPCPacketHandler::OnAckStorePassword(int)
  private void CPCPacketHandler::OnMailGetList(int)
  private void CPCPacketHandler::OnMailOpen(int)
  private void CPCPacketHandler::OnMailDelete(int)
  private void CPCPacketHandler::OnMailGetItem(int)
  private void CPCPacketHandler::OnMailResetItem(int)
  private void CPCPacketHandler::OnMailAddItem(int)
  private void CPCPacketHandler::OnMailSend(int)
  private void CPCPacketHandler::OnMailReturn(int)
  private void CPCPacketHandler::OnAuctionCreate(int)
  private void CPCPacketHandler::OnAuctionAddItem(int)
  private void CPCPacketHandler::OnAuctionAdd(int)
  private void CPCPacketHandler::OnAuctionAddCancel(int)
  private void CPCPacketHandler::OnAuctionBuy(int)
  private void CPCPacketHandler::OnAuctionItemSearch(int)
  private void CPCPacketHandler::OnAuctionReqMyInfo(int)
  private void CPCPacketHandler::OnAuctionMySellStop(int)
  private void CPCPacketHandler::OnHuntingList(int)
  private void CPCPacketHandler::OnPCBuyCashPointItem(const int)
  private void CPCPacketHandler::OnPCBuyCashPointItemSimpleShop(int)
  private void CPCPacketHandler::OnStandingResurrection(int)
  private void CPCPacketHandler::OnReqOpenBuyingStore(const int)
  private void CPCPacketHandler::OnReqClickToBuyingStore(const int)
  private void CPCPacketHandler::OnReqTradeBuyingStore(const int)
  private void CPCPacketHandler::OnReqCloseBuyingStore(const int)
  private void OnReqPossibleTradeItemBuyingStore(const int)
  private void CPCPacketHandler::OnSearchStoreInfo(const int)
  private void CPCPacketHandler::OnSearchStoreInfoNexPage(const int)
  private void CPCPacketHandler::OnCloseSearchStoreInfo(const int)
  private void CPCPacketHandler::OnSSIListItemClick(const int)
  private void CPCPacketHandler::OnCashPassword(int)
  private void CPCPacketHandler::OnShortcutKey_Change(int)
  private void CPCPacketHandler::OnActiveQuest(int)
  private void CPCPacketHandler::OnBattleFieldChat(int)
  private void CPCPacketHandler::OnProgress(int)
  private void CPCPacketHandler::OnCzOpenSimpleCashShopItemList(int)
  private void CPCPacketHandler::OnCZOnCloseWindow(int)
  private void CPCPacketHandler::OnCZClientVersion(int)
  private void CPCPacketHandler::OnCZCloseSimpleCashShop(int)
  private void CPCPacketHandler::OnCZSimpleCashBtnShow(int)
  private void CPCPacketHandler::OnCZMove_AID_SSO(const int)
  private void CPCPacketHandler::OnCZRecall_SSO(const int)
  private void CPCPacketHandler::OnCZ_SE_CASHSHOP_OPEN(const struct PACKET_CZ_SE_CASHSHOP_OPEN &)
  private void CPCPacketHandler::OnCZReqSeCashTabCode(const int)
  private void CPCPacketHandler::OnCZSePcBuyCashItemList(const int)
  private void CPCPacketHandler::OnCZSeCashShopClose(const int)
  private bool CPCPacketHandler::CheckRequestNpcTime()
  private bool CPCPacketHandler::SendMsgItemScriptEvent(int, unsigned long, int, int, int)
  private bool CPCPacketHandler::CheckMap(unsigned long, unsigned long)
  private bool CPCPacketHandler::CheckSameMap(unsigned long, unsigned long)
  private bool ForcedCloseDialog(unsigned long)
  public void CPCPacketHandler::NotifyBattleFieldPoint()
  private void CPCPacketHandler::OnChangeGroupMaster(int)
  private void OnSeekParty(int)
  private void OnSeekPartyMember(int)
  private void CPCPacketHandler::OnCZ_USE_SKILL(const int, const int, const unsigned long)
  private void CPCPacketHandler::BroadcastNewPosition(int, int)
  /* this+0x8 */ class CPC * m_pc
  /* this+0xc */ unsigned long m_ReqGuildEmblemTime
  /* this+0x10 */ unsigned long[0x4] m_ReqGuildMenuTime
  /* this+0x20 */ unsigned long m_RequestNpcTime
  /* this+0x24 */ class CCSAuth m_csAuth

  /* this+0x9c */ int m_bLockCashPoint
  private void CPCPacketHandler::OnMercenary_Command(const struct PACKET_CZ_MER_COMMAND *)
  private void CPCPacketHandler::OnMercenary_RequestActNpc(const struct PACKET_CZ_REQUEST_ACTNPC *)
  private void CPCPacketHandler::OnMercenary_UseSkill(const unsigned short, const short, unsigned long)
  private void CPCPacketHandler::OnCZ_USE_SKILL_TOGROUND(const int, const int, const int, const int)
  private void CPCPacketHandler::OnMercenary_UseSkill_ToGround(const int, const int, const int, const int)
  private void CPCPacketHandler::OnUseSkillToGround_Homun(const int, const int, const int, const int)
  private void CPCPacketHandler::OnUseSkillToGround(const int, const int, const int, const int)
  private void CPCPacketHandler::OnCZ_PARTY_JOIN_REQ(const struct PACKET_CZ_PARTY_JOIN_REQ &)
  private void OnCZ_PARTY_CONFIG(const struct PACKET_CZ_PARTY_CONFIG &)
  private void OnCZ_PARTY_JOIN_REQ_ACK(const struct PACKET_CZ_PARTY_JOIN_REQ_ACK &)
  private void CPCPacketHandler::OnCZ_MEMORIALDUNGEON_COMMAND(const struct PACKET_CZ_MEMORIALDUNGEON_COMMAND &)
  private void CPCPacketHandler::OnCZ_EQUIPWIN_MICROSCOPE(const struct PACKET_CZ_EQUIPWIN_MICROSCOPE &)
  private void CPCPacketHandler::OnCZ_CONFIG(const struct PACKET_CZ_CONFIG &)
  private void CPCPacketHandler::OnCZ_REQ_LEAVE_GROUP(const struct PACKET_CZ_REQ_LEAVE_GROUP &)
  private void CPCPacketHandler::OnCZ_SKILL_SELECT_RESPONSE(const struct PACKET_CZ_SKILL_SELECT_RESPONSE &)
  private void CPCPacketHandler::OnCZ_ITEMLISTWIN_RES(const unsigned char *, const int)
  private void CPCPacketHandler::OnCZ_GM_FULLSTRIP(const struct PACKET_CZ_GM_FULLSTRIP &)
  private void CPCPacketHandler::OnCZ_MACRO_USE_SKILL(const struct PACKET_CZ_MACRO_USE_SKILL &)
  private void CPCPacketHandler::OnCZ_MACRO_USE_SKILL_TOGROUND(const struct PACKET_CZ_MACRO_USE_SKILL_TOGROUND)
  private void CPCPacketHandler::OnCZ_MACRO_REQUEST_MOVE(const struct PACKET_CZ_MACRO_REQUEST_MOVE &)
  private void CPCPacketHandler::OnCZ_MACRO_ITEM_PICKUP(const struct PACKET_CZ_MACRO_ITEM_PICKUP)
  private void CPCPacketHandler::OnCZ_MACRO_REQUEST_ACT(const struct PACKET_CZ_MACRO_REQUEST_ACT &)
  private void CPCPacketHandler::OnCZ_MACRO_START(const struct PACKET_CZ_MACRO_START &)
  private void OnCZ_MACRO_STOP(const struct PACKET_CZ_MACRO_STOP &)
  private void OnCZ_GPK_DYNCODE_RELOAD(const struct PACKET_CZ_GPK_DYNCODE_RELOAD &)
  private void OnCZ_GPK_AUTH(const struct PACKET_CZ_GPK_AUTH &)
  private void OnZC_REASSEMBLY_AUTH(const int)
  private void OnCZ_IRMAIL_SEND(const struct PACKET_CZ_IRMAIL_SEND * const)
  private void OnCZ_IRMAIL_LIST(const struct PACKET_CZ_IRMAIL_LIST &)
  private void CPCPacketHandler::OnCZ_PC_SELL_ITEMLIST(const struct PACKET_CZ_PC_SELL_ITEMLIST * const)
  private void CPCPacketHandler::OnCZ_GROUPINFO_CHANGE_V2(const struct PACKET_CZ_GROUPINFO_CHANGE_V2 &)
  private void OnCZ_PARTY_BOOKING_REQ_SEARCH(const struct PACKET_CZ_PARTY_BOOKING_REQ_SEARCH &)
  private void OnCZ_PARTY_BOOKING_REQ_REGISTER(const struct PACKET_CZ_PARTY_BOOKING_REQ_REGISTER &)
  private void CPCPacketHandler::OnCZ_CHOPOKGI(const struct PACKET_CZ_CHOPOKGI &)
  private void OnCZ_TRYCOLLECTION(const struct PACKET_CZ_TRYCOLLECTION &)
  private void OnCZ_REQ_ENTRY_QUEUE_APPLY(const struct PACKET_CZ_REQ_ENTRY_QUEUE_APPLY &)
  private void OnCZ_REQ_ENTRY_QUEUE_CANCEL(const struct PACKET_CZ_REQ_ENTRY_QUEUE_CANCEL &)
  private void OnCZ_REPLY_ENTRY_QUEUE_ADMISSION(const struct PACKET_CZ_REPLY_ENTRY_QUEUE_ADMISSION &)
  private void OnCZ_REPLY_LOBBY_ADMISSION(const struct PACKET_CZ_REPLY_LOBBY_ADMISSION &)
  private void OnCZ_REQ_ENTRY_QUEUE_RANKING(const struct PACKET_CZ_REQ_ENTRY_QUEUE_RANKING &)
  private void OnCZ_PARTY_RECRUIT_REQ_REGISTER(const struct PACKET_CZ_PARTY_RECRUIT_REQ_REGISTER &)
  private void OnCZ_PARTY_RECRUIT_REQ_DELETE(const struct PACKET_CZ_PARTY_RECRUIT_REQ_DELETE &)
  private void OnCZ_PARTY_RECRUIT_REQ_SEARCH(const struct PACKET_CZ_PARTY_RECRUIT_REQ_SEARCH &)
  private void OnCZ_PARTY_RECRUIT_REQ_UPDATE(const struct PACKET_CZ_PARTY_RECRUIT_REQ_UPDATE &)
  private void OnCZ_PARTY_RECRUIT_ADD_FILTERLINGLIST(const struct PACKET_CZ_PARTY_RECRUIT_ADD_FILTERLINGLIST &)
  private void OnCZ_PARTY_RECRUIT_SUB_FILTERLINGLIST(const struct PACKET_CZ_PARTY_RECRUIT_SUB_FILTERLINGLIST &)
  private void OnCZ_PARTY_RECRUIT_REQ_VOLUNTEER(const struct PACKET_CZ_PARTY_RECRUIT_REQ_VOLUNTEER &)
  private void OnCZ_PARTY_RECRUIT_REQ_RECALL(const struct PACKET_CZ_PARTY_RECRUIT_REQ_RECALL * const, const int)
  private void OnCZ_PARTY_RECRUIT_ACK_RECALL(const struct PACKET_CZ_PARTY_RECRUIT_ACK_RECALL &)
  private void OnCZ_PARTY_RECRUIT_REFUSE_VOLUNTEER(const struct PACKET_CZ_PARTY_RECRUIT_REFUSE_VOLUNTEER &)
  private void OnCZ_INVENTORY_TAB(const struct PACKET_CZ_INVENTORY_TAB &)
  private void OnCZ_PARTY_RECRUIT_CANCEL_VOLUNTEER(const struct PACKET_CZ_PARTY_RECRUIT_CANCEL_VOLUNTEER &)
  private void CPCPacketHandler::OnCZ_SELECTCART(const struct PACKET_CZ_SELECTCART &)
  private void CPCPacketHandler::OnCZ_REQ_CHANGECART(const struct PACKET_CZ_REQ_CHANGECART &)
  private void CPCPacketHandler::OnCZ_REQ_MERGE_ITEM(const int, const char *)
  private void CPCPacketHandler::OnCZ_CANCEL_MERGE_ITEM()
  private void OnCZ_REQ_RANKING(const struct PACKET_CZ_REQ_RANKING &)
  private void OnCZ_CLAN_CHAT(const int)
  public class CPCPacketHandler & operator=(const class CPCPacketHandler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCProperty {
  public void CPCProperty::CPCProperty(class CPC *)
  public void CPCProperty::Reset()
    /* this+0x0 */ class CPC * m_pc
  /* this+0x4 */ struct CPCProperty::PCPROPERTY m_propertys

  public void CPCProperty::UpdateStatusAttPower()
  public void CPCProperty::UpdateStatusDef()
  public void CPCProperty::UpdateStatusMagicPower()
  public void CPCProperty::UpdateStatusMagicDef()
  public void CPCProperty::UpdateStatusMagicPowerReduce()
  public void CPCProperty::UpdateCriticalSuccessValue()
  public void CPCProperty::UpdateCriticalDef()
  public void CPCProperty::UpdateAvoidableSucPerOnClient()
  public void CPCProperty::UpdateAttSucPercentOnClient()
  public void CPCProperty::UpdateAttackMotionTime()
  public void CPCProperty::UpdateItemAttPower()
  public void CPCProperty::UpdateItemMagicPower()
  public void UpdateItemDef()
  public void CPCProperty::UpdateNotifyItemPower()
  public void CPCProperty::UpdateNotifyItemMPower()
  public void CPCProperty::UpdateNotifyItemDef()
  public void CPCProperty::UpdateNotifyItemMDef()
  private void ItemPowerModifiedByLevelAndDex(int &)
  private int CPCProperty::GetAttackMotionTime_STD()
  private int CPCProperty::GetAvoidDecPercent()
  private int CPCProperty::GetBasicHitDecPercent()
}

struct CPCProperty::PCPROPERTY {
  /* this+0x0 */ int statusAttPower
  /* this+0x4 */ int rhandPowerMin
  /* this+0x8 */ int rhandPowerMax
  /* this+0xc */ int lhandPowerMin
  /* this+0x10 */ int lhandPowerMax
  /* this+0x14 */ int itemMPowerMin
  /* this+0x18 */ int itemMPowerMax
  /* this+0x1c */ int statusDef
  /* this+0x20 */ int statusMagicPower
  /* this+0x24 */ int statusMDef
  /* this+0x28 */ int statusMPowerReduce
  /* this+0x2c */ int criticalSuccess
  /* this+0x30 */ int criticalDef
  /* this+0x34 */ int basicAvoidance
  /* this+0x38 */ int basicHit
  /* this+0x3c */ int attackMotionTime
  /* this+0x40 */ int notifyItemPower
  /* this+0x44 */ int notifyItemMPower
  /* this+0x48 */ int notifyItemDef
  /* this+0x4c */ int notifyItemMDef
}

class CPCQuestEvent {
    *
    public class std::map<unsigned long,CQuestEventInfo *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CQuestEventInfo *> > > & operator()()
  public void CPCQuestEvent(const class CPCQuestEvent &)
  public void CPCQuestEvent::CPCQuestEvent()
  public void CPCQuestEvent::~CPCQuestEvent()
  /* this+0x4 */ class CPC * m_owner
  /* this+0x8 */ class CPCQuestRelationShip m_hunt_relation

  /* this+0x2c */ class CPCHuntIndex m_huntIndex

  /* this+0x40 */ class CPCHuntMissionMgr m_huntMgr

  /* this+0x54 */ class std::map<unsigned long,CQuestEventInfo *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CQuestEventInfo *> > > m_map

  /* this+0x64 */ bool m_isUpdateData
  public bool CPCQuestEvent::InIt(class CPC *)
  public void CPCQuestEvent::Reset()
  public bool CPCQuestEvent::AsyncDBRenewal_LoadQuest(class std::list<CLogonPermitADBWork::CQuestEventData::tQuest,std::allocator<CLogonPermitADBWork::CQuestEventData::tQuest> > &)
  public int CPCQuestEvent::Insert_Quest_DB(const unsigned long)
  public void CPCQuestEvent::Erase_Quest_DB(const unsigned long)
  public void CPCQuestEvent::Update_Quest_DB()
  public int CPCQuestEvent::OnMessage(int, int, int)
  public void CPCQuestEvent::UpdateMission_Hunt(unsigned long)
  public int CPCQuestEvent::GetQuestState(const unsigned long)
  public int CPCQuestEvent::IsBeginQuest(unsigned long)
  public int CPCQuestEvent::CheckQuest_Hunting(unsigned long)
  public int CPCQuestEvent::CheckQuest_PlayTime(unsigned long)
  public void CPCQuestEvent::OnActiveQuest(unsigned long, bool)
  public void SetUpdateData()
  public bool GetUpdateData()
  private bool CPCQuestEvent::InsertQuest(const unsigned int, const bool, const bool)
  private bool AddMission(unsigned long, bool, long, int, const char *, int)
  private bool CPCQuestEvent::Add_HuntingMission(unsigned long, unsigned long, int)
  private bool CPCQuestEvent::Add_TimeMission(unsigned long, long)
  private int CPCQuestEvent::AddQuest(unsigned long)
  private void CPCQuestEvent::DeleteHuntList(unsigned long)
  private int CPCQuestEvent::FuncSetQuest(unsigned long)
  private bool CPCQuestEvent::FuncCompleteQuest(unsigned long)
  private bool CPCQuestEvent::FuncEraseQuest(unsigned long)
  private bool CPCQuestEvent::FuncChangQuest(unsigned long, unsigned long)
  private bool CPCQuestEvent::FuncCompleteQuest_Between(unsigned long, unsigned long)
  private bool CPCQuestEvent::FuncRecall_ComplereQuest(unsigned long)
  private bool CPCQuestEvent::SendAllQuest()
  private void CPCQuestEvent::OnScheduler_SendAllQuest()
  public void CPCQuestEvent::SendHuntingQuest(const bool, const unsigned long)
  private bool CPCQuestEvent::SendQuest(const unsigned int, class CQuestEventInfo *)
  private bool CPCQuestEvent::SetQuestDefalultInfo(const unsigned int, class CQuestEventInfo *)
  private class CQuestEventInfo * CPCQuestEvent::FindCompleteQuestInfo(unsigned long)
  private bool CPCQuestEvent::SetCompleteQuest(unsigned long)
  private bool CPCQuestEvent::FindCompleteQuest(unsigned long)
  private bool CPCQuestEvent::IsQuest(unsigned long)
  private class CQuestEventInfo * CPCQuestEvent::FindQuestInfo(unsigned long)
  public class CPCQuestEvent & operator=(const class CPCQuestEvent &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CPCQuestEvent::Insert_Quest_DB::__l9::THunt {
  /* this+0x0 */ unsigned int mobid
  /* this+0x4 */ short count
}

struct CPCQuestEvent::Update_Quest_DB::__l7::THunt {
  /* this+0x0 */ unsigned int mobid
  /* this+0x4 */ short count
}

class CPCQuestRelationShip {
    *
      public void CPCQuestRelationShip(const class CPCQuestRelationShip &)
  public void CPCQuestRelationShip::CPCQuestRelationShip()
  public void CPCQuestRelationShip::~CPCQuestRelationShip()
  /* this+0x4 */ class std::map<unsigned int,unsigned int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned int> > > m_relationship

  /* this+0x14 */ class std::multimap<unsigned int,unsigned int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned int> > > m_foreginKey

  public bool CPCQuestRelationShip::InsertRelation(const int, const int)
  public unsigned int CPCQuestRelationShip::GetFoegineKey(const int)
  public int GetAllPrimaryKey(class std::list<unsigned int,std::allocator<unsigned int> > &)
  public int GetAllForegineKey(class std::set<unsigned int,std::less<unsigned int>,std::allocator<unsigned int> > &)
  public class std::vector<unsigned int,std::allocator<unsigned int> > CPCQuestRelationShip::SelectPrimaryKeyForgineKey(const int)
  public int CPCQuestRelationShip::SelectPrimaryKeyForgineKey(const int, class std::list<unsigned int,std::allocator<unsigned int> > &)
  public void CPCQuestRelationShip::Clear()
  public void Delete(const unsigned int)
  public void DeleteAll(const unsigned int)
  public void CPCQuestRelationShip::DeleteFromForeginKey(const unsigned int)
  public class CPCQuestRelationShip & operator=(const class CPCQuestRelationShip &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCSkill {
    *
  public void CPCSkill(const class CPCSkill &)
  public void CPCSkill::CPCSkill()
  public void CPCSkill::~CPCSkill()
  public void CPCSkill::Init(const bool)
  public void CPCSkill::Reset(const bool)
  public int CPCSkill::AddSkill(unsigned short, struct PC_SKILL_INFO *, struct SKILLINFO *, const bool)
  public void CPCSkill::AddSkillFromItemServer(unsigned short, int, unsigned long, int)
  public void CPCSkill::DeleteSkillFromItemServer(unsigned short, int)
  public void CPCSkill::AddSkillFromNPCEvent(unsigned short, int, int)
  public void CPCSkill::DeleteSkill(unsigned short, int)
  public struct PC_SKILL_INFO * CPCSkill::GetSkill(unsigned short, int)
  public int CPCSkill::SendSkillSelectList(const class std::vector<int,std::allocator<int> > &, const enum PACKET_ZC_SKILL_SELECT_REQUEST::enumWHY)
  public bool CPCSkill::LoadSkill3rd(class std::vector<CLogonPermitADBWork::CSkill3rdData::tagSkill,std::allocator<CLogonPermitADBWork::CSkill3rdData::tagSkill> > &)
  public bool CPCSkill::LoadSkill3rd_Parse(class std::vector<CLogonPermitADBWork::CSkill3rdData::tagSkill,std::allocator<CLogonPermitADBWork::CSkill3rdData::tagSkill> > &)
  public bool CPCSkill::LoadSkill3rd_Correction()
  public void CPCSkill::UpgradSkill3rdLevel(const int)
  public void CPCSkill::UpgradSkill3rdLevelAfter(const int)
  public void CPCSkill::GetSkill3rdDBFormat(class std::vector<CSaveAllADBWork::CSkill3rdData::tagSkill,std::allocator<CSaveAllADBWork::CSkill3rdData::tagSkill> > &)
  public void CPCSkill::NotifyPostDelaySkillList()
  public void CPCSkill::ApplyPassiveSkill(unsigned short, unsigned short)
  public void CPCSkill::NotifySkillInfo(unsigned short, bool, int)
  public void CPCSkill::NotifyAllSkillInfo()
  public void CPCSkill::NotifySkillInfoDelete(const int)
  public void CPCSkill::NotifySkillInfo_FakeType(unsigned short, int)
  public void CPCSkill::CheckAllEnableSkill()
  public int CPCSkill::IsConditionalSkill(unsigned short)
  public int CPCSkill::IsEnableSkill(unsigned short, short)
  public int IsEncoreSkill()
  public int CPCSkill::AM_IsMakableItemBySkill(unsigned short)
  public int CPCSkill::AM_IsMakableItemByItem(unsigned short)
  public int CPCSkill::AM_ManufactureItem(unsigned short, unsigned long, int, struct MAKABLEITEM_INFO *)
  public void CPCSkill::SetMyOwner(class CPC *)
  public short CPCSkill::GetSkillLevel(unsigned short, int)
  public int GetSkillLevel2(unsigned short, int)
  public int CPCSkill::GetSkillType(unsigned short)
  public short CPCSkill::GetSkillRange(unsigned short, short)
  public void CPCSkill::UpdateAvailableInfo(unsigned short, bool)
  public int CPCSkill::GetWarpInfoXpos(char)
  public void CPCSkill::LoadWarpInfo()
  public void CPCSkill::LoadStarPlaceInfo()
  public void CPCSkill::UpdateStarPlace(char *, short)
  public int CPCSkill::GetWarpInfo(struct WARPPORTAL_INFO *)
  public short CPCSkill::GetWarpXPos()
  public short CPCSkill::GetWarpYPos()
  public void CPCSkill::SetWarpXPos(short)
  public void CPCSkill::SetWarpYPos(short)
  public int CPCSkill::SearchWarpList(char *, short &, short &, int)
  public void CPCSkill::SetWarpExpireTime(unsigned long)
  public void CPCSkill::SetWarpSize(int)
  public unsigned long CPCSkill::GetWarpExpireTime()
  public int CPCSkill::GetWarpSize()
  public void CPCSkill::PushWarpPosition(short, short, char *)
  public int CPCSkill::GetPlusItemWeight()
  public void CPCSkill::SetPlusItemWeight(int)
  public int CPCSkill::GetDiscountPercent()
  public int CPCSkill::GetOverChargePercent()
  public int GetSkillSize()
  public void CPCSkill::UpdateSkillType(unsigned short, unsigned long, int)
  public int CPCSkill::GetTotalFirstJobSkillLevel()
  public int CPCSkill::GetTotalSecondJobSkillLevel()
  public int CPCSkill::GetTotalThirdJobSkillLevel()
  public void CPCSkill::ResetFirstJobSkillLevel()
  public void CPCSkill::ResetSecondJobSkillLevel()
  public void CPCSkill::ResetThirdJobSkillLevel()
  public void ResetAllSkillLevelExceptNoviceSkill()
  public int GetTotalSkillLevelExceptNoviceSkill()
  public int CPCSkill::IsSecondSkill(unsigned short)
  public static bool CPCSkill::IsSecondSkill(const int, const int)
  public int CPCSkill::IsFirstSkill(unsigned short)
  public static bool CPCSkill::IsFirstSkill(const int, const int)
  public static int CPCSkill::IsThirdSkill(unsigned short)
  public void CPCSkill::SetFireWallCount(int, int)
  public int CPCSkill::GetFireWallIndex()
  public int CPCSkill::GetPassiveSkillPlusAttackPower(class CITP *, class CCharacter *, const int)
  public int CPCSkill::GetPassiveSkillPlusMeleeAttackPowerbyPercent(class CITP *, class CCharacter *, const int)
  public int CPCSkill::GetPassiveSkillPlusAttackPowerbyPercent(class CITP *, class CCharacter *, const int)
  public int CPCSkill::IsMakableItemBySkill(unsigned short)
  public int CPCSkill::IsMakableItemByItem(unsigned short)
  public int CPCSkill::ManufactureItem(unsigned short, unsigned long, struct MAKABLEITEM_INFO *)
  public void SetTalkBoxcontents(char *)
  public char * CPCSkill::GetTalkBoxcontents()
  public void CPCSkill::SetContents(unsigned short, char *)
  public char * CPCSkill::GetContents(unsigned short)
  public void CPCSkill::AddPlayingSkill(const unsigned long, const int, const int)
  public void CPCSkill::DeletePlayingSkill(const unsigned long)
  public void SetPartnerAID(unsigned long)
  public void SetWeaponMasterAID(unsigned long)
  public unsigned long GetPartnerAID()
  public unsigned long GetWeaponMasterAID()
  public unsigned short GetEncoreSKID()
  public int GetEncoreSkLevel()
  public void CPCSkill::DestroyPlayingSkill()
  public void CPCSkill::SetPosPlayingSkill(int, int)
  public void CPCSkill::DisappearPlayingSkill()
  public int IsSkillLoaded()
  public const int GetNumOfSpirits(const int)
  public short GetNumOfSpirits()
  public void CPCSkill::ResetSpirits()
  public void ResetSpiritsType()
  public int GetSpiritsType()
  private static bool IsSpiritsCharm(const int)
  public bool CPCSkill::IsSpiritsCharm()
  public void CPCSkill::AddSpirits(const int, const int)
    private void CPCSkill::AddSpirits_charm(const int, const int)
  private void CPCSkill::AddSpirits_Sphere(const int)
  private void CPCSkill::SetSpirits_Charm_SideEffect()
  private void CPCSkill::ReSetSpirits_Charm_SideEffect()
  /* this+0x4 */ bool m_bSpiritsCharm_SideEffect
  public void CPCSkill::MinusSpirits(short)
  public void CPCSkill::UpdateSpiritsInfo()
  public unsigned long GetSKIDFromAbracadabra()
  public void SetSKIDFromAbracadabra(unsigned long)
  public void CPCSkill::SetLimitedSkill(unsigned long, int)
  public int CPCSkill::GetLimitedSkillNum(unsigned long)
  public void CPCSkill::SetPostdelaySkill(unsigned long, unsigned long)
  public int CPCSkill::IsEndPostdelaySkill(unsigned long)
  public void CPCSkill::SetMasterSkill(class CZGuildInfo *)
  public void ResetMasterSkill()
  public void CPCSkill::ApplyGDPassiveSkill(class CPC *)
  public int CPCSkill::GetLimitNumByCannibalize(int)
  public class std::deque<WARP_POSITION,std::allocator<WARP_POSITION> > * GetWarpPosInfo()
  public void CPCSkill::UpdatePlusItemWeightBySkill()
  public struct MONSTER_CREATED_BYSKILL * CPCSkill::GetMonsterCreatedBySkill(unsigned short)
  public int CPCSkill::UpdateMonsterCreatedBySkill(unsigned short, int, int)
  private void CPCSkill::UpdateWarpList(char *, short, short)
  private void CPCSkill::ApplyPassiveSkillByReset(unsigned short)
  /* this+0x8 */ int m_plusItemWeight
  /* this+0xc */ int m_plusItemWeightBySkill
  /* this+0x10 */ short m_warpXPos
  /* this+0x12 */ short m_warpYPos
  /* this+0x14 */ unsigned long m_warpExpireTime
  /* this+0x18 */ int m_warpSize
  /* this+0x1c */ char[0x50] m_talkBoxContents
  /* this+0x6c */ char[0x50] m_graffitiContents
  /* this+0xbc */ class CPC * m_pc
  /* this+0xc0 */ int m_sanctuaryCnt
  /* this+0xc4 */ int m_stormGustCnt
  /* this+0xc8 */ int[0x3] m_fireWallCount
  /* this+0xd4 */ struct MONSTER_CREATED_BYSKILL[0x3] m_monsterCreatedBySkill
  /* this+0xf8 */ int m_playSkillCount
  /* this+0xfc */ int m_warpCount
  /* this+0x100 */ unsigned short m_encoreSKID
  /* this+0x102 */ unsigned short m_encoreSkLevel
  /* this+0x104 */ unsigned long m_partnerAID
  /* this+0x108 */ unsigned long m_playStartedTime
  /* this+0x10c */ unsigned long m_graffitiAID
  /* this+0x110 */ unsigned long m_weaponMasterAID
  /* this+0x114 */ int m_isEncoreSkill
    /* this+0x118 */ class std::map<unsigned short,PC_SKILL_INFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,PC_SKILL_INFO> > > m_skill

  /* this+0x128 */ class std::map<unsigned short,PC_SKILL_INFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,PC_SKILL_INFO> > > m_disposableSkill

  /* this+0x138 */ class std::vector<DYNAMIC_SKILLINFO,std::allocator<DYNAMIC_SKILLINFO> > m_dynamicSkill

  /* this+0x148 */ class std::deque<WARP_POSITION,std::allocator<WARP_POSITION> > m_warpInfo

  /* this+0x160 */ class std::vector<PLAY_SKILLINFO,std::allocator<PLAY_SKILLINFO> > m_playSkillList

  /* this+0x170 */ class std::map<unsigned short,PARAMETER,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,PARAMETER> > > m_GDMasterParamList

  /* this+0x180 */ unsigned short m_spellCastingSKID
  /* this+0x182 */ short m_spellCastingSKLevel
  /* this+0x184 */ class std::list<unsigned long,std::allocator<unsigned long> > m_specialZoneList

  /* this+0x190 */ int m_isSkillLoaded
  /* this+0x194 */ int m_spiritsType
  /* this+0x198 */ class std::list<unsigned long,std::allocator<unsigned long> > m_spiritsTime

  /* this+0x1a4 */ int m_skillCondition
  /* this+0x1a8 */ unsigned long m_abracadabraSKID
  /* this+0x1ac */ int m_bCallPartner
  /* this+0x1b0 */ class std::map<unsigned long,int,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,int> > > m_limitedSkill

    /* this+0x1c0 */ class std::list<CPCSkill::MILLENNIUMSHIELD,std::allocator<CPCSkill::MILLENNIUMSHIELD> > m_millenniumShieldList

  /* this+0x1cc */ class std::list<unsigned long,std::allocator<unsigned long> > m_forceOfVanguard

  /* this+0x1d8 */ class std::list<unsigned long,std::allocator<unsigned long> > m_cursedCircleAIDList

  private void CPCSkill::AddMillenniumShield(int)
  private void CPCSkill::UpdateMillenniumShield()
  private void CPCSkill::NotifyMillenniumShieldCount(bool)
  private void CPCSkill::ResetForceOfVanguard()
  private void CPCSkill::AddForceOfVanguard(const unsigned short)
  private void CPCSkill::UpdateForceOfVanguard()
  private void CPCSkill::NotifyForceOfVanguardCount()
  public void CPCSkill::ResetMillenniumShield()
  public bool CPCSkill::DamageToMillenniumShield(int)
  public int GetNumOfMillenniumShield()
  public int GetNumOfForceOfVanguard()
  public void CPCSkill::AddSkillImitation3rd(unsigned short, int, const unsigned short)
  /* this+0x1e4 */ class std::vector<unsigned short,std::allocator<unsigned short> > m_SkillFakeTypeList

  public void CPCSkill::ResetSkillFakeTypeList()
  public void CPCSkill::SetWarpInfo(const struct WARPPORTAL_INFO &)
  public void CPCSkill::SetStarPlaceInfo(const struct WARPPORTAL_INFO &)
  public class CPCSkill & operator=(const class CPCSkill &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CPCSkill::AM_ManufactureItem::__l7::stuffData {
}

struct CPCSkill::AM_ManufactureItem::__l7::stuffList {
  /* this+0x0 */ unsigned short reqID
  /* this+0x2 */ unsigned short count
  /* this+0x4 */ struct CPCSkill::AM_ManufactureItem::__l7::stuffData[0x10] stuff
}

struct CPCSkill::MILLENNIUMSHIELD {
  /* this+0x0 */ int hp
  /* this+0x4 */ unsigned long time
}

class CPCSkillDB {
  CODBC, offset = 0x0

  public void CPCSkillDB(const class CPCSkillDB &)
  public void CPCSkillDB::CPCSkillDB()
  public void CPCSkillDB::~CPCSkillDB()
  public class CPCSkillDB & operator=(const class CPCSkillDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCSkillInventory {
  CInventory, offset = 0x0

  public void CPCSkillInventory(const class CPCSkillInventory &)
  public void CPCSkillInventory()
  public void ~CPCSkillInventory()
  public int OnRequest(struct Request *)
  public class CPCSkillInventory & operator=(const class CPCSkillInventory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPCStoreItemIV {
  CPCItemInventory, offset = 0x0

  public void CPCStoreItemIV(const class CPCStoreItemIV &)
  public void CPCStoreItemIV::CPCStoreItemIV()
  public void CPCStoreItemIV::~CPCStoreItemIV()
  public void CPCStoreItemIV::Init()
  public int CPCStoreItemIV::Delete(short, short)
  public class IVItItem * CPCStoreItemIV::Remove(short, short)
  public int CPCStoreItemIV::IsOpen()
  public void CPCStoreItemIV::Reset()
  public void SetStoreOpenFlag(int)
  /* this+0x20 */ int m_isStoreOpen
  public class CPCStoreItemIV & operator=(const class CPCStoreItemIV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPEventDB {
  CODBC, offset = 0x0

  public void CPEventDB(const class CPEventDB &)
  public void CPEventDB::CPEventDB()
  public void CPEventDB::~CPEventDB()
  public int CPEventDB::GetPointEvent(unsigned long, int &)
  public bool CPEventDB::AddPointEvent(unsigned long, int)
  public bool CPEventDB::DelPointEvent(unsigned long, int)
  public class CPEventDB & operator=(const class CPEventDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPKInfoMgr {
  CODBC, offset = 0x0

  public void CPKInfoMgr(const class CPKInfoMgr &)
  public void CPKInfoMgr::CPKInfoMgr()
  public void CPKInfoMgr::~CPKInfoMgr()
  public int CPKInfoMgr::GetPKInfo(unsigned long, struct PKInfo &)
  public int CPKInfoMgr::UpdatePKInfo(unsigned long, struct PKInfo)
  public class CPKInfoMgr & operator=(const class CPKInfoMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPKMapRes {
  CMapRes, offset = 0x0

  public void CPKMapRes(const class CPKMapRes &)
  public void CPKMapRes(const int)
  public void ~CPKMapRes()
  public void Reset()
  public void * __vecDelDtor(unsigned int)
}

class CPVP2MapRes {
  CMapRes, offset = 0x0

  public void CPVP2MapRes(class CPVP2MapRes &)
  public void CPVP2MapRes(const int)
  public void ~CPVP2MapRes()
  public void Reset()
  public bool UpdateWinPoint(unsigned long, int)
  public bool DeleteWinPoint(unsigned long)
  public int GetPCRanking(unsigned long)
  /* this+0x76c */ class CMemoryMgr<WINPOINT> m_winpointPool

  /* this+0x790 */ class std::list<WINPOINT *,std::allocator<WINPOINT *> > m_list

  /* this+0x79c */ class std::map<unsigned long,WINPOINT *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,WINPOINT *> > > m_map

  private void DeleteFromList(struct WINPOINT *)
  private class std::_List_iterator<std::_List_val<WINPOINT *,std::allocator<WINPOINT *> > > UpperBound(int)
  private void BroadCastRankingInfo()
  private void ClearWinpoint()
  public void * __vecDelDtor(unsigned int)
}

class CPacketHandler {
    *
  public int CPacketHandler::OnProcess()
  public void CPacketHandler(const class CPacketHandler &)
  public void CPacketHandler::CPacketHandler()
  public int CPacketHandler::OnRecvHook(int, char *)
  public void CPacketHandler::OnRecvOverflow(int)
  public void CPacketHandler::OnRecv(int)
  public void CPacketHandler::OnClose()
  public void CPacketHandler::SetLastError(unsigned long)
  public void CPacketHandler::AddSendBytes(int)
  public void Reset()
  public void CPacketHandler::SetQueue(class CPacketQueue *)
  /* this+0x4 */ class CPacketQueue * m_recvQueue
  public class CPacketHandler & operator=(const class CPacketHandler &)
}

class CPacketLengthExMgr {
    public struct std::pair<enum CPacketLengthExMgr::enumFixedPacketRet,int> CPacketLengthExMgr::IsFixedPacket(const int)
  public int GetReplayFactor(const int)
  private void CPacketLengthExMgr::Add(const int, const int, const int, const int)
  private void CPacketLengthExMgr::InitPacketLenWithClient()
  private void CPacketLengthExMgr::InitPacketLenWithClientSecure()
  private void CPacketLengthExMgr::InitPacketLen()
      /* this+0x0 */ class std::map<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> > > m_LengthMap

  public void CPacketLengthExMgr(const class CPacketLengthExMgr &)
  public void CPacketLengthExMgr::CPacketLengthExMgr()
  public void CPacketLengthExMgr::~CPacketLengthExMgr()
  public class CPacketLengthExMgr & operator=(const class CPacketLengthExMgr &)
  public void * __vecDelDtor(unsigned int)
}

class CPacketLengthExMgr::CData {
  /* this+0x0 */ const int m_Len
  /* this+0x4 */ const int m_Min
  /* this+0x8 */ const int m_ReplayFactor
  public void CData(const int, const int, const int)
  public void CData(const int, const int)
}

class CPacketQueue {
  public void CPacketQueue::Init(int)
  public void CPacketQueue::Reset()
  public int CPacketQueue::InsertData(int, const char *)
  public int CPacketQueue::RemoveData(int)
  public void CPacketQueue::PeekData(int, char *)
  public int CPacketQueue::GetData(int, char *)
  public int CPacketQueue::GetSize()
  public int CPacketQueue::GetFreeSize()
  public int CPacketQueue::resetANDinsert(const int, const char *)
  public void CPacketQueue(int)
  public void CPacketQueue::CPacketQueue()
  public void CPacketQueue::~CPacketQueue()
  /* this+0x0 */ char * m_buf
  /* this+0x4 */ int m_capacity
  /* this+0x8 */ int m_front
  /* this+0xc */ int m_rear
  /* this+0x10 */ int m_size
  /* this+0x14 */ struct _RTL_CRITICAL_SECTION m_cs

  public void * __vecDelDtor(unsigned int)
}

class CParsing {
  public void CParsing(const class CParsing &)
  public void CParsing::CParsing()
  public void CParsing::~CParsing()
  public bool CParsing::Run(char *, char *)
  public char * Get(int)
  public bool CParsing::Get(char *)
  public int GetNum()
  /* this+0x0 */ class std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_phase

  /* this+0x18 */ char[0x400] m_form
  private char * CParsing::Form(char *, <NoType>)
  public class CParsing & operator=(const class CParsing &)
  public void * __vecDelDtor(unsigned int)
}

class CPartyBookingDeleteADBWork {
  NAsyncDBWork, offset = 0x0

  public void CPartyBookingDeleteADBWork(const class CPartyBookingDeleteADBWork &)
  public void CPartyBookingDeleteADBWork::CPartyBookingDeleteADBWork()
  public void ~CPartyBookingDeleteADBWork()
  public void CPartyBookingDeleteADBWork::Init(const unsigned long, const unsigned long, const unsigned long)
  private bool CPartyBookingDeleteADBWork::ExecQuery(class NODBCCtrl &)
  /* this+0x14 */ unsigned long m_AID
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ unsigned long m_Index
  /* this+0x20 */ bool m_Result
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPartyBookingIndexListImpl {
      public void CPartyBookingIndexListImpl(const class CPartyBookingIndexListImpl &)
  public void CPartyBookingIndexListImpl::CPartyBookingIndexListImpl()
  public void CPartyBookingIndexListImpl::~CPartyBookingIndexListImpl()
  public void CPartyBookingIndexListImpl::Insert(const short, const unsigned long)
  public void CPartyBookingIndexListImpl::Delete(const short, const unsigned long)
  public const class std::vector<unsigned long,std::allocator<unsigned long> > * const CPartyBookingIndexListImpl::GetIndexes(const short)
  /* this+0x0 */ class std::map<short,std::vector<unsigned long,std::allocator<unsigned long> >,std::less<short>,std::allocator<std::pair<short const ,std::vector<unsigned long,std::allocator<unsigned long> > > > > m_List

  public class CPartyBookingIndexListImpl & operator=(const class CPartyBookingIndexListImpl &)
  public void * __vecDelDtor(unsigned int)
}

class CPartyBookingInsertADBWork {
  NAsyncDBWork, offset = 0x0

  public void CPartyBookingInsertADBWork(const class CPartyBookingInsertADBWork &)
  public void CPartyBookingInsertADBWork::CPartyBookingInsertADBWork()
  public void ~CPartyBookingInsertADBWork()
  public void CPartyBookingInsertADBWork::Init(const unsigned long, const unsigned long, const char *, const struct PARTY_BOOKING_DETAIL &)
  private bool CPartyBookingInsertADBWork::ExecQuery(class NODBCCtrl &)
  /* this+0x14 */ unsigned long m_AID
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ struct PARTY_BOOKING_AD_INFO m_PartyBookingInfo

  /* this+0x4c */ bool m_Result
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPartyBookingSearchWork {
    public void CPartyBookingSearchWork(const class CPartyBookingSearchWork &)
  public void CPartyBookingSearchWork::CPartyBookingSearchWork()
  public void CPartyBookingSearchWork::~CPartyBookingSearchWork()
  public void CPartyBookingSearchWork::Init(const short, const short, const short)
  public void CPartyBookingSearchWork::AddIndex(const unsigned long)
  public void CPartyBookingSearchWork::SendZC_PARTY_BOOKING_ACK_SEARCH(class CPC * const, const unsigned long, const short)
  public bool CPartyBookingSearchWork::IsExistSearchResult(const short, const short, const short)
  /* this+0x0 */ class std::list<unsigned long,std::allocator<unsigned long> > m_SearchResultList

  /* this+0xc */ short m_Level
  /* this+0xe */ short m_MapID
  /* this+0x10 */ short m_Job
  public class CPartyBookingSearchWork & operator=(const class CPartyBookingSearchWork &)
  public void * __vecDelDtor(unsigned int)
}

class CPartyBookingSystemMgr {
    *
            /* [0x0003:0x0004b620] */ static  class CPartyBookingSystemMgr * m_cpSelf
  public void CPartyBookingSystemMgr(const class CPartyBookingSystemMgr &)
  private void CPartyBookingSystemMgr::CPartyBookingSystemMgr()
  private void CPartyBookingSystemMgr::~CPartyBookingSystemMgr()
  public static bool CPartyBookingSystemMgr::CreateInstance(const char *, const char *)
  public static void CPartyBookingSystemMgr::DestroyInstance()
  public void CPartyBookingSystemMgr::Process()
  private void ProcessExpireTimeCheck()
  private bool CPartyBookingSystemMgr::Load(const char *, const char *)
  private bool CPartyBookingSystemMgr::GetAllPartyBooking()
  private void CPartyBookingSystemMgr::Destroy()
  public void CPartyBookingSystemMgr::RequestRegister(class CPC * const, const struct PARTY_BOOKING_DETAIL &)
  public void CPartyBookingSystemMgr::RequestDelete(const unsigned long)
  public void CPartyBookingSystemMgr::RequestDelete(class CPC * const, const bool)
  public void CPartyBookingSystemMgr::RequestUpdate(class CPC * const, const short *)
  public void CPartyBookingSystemMgr::RequestSearch(class CPC * const, const short, const short, const short, const unsigned long, const short)
  public void CPartyBookingSystemMgr::ReportInsertADBWork(const bool, const unsigned long, const unsigned long, const struct PARTY_BOOKING_AD_INFO &)
  public void CPartyBookingSystemMgr::ReportDeleteADBWork(const bool, const unsigned long, const unsigned long)
  public void CPartyBookingSystemMgr::ReportUpdateADBWork(const bool, const unsigned long, const unsigned long, const short *)
  public void CPartyBookingSystemMgr::CompleteInsert(const unsigned long, const struct PARTY_BOOKING_AD_INFO &)
  public void CPartyBookingSystemMgr::CompleteDelete(const unsigned long)
  public void CPartyBookingSystemMgr::CompleteUpdate(const unsigned long, const short *)
  public void CPartyBookingSystemMgr::RemoveSearchWork(const unsigned long)
  public bool CPartyBookingSystemMgr::GetPartyBookingADInfo(const unsigned long, struct PARTY_BOOKING_AD_INFO &)
  private const unsigned long CPartyBookingSystemMgr::GetIndex(const unsigned long)
  private void CPartyBookingSystemMgr::ExecuteSearch(class CPC * const, class CPartyBookingSearchWork * const, const short, const short, const short, const unsigned long, const short)
  private void CPartyBookingSystemMgr::CompareDetail(const class std::vector<unsigned long,std::allocator<unsigned long> > * const, class CPartyBookingSearchWork * const, const short, const short, const short, const unsigned long)
  private bool CPartyBookingSystemMgr::InsertPartyInfoToContainer(const unsigned long, const struct PARTY_BOOKING_AD_INFO &)
  /* this+0x4 */ class std::map<unsigned long,CPartyBookingSystemMgr::PARTY_BOOKING_SERVER_INFO,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPartyBookingSystemMgr::PARTY_BOOKING_SERVER_INFO> > > m_PartyBookingList

  /* this+0x14 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_GIDList

  /* this+0x24 */ class CPartyBookingIndexListImpl m_MapIDListImpl

  /* this+0x34 */ class CPartyBookingIndexListImpl m_LevelListImpl

  /* this+0x44 */ class CPartyBookingIndexListImpl m_JobListImpl

  /* this+0x54 */ class std::map<unsigned long,CPartyBookingSearchWork *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPartyBookingSearchWork *> > > m_SearchWorkList

    /* this+0x64 */ class CPartyBookingSystemMgr::CPartyBookingODBC m_ODBC

  public class CPartyBookingSystemMgr & operator=(const class CPartyBookingSystemMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CPartyBookingSystemMgr::CPartyBookingODBC {
  CODBC, offset = 0x0

  public void * GetHandle()
  public void CPartyBookingODBC(const class CPartyBookingSystemMgr::CPartyBookingODBC &)
  public void CPartyBookingODBC()
  public void CPartyBookingSystemMgr::CPartyBookingODBC::~CPartyBookingODBC()
  public class CPartyBookingSystemMgr::CPartyBookingODBC & operator=(const class CPartyBookingSystemMgr::CPartyBookingODBC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CPartyBookingSystemMgr::PARTY_BOOKING_SERVER_INFO {
  PARTY_BOOKING_AD_INFO, offset = 0x0

  /* this+0x30 */ unsigned long GID
}

class CPartyBookingUpdateADBWork {
  NAsyncDBWork, offset = 0x0

  public void CPartyBookingUpdateADBWork(const class CPartyBookingUpdateADBWork &)
  public void CPartyBookingUpdateADBWork::CPartyBookingUpdateADBWork()
  public void ~CPartyBookingUpdateADBWork()
  public void CPartyBookingUpdateADBWork::Init(const unsigned long, const unsigned long, const unsigned long, const short *)
  private bool CPartyBookingUpdateADBWork::ExecQuery(class NODBCCtrl &)
  /* this+0x14 */ unsigned long m_AID
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ unsigned long m_Index
  /* this+0x20 */ short[0x6] m_Job
  /* this+0x2c */ bool m_Result
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPath {
    *
  public void CPath(const class CPath &)
  public void CPath()
  public void CPath::~CPath()
  public static bool AddBackslash(const char *, char *)
  public static bool CPath::IsRemotePath(const char *)
  public static unsigned long CPath::AddConnection(const char *, const char *, const char *)
  public static unsigned long CPath::CancelConnection(const char *)
  public class CPath & operator=(const class CPath &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPathData {
  CPath, offset = 0x0

  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_path

  /* this+0x20 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_fileName

  /* this+0x3c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_filePath

  public void CPathData(const class CPathData &)
  public void CPathData::CPathData()
  public void CPathData::~CPathData()
  public void CPathData::Init(const char *)
  public class CPathData & CPathData::SetFileName(const char *)
  public const char * operator const char *()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > operator const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >()
  public class CPathData & operator=(const class CPathData &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPathFinder {
  public void CPathFinder(const class CPathFinder &)
  public void CPathFinder::CPathFinder()
  public void CPathFinder::~CPathFinder()
  public void CPathFinder::Reset()
  public void CPathFinder::SetMap(class CMapRes *)
  public int CPathFinder::FindPath(unsigned long, int, int, int, int, int, int, int, class CPathInfo *)
  private int CPathFinder::GetMapWidth()
  private int GetMapHeight()
  private int GetHeuristicCost(int, int)
  /* this+0x0 */ class CMapRes * m_mapData
  /* this+0x4 */ int m_destX
  /* this+0x8 */ int m_destY
  private int CPathFinder::ProcessNode(struct PathNode *, int, int, int, int)
  private void CPathFinder::BuildResultPath(unsigned long, struct PathNode *, int, class CPathInfo *)
  private unsigned long CPathFinder::GetSecondNodeArrivalTime(unsigned long, class CPathInfo *, int)
  private struct PathNode * CPathFinder::GetNewNode()
  /* this+0xc */ int m_poolCount
  /* this+0x10 */ struct PathNode[0x3c] m_nodePool
  private struct PathNode * CPathFinder::GetNode(int, int)
  private struct PathNode * FindNode(int, int)
  private void CPathFinder::AddNode(struct PathNode *)
  /* this+0x6a0 */ class std::map<int,PathNode *,std::less<int>,std::allocator<std::pair<int const ,PathNode *> > > m_masterNodes

  /* this+0x6b0 */ class CPriorityQueue m_openNodes

  public class CPathFinder & operator=(const class CPathFinder &)
  public void * __vecDelDtor(unsigned int)
}

class CPathInfo {
  public void CPathInfo(const class CPathInfo &)
  public void CPathInfo::CPathInfo()
  public int CPathInfo::GetPos(int, int, float &, float &, int &)
  public int CPathInfo::GetNextPos(unsigned long, int &, int &)
  public int GetStartCellNumber()
  public void CPathInfo::SetStartCellNumber(int)
  public void CPathInfo::SetStartPointX(float)
  public void CPathInfo::SetStartPointY(float)
  public float CPathInfo::GetStartPointX()
  public float CPathInfo::GetStartPointY()
  public unsigned long CPathInfo::GetTotalExpectedMovingTime()
  public int GetNextCellInfo(unsigned long, unsigned long &, float &, float &)
  public int CPathInfo::IsBackDestination()
  public void CPathInfo::Reset()
  public void Delay(unsigned long, unsigned long)
  /* this+0x0 */ class std::vector<PathCell,std::allocator<PathCell> > m_pathData

  protected void CPathInfo::ResetStartCell()
  /* this+0x10 */ int m_startCell
  /* this+0x14 */ float m_startPointX
  /* this+0x18 */ float m_startPointY
  public void CPathInfo::~CPathInfo()
  public class CPathInfo & operator=(const class CPathInfo &)
  public void * __vecDelDtor(unsigned int)
}

class CPetDB {
  CODBC, offset = 0x0

  public void CPetDB(const class CPetDB &)
  public void CPetDB::CPetDB()
  public void CPetDB::~CPetDB()
  public int UpdateFR(int, int, int)
  public int UpdateName(int, const char *)
  public int UpdateAccessary(int, int)
  public int CPetDB::Delete(int)
  public int Insert(struct PET_PROPERTY *)
  public int Select(struct PET_PROPERTY *)
  public bool CPetDB::Insert_WithGID(struct PET_PROPERTY *, unsigned long)
  public bool CPetDB::Get_WithGID(struct PET_PROPERTY *, unsigned long &)
  public bool CPetDB::Update_WithGID(struct PET_PROPERTY *, unsigned long)
  public bool CPetDB::UpdateGID(int, unsigned long)
  public class CPetDB & operator=(const class CPetDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPetDefaultValue {
    *
  public void CPetDefaultValue(const class CPetDefaultValue &)
  public void CPetDefaultValue::CPetDefaultValue()
  public void CPetDefaultValue::~CPetDefaultValue()
    /* this+0x4 */ struct PET_INFO * m_array
  /* this+0x8 */ class std::map<int,PET_INFO *,std::less<int>,std::allocator<std::pair<int const ,PET_INFO *> > > m_table

  /* this+0x18 */ class std::set<int,std::less<int>,std::allocator<int> > m_accSet

  /* this+0x28 */ class std::set<int,std::less<int>,std::allocator<int> > m_petEggSet

  protected void CPetDefaultValue::BuildSet()
  public bool CPetDefaultValue::Load(const char *)
  public struct PET_INFO * CPetDefaultValue::GetDefaultValue(int)
  public int CPetDefaultValue::IsWearableItem(unsigned short, int)
  public int CPetDefaultValue::IsPetEgg(unsigned short)
  public class CPetDefaultValue & operator=(const class CPetDefaultValue &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPetLog {
  CDatabaseLog<SPETLOG *>, offset = 0x0

  public void CPetLog::AddPetLog(const unsigned long, const struct PET_PROPERTY, const char *, const int)
  public void CPetLog::ConnectToDatabase(const char *)
  private int CPetLog::SaveToDatabase(void *, struct SPETLOG *)
  public void CPetLog(const class CPetLog &)
  public void CPetLog()
  public void ~CPetLog()
  public class CPetLog & operator=(const class CPetLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPollTimer {
  /* this+0x0 */ unsigned long m_tick
  /* this+0x4 */ unsigned long m_period
  public void Init(unsigned long, unsigned long)
  public void Reset(unsigned long, unsigned long)
  public bool CheckTimeout(unsigned long)
}

class CPresentLog {
  CDatabaseLog<SPRESENTLOG *>, offset = 0x0

  public void CPresentLog::AddPresentLog(class CPC *, unsigned long)
  public void CPresentLog::ConnectToDatabase(const char *)
  private int CPresentLog::SaveToDatabase(void *, struct SPRESENTLOG *)
  public void CPresentLog(const class CPresentLog &)
  public void CPresentLog()
  public void ~CPresentLog()
  public class CPresentLog & operator=(const class CPresentLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPriorityQueue {
  public void Reset()
  public struct PathNode * Pop()
  public void CPriorityQueue::Push(struct PathNode *)
  public void UpdateNode(struct PathNode *)
  public int IsEmpty()
  /* this+0x0 */ class std::vector<PathNode *,std::allocator<PathNode *> > heap

    public void CPriorityQueue(const class CPriorityQueue &)
  public void CPriorityQueue()
  public void CPriorityQueue::~CPriorityQueue()
  public class CPriorityQueue & operator=(const class CPriorityQueue &)
  public void * __vecDelDtor(unsigned int)
}

class CPriorityQueue::NodeTotalGreater {
  public int operator()(struct PathNode *, struct PathNode *)
}

class CProcessMgr {
  N3Thread, offset = 0x0

  N3Inter, offset = 0x30

  N3Object, offset = 0x34

  public bool isOK()
  public bool CProcessMgr::Start()
  public void CProcessMgr::Stop()
  private class std::tr1::tuple<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> CProcessMgr::Startup()
  private void CProcessMgr::Cleanup()
    private bool CProcessMgr::MessageProcess()
  public void CProcessMgr::Receive(const unsigned int, const unsigned int, const unsigned int)
  private unsigned int CProcessMgr::ThreadFunction()
  private void CProcessMgr::PostThreadQuitMessage()
  public static bool CProcessMgr::CreateInstance()
  public static void CProcessMgr::DestroyInstance()
  private void CProcessMgr(const class CProcessMgr &)
  private void CProcessMgr::CProcessMgr()
  private void CProcessMgr::~CProcessMgr()
  private class CProcessMgr & operator=(const class CProcessMgr &)
  /* [0x0003:0x0004b2cc] */ static  class CProcessMgr * m_cpSelf
  /* this+0x3c */ bool m_bOK
  /* this+0x3d */ bool m_bReqExit
  /* this+0x40 */ class N3MessageQueue m_MessageQueue

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CProcessTimeChecker {
  /* this+0x0 */ unsigned long m_MarkMS
  /* this+0x4 */ unsigned long m_max
  public void Start()
  public void End()
  public unsigned long GetMax()
  public void CProcessTimeChecker()
}

class CProgrammerSupportLog {
  NFileLog, offset = 0x0

  public bool isOK()
  public static bool CProgrammerSupportLog::CreateInstance()
  public static void CProgrammerSupportLog::DestroyInstance()
  private void CProgrammerSupportLog(class CProgrammerSupportLog &)
  private void CProgrammerSupportLog::CProgrammerSupportLog()
  private void CProgrammerSupportLog::~CProgrammerSupportLog()
  private class CProgrammerSupportLog & operator=(class CProgrammerSupportLog &)
  /* [0x0003:0x0004b874] */ static  class CProgrammerSupportLog * m_cpSelf
  /* this+0x828 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CPubScheduler {
    *
      /* this+0x4 */ class std::multimap<unsigned long,CPubSchedulerJob,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPubSchedulerJob> > > m_JobContainer

  public bool Add(const unsigned long, class CPubSchedulerJob &)
  public void CPubScheduler::Init()
  public void CPubScheduler::Process(const unsigned long, class CPC *)
  public void CPubScheduler(const class CPubScheduler &)
  public void CPubScheduler::CPubScheduler()
  public void CPubScheduler::~CPubScheduler()
  public class CPubScheduler & operator=(const class CPubScheduler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPubSchedulerJob {
  /* this+0x0 */ function  * m_FuncPtr
  public void CPubSchedulerJob(function  *)
  public void ~CPubSchedulerJob()
  public void * __vecDelDtor(unsigned int)
}

class CPvPMapRes {
  CMapRes, offset = 0x0

  public void CPvPMapRes(class CPvPMapRes &)
  public void CPvPMapRes(const int)
  public void ~CPvPMapRes()
  public void Reset()
  public bool UpdateWinPoint(unsigned long, int)
  public bool DeleteWinPoint(unsigned long)
  public int GetPCRanking(unsigned long)
  /* this+0x76c */ class CMemoryMgr<WINPOINT> m_winpointPool

  /* this+0x790 */ class std::map<unsigned long,WINPOINT *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,WINPOINT *> > > m_map

  private void DeleteFromList(struct WINPOINT *)
  private class std::_List_iterator<std::_List_val<WINPOINT *,std::allocator<WINPOINT *> > > UpperBound(int)
  private void BroadCastRankingInfo()
  private void ClearWinpoint()
  /* this+0x7a0 */ class std::list<WINPOINT *,std::allocator<WINPOINT *> > m_list

  public void * __vecDelDtor(unsigned int)
}

class CPvPScoreDB {
  CODBC, offset = 0x0

  public void CPvPScoreDB(const class CPvPScoreDB &)
  public void CPvPScoreDB::CPvPScoreDB()
  public void CPvPScoreDB::~CPvPScoreDB()
  public int CPvPScoreDB::Update(struct PVPSCORE_INFO *)
  public int Get(struct PVPSCORE_INFO *)
  private int CPvPScoreDB::Insert(struct PVPSCORE_INFO *)
  public class CPvPScoreDB & operator=(const class CPvPScoreDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CQFile {
    *
  public struct std::pair<bool,int> CQFile::Open(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CQFile::Close()
  public int CQFile::Read(char *, const int)
  public void CQFile(class CQFile &)
  public void CQFile::CQFile()
  public void CQFile::~CQFile()
  public class CQFile & operator=(class CQFile &)
  /* this+0x4 */ struct _iobuf * m_fp
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CQVar {
    *
  public void CQVar(const class CQVar &)
  public void CQVar(unsigned long)
  public void CQVar::CQVar(class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CQVar::CQVar(char *)
  public void CQVar::CQVar(int)
  public void CQVar::CQVar()
  public void CQVar::~CQVar()
  public bool Set(const unsigned long)
  public bool Set(const int)
  public bool Set(const char *)
  public int CQVar::o_num()
  public char * CQVar::o_str()
  public int CQVar::length()
  public unsigned long CQVar::o_dword()
  public char * operator char *()
  public const char * operator const char *()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > operator class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >()
  public int operator int()
  public unsigned long operator unsigned long()
  public class CQVar & operator=(const class CQVar &)
  public const class CQVar & operator=(const unsigned long)
  public const class CQVar & CQVar::operator=(const int)
  public const class CQVar & CQVar::operator=(class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public const class CQVar & CQVar::operator=(const char *)
  public int CQVar::FindToken(int, const char *)
  public int CQVar::FindToken(const char *)
  public int CQVar::FindToken(const char &)
  public int CQVar::Delete(int, int)
  public int CQVar::Delete(int)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CQVar::SubStr(int, int)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CQVar::SubStr(int)
  public int CQVar::Replace(const char *, const char *)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CQVar::SpanExcluding(char *)
  public void CQVar::Trim_Left()
  public void CQVar::Trim_Right()
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_str

  /* this+0x20 */ int m_num
  /* this+0x24 */ unsigned long m_dword
  /* this+0x28 */ unsigned long m_type
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CQuestArlimiMgr {
    *
      /* this+0x4 */ class std::list<unsigned long,std::allocator<unsigned long> > m_pcQueue

  /* this+0x10 */ class std::map<unsigned long,int,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,int> > > m_pcMap

  /* this+0x20 */ class CQuestProviso2 m_proviso

  /* this+0x58 */ class CArlimiMap2 m_arlimiMap

  /* [0x0003:0x0004b604] */ static  class CQuestArlimiMgr * m_pSelf
  /* this+0xc8 */ bool m_bOK
  public static bool CQuestArlimiMgr::CreateInstance()
  public static void CQuestArlimiMgr::DestroyInstance()
  public bool IsOK()
  public struct std::pair<int,int> CQuestArlimiMgr::ProvisoCalulation(class CPC *, const unsigned long, const unsigned long)
  public void CQuestArlimiMgr::SendQuestEffect(class CPC *, unsigned long, unsigned long, unsigned long, int, unsigned long)
  public void CQuestArlimiMgr::Process(class CPC * const, const unsigned long)
  public const class std::vector<unsigned long,std::allocator<unsigned long> > & GetArlimiIndexList(const int)
  public bool AddArlimiMapFromNpc(const unsigned long, const unsigned long, const int, const int, const int)
  public bool InsertProvisoFromNpc(const unsigned long, const unsigned long, const int, const int)
  public bool SetJob_Proviso(const unsigned long, const unsigned long, const int)
  public bool SetSex_Proviso(const unsigned long, const unsigned long, const int)
  public bool SetLevel_Proviso(const unsigned long, const unsigned long, const int, const int)
  public bool SetItem_Proviso(const unsigned long, const unsigned long, const int, const int)
  public bool SetHomunLevel_Proviso(const unsigned long, const unsigned long, const int, const int)
  public bool SetHomunType_Proviso(const unsigned long, const unsigned long, const int)
  public bool SetQuestItem_Proviso(const unsigned long, const unsigned long, const int, const int, const int, const int)
  public bool SetQuestJobLevel(const unsigned long, const unsigned long, const int, const int)
  public bool SetQuestQuest(const unsigned long, const unsigned long, const int, const int)
  public void CQuestArlimiMgr(class CQuestArlimiMgr &)
  private void CQuestArlimiMgr::CQuestArlimiMgr()
  private void CQuestArlimiMgr::~CQuestArlimiMgr()
  public class CQuestArlimiMgr & operator=(class CQuestArlimiMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CQuestArlimiTxt {
    *
  public void CQuestArlimiTxt(const class CQuestArlimiTxt &)
  public void CQuestArlimiTxt()
  public void ~CQuestArlimiTxt()
  /* this+0x4 */ class std::list<int,std::allocator<int> > m_funcStartPosList

  /* this+0x10 */ class CQVar m_buff

  public bool LoadTxt(const char *)
  public bool DeleteComment()
  public void ExtractionFuncPositonList(const char *)
  public class CQVar GetNextFuncData()
  public int GetFuncSize()
  public class CQuestArlimiTxt & operator=(const class CQuestArlimiTxt &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CQuestEventInfo {
    *
  public void CQuestEventInfo(const class CQuestEventInfo &)
  public void CQuestEventInfo::CQuestEventInfo()
  public void CQuestEventInfo::~CQuestEventInfo()
  /* this+0x4 */ unsigned long m_qID
  /* this+0x8 */ bool m_active
  /* this+0x9 */ bool m_isUpdate
  /* this+0xa */ bool m_isTimeMission
  /* this+0xc */ long m_startTime
  /* this+0x10 */ long m_misTime
  /* this+0x14 */ bool m_complete
  public void CQuestEventInfo::Initialize()
  public void SetQuest(unsigned long)
  public void SetActiv(bool)
  public void CQuestEventInfo::SetPlayTime(long, long, bool)
  public bool IsUpdate()
  public void SetUpdate()
  public unsigned long GetQID()
  public bool GetActive()
  public long CQuestEventInfo::GetPlayStartTime()
  public long CQuestEventInfo::GetPlayEndingTime()
  public bool IsTimeQuset()
  public void SetComplete(const bool)
  public bool GetComplete()
  public void CQuestEventInfo::ClearQuest()
  public class CQuestEventInfo & operator=(const class CQuestEventInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CQuestEventMgr {
    *
        public bool CQuestEventMgr::AddDropItem(const int, const unsigned long, const unsigned short, const int)
  public bool CQuestEventMgr::IsDropItemMonster(const int)
  public class std::tr1::tuple<bool,int,unsigned short,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> CQuestEventMgr::FindDropItem(const int, const unsigned long)
  /* this+0x4 */ class std::map<int,std::map<unsigned long,CQuestEventMgr::CDropItem,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CQuestEventMgr::CDropItem> > >,std::less<int>,std::allocator<std::pair<int const ,std::map<unsigned long,CQuestEventMgr::CDropItem,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CQuestEventMgr::CDropItem> > > > > > m_mapDropItem

    public void CQuestEventMgr(const class CQuestEventMgr &)
  public void CQuestEventMgr::CQuestEventMgr()
  public void CQuestEventMgr::~CQuestEventMgr()
    public bool CQuestEventMgr::Initialize()
  public void CQuestEventMgr::Filnalize()
  public bool CQuestEventMgr::ReplaceAllMonsterName()
  public bool CQuestEventMgr::AddQuest(unsigned long, struct TQUEST_MISSION *)
  public bool CQuestEventMgr::GetQuest(unsigned long, struct TQUEST_MISSION *)
  public int CQuestEventMgr::GetMobMaxCount(unsigned long, unsigned long)
  public int CQuestEventMgr::GetMissionIdent(unsigned long, unsigned long)
  public unsigned long CQuestEventMgr::GetMissionPlayTime(unsigned long)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CQuestEventMgr::GetMobName(unsigned long, unsigned long)
  public bool CQuestEventMgr::IsQuest(unsigned long)
  /* this+0x14 */ class std::map<unsigned long,CQuestMission *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CQuestMission *> > > m_map

  public class CQuestEventMgr & operator=(const class CQuestEventMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CQuestEventMgr::CDropItem {
    *
  public void CDropItem(const class CQuestEventMgr::CDropItem &)
  public void CDropItem(const unsigned short, const int)
  public void CQuestEventMgr::CDropItem::~CDropItem()
  /* this+0x4 */ unsigned short m_ITID
  /* this+0x8 */ int m_nRandom
  public class CQuestEventMgr::CDropItem & operator=(const class CQuestEventMgr::CDropItem &)
  public void * __vecDelDtor(unsigned int)
}

class CQuestMission {
    *
  public void CQuestMission(const class CQuestMission &)
  public void CQuestMission::CQuestMission()
  public void CQuestMission::~CQuestMission()
    /* this+0x4 */ unsigned long m_questID
  /* this+0x8 */ char[0x40] m_questName
  /* this+0x48 */ int m_huntCount
  /* this+0x4c */ struct TDATA_HUNT[0x3] m_hunt
  /* this+0xb8 */ unsigned long m_playTime
  public bool CQuestMission::ReplaceMonsterName()
  public int CQuestMission::SetQuest(unsigned long, struct TQUEST_MISSION *)
  public bool CQuestMission::GetQuest(struct TQUEST_MISSION *)
  public int CQuestMission::GetMobMaxCount(unsigned long)
  public int CQuestMission::GetMissionIdent(unsigned long)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CQuestMission::GetMobName(unsigned long)
  public unsigned long GetMissionPlayTime()
  public class CQuestMission & operator=(const class CQuestMission &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CQuestMission::THUNT {
  /* this+0x0 */ int m_ident
  /* this+0x4 */ unsigned long m_mobIdent
  /* this+0x8 */ char[0x18] m_mobName
  /* this+0x20 */ int m_maxCount
}

class CQuestProviso2 {
    *
          public void CQuestProviso2(class CQuestProviso2 &)
  public void CQuestProviso2::CQuestProviso2()
  public void CQuestProviso2::~CQuestProviso2()
  /* this+0x4 */ class std::map<__int64,CQuestProviso2::TPROVISO *,std::less<__int64>,std::allocator<std::pair<__int64 const ,CQuestProviso2::TPROVISO *> > > m_proviso_map

  /* this+0x14 */ class CMemoryMgr<CQuestProviso2::TPROVISO> m_pool

  public bool CQuestProviso2::InsertProvisoFromNpc(const unsigned long, const unsigned long, const short, const int)
  public bool CQuestProviso2::SetSex(const unsigned long, const unsigned long, short)
  public bool CQuestProviso2::SetLevel(const unsigned long, const unsigned long, unsigned long, unsigned long)
  public bool CQuestProviso2::SetHomunLevel(const unsigned long, const unsigned long, const int, const int)
  public bool CQuestProviso2::SetEvolution(const unsigned long, const unsigned long, const int)
  public bool CQuestProviso2::SetJob(const unsigned long, const unsigned long, const int)
  public bool CQuestProviso2::SetItem(const unsigned long, const unsigned long, const int, const int)
  public bool CQuestProviso2::SetQuestItem(const unsigned long, const unsigned long, const int, const int, const int, const int)
  public bool CQuestProviso2::SetJobLevel(const unsigned long, const unsigned long, const int, const int)
  public bool CQuestProviso2::SetQuestQuest(const unsigned long, const unsigned long, const int, const int)
  public struct CQuestProviso2::TPROVISO * CQuestProviso2::SelectProviso(const unsigned long, const unsigned long)
  public class CQuestProviso2 & operator=(class CQuestProviso2 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CQuestProviso2::EXISTQIDINFO {
  /* this+0x0 */ unsigned long QuestID
  /* this+0x4 */ unsigned char Status
  public void EXISTQIDINFO(const unsigned long, const unsigned char)
  public void EXISTQIDINFO()
  public bool operator==(const struct CQuestProviso2::EXISTQIDINFO &)
  public bool operator!=(const struct CQuestProviso2::EXISTQIDINFO &)
}

struct CQuestProviso2::TPROVISO {
  /* this+0x0 */ unsigned long t_qid
  /* this+0x4 */ short t_minimapType
  /* this+0x8 */ class std::vector<CQuestProviso2::EXISTQIDINFO,std::allocator<CQuestProviso2::EXISTQIDINFO> > t_ExsitQuestInfo

  /* this+0x18 */ unsigned long t_hiLV
  /* this+0x1c */ unsigned long t_lowLV
  /* this+0x20 */ short t_sex
  /* this+0x22 */ short t_homun_minLv
  /* this+0x24 */ short t_homun_maxLv
  /* this+0x26 */ short t_homun_evolution
  /* this+0x28 */ class std::vector<unsigned long,std::allocator<unsigned long> > t_jobList

  /* this+0x38 */ class std::map<unsigned long,int,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,int> > > t_itemList

  /* this+0x48 */ class std::map<unsigned long,int,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,int> > > t_completeItemList

    /* this+0x58 */ class std::vector<CQuestProviso2::TPROVISO::tagItemInfo,std::allocator<CQuestProviso2::TPROVISO::tagItemInfo> > t_QuestItemList

  /* this+0x68 */ short t_job_minLv
  /* this+0x6a */ short t_job_maxLv
  /* this+0x6c */ unsigned char EffectType
  public void TPROVISO(const struct CQuestProviso2::TPROVISO &)
  public void TPROVISO()
  public void CQuestProviso2::TPROVISO::~TPROVISO()
  public struct CQuestProviso2::TPROVISO & operator=(const struct CQuestProviso2::TPROVISO &)
  public void * __vecDelDtor(unsigned int)
}

struct CQuestProviso2::TPROVISO::tagItemInfo {
    /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ unsigned short cmp1
  /* this+0x4 */ unsigned short cmp2
  /* this+0x6 */ unsigned char cmptype
  public void tagItemInfo()
  public void tagItemInfo(const unsigned short, const unsigned short, const unsigned short, const unsigned char)
}

class CQuestTFSector {
    *
  public void CQuestTFSector(const class CQuestTFSector &)
  public void CQuestTFSector::CQuestTFSector()
  public void CQuestTFSector::~CQuestTFSector()
  /* this+0x4 */ char * m_buff
  /* this+0x8 */ int m_size
  /* this+0xc */ int m_pos
  /* this+0x10 */ class CQVar m_var

  /* this+0x3c */ struct TQUEST_MISSION m_questMission

  public bool CQuestTFSector::SetData(const char *, int)
  public bool CQuestTFSector::Parse()
  private int FindToken(const char &)
  private int FindString(const char *)
  private int Replace(const char *, const char *)
  private int DelteBuff(int)
  private char * SubStr(int)
  private int CQuestTFSector::LineComfile(const char *, int)
  private int CQuestTFSector::OnFunc(const char *, class CQVar *)
  private int CQuestTFSector::OnFuncQuest(unsigned long, const char *)
  private int CQuestTFSector::OnFuncHunt(const char *, int)
  private int CQuestTFSector::OnFuncTime(unsigned long)
  private int CQuestTFSector::OnFuncDropItem(const char *, const char *, const int)
  public class CQuestTFSector & operator=(const class CQuestTFSector &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CQuestTFile {
    *
  public void CQuestTFile(const class CQuestTFile &)
  public void CQuestTFile::CQuestTFile()
  public void CQuestTFile::~CQuestTFile()
    /* this+0x4 */ char * m_buff
  /* this+0x8 */ class CQVar m_var

  /* this+0x34 */ int m_size
  /* this+0x38 */ int m_pos
  /* this+0x3c */ class std::list<CQVar,std::allocator<CQVar> > m_list

  /* this+0x48 */ class std::list<CQuestTFSector *,std::allocator<CQuestTFSector *> > m_lsSector

  /* this+0x54 */ bool m_note
  public void CQuestTFile::Clear()
  public bool CQuestTFile::Load(const char *)
  public bool CQuestTFile::BlockCutting()
  public bool CQuestTFile::GeneratorSector()
  private bool CQuestTFile::CuttingNote()
  private int FindString(const char *)
  public class CQuestTFile & operator=(const class CQuestTFile &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CRACE_INFO {
      public void Init()
  public int CRACE_INFO::GetRaceInfo(const int, const enum CRACE_INFO::FIELD_TYPE, const int)
  public void CRACE_INFO::SetRaceInfo(const int, const enum CRACE_INFO::FIELD_TYPE, const int, const int)
  private void CRACE_INFO::SetRaceInfo_Operator(const int, const enum CRACE_INFO::FIELD_TYPE, const int, const int)
  /* this+0x0 */ struct CRACE_INFO::RACE_INFO[0xb] m_Info
  public void CRACE_INFO()
}

struct CRACE_INFO::RACE_INFO {
  /* this+0x0 */ int ignoreDefCount
  /* this+0x4 */ int comaPercent
  /* this+0x8 */ int[0x2] SPAmount_Attack
  /* this+0x10 */ int SPAmount_Kill
  /* this+0x14 */ int plusDamageSelf
  /* this+0x18 */ int plusEXPPercent
  /* this+0x1c */ int plusCRIPercent
  /* this+0x20 */ int plusMDamagePercent
  /* this+0x24 */ int ignoreMDEFPercent
  /* this+0x28 */ int ignoreDEFPercent
  /* this+0x2c */ int plusByRace
  /* this+0x30 */ int resistByRace
}

class CReadBufferAddapter {
    *
  public bool IsComplete()
  public const unsigned char * CReadBufferAddapter::View(int)
  public const unsigned char * CReadBufferAddapter::Get(int)
  public int GetSize()
  public void CReadBufferAddapter(class CReadBufferAddapter &)
  public void CReadBufferAddapter::CReadBufferAddapter(const unsigned char *, unsigned int)
  public void CReadBufferAddapter::~CReadBufferAddapter()
  public class CReadBufferAddapter & operator=(class CReadBufferAddapter &)
  /* this+0x4 */ const unsigned char * m_pData
  /* this+0x8 */ const unsigned int m_DataBytes
  /* this+0xc */ unsigned int m_ReadBytes
  /* this+0x10 */ class std::vector<unsigned char const *,std::allocator<unsigned char const *> > m_DummyTbl

  public void * __vecDelDtor(unsigned int)
}

class CReceiveSpecialItemInfoMsg {
}

class CRecycleObject {
    *
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetClassNameA()
  public void RecycleInit()
  public void CRecycleObject(const class CRecycleObject &)
  public void CRecycleObject()
  public void ~CRecycleObject()
  protected void RegisterClassName(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_className

  public class CRecycleObject & operator=(const class CRecycleObject &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CRecycleObjectMemoryPoolInter {
    *
  public class CRecycleObject * Alloc()
  public void Free(class CRecycleObject *)
  public void CRecycleObjectMemoryPoolInter(const class CRecycleObjectMemoryPoolInter &)
  public void CRecycleObjectMemoryPoolInter()
  public void ~CRecycleObjectMemoryPoolInter()
  public class CRecycleObjectMemoryPoolInter & operator=(const class CRecycleObjectMemoryPoolInter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CRecycleObjectMgrInter {
    *
  public void Free(class CRecycleObject *)
  public void CRecycleObjectMgrInter(const class CRecycleObjectMgrInter &)
  public void CRecycleObjectMgrInter()
  public void ~CRecycleObjectMgrInter()
  public class CRecycleObjectMgrInter & operator=(const class CRecycleObjectMgrInter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CRefiningLog {
  CDatabaseLog<SREFININGLOG *>, offset = 0x0

  public void CRefiningLog::AddRefiningLog(class CPC *, unsigned char, unsigned long, unsigned long, __int64)
  public void CRefiningLog::ConnectToDatabase(const char *)
  private int CRefiningLog::SaveToDatabase(void *, struct SREFININGLOG *)
  public void CRefiningLog(const class CRefiningLog &)
  public void CRefiningLog()
  public void ~CRefiningLog()
  public class CRefiningLog & operator=(const class CRefiningLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CRegKey {
  public void CRegKey()
  public void ~CRegKey()
  public static long SetValue(struct HKEY__ *, const char *, const char *, const char *)
  public long SetValue(const char *, const char *)
  public long SetValue(unsigned long, const char *)
  public long QueryValue(char *, const char *, unsigned long *)
  public long QueryValue(unsigned long &, const char *)
  public long SetKeyValue(const char *, const char *, const char *)
  public long Create(struct HKEY__ *, const char *, char *, unsigned long, unsigned long, struct _SECURITY_ATTRIBUTES *, unsigned long *)
  public long Open(struct HKEY__ *, const char *, unsigned long)
  public long Close()
  public long RecurseDeleteKey(const char *)
  public struct HKEY__ * Detach()
  public void Attach(struct HKEY__ *)
  public long DeleteSubKey(const char *)
  public long DeleteValue(const char *)
  public struct HKEY__ * operator struct HKEY__ *()
  /* this+0x0 */ struct HKEY__ * m_hKey
  public void * __vecDelDtor(unsigned int)
}

class CRoom {
    *
  public void CRoom(const class CRoom &)
  public void CRoom::CRoom()
  public void CRoom::~CRoom()
  public void CRoom::Init()
  public const char * CRoom::GetRoomName()
  public void CRoom::SetRoomName(const char *)
  public int CRoom::InsertMember(const char *, unsigned long, unsigned long)
  public int DeleteMember(const char *)
  public int IsPrivateRoom()
  public void CRoom::SetRoomType(unsigned char)
  public int CRoom::IsCorrectPasswd(const char *)
  public int CRoom::GetSize()
  public int CRoom::IsAcceptablePC(const char *)
  public void CRoom::Reset()
  public void CRoom::SetPasswd(const char *)
  public void CRoom::SetMaxSize(int)
  public void CRoom::GetRoomMembers(int &, char *, const int)
  public void CRoom::BroadCast(int, char *, unsigned long)
  public void CRoom::UpdateRoom(short, unsigned char, char *, char *)
  public unsigned long CRoom::GetOwner()
  public void CRoom::MemberRoleChange(unsigned long, const char *, unsigned long)
  public void CRoom::OwnerChange(unsigned long, const char *)
  public void CRoom::ExpelMember(const char *)
  public int CRoom::ExitRoom(unsigned long)
  public int CRoom::ExitRoom(const char *)
  public int CRoom::GetMaxSize()
  public unsigned char CRoom::GetType()
  public void CRoom::SetRoomID(unsigned long)
  public unsigned long CRoom::GetFirstMemberAID()
  public int CRoom::GetAcceptableType(unsigned long)
  public void CRoom::SetLevel(int, int)
  public void CRoom::SetFee(int)
  public void AddFeeItem(unsigned short, int)
  public void CRoom::AddExJob(int)
  public int CRoom::GetFee()
  public int GetLowLevel()
  public int GetHighLevel()
  private int CRoom::IsAcceptableJob(int)
  /* this+0x4 */ char[0x80] m_roomName
  /* this+0x84 */ unsigned long m_roomID
  /* this+0x88 */ int m_maxRoomSize
  /* this+0x8c */ struct ARENA_ROOM_INFO m_arenaInfo

  /* this+0xa4 */ char[0x8] m_password
  /* this+0xac */ unsigned char m_type
  /* this+0xb0 */ class std::vector<MEMBER_DATA,std::allocator<MEMBER_DATA> > m_members

  /* this+0xc0 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > m_refuseList

  public class CRoom & operator=(const class CRoom &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CRoomMgr {
    *
  public void CRoomMgr(class CRoomMgr &)
  public void CRoomMgr::CRoomMgr()
  public void CRoomMgr::~CRoomMgr()
  public void CRoomMgr::Init(int)
  public void CRoomMgr::Reset()
  public class CRoom * SearchRoom(const char *)
  public class CRoom * CRoomMgr::SearchRoom(unsigned long)
  public unsigned char CRoomMgr::CreateRoom(const char *, const char *, unsigned long, int, unsigned long &, char *)
  public int CRoomMgr::DeleteRoom(unsigned long)
  public unsigned char CRoomMgr::EnterRoom(unsigned long, const char *, unsigned long, const char *)
  public void CRoomMgr::GetRoomMembers(int &, char *, const int, unsigned long)
  public void BroadCast(unsigned long, int, char *)
  public void CRoomMgr::UpdateRoom(unsigned long, unsigned long, short, unsigned char, char *, char *)
  public void CRoomMgr::ReqChangeRole(unsigned long, unsigned long, const char *, unsigned long)
  public void CRoomMgr::ExpelMember(unsigned long, unsigned long, const char *)
  public int CRoomMgr::ExitRoom(unsigned long, const char *)
  public unsigned long CRoomMgr::GetOwner(unsigned long)
  public int CRoomMgr::GetSize(unsigned long)
  public int CRoomMgr::GetMaxSize(unsigned long)
  public unsigned char CRoomMgr::GetType(unsigned long)
  public const char * CRoomMgr::GetRoomName(unsigned long)
  private unsigned long CRoomMgr::AddRoom(class CRoom *)
  /* this+0x4 */ class CMemoryMgr<CRoom> m_roomMPool

  /* this+0x28 */ class std::map<unsigned long,CRoom *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRoom *> > > m_rooms

  /* this+0x38 */ unsigned long m_roomID
  public class CRoomMgr & operator=(class CRoomMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CRuneItemInfo {
    *
    public void CRuneItemInfo(const class CRuneItemInfo &)
  public void CRuneItemInfo::CRuneItemInfo()
  public void CRuneItemInfo::~CRuneItemInfo()
  public bool CRuneItemInfo::Init()
      public class std::list<CRuneItemInfo::RUNE_MATERIAL,std::allocator<CRuneItemInfo::RUNE_MATERIAL> > * CRuneItemInfo::GetRuneMaterial(int)
  public int CRuneItemInfo::GetRawRuneSuccessPercent(int)
  public int CRuneItemInfo::GetRuneRankSuccessPercent(int)
  public int CRuneItemInfo::GetMakableRuneItemByLevel(int)
  public int CRuneItemInfo::GetMakeSuccessPercentByLevel(int)
  public int CRuneItemInfo::GetUseSuccessPercentByLevel(int)
  public int CRuneItemInfo::GetRuneItemMaxCount(int)
  public int CRuneItemInfo::GetMakableRuneItemRandomCount(int)
    /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,short> > > m_ranktype

  /* this+0x14 */ class std::map<int,short,std::less<int>,std::allocator<std::pair<int const ,short> > > m_runeRankList

  /* this+0x24 */ class std::map<short,short,std::less<short>,std::allocator<std::pair<short const ,short> > > m_rankSuccessPercent

  /* this+0x34 */ class std::map<int,short,std::less<int>,std::allocator<std::pair<int const ,short> > > m_rawRuneSuccessPercent

  /* this+0x44 */ class std::vector<short,std::allocator<short> > m_runeMastery_MakeSuccessPercent

  /* this+0x54 */ class std::vector<short,std::allocator<short> > m_runeMastery_MakeMinCount

  /* this+0x64 */ class std::vector<short,std::allocator<short> > m_runeMastery_MakeMaxCount

  /* this+0x74 */ class std::vector<short,std::allocator<short> > m_runeMastery_UseSuccessPercent

  /* this+0x84 */ class std::map<int,CRuneItemInfo::RUNE_ITEM,std::less<int>,std::allocator<std::pair<int const ,CRuneItemInfo::RUNE_ITEM> > > m_runeMasteryLevel_MakableItem

  /* this+0x94 */ class std::map<int,short,std::less<int>,std::allocator<std::pair<int const ,short> > > m_runeItem_MaxCount

  /* this+0xa4 */ class std::map<int,std::list<CRuneItemInfo::RUNE_MATERIAL,std::allocator<CRuneItemInfo::RUNE_MATERIAL> >,std::less<int>,std::allocator<std::pair<int const ,std::list<CRuneItemInfo::RUNE_MATERIAL,std::allocator<CRuneItemInfo::RUNE_MATERIAL> > > > > m_runeMaterials

  private bool CRuneItemInfo::Load_RankType(struct lua_State *)
  private bool CRuneItemInfo::Load_RuneRankList(struct lua_State *)
  private bool CRuneItemInfo::Load_RankSuccessPercent(struct lua_State *)
  private bool CRuneItemInfo::Load_RawRundSuccessPercent(struct lua_State *)
  private bool CRuneItemInfo::Load_RuneMastery_MakeSuccessPercent(struct lua_State *)
  private bool CRuneItemInfo::Load_RuneMastery_MakeMinCount(struct lua_State *)
  private bool CRuneItemInfo::Load_RuneMastery_MakeMaxCount(struct lua_State *)
  private bool CRuneItemInfo::Load_RuneMastery_UseSuccessPercent(struct lua_State *)
  private bool CRuneItemInfo::Load_RuneMasteryLevel_MakableItem(struct lua_State *)
  private bool CRuneItemInfo::Load_RuneItem_MaxCount(struct lua_State *)
  private bool CRuneItemInfo::Load_RuneMaterial(struct lua_State *)
  private bool CRuneItemInfo::Load_KeyValue(struct lua_State *, const char *, class std::vector<short,std::allocator<short> > *)
  private bool CRuneItemInfo::Load_KeyValue(struct lua_State *, const char *, class std::list<CRuneItemInfo::RUNE_MATERIAL,std::allocator<CRuneItemInfo::RUNE_MATERIAL> > *)
  private bool CRuneItemInfo::Load_KeyValue(struct lua_State *, const char *, class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,short> > > *)
  private bool CRuneItemInfo::Load_KeyValue(struct lua_State *, const char *, class std::map<int,short,std::less<int>,std::allocator<std::pair<int const ,short> > > *)
  public class CRuneItemInfo & operator=(const class CRuneItemInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CRuneItemInfo::RUNE_ITEM {
  /* this+0x0 */ int itemID
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > itemName

  public void RUNE_ITEM(const struct CRuneItemInfo::RUNE_ITEM &)
  public void RUNE_ITEM()
  public void CRuneItemInfo::RUNE_ITEM::~RUNE_ITEM()
  public struct CRuneItemInfo::RUNE_ITEM & operator=(const struct CRuneItemInfo::RUNE_ITEM &)
  public void * __vecDelDtor(unsigned int)
}

struct CRuneItemInfo::RUNE_MATERIAL {
  /* this+0x0 */ int itemID
  /* this+0x4 */ short count
}

class CSKCastingApplyObjMgr {
    *
      public const class SKcastingTMvarStuff::CApply * CSKCastingApplyObjMgr::GetApplyer(const unsigned int)
  public bool isOK()
  public static bool CSKCastingApplyObjMgr::CreateInstance()
  public static void CSKCastingApplyObjMgr::DestroyInstance()
    private class std::tr1::tuple<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> CSKCastingApplyObjMgr::LoadFile(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CSKCastingApplyObjMgr::InsertReservedApplyer()
  private bool CSKCastingApplyObjMgr::Create()
  private void CSKCastingApplyObjMgr(class CSKCastingApplyObjMgr &)
  private void CSKCastingApplyObjMgr::CSKCastingApplyObjMgr()
  private void CSKCastingApplyObjMgr::~CSKCastingApplyObjMgr()
  private class CSKCastingApplyObjMgr & operator=(class CSKCastingApplyObjMgr &)
    /* this+0x4 */ class std::map<unsigned int,SKcastingTMvarStuff::CApply *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,SKcastingTMvarStuff::CApply *> > > m_ApplyContainer

  /* this+0x14 */ const class SKcastingTMvarStuff::CApply * m_cpAnytingApply
  /* this+0x18 */ bool m_bOK
  /* [0x0003:0x0004b280] */ static  class CSKCastingApplyObjMgr * m_cpSelf
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CSKcastingTMvar {
    *
  public void Init()
  public void PropertyAmountAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void PropertyAmountRemove(const class SKcastingTMvarStuff::CIdentity &)
  public void PropertyPermillAdd(class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void PropertyPermillRemove(const class SKcastingTMvarStuff::CIdentity &)
  public int CSKcastingTMvar::Get(const int, const int)
  /* this+0x4 */ class SKcastingTMvarStuff::CAmount m_Amount

  /* this+0x18 */ class SKcastingTMvarStuff::CPermill m_Permill

  public void CSKcastingTMvar(const class CSKcastingTMvar &)
  public void CSKcastingTMvar::CSKcastingTMvar()
  public void CSKcastingTMvar::~CSKcastingTMvar()
  public class CSKcastingTMvar & operator=(const class CSKcastingTMvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSPAmount {
    *
  public int operator int()
  public class CSPAmount & CSPAmount::operator+=(const int)
  public class CSPAmount & operator=(const class CSPAmount &)
  public class CSPAmount & CSPAmount::operator=(const int)
  public void CSPAmount::Init()
  public void CSPAmount::RecoveryProhibitionSet()
  public void CSPAmount::RecoveryProhibitionReset()
  public void CSPAmount::SetForceAmout(const int)
  public void CSPAmount(const class CSPAmount &)
  public void CSPAmount::CSPAmount()
  public void CSPAmount::~CSPAmount()
  /* this+0x4 */ int m_Amount
  /* this+0x8 */ int m_RecoveryProhibitionRefCnt
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSSIList {
    *
    public void CSSIList(const class CSSIList &)
  public void CSSIList::CSSIList()
  public void CSSIList::~CSSIList()
  public void CSSIList::InsertData(const unsigned char, const int, class std::tr1::shared_ptr<AllocSSIListInfoData>)
  public void CSSIList::UpdateData(const unsigned char, const int, const unsigned int, const short)
  public void CSSIList::DeleteData(const unsigned char, const int, const unsigned int)
  public int CSSIList::SearchData(const struct SSIRequest &)
  public const struct tagPOINTS CSSIList::GetStorePos(const unsigned int, const int, const unsigned short, const unsigned int)
  public void CSSIList::DeleteSearchData(const unsigned int)
  public void CSSIList::GetSearchingData(const unsigned int, class std::vector<ResultItemInfo,std::allocator<ResultItemInfo> > &, const int)
  public const int GetSearchingStoretype(const unsigned int)
  public const int GetCurSeachingDataCnt(const unsigned int)
  public const bool PossibleTime(const unsigned int)
  public const int GetSize()
  public bool CSSIList::IsExistSSI_ID(const unsigned int, const int, const unsigned short, const unsigned int)
  public const unsigned int CSSIList::GeneratorSSI_ID()
  public void Output()
  /* this+0x4 */ class std::map<int,std::multimap<unsigned short,std::tr1::shared_ptr<AllocSSIListInfoData>,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::tr1::shared_ptr<AllocSSIListInfoData> > > >,std::less<int>,std::allocator<std::pair<int const ,std::multimap<unsigned short,std::tr1::shared_ptr<AllocSSIListInfoData>,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::tr1::shared_ptr<AllocSSIListInfoData> > > > > > >[0x2] m_List4
  /* this+0x24 */ class CSearchingSSIList m_SearchingList

  /* this+0x44 */ unsigned int m_SSI_ID
  public class CSSIList & operator=(const class CSSIList &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSSIMgr {
    *
  public void CreateDummyList()
  public void TestDelete()
  public void TestInsert()
  public void InsertDummyList()
  public static bool CSSIMgr::CreateInstance()
  public static void CSSIMgr::DestoryInstance()
  public void CSSIMgr::Proc()
  /* [0x0003:0x0004b624] */ static  class CSSIMgr * m_pSelf
  /* this+0x4 */ class CSSIList m_SSIList

  /* this+0x4c */ class CSSIReqList m_SSIRequest

  public void CSSIMgr(const class CSSIMgr &)
  private void CSSIMgr::CSSIMgr()
  private void CSSIMgr::~CSSIMgr()
  public class CSSIMgr & operator=(const class CSSIMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CSSIReqList {
  public void CSSIReqList(const class CSSIReqList &)
  public void CSSIReqList::CSSIReqList()
  public void CSSIReqList::~CSSIReqList()
  public void CSSIReqList::InsertData(struct SSIRequest &)
  public void CSSIReqList::GetRequestData(struct SSIRequest &)
  public bool IsEmptyRequestData()
  /* this+0x0 */ class std::queue<SSIRequest,std::deque<SSIRequest,std::allocator<SSIRequest> > > m_Queue

  public class CSSIReqList & operator=(const class CSSIReqList &)
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork {
  NAsyncDBWork, offset = 0x0

                          /* this+0x14 */ unsigned long m_AID
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ enum CSaveAllADBWork::enumResult m_Result
  /* this+0x20 */ enum CSaveAllADBWork::enumAfterAction m_AfterAction
  /* this+0x24 */ class CSaveAllADBWork::CCharacterData m_CharacterData

  /* this+0xcc */ class CSaveAllADBWork::CMapMoveOtherSvr m_MapMoveOtherSvr

    /* this+0xd4 */ class CSaveAllADBWork::CWarpInfoData m_WaprpInfoData

  /* this+0xe4 */ class CSaveAllADBWork::CBodyItemData m_BodyItemData

  /* this+0xfc */ class CSaveAllADBWork::CStoreItemData m_StoreItemData

  /* this+0x114 */ class CSaveAllADBWork::CEffect3rd m_Effect3rd

  /* this+0x124 */ class CSaveAllADBWork::CCartItemData m_CartItemData

  /* this+0x13c */ class CSaveAllADBWork::CStateData m_StateData

  /* this+0x344 */ class CSaveAllADBWork::CMercenaryData m_MercenaryData

  /* this+0x798 */ class CSaveAllADBWorkStuff::CElementalData m_ElementalData

  /* this+0x7d8 */ class CSaveAllADBWork::CQuestEventData m_questEventData

  /* this+0x754c */ class CSaveAllADBWork::CSkill3rdData m_Skill

  /* this+0x755c */ class HomunDataStuff::CHomunData m_HomunData

  private bool CSaveAllADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CSaveAllADBWork::SaveMercenaryData_Owner(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CSaveAllADBWork::SaveMercenaryData_Info(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CSaveAllADBWork::SaveMercenaryData_Effect(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CSaveAllADBWork::SaveMercenaryData_State(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CSaveAllADBWork::SaveStateData(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CSaveAllADBWork::SaveSkill(class NODBCCtrl &)
  public const unsigned long GetGID()
  public const unsigned long GetAID()
  public const enum CSaveAllADBWork::enumAfterAction GetAfterAction()
  public void CSaveAllADBWork::Init(const enum CSaveAllADBWork::enumAfterAction, const unsigned long, const unsigned long)
  public void CSaveAllADBWork(class CSaveAllADBWork &)
  private void CSaveAllADBWork::CSaveAllADBWork()
  private void CSaveAllADBWork::~CSaveAllADBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CBodyItemData {
  /* this+0x0 */ class CItemDBFmtBuffer m_ItemDBFmtBuffer

  /* this+0x14 */ bool m_bActive
  public void Init()
  public void CBodyItemData(class CSaveAllADBWork::CBodyItemData &)
  public void CBodyItemData()
  public void CSaveAllADBWork::CBodyItemData::~CBodyItemData()
  public class CSaveAllADBWork::CBodyItemData & operator=(class CSaveAllADBWork::CBodyItemData &)
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CCartItemData {
  /* this+0x0 */ class CItemDBFmtBuffer m_ItemDBFmtBuffer

  /* this+0x14 */ bool m_bActive
  public void Init()
  public void CCartItemData(class CSaveAllADBWork::CCartItemData &)
  public void CCartItemData()
  public void CSaveAllADBWork::CCartItemData::~CCartItemData()
  public class CSaveAllADBWork::CCartItemData & operator=(class CSaveAllADBWork::CCartItemData &)
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CCharacterData {
  /* this+0x0 */ bool m_bActive
  /* this+0x1 */ struct CHARINFO_TO_CHARACTERDB m_data

  /* this+0x8e */ char[0x18] m_characterName
  public void Init()
  public void CCharacterData()
  public void ~CCharacterData()
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CEffect3rd {
  /* this+0x0 */ class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > m_List

  public void Init()
  public void CEffect3rd(const class CSaveAllADBWork::CEffect3rd &)
  public void CEffect3rd()
  public void CSaveAllADBWork::CEffect3rd::~CEffect3rd()
  public class CSaveAllADBWork::CEffect3rd & operator=(const class CSaveAllADBWork::CEffect3rd &)
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CMapMoveOtherSvr {
  /* this+0x0 */ unsigned long m_NID
  /* this+0x4 */ unsigned long m_TargetSvrID
  public void Init()
  public void CMapMoveOtherSvr()
  public void ~CMapMoveOtherSvr()
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CMercenaryData {
      /* this+0x0 */ class CSaveAllADBWork::CMercenaryData::COwner m_Owner

  /* this+0x20 */ class CSaveAllADBWork::CMercenaryData::CCharacter m_Character

  public void Init()
  public void CMercenaryData()
  public void ~CMercenaryData()
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CMercenaryData::CCharacter {
  /* this+0x0 */ bool m_bActive
  /* this+0x4 */ struct CMercenaryDBV2::DBINFO m_Info

  /* this+0x2c */ unsigned char[0x200] m_EffectData
  /* this+0x22c */ int m_EffectLength
  /* this+0x230 */ unsigned char[0x200] m_StateData
  /* this+0x430 */ int m_StateLength
  public void Init()
  public void CCharacter()
  public void ~CCharacter()
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CMercenaryData::COwner {
  /* this+0x0 */ struct CPCBattleMercenary::tagDBData m_data

  /* this+0x1c */ bool m_bActive
  public void Init()
  public void COwner()
  public void ~COwner()
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CQuestEventData {
  /* this+0x0 */ bool m_isUpdate
  /* this+0x4 */ int m_length_quest
  /* this+0x8 */ int m_length_hunt
  /* this+0xc */ int m_length_time
  /* this+0x10 */ int m_length_complete
  /* this+0x14 */ unsigned char[0x1f40] m_data_quset
  /* this+0x1f54 */ unsigned char[0x1f40] m_data_hunt
  /* this+0x3e94 */ unsigned char[0x1f40] m_data_time
  /* this+0x5dd4 */ unsigned char[0xfa0] m_data_complete
  public void Init()
  public void CQuestEventData()
  public void ~CQuestEventData()
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CSkill3rdData {
      /* this+0x0 */ class std::vector<CSaveAllADBWork::CSkill3rdData::tagSkill,std::allocator<CSaveAllADBWork::CSkill3rdData::tagSkill> > m_List

  public void Init()
  public void CSkill3rdData(const class CSaveAllADBWork::CSkill3rdData &)
  public void CSkill3rdData()
  public void CSaveAllADBWork::CSkill3rdData::~CSkill3rdData()
  public class CSaveAllADBWork::CSkill3rdData & operator=(const class CSaveAllADBWork::CSkill3rdData &)
  public void * __vecDelDtor(unsigned int)
}

struct CSaveAllADBWork::CSkill3rdData::tagSkill {
  /* this+0x0 */ int ID
  /* this+0x4 */ int Level
  /* this+0x8 */ int RemainMS
  /* this+0xc */ int Data
  public void tagSkill(const int, const int, const int, const int)
}

class CSaveAllADBWork::CStateData {
  /* this+0x0 */ bool m_bActive
  /* this+0x1 */ unsigned char[0x200] m_Data
  /* this+0x204 */ int m_Length
  public void Init()
  public void CStateData()
  public void ~CStateData()
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CStoreItemData {
  /* this+0x0 */ class CItemDBFmtBuffer m_ItemDBFmtBuffer

  /* this+0x14 */ bool m_bActive
  public void Init()
  public void CStoreItemData(class CSaveAllADBWork::CStoreItemData &)
  public void CStoreItemData()
  public void CSaveAllADBWork::CStoreItemData::~CStoreItemData()
  public class CSaveAllADBWork::CStoreItemData & operator=(class CSaveAllADBWork::CStoreItemData &)
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWork::CWarpInfoData {
  public void CSaveAllADBWork::CWarpInfoData::Init()
  public void CSaveAllADBWork::CWarpInfoData::SetWarpInfo(const class std::deque<WARP_POSITION,std::allocator<WARP_POSITION> > &)
  public const class std::vector<WARP_POSITION,std::allocator<WARP_POSITION> > & GetWarpInfo()
  public void CWarpInfoData(const class CSaveAllADBWork::CWarpInfoData &)
  public void CWarpInfoData()
  public void CSaveAllADBWork::CWarpInfoData::~CWarpInfoData()
  /* this+0x0 */ class std::vector<WARP_POSITION,std::allocator<WARP_POSITION> > m_WarpInfo

  public class CSaveAllADBWork::CWarpInfoData & operator=(const class CSaveAllADBWork::CWarpInfoData &)
  public void * __vecDelDtor(unsigned int)
}

class CSaveAllADBWorkStuff::CElementalData {
  /* this+0x0 */ bool m_bExist
  /* this+0x4 */ class ElementalStuff::ESummaryData m_SummaryData

  /* this+0x30 */ class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > m_EfstList

  public void Init()
  public bool isExist()
  public void CElementalData(const class CSaveAllADBWorkStuff::CElementalData &)
  public void CElementalData()
  public void CSaveAllADBWorkStuff::CElementalData::~CElementalData()
  public class CSaveAllADBWorkStuff::CElementalData & operator=(const class CSaveAllADBWorkStuff::CElementalData &)
  public void * __vecDelDtor(unsigned int)
}

class CSaveBattleFieldADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ const unsigned long m_AID
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ enum CSaveBattleFieldADBWork::enumResult m_Result
  /* this+0x20 */ const char m_campID
  /* this+0x22 */ const short m_x
  /* this+0x24 */ const short m_y
  public const unsigned long GetGID()
  public const unsigned long GetAID()
  public const enum CSaveBattleFieldADBWork::enumResult GetResult()
  private bool CSaveBattleFieldADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CSaveBattleFieldADBWork::SaveBattleFieldInfo(class NODBCCtrl &)
  public void CSaveBattleFieldADBWork(const class CSaveBattleFieldADBWork &)
  public void CSaveBattleFieldADBWork::CSaveBattleFieldADBWork(const unsigned long, const unsigned long, const char, const short, const short)
  public void CSaveBattleFieldADBWork::~CSaveBattleFieldADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CSaveBodyItemADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CSaveBodyItemADBWork::enumResult m_Result
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ class CItemDBFmtBuffer m_ItemDBFmtBuffer

  private bool CSaveBodyItemADBWork::ExecQuery(class NODBCCtrl &)
  public void CSaveBodyItemADBWork::Init(const unsigned long, const unsigned long)
  public void CSaveBodyItemADBWork(class CSaveBodyItemADBWork &)
  private void CSaveBodyItemADBWork::CSaveBodyItemADBWork()
  private void CSaveBodyItemADBWork::~CSaveBodyItemADBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CSaveCartADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CSaveCartADBWork::enumResult m_Result
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ unsigned long m_AID
  /* this+0x20 */ class CItemDBFmtBuffer m_ItemDBFmtBuffer

  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const enum CSaveCartADBWork::enumResult GetResult()
  private bool CSaveCartADBWork::ExecQuery(class NODBCCtrl &)
  public void CSaveCartADBWork::Init(const unsigned long, const unsigned long)
  public void CSaveCartADBWork(class CSaveCartADBWork &)
  private void CSaveCartADBWork::CSaveCartADBWork()
  private void CSaveCartADBWork::~CSaveCartADBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CSaveCharacterInfoADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CSaveCharacterInfoADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ struct CHARINFO_TO_CHARACTERDB m_data

  /* this+0xa9 */ char[0x18] m_characterName
  private bool CSaveCharacterInfoADBWork::ExecQuery(class NODBCCtrl &)
  public void CSaveCharacterInfoADBWork(const class CSaveCharacterInfoADBWork &)
  public void CSaveCharacterInfoADBWork::CSaveCharacterInfoADBWork(const unsigned long, const unsigned long)
  public void CSaveCharacterInfoADBWork::~CSaveCharacterInfoADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CSaveEffectiveInfoADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ const unsigned long m_AID
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ enum CSaveEffectiveInfoADBWork::enumResult m_Result
  /* this+0x20 */ unsigned char[0x200] m_Data
  /* this+0x220 */ int m_Length
  private bool ExecQuery(class NODBCCtrl &)
  public void CSaveEffectiveInfoADBWork(const class CSaveEffectiveInfoADBWork &)
  public void CSaveEffectiveInfoADBWork(const unsigned long, const unsigned long)
  public void ~CSaveEffectiveInfoADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CSaveQuestEventDBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ unsigned long m_AID
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ enum CSaveQuestEventDBWork::enumResult m_Result
  /* this+0x20 */ int m_length_quest
  /* this+0x24 */ int m_length_hunt
  /* this+0x28 */ int m_length_time
  /* this+0x2c */ int m_length_complete
  /* this+0x30 */ unsigned char[0x1f40] m_data_quset
  /* this+0x1f70 */ unsigned char[0x1f40] m_data_hunt
  /* this+0x3eb0 */ unsigned char[0x1f40] m_data_time
  /* this+0x5df0 */ unsigned char[0xfa0] m_data_complete
  public const enum CSaveQuestEventDBWork::enumResult GetResult()
  public const unsigned long GetGID()
  public const unsigned long GetAID()
  private bool ExecQuery(class NODBCCtrl &)
  public void Init(const unsigned long, const unsigned long)
  public void CSaveQuestEventDBWork(const class CSaveQuestEventDBWork &)
  private void CSaveQuestEventDBWork()
  private void ~CSaveQuestEventDBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CSaveSkillADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ const unsigned long m_AID
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ enum CSaveSkillADBWork::enumResult m_Result
  /* this+0x20 */ unsigned char[0x200] m_Data
  /* this+0x220 */ int m_Length
  public const unsigned long GetGID()
  public const unsigned long GetAID()
  public const enum CSaveSkillADBWork::enumResult GetResult()
  private bool ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN SaveSkill(class NODBCCtrl &)
  public void CSaveSkillADBWork(const class CSaveSkillADBWork &)
  public void CSaveSkillADBWork(const unsigned long, const unsigned long)
  public void ~CSaveSkillADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CSaveStoreADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CSaveStoreADBWork::enumResult m_Result
  /* this+0x18 */ unsigned long m_GID
  /* this+0x1c */ unsigned long m_AID
  /* this+0x20 */ bool m_bAfterCloseStore
  /* this+0x24 */ class CItemDBFmtBuffer m_ItemDBFmtBuffer

  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const enum CSaveStoreADBWork::enumResult GetResult()
  public bool IsCloseStore()
  private bool CSaveStoreADBWork::ExecQuery(class NODBCCtrl &)
  public void CSaveStoreADBWork::Init(const unsigned long, const unsigned long, const bool)
  public void CSaveStoreADBWork(class CSaveStoreADBWork &)
  private void CSaveStoreADBWork::CSaveStoreADBWork()
  private void CSaveStoreADBWork::~CSaveStoreADBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CScript {
  public void CScript(const class CScript &)
  public void CScript::CScript()
  public void CScript::~CScript()
  public void CScript::Clear()
  public bool CScript::Load(const char *, int)
  public bool CScript::Analyze(int)
  public void CScript::RegisterHandler(class CScriptHandler *)
  public int CScript::GetLineNum()
  public char * CScript::GetLine(int)
  private void CScript::DivideLine()
  private void CScript::RemoveComment()
  /* this+0x0 */ char * m_buf
  /* this+0x4 */ int m_bufSize
  /* this+0x8 */ bool m_comment
  /* this+0xc */ class std::deque<char *,std::allocator<char *> > m_line

  /* this+0x24 */ class CTokenMap m_tokenMap

  /* this+0x34 */ class CScriptHandler * m_handler
  public class CScript & operator=(const class CScript &)
  public void * __vecDelDtor(unsigned int)
}

class CScriptCompiler {
  public void CScriptCompiler::CScriptCompiler()
  public void CScriptCompiler::~CScriptCompiler()
  public bool CScriptCompiler::Init()
  private void CScriptCompiler::Reset()
  private bool CScriptCompiler::InitTokenMap()
  private bool CScriptCompiler::InitItemScript()
  private bool CScriptCompiler::InitNpcScript()
  private bool CScriptCompiler::InitSkillScript()
  private bool CScriptCompiler::InitBuffScript()
  private bool CScriptCompiler::InitDungenNpcScript()
  private bool XoR_NpcScript_Verification()
  private bool CScriptCompiler::SetAsm(char *)
  private bool CScriptCompiler::SetBin(char *)
  private bool CScriptCompiler::LoadEnum(const char *, int)
  private bool CScriptCompiler::LoadDef(char *)
  private bool CScriptCompiler::Run(const char *, int)
  private bool CScriptCompiler::LoadV2()
  private bool CScriptCompiler::StdDefine(char *, int)
  private bool CScriptCompiler::StdDeclare(char *, char *, int, bool)
  private void CScriptCompiler::Error(const char *, <NoType>)
  private void CScriptCompiler::Compelete()
  private struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CScriptCompiler::InitEnum(const char *)
  /* this+0x0 */ class CCompiler * m_compiler
  public void * __vecDelDtor(unsigned int)
}

class CScriptEventHandler {
  CInterpretHandler, offset = 0x0

    public void CScriptEventHandler(const class CScriptEventHandler &)
  public void CScriptEventHandler::CScriptEventHandler()
  public bool CScriptEventHandler::OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  public void CScriptEventHandler::OnError(const char *)
  public void CScriptEventHandler::Free()
  public unsigned int CScriptEventHandler::Proc(bool)
  public void CScriptEventHandler::OnMsg(unsigned long, int, int, int)
  public void CScriptEventHandler::Init(int)
  public int GetOwnerID()
  public bool RunInterpreter(class CBinBuf *, int)
  protected bool CScriptEventHandler::CheckFixedVarNum(class std::deque<TokenData,std::allocator<TokenData> > &, int)
  protected void CScriptEventHandler::BanPlayer()
  protected bool CScriptEventHandler::FuncPutMob(const char *, int, int, int, int, int, int, int, int, int, char *, bool, bool)
  protected bool CScriptEventHandler::FuncGetEquipIsSuccessRefinery(int, struct TokenData &, bool)
  protected bool CScriptEventHandler::FuncResetSkill()
  protected bool CScriptEventHandler::FuncShowImage(char *, int)
  protected bool CScriptEventHandler::FuncPcName(struct TokenData &)
  protected bool CScriptEventHandler::FuncInputStr(struct TokenData &)
  protected bool CScriptEventHandler::FuncBroadcastServer(char *, int, int, int, int, char *)
  protected bool CScriptEventHandler::FuncReadBook(int, int)
  protected bool CScriptEventHandler::FuncGetEquipPercentRefinery(int, struct TokenData &, bool)
  protected bool CScriptEventHandler::FuncGetEquipWeaponLv(int, struct TokenData &)
  protected bool CScriptEventHandler::FuncGetWeaponClass(int, struct TokenData &)
  protected bool CScriptEventHandler::FuncGetEquipSlotAmount(int, struct TokenData &)
  protected bool CScriptEventHandler::FuncSetBuff(const char *, const int, const int, const int, const int)
  protected bool CScriptEventHandler::FuncGetBuffValue(char *, struct TokenData &)
  protected bool CScriptEventHandler::FuncLoudSpeaker(char *, int, int, int, int, char *)
  protected bool CScriptEventHandler::FuncTargetAttackedBuff(int, int, int, char *, int, int)
  protected bool CScriptEventHandler::FuncGetMapName(struct TokenData &)
  protected bool CScriptEventHandler::FuncGetActivatedSkill(struct TokenData &)
  protected bool CScriptEventHandler::FuncGetDeactivatedSkill(struct TokenData &)
  protected bool CScriptEventHandler::FuncIsSuccessRuneUse(int, struct TokenData &)
  protected bool CScriptEventHandler::FuncGetPetRelationship(struct TokenData &)
  protected bool CScriptEventHandler::FuncIsEffectStatus(int, struct TokenData &)
  protected bool CScriptEventHandler::FuncRand(int, int, struct TokenData &)
  protected bool CScriptEventHandler::FuncIsPcCafe(struct TokenData &)
  protected bool CScriptEventHandler::FuncIsPremiumPcCafe(struct TokenData &)
  protected bool CScriptEventHandler::FuncGetExdEquipIsSuccessRefinery(int, bool, struct TokenData &)
  protected bool CScriptEventHandler::FuncDownRefItem(int, int)
  protected bool FuncDownAdvRefItem(int)
  protected bool CScriptEventHandler::FuncSuccessRandomRefItem(int, int, int, bool, struct TokenData &)
  protected bool CScriptEventHandler::FuncPlayBGM(const char *)
  protected bool CScriptEventHandler::FuncStriptPC2(const int)
  protected bool CScriptEventHandler::FuncGetEquipName(int, struct TokenData &)
  protected bool CScriptEventHandler::FuncGetEquipItemIdx(int, struct TokenData &)
  protected bool CScriptEventHandler::FuncSetEffect(const char *, const int)
  protected bool CScriptEventHandler::FuncReSetEffect(const char *)
  protected bool CScriptEventHandler::FuncOpenSearchStorInfo(const int, const int)
  protected bool CScriptEventHandler::FuncSetReadyMutationHomun(struct TokenData &)
  protected bool CScriptEventHandler::FuncMutationHomon(const int, struct TokenData &)
  protected bool CScriptEventHandler::FuncCheckHomunLevel(struct TokenData &)
  protected bool CScriptEventHandler::FuncCheckHomunMutation(struct TokenData &)
  protected bool CScriptEventHandler::FuncCheckHomunCall(struct TokenData &)
  protected bool CScriptEventHandler::FuncResetBuff(const char *)
  protected bool CScriptEventHandler::FuncAddStateEfstATK(const int, const char *, const int, const int, const int)
  protected bool FuncGetItem2(const int, const int, const int, const int)
  protected bool CScriptEventHandler::FuncStartCollection(const int)
  protected bool CScriptEventHandler::FuncMontransform(const int, const int, const char *)
  protected bool CScriptEventHandler::FuncDeleteAllBodyItem()
  protected bool CScriptEventHandler::FuncIncGlobalVar(const char *, const int)
  protected bool CScriptEventHandler::FuncDecGlobalVar(const char *, const int)
  protected bool CScriptEventHandler::FuncGetAgitInvestMsg(struct TokenData &)
  protected bool CScriptEventHandler::FuncGetAgitEconomy(const char *, struct TokenData &)
  protected bool CScriptEventHandler::FuncIncAgitEconomy(const char *, const int)
  protected bool CScriptEventHandler::FuncDecAgitEconomy(const char *, const int)
  protected bool CScriptEventHandler::FuncEQMake(const char *, const int, const int, const int, const int)
  protected bool CScriptEventHandler::FuncEQCheckUser(const char *, const int, struct TokenData &)
  protected bool CScriptEventHandler::FuncEQNotifyAdmission(const char *)
  protected bool CScriptEventHandler::FuncEQIsReady(const char *, struct TokenData &)
  protected bool CScriptEventHandler::FuncEQMoveToRoom(const char *, const char *, const int, const int)
  protected bool CScriptEventHandler::FuncEQReturnToPreSpace(const char *)
  protected bool CScriptEventHandler::FuncEQMoveToLobby(const char *, const char *, const int, struct TokenData &)
  protected bool CScriptEventHandler::FuncLobbyMake(const char *)
  protected bool CScriptEventHandler::FuncLobbyUserCount(const char *, struct TokenData &)
  protected bool CScriptEventHandler::FuncLobbyNotifyAdmission(const char *)
  protected bool CScriptEventHandler::FuncLobbyIsReady(const char *, const int, struct TokenData &)
  protected bool CScriptEventHandler::FuncLobbyMoveToRoom(const char *, const char *, const int, const int)
  protected bool CScriptEventHandler::FuncLobbyReturnToPreSpace(const char *)
  protected bool CScriptEventHandler::FuncLobbyInit(const char *)
  protected bool CScriptEventHandler::FuncActiveMontransform(const int)
  protected bool CScriptEventHandler::FuncDeActiveMontransform(const int)
  protected bool CScriptEventHandler::FuncCheckJobGroup(const int, struct TokenData &)
  protected bool CScriptEventHandler::FuncGetBaseJob(struct TokenData &)
  protected bool CScriptEventHandler::FuncGetCategoryJob(const int, struct TokenData &)
  protected bool CScriptEventHandler::FuncEQJobControl(const char *, const int)
  protected bool CScriptEventHandler::FuncLobbyCampCode(const char *, const char *, const int, const int)
  protected bool CScriptEventHandler::FuncInsertAliveMember()
  protected bool CScriptEventHandler::FuncEQUserInfoInit()
  protected bool CScriptEventHandler::FuncIsLowLevelSiegeJob(struct TokenData &)
  protected bool CScriptEventHandler::FuncResetBuffLowLevelSiege()
  protected bool CScriptEventHandler::FuncEQMoveToLobbyJobMatching(const char *, const char *, const char *, struct TokenData &)
  protected bool CScriptEventHandler::FuncGetYear(struct TokenData &)
  protected bool CScriptEventHandler::FuncGetMonth(struct TokenData &)
  protected bool CScriptEventHandler::FuncGetDay(struct TokenData &)
  protected bool CScriptEventHandler::FuncGetWeekDay(struct TokenData &)
  protected bool CScriptEventHandler::FuncStoreV2(const int, const char *)
  protected bool CScriptEventHandler::FuncAddHandicapState_Race(const int, const int, const int, const int)
  protected bool CScriptEventHandler::FuncSetNumDef_Race(const int, const int, const int, const int)
  protected bool CScriptEventHandler::FuncSetNumMDef_Race(const int, const int, const int, const int)
  protected bool CScriptEventHandler::FuncSetPerMDef_Self(const int, const int)
  protected bool CScriptEventHandler::FuncSetPerDef_Self(const int, const int)
  protected bool CScriptEventHandler::FuncSetMHPPerDamage_Race(const int, const int)
  protected bool CScriptEventHandler::FuncSetMSPPerDamage_Race(const int, const int)
  protected bool CScriptEventHandler::FuncMergeItem()
  protected bool CScriptEventHandler::FuncClearDialog(int)
  protected bool CScriptEventHandler::FuncDialog(char *, int)
  protected bool CScriptEventHandler::FuncDialog2(const char * const, const int, const int)
  protected bool CScriptEventHandler::FuncCloseDialog(int)
  protected bool CScriptEventHandler::FuncWaitDialog(int)
  protected bool CScriptEventHandler::FuncWaitDialog2(const int, const int)
  protected bool CScriptEventHandler::FuncDlgWriteStr(int)
  protected bool CScriptEventHandler::FuncMenu(class std::deque<TokenData,std::allocator<TokenData> > &, int)
  protected bool CScriptEventHandler::FuncMapMove(const char *, int, int)
  protected bool CScriptEventHandler::FuncSetEffectStatus(int)
  protected bool CScriptEventHandler::FuncNavigationActive(const char *, const int, const int, const int, const int, const int, const char *)
  protected bool CScriptEventHandler::FuncGetPremiumCampaignGrade(const int, struct TokenData &, int)
  protected class CNPC * CScriptEventHandler::AddNpc(int, const char *, struct NpcSvrNpcInfo *)
  protected void CScriptEventHandler::EventLog(char *, <NoType>)
  private void CScriptEventHandler::Exit()
  private bool CScriptEventHandler::CheckSuspendType(int)
  private void CScriptEventHandler::Suspend(int, int)
  private short CScriptEventHandler::OnItemFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  private short CScriptEventHandler::OnNpcFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  /* this+0x8 */ int m_ownerID
  /* this+0xc */ class CInterpreter m_interpreter

  /* this+0x4c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_inputstr

  /* this+0x68 */ int m_nParamSize
  /* this+0x6c */ int m_suspendType
  /* this+0x70 */ int m_suspendTime
  /* this+0x74 */ bool m_isQuit
  public void CScriptEventHandler::~CScriptEventHandler()
  public class CScriptEventHandler & operator=(const class CScriptEventHandler &)
  public void * __vecDelDtor(unsigned int)
}

class CScriptEventMgr {
    public void CScriptEventMgr::~CScriptEventMgr()
  public void CScriptEventMgr::Process()
  public bool CScriptEventMgr::SendMsg(int, unsigned long, int, int, int)
  public void CScriptEventMgr::AddEvent(class CScriptEventHandler *)
  public void CScriptEventMgr::RemoveEvent(int)
  private void CScriptEventMgr::Reset()
  private int AllocEventNo()
  private class CScriptEventHandler * CScriptEventMgr::GetEvent(int)
  /* this+0x0 */ class std::map<int,CScriptEventHandler *,std::less<int>,std::allocator<std::pair<int const ,CScriptEventHandler *> > > m_events

  public void CScriptEventMgr(const class CScriptEventMgr &)
  public void CScriptEventMgr()
  public class CScriptEventMgr & operator=(const class CScriptEventMgr &)
  public void * __vecDelDtor(unsigned int)
}

class CScriptHandler {
    *
  public void CScriptHandler(const class CScriptHandler &)
  public void CScriptHandler::CScriptHandler()
  public void CScriptHandler::~CScriptHandler()
  public bool OnControl(class CScriptLine &, int)
  public bool OnCommand(class CScriptLine &, int)
  public bool OnFunc(class CScriptLine &, int, char *)
  public bool OnVar(class CScriptLine &, char *)
  public void CScriptHandler::SetTokenMap(class CTokenMap *)
  public bool CScriptHandler::AnalyzeLine(char *)
  /* this+0x4 */ class CTokenMap * m_tokenMap
  protected bool CScriptHandler::AnalyzeParse(char *)
  protected void Error(char *, <NoType>)
  public class CScriptHandler & operator=(const class CScriptHandler &)
  public void * __vecDelDtor(unsigned int)
}

class CScriptHistory {
    *
  public void CScriptHistory(const class CScriptHistory &)
  public void CScriptHistory()
  public void ~CScriptHistory()
  public bool CheckBeforNpcScriptHistory(const char *, const char *)
  public bool Open(const char *)
  public bool SetData(const char *)
  public void EndingMark()
  public void Close()
  protected unsigned long GetFile_Time(const char *)
  /* this+0x4 */ struct _iobuf * m_fp
  public class CScriptHistory & operator=(const class CScriptHistory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CScriptLine {
  public void CScriptLine::CScriptLine(char *)
  public void ~CScriptLine()
  public bool IsEmpty()
  public bool CScriptLine::GetWord(char *, char *)
  public bool GetNum(int &, char *)
  public bool GetFloat(float &, char *)
  public bool CScriptLine::GetOperator(char *, char *)
  public bool CScriptLine::GetParse(char *, char)
  public bool GetParse(char *, char, char)
  public void CScriptLine::Skip(char *)
  public char * GetCur()
  public char * CScriptLine::GetBase()
  /* this+0x0 */ char * m_line
  /* this+0x4 */ char * m_cur
  public void * __vecDelDtor(unsigned int)
}

class CScriptMobTombInfo {
      public bool CScriptMobTombInfo::LoadLuaFIle()
  public static bool CScriptMobTombInfo::CreateInstance()
  public static void CScriptMobTombInfo::DestroyInstance()
  public bool IsCreateInstance()
  public const struct CScriptMobTombInfo::MobTombInfo & GetMobTombInfo()
  public void CScriptMobTombInfo::SetMobTombInfo(const struct CScriptMobTombInfo::MobTombInfo &)
  /* [0x0003:0x0004b284] */ static  class CScriptMobTombInfo * m_cpSelf
  /* this+0x0 */ bool m_bCreateInstance
  /* this+0x4 */ struct CScriptMobTombInfo::MobTombInfo m_MobTombInfo

  /* this+0x74 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_FileName

  public void CScriptMobTombInfo(const class CScriptMobTombInfo &)
  private void CScriptMobTombInfo::CScriptMobTombInfo()
  private void CScriptMobTombInfo::~CScriptMobTombInfo()
  private void * __vecDelDtor(unsigned int)
}

struct CScriptMobTombInfo::MobTombInfo {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > NpcName

  /* this+0x1c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> >[0x3] DialogMsg
  public void MobTombInfo(const struct CScriptMobTombInfo::MobTombInfo &)
  public void CScriptMobTombInfo::MobTombInfo::MobTombInfo()
  public void CScriptMobTombInfo::MobTombInfo::~MobTombInfo()
  public struct CScriptMobTombInfo::MobTombInfo & operator=(const struct CScriptMobTombInfo::MobTombInfo &)
  public void * __vecDelDtor(unsigned int)
}

class CSearchingSSIList {
      public void CSearchingSSIList(const class CSearchingSSIList &)
  public void CSearchingSSIList::CSearchingSSIList()
  public void CSearchingSSIList::~CSearchingSSIList()
  public void CSearchingSSIList::InsertData(const unsigned int, struct SSIListInfo *)
  public void CSearchingSSIList::SearchData(const unsigned int, class std::vector<ResultItemInfo,std::allocator<ResultItemInfo> > &, const int)
  public void CSearchingSSIList::DeleteData(const struct SSIListInfo *)
  public void CSearchingSSIList::DeleteDataFromReqAID(const unsigned int)
  public void CSearchingSSIList::DeleteSearchInfo(const unsigned int)
  public void CSearchingSSIList::SetSearchingInfo(const unsigned int, unsigned char)
  public const unsigned char CSearchingSSIList::GetSearchingStoretype(const unsigned int)
  public const bool CSearchingSSIList::PossibleTime(const unsigned int)
  public const int CSearchingSSIList::GetCurSearchingDataCnt(const unsigned int)
  public void CSearchingSSIList::Sort(const unsigned int)
  public void OutPut()
  /* this+0x0 */ class std::map<unsigned int,std::vector<SSIListInfo *,std::allocator<SSIListInfo *> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<SSIListInfo *,std::allocator<SSIListInfo *> > > > > m_List2

  /* this+0x10 */ class std::map<unsigned int,SearchingInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,SearchingInfo> > > m_SearchingInfoList

  public class CSearchingSSIList & operator=(const class CSearchingSSIList &)
  public void * __vecDelDtor(unsigned int)
}

class CSectionLog {
    *
  public void CSectionLog(const class CSectionLog &)
  protected void CSectionLog::CSectionLog()
  protected void CSectionLog::~CSectionLog()
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_csCriticalError

  /* this+0x1c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_fileName

  protected void CSectionLog::Init(const char *)
  public void CSectionLog::Log(const char *, const int, const char *, <NoType>)
  public class CSectionLog & operator=(const class CSectionLog &)
  public void __local_vftable_ctor_closure()
  protected void * __vecDelDtor(unsigned int)
}

class CSectionMgr {
    *
  public void CSectionMgr(const class CSectionMgr &)
  public void CSectionMgr::CSectionMgr()
  public void CSectionMgr::~CSectionMgr()
  public void CSectionMgr::Init(const char *, int, int, int, const class CMapRes *)
  public class std::vector<CCharacter *,std::allocator<CCharacter *> > * CSectionMgr::GetSectionByCellPos(int, int)
  public int CSectionMgr::GetEmptyPosition(unsigned long, int &, int &)
  public int CSectionMgr::AddCharacter(int, int, class CCharacter *)
  public void CSectionMgr::RemoveCharacter(class CCharacter *)
  public int CSectionMgr::GetTotalSectionSize()
  public int CSectionMgr::MoveCharacter(class std::vector<CCharacter *,std::allocator<CCharacter *> > *, class std::vector<CCharacter *,std::allocator<CCharacter *> > *, class CCharacter *)
  public int MoveChracter(class std::vector<CCharacter *,std::allocator<CCharacter *> > *, class std::_Vector_iterator<std::_Vector_val<CCharacter *,std::allocator<CCharacter *> > > &, int, int, class CCharacter *)
  public void CSectionMgr::GetNeighborhoodSections(int, int, int, struct NEIGHBORHOOD_SECTION *)
  public int CSectionMgr::GetSectionSize()
  public class std::vector<CCharacter *,std::allocator<CCharacter *> > * * CSectionMgr::GetSectionList()
  private int CSectionMgr::IsEmptyPos(unsigned long, int, int)
  private class std::vector<CCharacter *,std::allocator<CCharacter *> > * CSectionMgr::GetSectionListPtr(const int, const int, const int, const int)
  /* this+0x4 */ int m_w
  /* this+0x8 */ int m_h
  /* this+0xc */ int m_scale
  /* this+0x10 */ class std::vector<CCharacter *,std::allocator<CCharacter *> > * * m_sectionList
  /* this+0x14 */ const class CMapRes * m_mapRes
  /* this+0x18 */ char[0x10] m_mapName
  /* this+0x28 */ int m_MaxSectionList
  public class CSectionMgr & operator=(const class CSectionMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSendSpecialItemInfoMsg {
  public void CSendSpecialItemInfoMsg()
  public void ~CSendSpecialItemInfoMsg()
  public void SetCharId(int)
  public void SetItemId(int)
  public void SetEvent(int)
  public int GetCharId()
  public int GetItemId()
  public int GetEvent()
  /* this+0x0 */ int m_nCharId
  /* this+0x4 */ int m_nItemId
  /* this+0x8 */ int m_nEvent
  public void * __vecDelDtor(unsigned int)
}

class CServerInfo {
  CODBC, offset = 0x0

  public int CServerInfo::IsExistColumn()
  public int CServerInfo::Init(const char *, const char *, int, const int)
  public int CServerInfo::GetSvrInfoFromDB(const int, const int)
  public int CServerInfo::GetServerPort(int)
  public void CServerInfo::SetServerPort(int, int)
  public unsigned long CServerInfo::GetServerIPAddr(int)
  public int GetLocalPort()
  public int CServerInfo::GetCharacterServerInfoLength()
  public char * GetCharacterServerInfo()
  public int IsValidServer(unsigned long, int)
  public const char * GetSVRName(const int)
  public int CServerInfo::GetDestinationSID(int)
  public int GetDestinationSID(const int, const int)
  public int GetLocalServerID()
  public int GetServerID(unsigned long, int)
  public int GetServerIDPrivate(unsigned long, int)
  public void GetZServerIDList(int, int &, char *, const int)
  public int GetInterServerID()
  public void GetZoneServerIP(class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > &)
  public void GetZoneServerIPPrivate(class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > &)
  public unsigned long CServerInfo::GetLocalIPAddr(int)
  public bool isSameServerSet(int, int)
  public unsigned long CServerInfo::GetServerPrivateIPAddr(int)
  public int CServerInfo::GetServerPrivatePort(int)
  public void CServerInfo::Set(const int, const bool, const bool)
  public bool CServerInfo::IsActive(const int)
  public const unsigned long GetLocalIP()
  public void SetLocalServerIpAddr(const unsigned long)
  public void CServerInfo(const class CServerInfo &)
  public void CServerInfo::CServerInfo()
  public void CServerInfo::~CServerInfo()
  /* this+0x12 */ int m_localServerType
  /* this+0x16 */ int m_characterServerCount
  /* this+0x1a */ class std::map<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> > > m_serverInfoMap

  /* this+0x2a */ struct _SERVERINFO m_localServerInfo

  /* this+0x98 */ class std::list<int,std::allocator<int> > m_MyServerSet

  /* this+0xa4 */ char[0x400] m_characterServerInfo
  private void CServerInfo::SetCharacterServerInfo()
  private void CharacterServerRegister(class CAcceptor *)
  public class CServerInfo & operator=(const class CServerInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSimpleCashShopScript {
      /* this+0x0 */ class std::map<short,std::vector<CASH_ITEM_LIST2,std::allocator<CASH_ITEM_LIST2> >,std::greater<short>,std::allocator<std::pair<short const ,std::vector<CASH_ITEM_LIST2,std::allocator<CASH_ITEM_LIST2> > > > > m_map

  public bool isOK()
  public void CSimpleCashShopScript::Add(const int, const unsigned short, const int)
  public const class std::vector<CASH_ITEM_LIST2,std::allocator<CASH_ITEM_LIST2> > & CSimpleCashShopScript::GetTab(const int)
  public int CSimpleCashShopScript::GetPrice(const short, const int)
  public static bool CSimpleCashShopScript::CreateInstance()
  public static void CSimpleCashShopScript::DestroyInstance()
  public void CSimpleCashShopScript(const class CSimpleCashShopScript &)
  private void CSimpleCashShopScript::CSimpleCashShopScript()
  private void CSimpleCashShopScript::~CSimpleCashShopScript()
  private bool CSimpleCashShopScript::Create()
  private bool CSimpleCashShopScript::Init()
  /* [0x0003:0x0004b5e8] */ static  class CSimpleCashShopScript * m_cpSelf
  /* this+0x10 */ bool m_bOK
  public class CSimpleCashShopScript & operator=(const class CSimpleCashShopScript &)
  private void * __vecDelDtor(unsigned int)
}

class CSkill {
  CCharacter, offset = 0x0

  public const char * CSkill::GetNamePtr()
  public void CSkill::ModifyDamage_ATKED(class CCharacter *, int &, int, int, int, int)
  public void ModifyDamage(int &, int, int, class CCharacter *, unsigned short)
  public unsigned int GetGroupUniqueID()
  public void CSkill(class CSkill &)
  public void CSkill::CSkill()
  public void CSkill::~CSkill()
  public void CSkill::Init2(const unsigned int, short, short, class CMapRes *, unsigned char, unsigned long, unsigned long, short, unsigned short, int, int, const char)
  public int CSkill::IsTarget(class CCharacter *, unsigned long)
  public unsigned long CSkill::GetState()
  public int CSkill::OnProcess()
  public void CSkill::CheckStateChange()
  public unsigned long CSkill::GetAccountID()
  public void SetTargetAccountID(unsigned long)
  public unsigned long GetTargetAccountID()
  public void CSkill::SetAccountID(unsigned long)
  public int CSkill::OnMsg(class CCharacter *, class CCharacter *, unsigned long, int, int, int, class MSGpar::CVar)
  public void CSkill::InsertCommand(struct COMMAND_QUEUE *)
  public void CSkill::CheckCommandQueue()
  public void CSkill::DisableCommand(unsigned long)
  public bool CSkill::IsMyArea(const int, const int)
  public int CSkill::IsMyArea(class CCharacter *, int)
  public unsigned long CSkill::GetCreatorAID()
  public void CSkill::UpdateSkill(class std::vector<CCharacter *,std::allocator<CCharacter *> > *)
  public void CSkill::NotifyUpdateInfo(class CPC *)
  public void CSkill::NotifyUpdateSkillInfo()
  public void CSkill::OnDisappear()
  public void CSkill::SetWarpMapName(char *)
  public short CSkill::GetxPos()
  public short CSkill::GetyPos()
  public unsigned int GetRadiusRange()
  public int CSkill::GetParameterValue(unsigned short, int &)
  public int CSkill::UpdateParameterValue(unsigned short, int)
  public unsigned short CSkill::GetSKID()
  public void CSkill::SetSKID(unsigned short)
  public void CSkill::SetWarpXPos(short)
  public void CSkill::SetWarpYPos(short)
  public void CSkill::SetExpireTime(unsigned short)
  public int IsVisible()
  public int GetSkillLevel()
  public int IsPossibleCreateSkill(const unsigned long, const unsigned short, const int, const short, const short, class CMapRes * const, unsigned long &)
  public int GetCreatorXPos()
  public int GetCreatorYPos()
  public void CSkill::SetTalkBoxcontents(char *)
  public char * CSkill::GetTalkBoxcontents()
  public void SetTrapState(int)
  public int GetTrapState()
  public int IsTrap()
  public class CCharacter * CSkill::GetMasterCharacter()
  public unsigned long GetExpireTime()
  public static bool CSkill::IsIgnoreLANDPROTECTOR(unsigned short)
  public void CSkill::ProcessTrapTouched(const int, const int)
  public static bool CSkill::IsAvailableReflectDamage(const unsigned short)
  private void CSkill::OnExpired()
  private void CSkill::InitThePCCacheInfo(int)
  private void CSkill::DispatchCommand(int)
  /* this+0x378 */ char[0x18] m_Name
  /* this+0x390 */ unsigned long m_AID
  /* this+0x394 */ int m_mapID
  /* this+0x398 */ unsigned short m_SKID
  /* this+0x39a */ unsigned short m_reactSKID
  /* this+0x39c */ struct SKILL_INFO m_skillInfo

  /* this+0x3d4 */ struct SKILL_TIME_INFO m_skillTimeInfo

  /* this+0x3d8 */ int m_warpSize
  /* this+0x3dc */ int m_expiredCount
  /* this+0x3e0 */ short m_warpXPos
  /* this+0x3e2 */ short m_warpYPos
  /* this+0x3e4 */ char[0x10] m_warpMapName
  /* this+0x3f4 */ int m_property
  /* this+0x3f8 */ int m_trapState
  /* this+0x3fc */ class CCharacter * m_master
  /* this+0x400 */ unsigned long m_targetAID
  /* this+0x404 */ char[0x50] m_talkBoxContents
  /* this+0x454 */ int m_fireWallIndex
  /* this+0x458 */ int m_visible
  /* this+0x45c */ unsigned int m_GroupUniqueID
  /* this+0x460 */ unsigned int m_RadiusRange
  private void CSkill::UpdateNeighborhood()
  private void CSkill::ProcessNeighborhood()
  private void CSkill::ProcessCollision()
  private void CSkill::ProcessWarpPortal()
          /* this+0x464 */ struct CSkill::tagPVAR_AB_EPICLESIS m_PVAR_AB_EPICLESIS

  /* this+0x464 */ struct CSkill::tagPVAR_GC_POISONSMOKE m_PVAR_GC_POISONSMOKE

  /* this+0x464 */ struct CSkill::tagPVAR_WL_EARTHSTRAIN m_PVAR_WL_EARTHSTRAIN

  /* this+0x464 */ struct CSkill::tagPVAR_KO_ZENKAI m_PVAR_KO_ZENKAI

  private void CSkill::OnProcess_AB_EPICLESIS()
  private void CSkill::OnProcess_WL_EARTHSTRAIN()
  public class CMyRect CSkill::GetArea()
  public void CSkill::GN_WALLOFTHORN_fire()
  private void CSkill::OnProcess_SC_FEINTBOMB()
  private void CSkill::OnProcess_WM_SEVERE_RAINSTORM()
  public class CSkill & operator=(class CSkill &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSkill3rdDeleteADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CSkill3rdDeleteADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ const unsigned long m_AID
  /* this+0x20 */ const int m_SKID
  private bool CSkill3rdDeleteADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CSkill3rdDeleteADBWork::Skill3rd_Delete(class NODBCCtrl &, const int, const int)
  public void CSkill3rdDeleteADBWork(const class CSkill3rdDeleteADBWork &)
  public void CSkill3rdDeleteADBWork::CSkill3rdDeleteADBWork(const unsigned long, const unsigned long, const int)
  public void CSkill3rdDeleteADBWork::~CSkill3rdDeleteADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CSkill3rdResetADBWork {
  NAsyncDBWork, offset = 0x0

      /* this+0x14 */ enum CSkill3rdResetADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_AID
  /* this+0x1c */ const unsigned long m_GID
  /* this+0x20 */ const enum CSkill3rdResetADBWork::enumAfterAction m_AfterAction
  private bool CSkill3rdResetADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CSkill3rdResetADBWork::Skill3rd_Delete(class NODBCCtrl &, const int)
  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const enum CSkill3rdResetADBWork::enumAfterAction GetAfterAction()
  public const enum CSkill3rdResetADBWork::enumResult GetResult()
  public void CSkill3rdResetADBWork(const class CSkill3rdResetADBWork &)
  public void CSkill3rdResetADBWork::CSkill3rdResetADBWork(const unsigned long, const unsigned long, const enum CSkill3rdResetADBWork::enumAfterAction)
  public void CSkill3rdResetADBWork::~CSkill3rdResetADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CSkill3rdUpdateADBWork {
  NAsyncDBWork, offset = 0x0

      /* this+0x14 */ enum CSkill3rdUpdateADBWork::enumResult m_Result
  /* this+0x18 */ const enum CSkill3rdUpdateADBWork::enumAferAction m_AfterAction
  /* this+0x1c */ const unsigned long m_GID
  /* this+0x20 */ const unsigned long m_AID
  /* this+0x24 */ int m_ID
  /* this+0x28 */ int m_Level
  /* this+0x2c */ int m_RemainMS
  /* this+0x30 */ int m_Attr
  /* this+0x34 */ int m_Data
  public void CSkill3rdUpdateADBWork::Init(const int, const int, const int, const int, const int)
  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const enum CSkill3rdUpdateADBWork::enumAferAction GetAfterAction()
  public const int GetSkillID()
  public const enum CSkill3rdUpdateADBWork::enumResult GetResult()
  private bool CSkill3rdUpdateADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN Insert(class NODBCCtrl &, const int, const int, const int, const int)
  public void CSkill3rdUpdateADBWork(const class CSkill3rdUpdateADBWork &)
  public void CSkill3rdUpdateADBWork::CSkill3rdUpdateADBWork(const unsigned long, const unsigned long, enum CSkill3rdUpdateADBWork::enumAferAction)
  public void CSkill3rdUpdateADBWork::~CSkill3rdUpdateADBWork()
  public void * __vecDelDtor(unsigned int)
}

struct CSkill::tagPVAR_AB_EPICLESIS {
    /* this+0x0 */ enum CSkill::tagPVAR_AB_EPICLESIS::enumStep step
  /* this+0x4 */ unsigned long changeTM
}

struct CSkill::tagPVAR_GC_POISONSMOKE {
  /* this+0x0 */ int poisoningweaponType
  /* this+0x4 */ unsigned long changeTM
}

struct CSkill::tagPVAR_KO_ZENKAI {
  /* this+0x0 */ unsigned long changeTM
}

struct CSkill::tagPVAR_WL_EARTHSTRAIN {
  /* this+0x0 */ int moveCnt
  /* this+0x4 */ int movedx
  /* this+0x8 */ int movedy
  /* this+0xc */ unsigned long CellReachTM
  /* this+0x10 */ int CellMoveTM
}

class CSkillLog {
  CDatabaseLog<SSKILLLOG *>, offset = 0x0

  public void CSkillLog::AddSkillLog(class CPC *, unsigned long, unsigned long, unsigned long)
  public void CSkillLog::ConnectToDatabase(const char *)
  private int CSkillLog::SaveToDatabase(void *, struct SSKILLLOG *)
  public void CSkillLog(const class CSkillLog &)
  public void CSkillLog()
  public void ~CSkillLog()
  public class CSkillLog & operator=(const class CSkillLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSkillScriptHandler {
  CScriptEventHandler, offset = 0x0

  public void CSkillScriptHandler(const class CSkillScriptHandler &)
  public void CSkillScriptHandler::CSkillScriptHandler()
  public bool CSkillScriptHandler::Run(class CBinBuf *)
  public bool CSkillScriptHandler::OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  public void CSkillScriptHandler::EventLog(char *, <NoType>)
  private bool CSkillScriptHandler::IsDuplicate(int)
  private void * CSkillScriptHandler::GetEventCase()
  private bool CSkillScriptHandler::FuncSetSkill(int)
  private bool CSkillScriptHandler::FuncOnEvent(int)
  private bool CSkillScriptHandler::FuncSkillSplash(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CSkillScriptHandler::FuncSkillCommonIntValue(int, class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CSkillScriptHandler::FuncSkillHandicap(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CSkillScriptHandler::FuncSkillKnockBack(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CSkillScriptHandler::FuncSkillNoDamage()
  private bool CSkillScriptHandler::FuncSkillResetHandicap(class std::deque<TokenData,std::allocator<TokenData> > &)
  private bool CSkillScriptHandler::FuncSkillEventIntValue(int, class std::deque<TokenData,std::allocator<TokenData> > &, const char *)
  private bool CSkillScriptHandler::FuncSkillSetInfo(class std::deque<TokenData,std::allocator<TokenData> > &, function  *)
  private bool CSkillScriptHandler::FuncSkillStringValue(class std::deque<TokenData,std::allocator<TokenData> > &)
  /* this+0x78 */ class CSkillTypeInfo2 * m_skillTypeInfo
  /* this+0x7c */ bool m_isError
  /* this+0x80 */ int m_eventCase
  public void CSkillScriptHandler::~CSkillScriptHandler()
  public class CSkillScriptHandler & operator=(const class CSkillScriptHandler &)
  public void * __vecDelDtor(unsigned int)
}

class CSkillTypeBaseInfo {
    *
  public void CSkillTypeBaseInfo(const class CSkillTypeBaseInfo &)
  public void CSkillTypeBaseInfo::CSkillTypeBaseInfo()
  public void CSkillTypeBaseInfo::~CSkillTypeBaseInfo()
  public void CSkillTypeBaseInfo::SetSKTyepBase()
  public void ClearSKTypeBase()
  public void CSkillTypeBaseInfo::InitGDSkill()
  public void CSkillTypeBaseInfo::InitHomunSkill()
  public void CSkillTypeBaseInfo::InitMercenarySkill()
  public void CSkillTypeBaseInfo::InitElementalSkill()
  public int CSkillTypeBaseInfo::SaveToFile(const char *)
  public void CSkillTypeBaseInfo::AddSkillType(class CSkillTypeInfo *)
  /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > > m_skillName

  /* this+0x14 */ class std::map<unsigned short,CSkillTypeInfo *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CSkillTypeInfo *> > > m_skillTypeInfo

  public class CSkillTypeBaseInfo & operator=(const class CSkillTypeBaseInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSkillTypeInfo {
    *
  public void CSkillTypeInfo(const class CSkillTypeInfo &)
  public void CSkillTypeInfo::CSkillTypeInfo()
  public void CSkillTypeInfo::~CSkillTypeInfo()
  public void Init()
  public void CSkillTypeInfo::SetName(const char *)
  public void SetSKID(unsigned short)
  public void SetType(int)
  public void SetFlag(unsigned long)
  public void SetReferSKRNG(unsigned short)
  public void SetPattern(int)
  public char * GetName()
  public unsigned short GetSKID()
  public int GetType()
  public int GetPattern()
  public int CSkillTypeInfo::GetGNDRange(short)
  public unsigned long GetFlag()
  public unsigned short GetReferSKRNG()
  public int IsEventSkill()
  public void SetEventSkill(int)
  public bool IsNextLevelUpgradable(short, char)
  public short CSkillTypeInfo::GetMaxLevel()
  public int CSkillTypeInfo::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short CSkillTypeInfo::GetSPCost(short)
  public int CSkillTypeInfo::IsAvailableJob(short)
  public short CSkillTypeInfo::GetAttackRange(int)
  public short CSkillTypeInfo::GetPreDelayTime(short)
  public short CSkillTypeInfo::GetPostDelayTM(short)
  public unsigned long CSkillTypeInfo::GetProperty()
  public void CSkillTypeInfo::SetProperty(unsigned long)
  public int IsPossibleDispel()
  public void SetAvailableJobLevel(int, int)
  public int GetAvailableJobLevel()
  public int GetAvailableJobLevel_ValidJob()
  public short CSkillTypeInfo::GetVersion()
  public bool CSkillTypeInfo::IsEnableIgnoreMagicImmune(int)
  public int GetSinglePostDelay(short)
  public int GetGlobalPostDelay(short)
  public void CSkillTypeInfo::SetSinglePostDelay(short, int)
  public void CSkillTypeInfo::SetGlobalPostDelay(short, int)
  public void CSkillTypeInfo::SetCastFixedDelay(short, int)
  public int GetCastFixedDelay(short)
  public void CSkillTypeInfo::SetCastStatDelay(short, int)
  public int GetCastStatDelay(short)
  public int CSkillTypeInfo::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public struct std::pair<bool,int> CSkillTypeInfo::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  /* this+0x4 */ int[0xa] m_singlePostDelay
  /* this+0x2c */ int[0xa] m_globalPostDelay
  /* this+0x54 */ int[0xa] m_castFixedDelay
  /* this+0x7c */ int[0xa] m_castStatDelay
  /* this+0xa4 */ unsigned long m_property
  /* this+0xa8 */ unsigned long m_flag
  /* this+0xac */ unsigned short m_SKID
  /* this+0xae */ unsigned short m_referSKRNG
  /* this+0xb0 */ int m_pattern
  /* this+0xb4 */ int m_isEventSkill
  /* this+0xb8 */ int m_type
  /* this+0xbc */ short m_attackRange
  /* this+0xbe */ char[0x18] m_name
  /* this+0xd8 */ int m_dispel
  /* this+0xdc */ int m_joblevel
  /* this+0xe0 */ int m_joblevel_ValidJob
  /* this+0xe4 */ int m_GNDRange
  public class CSkillTypeInfo & operator=(const class CSkillTypeInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSkillTypeInfo2 {
  CSkillTypeInfo, offset = 0x0

  public void CSkillTypeInfo2(const class CSkillTypeInfo2 &)
  public void CSkillTypeInfo2::CSkillTypeInfo2()
  public void CSkillTypeInfo2::~CSkillTypeInfo2()
  public void CSkillTypeInfo2::Init()
  public short CSkillTypeInfo2::GetMaxLevel()
  public int CSkillTypeInfo2::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short CSkillTypeInfo2::GetAttackRange(int)
  public short CSkillTypeInfo2::GetVersion()
  public short CSkillTypeInfo2::GetSPCost(short)
  public short CSkillTypeInfo2::GetPreDelayTime(short)
  public short CSkillTypeInfo2::GetPostDelayTM(short)
  public void SetMaxLevel(int)
  public int CSkillTypeInfo2::GetHitPercent(int)
  public int CSkillTypeInfo2::GetATKPercent(int)
  public int CSkillTypeInfo2::GetData(int, int)
  public void CSkillTypeInfo2::GetSplashRange(int, int &, int &)
  public int CSkillTypeInfo2::GetSplashRange(int)
  public void * CSkillTypeInfo2::GetInfo(unsigned long)
  /* this+0xe8 */ unsigned char m_maxLevel
  /* this+0xec */ class std::map<unsigned long,void *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,void *> > > m_infoMap

  public class CSkillTypeInfo2 & operator=(const class CSkillTypeInfo2 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSkillTypeInfoMgr {
  CSkillTypeBaseInfo, offset = 0x0

  public void CSkillTypeInfoMgr(const class CSkillTypeInfoMgr &)
  public void CSkillTypeInfoMgr::CSkillTypeInfoMgr()
  public void CSkillTypeInfoMgr::~CSkillTypeInfoMgr()
  public void CSkillTypeInfoMgr::Init()
  public void CSkillTypeInfoMgr::Reset()
  public unsigned short CSkillTypeInfoMgr::GetSKID(const char *)
  public void CSkillTypeInfoMgr::LoadSKInfoFromDB()
  public int CSkillTypeInfoMgr::SendMsg(class CCharacter *, int, int, int, int, int, class MSGpar::CVar)
  public class CSkillTypeInfo * CSkillTypeInfoMgr::SearchSkillTypeInfo(const unsigned short)
  public short CSkillTypeInfoMgr::GetSkillSPCost(unsigned short, short)
  public char * CSkillTypeInfoMgr::GetSkillName(unsigned short)
  public bool CSkillTypeInfoMgr::IsNextLevelUpgradable(unsigned short, short, short)
  public int IsChangeStatusSkill(unsigned short)
  public int GetIndexGroundSkill(unsigned short)
  public int CSkillTypeInfoMgr::GetSkillPattern(unsigned short)
  public int CSkillTypeInfoMgr::GetSKClass(const int)
  public void CSkillTypeInfoMgr::AddSkill(class CCharacter *, short)
  public void CSkillTypeInfoMgr::AddSkill_Homun(class CCharacter *, short)
  public void AddSkill_Merce(class CCharacter *, short)
  public int CSkillTypeInfoMgr::GetType(unsigned short)
  public short CSkillTypeInfoMgr::GetAttackRange(unsigned short, int)
  public int CSkillTypeInfoMgr::GetProperty(unsigned short)
  public void RegisterSkillName(char *)
  public int CSkillTypeInfoMgr::IsAvailableJob(short, unsigned short)
  public short IsAvailable_Merce(short, unsigned short)
  public int CSkillTypeInfoMgr::IsConditionalSkill(short, unsigned short)
  public int CSkillTypeInfoMgr::IsConditionSkill_HO(short, unsigned short)
  public int CSkillTypeInfoMgr::IsGuildSkill(int)
  public class std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > * CSkillTypeInfoMgr::GetLowerSkillTreeInfo(short, unsigned short)
  public void CSkillTypeInfoMgr::InheritFirstJobSkill(short, short)
  public void CSkillTypeInfoMgr::InheritPreJobSkill_HO(short, short)
  public class std::map<unsigned short,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > > > > * CSkillTypeInfoMgr::GetAllAvailableSkill(short)
  public int CSkillTypeInfoMgr::IsSkillCategory(unsigned short, int)
  public short GetPostDelayTM(unsigned short, short)
  public unsigned long CSkillTypeInfoMgr::GetFlag(unsigned short)
  public bool CSkillTypeInfoMgr::InitSkillScript()
  public void CSkillTypeInfoMgr::LoadSkillDelay(const char *, function  *)
  public int CSkillTypeInfoMgr::GetSkillSinglePostDelay(unsigned short, int)
  public int CSkillTypeInfoMgr::GetSkillGlobalPostDelay(unsigned short, int)
  public bool CSkillTypeInfoMgr::GetSkillTypeInfo2_SkillData(unsigned short, unsigned long, short, int &)
  private void CSkillTypeInfoMgr::LoadSkillTree(const char *)
  private int CSkillTypeInfoMgr::LoadGDSkillTree()
  private int CSkillTypeInfoMgr::LoadSKTree_Homun(const char *)
  private int CSkillTypeInfoMgr::LoadSKTree_Merce(const char *)
  /* this+0x24 */ class std::map<short,std::map<unsigned short,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > > > >,std::less<short>,std::allocator<std::pair<short const ,std::map<unsigned short,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > > > > > > > m_skillTreeInfo

  /* this+0x34 */ class std::map<unsigned short,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > > > > m_GDSkillTreeInfo

  /* this+0x44 */ class std::map<short,std::map<unsigned short,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > > > >,std::less<short>,std::allocator<std::pair<short const ,std::map<unsigned short,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > > > > > > > m_SKTree_Homun

  /* this+0x54 */ class std::map<short,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > >,std::less<short>,std::allocator<std::pair<short const ,std::map<unsigned short,int,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,int> > > > > > m_SKTree_Merce

  public int CSkillTypeInfoMgr::GetCLevel_SKTreeHomun(const short, const unsigned short)
      /* this+0x64 */ class std::multimap<short,CSkillTypeInfoMgr::SKID_CLEVEL,std::less<short>,std::allocator<std::pair<short const ,CSkillTypeInfoMgr::SKID_CLEVEL> > > m_SKTree_Homun_ByCLevel

  public class CSkillTypeInfoMgr & operator=(const class CSkillTypeInfoMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CSkillTypeInfoMgr::SKID_CLEVEL {
  /* this+0x0 */ unsigned short SKID
  /* this+0x2 */ short cLevel
  public void SKID_CLEVEL(const unsigned short, const short)
}

class CSkillTypeInfo_ThirdJob_Attack {
  CSkillTypeInfo2, offset = 0x0

  public int CSkillTypeInfo_ThirdJob_Attack::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void CSkillTypeInfo_ThirdJob_Attack(const class CSkillTypeInfo_ThirdJob_Attack &)
  public void CSkillTypeInfo_ThirdJob_Attack::CSkillTypeInfo_ThirdJob_Attack()
  public void CSkillTypeInfo_ThirdJob_Attack::~CSkillTypeInfo_ThirdJob_Attack()
  public class CSkillTypeInfo_ThirdJob_Attack & operator=(const class CSkillTypeInfo_ThirdJob_Attack &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSkillTypeInfo_ThirdJob_Ground {
  CSkillTypeInfo2, offset = 0x0

  public int CSkillTypeInfo_ThirdJob_Ground::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void CSkillTypeInfo_ThirdJob_Ground(const class CSkillTypeInfo_ThirdJob_Ground &)
  public void CSkillTypeInfo_ThirdJob_Ground()
  public void CSkillTypeInfo_ThirdJob_Ground::~CSkillTypeInfo_ThirdJob_Ground()
  public class CSkillTypeInfo_ThirdJob_Ground & operator=(const class CSkillTypeInfo_ThirdJob_Ground &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSkillTypeInfo_ThirdJob_Operate {
  CSkillTypeInfo2, offset = 0x0

  public int CSkillTypeInfo_ThirdJob_Operate::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void CSkillTypeInfo_ThirdJob_Operate(const class CSkillTypeInfo_ThirdJob_Operate &)
  public void CSkillTypeInfo_ThirdJob_Operate::CSkillTypeInfo_ThirdJob_Operate()
  public void CSkillTypeInfo_ThirdJob_Operate::~CSkillTypeInfo_ThirdJob_Operate()
  public class CSkillTypeInfo_ThirdJob_Operate & operator=(const class CSkillTypeInfo_ThirdJob_Operate &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSpecialItem {
    *
  public void CSpecialItem(const class CSpecialItem &)
  public void CSpecialItem::CSpecialItem()
  public void CSpecialItem::~CSpecialItem()
  public struct SpecialItemEvent * CSpecialItem::CreateEventA(int, int)
  public bool CSpecialItem::DestroyEvent(int)
  public bool CSpecialItem::GetEvent(int, struct SpecialItemEvent * &)
  /* this+0x4 */ class std::map<int,SpecialItemEvent *,std::less<int>,std::allocator<std::pair<int const ,SpecialItemEvent *> > > m_eventMap

  public class CSpecialItem & operator=(const class CSpecialItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSpecialItemMgr {
    *
  public void CSpecialItemMgr(const class CSpecialItemMgr &)
  public void CSpecialItemMgr::CSpecialItemMgr()
  public void CSpecialItemMgr::~CSpecialItemMgr()
  public bool CSpecialItemMgr::Init()
  public bool CSpecialItemMgr::Run(int, int, int, int, const unsigned int)
  public void CSpecialItemMgr::SendMsg(unsigned long, unsigned long, unsigned long, short)
  public bool CSpecialItemMgr::GetItemSpecialStatus(class CSendSpecialItemInfoMsg *, class CReceiveSpecialItemInfoMsg *, const unsigned int)
  public void SetScanItem(char *)
  public void SetScanEvent(int)
  public void SetItemParam(int *, int)
  public void SetRetItemFunc(int, int)
  public void SetRetItemParam(int *, int)
  public int GetItemFuncIdx()
  public void AddItemFuncIdx()
  private bool CSpecialItemMgr::GetItem(int, class CSpecialItem * &)
  private class CSpecialItem * CSpecialItemMgr::CreateItem(int)
  private bool CSpecialItemMgr::AddEvent(int, int, int)
  private bool CSpecialItemMgr::RunEvent(int, int, int, const unsigned int)
  /* this+0x4 */ class CBinBuf m_binBuf

  /* this+0xc */ class std::map<int,CSpecialItem *,std::less<int>,std::allocator<std::pair<int const ,CSpecialItem *> > > m_itemMap

  /* this+0x1c */ char * m_strScanItem
  /* this+0x20 */ int m_nScanItem
  /* this+0x24 */ int m_nScanEvent
  /* this+0x28 */ int[0xa] m_nItemParam
  /* this+0x50 */ int m_nItemFuncIdx
  /* this+0x54 */ int[0xa] m_nRetItemFunc
  /* this+0x7c */ int[0xa][0xa] m_nRetItemFuncParam
  /* this+0x20c */ int m_nIndex
  public class CSpecialItemMgr & operator=(const class CSpecialItemMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSpecialItemScanner {
  CInterpretHandler, offset = 0x0

  public void CSpecialItemScanner(const class CSpecialItemScanner &)
  public void CSpecialItemScanner::CSpecialItemScanner(class CSpecialItemMgr *, class CBinBuf *)
  public void CSpecialItemScanner::~CSpecialItemScanner()
  public bool CSpecialItemScanner::Run()
  private bool CSpecialItemScanner::OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  private void CSpecialItemScanner::OnError(const char *)
  private bool CSpecialItemScanner::FuncItem(int, bool)
  /* this+0x8 */ class CInterpreter m_interpreter

  /* this+0x48 */ bool m_isError
  /* this+0x4c */ struct SpecialItemEvent * m_event
  /* this+0x50 */ class CSpecialItem * m_item
  /* this+0x54 */ class CSpecialItemMgr * m_itemMgr
  /* this+0x58 */ char * m_strScanItem
  /* this+0x5c */ int m_nScanEvent
  /* this+0x60 */ int[0xa] m_nItemParam
  /* this+0x88 */ int m_nRetItemFunc
  /* this+0x8c */ int[0xa] m_nRetItemFuncParam
  /* this+0xb4 */ bool m_bFindItem
  /* this+0xb5 */ bool m_bFindEvent
  /* this+0xb6 */ unsigned short m_currentItemID
  public class CSpecialItemScanner & operator=(const class CSpecialItemScanner &)
  public void * __vecDelDtor(unsigned int)
}

class CSplashCellPosInfo {
  /* this+0x0 */ int m_x
  /* this+0x4 */ int m_y
  /* this+0x8 */ bool m_bCheck
  public void CSplashCellPosInfo(const int, const int, const bool)
}

class CStackDumpLog {
    *
  /* this+0x4 */ bool m_bSymbolReady
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS

  private void CStackDumpLog::WriteStack(struct _iobuf *)
  public void CStackDumpLog::WriteFmt(const char *, const int, const char *, <NoType>)
  public void CStackDumpLog::Write(const char *, const int, const char *)
  public void CStackDumpLog(const class CStackDumpLog &)
  public void CStackDumpLog::CStackDumpLog()
  public void CStackDumpLog::~CStackDumpLog()
  public class CStackDumpLog & operator=(const class CStackDumpLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CStaticNPCAID {
    *
  public void CStaticNPCAID(const class CStaticNPCAID &)
  public void CStaticNPCAID(const int)
  public void CStaticNPCAID::~CStaticNPCAID()
  public int Release()
  public int operator int()
  /* this+0x4 */ int m_AID
  public class CStaticNPCAID & operator=(const class CStaticNPCAID &)
  public void * __vecDelDtor(unsigned int)
}

class CStaticNPCAIDGenerator {
    *
  public bool IsOk()
  public void CStaticNPCAIDGenerator::Free(const int)
  public int CStaticNPCAIDGenerator::Alloc()
  public static bool CStaticNPCAIDGenerator::CreateInstance(const int, const int)
  public static void CStaticNPCAIDGenerator::DestroyInsance()
  public void CStaticNPCAIDGenerator(const class CStaticNPCAIDGenerator &)
  private void CStaticNPCAIDGenerator::CStaticNPCAIDGenerator(const int, const int)
  private void CStaticNPCAIDGenerator::~CStaticNPCAIDGenerator()
  /* [0x0003:0x0004b278] */ static  class CStaticNPCAIDGenerator * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ const unsigned long m_MinimumAID
  /* this+0xc */ const unsigned long m_MaximumAID
  /* this+0x10 */ class std::list<int,std::allocator<int> > m_AIDPool

  private void * __vecDelDtor(unsigned int)
}

class CStaticNpcMgr {
  CNpcMgr, offset = 0x0

  public void CStaticNpcMgr(const class CStaticNpcMgr &)
  public void CStaticNpcMgr::CStaticNpcMgr()
  public void CStaticNpcMgr::~CStaticNpcMgr()
  public class CStaticNpcMgr & operator=(const class CStaticNpcMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CStatpointPerLevel {
    *
  public void CStatpointPerLevel(const class CStatpointPerLevel &)
  public void CStatpointPerLevel::CStatpointPerLevel()
  public void CStatpointPerLevel::~CStatpointPerLevel()
  public void CStatpointPerLevel::Init()
  public int CStatpointPerLevel::LoadStatpointPerLevel()
  public int GetStatpointPerLevel(int)
  /* this+0x4 */ int[0x97] m_statpointPerLevel
  /* [0x0003:0x00009c1c] */ static  const char * m_szpLoadFileName
  public class CStatpointPerLevel & operator=(const class CStatpointPerLevel &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CStatusLog {
  CDatabaseLog<SSTATUSLOG *>, offset = 0x0

  public void CStatusLog::AddStatusLog(class CCharacter *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
  public void CStatusLog::ConnectToDatabase(const char *)
  private int CStatusLog::SaveToDatabase(void *, struct SSTATUSLOG *)
  public void CStatusLog(const class CStatusLog &)
  public void CStatusLog()
  public void ~CStatusLog()
  public class CStatusLog & operator=(const class CStatusLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CStatusPlusInfoByJLV {
    *
  public void CStatusPlusInfoByJLV(const class CStatusPlusInfoByJLV &)
  public void CStatusPlusInfoByJLV::CStatusPlusInfoByJLV()
  public void CStatusPlusInfoByJLV::~CStatusPlusInfoByJLV()
  public void CStatusPlusInfoByJLV::Init()
  public struct STATUS * CStatusPlusInfoByJLV::GetResultPlusStatusInfo(unsigned long, unsigned char, const int)
  private void CStatusPlusInfoByJLV::LoadScript()
  private int CStatusPlusInfoByJLV::GetStatEnum(const char *)
  private void CStatusPlusInfoByJLV::CalculateResult()
  /* this+0x4 */ class std::map<unsigned long,std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > > > > m_statusInfo

  /* this+0x14 */ class std::map<unsigned long,std::map<int,STATUS,std::less<int>,std::allocator<std::pair<int const ,STATUS> > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::map<int,STATUS,std::less<int>,std::allocator<std::pair<int const ,STATUS> > > > > > m_TotalStatusInfo

  /* this+0x24 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > > m_statID

  public class CStatusPlusInfoByJLV & operator=(const class CStatusPlusInfoByJLV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CStorePasswordDB {
  CODBC, offset = 0x0

  public void CStorePasswordDB(const class CStorePasswordDB &)
  public void CStorePasswordDB::CStorePasswordDB()
  public void CStorePasswordDB::~CStorePasswordDB()
  public int CStorePasswordDB::GetStorePassword(int, struct _STORE_PASSWORD_INFO &)
  public int CStorePasswordDB::UpdateStorePassword(int, struct _STORE_PASSWORD_INFO &)
  public int CStorePasswordDB::GetCashPassword(int, struct _CASHSHOP_PASSWORD_INFO &)
  public int CStorePasswordDB::UpdateCashPassword(int, struct _CASHSHOP_PASSWORD_INFO &)
  private int CStorePasswordDB::InsertStorePassword(int)
  private int CStorePasswordDB::InsertCashPassword(int)
  public class CStorePasswordDB & operator=(const class CStorePasswordDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CSummonItemTable {
  CMatchTable, offset = 0x0

  public int CSummonItemTable::StringToKey(char *)
  public int CSummonItemTable::StringToDest(char *)
  public void CSummonItemTable(const class CSummonItemTable &)
  public void CSummonItemTable()
  public void ~CSummonItemTable()
  public class CSummonItemTable & operator=(const class CSummonItemTable &)
  public void * __vecDelDtor(unsigned int)
}

class CSummonMobBySkillTable {
  CMatchTable, offset = 0x0

  public int CSummonMobBySkillTable::StringToKey(char *)
  public int CSummonMobBySkillTable::StringToDest(char *)
  public void CSummonMobBySkillTable(const class CSummonMobBySkillTable &)
  public void CSummonMobBySkillTable()
  public void ~CSummonMobBySkillTable()
  public class CSummonMobBySkillTable & operator=(const class CSummonMobBySkillTable &)
  public void * __vecDelDtor(unsigned int)
}

class CSummonMonsterTable {
      public void CSummonMonsterTable(const class CSummonMonsterTable &)
  public void CSummonMonsterTable::CSummonMonsterTable()
  public void CSummonMonsterTable::~CSummonMonsterTable()
  public void CSummonMonsterTable::LoadFromFile(const char *)
  public bool CSummonMonsterTable::GetRandomMatch(int, int &, int &)
  /* this+0x0 */ class std::map<int,std::vector<CSummonMonsterTable::SUMMON_MONSTER_INFO,std::allocator<CSummonMonsterTable::SUMMON_MONSTER_INFO> > *,std::less<int>,std::allocator<std::pair<int const ,std::vector<CSummonMonsterTable::SUMMON_MONSTER_INFO,std::allocator<CSummonMonsterTable::SUMMON_MONSTER_INFO> > *> > > m_matchMap

  public class CSummonMonsterTable & operator=(const class CSummonMonsterTable &)
  public void * __vecDelDtor(unsigned int)
}

struct CSummonMonsterTable::SUMMON_MONSTER_INFO {
  /* this+0x0 */ int monsterType
  /* this+0x4 */ int monsterAI
}

class CSvrIO {
    *
  public void CSvrIO(const class CSvrIO &)
  public void CSvrIO(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void ~CSvrIO()
  public int Init(unsigned long, short, class CPacketHandler *)
  public int ProcMsg()
  public int OnProcess()
  public void Send(int, const char *)
  public void OnClose()
    public const bool isOnline()
  public class CAsyncStream & GetAsyncStream()
  public unsigned int GetThreadID()
  public void * GetThreadHandle()
  /* this+0x4 */ class CPacketHandler * m_packetHandler
  /* this+0x8 */ void * m_hThread
    /* this+0xc */ class NPollTimer m_AuthTimer

  protected void OnCustomInit()
    protected int Connect()
  /* this+0x1c */ class CConnector m_connector

  /* this+0x20 */ class CAsyncStream m_asyncStream

  /* this+0x50f4 */ unsigned int m_connectThreadID
  /* this+0x50f8 */ unsigned long m_ip
  /* this+0x50fc */ short m_port
  /* this+0x5100 */ class CSvrIO::COnline m_isOnline

  /* this+0x511c */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_RemoteServerName

  public void * __vecDelDtor(unsigned int)
}

class CSvrIO::COnline {
  /* this+0x0 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x18 */ bool m_isOnline
  public bool operator bool()
  public bool operator==(bool)
  public bool operator!=(bool)
  public void COnline()
  public void ~COnline()
  public void * __vecDelDtor(unsigned int)
}

class CTestButton {
  /* this+0x0 */ struct HWND__ * m_hWnd
  /* this+0x4 */ struct HMENU__ * const m_hMenu
  /* this+0x8 */ int m_X
  /* this+0xc */ int m_Y
  /* this+0x10 */ int m_Width
  /* this+0x14 */ int m_Height
  public void CTestButton::OnCreate(struct HWND__ *, struct HINSTANCE__ *, const int, const int, const int, const int, const char *)
  public void EnableWindow(const bool)
  public bool IsWindowEnabled()
  public int GetX()
  public int GetWidth()
  public int GetY()
  public void CTestButton::CTestButton(struct HMENU__ * const)
  public void ~CTestButton()
  public void * __vecDelDtor(unsigned int)
}

class CThreadAffinityMgr {
    *
  public bool isOK()
  public unsigned long CThreadAffinityMgr::GetThreadAffinityMask()
  public static bool CThreadAffinityMgr::CreateInstance()
  public static void CThreadAffinityMgr::DestroyInstance()
  private void CThreadAffinityMgr(const class CThreadAffinityMgr &)
  private void CThreadAffinityMgr::CThreadAffinityMgr()
  private void CThreadAffinityMgr::~CThreadAffinityMgr()
  private class CThreadAffinityMgr & operator=(const class CThreadAffinityMgr &)
  /* [0x0003:0x0004b2d0] */ static  class CThreadAffinityMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ void * m_hMutex
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CTimeList {
    *
  public void CTimeList(const class CTimeList &)
  public void CTimeList::CTimeList()
  public void CTimeList::~CTimeList()
  public bool CTimeList::IsTimeListFull()
  public long CTimeList::FindTimeList(int)
  public int CTimeList::AddTimeList(int)
  public bool CTimeList::DeleteTimeList(int)
  public bool CTimeList::SetTimeList(int, int)
  public void CTimeList::ClearTimeList()
  public int CTimeList::ReadBinary(unsigned char *, int)
  public int CTimeList::WriteBinary(unsigned char *, int &)
  public void CTimeList::DisplayTimeList(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
    /* this+0x4 */ class std::map<int,long,std::less<int>,std::allocator<std::pair<int const ,long> > > m_index2Time

  public class CTimeList & operator=(const class CTimeList &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CTokenMap {
  public void CTokenMap(const class CTokenMap &)
  public void CTokenMap::CTokenMap()
  public void CTokenMap::~CTokenMap()
  public void Set(const char *, struct TokenInfo &)
  public void CTokenMap::Set(const char *, int, int, char *)
  public bool CTokenMap::Get(const char *, struct TokenInfo * &)
  /* this+0x0 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,TokenInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,TokenInfo> > > m_tokenMap

  public class CTokenMap & operator=(const class CTokenMap &)
  public void * __vecDelDtor(unsigned int)
}

class CTranscendentJobADBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ enum CTranscendentJobADBWork::enumResult m_Result
  /* this+0x18 */ const unsigned long m_GID
  /* this+0x1c */ const unsigned long m_AID
  private bool CTranscendentJobADBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CTranscendentJobADBWork::Transcendent(class NODBCCtrl &, const int)
  public const unsigned long GetAID()
  public const unsigned long GetGID()
  public const enum CTranscendentJobADBWork::enumResult GetResult()
  public void CTranscendentJobADBWork(const class CTranscendentJobADBWork &)
  public void CTranscendentJobADBWork::CTranscendentJobADBWork(const unsigned long, const unsigned long)
  public void CTranscendentJobADBWork::~CTranscendentJobADBWork()
  public void * __vecDelDtor(unsigned int)
}

class CUIDGenerator {
    *
  public __int64 CUIDGenerator::Get()
  public bool CUIDGenerator::isOK()
  public bool CUIDGenerator::Init()
  public static bool CUIDGenerator::CreateInstance()
  public static void CUIDGenerator::DestroyInstance()
  private bool CUIDGenerator::LoadBootingSequenceNum()
  private void CUIDGenerator(const class CUIDGenerator &)
  private void CUIDGenerator::CUIDGenerator()
  private class CUIDGenerator & operator=(class CUIDGenerator &)
  private void CUIDGenerator::~CUIDGenerator()
    /* this+0x4 */ unsigned int m_ServerBootSequeceNum
  /* this+0x8 */ unsigned int m_SequenceNum
  /* this+0xc */ bool m_bOK
  /* [0x0003:0x0004b5ec] */ static  class CUIDGenerator * m_cpSelf
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CUpdateQuestDBWork {
  NAsyncDBWork, offset = 0x0

    /* this+0x14 */ unsigned long m_GID
  /* this+0x18 */ unsigned long m_QID
  /* this+0x1c */ bool m_Complete
  /* this+0x1d */ bool m_Active
  /* this+0x20 */ unsigned long m_Mob_1_Id
  /* this+0x24 */ unsigned long m_Mob_2_Id
  /* this+0x28 */ unsigned long m_Mob_3_Id
  /* this+0x2c */ short m_Mob_1_Count
  /* this+0x2e */ short m_Mob_2_Count
  /* this+0x30 */ short m_Mob_3_Count
  /* this+0x34 */ long m_PlayTime
  /* this+0x38 */ enum CUpdateQuestDBWork::enumResult m_Result
  public const enum CUpdateQuestDBWork::enumResult GetResult()
  public const unsigned long GetGID()
  public const unsigned long GetQID()
  private bool CUpdateQuestDBWork::ExecQuery(class NODBCCtrl &)
  private enum NAsyncDBWork::enumRETURN CUpdateQuestDBWork::UpdateQuest(class NODBCCtrl &, const int, const int, const bool, const bool, const int, const short, const int, const short, const int, const short, const long)
  public void CUpdateQuestDBWork::Init(const unsigned long, const int, const int, const bool, const bool, const int, const short, const int, const short, const int, const short, const long)
  public void CUpdateQuestDBWork(const class CUpdateQuestDBWork &)
  private void CUpdateQuestDBWork::CUpdateQuestDBWork()
  private void CUpdateQuestDBWork::~CUpdateQuestDBWork()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CUseItemBlockWhenSitdownMgr {
  public bool isOK()
  public void CUseItemBlockWhenSitdownMgr::Add(const int)
  public bool CUseItemBlockWhenSitdownMgr::IsBlockItem(const int)
  public static bool CUseItemBlockWhenSitdownMgr::CreateInstance()
  public static void CUseItemBlockWhenSitdownMgr::DestroyInstance()
  public void CUseItemBlockWhenSitdownMgr(const class CUseItemBlockWhenSitdownMgr &)
  private void CUseItemBlockWhenSitdownMgr::CUseItemBlockWhenSitdownMgr()
  private void CUseItemBlockWhenSitdownMgr::~CUseItemBlockWhenSitdownMgr()
  private bool CUseItemBlockWhenSitdownMgr::Create()
  private bool CUseItemBlockWhenSitdownMgr::Init()
  /* [0x0003:0x0004b2bc] */ static  class CUseItemBlockWhenSitdownMgr * m_cpSelf
  /* this+0x0 */ bool m_bOK
    /* this+0x4 */ class std::vector<int,std::allocator<int> > m_ItemList

  public class CUseItemBlockWhenSitdownMgr & operator=(const class CUseItemBlockWhenSitdownMgr &)
  private void * __vecDelDtor(unsigned int)
}

class CUserBlock {
      /* this+0x0 */ int m_Type
  /* this+0x4 */ unsigned long m_AID
  /* this+0x8 */ int m_Reason
  /* this+0xc */ long m_EndDate
  public void CUserBlock(const enum CUserBlock::enumTYPE, const unsigned long, const enum CUserBlock::enumREASON, const long)
  public void ~CUserBlock()
  public void * __vecDelDtor(unsigned int)
}

class CUserBlockMgr {
  CDatabaseLog<CUserBlock *>, offset = 0x0

  public void CUserBlockMgr::ConnectToDatabase(const char *)
  public void CUserBlockMgr::AddR2(const enum CUserBlock::enumTYPE, const enum CUserBlock::enumREASON, const unsigned long, const int)
  private int CUserBlockMgr::SaveToDatabase(void *, class CUserBlock *)
  public void CUserBlockMgr(const class CUserBlockMgr &)
  public void CUserBlockMgr::CUserBlockMgr()
  public void CUserBlockMgr::~CUserBlockMgr()
  public class CUserBlockMgr & operator=(const class CUserBlockMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CVTBLErrorLog {
  NFileLog, offset = 0x0

  public bool isOK()
  public static bool CreateInstance()
  public static void DestroyInstance()
  private void CVTBLErrorLog(const class CVTBLErrorLog &)
  private void CVTBLErrorLog()
  private class CVTBLErrorLog & operator=(const class CVTBLErrorLog &)
  private void ~CVTBLErrorLog()
  /* [0x0000:0x00000000] */ static  class CVTBLErrorLog * m_cpSelf
  /* this+0x828 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_ALL_QUEST_LIST2,5550> {
  public struct PACKET_ZC_ALL_QUEST_LIST2 * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_ALL_QUEST_LIST2,5550>(const class CVarLenPacketPtr<PACKET_ZC_ALL_QUEST_LIST2,5550> &)
  public void CVarLenPacketPtr<PACKET_ZC_ALL_QUEST_LIST2,5550>()
  public void CVarLenPacketPtr<PACKET_ZC_ALL_QUEST_LIST2,5550>::~CVarLenPacketPtr<PACKET_ZC_ALL_QUEST_LIST2,5550>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_ALL_QUEST_LIST2,5550> & operator=(const class CVarLenPacketPtr<PACKET_ZC_ALL_QUEST_LIST2,5550> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_EQUIPMENT_ITEMLIST3,16300> {
  public struct PACKET_ZC_EQUIPMENT_ITEMLIST3 * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_EQUIPMENT_ITEMLIST3,16300>(const class CVarLenPacketPtr<PACKET_ZC_EQUIPMENT_ITEMLIST3,16300> &)
  public void CVarLenPacketPtr<PACKET_ZC_EQUIPMENT_ITEMLIST3,16300>()
  public void CVarLenPacketPtr<PACKET_ZC_EQUIPMENT_ITEMLIST3,16300>::~CVarLenPacketPtr<PACKET_ZC_EQUIPMENT_ITEMLIST3,16300>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_EQUIPMENT_ITEMLIST3,16300> & operator=(const class CVarLenPacketPtr<PACKET_ZC_EQUIPMENT_ITEMLIST3,16300> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_EQUIPWIN_MICROSCOPE2,16300> {
  public struct PACKET_ZC_EQUIPWIN_MICROSCOPE2 * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_EQUIPWIN_MICROSCOPE2,16300>(const class CVarLenPacketPtr<PACKET_ZC_EQUIPWIN_MICROSCOPE2,16300> &)
  public void CVarLenPacketPtr<PACKET_ZC_EQUIPWIN_MICROSCOPE2,16300>()
  public void CVarLenPacketPtr<PACKET_ZC_EQUIPWIN_MICROSCOPE2,16300>::~CVarLenPacketPtr<PACKET_ZC_EQUIPWIN_MICROSCOPE2,16300>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_EQUIPWIN_MICROSCOPE2,16300> & operator=(const class CVarLenPacketPtr<PACKET_ZC_EQUIPWIN_MICROSCOPE2,16300> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_HUNTING_QUEST_INFO,1200> {
  public struct PACKET_ZC_HUNTING_QUEST_INFO * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_HUNTING_QUEST_INFO,1200>(const class CVarLenPacketPtr<PACKET_ZC_HUNTING_QUEST_INFO,1200> &)
  public void CVarLenPacketPtr<PACKET_ZC_HUNTING_QUEST_INFO,1200>()
  public void CVarLenPacketPtr<PACKET_ZC_HUNTING_QUEST_INFO,1200>::~CVarLenPacketPtr<PACKET_ZC_HUNTING_QUEST_INFO,1200>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_HUNTING_QUEST_INFO,1200> & operator=(const class CVarLenPacketPtr<PACKET_ZC_HUNTING_QUEST_INFO,1200> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_MAKABLEITEMLIST,32> {
  public struct PACKET_ZC_MAKABLEITEMLIST * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_MAKABLEITEMLIST,32>(const class CVarLenPacketPtr<PACKET_ZC_MAKABLEITEMLIST,32> &)
  public void CVarLenPacketPtr<PACKET_ZC_MAKABLEITEMLIST,32>()
  public void CVarLenPacketPtr<PACKET_ZC_MAKABLEITEMLIST,32>::~CVarLenPacketPtr<PACKET_ZC_MAKABLEITEMLIST,32>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_MAKABLEITEMLIST,32> & operator=(const class CVarLenPacketPtr<PACKET_ZC_MAKABLEITEMLIST,32> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,40> {
  public struct PACKET_ZC_MAKINGARROW_LIST * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,40>(const class CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,40> &)
  public void CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,40>()
  public void CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,40>::~CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,40>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,40> & operator=(const class CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,40> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,8> {
  public struct PACKET_ZC_MAKINGARROW_LIST * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,8>(const class CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,8> &)
  public void CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,8>()
  public void CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,8>::~CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,8>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,8> & operator=(const class CVarLenPacketPtr<PACKET_ZC_MAKINGARROW_LIST,8> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_MAKINGITEM_LIST,22> {
  public struct PACKET_ZC_MAKINGITEM_LIST * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_MAKINGITEM_LIST,22>(const class CVarLenPacketPtr<PACKET_ZC_MAKINGITEM_LIST,22> &)
  public void CVarLenPacketPtr<PACKET_ZC_MAKINGITEM_LIST,22>::CVarLenPacketPtr<PACKET_ZC_MAKINGITEM_LIST,22>()
  public void CVarLenPacketPtr<PACKET_ZC_MAKINGITEM_LIST,22>::~CVarLenPacketPtr<PACKET_ZC_MAKINGITEM_LIST,22>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_MAKINGITEM_LIST,22> & operator=(const class CVarLenPacketPtr<PACKET_ZC_MAKINGITEM_LIST,22> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_NORMAL_ITEMLIST3,16300> {
  public struct PACKET_ZC_NORMAL_ITEMLIST3 * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_NORMAL_ITEMLIST3,16300>(const class CVarLenPacketPtr<PACKET_ZC_NORMAL_ITEMLIST3,16300> &)
  public void CVarLenPacketPtr<PACKET_ZC_NORMAL_ITEMLIST3,16300>()
  public void CVarLenPacketPtr<PACKET_ZC_NORMAL_ITEMLIST3,16300>::~CVarLenPacketPtr<PACKET_ZC_NORMAL_ITEMLIST3,16300>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_NORMAL_ITEMLIST3,16300> & operator=(const class CVarLenPacketPtr<PACKET_ZC_NORMAL_ITEMLIST3,16300> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_NOTIFY_MOVEENTRY8,24> {
  public struct PACKET_ZC_NOTIFY_MOVEENTRY8 * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_NOTIFY_MOVEENTRY8,24>(const class CVarLenPacketPtr<PACKET_ZC_NOTIFY_MOVEENTRY8,24> &)
  public void CVarLenPacketPtr<PACKET_ZC_NOTIFY_MOVEENTRY8,24>()
  public void CVarLenPacketPtr<PACKET_ZC_NOTIFY_MOVEENTRY8,24>::~CVarLenPacketPtr<PACKET_ZC_NOTIFY_MOVEENTRY8,24>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_NOTIFY_MOVEENTRY8,24> & operator=(const class CVarLenPacketPtr<PACKET_ZC_NOTIFY_MOVEENTRY8,24> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_NOTIFY_NEWENTRY6,24> {
  public struct PACKET_ZC_NOTIFY_NEWENTRY6 * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_NOTIFY_NEWENTRY6,24>(const class CVarLenPacketPtr<PACKET_ZC_NOTIFY_NEWENTRY6,24> &)
  public void CVarLenPacketPtr<PACKET_ZC_NOTIFY_NEWENTRY6,24>()
  public void CVarLenPacketPtr<PACKET_ZC_NOTIFY_NEWENTRY6,24>::~CVarLenPacketPtr<PACKET_ZC_NOTIFY_NEWENTRY6,24>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_NOTIFY_NEWENTRY6,24> & operator=(const class CVarLenPacketPtr<PACKET_ZC_NOTIFY_NEWENTRY6,24> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_NOTIFY_STANDENTRY7,24> {
  public struct PACKET_ZC_NOTIFY_STANDENTRY7 * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_NOTIFY_STANDENTRY7,24>(const class CVarLenPacketPtr<PACKET_ZC_NOTIFY_STANDENTRY7,24> &)
  public void CVarLenPacketPtr<PACKET_ZC_NOTIFY_STANDENTRY7,24>()
  public void CVarLenPacketPtr<PACKET_ZC_NOTIFY_STANDENTRY7,24>::~CVarLenPacketPtr<PACKET_ZC_NOTIFY_STANDENTRY7,24>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_NOTIFY_STANDENTRY7,24> & operator=(const class CVarLenPacketPtr<PACKET_ZC_NOTIFY_STANDENTRY7,24> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_PARTY_BOOKING_ACK_SEARCH,480> {
  public struct PACKET_ZC_PARTY_BOOKING_ACK_SEARCH * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_PARTY_BOOKING_ACK_SEARCH,480>(const class CVarLenPacketPtr<PACKET_ZC_PARTY_BOOKING_ACK_SEARCH,480> &)
  public void CVarLenPacketPtr<PACKET_ZC_PARTY_BOOKING_ACK_SEARCH,480>()
  public void CVarLenPacketPtr<PACKET_ZC_PARTY_BOOKING_ACK_SEARCH,480>::~CVarLenPacketPtr<PACKET_ZC_PARTY_BOOKING_ACK_SEARCH,480>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_PARTY_BOOKING_ACK_SEARCH,480> & operator=(const class CVarLenPacketPtr<PACKET_ZC_PARTY_BOOKING_ACK_SEARCH,480> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_PERSONAL_INFOMATION,21> {
  public struct PACKET_ZC_PERSONAL_INFOMATION * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_PERSONAL_INFOMATION,21>(const class CVarLenPacketPtr<PACKET_ZC_PERSONAL_INFOMATION,21> &)
  public void CVarLenPacketPtr<PACKET_ZC_PERSONAL_INFOMATION,21>()
  public void CVarLenPacketPtr<PACKET_ZC_PERSONAL_INFOMATION,21>::~CVarLenPacketPtr<PACKET_ZC_PERSONAL_INFOMATION,21>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_PERSONAL_INFOMATION,21> & operator=(const class CVarLenPacketPtr<PACKET_ZC_PERSONAL_INFOMATION,21> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_SELECTCART,30> {
  public struct PACKET_ZC_SELECTCART * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_SELECTCART,30>(const class CVarLenPacketPtr<PACKET_ZC_SELECTCART,30> &)
  public void CVarLenPacketPtr<PACKET_ZC_SELECTCART,30>()
  public void CVarLenPacketPtr<PACKET_ZC_SELECTCART,30>::~CVarLenPacketPtr<PACKET_ZC_SELECTCART,30>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_SELECTCART,30> & operator=(const class CVarLenPacketPtr<PACKET_ZC_SELECTCART,30> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_SHOWSCRIPT,128> {
  public struct PACKET_ZC_SHOWSCRIPT * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_SHOWSCRIPT,128>(const class CVarLenPacketPtr<PACKET_ZC_SHOWSCRIPT,128> &)
  public void CVarLenPacketPtr<PACKET_ZC_SHOWSCRIPT,128>::CVarLenPacketPtr<PACKET_ZC_SHOWSCRIPT,128>()
  public void CVarLenPacketPtr<PACKET_ZC_SHOWSCRIPT,128>::~CVarLenPacketPtr<PACKET_ZC_SHOWSCRIPT,128>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_SHOWSCRIPT,128> & operator=(const class CVarLenPacketPtr<PACKET_ZC_SHOWSCRIPT,128> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_SKILLINFO_LIST,9472> {
  public struct PACKET_ZC_SKILLINFO_LIST * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_SKILLINFO_LIST,9472>(const class CVarLenPacketPtr<PACKET_ZC_SKILLINFO_LIST,9472> &)
  public void CVarLenPacketPtr<PACKET_ZC_SKILLINFO_LIST,9472>()
  public void CVarLenPacketPtr<PACKET_ZC_SKILLINFO_LIST,9472>::~CVarLenPacketPtr<PACKET_ZC_SKILLINFO_LIST,9472>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_SKILLINFO_LIST,9472> & operator=(const class CVarLenPacketPtr<PACKET_ZC_SKILLINFO_LIST,9472> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZC_SKILL_ENTRY3,80> {
  public struct PACKET_ZC_SKILL_ENTRY3 * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZC_SKILL_ENTRY3,80>(const class CVarLenPacketPtr<PACKET_ZC_SKILL_ENTRY3,80> &)
  public void CVarLenPacketPtr<PACKET_ZC_SKILL_ENTRY3,80>()
  public void CVarLenPacketPtr<PACKET_ZC_SKILL_ENTRY3,80>::~CVarLenPacketPtr<PACKET_ZC_SKILL_ENTRY3,80>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZC_SKILL_ENTRY3,80> & operator=(const class CVarLenPacketPtr<PACKET_ZC_SKILL_ENTRY3,80> &)
  public void * __vecDelDtor(unsigned int)
}

class CVarLenPacketPtr<PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN,24> {
  public struct PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN * operator->()
  public unsigned char * operator unsigned char *()
  public char * operator char *()
  public int operator int()
  public void add(const unsigned int)
  public void add(const unsigned char *, const int)
  public int size()
  public class std::vector<unsigned char,std::allocator<unsigned char> > & GetVector()
  public void CVarLenPacketPtr<PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN,24>(const class CVarLenPacketPtr<PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN,24> &)
  public void CVarLenPacketPtr<PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN,24>::CVarLenPacketPtr<PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN,24>()
  public void CVarLenPacketPtr<PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN,24>::~CVarLenPacketPtr<PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN,24>()
  /* this+0x0 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_Vector

  public class CVarLenPacketPtr<PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN,24> & operator=(const class CVarLenPacketPtr<PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN,24> &)
  public void * __vecDelDtor(unsigned int)
}

class CVariableSKcastingTMvar {
  CSKcastingTMvar, offset = 0x0

  public void CVariableSKcastingTMvar(const class CVariableSKcastingTMvar &)
  public void CVariableSKcastingTMvar::CVariableSKcastingTMvar()
  public void CVariableSKcastingTMvar::~CVariableSKcastingTMvar()
  public class CVariableSKcastingTMvar & operator=(const class CVariableSKcastingTMvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CZGuildInfo {
  CGuild, offset = 0x0

  public void CZGuildInfo::LoadEmblem()
  public void CZGuildInfo(class CZGuildInfo &)
  public void CZGuildInfo::CZGuildInfo()
  public void CZGuildInfo::~CZGuildInfo()
  public void CZGuildInfo::Init()
  public void CZGuildInfo::OnAddExp(char *)
  public void CZGuildInfo::OnGetMemberFrag(char *)
  public void CZGuildInfo::DeleteRelatedGuild(char *)
  public int CZGuildInfo::GetGuildMInfo(char *, const int)
  public int CZGuildInfo::ConvertGuildMInfo(struct GUILDMINFO, struct GUILD_MEMBER_INFO &)
  public void CZGuildInfo::GuildMemberAdd(char *)
  public void CZGuildInfo::SendGuildNotice(unsigned long)
  public void CZGuildInfo::GetGuildNotice(char *)
  public void CZGuildInfo::GetGuildPosition(char *, unsigned short)
  public void CZGuildInfo::ChangeMemberPosition(char *, unsigned short)
  public void CZGuildInfo::DisOrganizeGuild(char *)
  public void CZGuildInfo::SendGuildChat(char *, int)
  public void SendAllyGuildResult(unsigned char)
  public void SetCompressedEmblemImage(const char *, unsigned long, int, int)
  public void SendAckBanGuild(char *, char *, char *)
  public void SendAckLeaveGuild(char *, char *, char *)
  public void CZGuildInfo::BroadCast(int, char *)
  public void CZGuildInfo::DeleteMember(unsigned long)
  public void CZGuildInfo::BanMember(char *)
  public void OnZenyUpdateAll(char *)
  public void CZGuildInfo::NotifySkillInfo(unsigned long)
  public void CZGuildInfo::OnNotifySkillData(char *, unsigned short)
  public void CZGuildInfo::UpgradeSkillLevel(unsigned short)
  public int CZGuildInfo::GetSkillLevel(unsigned short)
  public void CZGuildInfo::MapChange(unsigned long, char *)
  public void CZGuildInfo::NotifyPositionToGuild(unsigned long, short, short, int)
  public class std::_Vector_iterator<std::_Vector_val<GUILDMINFO *,std::allocator<GUILDMINFO *> > > GetStartGuildIter()
  public class std::_Vector_iterator<std::_Vector_val<GUILDMINFO *,std::allocator<GUILDMINFO *> > > GetEndGuildIter()
  /* this+0xf9c */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > > m_skill

  /* this+0xfac */ unsigned long MemberFragNum
  /* this+0xfb0 */ class CZGuildInfoPacketDispatcher m_packetDispatcher

  /* this+0xfb8 */ int m_JoinGID
  public void SetJoinGID(int)
  public int GetJoinGID()
  private int CZGuildInfo::IsEnableSkill(unsigned short)
  public class CZGuildInfo & operator=(class CZGuildInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CZGuildInfoDB {
  CGuildDB, offset = 0x0

  public void CZGuildInfoDB(const class CZGuildInfoDB &)
  public void CZGuildInfoDB::CZGuildInfoDB()
  public void CZGuildInfoDB::~CZGuildInfoDB()
  public class CZGuildInfoDB & operator=(const class CZGuildInfoDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CZGuildInfoPacketDispatcher {
    *
  public void CZGuildInfoPacketDispatcher(const class CZGuildInfoPacketDispatcher &)
  public void CZGuildInfoPacketDispatcher::CZGuildInfoPacketDispatcher()
  public void CZGuildInfoPacketDispatcher::~CZGuildInfoPacketDispatcher()
  public void CZGuildInfoPacketDispatcher::OnGetMemberInfoFrag(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnAddExp(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnGuildChat(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnDeleteRelatedGuild(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnGuildMemberAdd(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnGuildNotice(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnAckChangeMemberPos(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnAckGuildPosition(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnDisOrganizeGuildResult(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnAddAllyGuild(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnAddHostileGuild(unsigned long, short, unsigned short, char *)
  public void OnUpdateCharGDID(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnUpdateCharStat(unsigned long, short, unsigned short, char *)
  public void OnZenyUpdateAll(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnChangeMaxUser(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnFreeGuild(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnAckLeaveGuild(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::OnAckBanGuild(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::GetGuildBanishInfo(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::GetGuildMPosition(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::GetGuildInfo(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::GetGuildMInfo(unsigned long, short, unsigned short, char *)
  public void CZGuildInfoPacketDispatcher::GetGuildAllyInfo(unsigned long, short, unsigned short, char *)
  public void SetGuildInfo(class CZGuildInfo *)
  public void CZGuildInfoPacketDispatcher::OnMapChange(unsigned long, short, unsigned short, char *)
  public int OnProcess()
  public int CZGuildInfoPacketDispatcher::DispatchPacket(unsigned long, short, unsigned short, char *)
  /* this+0x4 */ class CZGuildInfo * m_guildInfo
  public class CZGuildInfoPacketDispatcher & operator=(const class CZGuildInfoPacketDispatcher &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CZGuildMgr {
  CGuildMgr, offset = 0x0

  public void CZGuildMgr(class CZGuildMgr &)
  public void CZGuildMgr::CZGuildMgr()
  public void CZGuildMgr::~CZGuildMgr()
  public void CZGuildMgr::AddGuildExp(unsigned long, unsigned long, int)
  public void CZGuildMgr::SendPacket(const unsigned long, const short, const int, const char *)
  public void CZGuildMgr::MakeGuild(unsigned long, struct GUILDINFO *)
  public void CZGuildMgr::Init()
  public void CZGuildMgr::Init(int)
  public class CGuild * CZGuildMgr::AllocGuild()
  public void CZGuildMgr::FreeGuild(class CGuild *, int)
  public void CZGuildMgr::AddAgitGuild(unsigned long)
  public void CZGuildMgr::OnChangeAgitGuild(const char *, unsigned long, unsigned long)
  public int CZGuildMgr::GetGuildSkillLevel(unsigned long, unsigned short)
  public unsigned long GetFreeSize()
  public unsigned long CZGuildMgr::GetOffset()
  public int CZGuildMgr::JoinInsertGID(unsigned long, unsigned long)
  public int CZGuildMgr::JoinChkeckGID(unsigned long, unsigned long)
  public int CZGuildMgr::isAgitGuild(unsigned long)
  /* this+0x14 */ class CMemoryMgr<CZGuildInfo> m_zGuildMPool

  /* this+0x38 */ class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_set

  /* this+0x48 */ int m_MaxGuildCounter
  public class CZGuildMgr & operator=(class CZGuildMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CZLib {
    *
  public void CZLib(const class CZLib &)
  public void CZLib::CZLib()
  public void CZLib::~CZLib()
  public int CZLib::Compress(unsigned char *, unsigned long *, const unsigned char *, unsigned int, int)
  public int CZLib::Uncompress(unsigned char *, unsigned long *, const unsigned char *, unsigned long)
  public class CZLib & operator=(const class CZLib &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CZNPC2Msg {
  CMsg, offset = 0x0

}

class CZSAcceptHandler {
  CAcceptHandler, offset = 0x0

  /* this+0x4 */ class CMemoryMgr<CAsyncStream> m_streamPool

  /* this+0x28 */ int m_acceptable
  public int CZSAcceptHandler::Init(int)
  public int CZSAcceptHandler::OnConnect(unsigned int, unsigned long)
  public void CZSAcceptHandler(class CZSAcceptHandler &)
  public void CZSAcceptHandler::CZSAcceptHandler()
  public void CZSAcceptHandler::~CZSAcceptHandler()
  public class CAsyncStream * AllocStream()
  public void FreeStream(class CAsyncStream *)
  public void SetAccpetable(int)
  public int GetAcceptable()
  public class CZSAcceptHandler & operator=(class CZSAcceptHandler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CZSAcceptThread {
  N3Thread, offset = 0x0

  N3Object, offset = 0x30

  public bool isOK()
  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CZSAcceptThread::Start(const unsigned long, const int, class CZSAcceptHandler *)
  public void CZSAcceptThread::Stop()
  private unsigned int CZSAcceptThread::ThreadFunction()
  private void CZSAcceptThread::PostThreadQuitMessage()
  public static bool CZSAcceptThread::CreateInstance()
  public static void CZSAcceptThread::DestroyInstance()
  private void CZSAcceptThread(const class CZSAcceptThread &)
  private void CZSAcceptThread::CZSAcceptThread()
  private void CZSAcceptThread::~CZSAcceptThread()
  private class CZSAcceptThread & operator=(const class CZSAcceptThread &)
  /* [0x0003:0x0004b2d8] */ static  class CZSAcceptThread * m_cpSelf
  /* this+0x38 */ bool m_bOK
  /* this+0x3c */ class CZSAcceptHandler * m_cpAcceptHandler
  /* this+0x40 */ unsigned int m_listenSocket
  /* this+0x44 */ bool m_ReqExit
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct CZ_PURCHASE_ITEM {
  /* this+0x0 */ short count
  /* this+0x2 */ unsigned short ITID
}

struct CZ_PURCHASE_ITEM_FROMMC {
  /* this+0x0 */ short count
  /* this+0x2 */ short index
}

struct CZ_SELL_ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ short count
}

class CZoneProcessLocalConfigMgr {
    *
  public bool isOK()
  public bool CZoneProcessLocalConfigMgr::Init()
  public int GetZSID()
  public void SetZSID(const int)
  public int GetMaxCharacterCount()
  public void SetMaxCharacterCount(const int)
  public static bool CZoneProcessLocalConfigMgr::CreateInstance()
  public static void CZoneProcessLocalConfigMgr::DestroyInstance()
  private void CZoneProcessLocalConfigMgr(const class CZoneProcessLocalConfigMgr &)
  private void CZoneProcessLocalConfigMgr::CZoneProcessLocalConfigMgr()
  private void CZoneProcessLocalConfigMgr::~CZoneProcessLocalConfigMgr()
  private class CZoneProcessLocalConfigMgr & operator=(const class CZoneProcessLocalConfigMgr &)
  /* [0x0003:0x0004b2d4] */ static  class CZoneProcessLocalConfigMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ int m_ZSID
  /* this+0xc */ int m_MaxCharacterCount
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CZoneScript {
  public void CZoneScript(const class CZoneScript &)
  public void CZoneScript::CZoneScript()
  public void CZoneScript::~CZoneScript()
  public void CZoneScript::Init()
  public void CZoneScript::Reset()
  public class std::map<unsigned short,std::vector<extraITMInfo,std::allocator<extraITMInfo> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<extraITMInfo,std::allocator<extraITMInfo> > > > > CZoneScript::GetMakingArrowItemInfo()
  public class std::map<unsigned short,std::vector<extraITMInfo,std::allocator<extraITMInfo> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<extraITMInfo,std::allocator<extraITMInfo> > > > > CZoneScript::GetMakingElementalInfo()
  public int CZoneScript::SearchID(char *, enum MYCHECK_TYPE)
  public void GetAtkPlusPWByProperty(int, int, int &)
  public int GetAtkPlusPWByProperty(int, int)
  public int GetAtkPlusPWByProperty_Variation(int, int, int)
  public void CZoneScript::LoadMetamorphosisInfo()
  public struct SummonMobList * CZoneScript::GetMetamorphosis(unsigned long)
  public void CZoneScript::LoadSummonSlaveInfo()
  public struct SummonMobList * CZoneScript::GetSummonSlaveList(unsigned long)
  public void CZoneScript::LoadSummonMobInfo(const char *, class std::map<unsigned long,SummonMobList,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,SummonMobList> > > &)
  public void CZoneScript::LoadMobEmotionInfo()
  public int CZoneScript::GetMobEmotion(unsigned long)
  public void CZoneScript::LoadAbracadabraInfo()
  public unsigned short CZoneScript::GetSkillByAbracadabra(short)
  public unsigned long CZoneScript::GetITMFromGroupID(int)
  public unsigned long GetCatchAID()
  public unsigned long GetRemoveCatchAID()
  public int CheckAID(unsigned long)
    private bool CZoneScript::LoadHomunStatTable(struct lua_State *, const char *, const short, class std::map<short,STAT_PLUSTABLE,std::less<short>,std::allocator<std::pair<short const ,STAT_PLUSTABLE> > > &)
  /* this+0x0 */ class std::map<short,STAT_PLUSTABLE,std::less<short>,std::allocator<std::pair<short const ,STAT_PLUSTABLE> > > m_HomunLevelUpTbl

  /* this+0x10 */ class std::map<short,STAT_PLUSTABLE,std::less<short>,std::allocator<std::pair<short const ,STAT_PLUSTABLE> > > m_HomunEvolutionTbl

  /* this+0x20 */ class std::map<short,STAT_PLUSTABLE,std::less<short>,std::allocator<std::pair<short const ,STAT_PLUSTABLE> > > m_HomunMutationTbl

  public const struct STAT_PLUSTABLE * CZoneScript::GetHomunLevelUpStatTable(const int)
  public const struct STAT_PLUSTABLE * CZoneScript::GetHomunEvolutionStatTable(const int)
  public const struct STAT_PLUSTABLE * CZoneScript::GetHomunMutationStatTable(const int)
  private int CZoneScript::LoadMakingArrowInfo()
  private int CZoneScript::Load_MK_ElementalInfo()
  private int CZoneScript::LoadItemGroupInfo(const char *)
  private int CZoneScript::LoadHomunInfo(const char *)
  private int CZoneScript::CheckAvaibleID(char *, enum MYCHECK_TYPE)
  private void CZoneScript::LoadIDTable()
  private void CZoneScript::ClearIDTable()
  private void LoadAIDTable()
  private int CZoneScript::GetITMGroupID(char *)
  private int CZoneScript::GetField(struct lua_State *, const char *)
  /* this+0x30 */ class std::map<unsigned short,std::vector<extraITMInfo,std::allocator<extraITMInfo> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<extraITMInfo,std::allocator<extraITMInfo> > > > > m_makingArrowInfo

  /* this+0x40 */ class std::map<unsigned short,std::vector<extraITMInfo,std::allocator<extraITMInfo> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<extraITMInfo,std::allocator<extraITMInfo> > > > > m_makeElemental

  /* this+0x50 */ class std::list<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >[0x14] m_idTable
  /* this+0x140 */ class std::list<unsigned long,std::allocator<unsigned long> > m_aidTable

  /* this+0x14c */ class CAttackPlusPowerInfo * m_attackPlusPowerInfo
  /* this+0x150 */ class std::map<unsigned long,SummonMobList,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,SummonMobList> > > m_metamorphosisInfo

  /* this+0x160 */ class std::map<unsigned long,SummonMobList,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,SummonMobList> > > m_summonSlaveInfo

  /* this+0x170 */ class std::map<unsigned long,int,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,int> > > m_mobEmotionInfo

  /* this+0x180 */ class std::map<short,std::map<unsigned short,short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,short> > >,std::less<short>,std::allocator<std::pair<short const ,std::map<unsigned short,short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,short> > > > > > m_abracadabraInfo

  /* this+0x190 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > m_itmGroupName

  /* this+0x1a0 */ class std::map<int,std::vector<extraITMInfo,std::allocator<extraITMInfo> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<extraITMInfo,std::allocator<extraITMInfo> > > > > m_itmGroupInfo

  public class CZoneScript & operator=(const class CZoneScript &)
  public void * __vecDelDtor(unsigned int)
}

class CZoneSkillGroupUniqueIDGenerator {
  public bool isOK()
  public static bool CZoneSkillGroupUniqueIDGenerator::CreateInstance()
  public static void CZoneSkillGroupUniqueIDGenerator::DestroyInstance()
  public unsigned int CZoneSkillGroupUniqueIDGenerator::Alloc()
  private void CZoneSkillGroupUniqueIDGenerator::CZoneSkillGroupUniqueIDGenerator()
  private void ~CZoneSkillGroupUniqueIDGenerator()
  /* [0x0003:0x0004b5c8] */ static  class CZoneSkillGroupUniqueIDGenerator * m_cpSelf
  /* this+0x0 */ bool m_bOK
  private void * __vecDelDtor(unsigned int)
}

class CZoneUniqueIDGenerator {
  public bool isOK()
  public static bool CZoneUniqueIDGenerator::CreateInstance()
  public static void CZoneUniqueIDGenerator::DestroyInstance()
  public unsigned int Alloc()
  private void CZoneUniqueIDGenerator::CZoneUniqueIDGenerator()
  private void ~CZoneUniqueIDGenerator()
  /* [0x0003:0x0004b5cc] */ static  class CZoneUniqueIDGenerator * m_cpSelf
  /* this+0x0 */ bool m_bOK
  /* this+0x4 */ unsigned int m_ID
  private void * __vecDelDtor(unsigned int)
}

class CZsvrSchedulerIdentity {
    *
  public bool isOK()
    public unsigned int CZsvrSchedulerIdentity::Get()
  public static bool CZsvrSchedulerIdentity::CreateInstance()
  public static void CZsvrSchedulerIdentity::DestroyInstance()
  private void CZsvrSchedulerIdentity(class CZsvrSchedulerIdentity &)
  private void CZsvrSchedulerIdentity::CZsvrSchedulerIdentity()
  private class CZsvrSchedulerIdentity & operator=(const class CZsvrSchedulerIdentity &)
  private void CZsvrSchedulerIdentity::~CZsvrSchedulerIdentity()
  /* [0x0003:0x0004b2dc] */ static  class CZsvrSchedulerIdentity * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ unsigned int m_IdentityCnt
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct CallInfo {
  /* this+0x0 */ struct lua_TValue * base
  /* this+0x4 */ struct lua_TValue * func
  /* this+0x8 */ struct lua_TValue * top
  /* this+0xc */ const unsigned int * savedpc
  /* this+0x10 */ int nresults
  /* this+0x14 */ int tailcalls
}

struct CallS {
  /* this+0x0 */ struct lua_TValue * func
  /* this+0x4 */ int nresults
}

struct CatchGuardRN {
  /* this+0x0 */ struct EHRegistrationNode * pNext
  /* this+0x4 */ void * pFrameHandler
  /* this+0x8 */ unsigned int RandomCookie
  /* this+0xc */ const struct _s_FuncInfo * pFuncInfo
  /* this+0x10 */ struct EHRegistrationNode * pRN
  /* this+0x14 */ int CatchDepth
}

struct CharacterInfo {
  /* this+0x0 */ unsigned long roomID
  /* this+0x4 */ int accountID
  /* this+0x8 */ int characterID
  /* this+0xc */ int speed
  /* this+0x10 */ int plusCartspeed
  /* this+0x14 */ int AuthCode
  /* this+0x18 */ int isSendable
  /* this+0x1c */ int mapID
  /* this+0x20 */ int GuildID
  /* this+0x24 */ int GroupID
  /* this+0x28 */ int isGroupMaster
  /* this+0x2c */ short NotifyPositionX
  /* this+0x2e */ short NotifyPositionY
  /* this+0x30 */ unsigned long GroupExpOption
  /* this+0x34 */ int PartyItemPickupRule
  /* this+0x38 */ int PartyItemDivisionRule
  /* this+0x3c */ int exp
    /* this+0x40 */ struct CharacterInfo::tagParty Party

  /* this+0x41 */ bool bOpenEquipmentWin
  /* this+0x42 */ short font
  /* this+0x44 */ int money
  public int GetMoney()
  public int SetMoney(int)
  public int CharacterInfo::AddMoney(int)
  /* this+0x48 */ int jobexp
  /* this+0x4c */ int joblevel
  /* this+0x50 */ int isWhisperAcceptable
  /* this+0x54 */ int virtue
  /* this+0x58 */ int honor
  /* this+0x5c */ int PKhonor
  /* this+0x60 */ int plusMaxHP
  /* this+0x64 */ int MHP_Percent
  /* this+0x68 */ int plusMaxSP
  /* this+0x6c */ int MSP_Percent
  /* this+0x70 */ short jobpoint
  /* this+0x72 */ short sxPos
  /* this+0x74 */ short syPos
  /* this+0x76 */ short targetxPos
  /* this+0x78 */ short targetyPos
  /* this+0x7a */ short StrAmount
  /* this+0x7c */ short AgiAmount
  /* this+0x7e */ short VitAmount
  /* this+0x80 */ short IntAmount
  /* this+0x82 */ short DexAmount
  /* this+0x84 */ short LukAmount
  /* this+0x88 */ int ATKPercent
  /* this+0x8c */ int DEFPercent
  /* this+0x90 */ short ArcherDex
  /* this+0x94 */ int plusAttRange
  /* this+0x98 */ int recvBytes
  /* this+0x9c */ int sendBytes
  /* this+0xa0 */ int IsLockOnMode
  /* this+0xa4 */ unsigned long targetAID
  /* this+0xa8 */ short job
  /* this+0xaa */ short clevel
  /* this+0xac */ short sppoint
  /* this+0xae */ short head
  /* this+0xb0 */ int weapon
  /* this+0xb4 */ short accessory
  /* this+0xb8 */ int shoes
  /* this+0xbc */ short headpalette
  /* this+0xbe */ short bodypalette
  /* this+0xc0 */ short accessory2
  /* this+0xc2 */ short accessory3
  /* this+0xc4 */ short cookMastery
  /* this+0xc6 */ short headDir
  /* this+0xc8 */ unsigned char sex
  /* this+0xc9 */ char[0x18] characterName
  /* this+0xe1 */ char[0x18] accountName
  /* this+0xf9 */ char[0x18] partyID
  /* this+0x111 */ char[0x10] mapName
  /* this+0x121 */ char[0x10] targetMapName
  /* this+0x131 */ char[0x10] restartMapName
  /* this+0x141 */ char Str
  /* this+0x142 */ char Agi
  /* this+0x143 */ char Vit
  /* this+0x144 */ char Int
  /* this+0x145 */ char Dex
  /* this+0x146 */ char Luk
  /* this+0x147 */ char StrP
  /* this+0x148 */ char AgiP
  /* this+0x149 */ char VitP
  /* this+0x14a */ char IntP
  /* this+0x14b */ char DexP
  /* this+0x14c */ char LukP
  /* this+0x14d */ char xSize
  /* this+0x14e */ char ySize
  /* this+0x14f */ unsigned char haircolor
  /* this+0x150 */ int extAttPower
  /* this+0x154 */ int extItemDefPower
  /* this+0x158 */ int extMagicAtkPercent
  /* this+0x15c */ int extMagicDefPower
  /* this+0x160 */ int extDodgePercent
  /* this+0x164 */ int extDodgePercent2
  /* this+0x168 */ int criPercent
  /* this+0x16c */ int hitPercent
  /* this+0x170 */ int extAttMPower
  /* this+0x174 */ int isNeverBreakArmor
  /* this+0x178 */ int isNeverBreakWeapon
  /* this+0x17c */ int[0x2] attackDamageWeapon
  /* this+0x184 */ int[0x2] attackDamageArmor
  /* this+0x18c */ int[0x28] resistHandicapState
  /* this+0x22c */ int[0x2] modifyDamge_RNGATK
  /* this+0x234 */ int noDispel
  /* this+0x238 */ int[0x2] HPdrain
  /* this+0x240 */ int[0x2] SPdrain
  /* this+0x248 */ int magicImmune
  /* this+0x24c */ int noJamstone
  /* this+0x250 */ int reflectPercent
  /* this+0x254 */ int perfectDamage
  /* this+0x258 */ int hasteAttack
  /* this+0x25c */ int reinCarnation
  /* this+0x260 */ int reduceSpellCastTime
  /* this+0x264 */ int splashRange
  /* this+0x268 */ int reducePercentSP
  /* this+0x26c */ int reducePostDelay
  /* this+0x270 */ struct CLASS_INFO[0x6] classInfo
  /* this+0x2b8 */ struct USER_TARGET_INFO[0x2] userTarInfo
  /* this+0x2e8 */ int plusAttackSpeed
  /* this+0x2ec */ int investigateCount
  /* this+0x2f0 */ int guidedAttackPercent
  /* this+0x2f4 */ int changeMonPercent
  /* this+0x2f8 */ float extDEFPercent
  /* this+0x2fc */ float extMDEFPercent
  /* this+0x300 */ int DEFFluctuation
  /* this+0x304 */ int MDEFFluctuation
  /* this+0x308 */ int neverDie
  /* this+0x30c */ int MATKPercent
  /* this+0x310 */ int MDEFPercent
  /* this+0x314 */ int plusMakerPower
  /* this+0x318 */ char[0x18] LastOpenMailFromName
  /* this+0x330 */ int isChangeShortCutKey
  /* this+0x334 */ struct tagShortCutKey[0x26] ShortCutKey
  /* this+0x440 */ int HPDrain_100
  /* this+0x444 */ short deadCount
  /* this+0x446 */ short m_Body
  /* this+0x448 */ short robe
  /* this+0x44c */ int m_nChrSlotChangeCnt
  /* this+0x450 */ int m_nCharNameChangeCnt
}

struct CharacterInfo::tagParty {
  /* this+0x0 */ struct CharacterInfo::tagParty::<unnamed-tag>::tagConfig Bit

  /* this+0x0 */ unsigned char Config
}

struct CharacterInfo::tagParty::<unnamed-tag>::tagConfig {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char bRefuseJoinMsg
  /* this(bf)+0x0:0x1 len(0x7) */ unsigned char bReserved
}

struct CharacterTimeInfo {
  /* this+0x0 */ unsigned long SpeedMount
  /* this+0x4 */ unsigned long connectedTime
  /* this+0x8 */ unsigned long clientLocalConnectTime
  /* this+0xc */ unsigned long TotalUsingTime
  /* this+0x10 */ int HPAcceleration
  /* this+0x14 */ int SPAcceleration
  /* this+0x18 */ unsigned long lastPacketArrivedTime
  /* this+0x1c */ unsigned long LastHPPlusTime
  /* this+0x20 */ unsigned long LastSPPlusTime
  /* this+0x24 */ unsigned long HPLastHealTime
  /* this+0x28 */ unsigned long SPLastHealTime
  /* this+0x2c */ unsigned long AttReqLastTime
  /* this+0x30 */ unsigned long LastAttackedTime
  /* this+0x34 */ unsigned long LastCharInfoSaveTime
  /* this+0x38 */ unsigned long lastMannerTime
  /* this+0x3c */ unsigned long lastPKMannerTime
  /* this+0x40 */ unsigned long DamageNoMotionTime
  /* this+0x44 */ unsigned long SightRange
  /* this+0x48 */ unsigned long SightplusAttackPower
  /* this+0x4c */ unsigned long PlusDefencePowerInAcolyte
  /* this+0x50 */ unsigned long HPPartyNotifyTime
  /* this+0x54 */ unsigned long LastNPCEventAnswerTime
  /* this+0x58 */ unsigned long LastClientTime
  /* this+0x5c */ int ChangeSpeed
  /* this+0x60 */ int ChangeSpeedTime
  /* this+0x64 */ unsigned long HSvrAliveTime
}

struct ClientCache {
  /* this+0x0 */ int AID
  /* this+0x4 */ int Index
  /* this+0x8 */ unsigned long MoveLastTime
  /* this+0xc */ unsigned long ConnectedTime
}

union Closure {
  /* this+0x0 */ struct CClosure c

  /* this+0x0 */ struct LClosure l

}

struct CollideInfo {
  /* this+0x0 */ class std::vector<CCharacter *,std::allocator<CCharacter *> > * sectionList
  /* this+0x4 */ int count
}

struct CommonItemInfo {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ int count
  /* this+0x6 */ unsigned short ServerItemType
  /* this+0x8 */ unsigned short Type
  /* this+0xa */ bool IsIdentified
  /* this+0xb */ bool IsDamaged
  /* this+0xc */ unsigned char refiningLevel
  /* this+0xd */ struct EQUIPSLOTINFO slot

  /* this+0x15 */ __int64 UniqueSerialNum
  /* this+0x1d */ long HireExpireDate
}

struct ConsControl {
  /* this+0x0 */ struct expdesc v

  /* this+0x18 */ struct expdesc * t
  /* this+0x1c */ int nh
  /* this+0x20 */ int na
  /* this+0x24 */ int tostore
}

class CountDamaged {
  /* this+0x0 */ int m_value
  public void CountDamaged()
  public void CountDamaged::operator()(class IVItItem *)
  public int Value()
}

struct DBAUCTIONINFO {
  /* this+0x0 */ unsigned long AuctionID
  /* this+0x4 */ unsigned long ZoneServerID
  /* this+0x8 */ unsigned long AID
  /* this+0xc */ unsigned long GID
  /* this+0x10 */ char[0x18] SellerName
  /* this+0x28 */ unsigned long BuyerAID
  /* this+0x2c */ unsigned long BuyerGID
  /* this+0x30 */ char[0x18] BuyerName
  /* this+0x48 */ unsigned long NowPrice
  /* this+0x4c */ unsigned long MaxPrice
  /* this+0x50 */ struct AUCTIONTIME EndTime

  /* this+0x58 */ int AuctionType
  /* this+0x5c */ char[0x28] Item
  /* this+0x84 */ unsigned long ItemLen
}

class DES {
  /* this+0x0 */ unsigned char[0x40] key
  /* this+0x40 */ unsigned char[0x30][0x10] K
  protected void DES::doIt(unsigned char *, const unsigned long, int)
  public void DES::DES(const unsigned char *)
  public void ~DES()
  public void DES::setKey(const unsigned char *)
  public void encrypt(unsigned char *, const unsigned long)
  public void DES::decrypt(unsigned char *, const unsigned long)
  public void __dflt_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct DISPLAYCONFIG_2DREGION {
  /* this+0x0 */ unsigned int cx
  /* this+0x4 */ unsigned int cy
}

struct DISPLAYCONFIG_ADAPTER_NAME {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this+0x14 */ wchar_t[0x80] adapterDevicePath
}

struct DISPLAYCONFIG_DEVICE_INFO_HEADER {
  /* this+0x0 */ enum DISPLAYCONFIG_DEVICE_INFO_TYPE type
  /* this+0x4 */ unsigned int size
  /* this+0x8 */ struct _LUID adapterId

  /* this+0x10 */ unsigned int id
}

struct DISPLAYCONFIG_MODE_INFO {
  /* this+0x0 */ enum DISPLAYCONFIG_MODE_INFO_TYPE infoType
  /* this+0x4 */ unsigned int id
  /* this+0x8 */ struct _LUID adapterId

  /* this+0x10 */ struct DISPLAYCONFIG_TARGET_MODE targetMode

  /* this+0x10 */ struct DISPLAYCONFIG_SOURCE_MODE sourceMode

}

struct DISPLAYCONFIG_PATH_INFO {
  /* this+0x0 */ struct DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo

  /* this+0x14 */ struct DISPLAYCONFIG_PATH_TARGET_INFO targetInfo

  /* this+0x44 */ unsigned int flags
}

struct DISPLAYCONFIG_PATH_SOURCE_INFO {
  /* this+0x0 */ struct _LUID adapterId

  /* this+0x8 */ unsigned int id
  /* this+0xc */ unsigned int modeInfoIdx
  /* this+0x10 */ unsigned int statusFlags
}

struct DISPLAYCONFIG_PATH_TARGET_INFO {
  /* this+0x0 */ struct _LUID adapterId

  /* this+0x8 */ unsigned int id
  /* this+0xc */ unsigned int modeInfoIdx
  /* this+0x10 */ enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology
  /* this+0x14 */ enum DISPLAYCONFIG_ROTATION rotation
  /* this+0x18 */ enum DISPLAYCONFIG_SCALING scaling
  /* this+0x1c */ struct DISPLAYCONFIG_RATIONAL refreshRate

  /* this+0x24 */ enum DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering
  /* this+0x28 */ int targetAvailable
  /* this+0x2c */ unsigned int statusFlags
}

struct DISPLAYCONFIG_RATIONAL {
  /* this+0x0 */ unsigned int Numerator
  /* this+0x4 */ unsigned int Denominator
}

struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this(bf)+0x14:0x0 len(0x1) */ unsigned int bootPersistenceOn
  /* this(bf)+0x14:0x1 len(0x1f) */ unsigned int reserved
  /* this+0x14 */ unsigned int value
}

struct DISPLAYCONFIG_SOURCE_DEVICE_NAME {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this+0x14 */ wchar_t[0x20] viewGdiDeviceName
}

struct DISPLAYCONFIG_SOURCE_MODE {
  /* this+0x0 */ unsigned int width
  /* this+0x4 */ unsigned int height
  /* this+0x8 */ enum DISPLAYCONFIG_PIXELFORMAT pixelFormat
  /* this+0xc */ struct _POINTL position

}

struct DISPLAYCONFIG_TARGET_DEVICE_NAME {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this+0x14 */ struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags

  /* this+0x18 */ enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology
  /* this+0x1c */ unsigned short edidManufactureId
  /* this+0x1e */ unsigned short edidProductCodeId
  /* this+0x20 */ unsigned int connectorInstance
  /* this+0x24 */ wchar_t[0x40] monitorFriendlyDeviceName
  /* this+0xa4 */ wchar_t[0x80] monitorDevicePath
}

struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned int friendlyNameFromEdid
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned int friendlyNameForced
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned int edidIdsValid
  /* this(bf)+0x0:0x3 len(0x1d) */ unsigned int reserved
  /* this+0x0 */ unsigned int value
}

struct DISPLAYCONFIG_TARGET_MODE {
  /* this+0x0 */ struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo

}

struct DISPLAYCONFIG_TARGET_PREFERRED_MODE {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this+0x14 */ unsigned int width
  /* this+0x18 */ unsigned int height
  /* this+0x20 */ struct DISPLAYCONFIG_TARGET_MODE targetMode

}

struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
  /* this+0x0 */ unsigned __int64 pixelRate
  /* this+0x8 */ struct DISPLAYCONFIG_RATIONAL hSyncFreq

  /* this+0x10 */ struct DISPLAYCONFIG_RATIONAL vSyncFreq

  /* this+0x18 */ struct DISPLAYCONFIG_2DREGION activeSize

  /* this+0x20 */ struct DISPLAYCONFIG_2DREGION totalSize

  /* this+0x28 */ unsigned int videoStandard
  /* this+0x2c */ enum DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering
}

struct DLGITEMTEMPLATE {
  /* this+0x0 */ unsigned long style
  /* this+0x4 */ unsigned long dwExtendedStyle
  /* this+0x8 */ short x
  /* this+0xa */ short y
  /* this+0xc */ short cx
  /* this+0xe */ short cy
  /* this+0x10 */ unsigned short id
}

struct DLGTEMPLATE {
  /* this+0x0 */ unsigned long style
  /* this+0x4 */ unsigned long dwExtendedStyle
  /* this+0x8 */ unsigned short cdit
  /* this+0xa */ short x
  /* this+0xc */ short y
  /* this+0xe */ short cx
  /* this+0x10 */ short cy
}

class DName {
  public void DName(__int64)
  public void DName(unsigned __int64)
  public void DName(class DName *)
  public void DName(enum DNameStatus)
  public void DName(const char * &, char)
  public void DName(const char *)
  public void DName(const class DName &)
  public void DName(char)
  public void DName()
  public int isValid()
  public int isEmpty()
  public enum DNameStatus status()
  public void clearStatus()
  public class DName & setPtrRef()
  public int isPtrRef()
  public int isUDC()
  public void setIsUDC()
  public int isUDTThunk()
  public void setIsUDTThunk()
  public int isArray()
  public void setIsArray()
  public int isNoTE()
  public void setIsNoTE()
  public int isPinPtr()
  public void setIsPinPtr()
  public int isComArray()
  public void setIsComArray()
  public int isVCallThunk()
  public void setIsVCallThunk()
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public char * getString(char *, int)
  public class DName operator+(enum DNameStatus)
  public class DName operator+(class DName *)
  public class DName operator+(char)
  public class DName operator+(const class DName &)
  public class DName operator+(const char *)
  public class DName & operator+=(const class DName &)
  public class DName & operator+=(enum DNameStatus)
  public class DName & operator+=(class DName *)
  public class DName & operator+=(const char *)
  public class DName & operator+=(char)
  public class DName & operator|=(const class DName &)
  public class DName & operator=(enum DNameStatus)
  public class DName & operator=(class DName *)
  public class DName & operator=(char)
  public class DName & operator=(const class DName &)
  public class DName & operator=(const char *)
  /* this+0x0 */ class DNameNode * node
  /* this(bf)+0x4:0x0 len(0x8) */ enum DNameStatus stat
  /* this(bf)+0x4:0x8 len(0x1) */ unsigned int isIndir
  /* this(bf)+0x4:0x9 len(0x1) */ unsigned int isAUDC
  /* this(bf)+0x4:0xa len(0x1) */ unsigned int isAUDTThunk
  /* this(bf)+0x4:0xb len(0x1) */ unsigned int isArrayType
  /* this(bf)+0x4:0xc len(0x1) */ unsigned int NoTE
  /* this(bf)+0x4:0xd len(0x1) */ unsigned int pinPtr
  /* this(bf)+0x4:0xe len(0x1) */ unsigned int comArray
  /* this(bf)+0x4:0xf len(0x1) */ unsigned int vcallThunk
  private void append(class DNameNode *)
  private void doPchar(const char *, int)
}

class DNameNode {
    *
  protected void DNameNode(const class DNameNode &)
  protected void DNameNode()
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class DNameNode & operator=(const class DNameNode &)
}

class DNameStatusNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ enum DNameStatus me
  /* this+0x8 */ int myLen
  public void DNameStatusNode(const class DNameStatusNode &)
  private void DNameStatusNode(enum DNameStatus)
  public static class DNameStatusNode * make(enum DNameStatus)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class DNameStatusNode & operator=(const class DNameStatusNode &)
}

struct DRVCONFIGINFOEX {
  /* this+0x0 */ unsigned long dwDCISize
  /* this+0x4 */ const wchar_t * lpszDCISectionName
  /* this+0x8 */ const wchar_t * lpszDCIAliasName
  /* this+0xc */ unsigned long dnDevNode
}

struct DYNAMIC_SKILLINFO {
  /* this+0x0 */ unsigned short SKID
  /* this+0x4 */ int orgDispLevel
}

struct DisappearAmount {
  /* this+0x0 */ unsigned short ITEMID
  /* this+0x4 */ int msTime
  /* this+0x8 */ unsigned long stampTime
  /* this+0xc */ int Amount
  public void DisappearAmount(const struct DisappearAmount &)
  public void DisappearAmount(const int, const int, const unsigned long, const int)
  public bool operator==(const struct DisappearAmount &)
}

struct DisappearAmountPrority {
  public bool operator()(const struct DisappearAmount &, const struct DisappearAmount &)
}

struct DispLocals {
  /* this+0x0 */ unsigned short wUser1
  /* this+0x2 */ unsigned short wUser2
  /* this+0x4 */ unsigned short savCntrl
  /* this+0x6 */ unsigned short setCntrl
  /* this+0x8 */ unsigned short StatusWord
  /* this+0xa */  Fac
  /* this+0x14 */ unsigned long Function
  /* this+0x18 */ unsigned char ErrorType
  /* this+0x19 */ unsigned char bUser3
  /* this+0x1a */ unsigned long typ
  /* this+0x1e */ unsigned long nam
  /* this+0x22 */ unsigned __int64 arg1
  /* this+0x2a */ unsigned __int64 arg2
  /* this+0x32 */ unsigned __int64 retval
  /* this+0x3a */ unsigned char savebuf
}

struct DumpState {
  /* this+0x0 */ struct lua_State * L
  /* this+0x4 */ function  * writer
  /* this+0x8 */ void * data
  /* this+0xc */ int strip
  /* this+0x10 */ int status
}

struct EATING_ITEM_INVENTORY {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ unsigned short count
  /* this+0x4 */ bool IsIdentified
  /* this+0x8 */ __int64 unique_identity_numberV2
  /* this+0x10 */ long hire_expire_date
  /* this+0x14 */ bool IsDamaged
  /* this+0x15 */ unsigned char RefiningLevel
  /* this+0x16 */ struct EQUIPSLOTINFO slot

  /* this+0x1e */ char[0x18] DropMonsterName
}

struct EFFECTIVE_INFO {
  /* this+0x0 */ unsigned long time
  /* this+0x4 */ int[0x3] val
  /* this+0x10 */ unsigned int Attr
    /* this+0x14 */ int bDeleteDBWhenReset
}

struct EHExceptionRecord {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ struct _EXCEPTION_RECORD * ExceptionRecord
  /* this+0xc */ void * ExceptionAddress
  /* this+0x10 */ unsigned long NumberParameters
    /* this+0x14 */ struct EHExceptionRecord::EHParameters params

}

struct EHExceptionRecord::EHParameters {
  /* this+0x0 */ unsigned long magicNumber
  /* this+0x4 */ void * pExceptionObject
  /* this+0x8 */ const struct _s_ThrowInfo * pThrowInfo
}

struct EHRegistrationNode {
  /* this+0x0 */ struct EHRegistrationNode * pNext
  /* this+0x4 */ void * frameHandler
  /* this+0x8 */ int state
}

struct ENEMY_INFO {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long attackinglastTime
}

struct ENTRY_QUEUE_APPLY_INFO {
  public void ENTRY_QUEUE_APPLY_INFO(const unsigned long, const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const short, const short)
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ char[0x18] charName
  /* this+0x20 */ short job
  /* this+0x22 */ short level
}

struct EQUIPMENTITEM_EXTRAINFO {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ unsigned short location
  /* this+0x8 */ unsigned short WearState
  /* this+0xa */ bool IsDamaged
  /* this+0xb */ unsigned char RefiningLevel
  /* this+0xc */ struct EQUIPSLOTINFO slot

}

struct EQUIPMENTITEM_EXTRAINFO2 {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ unsigned short location
  /* this+0x8 */ unsigned short WearState
  /* this+0xa */ bool IsDamaged
  /* this+0xb */ unsigned char RefiningLevel
  /* this+0xc */ struct EQUIPSLOTINFO slot

  /* this+0x14 */ long HireExpireDate
}

struct EQUIPMENTITEM_EXTRAINFO3 {
  EQUIPMENTITEM_EXTRAINFO2, offset = 0x0

  /* this+0x18 */ unsigned short bindOnEquipType
}

struct EQUIPMENTITEM_EXTRAINFO301 {
  EQUIPMENTITEM_EXTRAINFO3, offset = 0x0

  /* this+0x1a */ unsigned short wItemSpriteNumber
}

struct EQUIPMENT_ITEMINFO_PC {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ struct SLOTINFO slot

  /* this+0x12 */ unsigned char wearState
}

struct EQUIPSLOTINFO {
  /* this+0x0 */ unsigned short[0x4] info
}

class ESTATE {
    *
  public bool ESTATE::IsExistScript()
  public bool ESTATE::IsGC_POISON()
  public enum RESET_EFST_TYPE ESTATE::IsWANDERERandMINSTRELoverlapDeny()
  public void ESTATE::SetComplete(class CActor *, const int, const int, const int, const int)
  public bool ESTATE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public bool ESTATE::ResetCheckup(class CActor *, const int, struct EFFECTIVE_INFO *)
  public void ESTATE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE::Process(class CActor *, struct EFFECTIVE_INFO * const)
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > ESTATE::GetName()
  public const int GetID()
  public bool IsDeBuff()
  public void SetDeBuff(bool)
  public bool IsSave()
  public void SetSave(bool)
  public bool IsResetDead()
  public void SetResetDead(bool)
  public bool IsResetDispel()
  public void SetResetDispel(bool)
  public bool IsResetCLEARANCE()
  public void SetResetCLEARANCE(bool)
  public bool IsResetMADOGEAR()
  public void SetResetMADOGEAR(const bool)
  public bool IsIgnorePretendDead()
  public void SetIgnorePretendDead(bool)
  public bool ESTATE::IsResetPretendDead()
  public void SetSend(bool)
  public void SetSendMultiCast(const bool)
  public bool IsSend2()
  public bool IsSendMultiCast()
  public bool IsActorAppearance()
  public void SetActorAppearance(bool)
  public void SetBackwardCompatibilitySend(const bool)
  public bool IsBackwardCompatibilitySend()
  public void ESTATE(const class ESTATE &)
  public void ESTATE::ESTATE(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void ESTATE::~ESTATE()
  /* this+0x4 */ const int m_EfstID
  /* this+0x8 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_name

  /* this+0x24 */ bool m_isResetDead
  /* this+0x25 */ bool m_isResetDispel
  /* this+0x26 */ bool m_isSave
  /* this+0x27 */ bool m_isSend
  /* this+0x28 */ bool m_isSendMultiCast
  /* this+0x29 */ bool m_isIgnorePretendDead
  /* this+0x2a */ bool m_isDeBuff
  /* this+0x2b */ bool m_isResetCLEARANCE
  /* this+0x2c */ bool m_isActorAppearance
  /* this+0x2d */ bool m_isBackwardCompatibilitySend
  /* this+0x2e */ bool m_isResetMADOGEAR
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_2011RWC {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_2011RWC(const class ESTATE_2011RWC &)
  public void ESTATE_2011RWC::ESTATE_2011RWC()
  public void ~ESTATE_2011RWC()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ABUNDANCE {
  ESTATE, offset = 0x0

  public void ESTATE_ABUNDANCE(const class ESTATE_ABUNDANCE &)
  public void ESTATE_ABUNDANCE::ESTATE_ABUNDANCE()
  public void ~ESTATE_ABUNDANCE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_AB_SECRAMENT {
  ESTATE, offset = 0x0

  public bool ESTATE_AB_SECRAMENT::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_AB_SECRAMENT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_AB_SECRAMENT::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_AB_SECRAMENT(const class ESTATE_AB_SECRAMENT &)
  public void ESTATE_AB_SECRAMENT::ESTATE_AB_SECRAMENT()
  public void ~ESTATE_AB_SECRAMENT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ACARAJE {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_ACARAJE(const class ESTATE_ACARAJE &)
  public void ESTATE_ACARAJE::ESTATE_ACARAJE()
  public void ~ESTATE_ACARAJE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ACCELERATION {
  ESTATE, offset = 0x0

  public bool ESTATE_ACCELERATION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ACCELERATION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ACCELERATION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ACCELERATION(const class ESTATE_ACCELERATION &)
  public void ESTATE_ACCELERATION::ESTATE_ACCELERATION()
  public void ~ESTATE_ACCELERATION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ACTIVE_MONSTER_TRANSFORM {
  ESTATE, offset = 0x0

  public bool ESTATE_ACTIVE_MONSTER_TRANSFORM::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ACTIVE_MONSTER_TRANSFORM(const class ESTATE_ACTIVE_MONSTER_TRANSFORM &)
  public void ESTATE_ACTIVE_MONSTER_TRANSFORM::ESTATE_ACTIVE_MONSTER_TRANSFORM()
  public void ~ESTATE_ACTIVE_MONSTER_TRANSFORM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ADORAMUS {
  ESTATE, offset = 0x0

  public bool ESTATE_ADORAMUS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ADORAMUS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ADORAMUS::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ADORAMUS(const class ESTATE_ADORAMUS &)
  public void ESTATE_ADORAMUS::ESTATE_ADORAMUS()
  public void ~ESTATE_ADORAMUS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ADRENALINE {
  ESTATE, offset = 0x0

  public void ESTATE_ADRENALINE(const class ESTATE_ADRENALINE &)
  public void ESTATE_ADRENALINE::ESTATE_ADRENALINE()
  public void ~ESTATE_ADRENALINE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ADRENALINE2 {
  ESTATE, offset = 0x0

  public void ESTATE_ADRENALINE2(const class ESTATE_ADRENALINE2 &)
  public void ESTATE_ADRENALINE2::ESTATE_ADRENALINE2()
  public void ~ESTATE_ADRENALINE2()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_AKAITSUKI {
  ESTATE, offset = 0x0

  public bool ESTATE_AKAITSUKI::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_AKAITSUKI::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_AKAITSUKI::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_AKAITSUKI::Operation(class CCharacter *, const int, const int, const int)
  public void ESTATE_AKAITSUKI(const class ESTATE_AKAITSUKI &)
  public void ESTATE_AKAITSUKI::ESTATE_AKAITSUKI()
  public void ~ESTATE_AKAITSUKI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ALL_RIDING {
  ESTATE, offset = 0x0

  public void ESTATE_ALL_RIDING(const class ESTATE_ALL_RIDING &)
  public void ESTATE_ALL_RIDING::ESTATE_ALL_RIDING()
  public void ~ESTATE_ALL_RIDING()
  public bool ESTATE_ALL_RIDING::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ALL_RIDING::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ALL_RIDING::ResetComplete(class CActor *, const int, const int, const int)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ALL_RIDING_REUSE_LIMIT {
  ESTATE, offset = 0x0

  public void ESTATE_ALL_RIDING_REUSE_LIMIT(const class ESTATE_ALL_RIDING_REUSE_LIMIT &)
  public void ESTATE_ALL_RIDING_REUSE_LIMIT::ESTATE_ALL_RIDING_REUSE_LIMIT()
  public void ~ESTATE_ALL_RIDING_REUSE_LIMIT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ANALYZE {
  ESTATE, offset = 0x0

  public bool ESTATE_ANALYZE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ANALYZE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ANALYZE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ANALYZE(const class ESTATE_ANALYZE &)
  public void ESTATE_ANALYZE::ESTATE_ANALYZE()
  public void ~ESTATE_ANALYZE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ANGELUS {
  ESTATE, offset = 0x0

  public void ESTATE_ANGELUS(const class ESTATE_ANGELUS &)
  public void ESTATE_ANGELUS::ESTATE_ANGELUS()
  public void ~ESTATE_ANGELUS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ANGEL_PROTECT {
  ESTATE, offset = 0x0

  public void ESTATE_ANGEL_PROTECT(const class ESTATE_ANGEL_PROTECT &)
  public void ESTATE_ANGEL_PROTECT::ESTATE_ANGEL_PROTECT()
  public void ~ESTATE_ANGEL_PROTECT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ANGRIFFS_MODUS {
  ESTATE, offset = 0x0

  public bool ESTATE_ANGRIFFS_MODUS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ANGRIFFS_MODUS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ANGRIFFS_MODUS::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ANGRIFFS_MODUS(const class ESTATE_ANGRIFFS_MODUS &)
  public void ESTATE_ANGRIFFS_MODUS::ESTATE_ANGRIFFS_MODUS()
  public void ~ESTATE_ANGRIFFS_MODUS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ANKLESNARE {
  ESTATE, offset = 0x0

  public void ESTATE_ANKLESNARE(const class ESTATE_ANKLESNARE &)
  public void ESTATE_ANKLESNARE::ESTATE_ANKLESNARE()
  public void ~ESTATE_ANKLESNARE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_AQUAPLAY {
  ESTATE, offset = 0x0

  public bool ESTATE_AQUAPLAY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_AQUAPLAY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_AQUAPLAY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_AQUAPLAY(const class ESTATE_AQUAPLAY &)
  public void ESTATE_AQUAPLAY::ESTATE_AQUAPLAY()
  public void ~ESTATE_AQUAPLAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_AQUAPLAY_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_AQUAPLAY_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_AQUAPLAY_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_AQUAPLAY_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_AQUAPLAY_OPTION(const class ESTATE_AQUAPLAY_OPTION &)
  public void ESTATE_AQUAPLAY_OPTION::ESTATE_AQUAPLAY_OPTION()
  public void ~ESTATE_AQUAPLAY_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ARMORSCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_ARMORSCROLL(const class ESTATE_ARMORSCROLL &)
  public void ESTATE_ARMORSCROLL::ESTATE_ARMORSCROLL()
  public void ~ESTATE_ARMORSCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ARMOR_PROPERTY {
  ESTATE, offset = 0x0

  public void ESTATE_ARMOR_PROPERTY(const class ESTATE_ARMOR_PROPERTY &)
  public void ESTATE_ARMOR_PROPERTY::ESTATE_ARMOR_PROPERTY()
  public void ~ESTATE_ARMOR_PROPERTY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ASPERSIO {
  ESTATE, offset = 0x0

  public void ESTATE_ASPERSIO(const class ESTATE_ASPERSIO &)
  public void ESTATE_ASPERSIO::ESTATE_ASPERSIO()
  public void ~ESTATE_ASPERSIO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ASSUMPTIO {
  ESTATE, offset = 0x0

  public void ESTATE_ASSUMPTIO(const class ESTATE_ASSUMPTIO &)
  public void ESTATE_ASSUMPTIO::ESTATE_ASSUMPTIO()
  public void ~ESTATE_ASSUMPTIO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ASSUMPTIO2 {
  ESTATE, offset = 0x0

  public bool ESTATE_ASSUMPTIO2::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ASSUMPTIO2::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ASSUMPTIO2::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ASSUMPTIO2(const class ESTATE_ASSUMPTIO2 &)
  public void ESTATE_ASSUMPTIO2::ESTATE_ASSUMPTIO2()
  public void ~ESTATE_ASSUMPTIO2()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ATKER_ASPD {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_ATKER_ASPD(const class ESTATE_ATKER_ASPD &)
  public void ESTATE_ATKER_ASPD::ESTATE_ATKER_ASPD()
  public void ~ESTATE_ATKER_ASPD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ATKER_BLOOD {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_ATKER_BLOOD(const class ESTATE_ATKER_BLOOD &)
  public void ESTATE_ATKER_BLOOD::ESTATE_ATKER_BLOOD()
  public void ~ESTATE_ATKER_BLOOD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ATKER_MOVESPEED {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_ATKER_MOVESPEED(const class ESTATE_ATKER_MOVESPEED &)
  public void ESTATE_ATKER_MOVESPEED::ESTATE_ATKER_MOVESPEED()
  public void ~ESTATE_ATKER_MOVESPEED()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ATTHASTE_CASH {
  ESTATE, offset = 0x0

  public void ESTATE_ATTHASTE_CASH::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ATTHASTE_CASH::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ATTHASTE_CASH(const class ESTATE_ATTHASTE_CASH &)
  public void ESTATE_ATTHASTE_CASH::ESTATE_ATTHASTE_CASH()
  public void ~ESTATE_ATTHASTE_CASH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ATTHASTE_POTION1 {
  ESTATE, offset = 0x0

  public void ESTATE_ATTHASTE_POTION1(const class ESTATE_ATTHASTE_POTION1 &)
  public void ESTATE_ATTHASTE_POTION1::ESTATE_ATTHASTE_POTION1()
  public void ~ESTATE_ATTHASTE_POTION1()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ATTHASTE_POTION2 {
  ESTATE, offset = 0x0

  public void ESTATE_ATTHASTE_POTION2(const class ESTATE_ATTHASTE_POTION2 &)
  public void ESTATE_ATTHASTE_POTION2::ESTATE_ATTHASTE_POTION2()
  public void ~ESTATE_ATTHASTE_POTION2()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ATTHASTE_POTION3 {
  ESTATE, offset = 0x0

  public void ESTATE_ATTHASTE_POTION3(const class ESTATE_ATTHASTE_POTION3 &)
  public void ESTATE_ATTHASTE_POTION3::ESTATE_ATTHASTE_POTION3()
  public void ~ESTATE_ATTHASTE_POTION3()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_AURABLADE {
  ESTATE, offset = 0x0

  public void ESTATE_AURABLADE(const class ESTATE_AURABLADE &)
  public void ESTATE_AURABLADE::ESTATE_AURABLADE()
  public void ~ESTATE_AURABLADE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_AUTOGUARD {
  ESTATE, offset = 0x0

  public void ESTATE_AUTOGUARD(const class ESTATE_AUTOGUARD &)
  public void ESTATE_AUTOGUARD::ESTATE_AUTOGUARD()
  public void ~ESTATE_AUTOGUARD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_AUTOSHADOWSPELL {
  ESTATE, offset = 0x0

  public void ESTATE_AUTOSHADOWSPELL(const class ESTATE_AUTOSHADOWSPELL &)
  public void ESTATE_AUTOSHADOWSPELL::ESTATE_AUTOSHADOWSPELL()
  public void ~ESTATE_AUTOSHADOWSPELL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_AUTOSPELL {
  ESTATE, offset = 0x0

  public void ESTATE_AUTOSPELL(const class ESTATE_AUTOSPELL &)
  public void ESTATE_AUTOSPELL::ESTATE_AUTOSPELL()
  public void ~ESTATE_AUTOSPELL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BANANA_BOMB {
  ESTATE, offset = 0x0

  public bool ESTATE_BANANA_BOMB::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BANANA_BOMB::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BANANA_BOMB::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BANANA_BOMB(const class ESTATE_BANANA_BOMB &)
  public void ESTATE_BANANA_BOMB::ESTATE_BANANA_BOMB()
  public void ~ESTATE_BANANA_BOMB()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BANANA_BOMB_SITDOWN_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_BANANA_BOMB_SITDOWN_POSTDELAY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BANANA_BOMB_SITDOWN_POSTDELAY(const class ESTATE_BANANA_BOMB_SITDOWN_POSTDELAY &)
  public void ESTATE_BANANA_BOMB_SITDOWN_POSTDELAY::ESTATE_BANANA_BOMB_SITDOWN_POSTDELAY()
  public void ~ESTATE_BANANA_BOMB_SITDOWN_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BANDING {
  ESTATE, offset = 0x0

  public bool ESTATE_BANDING::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BANDING::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BANDING::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BANDING(const class ESTATE_BANDING &)
  public void ESTATE_BANDING::ESTATE_BANDING()
  public void ~ESTATE_BANDING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BANDING_DEFENCE {
  ESTATE, offset = 0x0

  public void ESTATE_BANDING_DEFENCE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BANDING_DEFENCE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BANDING_DEFENCE(const class ESTATE_BANDING_DEFENCE &)
  public void ESTATE_BANDING_DEFENCE::ESTATE_BANDING_DEFENCE()
  public void ~ESTATE_BANDING_DEFENCE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BARRIER {
  ESTATE, offset = 0x0

  public void ESTATE_BARRIER(const class ESTATE_BARRIER &)
  public void ESTATE_BARRIER::ESTATE_BARRIER()
  public void ~ESTATE_BARRIER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BASILICA {
  ESTATE, offset = 0x0

  public void ESTATE_BASILICA(const class ESTATE_BASILICA &)
  public void ESTATE_BASILICA::ESTATE_BASILICA()
  public void ~ESTATE_BASILICA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BATTLESCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_BATTLESCROLL(const class ESTATE_BATTLESCROLL &)
  public void ESTATE_BATTLESCROLL::ESTATE_BATTLESCROLL()
  public void ~ESTATE_BATTLESCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BEER_BOTTLE_CAP {
  ESTATE, offset = 0x0

  public bool ESTATE_BEER_BOTTLE_CAP::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BEER_BOTTLE_CAP::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BEER_BOTTLE_CAP::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BEER_BOTTLE_CAP(const class ESTATE_BEER_BOTTLE_CAP &)
  public void ESTATE_BEER_BOTTLE_CAP::ESTATE_BEER_BOTTLE_CAP()
  public void ~ESTATE_BEER_BOTTLE_CAP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BENEDICTIO {
  ESTATE, offset = 0x0

  public void ESTATE_BENEDICTIO(const class ESTATE_BENEDICTIO &)
  public void ESTATE_BENEDICTIO::ESTATE_BENEDICTIO()
  public void ~ESTATE_BENEDICTIO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BERSERK {
  ESTATE, offset = 0x0

  public void ESTATE_BERSERK(const class ESTATE_BERSERK &)
  public void ESTATE_BERSERK::ESTATE_BERSERK()
  public void ~ESTATE_BERSERK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BEYOND_OF_WARCRY {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_BEYOND_OF_WARCRY::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_BEYOND_OF_WARCRY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BEYOND_OF_WARCRY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BEYOND_OF_WARCRY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BEYOND_OF_WARCRY(const class ESTATE_BEYOND_OF_WARCRY &)
  public void ESTATE_BEYOND_OF_WARCRY::ESTATE_BEYOND_OF_WARCRY()
  public void ~ESTATE_BEYOND_OF_WARCRY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BLADESTOP {
  ESTATE, offset = 0x0

  public void ESTATE_BLADESTOP(const class ESTATE_BLADESTOP &)
  public void ESTATE_BLADESTOP::ESTATE_BLADESTOP()
  public void ~ESTATE_BLADESTOP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BLAST {
  ESTATE, offset = 0x0

  public bool ESTATE_BLAST::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BLAST::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BLAST::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BLAST(const class ESTATE_BLAST &)
  public void ESTATE_BLAST::ESTATE_BLAST()
  public void ~ESTATE_BLAST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BLAST_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_BLAST_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BLAST_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BLAST_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BLAST_OPTION(const class ESTATE_BLAST_OPTION &)
  public void ESTATE_BLAST_OPTION::ESTATE_BLAST_OPTION()
  public void ~ESTATE_BLAST_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BLESSING {
  ESTATE, offset = 0x0

  public void ESTATE_BLESSING(const class ESTATE_BLESSING &)
  public void ESTATE_BLESSING::ESTATE_BLESSING()
  public void ~ESTATE_BLESSING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BLOODING {
  ESTATE, offset = 0x0

  public void ESTATE_BLOODING(const class ESTATE_BLOODING &)
  public void ESTATE_BLOODING::ESTATE_BLOODING()
  public void ~ESTATE_BLOODING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BLOODYLUST {
  ESTATE, offset = 0x0

  public bool ESTATE_BLOODYLUST::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BLOODYLUST::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BLOODYLUST::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BLOODYLUST(const class ESTATE_BLOODYLUST &)
  public void ESTATE_BLOODYLUST::ESTATE_BLOODYLUST()
  public void ~ESTATE_BLOODYLUST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BLOOD_SUCKER {
  ESTATE, offset = 0x0

  public bool ESTATE_BLOOD_SUCKER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BLOOD_SUCKER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BLOOD_SUCKER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BLOOD_SUCKER(const class ESTATE_BLOOD_SUCKER &)
  public void ESTATE_BLOOD_SUCKER::ESTATE_BLOOD_SUCKER()
  public void ~ESTATE_BLOOD_SUCKER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BODYPAINT {
  ESTATE, offset = 0x0

  public bool ESTATE_BODYPAINT::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BODYPAINT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BODYPAINT::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BODYPAINT(const class ESTATE_BODYPAINT &)
  public void ESTATE_BODYPAINT::ESTATE_BODYPAINT()
  public void ~ESTATE_BODYPAINT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BOOST500 {
  ESTATE, offset = 0x0

  public bool ESTATE_BOOST500::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_BOOST500::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_BOOST500::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_BOOST500(const class ESTATE_BOOST500 &)
  public void ESTATE_BOOST500::ESTATE_BOOST500()
  public void ~ESTATE_BOOST500()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_BUCHEDENOEL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_BUCHEDENOEL(const class ESTATE_BUCHEDENOEL &)
  public void ESTATE_BUCHEDENOEL::ESTATE_BUCHEDENOEL()
  public void ~ESTATE_BUCHEDENOEL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CAMOUFLAGE {
  ESTATE, offset = 0x0

  public bool ESTATE_CAMOUFLAGE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CAMOUFLAGE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CAMOUFLAGE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CAMOUFLAGE(const class ESTATE_CAMOUFLAGE &)
  public void ESTATE_CAMOUFLAGE::ESTATE_CAMOUFLAGE()
  public void ~ESTATE_CAMOUFLAGE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CARTBOOST {
  ESTATE, offset = 0x0

  public void ESTATE_CARTBOOST(const class ESTATE_CARTBOOST &)
  public void ESTATE_CARTBOOST::ESTATE_CARTBOOST()
  public void ~ESTATE_CARTBOOST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CASH_BOSS_ALARM {
  ESTATE, offset = 0x0

  public void ESTATE_CASH_BOSS_ALARM(const class ESTATE_CASH_BOSS_ALARM &)
  public void ESTATE_CASH_BOSS_ALARM::ESTATE_CASH_BOSS_ALARM()
  public void ~ESTATE_CASH_BOSS_ALARM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CASH_DEATHPENALTY {
  ESTATE, offset = 0x0

  public void ESTATE_CASH_DEATHPENALTY(const class ESTATE_CASH_DEATHPENALTY &)
  public void ESTATE_CASH_DEATHPENALTY::ESTATE_CASH_DEATHPENALTY()
  public void ~ESTATE_CASH_DEATHPENALTY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CASH_PLUSEXP {
  ESTATE, offset = 0x0

  public void ESTATE_CASH_PLUSEXP(const class ESTATE_CASH_PLUSEXP &)
  public void ESTATE_CASH_PLUSEXP::ESTATE_CASH_PLUSEXP()
  public void ~ESTATE_CASH_PLUSEXP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CASH_PLUSONLYJOBEXP {
  ESTATE, offset = 0x0

  public void ESTATE_CASH_PLUSONLYJOBEXP(const class ESTATE_CASH_PLUSONLYJOBEXP &)
  public void ESTATE_CASH_PLUSONLYJOBEXP::ESTATE_CASH_PLUSONLYJOBEXP()
  public void ~ESTATE_CASH_PLUSONLYJOBEXP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CASH_RECEIVEITEM {
  ESTATE, offset = 0x0

  public void ESTATE_CASH_RECEIVEITEM(const class ESTATE_CASH_RECEIVEITEM &)
  public void ESTATE_CASH_RECEIVEITEM::ESTATE_CASH_RECEIVEITEM()
  public void ~ESTATE_CASH_RECEIVEITEM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CBC {
  ESTATE, offset = 0x0

  public bool ESTATE_CBC::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CBC::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CBC::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CBC(const class ESTATE_CBC &)
  public void ESTATE_CBC::ESTATE_CBC()
  public void ~ESTATE_CBC()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CBC_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_CBC_POSTDELAY(const class ESTATE_CBC_POSTDELAY &)
  public void ESTATE_CBC_POSTDELAY::ESTATE_CBC_POSTDELAY()
  public void ~ESTATE_CBC_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CHASEWALK2 {
  ESTATE, offset = 0x0

  public void ESTATE_CHASEWALK2(const class ESTATE_CHASEWALK2 &)
  public void ESTATE_CHASEWALK2::ESTATE_CHASEWALK2()
  public void ~ESTATE_CHASEWALK2()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CHILLY_AIR {
  ESTATE, offset = 0x0

  public bool ESTATE_CHILLY_AIR::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CHILLY_AIR::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CHILLY_AIR::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CHILLY_AIR(const class ESTATE_CHILLY_AIR &)
  public void ESTATE_CHILLY_AIR::ESTATE_CHILLY_AIR()
  public void ~ESTATE_CHILLY_AIR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CHILLY_AIR_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_CHILLY_AIR_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CHILLY_AIR_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CHILLY_AIR_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CHILLY_AIR_OPTION(const class ESTATE_CHILLY_AIR_OPTION &)
  public void ESTATE_CHILLY_AIR_OPTION::ESTATE_CHILLY_AIR_OPTION()
  public void ~ESTATE_CHILLY_AIR_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CIRCLE_OF_FIRE {
  ESTATE, offset = 0x0

  public bool ESTATE_CIRCLE_OF_FIRE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CIRCLE_OF_FIRE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CIRCLE_OF_FIRE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CIRCLE_OF_FIRE(const class ESTATE_CIRCLE_OF_FIRE &)
  public void ESTATE_CIRCLE_OF_FIRE::ESTATE_CIRCLE_OF_FIRE()
  public void ~ESTATE_CIRCLE_OF_FIRE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CIRCLE_OF_FIRE_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_CIRCLE_OF_FIRE_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CIRCLE_OF_FIRE_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CIRCLE_OF_FIRE_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public static void ESTATE_CIRCLE_OF_FIRE_OPTION::Operation(class CPC *, const int)
  public void ESTATE_CIRCLE_OF_FIRE_OPTION(const class ESTATE_CIRCLE_OF_FIRE_OPTION &)
  public void ESTATE_CIRCLE_OF_FIRE_OPTION::ESTATE_CIRCLE_OF_FIRE_OPTION()
  public void ~ESTATE_CIRCLE_OF_FIRE_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CLOAKINGEXCEED {
  ESTATE, offset = 0x0

  public bool ESTATE_CLOAKINGEXCEED::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CLOAKINGEXCEED::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CLOAKINGEXCEED::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CLOAKINGEXCEED(const class ESTATE_CLOAKINGEXCEED &)
  public void ESTATE_CLOAKINGEXCEED::ESTATE_CLOAKINGEXCEED()
  public void ~ESTATE_CLOAKINGEXCEED()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CLOUD_KILL {
  ESTATE, offset = 0x0

  public void ESTATE_CLOUD_KILL(const class ESTATE_CLOUD_KILL &)
  public void ESTATE_CLOUD_KILL::ESTATE_CLOUD_KILL()
  public void ~ESTATE_CLOUD_KILL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_COCKTAIL_WARG_BLOOD {
  ESTATE, offset = 0x0

  public bool ESTATE_COCKTAIL_WARG_BLOOD::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_COCKTAIL_WARG_BLOOD::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_COCKTAIL_WARG_BLOOD::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_COCKTAIL_WARG_BLOOD(const class ESTATE_COCKTAIL_WARG_BLOOD &)
  public void ESTATE_COCKTAIL_WARG_BLOOD::ESTATE_COCKTAIL_WARG_BLOOD()
  public void ~ESTATE_COCKTAIL_WARG_BLOOD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_COLD {
  ESTATE, offset = 0x0

  public bool ESTATE_COLD::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_COLD::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_COLD::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_COLD(const class ESTATE_COLD &)
  public void ESTATE_COLD::ESTATE_COLD()
  public void ~ESTATE_COLD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CONCENTRATION {
  ESTATE, offset = 0x0

  public void ESTATE_CONCENTRATION(const class ESTATE_CONCENTRATION &)
  public void ESTATE_CONCENTRATION::ESTATE_CONCENTRATION()
  public void ~ESTATE_CONCENTRATION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_COOLER {
  ESTATE, offset = 0x0

  public bool ESTATE_COOLER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_COOLER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_COOLER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_COOLER(const class ESTATE_COOLER &)
  public void ESTATE_COOLER::ESTATE_COOLER()
  public void ~ESTATE_COOLER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_COOLER_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_COOLER_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_COOLER_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_COOLER_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_COOLER_OPTION(const class ESTATE_COOLER_OPTION &)
  public void ESTATE_COOLER_OPTION::ESTATE_COOLER_OPTION()
  public void ~ESTATE_COOLER_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CRESCENTELBOW {
  ESTATE, offset = 0x0

  public void ESTATE_CRESCENTELBOW(const class ESTATE_CRESCENTELBOW &)
  public void ESTATE_CRESCENTELBOW::ESTATE_CRESCENTELBOW()
  public void ~ESTATE_CRESCENTELBOW()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CRITICALPERCENT {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_CRITICALPERCENT(const class ESTATE_CRITICALPERCENT &)
  public void ESTATE_CRITICALPERCENT::ESTATE_CRITICALPERCENT()
  public void ~ESTATE_CRITICALPERCENT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CRITICALWOUND {
  ESTATE, offset = 0x0

  public void ESTATE_CRITICALWOUND(const class ESTATE_CRITICALWOUND &)
  public void ESTATE_CRITICALWOUND::ESTATE_CRITICALWOUND()
  public void ~ESTATE_CRITICALWOUND()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CRUSHSTRIKE {
  ESTATE, offset = 0x0

  public bool ESTATE_CRUSHSTRIKE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CRUSHSTRIKE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CRUSHSTRIKE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CRUSHSTRIKE(const class ESTATE_CRUSHSTRIKE &)
  public void ESTATE_CRUSHSTRIKE::ESTATE_CRUSHSTRIKE()
  public void ~ESTATE_CRUSHSTRIKE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CRYSTAL {
  ESTATE, offset = 0x0

  public void ESTATE_CRYSTAL(const class ESTATE_CRYSTAL &)
  public void ESTATE_CRYSTAL::ESTATE_CRYSTAL()
  public void ~ESTATE_CRYSTAL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CR_SHRINK {
  ESTATE, offset = 0x0

  public void ESTATE_CR_SHRINK(const class ESTATE_CR_SHRINK &)
  public void ESTATE_CR_SHRINK::ESTATE_CR_SHRINK()
  public void ~ESTATE_CR_SHRINK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CURSEDCIRCLE_ATKER {
  ESTATE, offset = 0x0

  public void ESTATE_CURSEDCIRCLE_ATKER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CURSEDCIRCLE_ATKER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CURSEDCIRCLE_ATKER(const class ESTATE_CURSEDCIRCLE_ATKER &)
  public void ESTATE_CURSEDCIRCLE_ATKER::ESTATE_CURSEDCIRCLE_ATKER()
  public void ~ESTATE_CURSEDCIRCLE_ATKER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CURSEDCIRCLE_TARGET {
  ESTATE, offset = 0x0

  public bool ESTATE_CURSEDCIRCLE_TARGET::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CURSEDCIRCLE_TARGET::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CURSEDCIRCLE_TARGET::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CURSEDCIRCLE_TARGET(const class ESTATE_CURSEDCIRCLE_TARGET &)
  public void ESTATE_CURSEDCIRCLE_TARGET::ESTATE_CURSEDCIRCLE_TARGET()
  public void ~ESTATE_CURSEDCIRCLE_TARGET()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CURSED_SOIL {
  ESTATE, offset = 0x0

  public bool ESTATE_CURSED_SOIL::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CURSED_SOIL::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CURSED_SOIL::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CURSED_SOIL(const class ESTATE_CURSED_SOIL &)
  public void ESTATE_CURSED_SOIL::ESTATE_CURSED_SOIL()
  public void ~ESTATE_CURSED_SOIL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_CURSED_SOIL_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_CURSED_SOIL_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_CURSED_SOIL_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_CURSED_SOIL_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_CURSED_SOIL_OPTION(const class ESTATE_CURSED_SOIL_OPTION &)
  public void ESTATE_CURSED_SOIL_OPTION::ESTATE_CURSED_SOIL_OPTION()
  public void ~ESTATE_CURSED_SOIL_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DACCEL {
  ESTATE, offset = 0x0

  public void ESTATE_DACCEL(const class ESTATE_DACCEL &)
  public void ESTATE_DACCEL::ESTATE_DACCEL()
  public void ~ESTATE_DACCEL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DANCE_WITH_WUG {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_DANCE_WITH_WUG::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_DANCE_WITH_WUG::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_DANCE_WITH_WUG::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_DANCE_WITH_WUG::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_DANCE_WITH_WUG(const class ESTATE_DANCE_WITH_WUG &)
  public void ESTATE_DANCE_WITH_WUG::ESTATE_DANCE_WITH_WUG()
  public void ~ESTATE_DANCE_WITH_WUG()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DAURA {
  ESTATE, offset = 0x0

  public void ESTATE_DAURA(const class ESTATE_DAURA &)
  public void ESTATE_DAURA::ESTATE_DAURA()
  public void ~ESTATE_DAURA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_BLACK {
  ESTATE, offset = 0x0

  public void ESTATE_DA_BLACK(const class ESTATE_DA_BLACK &)
  public void ESTATE_DA_BLACK::ESTATE_DA_BLACK()
  public void ~ESTATE_DA_BLACK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_CONTRACT {
  ESTATE, offset = 0x0

  public void ESTATE_DA_CONTRACT(const class ESTATE_DA_CONTRACT &)
  public void ESTATE_DA_CONTRACT::ESTATE_DA_CONTRACT()
  public void ~ESTATE_DA_CONTRACT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_EARPLUG {
  ESTATE, offset = 0x0

  public void ESTATE_DA_EARPLUG(const class ESTATE_DA_EARPLUG &)
  public void ESTATE_DA_EARPLUG::ESTATE_DA_EARPLUG()
  public void ~ESTATE_DA_EARPLUG()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_EDARKNESS {
  ESTATE, offset = 0x0

  public void ESTATE_DA_EDARKNESS(const class ESTATE_DA_EDARKNESS &)
  public void ESTATE_DA_EDARKNESS::ESTATE_DA_EDARKNESS()
  public void ~ESTATE_DA_EDARKNESS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_EGUARDIAN {
  ESTATE, offset = 0x0

  public void ESTATE_DA_EGUARDIAN(const class ESTATE_DA_EGUARDIAN &)
  public void ESTATE_DA_EGUARDIAN::ESTATE_DA_EGUARDIAN()
  public void ~ESTATE_DA_EGUARDIAN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_ENERGY {
  ESTATE, offset = 0x0

  public void ESTATE_DA_ENERGY(const class ESTATE_DA_ENERGY &)
  public void ESTATE_DA_ENERGY::ESTATE_DA_ENERGY()
  public void ~ESTATE_DA_ENERGY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_FIRSTSLOT {
  ESTATE, offset = 0x0

  public void ESTATE_DA_FIRSTSLOT(const class ESTATE_DA_FIRSTSLOT &)
  public void ESTATE_DA_FIRSTSLOT::ESTATE_DA_FIRSTSLOT()
  public void ~ESTATE_DA_FIRSTSLOT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_HEADDEF {
  ESTATE, offset = 0x0

  public void ESTATE_DA_HEADDEF(const class ESTATE_DA_HEADDEF &)
  public void ESTATE_DA_HEADDEF::ESTATE_DA_HEADDEF()
  public void ~ESTATE_DA_HEADDEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_ILLUSION {
  ESTATE, offset = 0x0

  public void ESTATE_DA_ILLUSION(const class ESTATE_DA_ILLUSION &)
  public void ESTATE_DA_ILLUSION::ESTATE_DA_ILLUSION()
  public void ~ESTATE_DA_ILLUSION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_ITEMREBUILD {
  ESTATE, offset = 0x0

  public void ESTATE_DA_ITEMREBUILD(const class ESTATE_DA_ITEMREBUILD &)
  public void ESTATE_DA_ITEMREBUILD::ESTATE_DA_ITEMREBUILD()
  public void ~ESTATE_DA_ITEMREBUILD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_MAGICCART {
  ESTATE, offset = 0x0

  public void ESTATE_DA_MAGICCART(const class ESTATE_DA_MAGICCART &)
  public void ESTATE_DA_MAGICCART::ESTATE_DA_MAGICCART()
  public void ~ESTATE_DA_MAGICCART()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_REBUILD {
  ESTATE, offset = 0x0

  public void ESTATE_DA_REBUILD(const class ESTATE_DA_REBUILD &)
  public void ESTATE_DA_REBUILD::ESTATE_DA_REBUILD()
  public void ~ESTATE_DA_REBUILD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_SPACE {
  ESTATE, offset = 0x0

  public void ESTATE_DA_SPACE(const class ESTATE_DA_SPACE &)
  public void ESTATE_DA_SPACE::ESTATE_DA_SPACE()
  public void ~ESTATE_DA_SPACE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DA_TIMEOUT {
  ESTATE, offset = 0x0

  public void ESTATE_DA_TIMEOUT(const class ESTATE_DA_TIMEOUT &)
  public void ESTATE_DA_TIMEOUT::ESTATE_DA_TIMEOUT()
  public void ~ESTATE_DA_TIMEOUT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DBARRIER {
  ESTATE, offset = 0x0

  public void ESTATE_DBARRIER(const class ESTATE_DBARRIER &)
  public void ESTATE_DBARRIER::ESTATE_DBARRIER()
  public void ~ESTATE_DBARRIER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DBLOCK {
  ESTATE, offset = 0x0

  public void ESTATE_DBLOCK(const class ESTATE_DBLOCK &)
  public void ESTATE_DBLOCK::ESTATE_DBLOCK()
  public void ~ESTATE_DBLOCK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DEADLYINFECT {
  ESTATE, offset = 0x0

  public void ESTATE_DEADLYINFECT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_DEADLYINFECT::TransferEFST(class CActor *, class CActor *)
  public void ESTATE_DEADLYINFECT(const class ESTATE_DEADLYINFECT &)
  public void ESTATE_DEADLYINFECT::ESTATE_DEADLYINFECT()
  public void ~ESTATE_DEADLYINFECT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DEATHBOUND {
  ESTATE, offset = 0x0

  public void ESTATE_DEATHBOUND(const class ESTATE_DEATHBOUND &)
  public void ESTATE_DEATHBOUND::ESTATE_DEATHBOUND()
  public void ~ESTATE_DEATHBOUND()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DEATHHURT {
  ESTATE_GC_POISON, offset = 0x0

  public int ESTATE_DEATHHURT::GetApplyWeaponMSGID()
  public bool ESTATE_DEATHHURT::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_DEATHHURT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_DEATHHURT::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_DEATHHURT(const class ESTATE_DEATHHURT &)
  public void ESTATE_DEATHHURT::ESTATE_DEATHHURT()
  public void ESTATE_DEATHHURT::~ESTATE_DEATHHURT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DEC_AGI {
  ESTATE, offset = 0x0

  public void ESTATE_DEC_AGI::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_DEC_AGI(const class ESTATE_DEC_AGI &)
  public void ESTATE_DEC_AGI::ESTATE_DEC_AGI()
  public void ~ESTATE_DEC_AGI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DEFENDER {
  ESTATE, offset = 0x0

  public void ESTATE_DEFENDER(const class ESTATE_DEFENDER &)
  public void ESTATE_DEFENDER::ESTATE_DEFENDER()
  public void ~ESTATE_DEFENDER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DEMONIC_FIRE {
  ESTATE, offset = 0x0

  public bool ESTATE_DEMONIC_FIRE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_DEMONIC_FIRE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_DEMONIC_FIRE::ResetComplete(class CActor *, const int, const int, const int)
  public static int GetVal3(const int, const int)
  private int GetMATKpercent(const int)
  private int GetBURNNINGpercent(const int)
  public void ESTATE_DEMONIC_FIRE(const class ESTATE_DEMONIC_FIRE &)
  public void ESTATE_DEMONIC_FIRE::ESTATE_DEMONIC_FIRE()
  public void ~ESTATE_DEMONIC_FIRE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DENERGY {
  ESTATE, offset = 0x0

  public void ESTATE_DENERGY(const class ESTATE_DENERGY &)
  public void ESTATE_DENERGY::ESTATE_DENERGY()
  public void ~ESTATE_DENERGY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DEVOTION {
  ESTATE, offset = 0x0

  public void ESTATE_DEVOTION(const class ESTATE_DEVOTION &)
  public void ESTATE_DEVOTION::ESTATE_DEVOTION()
  public void ~ESTATE_DEVOTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DFREEZER {
  ESTATE, offset = 0x0

  public void ESTATE_DFREEZER(const class ESTATE_DFREEZER &)
  public void ESTATE_DFREEZER::ESTATE_DFREEZER()
  public void ~ESTATE_DFREEZER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DISTRUCTIONSCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_DISTRUCTIONSCROLL(const class ESTATE_DISTRUCTIONSCROLL &)
  public void ESTATE_DISTRUCTIONSCROLL::ESTATE_DISTRUCTIONSCROLL()
  public void ~ESTATE_DISTRUCTIONSCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DOUBLECASTING {
  ESTATE, offset = 0x0

  public void ESTATE_DOUBLECASTING(const class ESTATE_DOUBLECASTING &)
  public void ESTATE_DOUBLECASTING::ESTATE_DOUBLECASTING()
  public void ~ESTATE_DOUBLECASTING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DPUNISH {
  ESTATE, offset = 0x0

  public void ESTATE_DPUNISH(const class ESTATE_DPUNISH &)
  public void ESTATE_DPUNISH::ESTATE_DPUNISH()
  public void ~ESTATE_DPUNISH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DRIFT {
  ESTATE, offset = 0x0

  public void ESTATE_DRIFT(const class ESTATE_DRIFT &)
  public void ESTATE_DRIFT::ESTATE_DRIFT()
  public void ~ESTATE_DRIFT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DROCERA_HERB_STEAMED {
  ESTATE, offset = 0x0

  public bool ESTATE_DROCERA_HERB_STEAMED::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_DROCERA_HERB_STEAMED::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_DROCERA_HERB_STEAMED::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_DROCERA_HERB_STEAMED(const class ESTATE_DROCERA_HERB_STEAMED &)
  public void ESTATE_DROCERA_HERB_STEAMED::ESTATE_DROCERA_HERB_STEAMED()
  public void ~ESTATE_DROCERA_HERB_STEAMED()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DUPLELIGHT {
  ESTATE, offset = 0x0

  public void ESTATE_DUPLELIGHT(const class ESTATE_DUPLELIGHT &)
  public void ESTATE_DUPLELIGHT::ESTATE_DUPLELIGHT()
  public void ~ESTATE_DUPLELIGHT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_DWARNING {
  ESTATE, offset = 0x0

  public void ESTATE_DWARNING(const class ESTATE_DWARNING &)
  public void ESTATE_DWARNING::ESTATE_DWARNING()
  public void ~ESTATE_DWARNING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EARTHDRIVE {
  ESTATE, offset = 0x0

  public bool ESTATE_EARTHDRIVE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EARTHDRIVE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EARTHDRIVE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EARTHDRIVE(const class ESTATE_EARTHDRIVE &)
  public void ESTATE_EARTHDRIVE::ESTATE_EARTHDRIVE()
  public void ~ESTATE_EARTHDRIVE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EARTH_INSIGNIA {
  ESTATE, offset = 0x0

  public bool ESTATE_EARTH_INSIGNIA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EARTH_INSIGNIA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EARTH_INSIGNIA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EARTH_INSIGNIA(const class ESTATE_EARTH_INSIGNIA &)
  public void ESTATE_EARTH_INSIGNIA::ESTATE_EARTH_INSIGNIA()
  public void ~ESTATE_EARTH_INSIGNIA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ECHOSONG {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_ECHOSONG::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_ECHOSONG::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ECHOSONG::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ECHOSONG::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ECHOSONG(const class ESTATE_ECHOSONG &)
  public void ESTATE_ECHOSONG::ESTATE_ECHOSONG()
  public void ~ESTATE_ECHOSONG()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EDP {
  ESTATE, offset = 0x0

  public void ESTATE_EDP(const class ESTATE_EDP &)
  public void ESTATE_EDP::ESTATE_EDP()
  public void ~ESTATE_EDP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ELECTRICSHOCKER {
  ESTATE, offset = 0x0

  public void ESTATE_ELECTRICSHOCKER(const class ESTATE_ELECTRICSHOCKER &)
  public void ESTATE_ELECTRICSHOCKER::ESTATE_ELECTRICSHOCKER()
  public void ~ESTATE_ELECTRICSHOCKER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ELEMENTAL_AGGRESSIVE {
  ESTATE, offset = 0x0

  public void ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ELEMENTAL_AGGRESSIVE(const class ESTATE_ELEMENTAL_AGGRESSIVE &)
  public void ESTATE_ELEMENTAL_AGGRESSIVE()
  public void ~ESTATE_ELEMENTAL_AGGRESSIVE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EL_COST {
  ESTATE, offset = 0x0

  public bool ESTATE_EL_COST::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EL_COST::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EL_COST::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EL_COST(const class ESTATE_EL_COST &)
  public void ESTATE_EL_COST::ESTATE_EL_COST()
  public void ~ESTATE_EL_COST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EL_DEFENSIVE {
  ESTATE, offset = 0x0

  public bool ESTATE_EL_DEFENSIVE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EL_DEFENSIVE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EL_DEFENSIVE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EL_DEFENSIVE(const class ESTATE_EL_DEFENSIVE &)
  public void ESTATE_EL_DEFENSIVE::ESTATE_EL_DEFENSIVE()
  public void ~ESTATE_EL_DEFENSIVE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EL_OFFENSIVE {
  ESTATE, offset = 0x0

  public bool ESTATE_EL_OFFENSIVE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EL_OFFENSIVE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EL_OFFENSIVE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EL_OFFENSIVE(const class ESTATE_EL_OFFENSIVE &)
  public void ESTATE_EL_OFFENSIVE::ESTATE_EL_OFFENSIVE()
  public void ~ESTATE_EL_OFFENSIVE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EL_PASSIVE {
  ESTATE, offset = 0x0

  public bool ESTATE_EL_PASSIVE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EL_PASSIVE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EL_PASSIVE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EL_PASSIVE(const class ESTATE_EL_PASSIVE &)
  public void ESTATE_EL_PASSIVE::ESTATE_EL_PASSIVE()
  public void ~ESTATE_EL_PASSIVE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EL_WAIT {
  ESTATE, offset = 0x0

  public bool ESTATE_EL_WAIT::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EL_WAIT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EL_WAIT::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EL_WAIT(const class ESTATE_EL_WAIT &)
  public void ESTATE_EL_WAIT::ESTATE_EL_WAIT()
  public void ~ESTATE_EL_WAIT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ENCHANTBLADE {
  ESTATE, offset = 0x0

  public void ESTATE_ENCHANTBLADE(const class ESTATE_ENCHANTBLADE &)
  public void ESTATE_ENCHANTBLADE::ESTATE_ENCHANTBLADE()
  public void ~ESTATE_ENCHANTBLADE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ENCHANTPOISON {
  ESTATE, offset = 0x0

  public void ESTATE_ENCHANTPOISON(const class ESTATE_ENCHANTPOISON &)
  public void ESTATE_ENCHANTPOISON::ESTATE_ENCHANTPOISON()
  public void ~ESTATE_ENCHANTPOISON()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ENDURE {
  ESTATE, offset = 0x0

  public void ESTATE_ENDURE(const class ESTATE_ENDURE &)
  public void ESTATE_ENDURE::ESTATE_ENDURE()
  public void ~ESTATE_ENDURE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ENDURE_MDEF {
  ESTATE, offset = 0x0

  public void ESTATE_ENDURE_MDEF(const class ESTATE_ENDURE_MDEF &)
  public void ESTATE_ENDURE_MDEF::ESTATE_ENDURE_MDEF()
  public void ~ESTATE_ENDURE_MDEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ENERGYCOAT {
  ESTATE, offset = 0x0

  public void ESTATE_ENERGYCOAT(const class ESTATE_ENERGYCOAT &)
  public void ESTATE_ENERGYCOAT::ESTATE_ENERGYCOAT()
  public void ~ESTATE_ENERGYCOAT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ENERGY_DRINK_RESERCH {
  ESTATE, offset = 0x0

  public bool ESTATE_ENERGY_DRINK_RESERCH::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ENERGY_DRINK_RESERCH::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ENERGY_DRINK_RESERCH::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ENERGY_DRINK_RESERCH(const class ESTATE_ENERGY_DRINK_RESERCH &)
  public void ESTATE_ENERGY_DRINK_RESERCH::ESTATE_ENERGY_DRINK_RESERCH()
  public void ~ESTATE_ENERGY_DRINK_RESERCH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ENERVATION {
  ESTATE, offset = 0x0

  public bool ESTATE_ENERVATION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ENERVATION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ENERVATION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ENERVATION(const class ESTATE_ENERVATION &)
  public void ESTATE_ENERVATION::ESTATE_ENERVATION()
  public void ~ESTATE_ENERVATION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EPICLESIS {
  ESTATE, offset = 0x0

  public void ESTATE_EPICLESIS(const class ESTATE_EPICLESIS &)
  public void ESTATE_EPICLESIS::ESTATE_EPICLESIS()
  public void ~ESTATE_EPICLESIS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EQC {
  ESTATE, offset = 0x0

  public bool ESTATE_EQC::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EQC::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EQC::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EQC(const class ESTATE_EQC &)
  public void ESTATE_EQC::ESTATE_EQC()
  public void ~ESTATE_EQC()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EQUIPED_FLOOR {
  ESTATE, offset = 0x0

  public void ESTATE_EQUIPED_FLOOR(const class ESTATE_EQUIPED_FLOOR &)
  public void ESTATE_EQUIPED_FLOOR::ESTATE_EQUIPED_FLOOR()
  public void ~ESTATE_EQUIPED_FLOOR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EQUIPPED_DIVINE_ARMOR {
  ESTATE, offset = 0x0

  public void ESTATE_EQUIPPED_DIVINE_ARMOR(const class ESTATE_EQUIPPED_DIVINE_ARMOR &)
  public void ESTATE_EQUIPPED_DIVINE_ARMOR::ESTATE_EQUIPPED_DIVINE_ARMOR()
  public void ~ESTATE_EQUIPPED_DIVINE_ARMOR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EQUIPPED_HOLY_ARMOR {
  ESTATE, offset = 0x0

  public void ESTATE_EQUIPPED_HOLY_ARMOR(const class ESTATE_EQUIPPED_HOLY_ARMOR &)
  public void ESTATE_EQUIPPED_HOLY_ARMOR::ESTATE_EQUIPPED_HOLY_ARMOR()
  public void ~ESTATE_EQUIPPED_HOLY_ARMOR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EXEEDBREAK {
  ESTATE, offset = 0x0

  public bool ESTATE_EXEEDBREAK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EXEEDBREAK::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EXEEDBREAK::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EXEEDBREAK(const class ESTATE_EXEEDBREAK &)
  public void ESTATE_EXEEDBREAK::ESTATE_EXEEDBREAK()
  public void ~ESTATE_EXEEDBREAK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EXPIATIO {
  ESTATE, offset = 0x0

  public void ESTATE_EXPIATIO(const class ESTATE_EXPIATIO &)
  public void ESTATE_EXPIATIO::ESTATE_EXPIATIO()
  public void ~ESTATE_EXPIATIO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EXPLOSIONSPIRITS {
  ESTATE, offset = 0x0

  public void ESTATE_EXPLOSIONSPIRITS(const class ESTATE_EXPLOSIONSPIRITS &)
  public void ESTATE_EXPLOSIONSPIRITS::ESTATE_EXPLOSIONSPIRITS()
  public void ~ESTATE_EXPLOSIONSPIRITS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EXPMEMORY {
  ESTATE, offset = 0x0

  public void ESTATE_EXPMEMORY(const class ESTATE_EXPMEMORY &)
  public void ESTATE_EXPMEMORY::ESTATE_EXPMEMORY()
  public void ~ESTATE_EXPMEMORY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EXTRACT_SALAMINE_JUICE {
  ESTATE, offset = 0x0

  public bool ESTATE_EXTRACT_SALAMINE_JUICE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EXTRACT_SALAMINE_JUICE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EXTRACT_SALAMINE_JUICE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EXTRACT_SALAMINE_JUICE(const class ESTATE_EXTRACT_SALAMINE_JUICE &)
  public void ESTATE_EXTRACT_SALAMINE_JUICE::ESTATE_EXTRACT_SALAMINE_JUICE()
  public void ~ESTATE_EXTRACT_SALAMINE_JUICE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EXTRACT_WHITE_POTION_Z {
  ESTATE, offset = 0x0

  public bool ESTATE_EXTRACT_WHITE_POTION_Z::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EXTRACT_WHITE_POTION_Z::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EXTRACT_WHITE_POTION_Z::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EXTRACT_WHITE_POTION_Z(const class ESTATE_EXTRACT_WHITE_POTION_Z &)
  public void ESTATE_EXTRACT_WHITE_POTION_Z::ESTATE_EXTRACT_WHITE_POTION_Z()
  public void ~ESTATE_EXTRACT_WHITE_POTION_Z()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_EXTREMITYFIST {
  ESTATE, offset = 0x0

  public bool ESTATE_EXTREMITYFIST::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_EXTREMITYFIST::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_EXTREMITYFIST::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_EXTREMITYFIST(const class ESTATE_EXTREMITYFIST &)
  public void ESTATE_EXTREMITYFIST::ESTATE_EXTREMITYFIST()
  public void ~ESTATE_EXTREMITYFIST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FALLENEMPIRE {
  ESTATE, offset = 0x0

  public void ESTATE_FALLENEMPIRE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FALLENEMPIRE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FALLENEMPIRE(const class ESTATE_FALLENEMPIRE &)
  public void ESTATE_FALLENEMPIRE::ESTATE_FALLENEMPIRE()
  public void ~ESTATE_FALLENEMPIRE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FEARBREEZE {
  ESTATE, offset = 0x0

  public bool ESTATE_FEARBREEZE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FEARBREEZE(const class ESTATE_FEARBREEZE &)
  public void ESTATE_FEARBREEZE::ESTATE_FEARBREEZE()
  public void ~ESTATE_FEARBREEZE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FIGHTINGSPIRIT {
  ESTATE, offset = 0x0

  public bool ESTATE_FIGHTINGSPIRIT::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FIGHTINGSPIRIT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FIGHTINGSPIRIT::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FIGHTINGSPIRIT(const class ESTATE_FIGHTINGSPIRIT &)
  public void ESTATE_FIGHTINGSPIRIT::ESTATE_FIGHTINGSPIRIT()
  public void ~ESTATE_FIGHTINGSPIRIT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FIRE_CLOAK {
  ESTATE, offset = 0x0

  public bool ESTATE_FIRE_CLOAK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FIRE_CLOAK::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FIRE_CLOAK::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FIRE_CLOAK(const class ESTATE_FIRE_CLOAK &)
  public void ESTATE_FIRE_CLOAK::ESTATE_FIRE_CLOAK()
  public void ~ESTATE_FIRE_CLOAK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FIRE_CLOAK_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_FIRE_CLOAK_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FIRE_CLOAK_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FIRE_CLOAK_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FIRE_CLOAK_OPTION(const class ESTATE_FIRE_CLOAK_OPTION &)
  public void ESTATE_FIRE_CLOAK_OPTION::ESTATE_FIRE_CLOAK_OPTION()
  public void ~ESTATE_FIRE_CLOAK_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FIRE_EXPANSION_SMOKE_POWDER {
  ESTATE, offset = 0x0

  public bool ESTATE_FIRE_EXPANSION_SMOKE_POWDER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FIRE_EXPANSION_SMOKE_POWDER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FIRE_EXPANSION_SMOKE_POWDER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FIRE_EXPANSION_SMOKE_POWDER(const class ESTATE_FIRE_EXPANSION_SMOKE_POWDER &)
  public void ESTATE_FIRE_EXPANSION_SMOKE_POWDER::ESTATE_FIRE_EXPANSION_SMOKE_POWDER()
  public void ~ESTATE_FIRE_EXPANSION_SMOKE_POWDER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FIRE_EXPANSION_TEAR_GAS {
  ESTATE, offset = 0x0

  public bool ESTATE_FIRE_EXPANSION_TEAR_GAS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FIRE_EXPANSION_TEAR_GAS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FIRE_EXPANSION_TEAR_GAS::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FIRE_EXPANSION_TEAR_GAS(const class ESTATE_FIRE_EXPANSION_TEAR_GAS &)
  public void ESTATE_FIRE_EXPANSION_TEAR_GAS::ESTATE_FIRE_EXPANSION_TEAR_GAS()
  public void ~ESTATE_FIRE_EXPANSION_TEAR_GAS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FIRE_INSIGNIA {
  ESTATE, offset = 0x0

  public bool ESTATE_FIRE_INSIGNIA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FIRE_INSIGNIA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FIRE_INSIGNIA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FIRE_INSIGNIA(const class ESTATE_FIRE_INSIGNIA &)
  public void ESTATE_FIRE_INSIGNIA::ESTATE_FIRE_INSIGNIA()
  public void ~ESTATE_FIRE_INSIGNIA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FIXEDCASTINGTM_REDUCE {
  ESTATE, offset = 0x0

  public bool ESTATE_FIXEDCASTINGTM_REDUCE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FIXEDCASTINGTM_REDUCE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FIXEDCASTINGTM_REDUCE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FIXEDCASTINGTM_REDUCE(const class ESTATE_FIXEDCASTINGTM_REDUCE &)
  public void ESTATE_FIXEDCASTINGTM_REDUCE::ESTATE_FIXEDCASTINGTM_REDUCE()
  public void ~ESTATE_FIXEDCASTINGTM_REDUCE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOGWALL {
  ESTATE, offset = 0x0

  public void ESTATE_FOGWALL(const class ESTATE_FOGWALL &)
  public void ESTATE_FOGWALL::ESTATE_FOGWALL()
  public void ~ESTATE_FOGWALL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_AGI {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_AGI(const class ESTATE_FOOD_AGI &)
  public void ESTATE_FOOD_AGI::ESTATE_FOOD_AGI()
  public void ~ESTATE_FOOD_AGI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_AGI_CASH {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_AGI_CASH(const class ESTATE_FOOD_AGI_CASH &)
  public void ESTATE_FOOD_AGI_CASH::ESTATE_FOOD_AGI_CASH()
  public void ~ESTATE_FOOD_AGI_CASH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_BASICAVOIDANCE {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_BASICAVOIDANCE(const class ESTATE_FOOD_BASICAVOIDANCE &)
  public void ESTATE_FOOD_BASICAVOIDANCE::ESTATE_FOOD_BASICAVOIDANCE()
  public void ~ESTATE_FOOD_BASICAVOIDANCE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_BASICHIT {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_BASICHIT(const class ESTATE_FOOD_BASICHIT &)
  public void ESTATE_FOOD_BASICHIT::ESTATE_FOOD_BASICHIT()
  public void ~ESTATE_FOOD_BASICHIT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_CRITICALSUCCESSVALUE {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_CRITICALSUCCESSVALUE(const class ESTATE_FOOD_CRITICALSUCCESSVALUE &)
  public void ESTATE_FOOD_CRITICALSUCCESSVALUE::ESTATE_FOOD_CRITICALSUCCESSVALUE()
  public void ~ESTATE_FOOD_CRITICALSUCCESSVALUE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_DEX {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_DEX(const class ESTATE_FOOD_DEX &)
  public void ESTATE_FOOD_DEX::ESTATE_FOOD_DEX()
  public void ~ESTATE_FOOD_DEX()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_DEX_CASH {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_DEX_CASH(const class ESTATE_FOOD_DEX_CASH &)
  public void ESTATE_FOOD_DEX_CASH::ESTATE_FOOD_DEX_CASH()
  public void ~ESTATE_FOOD_DEX_CASH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_INT {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_INT(const class ESTATE_FOOD_INT &)
  public void ESTATE_FOOD_INT::ESTATE_FOOD_INT()
  public void ~ESTATE_FOOD_INT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_INT_CASH {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_INT_CASH(const class ESTATE_FOOD_INT_CASH &)
  public void ESTATE_FOOD_INT_CASH::ESTATE_FOOD_INT_CASH()
  public void ~ESTATE_FOOD_INT_CASH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_LUK {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_LUK(const class ESTATE_FOOD_LUK &)
  public void ESTATE_FOOD_LUK::ESTATE_FOOD_LUK()
  public void ~ESTATE_FOOD_LUK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_LUK_CASH {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_LUK_CASH(const class ESTATE_FOOD_LUK_CASH &)
  public void ESTATE_FOOD_LUK_CASH::ESTATE_FOOD_LUK_CASH()
  public void ~ESTATE_FOOD_LUK_CASH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_STR {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_STR(const class ESTATE_FOOD_STR &)
  public void ESTATE_FOOD_STR::ESTATE_FOOD_STR()
  public void ~ESTATE_FOOD_STR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_STR_CASH {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_STR_CASH(const class ESTATE_FOOD_STR_CASH &)
  public void ESTATE_FOOD_STR_CASH::ESTATE_FOOD_STR_CASH()
  public void ~ESTATE_FOOD_STR_CASH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_VIT {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_VIT(const class ESTATE_FOOD_VIT &)
  public void ESTATE_FOOD_VIT::ESTATE_FOOD_VIT()
  public void ~ESTATE_FOOD_VIT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FOOD_VIT_CASH {
  ESTATE, offset = 0x0

  public void ESTATE_FOOD_VIT_CASH(const class ESTATE_FOOD_VIT_CASH &)
  public void ESTATE_FOOD_VIT_CASH::ESTATE_FOOD_VIT_CASH()
  public void ~ESTATE_FOOD_VIT_CASH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FORCEOFVANGUARD {
  ESTATE, offset = 0x0

  public static int GetVALUE2(const short, const unsigned short)
  public static int GetVALUE2_Level(const int)
  public static int GetVALUE2_ReduceSPAmount(const int)
  public void ESTATE_FORCEOFVANGUARD::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FORCEOFVANGUARD::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FORCEOFVANGUARD(const class ESTATE_FORCEOFVANGUARD &)
  public void ESTATE_FORCEOFVANGUARD::ESTATE_FORCEOFVANGUARD()
  public void ~ESTATE_FORCEOFVANGUARD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FREEZE_SP {
  ESTATE, offset = 0x0

  public void ESTATE_FREEZE_SP::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FREEZE_SP::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FREEZE_SP(const class ESTATE_FREEZE_SP &)
  public void ESTATE_FREEZE_SP::ESTATE_FREEZE_SP()
  public void ~ESTATE_FREEZE_SP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FREYJASCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_FREYJASCROLL(const class ESTATE_FREYJASCROLL &)
  public void ESTATE_FREYJASCROLL::ESTATE_FREYJASCROLL()
  public void ~ESTATE_FREYJASCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FROSTMISTY {
  ESTATE, offset = 0x0

  public bool ESTATE_FROSTMISTY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FROSTMISTY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FROSTMISTY::ResetComplete(class CActor *, const int, const int, const int)
  public static int ESTATE_FROSTMISTY::GetDefaultLifeTM(class CCharacter *)
  public void ESTATE_FROSTMISTY(const class ESTATE_FROSTMISTY &)
  public void ESTATE_FROSTMISTY::ESTATE_FROSTMISTY()
  public void ~ESTATE_FROSTMISTY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_FULL_SWING_K {
  ESTATE, offset = 0x0

  public bool ESTATE_FULL_SWING_K::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_FULL_SWING_K::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_FULL_SWING_K::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_FULL_SWING_K(const class ESTATE_FULL_SWING_K &)
  public void ESTATE_FULL_SWING_K::ESTATE_FULL_SWING_K()
  public void ~ESTATE_FULL_SWING_K()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GAIN {
  ESTATE, offset = 0x0

  public void ESTATE_GAIN(const class ESTATE_GAIN &)
  public void ESTATE_GAIN::ESTATE_GAIN()
  public void ~ESTATE_GAIN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GC_POISON {
  ESTATE, offset = 0x0

  public bool ESTATE_GC_POISON::IsGC_POISON()
  public int GetApplyWeaponMSGID()
  public void ESTATE_GC_POISON(const class ESTATE_GC_POISON &)
  public void ESTATE_GC_POISON::ESTATE_GC_POISON(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void ESTATE_GC_POISON::~ESTATE_GC_POISON()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GDSKILL_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_GDSKILL_POSTDELAY(const class ESTATE_GDSKILL_POSTDELAY &)
  public void ESTATE_GDSKILL_POSTDELAY::ESTATE_GDSKILL_POSTDELAY()
  public void ~ESTATE_GDSKILL_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GENSOU {
  ESTATE, offset = 0x0

  public bool ESTATE_GENSOU::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GENSOU::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GENSOU(const class ESTATE_GENSOU &)
  public void ESTATE_GENSOU::ESTATE_GENSOU()
  public void ~ESTATE_GENSOU()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GENTLETOUCH_CHANGE {
  ESTATE, offset = 0x0

  public static int GetVal2(const short, const short)
  public static short GetVal2STR(const int)
  public static short GetVal2DEX(const int)
  public static int GetVal3(const short, const short)
  public static short GetVal3AGI(const int)
  public static short GetVal3INT(const int)
  public bool ESTATE_GENTLETOUCH_CHANGE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GENTLETOUCH_CHANGE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GENTLETOUCH_CHANGE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GENTLETOUCH_CHANGE(const class ESTATE_GENTLETOUCH_CHANGE &)
  public void ESTATE_GENTLETOUCH_CHANGE::ESTATE_GENTLETOUCH_CHANGE()
  public void ~ESTATE_GENTLETOUCH_CHANGE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GENTLETOUCH_ENERGYGAIN {
  ESTATE, offset = 0x0

  public bool ESTATE_GENTLETOUCH_ENERGYGAIN::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GENTLETOUCH_ENERGYGAIN(const class ESTATE_GENTLETOUCH_ENERGYGAIN &)
  public void ESTATE_GENTLETOUCH_ENERGYGAIN::ESTATE_GENTLETOUCH_ENERGYGAIN()
  public void ~ESTATE_GENTLETOUCH_ENERGYGAIN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GENTLETOUCH_REVITALIZE {
  ESTATE, offset = 0x0

  public bool ESTATE_GENTLETOUCH_REVITALIZE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GENTLETOUCH_REVITALIZE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GENTLETOUCH_REVITALIZE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GENTLETOUCH_REVITALIZE(const class ESTATE_GENTLETOUCH_REVITALIZE &)
  public void ESTATE_GENTLETOUCH_REVITALIZE::ESTATE_GENTLETOUCH_REVITALIZE()
  public void ~ESTATE_GENTLETOUCH_REVITALIZE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GIANTGROWTH {
  ESTATE, offset = 0x0

  public void ESTATE_GIANTGROWTH(const class ESTATE_GIANTGROWTH &)
  public void ESTATE_GIANTGROWTH::ESTATE_GIANTGROWTH()
  public void ~ESTATE_GIANTGROWTH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GLOOMYDAY {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_GLOOMYDAY::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_GLOOMYDAY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GLOOMYDAY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GLOOMYDAY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GLOOMYDAY(const class ESTATE_GLOOMYDAY &)
  public void ESTATE_GLOOMYDAY::ESTATE_GLOOMYDAY()
  public void ~ESTATE_GLOOMYDAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GLORIA {
  ESTATE, offset = 0x0

  public void ESTATE_GLORIA(const class ESTATE_GLORIA &)
  public void ESTATE_GLORIA::ESTATE_GLORIA()
  public void ~ESTATE_GLORIA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GM_BATTLE {
  ESTATE_SCRIPT, offset = 0x0

  public bool ESTATE_GM_BATTLE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GM_BATTLE(const class ESTATE_GM_BATTLE &)
  public void ESTATE_GM_BATTLE::ESTATE_GM_BATTLE()
  public void ~ESTATE_GM_BATTLE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GM_BATTLE2 {
  ESTATE_SCRIPT, offset = 0x0

  public bool ESTATE_GM_BATTLE2::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GM_BATTLE2(const class ESTATE_GM_BATTLE2 &)
  public void ESTATE_GM_BATTLE2::ESTATE_GM_BATTLE2()
  public void ~ESTATE_GM_BATTLE2()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GN_CARTBOOST {
  ESTATE, offset = 0x0

  public bool ESTATE_GN_CARTBOOST::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GN_CARTBOOST::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GN_CARTBOOST::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GN_CARTBOOST(const class ESTATE_GN_CARTBOOST &)
  public void ESTATE_GN_CARTBOOST::ESTATE_GN_CARTBOOST()
  public void ~ESTATE_GN_CARTBOOST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GN_REMODELING_CART {
  ESTATE, offset = 0x0

  public bool ESTATE_GN_REMODELING_CART::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GN_REMODELING_CART::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GN_REMODELING_CART::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GN_REMODELING_CART(const class ESTATE_GN_REMODELING_CART &)
  public void ESTATE_GN_REMODELING_CART::ESTATE_GN_REMODELING_CART()
  public void ~ESTATE_GN_REMODELING_CART()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GN_TRAINING_SWORD {
  ESTATE, offset = 0x0

  public bool ESTATE_GN_TRAINING_SWORD::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GN_TRAINING_SWORD(const class ESTATE_GN_TRAINING_SWORD &)
  public void ESTATE_GN_TRAINING_SWORD::ESTATE_GN_TRAINING_SWORD()
  public void ~ESTATE_GN_TRAINING_SWORD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GOLDENE_FERSE {
  ESTATE, offset = 0x0

  public bool ESTATE_GOLDENE_FERSE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GOLDENE_FERSE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GOLDENE_FERSE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GOLDENE_FERSE(const class ESTATE_GOLDENE_FERSE &)
  public void ESTATE_GOLDENE_FERSE::ESTATE_GOLDENE_FERSE()
  public void ~ESTATE_GOLDENE_FERSE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GOSPEL {
  ESTATE, offset = 0x0

  public void ESTATE_GOSPEL(const class ESTATE_GOSPEL &)
  public void ESTATE_GOSPEL::ESTATE_GOSPEL()
  public void ~ESTATE_GOSPEL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GRANITIC_ARMOR {
  ESTATE, offset = 0x0

  public bool ESTATE_GRANITIC_ARMOR::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GRANITIC_ARMOR::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GRANITIC_ARMOR(const class ESTATE_GRANITIC_ARMOR &)
  public void ESTATE_GRANITIC_ARMOR::ESTATE_GRANITIC_ARMOR()
  public void ~ESTATE_GRANITIC_ARMOR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GRAVITATION {
  ESTATE, offset = 0x0

  public void ESTATE_GRAVITATION(const class ESTATE_GRAVITATION &)
  public void ESTATE_GRAVITATION::ESTATE_GRAVITATION()
  public void ~ESTATE_GRAVITATION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GROOMY {
  ESTATE, offset = 0x0

  public bool ESTATE_GROOMY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GROOMY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GROOMY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GROOMY(const class ESTATE_GROOMY &)
  public void ESTATE_GROOMY::ESTATE_GROOMY()
  public void ~ESTATE_GROOMY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GROUNDMAGIC {
  ESTATE, offset = 0x0

  public void ESTATE_GROUNDMAGIC(const class ESTATE_GROUNDMAGIC &)
  public void ESTATE_GROUNDMAGIC::ESTATE_GROUNDMAGIC()
  public void ~ESTATE_GROUNDMAGIC()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GUARDIAN_RECALL {
  ESTATE_ITEMSKILL_POSTDELAY, offset = 0x0

  public void ESTATE_GUARDIAN_RECALL(const class ESTATE_GUARDIAN_RECALL &)
  public void ESTATE_GUARDIAN_RECALL::ESTATE_GUARDIAN_RECALL()
  public void ESTATE_GUARDIAN_RECALL::~ESTATE_GUARDIAN_RECALL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GUST {
  ESTATE, offset = 0x0

  public bool ESTATE_GUST::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GUST::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GUST::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GUST(const class ESTATE_GUST &)
  public void ESTATE_GUST::ESTATE_GUST()
  public void ~ESTATE_GUST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_GUST_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_GUST_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_GUST_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_GUST_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_GUST_OPTION(const class ESTATE_GUST_OPTION &)
  public void ESTATE_GUST_OPTION::ESTATE_GUST_OPTION()
  public void ~ESTATE_GUST_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_G_LIFEPOTION {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_G_LIFEPOTION(const class ESTATE_G_LIFEPOTION &)
  public void ESTATE_G_LIFEPOTION::ESTATE_G_LIFEPOTION()
  public void ~ESTATE_G_LIFEPOTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HALLUCINATIONWALK {
  ESTATE, offset = 0x0

  public bool ESTATE_HALLUCINATIONWALK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_HALLUCINATIONWALK::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_HALLUCINATIONWALK::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_HALLUCINATIONWALK(const class ESTATE_HALLUCINATIONWALK &)
  public void ESTATE_HALLUCINATIONWALK::ESTATE_HALLUCINATIONWALK()
  public void ~ESTATE_HALLUCINATIONWALK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HALLUCINATIONWALK_POSTDELAY {
  ESTATE, offset = 0x0

  public bool ESTATE_HALLUCINATIONWALK_POSTDELAY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_HALLUCINATIONWALK_POSTDELAY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_HALLUCINATIONWALK_POSTDELAY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_HALLUCINATIONWALK_POSTDELAY(const class ESTATE_HALLUCINATIONWALK_POSTDELAY &)
  public void ESTATE_HALLUCINATIONWALK_POSTDELAY::ESTATE_HALLUCINATIONWALK_POSTDELAY()
  public void ~ESTATE_HALLUCINATIONWALK_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HANDICAPSTATE_DEEP_SLEEP {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_HANDICAPSTATE_DEEP_SLEEP::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_HANDICAPSTATE_DEEP_SLEEP::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_HANDICAPSTATE_DEEP_SLEEP::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_HANDICAPSTATE_DEEP_SLEEP::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_HANDICAPSTATE_DEEP_SLEEP(const class ESTATE_HANDICAPSTATE_DEEP_SLEEP &)
  public void ESTATE_HANDICAPSTATE_DEEP_SLEEP::ESTATE_HANDICAPSTATE_DEEP_SLEEP()
  public void ~ESTATE_HANDICAPSTATE_DEEP_SLEEP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HANDICAPSTATE_NORECOVER {
  ESTATE, offset = 0x0

  public bool ESTATE_HANDICAPSTATE_NORECOVER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_HANDICAPSTATE_NORECOVER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_HANDICAPSTATE_NORECOVER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_HANDICAPSTATE_NORECOVER(const class ESTATE_HANDICAPSTATE_NORECOVER &)
  public void ESTATE_HANDICAPSTATE_NORECOVER::ESTATE_HANDICAPSTATE_NORECOVER()
  public void ~ESTATE_HANDICAPSTATE_NORECOVER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HARMONIZE {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_HARMONIZE::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_HARMONIZE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_HARMONIZE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_HARMONIZE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_HARMONIZE(const class ESTATE_HARMONIZE &)
  public void ESTATE_HARMONIZE::ESTATE_HARMONIZE()
  public void ~ESTATE_HARMONIZE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HEALPLUS {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_HEALPLUS(const class ESTATE_HEALPLUS &)
  public void ESTATE_HEALPLUS::ESTATE_HEALPLUS()
  public void ~ESTATE_HEALPLUS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HEATER {
  ESTATE, offset = 0x0

  public bool ESTATE_HEATER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_HEATER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_HEATER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_HEATER(const class ESTATE_HEATER &)
  public void ESTATE_HEATER::ESTATE_HEATER()
  public void ~ESTATE_HEATER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HEATER_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_HEATER_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_HEATER_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_HEATER_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_HEATER_OPTION(const class ESTATE_HEATER_OPTION &)
  public void ESTATE_HEATER_OPTION::ESTATE_HEATER_OPTION()
  public void ~ESTATE_HEATER_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HELLPOWER {
  ESTATE, offset = 0x0

  public void ESTATE_HELLPOWER(const class ESTATE_HELLPOWER &)
  public void ESTATE_HELLPOWER::ESTATE_HELLPOWER()
  public void ~ESTATE_HELLPOWER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_HOVERING {
  ESTATE, offset = 0x0

  public bool ESTATE_HOVERING::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_HOVERING::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_HOVERING::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_HOVERING(const class ESTATE_HOVERING &)
  public void ESTATE_HOVERING::ESTATE_HOVERING()
  public void ~ESTATE_HOVERING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_IGNORANCE {
  ESTATE, offset = 0x0

  public bool ESTATE_IGNORANCE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_IGNORANCE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_IGNORANCE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_IGNORANCE(const class ESTATE_IGNORANCE &)
  public void ESTATE_IGNORANCE::ESTATE_IGNORANCE()
  public void ~ESTATE_IGNORANCE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ILLUSION {
  ESTATE, offset = 0x0

  public void ESTATE_ILLUSION(const class ESTATE_ILLUSION &)
  public void ESTATE_ILLUSION::ESTATE_ILLUSION()
  public void ~ESTATE_ILLUSION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_IMMUNITYSCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_IMMUNITYSCROLL(const class ESTATE_IMMUNITYSCROLL &)
  public void ESTATE_IMMUNITYSCROLL::ESTATE_IMMUNITYSCROLL()
  public void ~ESTATE_IMMUNITYSCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_IMPOSITIO {
  ESTATE, offset = 0x0

  public void ESTATE_IMPOSITIO(const class ESTATE_IMPOSITIO &)
  public void ESTATE_IMPOSITIO::ESTATE_IMPOSITIO()
  public void ~ESTATE_IMPOSITIO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_INC_AGI {
  ESTATE, offset = 0x0

  public void ESTATE_INC_AGI(const class ESTATE_INC_AGI &)
  public void ESTATE_INC_AGI::ESTATE_INC_AGI()
  public void ~ESTATE_INC_AGI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_INFRAREDSCAN {
  ESTATE, offset = 0x0

  public bool ESTATE_INFRAREDSCAN::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_INFRAREDSCAN::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_INFRAREDSCAN::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_INFRAREDSCAN(const class ESTATE_INFRAREDSCAN &)
  public void ESTATE_INFRAREDSCAN::ESTATE_INFRAREDSCAN()
  public void ~ESTATE_INFRAREDSCAN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_INSPIRATION {
  ESTATE, offset = 0x0

  /* this+0x30 */ int m_Increment_AtkPower
  public static int GetVAL3(const int, const int)
  public static int GetVAL3BaseLevel(const int)
  public static int GetVAL3JobLevel(const int)
  public bool ESTATE_INSPIRATION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_INSPIRATION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_INSPIRATION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_INSPIRATION(const class ESTATE_INSPIRATION &)
  public void ESTATE_INSPIRATION::ESTATE_INSPIRATION()
  public void ~ESTATE_INSPIRATION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_INT_SCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_INT_SCROLL(const class ESTATE_INT_SCROLL &)
  public void ESTATE_INT_SCROLL::ESTATE_INT_SCROLL()
  public void ~ESTATE_INT_SCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_INVISIBILITY {
  ESTATE, offset = 0x0

  public bool ESTATE_INVISIBILITY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_INVISIBILITY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_INVISIBILITY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_INVISIBILITY(const class ESTATE_INVISIBILITY &)
  public void ESTATE_INVISIBILITY::ESTATE_INVISIBILITY()
  public void ~ESTATE_INVISIBILITY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ITEMSKILL_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_ITEMSKILL_POSTDELAY(const class ESTATE_ITEMSKILL_POSTDELAY &)
  public void ESTATE_ITEMSKILL_POSTDELAY::ESTATE_ITEMSKILL_POSTDELAY(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void ESTATE_ITEMSKILL_POSTDELAY::~ESTATE_ITEMSKILL_POSTDELAY()
  public unsigned short ESTATE_ITEMSKILL_POSTDELAY::GetSKID()
  public void ESTATE_ITEMSKILL_POSTDELAY::SetComplete(class CActor *, const int, const int, const int, const int)
  /* this+0x30 */ const int m_SKID
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_IZAYOI {
  ESTATE, offset = 0x0

  public bool ESTATE_IZAYOI::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_IZAYOI::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_IZAYOI::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_IZAYOI(const class ESTATE_IZAYOI &)
  public void ESTATE_IZAYOI::ESTATE_IZAYOI()
  public void ~ESTATE_IZAYOI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_JOINTBEAT {
  ESTATE, offset = 0x0

  public void ESTATE_JOINTBEAT(const class ESTATE_JOINTBEAT &)
  public void ESTATE_JOINTBEAT::ESTATE_JOINTBEAT()
  public void ~ESTATE_JOINTBEAT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_KAAHI {
  ESTATE, offset = 0x0

  public void ESTATE_KAAHI(const class ESTATE_KAAHI &)
  public void ESTATE_KAAHI::ESTATE_KAAHI()
  public void ~ESTATE_KAAHI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_KAGEMUSYA {
  ESTATE, offset = 0x0

  public bool ESTATE_KAGEMUSYA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_KAGEMUSYA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_KAGEMUSYA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_KAGEMUSYA(const class ESTATE_KAGEMUSYA &)
  public void ESTATE_KAGEMUSYA::ESTATE_KAGEMUSYA()
  public void ~ESTATE_KAGEMUSYA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_KAITE {
  ESTATE, offset = 0x0

  public void ESTATE_KAITE(const class ESTATE_KAITE &)
  public void ESTATE_KAITE::ESTATE_KAITE()
  public void ~ESTATE_KAITE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_KAUPE {
  ESTATE, offset = 0x0

  public void ESTATE_KAUPE(const class ESTATE_KAUPE &)
  public void ESTATE_KAUPE::ESTATE_KAUPE()
  public void ~ESTATE_KAUPE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_KG_KAGEHUMI {
  ESTATE, offset = 0x0

  public void ESTATE_KG_KAGEHUMI(const class ESTATE_KG_KAGEHUMI &)
  public void ESTATE_KG_KAGEHUMI::ESTATE_KG_KAGEHUMI()
  public void ~ESTATE_KG_KAGEHUMI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_KO_JYUMONJIKIRI {
  ESTATE, offset = 0x0

  public void ESTATE_KO_JYUMONJIKIRI(const class ESTATE_KO_JYUMONJIKIRI &)
  public void ESTATE_KO_JYUMONJIKIRI::ESTATE_KO_JYUMONJIKIRI()
  public void ~ESTATE_KO_JYUMONJIKIRI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_KYOMU {
  ESTATE, offset = 0x0

  public void ESTATE_KYOMU(const class ESTATE_KYOMU &)
  public void ESTATE_KYOMU::ESTATE_KYOMU()
  public void ~ESTATE_KYOMU()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_KYOUGAKU {
  ESTATE, offset = 0x0

  public bool ESTATE_KYOUGAKU::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_KYOUGAKU::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_KYOUGAKU::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_KYOUGAKU(const class ESTATE_KYOUGAKU &)
  public void ESTATE_KYOUGAKU::ESTATE_KYOUGAKU()
  public void ~ESTATE_KYOUGAKU()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_KYRIE {
  ESTATE, offset = 0x0

  public void ESTATE_KYRIE(const class ESTATE_KYRIE &)
  public void ESTATE_KYRIE::ESTATE_KYRIE()
  public void ~ESTATE_KYRIE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LAUDAAGNUS {
  ESTATE, offset = 0x0

  public bool ESTATE_LAUDAAGNUS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_LAUDAAGNUS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_LAUDAAGNUS::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_LAUDAAGNUS(const class ESTATE_LAUDAAGNUS &)
  public void ESTATE_LAUDAAGNUS::ESTATE_LAUDAAGNUS()
  public void ~ESTATE_LAUDAAGNUS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LAUDARAMUS {
  ESTATE, offset = 0x0

  public bool ESTATE_LAUDARAMUS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_LAUDARAMUS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_LAUDARAMUS::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_LAUDARAMUS(const class ESTATE_LAUDARAMUS &)
  public void ESTATE_LAUDARAMUS::ESTATE_LAUDARAMUS()
  public void ~ESTATE_LAUDARAMUS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LAZINESS {
  ESTATE, offset = 0x0

    public bool ESTATE_LAZINESS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_LAZINESS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_LAZINESS::ResetComplete(class CActor *, const int, const int, const int)
  public static int GetPlusReduceSPcost(const int)
  public void ESTATE_LAZINESS(const class ESTATE_LAZINESS &)
  public void ESTATE_LAZINESS::ESTATE_LAZINESS()
  public void ~ESTATE_LAZINESS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

union ESTATE_LAZINESS::VALUE2 {
    /* this+0x0 */ struct ESTATE_LAZINESS::VALUE2::tagMember m_member

  /* this+0x0 */ int m_amount
  public int operator int()
  public void VALUE2(const int)
  public void VALUE2(const int, const int, const int)
}

struct ESTATE_LAZINESS::VALUE2::tagMember {
  /* this(bf)+0x0:0x0 len(0x8) */ int IncPreDelayPercent
  /* this(bf)+0x0:0x8 len(0x8) */ int AvoidanceDecPercent
  /* this(bf)+0x0:0x10 len(0x8) */ int PlusReduceSPAmout
  /* this(bf)+0x0:0x18 len(0x8) */ int unused
}

class ESTATE_LEECHESEND {
  ESTATE_GC_POISON, offset = 0x0

  public int ESTATE_LEECHESEND::GetApplyWeaponMSGID()
  public bool ESTATE_LEECHESEND::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_LEECHESEND::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_LEECHESEND::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_LEECHESEND(const class ESTATE_LEECHESEND &)
  public void ESTATE_LEECHESEND::ESTATE_LEECHESEND()
  public void ESTATE_LEECHESEND::~ESTATE_LEECHESEND()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LERADS_DEW {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_LERADS_DEW::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_LERADS_DEW::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_LERADS_DEW::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_LERADS_DEW::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_LERADS_DEW(const class ESTATE_LERADS_DEW &)
  public void ESTATE_LERADS_DEW::ESTATE_LERADS_DEW()
  public void ~ESTATE_LERADS_DEW()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LEXAETERNA {
  ESTATE, offset = 0x0

  public void ESTATE_LEXAETERNA(const class ESTATE_LEXAETERNA &)
  public void ESTATE_LEXAETERNA::ESTATE_LEXAETERNA()
  public void ~ESTATE_LEXAETERNA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LG_REFLECTDAMAGE {
  ESTATE, offset = 0x0

  public void ESTATE_LG_REFLECTDAMAGE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_LG_REFLECTDAMAGE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_LG_REFLECTDAMAGE(const class ESTATE_LG_REFLECTDAMAGE &)
  public void ESTATE_LG_REFLECTDAMAGE::ESTATE_LG_REFLECTDAMAGE()
  public void ~ESTATE_LG_REFLECTDAMAGE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LIFE_FORCE_F {
  ESTATE, offset = 0x0

  public bool ESTATE_LIFE_FORCE_F::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_LIFE_FORCE_F::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_LIFE_FORCE_F::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_LIFE_FORCE_F(const class ESTATE_LIFE_FORCE_F &)
  public void ESTATE_LIFE_FORCE_F::ESTATE_LIFE_FORCE_F()
  public void ~ESTATE_LIFE_FORCE_F()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LIGHTNINGWALK {
  ESTATE, offset = 0x0

  public bool ESTATE_LIGHTNINGWALK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_LIGHTNINGWALK::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_LIGHTNINGWALK::ResetComplete(class CActor *, const int, const int, const int)
  public static bool ESTATE_LIGHTNINGWALK::Invoke(class CPC *, class CCharacter *, const int)
  public void ESTATE_LIGHTNINGWALK(const class ESTATE_LIGHTNINGWALK &)
  public void ESTATE_LIGHTNINGWALK::ESTATE_LIGHTNINGWALK()
  public void ~ESTATE_LIGHTNINGWALK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LIGHT_OF_REGENE {
  ESTATE, offset = 0x0

  public void ESTATE_LIGHT_OF_REGENE(const class ESTATE_LIGHT_OF_REGENE &)
  public void ESTATE_LIGHT_OF_REGENE::ESTATE_LIGHT_OF_REGENE()
  public void ~ESTATE_LIGHT_OF_REGENE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LIMIT_ODINS_RECALL {
  ESTATE_ITEMSKILL_POSTDELAY, offset = 0x0

  public void ESTATE_LIMIT_ODINS_RECALL(const class ESTATE_LIMIT_ODINS_RECALL &)
  public void ESTATE_LIMIT_ODINS_RECALL::ESTATE_LIMIT_ODINS_RECALL()
  public void ESTATE_LIMIT_ODINS_RECALL::~ESTATE_LIMIT_ODINS_RECALL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_LKCONCENTRATION {
  ESTATE, offset = 0x0

  public void ESTATE_LKCONCENTRATION(const class ESTATE_LKCONCENTRATION &)
  public void ESTATE_LKCONCENTRATION::ESTATE_LKCONCENTRATION()
  public void ~ESTATE_LKCONCENTRATION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_L_LIFEPOTION {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_L_LIFEPOTION(const class ESTATE_L_LIFEPOTION &)
  public void ESTATE_L_LIFEPOTION::ESTATE_L_LIFEPOTION()
  public void ~ESTATE_L_LIFEPOTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MACRO {
  ESTATE, offset = 0x0

  public void ESTATE_MACRO::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MACRO::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MACRO(const class ESTATE_MACRO &)
  public void ESTATE_MACRO::ESTATE_MACRO()
  public void ~ESTATE_MACRO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MACRO_PERMIT {
  ESTATE, offset = 0x0

  public bool ESTATE_MACRO_PERMIT::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MACRO_PERMIT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MACRO_PERMIT::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MACRO_PERMIT(const class ESTATE_MACRO_PERMIT &)
  public void ESTATE_MACRO_PERMIT::ESTATE_MACRO_PERMIT()
  public void ~ESTATE_MACRO_PERMIT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MACRO_PLAY {
  ESTATE, offset = 0x0

  public bool ESTATE_MACRO_PLAY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MACRO_PLAY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MACRO_PLAY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MACRO_PLAY(const class ESTATE_MACRO_PLAY &)
  public void ESTATE_MACRO_PLAY::ESTATE_MACRO_PLAY()
  public void ~ESTATE_MACRO_PLAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MACRO_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_MACRO_POSTDELAY(const class ESTATE_MACRO_POSTDELAY &)
  public void ESTATE_MACRO_POSTDELAY::ESTATE_MACRO_POSTDELAY()
  public void ~ESTATE_MACRO_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MAGICMUSHROOM {
  ESTATE_GC_POISON, offset = 0x0

  public int ESTATE_MAGICMUSHROOM::GetApplyWeaponMSGID()
  public bool ESTATE_MAGICMUSHROOM::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MAGICMUSHROOM::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MAGICMUSHROOM::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MAGICMUSHROOM(const class ESTATE_MAGICMUSHROOM &)
  public void ESTATE_MAGICMUSHROOM::ESTATE_MAGICMUSHROOM()
  public void ESTATE_MAGICMUSHROOM::~ESTATE_MAGICMUSHROOM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MAGICPOWER {
  ESTATE, offset = 0x0

  public void ESTATE_MAGICPOWER(const class ESTATE_MAGICPOWER &)
  public void ESTATE_MAGICPOWER::ESTATE_MAGICPOWER()
  public void ~ESTATE_MAGICPOWER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MAGICROD {
  ESTATE, offset = 0x0

  public void ESTATE_MAGICROD(const class ESTATE_MAGICROD &)
  public void ESTATE_MAGICROD::ESTATE_MAGICROD()
  public void ~ESTATE_MAGICROD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MAGIC_CANDY {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MAGIC_CANDY(const class ESTATE_MAGIC_CANDY &)
  public void ESTATE_MAGIC_CANDY::ESTATE_MAGIC_CANDY()
  public void ~ESTATE_MAGIC_CANDY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MAGMA_FLOW {
  ESTATE, offset = 0x0

  public void ESTATE_MAGMA_FLOW(const class ESTATE_MAGMA_FLOW &)
  public void ESTATE_MAGMA_FLOW::ESTATE_MAGMA_FLOW()
  public void ~ESTATE_MAGMA_FLOW()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MAGNETICFIELD {
  ESTATE, offset = 0x0

  public bool ESTATE_MAGNETICFIELD::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MAGNETICFIELD::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MAGNETICFIELD::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MAGNETICFIELD(const class ESTATE_MAGNETICFIELD &)
  public void ESTATE_MAGNETICFIELD::ESTATE_MAGNETICFIELD()
  public void ~ESTATE_MAGNETICFIELD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MAGNIFICAT {
  ESTATE, offset = 0x0

  public void ESTATE_MAGNIFICAT(const class ESTATE_MAGNIFICAT &)
  public void ESTATE_MAGNIFICAT::ESTATE_MAGNIFICAT()
  public void ~ESTATE_MAGNIFICAT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MANA_PLUS {
  ESTATE, offset = 0x0

  public bool ESTATE_MANA_PLUS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MANA_PLUS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MANA_PLUS::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MANA_PLUS(const class ESTATE_MANA_PLUS &)
  public void ESTATE_MANA_PLUS::ESTATE_MANA_PLUS()
  public void ~ESTATE_MANA_PLUS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MANDRAGORA {
  ESTATE, offset = 0x0

  public bool ESTATE_MANDRAGORA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MANDRAGORA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MANDRAGORA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MANDRAGORA(const class ESTATE_MANDRAGORA &)
  public void ESTATE_MANDRAGORA::ESTATE_MANDRAGORA()
  public void ~ESTATE_MANDRAGORA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MANHOLE {
  ESTATE, offset = 0x0

  public void ESTATE_MANHOLE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MANHOLE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MANHOLE(const class ESTATE_MANHOLE &)
  public void ESTATE_MANHOLE::ESTATE_MANHOLE()
  public void ~ESTATE_MANHOLE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MANU_ATK {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MANU_ATK(const class ESTATE_MANU_ATK &)
  public void ESTATE_MANU_ATK::ESTATE_MANU_ATK()
  public void ~ESTATE_MANU_ATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MANU_DEF {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MANU_DEF(const class ESTATE_MANU_DEF &)
  public void ESTATE_MANU_DEF::ESTATE_MANU_DEF()
  public void ~ESTATE_MANU_DEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MANU_MATK {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MANU_MATK(const class ESTATE_MANU_MATK &)
  public void ESTATE_MANU_MATK::ESTATE_MANU_MATK()
  public void ~ESTATE_MANU_MATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MARSHOFABYSS {
  ESTATE, offset = 0x0

  public bool ESTATE_MARSHOFABYSS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MARSHOFABYSS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MARSHOFABYSS::ResetComplete(class CActor *, const int, const int, const int)
  public float ESTATE_MARSHOFABYSS::GetReductionPercentAGIDEXForPlayer(const int)
  public float ESTATE_MARSHOFABYSS::GetReductionPercentAGIDEXForMonster(const int)
  public void ESTATE_MARSHOFABYSS(const class ESTATE_MARSHOFABYSS &)
  public void ESTATE_MARSHOFABYSS::ESTATE_MARSHOFABYSS()
  public void ~ESTATE_MARSHOFABYSS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MASK {
  ESTATE, offset = 0x0

  public void ESTATE_MASK(const class ESTATE_MASK &)
  public void ESTATE_MASK::ESTATE_MASK()
  public void ~ESTATE_MASK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MAXIMIZE {
  ESTATE, offset = 0x0

  public void ESTATE_MAXIMIZE(const class ESTATE_MAXIMIZE &)
  public void ESTATE_MAXIMIZE::ESTATE_MAXIMIZE()
  public void ~ESTATE_MAXIMIZE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MEIKYOUSISUI {
  ESTATE, offset = 0x0

  public bool ESTATE_MEIKYOUSISUI::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MEIKYOUSISUI::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MEIKYOUSISUI::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MEIKYOUSISUI(const class ESTATE_MEIKYOUSISUI &)
  public void ESTATE_MEIKYOUSISUI::ESTATE_MEIKYOUSISUI()
  public void ~ESTATE_MEIKYOUSISUI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MELODYOFSINK {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_MELODYOFSINK::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_MELODYOFSINK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MELODYOFSINK::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MELODYOFSINK::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MELODYOFSINK(const class ESTATE_MELODYOFSINK &)
  public void ESTATE_MELODYOFSINK::ESTATE_MELODYOFSINK()
  public void ~ESTATE_MELODYOFSINK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MELON_BOMB {
  ESTATE, offset = 0x0

  public bool ESTATE_MELON_BOMB::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MELON_BOMB::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MELON_BOMB::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MELON_BOMB(const class ESTATE_MELON_BOMB &)
  public void ESTATE_MELON_BOMB::ESTATE_MELON_BOMB()
  public void ~ESTATE_MELON_BOMB()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MELTDOWN {
  ESTATE, offset = 0x0

  public void ESTATE_MELTDOWN(const class ESTATE_MELTDOWN &)
  public void ESTATE_MELTDOWN::ESTATE_MELTDOWN()
  public void ~ESTATE_MELTDOWN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MEMORIZE {
  ESTATE, offset = 0x0

  public void ESTATE_MEMORIZE(const class ESTATE_MEMORIZE &)
  public void ESTATE_MEMORIZE::ESTATE_MEMORIZE()
  public void ~ESTATE_MEMORIZE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MENTAL {
  ESTATE, offset = 0x0

  public void ESTATE_MENTAL(const class ESTATE_MENTAL &)
  public void ESTATE_MENTAL::ESTATE_MENTAL()
  public void ~ESTATE_MENTAL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MER_ATK {
  ESTATE, offset = 0x0

  public void ESTATE_MER_ATK(const class ESTATE_MER_ATK &)
  public void ESTATE_MER_ATK::ESTATE_MER_ATK()
  public void ~ESTATE_MER_ATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MER_FLEE {
  ESTATE, offset = 0x0

  public void ESTATE_MER_FLEE(const class ESTATE_MER_FLEE &)
  public void ESTATE_MER_FLEE::ESTATE_MER_FLEE()
  public void ~ESTATE_MER_FLEE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MER_HIT {
  ESTATE, offset = 0x0

  public void ESTATE_MER_HIT(const class ESTATE_MER_HIT &)
  public void ESTATE_MER_HIT::ESTATE_MER_HIT()
  public void ~ESTATE_MER_HIT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MER_HP {
  ESTATE, offset = 0x0

  public void ESTATE_MER_HP(const class ESTATE_MER_HP &)
  public void ESTATE_MER_HP::ESTATE_MER_HP()
  public void ~ESTATE_MER_HP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MER_SP {
  ESTATE, offset = 0x0

  public void ESTATE_MER_SP(const class ESTATE_MER_SP &)
  public void ESTATE_MER_SP::ESTATE_MER_SP()
  public void ~ESTATE_MER_SP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MIDNIGHT_FRENZY_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_MIDNIGHT_FRENZY_POSTDELAY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MIDNIGHT_FRENZY_POSTDELAY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MIDNIGHT_FRENZY_POSTDELAY::Send_PACKET_ZC_SKILLINFO_UPDATE2(class CActor *, const int, const int, const int)
  public void ESTATE_MIDNIGHT_FRENZY_POSTDELAY(const class ESTATE_MIDNIGHT_FRENZY_POSTDELAY &)
  public void ESTATE_MIDNIGHT_FRENZY_POSTDELAY::ESTATE_MIDNIGHT_FRENZY_POSTDELAY()
  public void ~ESTATE_MIDNIGHT_FRENZY_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MINDBREAKER {
  ESTATE, offset = 0x0

  public void ESTATE_MINDBREAKER(const class ESTATE_MINDBREAKER &)
  public void ESTATE_MINDBREAKER::ESTATE_MINDBREAKER()
  public void ~ESTATE_MINDBREAKER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MINOR_BBQ {
  ESTATE, offset = 0x0

  public bool ESTATE_MINOR_BBQ::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MINOR_BBQ::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MINOR_BBQ::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MINOR_BBQ(const class ESTATE_MINOR_BBQ &)
  public void ESTATE_MINOR_BBQ::ESTATE_MINOR_BBQ()
  public void ~ESTATE_MINOR_BBQ()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MONSTER_TRANSFORM {
  ESTATE, offset = 0x0

  public bool ESTATE_MONSTER_TRANSFORM::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MONSTER_TRANSFORM(const class ESTATE_MONSTER_TRANSFORM &)
  public void ESTATE_MONSTER_TRANSFORM::ESTATE_MONSTER_TRANSFORM()
  public void ~ESTATE_MONSTER_TRANSFORM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MOONLIT_SERENADE {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_MOONLIT_SERENADE::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_MOONLIT_SERENADE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MOONLIT_SERENADE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MOONLIT_SERENADE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MOONLIT_SERENADE(const class ESTATE_MOONLIT_SERENADE &)
  public void ESTATE_MOONLIT_SERENADE::ESTATE_MOONLIT_SERENADE()
  public void ~ESTATE_MOONLIT_SERENADE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MOONSTAR {
  ESTATE, offset = 0x0

  public bool ESTATE_MOONSTAR::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MOONSTAR(const class ESTATE_MOONSTAR &)
  public void ESTATE_MOONSTAR::ESTATE_MOONSTAR()
  public void ~ESTATE_MOONSTAR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MORA_BUFF {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MORA_BUFF(const class ESTATE_MORA_BUFF &)
  public void ESTATE_MORA_BUFF::ESTATE_MORA_BUFF()
  public void ~ESTATE_MORA_BUFF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MOUSEWHEEL {
  ESTATE, offset = 0x0

  public void ESTATE_MOUSEWHEEL(const class ESTATE_MOUSEWHEEL &)
  public void ESTATE_MOUSEWHEEL::ESTATE_MOUSEWHEEL()
  public void ~ESTATE_MOUSEWHEEL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MOVESLOW_POTION {
  ESTATE, offset = 0x0

  public void ESTATE_MOVESLOW_POTION(const class ESTATE_MOVESLOW_POTION &)
  public void ESTATE_MOVESLOW_POTION::ESTATE_MOVESLOW_POTION()
  public void ~ESTATE_MOVESLOW_POTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MOVHASTE_HORSE {
  ESTATE, offset = 0x0

  public void ESTATE_MOVHASTE_HORSE(const class ESTATE_MOVHASTE_HORSE &)
  public void ESTATE_MOVHASTE_HORSE::ESTATE_MOVHASTE_HORSE()
  public void ~ESTATE_MOVHASTE_HORSE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MOVHASTE_INFINITY {
  ESTATE, offset = 0x0

  public bool ESTATE_MOVHASTE_INFINITY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public bool ESTATE_MOVHASTE_INFINITY::ResetCheckup(class CActor *, const int, struct EFFECTIVE_INFO *)
  public void ESTATE_MOVHASTE_INFINITY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MOVHASTE_INFINITY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MOVHASTE_INFINITY(const class ESTATE_MOVHASTE_INFINITY &)
  public void ESTATE_MOVHASTE_INFINITY::ESTATE_MOVHASTE_INFINITY()
  public void ~ESTATE_MOVHASTE_INFINITY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MOVHASTE_POTION {
  ESTATE, offset = 0x0

  public void ESTATE_MOVHASTE_POTION(const class ESTATE_MOVHASTE_POTION &)
  public void ESTATE_MOVHASTE_POTION::ESTATE_MOVHASTE_POTION()
  public void ~ESTATE_MOVHASTE_POTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MTF_ASPD {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MTF_ASPD(const class ESTATE_MTF_ASPD &)
  public void ESTATE_MTF_ASPD::ESTATE_MTF_ASPD()
  public void ~ESTATE_MTF_ASPD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MTF_CRIDAMAGE {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MTF_CRIDAMAGE(const class ESTATE_MTF_CRIDAMAGE &)
  public void ESTATE_MTF_CRIDAMAGE::ESTATE_MTF_CRIDAMAGE()
  public void ~ESTATE_MTF_CRIDAMAGE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MTF_MATK {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MTF_MATK(const class ESTATE_MTF_MATK &)
  public void ESTATE_MTF_MATK::ESTATE_MTF_MATK()
  public void ~ESTATE_MTF_MATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MTF_MLEATKED {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MTF_MLEATKED(const class ESTATE_MTF_MLEATKED &)
  public void ESTATE_MTF_MLEATKED::ESTATE_MTF_MLEATKED()
  public void ~ESTATE_MTF_MLEATKED()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MTF_RANGEATK {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MTF_RANGEATK(const class ESTATE_MTF_RANGEATK &)
  public void ESTATE_MTF_RANGEATK::ESTATE_MTF_RANGEATK()
  public void ~ESTATE_MTF_RANGEATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MUSTLE_M {
  ESTATE, offset = 0x0

  public bool ESTATE_MUSTLE_M::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MUSTLE_M::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MUSTLE_M::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MUSTLE_M(const class ESTATE_MUSTLE_M &)
  public void ESTATE_MUSTLE_M::ESTATE_MUSTLE_M()
  public void ~ESTATE_MUSTLE_M()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MVPCARD_MISTRESS {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MVPCARD_MISTRESS(const class ESTATE_MVPCARD_MISTRESS &)
  public void ESTATE_MVPCARD_MISTRESS::ESTATE_MVPCARD_MISTRESS()
  public void ~ESTATE_MVPCARD_MISTRESS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MVPCARD_ORCHERO {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MVPCARD_ORCHERO(const class ESTATE_MVPCARD_ORCHERO &)
  public void ESTATE_MVPCARD_ORCHERO::ESTATE_MVPCARD_ORCHERO()
  public void ~ESTATE_MVPCARD_ORCHERO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MVPCARD_ORCLORD {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MVPCARD_ORCLORD(const class ESTATE_MVPCARD_ORCLORD &)
  public void ESTATE_MVPCARD_ORCLORD::ESTATE_MVPCARD_ORCLORD()
  public void ~ESTATE_MVPCARD_ORCLORD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MVPCARD_TAOGUNKA {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MVPCARD_TAOGUNKA(const class ESTATE_MVPCARD_TAOGUNKA &)
  public void ESTATE_MVPCARD_TAOGUNKA::ESTATE_MVPCARD_TAOGUNKA()
  public void ~ESTATE_MVPCARD_TAOGUNKA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MYSTERIOUS_POWDER {
  ESTATE, offset = 0x0

  public bool ESTATE_MYSTERIOUS_POWDER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_MYSTERIOUS_POWDER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_MYSTERIOUS_POWDER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_MYSTERIOUS_POWDER(const class ESTATE_MYSTERIOUS_POWDER &)
  public void ESTATE_MYSTERIOUS_POWDER::ESTATE_MYSTERIOUS_POWDER()
  public void ~ESTATE_MYSTERIOUS_POWDER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_MYSTICSCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_MYSTICSCROLL(const class ESTATE_MYSTICSCROLL &)
  public void ESTATE_MYSTICSCROLL::ESTATE_MYSTICSCROLL()
  public void ~ESTATE_MYSTICSCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NEEDLE_OF_PARALYZE {
  ESTATE, offset = 0x0

  public bool ESTATE_NEEDLE_OF_PARALYZE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_NEEDLE_OF_PARALYZE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_NEEDLE_OF_PARALYZE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_NEEDLE_OF_PARALYZE(const class ESTATE_NEEDLE_OF_PARALYZE &)
  public void ESTATE_NEEDLE_OF_PARALYZE::ESTATE_NEEDLE_OF_PARALYZE()
  public void ~ESTATE_NEEDLE_OF_PARALYZE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NETHERWORLD {
  ESTATE, offset = 0x0

  public bool ESTATE_NETHERWORLD::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_NETHERWORLD::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_NETHERWORLD::ResetComplete(class CActor *, const int, const int, const int)
  public static int ESTATE_NETHERWORLD::ModifyTime(const int, class CCharacter *)
  public void ESTATE_NETHERWORLD(const class ESTATE_NETHERWORLD &)
  public void ESTATE_NETHERWORLD::ESTATE_NETHERWORLD()
  public void ~ESTATE_NETHERWORLD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NEUTRALBARRIER {
  ESTATE, offset = 0x0

  public bool ESTATE_NEUTRALBARRIER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_NEUTRALBARRIER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_NEUTRALBARRIER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_NEUTRALBARRIER(const class ESTATE_NEUTRALBARRIER &)
  public void ESTATE_NEUTRALBARRIER::ESTATE_NEUTRALBARRIER()
  public void ~ESTATE_NEUTRALBARRIER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NEUTRALBARRIER_MASTER {
  ESTATE, offset = 0x0

  public bool ESTATE_NEUTRALBARRIER_MASTER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_NEUTRALBARRIER_MASTER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_NEUTRALBARRIER_MASTER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_NEUTRALBARRIER_MASTER(const class ESTATE_NEUTRALBARRIER_MASTER &)
  public void ESTATE_NEUTRALBARRIER_MASTER::ESTATE_NEUTRALBARRIER_MASTER()
  public void ~ESTATE_NEUTRALBARRIER_MASTER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NJ_BUNSINJYUTSU {
  ESTATE, offset = 0x0

  public void ESTATE_NJ_BUNSINJYUTSU(const class ESTATE_NJ_BUNSINJYUTSU &)
  public void ESTATE_NJ_BUNSINJYUTSU::ESTATE_NJ_BUNSINJYUTSU()
  public void ~ESTATE_NJ_BUNSINJYUTSU()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NJ_SUITON {
  ESTATE, offset = 0x0

  public void ESTATE_NJ_SUITON(const class ESTATE_NJ_SUITON &)
  public void ESTATE_NJ_SUITON::ESTATE_NJ_SUITON()
  public void ~ESTATE_NJ_SUITON()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NJ_UTSUSEMI {
  ESTATE, offset = 0x0

  public void ESTATE_NJ_UTSUSEMI(const class ESTATE_NJ_UTSUSEMI &)
  public void ESTATE_NJ_UTSUSEMI::ESTATE_NJ_UTSUSEMI()
  public void ~ESTATE_NJ_UTSUSEMI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NOEQUIPACCESSARY {
  ESTATE, offset = 0x0

  public void ESTATE_NOEQUIPACCESSARY(const class ESTATE_NOEQUIPACCESSARY &)
  public void ESTATE_NOEQUIPACCESSARY::ESTATE_NOEQUIPACCESSARY()
  public void ~ESTATE_NOEQUIPACCESSARY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NOEQUIPARMOR {
  ESTATE, offset = 0x0

  public void ESTATE_NOEQUIPARMOR(const class ESTATE_NOEQUIPARMOR &)
  public void ESTATE_NOEQUIPARMOR::ESTATE_NOEQUIPARMOR()
  public void ~ESTATE_NOEQUIPARMOR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NOEQUIPHELM {
  ESTATE, offset = 0x0

  public void ESTATE_NOEQUIPHELM(const class ESTATE_NOEQUIPHELM &)
  public void ESTATE_NOEQUIPHELM::ESTATE_NOEQUIPHELM()
  public void ~ESTATE_NOEQUIPHELM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NOEQUIPSHIELD {
  ESTATE, offset = 0x0

  public void ESTATE_NOEQUIPSHIELD(const class ESTATE_NOEQUIPSHIELD &)
  public void ESTATE_NOEQUIPSHIELD::ESTATE_NOEQUIPSHIELD()
  public void ~ESTATE_NOEQUIPSHIELD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_NOEQUIPWEAPON {
  ESTATE, offset = 0x0

  public void ESTATE_NOEQUIPWEAPON(const class ESTATE_NOEQUIPWEAPON &)
  public void ESTATE_NOEQUIPWEAPON::ESTATE_NOEQUIPWEAPON()
  public void ~ESTATE_NOEQUIPWEAPON()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_OBLIVIONCURSE {
  ESTATE_GC_POISON, offset = 0x0

  public int ESTATE_OBLIVIONCURSE::GetApplyWeaponMSGID()
  public bool ESTATE_OBLIVIONCURSE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_OBLIVIONCURSE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_OBLIVIONCURSE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_OBLIVIONCURSE(const class ESTATE_OBLIVIONCURSE &)
  public void ESTATE_OBLIVIONCURSE::ESTATE_OBLIVIONCURSE()
  public void ESTATE_OBLIVIONCURSE::~ESTATE_OBLIVIONCURSE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ODINS_POWER {
  ESTATE, offset = 0x0

  public bool ESTATE_ODINS_POWER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ODINS_POWER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ODINS_POWER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ODINS_POWER(const class ESTATE_ODINS_POWER &)
  public void ESTATE_ODINS_POWER::ESTATE_ODINS_POWER()
  public void ~ESTATE_ODINS_POWER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ONEHANDQUICKEN {
  ESTATE, offset = 0x0

  public void ESTATE_ONEHANDQUICKEN(const class ESTATE_ONEHANDQUICKEN &)
  public void ESTATE_ONEHANDQUICKEN::ESTATE_ONEHANDQUICKEN()
  public void ~ESTATE_ONEHANDQUICKEN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ON_PUSH_CART {
  ESTATE, offset = 0x0

  public bool ESTATE_ON_PUSH_CART::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ON_PUSH_CART::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ON_PUSH_CART(const class ESTATE_ON_PUSH_CART &)
  public void ESTATE_ON_PUSH_CART::ESTATE_ON_PUSH_CART()
  public void ~ESTATE_ON_PUSH_CART()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ORATIO {
  ESTATE, offset = 0x0

  public void ESTATE_ORATIO(const class ESTATE_ORATIO &)
  public void ESTATE_ORATIO::ESTATE_ORATIO()
  public void ~ESTATE_ORATIO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_OVERED_BOOST {
  ESTATE, offset = 0x0

  public bool ESTATE_OVERED_BOOST::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_OVERED_BOOST::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_OVERED_BOOST::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_OVERED_BOOST(const class ESTATE_OVERED_BOOST &)
  public void ESTATE_OVERED_BOOST::ESTATE_OVERED_BOOST()
  public void ~ESTATE_OVERED_BOOST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_OVERHEAT {
  ESTATE, offset = 0x0

  public bool ESTATE_OVERHEAT::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_OVERHEAT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_OVERHEAT::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_OVERHEAT(const class ESTATE_OVERHEAT &)
  public void ESTATE_OVERHEAT::ESTATE_OVERHEAT()
  public void ~ESTATE_OVERHEAT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_OVERHEAT_LIMITPOINT {
  ESTATE, offset = 0x0

    public bool ESTATE_OVERHEAT_LIMITPOINT::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_OVERHEAT_LIMITPOINT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_OVERHEAT_LIMITPOINT::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_OVERHEAT_LIMITPOINT(const class ESTATE_OVERHEAT_LIMITPOINT &)
  public void ESTATE_OVERHEAT_LIMITPOINT::ESTATE_OVERHEAT_LIMITPOINT()
  public void ~ESTATE_OVERHEAT_LIMITPOINT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_OVERLAPEXPUP {
  ESTATE_SCRIPT, offset = 0x0

  public bool ESTATE_OVERLAPEXPUP::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_OVERLAPEXPUP(const class ESTATE_OVERLAPEXPUP &)
  public void ESTATE_OVERLAPEXPUP::ESTATE_OVERLAPEXPUP()
  public void ~ESTATE_OVERLAPEXPUP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_OVERTHRUST {
  ESTATE, offset = 0x0

  public void ESTATE_OVERTHRUST(const class ESTATE_OVERTHRUST &)
  public void ESTATE_OVERTHRUST::ESTATE_OVERTHRUST()
  public void ~ESTATE_OVERTHRUST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_OVERTHRUSTMAX {
  ESTATE, offset = 0x0

  public void ESTATE_OVERTHRUSTMAX(const class ESTATE_OVERTHRUSTMAX &)
  public void ESTATE_OVERTHRUSTMAX::ESTATE_OVERTHRUSTMAX()
  public void ~ESTATE_OVERTHRUSTMAX()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PAIN_KILLER {
  ESTATE, offset = 0x0

  public bool ESTATE_PAIN_KILLER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PAIN_KILLER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PAIN_KILLER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PAIN_KILLER(const class ESTATE_PAIN_KILLER &)
  public void ESTATE_PAIN_KILLER::ESTATE_PAIN_KILLER()
  public void ~ESTATE_PAIN_KILLER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PARALYSE {
  ESTATE_GC_POISON, offset = 0x0

  public int ESTATE_PARALYSE::GetApplyWeaponMSGID()
  public bool ESTATE_PARALYSE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PARALYSE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PARALYSE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PARALYSE(const class ESTATE_PARALYSE &)
  public void ESTATE_PARALYSE::ESTATE_PARALYSE()
  public void ESTATE_PARALYSE::~ESTATE_PARALYSE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PARRYING {
  ESTATE, offset = 0x0

  public void ESTATE_PARRYING(const class ESTATE_PARRYING &)
  public void ESTATE_PARRYING::ESTATE_PARRYING()
  public void ~ESTATE_PARRYING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PARTYFLEE {
  ESTATE, offset = 0x0

  public void ESTATE_PARTYFLEE(const class ESTATE_PARTYFLEE &)
  public void ESTATE_PARTYFLEE::ESTATE_PARTYFLEE()
  public void ~ESTATE_PARTYFLEE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PC_IZ_DUN05 {
  ESTATE_SCRIPT, offset = 0x0

  public bool ESTATE_PC_IZ_DUN05::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PC_IZ_DUN05(const class ESTATE_PC_IZ_DUN05 &)
  public void ESTATE_PC_IZ_DUN05::ESTATE_PC_IZ_DUN05()
  public void ~ESTATE_PC_IZ_DUN05()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PERFORMANCE {
  ESTATE, offset = 0x0

  public void ESTATE_PERFORMANCE(const class ESTATE_PERFORMANCE &)
  public void ESTATE_PERFORMANCE::ESTATE_PERFORMANCE()
  public void ~ESTATE_PERFORMANCE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PERIOD_TIME_CHECK_DETECT_SKILL {
  ESTATE, offset = 0x0

  public void ESTATE_PERIOD_TIME_CHECK_DETECT_SKILL(const class ESTATE_PERIOD_TIME_CHECK_DETECT_SKILL &)
  public void ESTATE_PERIOD_TIME_CHECK_DETECT_SKILL::ESTATE_PERIOD_TIME_CHECK_DETECT_SKILL()
  public void ~ESTATE_PERIOD_TIME_CHECK_DETECT_SKILL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PETROLOGY {
  ESTATE, offset = 0x0

  public bool ESTATE_PETROLOGY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PETROLOGY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PETROLOGY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PETROLOGY(const class ESTATE_PETROLOGY &)
  public void ESTATE_PETROLOGY::ESTATE_PETROLOGY()
  public void ~ESTATE_PETROLOGY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PETROLOGY_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_PETROLOGY_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PETROLOGY_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PETROLOGY_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PETROLOGY_OPTION(const class ESTATE_PETROLOGY_OPTION &)
  public void ESTATE_PETROLOGY_OPTION::ESTATE_PETROLOGY_OPTION()
  public void ~ESTATE_PETROLOGY_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PHI_DEMON {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_PHI_DEMON(const class ESTATE_PHI_DEMON &)
  public void ESTATE_PHI_DEMON::ESTATE_PHI_DEMON()
  public void ~ESTATE_PHI_DEMON()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PLUSATTACKPOWER {
  ESTATE, offset = 0x0

  public void ESTATE_PLUSATTACKPOWER(const class ESTATE_PLUSATTACKPOWER &)
  public void ESTATE_PLUSATTACKPOWER::ESTATE_PLUSATTACKPOWER()
  public void ~ESTATE_PLUSATTACKPOWER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PLUSAVOIDVALUE {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_PLUSAVOIDVALUE(const class ESTATE_PLUSAVOIDVALUE &)
  public void ESTATE_PLUSAVOIDVALUE::ESTATE_PLUSAVOIDVALUE()
  public void ~ESTATE_PLUSAVOIDVALUE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PLUSMAGICPOWER {
  ESTATE, offset = 0x0

  public void ESTATE_PLUSMAGICPOWER(const class ESTATE_PLUSMAGICPOWER &)
  public void ESTATE_PLUSMAGICPOWER::ESTATE_PLUSMAGICPOWER()
  public void ~ESTATE_PLUSMAGICPOWER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_POISONINGWEAPON {
  ESTATE, offset = 0x0

    public bool ESTATE_POISONINGWEAPON::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_POISONINGWEAPON(const class ESTATE_POISONINGWEAPON &)
  public void ESTATE_POISONINGWEAPON::ESTATE_POISONINGWEAPON()
  public void ~ESTATE_POISONINGWEAPON()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_POISONREACT {
  ESTATE, offset = 0x0

  public void ESTATE_POISONREACT(const class ESTATE_POISONREACT &)
  public void ESTATE_POISONREACT::ESTATE_POISONREACT()
  public void ~ESTATE_POISONREACT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_POPECOOKIE {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_POPECOOKIE(const class ESTATE_POPECOOKIE &)
  public void ESTATE_POPECOOKIE::ESTATE_POPECOOKIE()
  public void ~ESTATE_POPECOOKIE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_POSTDELAY(const class ESTATE_POSTDELAY &)
  public void ESTATE_POSTDELAY::ESTATE_POSTDELAY()
  public void ~ESTATE_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_POWER_OF_GAIA {
  ESTATE, offset = 0x0

  public bool ESTATE_POWER_OF_GAIA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_POWER_OF_GAIA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_POWER_OF_GAIA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_POWER_OF_GAIA(const class ESTATE_POWER_OF_GAIA &)
  public void ESTATE_POWER_OF_GAIA::ESTATE_POWER_OF_GAIA()
  public void ~ESTATE_POWER_OF_GAIA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PRESERVE {
  ESTATE, offset = 0x0

  public void ESTATE_PRESERVE(const class ESTATE_PRESERVE &)
  public void ESTATE_PRESERVE::ESTATE_PRESERVE()
  public void ~ESTATE_PRESERVE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PRESTIGE {
  ESTATE, offset = 0x0

  public bool ESTATE_PRESTIGE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PRESTIGE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PRESTIGE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PRESTIGE(const class ESTATE_PRESTIGE &)
  public void ESTATE_PRESTIGE::ESTATE_PRESTIGE()
  public void ~ESTATE_PRESTIGE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROMOTE_HEALTH_RESERCH {
  ESTATE, offset = 0x0

  public bool ESTATE_PROMOTE_HEALTH_RESERCH::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PROMOTE_HEALTH_RESERCH::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PROMOTE_HEALTH_RESERCH::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PROMOTE_HEALTH_RESERCH(const class ESTATE_PROMOTE_HEALTH_RESERCH &)
  public void ESTATE_PROMOTE_HEALTH_RESERCH::ESTATE_PROMOTE_HEALTH_RESERCH()
  public void ~ESTATE_PROMOTE_HEALTH_RESERCH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROPERTYDARK {
  ESTATE, offset = 0x0

  public void ESTATE_PROPERTYDARK(const class ESTATE_PROPERTYDARK &)
  public void ESTATE_PROPERTYDARK::ESTATE_PROPERTYDARK()
  public void ~ESTATE_PROPERTYDARK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROPERTYFIRE {
  ESTATE, offset = 0x0

  public void ESTATE_PROPERTYFIRE(const class ESTATE_PROPERTYFIRE &)
  public void ESTATE_PROPERTYFIRE::ESTATE_PROPERTYFIRE()
  public void ~ESTATE_PROPERTYFIRE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROPERTYGROUND {
  ESTATE, offset = 0x0

  public void ESTATE_PROPERTYGROUND(const class ESTATE_PROPERTYGROUND &)
  public void ESTATE_PROPERTYGROUND::ESTATE_PROPERTYGROUND()
  public void ~ESTATE_PROPERTYGROUND()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROPERTYTELEKINESIS {
  ESTATE, offset = 0x0

  public void ESTATE_PROPERTYTELEKINESIS(const class ESTATE_PROPERTYTELEKINESIS &)
  public void ESTATE_PROPERTYTELEKINESIS::ESTATE_PROPERTYTELEKINESIS()
  public void ~ESTATE_PROPERTYTELEKINESIS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROPERTYUNDEAD {
  ESTATE, offset = 0x0

  public void ESTATE_PROPERTYUNDEAD(const class ESTATE_PROPERTYUNDEAD &)
  public void ESTATE_PROPERTYUNDEAD::ESTATE_PROPERTYUNDEAD()
  public void ~ESTATE_PROPERTYUNDEAD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROPERTYWALK {
  ESTATE, offset = 0x0

  public void ESTATE_PROPERTYWALK(const class ESTATE_PROPERTYWALK &)
  public void ESTATE_PROPERTYWALK::ESTATE_PROPERTYWALK()
  public void ~ESTATE_PROPERTYWALK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROPERTYWATER {
  ESTATE, offset = 0x0

  public void ESTATE_PROPERTYWATER(const class ESTATE_PROPERTYWATER &)
  public void ESTATE_PROPERTYWATER::ESTATE_PROPERTYWATER()
  public void ~ESTATE_PROPERTYWATER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROPERTYWIND {
  ESTATE, offset = 0x0

  public void ESTATE_PROPERTYWIND(const class ESTATE_PROPERTYWIND &)
  public void ESTATE_PROPERTYWIND::ESTATE_PROPERTYWIND()
  public void ~ESTATE_PROPERTYWIND()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROTECTARMOR {
  ESTATE, offset = 0x0

  public void ESTATE_PROTECTARMOR(const class ESTATE_PROTECTARMOR &)
  public void ESTATE_PROTECTARMOR::ESTATE_PROTECTARMOR()
  public void ~ESTATE_PROTECTARMOR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROTECTHELM {
  ESTATE, offset = 0x0

  public void ESTATE_PROTECTHELM(const class ESTATE_PROTECTHELM &)
  public void ESTATE_PROTECTHELM::ESTATE_PROTECTHELM()
  public void ~ESTATE_PROTECTHELM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROTECTSHIELD {
  ESTATE, offset = 0x0

  public void ESTATE_PROTECTSHIELD(const class ESTATE_PROTECTSHIELD &)
  public void ESTATE_PROTECTSHIELD::ESTATE_PROTECTSHIELD()
  public void ~ESTATE_PROTECTSHIELD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROTECTWEAPON {
  ESTATE, offset = 0x0

  public void ESTATE_PROTECTWEAPON(const class ESTATE_PROTECTWEAPON &)
  public void ESTATE_PROTECTWEAPON::ESTATE_PROTECTWEAPON()
  public void ~ESTATE_PROTECTWEAPON()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROTECT_DEF {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_PROTECT_DEF(const class ESTATE_PROTECT_DEF &)
  public void ESTATE_PROTECT_DEF::ESTATE_PROTECT_DEF()
  public void ~ESTATE_PROTECT_DEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROTECT_MDEF {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_PROTECT_MDEF(const class ESTATE_PROTECT_MDEF &)
  public void ESTATE_PROTECT_MDEF::ESTATE_PROTECT_MDEF()
  public void ~ESTATE_PROTECT_MDEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROVIDENCE {
  ESTATE, offset = 0x0

  public void ESTATE_PROVIDENCE(const class ESTATE_PROVIDENCE &)
  public void ESTATE_PROVIDENCE::ESTATE_PROVIDENCE()
  public void ~ESTATE_PROVIDENCE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PROVOKE {
  ESTATE, offset = 0x0

  public void ESTATE_PROVOKE(const class ESTATE_PROVOKE &)
  public void ESTATE_PROVOKE::ESTATE_PROVOKE()
  public void ~ESTATE_PROVOKE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PUTTI_TAILS_NOODLES {
  ESTATE, offset = 0x0

  public bool ESTATE_PUTTI_TAILS_NOODLES::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PUTTI_TAILS_NOODLES::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PUTTI_TAILS_NOODLES::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PUTTI_TAILS_NOODLES(const class ESTATE_PUTTI_TAILS_NOODLES &)
  public void ESTATE_PUTTI_TAILS_NOODLES::ESTATE_PUTTI_TAILS_NOODLES()
  public void ~ESTATE_PUTTI_TAILS_NOODLES()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PYREXIA {
  ESTATE_GC_POISON, offset = 0x0

  public int ESTATE_PYREXIA::GetApplyWeaponMSGID()
  public bool ESTATE_PYREXIA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PYREXIA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PYREXIA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PYREXIA(const class ESTATE_PYREXIA &)
  public void ESTATE_PYREXIA::ESTATE_PYREXIA()
  public void ESTATE_PYREXIA::~ESTATE_PYREXIA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PYROCLASTIC {
  ESTATE, offset = 0x0

  public bool ESTATE_PYROCLASTIC::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PYROCLASTIC::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PYROCLASTIC::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PYROCLASTIC(const class ESTATE_PYROCLASTIC &)
  public void ESTATE_PYROCLASTIC::ESTATE_PYROCLASTIC()
  public void ~ESTATE_PYROCLASTIC()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PYROTECHNIC {
  ESTATE, offset = 0x0

  public bool ESTATE_PYROTECHNIC::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PYROTECHNIC::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PYROTECHNIC::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PYROTECHNIC(const class ESTATE_PYROTECHNIC &)
  public void ESTATE_PYROTECHNIC::ESTATE_PYROTECHNIC()
  public void ~ESTATE_PYROTECHNIC()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_PYROTECHNIC_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_PYROTECHNIC_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_PYROTECHNIC_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_PYROTECHNIC_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_PYROTECHNIC_OPTION(const class ESTATE_PYROTECHNIC_OPTION &)
  public void ESTATE_PYROTECHNIC_OPTION::ESTATE_PYROTECHNIC_OPTION()
  public void ~ESTATE_PYROTECHNIC_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_QUAGMIRE {
  ESTATE, offset = 0x0

  public void ESTATE_QUAGMIRE(const class ESTATE_QUAGMIRE &)
  public void ESTATE_QUAGMIRE::ESTATE_QUAGMIRE()
  public void ~ESTATE_QUAGMIRE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_RAID {
  ESTATE, offset = 0x0

  public void ESTATE_RAID(const class ESTATE_RAID &)
  public void ESTATE_RAID::ESTATE_RAID()
  public void ~ESTATE_RAID()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_RAISINGDRAGON {
  ESTATE, offset = 0x0

  public bool ESTATE_RAISINGDRAGON::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_RAISINGDRAGON::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_RAISINGDRAGON::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_RAISINGDRAGON(const class ESTATE_RAISINGDRAGON &)
  public void ESTATE_RAISINGDRAGON::ESTATE_RAISINGDRAGON()
  public void ~ESTATE_RAISINGDRAGON()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_RECOGNIZEDSPELL {
  ESTATE, offset = 0x0

  public void ESTATE_RECOGNIZEDSPELL(const class ESTATE_RECOGNIZEDSPELL &)
  public void ESTATE_RECOGNIZEDSPELL::ESTATE_RECOGNIZEDSPELL()
  public void ~ESTATE_RECOGNIZEDSPELL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REFLECTSHIELD {
  ESTATE, offset = 0x0

  public void ESTATE_REFLECTSHIELD(const class ESTATE_REFLECTSHIELD &)
  public void ESTATE_REFLECTSHIELD::ESTATE_REFLECTSHIELD()
  public void ~ESTATE_REFLECTSHIELD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REFRESH {
  ESTATE, offset = 0x0

  public bool ESTATE_REFRESH::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_REFRESH::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_REFRESH(const class ESTATE_REFRESH &)
  public void ESTATE_REFRESH::ESTATE_REFRESH()
  public void ~ESTATE_REFRESH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REINCARNATION {
  ESTATE, offset = 0x0

  public void ESTATE_REINCARNATION(const class ESTATE_REINCARNATION &)
  public void ESTATE_REINCARNATION::ESTATE_REINCARNATION()
  public void ~ESTATE_REINCARNATION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_RENOVATIO {
  ESTATE, offset = 0x0

  public bool ESTATE_RENOVATIO::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_RENOVATIO::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_RENOVATIO::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_RENOVATIO(const class ESTATE_RENOVATIO &)
  public void ESTATE_RENOVATIO::ESTATE_RENOVATIO()
  public void ~ESTATE_RENOVATIO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REPRODUCE {
  ESTATE, offset = 0x0

  public bool ESTATE_REPRODUCE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_REPRODUCE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_REPRODUCE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_REPRODUCE(const class ESTATE_REPRODUCE &)
  public void ESTATE_REPRODUCE::ESTATE_REPRODUCE()
  public void ~ESTATE_REPRODUCE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_RETURN_TO_ELDICASTES {
  ESTATE_ITEMSKILL_POSTDELAY, offset = 0x0

  public void ESTATE_RETURN_TO_ELDICASTES(const class ESTATE_RETURN_TO_ELDICASTES &)
  public void ESTATE_RETURN_TO_ELDICASTES::ESTATE_RETURN_TO_ELDICASTES()
  public void ESTATE_RETURN_TO_ELDICASTES::~ESTATE_RETURN_TO_ELDICASTES()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_CRUSHSTRIKE {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_CRUSHSTRIKE(const class ESTATE_REUSE_CRUSHSTRIKE &)
  public void ESTATE_REUSE_CRUSHSTRIKE::ESTATE_REUSE_CRUSHSTRIKE()
  public void ~ESTATE_REUSE_CRUSHSTRIKE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_LIMIT_A {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_LIMIT_A(const class ESTATE_REUSE_LIMIT_A &)
  public void ESTATE_REUSE_LIMIT_A::ESTATE_REUSE_LIMIT_A()
  public void ~ESTATE_REUSE_LIMIT_A()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_LIMIT_B {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_LIMIT_B(const class ESTATE_REUSE_LIMIT_B &)
  public void ESTATE_REUSE_LIMIT_B::ESTATE_REUSE_LIMIT_B()
  public void ~ESTATE_REUSE_LIMIT_B()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_LIMIT_C {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_LIMIT_C(const class ESTATE_REUSE_LIMIT_C &)
  public void ESTATE_REUSE_LIMIT_C::ESTATE_REUSE_LIMIT_C()
  public void ~ESTATE_REUSE_LIMIT_C()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_LIMIT_D {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_LIMIT_D(const class ESTATE_REUSE_LIMIT_D &)
  public void ESTATE_REUSE_LIMIT_D::ESTATE_REUSE_LIMIT_D()
  public void ~ESTATE_REUSE_LIMIT_D()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_LIMIT_E {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_LIMIT_E(const class ESTATE_REUSE_LIMIT_E &)
  public void ESTATE_REUSE_LIMIT_E::ESTATE_REUSE_LIMIT_E()
  public void ~ESTATE_REUSE_LIMIT_E()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_LIMIT_F {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_LIMIT_F(const class ESTATE_REUSE_LIMIT_F &)
  public void ESTATE_REUSE_LIMIT_F::ESTATE_REUSE_LIMIT_F()
  public void ~ESTATE_REUSE_LIMIT_F()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_LIMIT_G {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_LIMIT_G(const class ESTATE_REUSE_LIMIT_G &)
  public void ESTATE_REUSE_LIMIT_G::ESTATE_REUSE_LIMIT_G()
  public void ~ESTATE_REUSE_LIMIT_G()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_LIMIT_H {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_LIMIT_H(const class ESTATE_REUSE_LIMIT_H &)
  public void ESTATE_REUSE_LIMIT_H::ESTATE_REUSE_LIMIT_H()
  public void ~ESTATE_REUSE_LIMIT_H()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_LIMIT_MTF {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_LIMIT_MTF(const class ESTATE_REUSE_LIMIT_MTF &)
  public void ESTATE_REUSE_LIMIT_MTF::ESTATE_REUSE_LIMIT_MTF()
  public void ~ESTATE_REUSE_LIMIT_MTF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_MILLENNIUMSHIELD {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_MILLENNIUMSHIELD(const class ESTATE_REUSE_MILLENNIUMSHIELD &)
  public void ESTATE_REUSE_MILLENNIUMSHIELD::ESTATE_REUSE_MILLENNIUMSHIELD()
  public void ~ESTATE_REUSE_MILLENNIUMSHIELD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_REFRESH {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_REFRESH(const class ESTATE_REUSE_REFRESH &)
  public void ESTATE_REUSE_REFRESH::ESTATE_REUSE_REFRESH()
  public void ~ESTATE_REUSE_REFRESH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REUSE_STORMBLAST {
  ESTATE, offset = 0x0

  public void ESTATE_REUSE_STORMBLAST(const class ESTATE_REUSE_STORMBLAST &)
  public void ESTATE_REUSE_STORMBLAST::ESTATE_REUSE_STORMBLAST()
  public void ~ESTATE_REUSE_STORMBLAST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_REWARD_PLUSONLYJOBEXP {
  ESTATE_SCRIPT, offset = 0x0

  public bool ESTATE_REWARD_PLUSONLYJOBEXP::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_REWARD_PLUSONLYJOBEXP(const class ESTATE_REWARD_PLUSONLYJOBEXP &)
  public void ESTATE_REWARD_PLUSONLYJOBEXP::ESTATE_REWARD_PLUSONLYJOBEXP()
  public void ~ESTATE_REWARD_PLUSONLYJOBEXP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_RG_CCONFINE_M {
  ESTATE, offset = 0x0

  public void ESTATE_RG_CCONFINE_M(const class ESTATE_RG_CCONFINE_M &)
  public void ESTATE_RG_CCONFINE_M::ESTATE_RG_CCONFINE_M()
  public void ~ESTATE_RG_CCONFINE_M()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_RG_CCONFINE_S {
  ESTATE, offset = 0x0

  public void ESTATE_RG_CCONFINE_S(const class ESTATE_RG_CCONFINE_S &)
  public void ESTATE_RG_CCONFINE_S::ESTATE_RG_CCONFINE_S()
  public void ~ESTATE_RG_CCONFINE_S()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ROCK_CRUSHER {
  ESTATE, offset = 0x0

  public bool ESTATE_ROCK_CRUSHER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ROCK_CRUSHER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ROCK_CRUSHER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ROCK_CRUSHER(const class ESTATE_ROCK_CRUSHER &)
  public void ESTATE_ROCK_CRUSHER::ESTATE_ROCK_CRUSHER()
  public void ~ESTATE_ROCK_CRUSHER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ROCK_CRUSHER_ATK {
  ESTATE, offset = 0x0

  public bool ESTATE_ROCK_CRUSHER_ATK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ROCK_CRUSHER_ATK::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ROCK_CRUSHER_ATK::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ROCK_CRUSHER_ATK(const class ESTATE_ROCK_CRUSHER_ATK &)
  public void ESTATE_ROCK_CRUSHER_ATK::ESTATE_ROCK_CRUSHER_ATK()
  public void ~ESTATE_ROCK_CRUSHER_ATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ROLLINGCUTTER {
  ESTATE, offset = 0x0

  public bool ESTATE_ROLLINGCUTTER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ROLLINGCUTTER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ROLLINGCUTTER(const class ESTATE_ROLLINGCUTTER &)
  public void ESTATE_ROLLINGCUTTER::ESTATE_ROLLINGCUTTER()
  public void ~ESTATE_ROLLINGCUTTER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ROYALSCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_ROYALSCROLL(const class ESTATE_ROYALSCROLL &)
  public void ESTATE_ROYALSCROLL::ESTATE_ROYALSCROLL()
  public void ~ESTATE_ROYALSCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_RUN {
  ESTATE, offset = 0x0

  public void ESTATE_RUN(const class ESTATE_RUN &)
  public void ESTATE_RUN::ESTATE_RUN()
  public void ~ESTATE_RUN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_RUSH_WINDMILL {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_RUSH_WINDMILL::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_RUSH_WINDMILL::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_RUSH_WINDMILL::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_RUSH_WINDMILL::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_RUSH_WINDMILL(const class ESTATE_RUSH_WINDMILL &)
  public void ESTATE_RUSH_WINDMILL::ESTATE_RUSH_WINDMILL()
  public void ~ESTATE_RUSH_WINDMILL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SACRIFICE {
  ESTATE, offset = 0x0

  public void ESTATE_SACRIFICE(const class ESTATE_SACRIFICE &)
  public void ESTATE_SACRIFICE::ESTATE_SACRIFICE()
  public void ~ESTATE_SACRIFICE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SATURDAY_NIGHT_FEVER {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_SATURDAY_NIGHT_FEVER::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_SATURDAY_NIGHT_FEVER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SATURDAY_NIGHT_FEVER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SATURDAY_NIGHT_FEVER::ResetComplete(class CActor *, const int, const int, const int)
  private int ESTATE_SATURDAY_NIGHT_FEVER::GetATKAmount(const int)
  private int GetATKpercent(const int)
  private int ESTATE_SATURDAY_NIGHT_FEVER::GetDEFpercent(const int)
  private int GetAvoidancePercent(const int)
  private int GetReduceHPSPPerSec(const int)
  public void ESTATE_SATURDAY_NIGHT_FEVER(const class ESTATE_SATURDAY_NIGHT_FEVER &)
  public void ESTATE_SATURDAY_NIGHT_FEVER::ESTATE_SATURDAY_NIGHT_FEVER()
  public void ~ESTATE_SATURDAY_NIGHT_FEVER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SAVAGE_STEAK {
  ESTATE, offset = 0x0

  public bool ESTATE_SAVAGE_STEAK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SAVAGE_STEAK::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SAVAGE_STEAK::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SAVAGE_STEAK(const class ESTATE_SAVAGE_STEAK &)
  public void ESTATE_SAVAGE_STEAK::ESTATE_SAVAGE_STEAK()
  public void ~ESTATE_SAVAGE_STEAK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SCRIPT {
  ESTATE, offset = 0x0

  public bool ESTATE_SCRIPT::IsExistScript()
  public void AddScript(int, int)
  public int GetScriptPos(int)
  public void ESTATE_SCRIPT(const class ESTATE_SCRIPT &)
  public void ESTATE_SCRIPT::ESTATE_SCRIPT(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void ESTATE_SCRIPT::~ESTATE_SCRIPT()
  /* this+0x30 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_scriptPos

  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SCRIPT_SCANNER {
  CInterpretHandler, offset = 0x0

  public void ESTATE_SCRIPT_SCANNER(const class ESTATE_SCRIPT_SCANNER &)
  public void ESTATE_SCRIPT_SCANNER()
  public bool Scan(class CBinBuf *)
  public bool ESTATE_SCRIPT_SCANNER::OnFunc(int, class std::deque<TokenData,std::allocator<TokenData> > &, struct TokenData &)
  public void ESTATE_SCRIPT_SCANNER::OnError(const char *)
  private bool FuncBuff(const char *)
  /* this+0x8 */ bool m_isError
  /* this+0xc */ class CInterpreter m_interpreter

  /* this+0x4c */ class ESTATE_SCRIPT * m_EStateScript
  public void ESTATE_SCRIPT_SCANNER::~ESTATE_SCRIPT_SCANNER()
  public class ESTATE_SCRIPT_SCANNER & operator=(const class ESTATE_SCRIPT_SCANNER &)
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SEARCH_STORE_INFO {
  ESTATE, offset = 0x0

  public void ESTATE_SEARCH_STORE_INFO(const class ESTATE_SEARCH_STORE_INFO &)
  public void ESTATE_SEARCH_STORE_INFO::ESTATE_SEARCH_STORE_INFO()
  public void ~ESTATE_SEARCH_STORE_INFO()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SET_NUM_DEF {
  ESTATE, offset = 0x0

  public bool ESTATE_SET_NUM_DEF::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SET_NUM_DEF::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SET_NUM_DEF::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SET_NUM_DEF(const class ESTATE_SET_NUM_DEF &)
  public void ESTATE_SET_NUM_DEF::ESTATE_SET_NUM_DEF()
  public void ~ESTATE_SET_NUM_DEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SET_NUM_MDEF {
  ESTATE, offset = 0x0

  public bool ESTATE_SET_NUM_MDEF::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SET_NUM_MDEF::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SET_NUM_MDEF::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SET_NUM_MDEF(const class ESTATE_SET_NUM_MDEF &)
  public void ESTATE_SET_NUM_MDEF::ESTATE_SET_NUM_MDEF()
  public void ~ESTATE_SET_NUM_MDEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SET_PER_DEF {
  ESTATE, offset = 0x0

  public bool ESTATE_SET_PER_DEF::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SET_PER_DEF(const class ESTATE_SET_PER_DEF &)
  public void ESTATE_SET_PER_DEF::ESTATE_SET_PER_DEF()
  public void ~ESTATE_SET_PER_DEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SET_PER_MDEF {
  ESTATE, offset = 0x0

  public bool ESTATE_SET_PER_MDEF::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SET_PER_MDEF(const class ESTATE_SET_PER_MDEF &)
  public void ESTATE_SET_PER_MDEF::ESTATE_SET_PER_MDEF()
  public void ~ESTATE_SET_PER_MDEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SHADOWFORM {
  ESTATE, offset = 0x0

    public bool ESTATE_SHADOWFORM::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SHADOWFORM::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SHADOWFORM::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SHADOWFORM(const class ESTATE_SHADOWFORM &)
  public void ESTATE_SHADOWFORM::ESTATE_SHADOWFORM()
  public void ~ESTATE_SHADOWFORM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SHADOWFORM::lcVal0 {
  public int operator int()
  public int GetReduceSPAmount()
  public void lcVal0(const int)
  public void lcVal0(const int, const int)
  /* this+0x0 */ const int m_Level
  /* this+0x4 */ const int m_ReduceSPAmount
}

class ESTATE_SHAPESHIFT {
  ESTATE, offset = 0x0

  public bool ESTATE_SHAPESHIFT::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SHAPESHIFT::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SHAPESHIFT::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SHAPESHIFT(const class ESTATE_SHAPESHIFT &)
  public void ESTATE_SHAPESHIFT::ESTATE_SHAPESHIFT()
  public void ~ESTATE_SHAPESHIFT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SHIELDSPELL_DEF {
  ESTATE, offset = 0x0

    public void ESTATE_SHIELDSPELL_DEF::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SHIELDSPELL_DEF::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SHIELDSPELL_DEF(const class ESTATE_SHIELDSPELL_DEF &)
  public void ESTATE_SHIELDSPELL_DEF::ESTATE_SHIELDSPELL_DEF()
  public void ~ESTATE_SHIELDSPELL_DEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SHIELDSPELL_MDEF {
  ESTATE, offset = 0x0

    public void ESTATE_SHIELDSPELL_MDEF::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SHIELDSPELL_MDEF::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SHIELDSPELL_MDEF(const class ESTATE_SHIELDSPELL_MDEF &)
  public void ESTATE_SHIELDSPELL_MDEF::ESTATE_SHIELDSPELL_MDEF()
  public void ~ESTATE_SHIELDSPELL_MDEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SHIELDSPELL_REF {
  ESTATE, offset = 0x0

    public void ESTATE_SHIELDSPELL_REF::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SHIELDSPELL_REF::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SHIELDSPELL_REF(const class ESTATE_SHIELDSPELL_REF &)
  public void ESTATE_SHIELDSPELL_REF::ESTATE_SHIELDSPELL_REF()
  public void ~ESTATE_SHIELDSPELL_REF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SHOUT {
  ESTATE, offset = 0x0

  public void ESTATE_SHOUT(const class ESTATE_SHOUT &)
  public void ESTATE_SHOUT::ESTATE_SHOUT()
  public void ~ESTATE_SHOUT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SILVERVEIN_RUSH_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_SILVERVEIN_RUSH_POSTDELAY(const class ESTATE_SILVERVEIN_RUSH_POSTDELAY &)
  public void ESTATE_SILVERVEIN_RUSH_POSTDELAY::ESTATE_SILVERVEIN_RUSH_POSTDELAY()
  public void ~ESTATE_SILVERVEIN_RUSH_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SIRCLEOFNATURE {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_SIRCLEOFNATURE::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_SIRCLEOFNATURE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SIRCLEOFNATURE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SIRCLEOFNATURE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SIRCLEOFNATURE(const class ESTATE_SIRCLEOFNATURE &)
  public void ESTATE_SIRCLEOFNATURE::ESTATE_SIRCLEOFNATURE()
  public void ~ESTATE_SIRCLEOFNATURE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SIREN {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_SIREN::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_SIREN::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SIREN::SetComplete(class CActor *, const int, const int, const int, const int)
  public static int ESTATE_SIREN::ModifyTime(const int, class CCharacter *)
  public void ESTATE_SIREN(const class ESTATE_SIREN &)
  public void ESTATE_SIREN::ESTATE_SIREN()
  public void ~ESTATE_SIREN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SIROMA_ICE_TEA {
  ESTATE, offset = 0x0

  public bool ESTATE_SIROMA_ICE_TEA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SIROMA_ICE_TEA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SIROMA_ICE_TEA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SIROMA_ICE_TEA(const class ESTATE_SIROMA_ICE_TEA &)
  public void ESTATE_SIROMA_ICE_TEA::ESTATE_SIROMA_ICE_TEA()
  public void ~ESTATE_SIROMA_ICE_TEA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SIT {
  ESTATE, offset = 0x0

  public void ESTATE_SIT(const class ESTATE_SIT &)
  public void ESTATE_SIT::ESTATE_SIT()
  public void ~ESTATE_SIT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SITDOWN_FORCE {
  ESTATE, offset = 0x0

  public bool ESTATE_SITDOWN_FORCE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SITDOWN_FORCE(const class ESTATE_SITDOWN_FORCE &)
  public void ESTATE_SITDOWN_FORCE::ESTATE_SITDOWN_FORCE()
  public void ~ESTATE_SITDOWN_FORCE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SKELSCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_SKELSCROLL(const class ESTATE_SKELSCROLL &)
  public void ESTATE_SKELSCROLL::ESTATE_SKELSCROLL()
  public void ~ESTATE_SKELSCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SKF_ASPD {
  ESTATE_SCRIPT, offset = 0x0

  public bool ESTATE_SKF_ASPD::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SKF_ASPD(const class ESTATE_SKF_ASPD &)
  public void ESTATE_SKF_ASPD::ESTATE_SKF_ASPD()
  public void ~ESTATE_SKF_ASPD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SKF_ATK {
  ESTATE_SCRIPT, offset = 0x0

  public bool ESTATE_SKF_ATK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SKF_ATK(const class ESTATE_SKF_ATK &)
  public void ESTATE_SKF_ATK::ESTATE_SKF_ATK()
  public void ~ESTATE_SKF_ATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SKF_CAST {
  ESTATE_SCRIPT, offset = 0x0

  public bool ESTATE_SKF_CAST::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SKF_CAST(const class ESTATE_SKF_CAST &)
  public void ESTATE_SKF_CAST::ESTATE_SKF_CAST()
  public void ~ESTATE_SKF_CAST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SKF_MATK {
  ESTATE_SCRIPT, offset = 0x0

  public bool ESTATE_SKF_MATK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SKF_MATK(const class ESTATE_SKF_MATK &)
  public void ESTATE_SKF_MATK::ESTATE_SKF_MATK()
  public void ~ESTATE_SKF_MATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SLOWCAST {
  ESTATE, offset = 0x0

  public void ESTATE_SLOWCAST(const class ESTATE_SLOWCAST &)
  public void ESTATE_SLOWCAST::ESTATE_SLOWCAST()
  public void ~ESTATE_SLOWCAST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SLOWPOISON {
  ESTATE, offset = 0x0

  public void ESTATE_SLOWPOISON(const class ESTATE_SLOWPOISON &)
  public void ESTATE_SLOWPOISON::ESTATE_SLOWPOISON()
  public void ~ESTATE_SLOWPOISON()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SOLID_SKIN {
  ESTATE, offset = 0x0

  public bool ESTATE_SOLID_SKIN::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SOLID_SKIN::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SOLID_SKIN::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SOLID_SKIN(const class ESTATE_SOLID_SKIN &)
  public void ESTATE_SOLID_SKIN::ESTATE_SOLID_SKIN()
  public void ~ESTATE_SOLID_SKIN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SOLID_SKIN_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_SOLID_SKIN_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SOLID_SKIN_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SOLID_SKIN_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SOLID_SKIN_OPTION(const class ESTATE_SOLID_SKIN_OPTION &)
  public void ESTATE_SOLID_SKIN_OPTION::ESTATE_SOLID_SKIN_OPTION()
  public void ~ESTATE_SOLID_SKIN_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SONG_OF_MANA {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_SONG_OF_MANA::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_SONG_OF_MANA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SONG_OF_MANA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SONG_OF_MANA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SONG_OF_MANA(const class ESTATE_SONG_OF_MANA &)
  public void ESTATE_SONG_OF_MANA::ESTATE_SONG_OF_MANA()
  public void ~ESTATE_SONG_OF_MANA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SONIC_CLAW_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_SONIC_CLAW_POSTDELAY(const class ESTATE_SONIC_CLAW_POSTDELAY &)
  public void ESTATE_SONIC_CLAW_POSTDELAY::ESTATE_SONIC_CLAW_POSTDELAY()
  public void ~ESTATE_SONIC_CLAW_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SOULLINK {
  ESTATE, offset = 0x0

  public bool ESTATE_SOULLINK::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SOULLINK::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SOULLINK::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SOULLINK(const class ESTATE_SOULLINK &)
  public void ESTATE_SOULLINK::ESTATE_SOULLINK()
  public void ~ESTATE_SOULLINK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SOULSCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_SOULSCROLL(const class ESTATE_SOULSCROLL &)
  public void ESTATE_SOULSCROLL::ESTATE_SOULSCROLL()
  public void ~ESTATE_SOULSCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPEARQUICKEN {
  ESTATE, offset = 0x0

  public void ESTATE_SPEARQUICKEN(const class ESTATE_SPEARQUICKEN &)
  public void ESTATE_SPEARQUICKEN::ESTATE_SPEARQUICKEN()
  public void ~ESTATE_SPEARQUICKEN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPECIALZONE {
  ESTATE, offset = 0x0

  public void ESTATE_SPECIALZONE(const class ESTATE_SPECIALZONE &)
  public void ESTATE_SPECIALZONE::ESTATE_SPECIALZONE()
  public void ~ESTATE_SPECIALZONE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLBOOK {
  ESTATE, offset = 0x0

  public static void ESTATE_SPELLBOOK::GetCurPreservationSK(class CActor *, int &, int &)
  public static void ESTATE_SPELLBOOK::ResetAllPreservationSK(class CActor *)
  public static int ESTATE_SPELLBOOK::GetRandomPreservationSKEfstID(class CActor *)
    /* [0x0003:0x0004fd04] */ static  class std::vector<int,std::allocator<int> > m_EFSTs

  public void ESTATE_SPELLBOOK(const class ESTATE_SPELLBOOK &)
  public void ESTATE_SPELLBOOK::ESTATE_SPELLBOOK(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void ESTATE_SPELLBOOK::~ESTATE_SPELLBOOK()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLBOOK1 {
  ESTATE_SPELLBOOK, offset = 0x0

  public void ESTATE_SPELLBOOK1(const class ESTATE_SPELLBOOK1 &)
  public void ESTATE_SPELLBOOK1::ESTATE_SPELLBOOK1()
  public void ESTATE_SPELLBOOK1::~ESTATE_SPELLBOOK1()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLBOOK2 {
  ESTATE_SPELLBOOK, offset = 0x0

  public void ESTATE_SPELLBOOK2(const class ESTATE_SPELLBOOK2 &)
  public void ESTATE_SPELLBOOK2::ESTATE_SPELLBOOK2()
  public void ESTATE_SPELLBOOK2::~ESTATE_SPELLBOOK2()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLBOOK3 {
  ESTATE_SPELLBOOK, offset = 0x0

  public void ESTATE_SPELLBOOK3(const class ESTATE_SPELLBOOK3 &)
  public void ESTATE_SPELLBOOK3::ESTATE_SPELLBOOK3()
  public void ESTATE_SPELLBOOK3::~ESTATE_SPELLBOOK3()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLBOOK4 {
  ESTATE_SPELLBOOK, offset = 0x0

  public void ESTATE_SPELLBOOK4(const class ESTATE_SPELLBOOK4 &)
  public void ESTATE_SPELLBOOK4::ESTATE_SPELLBOOK4()
  public void ESTATE_SPELLBOOK4::~ESTATE_SPELLBOOK4()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLBOOK5 {
  ESTATE_SPELLBOOK, offset = 0x0

  public void ESTATE_SPELLBOOK5(const class ESTATE_SPELLBOOK5 &)
  public void ESTATE_SPELLBOOK5::ESTATE_SPELLBOOK5()
  public void ESTATE_SPELLBOOK5::~ESTATE_SPELLBOOK5()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLBOOK6 {
  ESTATE_SPELLBOOK, offset = 0x0

  public void ESTATE_SPELLBOOK6(const class ESTATE_SPELLBOOK6 &)
  public void ESTATE_SPELLBOOK6::ESTATE_SPELLBOOK6()
  public void ESTATE_SPELLBOOK6::~ESTATE_SPELLBOOK6()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLBOOK7 {
  ESTATE_SPELLBOOK, offset = 0x0

  public void ESTATE_SPELLBOOK7(const class ESTATE_SPELLBOOK7 &)
  public void ESTATE_SPELLBOOK7::ESTATE_SPELLBOOK7()
  public void ESTATE_SPELLBOOK7::~ESTATE_SPELLBOOK7()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLFIST {
  ESTATE, offset = 0x0

    public void ESTATE_SPELLFIST(const class ESTATE_SPELLFIST &)
  public void ESTATE_SPELLFIST::ESTATE_SPELLFIST()
  public void ~ESTATE_SPELLFIST()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPELLFIST::lcVar {
  /* this+0x0 */ unsigned int m_SKID
  /* this+0x4 */ unsigned int m_Level
  public static int ESTATE_SPELLFIST::lcVar::GetSKID(class CActor *)
  public int operator int()
  public void lcVar(const int)
  public void lcVar(const int, const int)
}

class ESTATE_SPIDERWEB {
  ESTATE, offset = 0x0

  public void ESTATE_SPIDERWEB(const class ESTATE_SPIDERWEB &)
  public void ESTATE_SPIDERWEB::ESTATE_SPIDERWEB()
  public void ~ESTATE_SPIDERWEB()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPIRITS_SAVEINFO1 {
  ESTATE, offset = 0x0

  public void ESTATE_SPIRITS_SAVEINFO1(const class ESTATE_SPIRITS_SAVEINFO1 &)
  public void ESTATE_SPIRITS_SAVEINFO1::ESTATE_SPIRITS_SAVEINFO1()
  public void ~ESTATE_SPIRITS_SAVEINFO1()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPIRITS_SAVEINFO2 {
  ESTATE, offset = 0x0

  public void ESTATE_SPIRITS_SAVEINFO2(const class ESTATE_SPIRITS_SAVEINFO2 &)
  public void ESTATE_SPIRITS_SAVEINFO2::ESTATE_SPIRITS_SAVEINFO2()
  public void ~ESTATE_SPIRITS_SAVEINFO2()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPL_ATK {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_SPL_ATK(const class ESTATE_SPL_ATK &)
  public void ESTATE_SPL_ATK::ESTATE_SPL_ATK()
  public void ~ESTATE_SPL_ATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPL_DEF {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_SPL_DEF(const class ESTATE_SPL_DEF &)
  public void ESTATE_SPL_DEF::ESTATE_SPL_DEF()
  public void ~ESTATE_SPL_DEF()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPL_MATK {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_SPL_MATK(const class ESTATE_SPL_MATK &)
  public void ESTATE_SPL_MATK::ESTATE_SPL_MATK()
  public void ~ESTATE_SPL_MATK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SPORE_EXPLOSION {
  ESTATE, offset = 0x0

  public static int MakeVal3(const int, const int)
  public static int GetRadiusRange(const int)
  public static int GetAtkPercent(const int)
  public bool ESTATE_SPORE_EXPLOSION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SPORE_EXPLOSION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SPORE_EXPLOSION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SPORE_EXPLOSION(const class ESTATE_SPORE_EXPLOSION &)
  public void ESTATE_SPORE_EXPLOSION::ESTATE_SPORE_EXPLOSION()
  public void ~ESTATE_SPORE_EXPLOSION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STASIS {
  ESTATE, offset = 0x0

  public bool ESTATE_STASIS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STASIS(const class ESTATE_STASIS &)
  public void ESTATE_STASIS::ESTATE_STASIS()
  public void ~ESTATE_STASIS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STATUSONE {
  ESTATE, offset = 0x0

  public void ESTATE_STATUSONE(const class ESTATE_STATUSONE &)
  public void ESTATE_STATUSONE::ESTATE_STATUSONE()
  public void ~ESTATE_STATUSONE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STEALTHFIELD {
  ESTATE, offset = 0x0

  public bool ESTATE_STEALTHFIELD::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STEALTHFIELD(const class ESTATE_STEALTHFIELD &)
  public void ESTATE_STEALTHFIELD::ESTATE_STEALTHFIELD()
  public void ~ESTATE_STEALTHFIELD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STEALTHFIELD_MASTER {
  ESTATE, offset = 0x0

  public bool ESTATE_STEALTHFIELD_MASTER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STEALTHFIELD_MASTER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_STEALTHFIELD_MASTER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_STEALTHFIELD_MASTER(const class ESTATE_STEALTHFIELD_MASTER &)
  public void ESTATE_STEALTHFIELD_MASTER::ESTATE_STEALTHFIELD_MASTER()
  public void ~ESTATE_STEALTHFIELD_MASTER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STEAMPACK {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_STEAMPACK(const class ESTATE_STEAMPACK &)
  public void ESTATE_STEAMPACK::ESTATE_STEAMPACK()
  public void ~ESTATE_STEAMPACK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STEELBODY {
  ESTATE, offset = 0x0

  public void ESTATE_STEELBODY(const class ESTATE_STEELBODY &)
  public void ESTATE_STEELBODY::ESTATE_STEELBODY()
  public void ~ESTATE_STEELBODY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STOMACHACHE {
  ESTATE, offset = 0x0

  public bool ESTATE_STOMACHACHE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STOMACHACHE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_STOMACHACHE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_STOMACHACHE(const class ESTATE_STOMACHACHE &)
  public void ESTATE_STOMACHACHE::ESTATE_STOMACHACHE()
  public void ~ESTATE_STOMACHACHE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STONEHARDSKIN {
  ESTATE, offset = 0x0

  public bool ESTATE_STONEHARDSKIN::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STONEHARDSKIN::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_STONEHARDSKIN::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_STONEHARDSKIN(const class ESTATE_STONEHARDSKIN &)
  public void ESTATE_STONEHARDSKIN::ESTATE_STONEHARDSKIN()
  public void ~ESTATE_STONEHARDSKIN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STONE_SHIELD {
  ESTATE, offset = 0x0

  public bool ESTATE_STONE_SHIELD::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STONE_SHIELD::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_STONE_SHIELD::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_STONE_SHIELD(const class ESTATE_STONE_SHIELD &)
  public void ESTATE_STONE_SHIELD::ESTATE_STONE_SHIELD()
  public void ~ESTATE_STONE_SHIELD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STONE_SHIELD_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_STONE_SHIELD_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STONE_SHIELD_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_STONE_SHIELD_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_STONE_SHIELD_OPTION(const class ESTATE_STONE_SHIELD_OPTION &)
  public void ESTATE_STONE_SHIELD_OPTION::ESTATE_STONE_SHIELD_OPTION()
  public void ~ESTATE_STONE_SHIELD_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STOP {
  ESTATE, offset = 0x0

  public void ESTATE_STOP(const class ESTATE_STOP &)
  public void ESTATE_STOP::ESTATE_STOP()
  public void ~ESTATE_STOP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STRANGELIGHTS {
  ESTATE, offset = 0x0

  public bool ESTATE_STRANGELIGHTS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STRANGELIGHTS(const class ESTATE_STRANGELIGHTS &)
  public void ESTATE_STRANGELIGHTS::ESTATE_STRANGELIGHTS()
  public void ~ESTATE_STRANGELIGHTS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STRIKING {
  ESTATE, offset = 0x0

  public bool ESTATE_STRIKING::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STRIKING::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_STRIKING::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_STRIKING(const class ESTATE_STRIKING &)
  public void ESTATE_STRIKING::ESTATE_STRIKING()
  public void ~ESTATE_STRIKING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STRIPACCESSARY {
  ESTATE, offset = 0x0

  public bool ESTATE_STRIPACCESSARY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_STRIPACCESSARY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_STRIPACCESSARY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_STRIPACCESSARY(const class ESTATE_STRIPACCESSARY &)
  public void ESTATE_STRIPACCESSARY::ESTATE_STRIPACCESSARY()
  public void ~ESTATE_STRIPACCESSARY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STRUP {
  ESTATE, offset = 0x0

  public void ESTATE_STRUP(const class ESTATE_STRUP &)
  public void ESTATE_STRUP::ESTATE_STRUP()
  public void ~ESTATE_STRUP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STR_SCROLL {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_STR_SCROLL(const class ESTATE_STR_SCROLL &)
  public void ESTATE_STR_SCROLL::ESTATE_STR_SCROLL()
  public void ~ESTATE_STR_SCROLL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_STYLE_CHANGE {
  ESTATE, offset = 0x0

    public void ESTATE_STYLE_CHANGE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_STYLE_CHANGE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_STYLE_CHANGE(const class ESTATE_STYLE_CHANGE &)
  public void ESTATE_STYLE_CHANGE::ESTATE_STYLE_CHANGE()
  public void ~ESTATE_STYLE_CHANGE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SUB_WEAPONPROPERTY {
  ESTATE, offset = 0x0

  public void ESTATE_SUB_WEAPONPROPERTY(const class ESTATE_SUB_WEAPONPROPERTY &)
  public void ESTATE_SUB_WEAPONPROPERTY::ESTATE_SUB_WEAPONPROPERTY()
  public void ~ESTATE_SUB_WEAPONPROPERTY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SUFFRAGIUM {
  ESTATE, offset = 0x0

  public void ESTATE_SUFFRAGIUM(const class ESTATE_SUFFRAGIUM &)
  public void ESTATE_SUFFRAGIUM::ESTATE_SUFFRAGIUM()
  public void ~ESTATE_SUFFRAGIUM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SUMMON1 {
  ESTATE, offset = 0x0

  public bool ESTATE_SUMMON1::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SUMMON1::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SUMMON1::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SUMMON1(const class ESTATE_SUMMON1 &)
  public void ESTATE_SUMMON1::ESTATE_SUMMON1()
  public void ~ESTATE_SUMMON1()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SUMMON2 {
  ESTATE, offset = 0x0

  public bool ESTATE_SUMMON2::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SUMMON2::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SUMMON2::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SUMMON2(const class ESTATE_SUMMON2 &)
  public void ESTATE_SUMMON2::ESTATE_SUMMON2()
  public void ~ESTATE_SUMMON2()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SUMMON3 {
  ESTATE, offset = 0x0

  public bool ESTATE_SUMMON3::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SUMMON3::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SUMMON3::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SUMMON3(const class ESTATE_SUMMON3 &)
  public void ESTATE_SUMMON3::ESTATE_SUMMON3()
  public void ~ESTATE_SUMMON3()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SUMMON4 {
  ESTATE, offset = 0x0

  public bool ESTATE_SUMMON4::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SUMMON4::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SUMMON4::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SUMMON4(const class ESTATE_SUMMON4 &)
  public void ESTATE_SUMMON4::ESTATE_SUMMON4()
  public void ~ESTATE_SUMMON4()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SUMMON5 {
  ESTATE, offset = 0x0

  public bool ESTATE_SUMMON5::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SUMMON5::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SUMMON5::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SUMMON5(const class ESTATE_SUMMON5 &)
  public void ESTATE_SUMMON5::ESTATE_SUMMON5()
  public void ~ESTATE_SUMMON5()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SUPER_STAR {
  ESTATE, offset = 0x0

  public bool ESTATE_SUPER_STAR::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SUPER_STAR(const class ESTATE_SUPER_STAR &)
  public void ESTATE_SUPER_STAR::ESTATE_SUPER_STAR()
  public void ~ESTATE_SUPER_STAR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SWING {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_SWING::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_SWING::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SWING::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SWING::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SWING(const class ESTATE_SWING &)
  public void ESTATE_SWING::ESTATE_SWING()
  public void ~ESTATE_SWING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_SYMPHONY_LOVE {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_SYMPHONY_LOVE::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_SYMPHONY_LOVE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_SYMPHONY_LOVE::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_SYMPHONY_LOVE::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_SYMPHONY_LOVE(const class ESTATE_SYMPHONY_LOVE &)
  public void ESTATE_SYMPHONY_LOVE::ESTATE_SYMPHONY_LOVE()
  public void ~ESTATE_SYMPHONY_LOVE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_S_LIFEPOTION {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_S_LIFEPOTION(const class ESTATE_S_LIFEPOTION &)
  public void ESTATE_S_LIFEPOTION::ESTATE_S_LIFEPOTION()
  public void ~ESTATE_S_LIFEPOTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TARGET_ASPD {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_TARGET_ASPD(const class ESTATE_TARGET_ASPD &)
  public void ESTATE_TARGET_ASPD::ESTATE_TARGET_ASPD()
  public void ~ESTATE_TARGET_ASPD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TARGET_BLOOD {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_TARGET_BLOOD(const class ESTATE_TARGET_BLOOD &)
  public void ESTATE_TARGET_BLOOD::ESTATE_TARGET_BLOOD()
  public void ~ESTATE_TARGET_BLOOD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TAROTCARD {
  ESTATE, offset = 0x0

  public void ESTATE_TAROTCARD(const class ESTATE_TAROTCARD &)
  public void ESTATE_TAROTCARD::ESTATE_TAROTCARD()
  public void ~ESTATE_TAROTCARD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TENSIONRELAX {
  ESTATE, offset = 0x0

  public void ESTATE_TENSIONRELAX(const class ESTATE_TENSIONRELAX &)
  public void ESTATE_TENSIONRELAX::ESTATE_TENSIONRELAX()
  public void ~ESTATE_TENSIONRELAX()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TETANY {
  ESTATE, offset = 0x0

  public bool ESTATE_TETANY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_TETANY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_TETANY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_TETANY(const class ESTATE_TETANY &)
  public void ESTATE_TETANY::ESTATE_TETANY()
  public void ~ESTATE_TETANY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_THORNS_TRAP {
  ESTATE, offset = 0x0

  public bool ESTATE_THORNS_TRAP::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_THORNS_TRAP::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_THORNS_TRAP::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_THORNS_TRAP(const class ESTATE_THORNS_TRAP &)
  public void ESTATE_THORNS_TRAP::ESTATE_THORNS_TRAP()
  public void ~ESTATE_THORNS_TRAP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TIDAL_WEAPON {
  ESTATE, offset = 0x0

  public bool ESTATE_TIDAL_WEAPON::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_TIDAL_WEAPON::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_TIDAL_WEAPON::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_TIDAL_WEAPON(const class ESTATE_TIDAL_WEAPON &)
  public void ESTATE_TIDAL_WEAPON::ESTATE_TIDAL_WEAPON()
  public void ~ESTATE_TIDAL_WEAPON()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TIDAL_WEAPON_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_TIDAL_WEAPON_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_TIDAL_WEAPON_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_TIDAL_WEAPON_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_TIDAL_WEAPON_OPTION(const class ESTATE_TIDAL_WEAPON_OPTION &)
  public void ESTATE_TIDAL_WEAPON_OPTION::ESTATE_TIDAL_WEAPON_OPTION()
  public void ~ESTATE_TIDAL_WEAPON_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TINDER_BREAKER {
  ESTATE, offset = 0x0

  public bool ESTATE_TINDER_BREAKER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_TINDER_BREAKER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_TINDER_BREAKER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_TINDER_BREAKER(const class ESTATE_TINDER_BREAKER &)
  public void ESTATE_TINDER_BREAKER::ESTATE_TINDER_BREAKER()
  public void ~ESTATE_TINDER_BREAKER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TINDER_BREAKER_POSTDELAY {
  ESTATE, offset = 0x0

  public void ESTATE_TINDER_BREAKER_POSTDELAY(const class ESTATE_TINDER_BREAKER_POSTDELAY &)
  public void ESTATE_TINDER_BREAKER_POSTDELAY::ESTATE_TINDER_BREAKER_POSTDELAY()
  public void ~ESTATE_TINDER_BREAKER_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TK_SEVENWIND {
  ESTATE, offset = 0x0

  public void ESTATE_TK_SEVENWIND(const class ESTATE_TK_SEVENWIND &)
  public void ESTATE_TK_SEVENWIND::ESTATE_TK_SEVENWIND()
  public void ~ESTATE_TK_SEVENWIND()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TOXIN {
  ESTATE_GC_POISON, offset = 0x0

  public int ESTATE_TOXIN::GetApplyWeaponMSGID()
  public bool ESTATE_TOXIN::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_TOXIN::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_TOXIN::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_TOXIN(const class ESTATE_TOXIN &)
  public void ESTATE_TOXIN::ESTATE_TOXIN()
  public void ESTATE_TOXIN::~ESTATE_TOXIN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TRICKDEAD {
  ESTATE, offset = 0x0

  public void ESTATE_TRICKDEAD(const class ESTATE_TRICKDEAD &)
  public void ESTATE_TRICKDEAD::ESTATE_TRICKDEAD()
  public void ~ESTATE_TRICKDEAD()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TROPIC {
  ESTATE, offset = 0x0

  public bool ESTATE_TROPIC::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_TROPIC::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_TROPIC::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_TROPIC(const class ESTATE_TROPIC &)
  public void ESTATE_TROPIC::ESTATE_TROPIC()
  public void ~ESTATE_TROPIC()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TROPIC_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_TROPIC_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_TROPIC_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_TROPIC_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_TROPIC_OPTION(const class ESTATE_TROPIC_OPTION &)
  public void ESTATE_TROPIC_OPTION::ESTATE_TROPIC_OPTION()
  public void ~ESTATE_TROPIC_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TRUESIGHT {
  ESTATE, offset = 0x0

  public void ESTATE_TRUESIGHT(const class ESTATE_TRUESIGHT &)
  public void ESTATE_TRUESIGHT::ESTATE_TRUESIGHT()
  public void ~ESTATE_TRUESIGHT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_TWOHANDQUICKEN {
  ESTATE, offset = 0x0

  public void ESTATE_TWOHANDQUICKEN(const class ESTATE_TWOHANDQUICKEN &)
  public void ESTATE_TWOHANDQUICKEN::ESTATE_TWOHANDQUICKEN()
  public void ~ESTATE_TWOHANDQUICKEN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_UNLIMITED_HUMMING_VOICE {
  ESTATE, offset = 0x0

  public enum RESET_EFST_TYPE ESTATE_UNLIMITED_HUMMING_VOICE::IsWANDERERandMINSTRELoverlapDeny()
  public bool ESTATE_UNLIMITED_HUMMING_VOICE::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_UNLIMITED_HUMMING_VOICE(const class ESTATE_UNLIMITED_HUMMING_VOICE &)
  public void ESTATE_UNLIMITED_HUMMING_VOICE::ESTATE_UNLIMITED_HUMMING_VOICE()
  public void ~ESTATE_UNLIMITED_HUMMING_VOICE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_UNLUCKY {
  ESTATE, offset = 0x0

    public bool ESTATE_UNLUCKY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_UNLUCKY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_UNLUCKY::ResetComplete(class CActor *, const int, const int, const int)
  public static bool ESTATE_UNLUCKY::UseSkill(class CPC *)
  public void ESTATE_UNLUCKY(const class ESTATE_UNLUCKY &)
  public void ESTATE_UNLUCKY::ESTATE_UNLUCKY()
  public void ~ESTATE_UNLUCKY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

union ESTATE_UNLUCKY::VALUE2 {
    /* this+0x0 */ struct ESTATE_UNLUCKY::VALUE2::tagMember m_member

  /* this+0x0 */ int m_amount
  public int operator int()
  public void VALUE2(const int)
  public void VALUE2(const int, const int, const int)
}

struct ESTATE_UNLUCKY::VALUE2::tagMember {
  /* this(bf)+0x0:0x0 len(0x8) */ int DecCriPercent
  /* this(bf)+0x0:0x8 len(0x8) */ int PlusAvoidDecPercent
  /* this(bf)+0x0:0x10 len(0x10) */ int DecZeny
}

class ESTATE_UPHEAVAL {
  ESTATE, offset = 0x0

  public bool ESTATE_UPHEAVAL::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_UPHEAVAL::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_UPHEAVAL::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_UPHEAVAL(const class ESTATE_UPHEAVAL &)
  public void ESTATE_UPHEAVAL::ESTATE_UPHEAVAL()
  public void ~ESTATE_UPHEAVAL()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_UPHEAVAL_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_UPHEAVAL_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_UPHEAVAL_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_UPHEAVAL_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_UPHEAVAL_OPTION(const class ESTATE_UPHEAVAL_OPTION &)
  public void ESTATE_UPHEAVAL_OPTION::ESTATE_UPHEAVAL_OPTION()
  public void ~ESTATE_UPHEAVAL_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_VACUUM_EXTREME {
  ESTATE, offset = 0x0

  public void ESTATE_VACUUM_EXTREME::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_VACUUM_EXTREME::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_VACUUM_EXTREME(const class ESTATE_VACUUM_EXTREME &)
  public void ESTATE_VACUUM_EXTREME::ESTATE_VACUUM_EXTREME()
  public void ~ESTATE_VACUUM_EXTREME()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_VENOMBLEED {
  ESTATE_GC_POISON, offset = 0x0

  public int ESTATE_VENOMBLEED::GetApplyWeaponMSGID()
  public bool ESTATE_VENOMBLEED::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_VENOMBLEED::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_VENOMBLEED::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_VENOMBLEED(const class ESTATE_VENOMBLEED &)
  public void ESTATE_VENOMBLEED::ESTATE_VENOMBLEED()
  public void ESTATE_VENOMBLEED::~ESTATE_VENOMBLEED()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_VENOMIMPRESS {
  ESTATE, offset = 0x0

  public bool ESTATE_VENOMIMPRESS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_VENOMIMPRESS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_VENOMIMPRESS::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_VENOMIMPRESS(const class ESTATE_VENOMIMPRESS &)
  public void ESTATE_VENOMIMPRESS::ESTATE_VENOMIMPRESS()
  public void ~ESTATE_VENOMIMPRESS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_VITALITYACTIVATION {
  ESTATE, offset = 0x0

  public void ESTATE_VITALITYACTIVATION(const class ESTATE_VITALITYACTIVATION &)
  public void ESTATE_VITALITYACTIVATION::ESTATE_VITALITYACTIVATION()
  public void ~ESTATE_VITALITYACTIVATION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_VITALIZE_POTION {
  ESTATE_SCRIPT, offset = 0x0

  public void ESTATE_VITALIZE_POTION(const class ESTATE_VITALIZE_POTION &)
  public void ESTATE_VITALIZE_POTION::ESTATE_VITALIZE_POTION()
  public void ~ESTATE_VITALIZE_POTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_VITATA_500 {
  ESTATE, offset = 0x0

  public bool ESTATE_VITATA_500::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_VITATA_500::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_VITATA_500::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_VITATA_500(const class ESTATE_VITATA_500 &)
  public void ESTATE_VITATA_500::ESTATE_VITATA_500()
  public void ~ESTATE_VITATA_500()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_VOLCANIC_ASH {
  ESTATE, offset = 0x0

  public bool ESTATE_VOLCANIC_ASH::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_VOLCANIC_ASH::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_VOLCANIC_ASH::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_VOLCANIC_ASH(const class ESTATE_VOLCANIC_ASH &)
  public void ESTATE_VOLCANIC_ASH::ESTATE_VOLCANIC_ASH()
  public void ~ESTATE_VOLCANIC_ASH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WALLSHIFT {
  ESTATE, offset = 0x0

  public void ESTATE_WALLSHIFT(const class ESTATE_WALLSHIFT &)
  public void ESTATE_WALLSHIFT::ESTATE_WALLSHIFT()
  public void ~ESTATE_WALLSHIFT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WARMER {
  ESTATE, offset = 0x0

  public void ESTATE_WARMER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WARMER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WARMER(const class ESTATE_WARMER &)
  public void ESTATE_WARMER::ESTATE_WARMER()
  public void ~ESTATE_WARMER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WATER_BARRIER {
  ESTATE, offset = 0x0

  public bool ESTATE_WATER_BARRIER::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WATER_BARRIER::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WATER_BARRIER::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WATER_BARRIER(const class ESTATE_WATER_BARRIER &)
  public void ESTATE_WATER_BARRIER::ESTATE_WATER_BARRIER()
  public void ~ESTATE_WATER_BARRIER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WATER_DROP {
  ESTATE, offset = 0x0

  public bool ESTATE_WATER_DROP::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WATER_DROP::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WATER_DROP::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WATER_DROP(const class ESTATE_WATER_DROP &)
  public void ESTATE_WATER_DROP::ESTATE_WATER_DROP()
  public void ~ESTATE_WATER_DROP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WATER_DROP_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_WATER_DROP_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WATER_DROP_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WATER_DROP_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WATER_DROP_OPTION(const class ESTATE_WATER_DROP_OPTION &)
  public void ESTATE_WATER_DROP_OPTION::ESTATE_WATER_DROP_OPTION()
  public void ~ESTATE_WATER_DROP_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WATER_INSIGNIA {
  ESTATE, offset = 0x0

  public bool ESTATE_WATER_INSIGNIA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WATER_INSIGNIA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WATER_INSIGNIA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WATER_INSIGNIA(const class ESTATE_WATER_INSIGNIA &)
  public void ESTATE_WATER_INSIGNIA::ESTATE_WATER_INSIGNIA()
  public void ~ESTATE_WATER_INSIGNIA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WATER_SCREEN {
  ESTATE, offset = 0x0

  public bool ESTATE_WATER_SCREEN::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WATER_SCREEN::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WATER_SCREEN::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WATER_SCREEN(const class ESTATE_WATER_SCREEN &)
  public void ESTATE_WATER_SCREEN::ESTATE_WATER_SCREEN()
  public void ~ESTATE_WATER_SCREEN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WATER_SCREEN_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_WATER_SCREEN_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WATER_SCREEN_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WATER_SCREEN_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WATER_SCREEN_OPTION(const class ESTATE_WATER_SCREEN_OPTION &)
  public void ESTATE_WATER_SCREEN_OPTION::ESTATE_WATER_SCREEN_OPTION()
  public void ~ESTATE_WATER_SCREEN_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WEAKNESS {
  ESTATE, offset = 0x0

  public bool ESTATE_WEAKNESS::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WEAKNESS::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WEAKNESS::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WEAKNESS(const class ESTATE_WEAKNESS &)
  public void ESTATE_WEAKNESS::ESTATE_WEAKNESS()
  public void ~ESTATE_WEAKNESS()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WEAPONBLOCKING {
  ESTATE, offset = 0x0

  public bool ESTATE_WEAPONBLOCKING::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WEAPONBLOCKING::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WEAPONBLOCKING::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WEAPONBLOCKING(const class ESTATE_WEAPONBLOCKING &)
  public void ESTATE_WEAPONBLOCKING::ESTATE_WEAPONBLOCKING()
  public void ~ESTATE_WEAPONBLOCKING()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WEAPONBLOCKING_POSTDELAY {
  ESTATE, offset = 0x0

  public bool ESTATE_WEAPONBLOCKING_POSTDELAY::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WEAPONBLOCKING_POSTDELAY::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WEAPONBLOCKING_POSTDELAY::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WEAPONBLOCKING_POSTDELAY(const class ESTATE_WEAPONBLOCKING_POSTDELAY &)
  public void ESTATE_WEAPONBLOCKING_POSTDELAY::ESTATE_WEAPONBLOCKING_POSTDELAY()
  public void ~ESTATE_WEAPONBLOCKING_POSTDELAY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WEAPONPERFECT {
  ESTATE, offset = 0x0

  public void ESTATE_WEAPONPERFECT(const class ESTATE_WEAPONPERFECT &)
  public void ESTATE_WEAPONPERFECT::ESTATE_WEAPONPERFECT()
  public void ~ESTATE_WEAPONPERFECT()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WEAPONPROPERTY {
  ESTATE, offset = 0x0

  public void ESTATE_WEAPONPROPERTY(const class ESTATE_WEAPONPROPERTY &)
  public void ESTATE_WEAPONPROPERTY::ESTATE_WEAPONPROPERTY()
  public void ~ESTATE_WEAPONPROPERTY()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WILD_STORM {
  ESTATE, offset = 0x0

  public bool ESTATE_WILD_STORM::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WILD_STORM::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WILD_STORM::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WILD_STORM(const class ESTATE_WILD_STORM &)
  public void ESTATE_WILD_STORM::ESTATE_WILD_STORM()
  public void ~ESTATE_WILD_STORM()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WILD_STORM_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_WILD_STORM_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WILD_STORM_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WILD_STORM_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WILD_STORM_OPTION(const class ESTATE_WILD_STORM_OPTION &)
  public void ESTATE_WILD_STORM_OPTION::ESTATE_WILD_STORM_OPTION()
  public void ~ESTATE_WILD_STORM_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WINDWALK {
  ESTATE, offset = 0x0

  public void ESTATE_WINDWALK(const class ESTATE_WINDWALK &)
  public void ESTATE_WINDWALK::ESTATE_WINDWALK()
  public void ~ESTATE_WINDWALK()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WIND_CURTAIN {
  ESTATE, offset = 0x0

  public bool ESTATE_WIND_CURTAIN::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WIND_CURTAIN::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WIND_CURTAIN::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WIND_CURTAIN(const class ESTATE_WIND_CURTAIN &)
  public void ESTATE_WIND_CURTAIN::ESTATE_WIND_CURTAIN()
  public void ~ESTATE_WIND_CURTAIN()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WIND_CURTAIN_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_WIND_CURTAIN_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WIND_CURTAIN_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WIND_CURTAIN_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WIND_CURTAIN_OPTION(const class ESTATE_WIND_CURTAIN_OPTION &)
  public void ESTATE_WIND_CURTAIN_OPTION::ESTATE_WIND_CURTAIN_OPTION()
  public void ~ESTATE_WIND_CURTAIN_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WIND_INSIGNIA {
  ESTATE, offset = 0x0

  public bool ESTATE_WIND_INSIGNIA::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WIND_INSIGNIA::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WIND_INSIGNIA::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WIND_INSIGNIA(const class ESTATE_WIND_INSIGNIA &)
  public void ESTATE_WIND_INSIGNIA::ESTATE_WIND_INSIGNIA()
  public void ~ESTATE_WIND_INSIGNIA()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WIND_STEP {
  ESTATE, offset = 0x0

  public bool ESTATE_WIND_STEP::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WIND_STEP::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WIND_STEP::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WIND_STEP(const class ESTATE_WIND_STEP &)
  public void ESTATE_WIND_STEP::ESTATE_WIND_STEP()
  public void ~ESTATE_WIND_STEP()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WIND_STEP_OPTION {
  ESTATE, offset = 0x0

  public bool ESTATE_WIND_STEP_OPTION::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_WIND_STEP_OPTION::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_WIND_STEP_OPTION::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_WIND_STEP_OPTION(const class ESTATE_WIND_STEP_OPTION &)
  public void ESTATE_WIND_STEP_OPTION::ESTATE_WIND_STEP_OPTION()
  public void ~ESTATE_WIND_STEP_OPTION()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WUGBITE {
  ESTATE, offset = 0x0

  public void ESTATE_WUGBITE(const class ESTATE_WUGBITE &)
  public void ESTATE_WUGBITE::ESTATE_WUGBITE()
  public void ~ESTATE_WUGBITE()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WUGDASH {
  ESTATE, offset = 0x0

    public void ESTATE_WUGDASH(const class ESTATE_WUGDASH &)
  public void ESTATE_WUGDASH::ESTATE_WUGDASH()
  public void ~ESTATE_WUGDASH()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WUGRIDER {
  ESTATE, offset = 0x0

  public void ESTATE_WUGRIDER(const class ESTATE_WUGRIDER &)
  public void ESTATE_WUGRIDER::ESTATE_WUGRIDER()
  public void ~ESTATE_WUGRIDER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_WZ_SIGHTBLASTER {
  ESTATE, offset = 0x0

  public void ESTATE_WZ_SIGHTBLASTER(const class ESTATE_WZ_SIGHTBLASTER &)
  public void ESTATE_WZ_SIGHTBLASTER::ESTATE_WZ_SIGHTBLASTER()
  public void ~ESTATE_WZ_SIGHTBLASTER()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ZANGETSU {
  ESTATE, offset = 0x0

  public bool ESTATE_ZANGETSU::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ZANGETSU::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ZANGETSU::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ZANGETSU(const class ESTATE_ZANGETSU &)
  public void ESTATE_ZANGETSU::ESTATE_ZANGETSU()
  public void ~ESTATE_ZANGETSU()
  /* this+0x30 */ int m_AddAtk
  /* this+0x34 */ int m_AddMAtk
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ZENKAI {
  ESTATE, offset = 0x0

  public bool ESTATE_ZENKAI::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ZENKAI::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ZENKAI::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ZENKAI(const class ESTATE_ZENKAI &)
  public void ESTATE_ZENKAI::ESTATE_ZENKAI()
  public void ~ESTATE_ZENKAI()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class ESTATE_ZEPHYR {
  ESTATE, offset = 0x0

  public bool ESTATE_ZEPHYR::SetCheckup(class CActor *, int &, int &, int &, int &)
  public void ESTATE_ZEPHYR::SetComplete(class CActor *, const int, const int, const int, const int)
  public void ESTATE_ZEPHYR::ResetComplete(class CActor *, const int, const int, const int)
  public void ESTATE_ZEPHYR(const class ESTATE_ZEPHYR &)
  public void ESTATE_ZEPHYR::ESTATE_ZEPHYR()
  public void ~ESTATE_ZEPHYR()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class EStateTypeInfoMgr {
    *
  /* [0x0003:0x0004b2c0] */ static  class EStateTypeInfoMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
    /* this+0x8 */ class std::map<int,ESTATE *,std::less<int>,std::allocator<std::pair<int const ,ESTATE *> > > m_ESateTypeInfoList

    /* this+0x18 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,ESTATE *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,ESTATE *> > > m_EStateTypeInfoNameList

  /* this+0x28 */ class CBinBuf m_binBuf

  private bool EStateTypeInfoMgr::Create()
  private bool EStateTypeInfoMgr::LoadConfigFile()
  private void EStateTypeInfoMgr::Destroy()
  public bool isOK()
  public bool EStateTypeInfoMgr::InitScript()
  public bool EStateTypeInfoMgr::IsSave(const unsigned long, const int, const struct EFFECTIVE_INFO &)
  public bool EStateTypeInfoMgr::IsSaveInfinitTimeEfst(const int)
  public void EStateTypeInfoMgr::SetComplete(const int, class CActor *, const int, const int, const int, const int)
  public bool EStateTypeInfoMgr::SetCheckup(const int, class CActor *, int &, int &, int &, int &)
  public bool EStateTypeInfoMgr::ResetCheckup(const int, class CActor *, const int, struct EFFECTIVE_INFO *)
  public void EStateTypeInfoMgr::ResetComplete(const int, class CActor *, const int, const int, const int)
  public void EStateTypeInfoMgr::Process(const int, class CActor *, struct EFFECTIVE_INFO *)
  public class ESTATE * EStateTypeInfoMgr::GetPtr(const char *)
  public class ESTATE * EStateTypeInfoMgr::GetPtr(const int)
  public bool EStateTypeInfoMgr::RunScript(const unsigned long, const int, const int)
  public int EStateTypeInfoMgr::GetEStateID(const char *)
  public static bool EStateTypeInfoMgr::CreateInstance()
  public static void EStateTypeInfoMgr::DestoryInstance()
  public void EStateTypeInfoMgr(const class EStateTypeInfoMgr &)
  private void EStateTypeInfoMgr::EStateTypeInfoMgr()
  private void EStateTypeInfoMgr::~EStateTypeInfoMgr()
  public class EStateTypeInfoMgr & operator=(const class EStateTypeInfoMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct EXCHANGEITEM_INFO {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ int isPermited
  /* this+0x8 */ int isConcluded
}

struct EXTInfo {
  /* this+0x0 */ short DEF
}

struct Effect3rd::tagEffect3rdDBFmt {
  /* this+0x0 */ int ID
  /* this+0x4 */ int TimeMS
  /* this+0x8 */ int Data1
  /* this+0xc */ int Data2
  /* this+0x10 */ int Data3
  public void tagEffect3rdDBFmt()
  public void tagEffect3rdDBFmt(int, int, int, int, int)
}

class ElementalStuff::ESummaryData {
  /* this+0x0 */ int m_hp
  /* this+0x4 */ int m_maxhp
  /* this+0x8 */ int m_sp
  /* this+0xc */ int m_maxsp
  /* this+0x10 */ int m_atk
  /* this+0x14 */ int m_attackMT
  /* this+0x18 */ int m_def
  /* this+0x1c */ int m_mdef
  /* this+0x20 */ int m_flee
  /* this+0x24 */ int m_hit
  /* this+0x28 */ int m_matk
}

struct ExceptionRecordStruct {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ unsigned long ExceptionRecord_
  /* this+0xc */ unsigned long ExceptionAddress
  /* this+0x10 */ unsigned long NumberParameters
  /* this+0x14 */ unsigned long ExceptionInfo
}

struct FAMILY_INFO {
  /* this+0x0 */ int familyIndex
  /* this+0x4 */ int bMarried
  /* this+0x8 */ short expOption
  /* this+0xc */ unsigned long father
  /* this+0x10 */ char[0x18] fatherName
  /* this+0x28 */ unsigned long mother
  /* this+0x2c */ char[0x18] motherName
  /* this+0x44 */ unsigned long baby
  /* this+0x48 */ char[0x18] babyName
}

struct FILE_ID_DESCRIPTOR {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ enum _FILE_ID_TYPE Type
  /* this+0x8 */ union _LARGE_INTEGER FileId

  /* this+0x8 */ struct _GUID ObjectId

}

struct FLAG_INFO {
  /* this+0x0 */ int GDID
  /* this+0x4 */ char[0x18] agitName
  /* this+0x1c */ class std::vector<CNPC *,std::allocator<CNPC *> > vt

  public void FLAG_INFO(const struct FLAG_INFO &)
  public void FLAG_INFO()
  public void ~FLAG_INFO()
  public struct FLAG_INFO & operator=(const struct FLAG_INFO &)
  public void * __vecDelDtor(unsigned int)
}

struct FLASHWINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct HWND__ * hwnd
  /* this+0x8 */ unsigned long dwFlags
  /* this+0xc */ unsigned int uCount
  /* this+0x10 */ unsigned long dwTimeout
}

union FT {
  /* this+0x0 */ unsigned __int64 ft_scalar
  /* this+0x0 */ struct _FILETIME ft_struct

}

class FactorVAR::BOOLvar {
  FactorVAR::Fvar, offset = 0x0

  public bool operator()()
  public void FactorVAR::BOOLvar::Set(const int)
  public void FactorVAR::BOOLvar::Reset(const int)
  public void FactorVAR::BOOLvar::Init()
  public void BOOLvar(const class FactorVAR::BOOLvar &)
  public void FactorVAR::BOOLvar::BOOLvar()
  public void FactorVAR::BOOLvar::~BOOLvar()
  public const class FactorVAR::BOOLvar & operator=(const class FactorVAR::BOOLvar &)
  /* this+0x4 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_Tbl

  /* this+0x14 */ int m_RefCnt
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::Fvar {
    *
  public void Init()
  public void Fvar(const class FactorVAR::Fvar &)
  public void Fvar()
  public void FactorVAR::Fvar::~Fvar()
  public class FactorVAR::Fvar & operator=(const class FactorVAR::Fvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::HISTORYvar {
  FactorVAR::Fvar, offset = 0x0

  public struct std::pair<bool,int> FactorVAR::HISTORYvar::operator()()
  public void FactorVAR::HISTORYvar::Set(const int, const int)
  public void FactorVAR::HISTORYvar::Reset(const int)
  public void FactorVAR::HISTORYvar::Init()
  public void HISTORYvar(const class FactorVAR::HISTORYvar &)
  public void HISTORYvar()
  public void FactorVAR::HISTORYvar::~HISTORYvar()
    /* this+0x4 */ class std::vector<FactorVAR::HISTORYvar::tagHistory,std::allocator<FactorVAR::HISTORYvar::tagHistory> > m_History

  /* this+0x14 */ int m_Value
  public class FactorVAR::HISTORYvar & operator=(const class FactorVAR::HISTORYvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct FactorVAR::HISTORYvar::tagHistory {
  /* this+0x0 */ int HistoryFactor
  /* this+0x4 */ int Value
  public void tagHistory(const int, const int)
  public bool operator==(const struct FactorVAR::HISTORYvar::tagHistory &)
}

class FactorVAR::INDHISTORYvar {
  FactorVAR::Fvar, offset = 0x0

  public void FactorVAR::INDHISTORYvar::Init()
  public void FactorVAR::INDHISTORYvar::Set(const int, const int, const int)
  public void FactorVAR::INDHISTORYvar::Reset(const int, const int)
  public struct std::pair<bool,int> FactorVAR::INDHISTORYvar::operator()(const int)
  public void INDHISTORYvar(const class FactorVAR::INDHISTORYvar &)
  public void INDHISTORYvar()
  public void FactorVAR::INDHISTORYvar::~INDHISTORYvar()
    /* this+0x4 */ class std::map<int,std::vector<FactorVAR::INDHISTORYvar::tagData,std::allocator<FactorVAR::INDHISTORYvar::tagData> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<FactorVAR::INDHISTORYvar::tagData,std::allocator<FactorVAR::INDHISTORYvar::tagData> > > > > m_Tbl

  public class FactorVAR::INDHISTORYvar & operator=(const class FactorVAR::INDHISTORYvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct FactorVAR::INDHISTORYvar::tagData {
  /* this+0x0 */ int history
  /* this+0x4 */ int value
  public void tagData(const int)
  public void tagData(const int, const int)
  public bool operator==(const struct FactorVAR::INDHISTORYvar::tagData &)
}

class FactorVAR::INDMAXHISTORYvar {
  FactorVAR::Fvar, offset = 0x0

  public void FactorVAR::INDMAXHISTORYvar::Init()
  public void FactorVAR::INDMAXHISTORYvar::Set(const int, const int, const int)
  public void FactorVAR::INDMAXHISTORYvar::Reset(const int, const int)
  public int FactorVAR::INDMAXHISTORYvar::operator()(const int)
  public void INDMAXHISTORYvar(const class FactorVAR::INDMAXHISTORYvar &)
  public void INDMAXHISTORYvar()
  public void FactorVAR::INDMAXHISTORYvar::~INDMAXHISTORYvar()
    /* this+0x4 */ class std::map<int,FactorVAR::INDMAXHISTORYvar::tagData,std::less<int>,std::allocator<std::pair<int const ,FactorVAR::INDMAXHISTORYvar::tagData> > > m_Tbl

  public class FactorVAR::INDMAXHISTORYvar & operator=(const class FactorVAR::INDMAXHISTORYvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct FactorVAR::INDMAXHISTORYvar::tagData {
    /* this+0x0 */ int Max
  /* this+0x4 */ class std::vector<FactorVAR::INDMAXHISTORYvar::tagData::tagHistory,std::allocator<FactorVAR::INDMAXHISTORYvar::tagData::tagHistory> > History

  public void tagData(const struct FactorVAR::INDMAXHISTORYvar::tagData &)
  public void tagData()
  public void FactorVAR::INDMAXHISTORYvar::tagData::~tagData()
  public struct FactorVAR::INDMAXHISTORYvar::tagData & operator=(const struct FactorVAR::INDMAXHISTORYvar::tagData &)
  public void * __vecDelDtor(unsigned int)
}

struct FactorVAR::INDMAXHISTORYvar::tagData::tagHistory {
  /* this+0x0 */ int HistoryFactor
  /* this+0x4 */ int Value
  public bool operator==(const struct FactorVAR::INDMAXHISTORYvar::tagData::tagHistory &)
  public void tagHistory(const int, const int)
}

class FactorVAR::INDMINHISTORYvar {
  FactorVAR::Fvar, offset = 0x0

  public void FactorVAR::INDMINHISTORYvar::Init()
  public void FactorVAR::INDMINHISTORYvar::Set(const int, const int, const int)
  public void FactorVAR::INDMINHISTORYvar::Reset(const int, const int)
  public int FactorVAR::INDMINHISTORYvar::operator()(const int)
  public void INDMINHISTORYvar(const class FactorVAR::INDMINHISTORYvar &)
  public void INDMINHISTORYvar()
  public void FactorVAR::INDMINHISTORYvar::~INDMINHISTORYvar()
    /* this+0x4 */ class std::map<int,FactorVAR::INDMINHISTORYvar::lcData,std::less<int>,std::allocator<std::pair<int const ,FactorVAR::INDMINHISTORYvar::lcData> > > m_Tbl

  public class FactorVAR::INDMINHISTORYvar & operator=(const class FactorVAR::INDMINHISTORYvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::INDMINHISTORYvar::lcData {
    *
    /* this+0x4 */ int m_Min
  /* this+0x8 */ class std::vector<FactorVAR::INDMINHISTORYvar::lcData::lcHistory,std::allocator<FactorVAR::INDMINHISTORYvar::lcData::lcHistory> > m_History

  public void lcData(const class FactorVAR::INDMINHISTORYvar::lcData &)
  public void lcData()
  public void FactorVAR::INDMINHISTORYvar::lcData::~lcData()
  public class FactorVAR::INDMINHISTORYvar::lcData & operator=(const class FactorVAR::INDMINHISTORYvar::lcData &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::INDMINHISTORYvar::lcData::lcHistory {
    *
  /* this+0x4 */ int m_Factor
  /* this+0x8 */ int m_Value
  public bool operator==(const class FactorVAR::INDMINHISTORYvar::lcData::lcHistory &)
  public void lcHistory(const class FactorVAR::INDMINHISTORYvar::lcData::lcHistory &)
  public void lcHistory(const int, const int)
  public void FactorVAR::INDMINHISTORYvar::lcData::lcHistory::~lcHistory()
  public class FactorVAR::INDMINHISTORYvar::lcData::lcHistory & operator=(const class FactorVAR::INDMINHISTORYvar::lcData::lcHistory &)
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::INDSUMHISTORYvar {
  FactorVAR::Fvar, offset = 0x0

  public void FactorVAR::INDSUMHISTORYvar::Init()
  public void FactorVAR::INDSUMHISTORYvar::Set(const int, const int, const int)
  public void FactorVAR::INDSUMHISTORYvar::Reset(const int, const int)
  public int FactorVAR::INDSUMHISTORYvar::operator()(const int)
  public void INDSUMHISTORYvar(const class FactorVAR::INDSUMHISTORYvar &)
  public void INDSUMHISTORYvar()
  public void FactorVAR::INDSUMHISTORYvar::~INDSUMHISTORYvar()
  /* this+0x4 */ class std::map<int,FactorVAR::SUMHISTORYvar,std::less<int>,std::allocator<std::pair<int const ,FactorVAR::SUMHISTORYvar> > > m_Tbl

  public class FactorVAR::INDSUMHISTORYvar & operator=(const class FactorVAR::INDSUMHISTORYvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::INDvar {
  FactorVAR::Fvar, offset = 0x0

  public int FactorVAR::INDvar::operator()(const int)
  public void FactorVAR::INDvar::Set(const int, const int)
  public void FactorVAR::INDvar::Init()
  public void INDvar(const class FactorVAR::INDvar &)
  public void INDvar()
  public void FactorVAR::INDvar::~INDvar()
  /* this+0x4 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_Tbl

  public class FactorVAR::INDvar & operator=(const class FactorVAR::INDvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::MAXvar {
  FactorVAR::Fvar, offset = 0x0

  public int operator()()
  public void FactorVAR::MAXvar::Set(const int, const int)
  public void FactorVAR::MAXvar::Reset(const int)
  public void FactorVAR::MAXvar::Init()
  public void MAXvar(const class FactorVAR::MAXvar &)
  public void FactorVAR::MAXvar::MAXvar()
  public void FactorVAR::MAXvar::~MAXvar()
  public const class FactorVAR::MAXvar & operator=(const class FactorVAR::MAXvar &)
  /* this+0x4 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_Tbl

  /* this+0x14 */ int m_Max
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::MINvar {
  FactorVAR::Fvar, offset = 0x0

  public int operator()()
  public void Set(const int, const int)
  public void Reset(const int)
  public void Init()
  public void MINvar(const class FactorVAR::MINvar &)
  public void MINvar()
  public void ~MINvar()
  public const class FactorVAR::MINvar & operator=(const class FactorVAR::MINvar &)
  /* this+0x4 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_Tbl

  /* this+0x14 */ int m_Min
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::PassiveSKHPSPRecovery {
  FactorVAR::Fvar, offset = 0x0

  public void FactorVAR::PassiveSKHPSPRecovery::Init()
  public void FactorVAR::PassiveSKHPSPRecovery::Set(const int, const int, const int)
  public void FactorVAR::PassiveSKHPSPRecovery::Reset(const int)
  public struct std::pair<int,int> operator()()
  public int GetTime()
  public int GetValue()
  private void FactorVAR::PassiveSKHPSPRecovery::Evaluation()
  public void PassiveSKHPSPRecovery(const class FactorVAR::PassiveSKHPSPRecovery &)
  public void PassiveSKHPSPRecovery()
  public void FactorVAR::PassiveSKHPSPRecovery::~PassiveSKHPSPRecovery()
  /* this+0x4 */ int m_Time
  /* this+0x8 */ int m_Value
  /* this+0xc */ class std::vector<std::tr1::tuple<int,int,int,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil>,std::allocator<std::tr1::tuple<int,int,int,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> > > m_Tbl

  public class FactorVAR::PassiveSKHPSPRecovery & operator=(const class FactorVAR::PassiveSKHPSPRecovery &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class FactorVAR::SUMHISTORYvar {
  FactorVAR::Fvar, offset = 0x0

  public int operator()()
  public void FactorVAR::SUMHISTORYvar::Set(const int, const int)
  public void FactorVAR::SUMHISTORYvar::Reset(const int)
  public void FactorVAR::SUMHISTORYvar::Init()
  public void FactorVAR::SUMHISTORYvar::SUMHISTORYvar(const class FactorVAR::SUMHISTORYvar &)
  public void SUMHISTORYvar()
  public void FactorVAR::SUMHISTORYvar::~SUMHISTORYvar()
    /* this+0x4 */ class std::vector<FactorVAR::SUMHISTORYvar::tagHistory,std::allocator<FactorVAR::SUMHISTORYvar::tagHistory> > m_History

  /* this+0x14 */ int m_Value
  public class FactorVAR::SUMHISTORYvar & operator=(const class FactorVAR::SUMHISTORYvar &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct FactorVAR::SUMHISTORYvar::tagHistory {
  /* this+0x0 */ int HistoryFactor
  /* this+0x4 */ int Value
  public void tagHistory(const int, const int)
  public struct FactorVAR::SUMHISTORYvar::tagHistory operator+(const struct FactorVAR::SUMHISTORYvar::tagHistory &)
  public bool operator==(const struct FactorVAR::SUMHISTORYvar::tagHistory &)
}

class FactorVAR::SUMvar {
  FactorVAR::Fvar, offset = 0x0

  public int operator()()
  public void FactorVAR::SUMvar::Set(const int, const int)
  public void FactorVAR::SUMvar::Reset(const int)
  public void FactorVAR::SUMvar::Init()
  public void SUMvar(const class FactorVAR::SUMvar &)
  public void FactorVAR::SUMvar::SUMvar()
  public void FactorVAR::SUMvar::~SUMvar()
  public const class FactorVAR::SUMvar & operator=(const class FactorVAR::SUMvar &)
  /* this+0x4 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_Tbl

  /* this+0x14 */ int m_Sum
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct FillteringInfo {
  /* this+0x0 */ unsigned long GID
  /* this+0x4 */ char[0x18] CharName
}

struct FpFormatDescriptor {
  /* this+0x0 */ int max_exp
  /* this+0x4 */ int min_exp
  /* this+0x8 */ int precision
  /* this+0xc */ int exp_width
  /* this+0x10 */ int format_width
  /* this+0x14 */ int bias
}

struct FrameInfo {
  /* this+0x0 */ void * pExceptionObject
  /* this+0x4 */ struct FrameInfo * pNext
}

struct FuncState {
  /* this+0x0 */ struct Proto * f
  /* this+0x4 */ struct Table * h
  /* this+0x8 */ struct FuncState * prev
  /* this+0xc */ struct LexState * ls
  /* this+0x10 */ struct lua_State * L
  /* this+0x14 */ struct BlockCnt * bl
  /* this+0x18 */ int pc
  /* this+0x1c */ int lasttarget
  /* this+0x20 */ int jpc
  /* this+0x24 */ int freereg
  /* this+0x28 */ int nk
  /* this+0x2c */ int np
  /* this+0x30 */ short nlocvars
  /* this+0x32 */ unsigned char nactvar
  /* this+0x33 */ struct upvaldesc[0x3c] upvalues
  /* this+0xac */ unsigned short[0xc8] actvar
}

union GCObject {
  /* this+0x0 */ struct GCheader gch

  /* this+0x0 */ union TString ts

  /* this+0x0 */ union Udata u

  /* this+0x0 */ union Closure cl

  /* this+0x0 */ struct Table h

  /* this+0x0 */ struct Proto p

  /* this+0x0 */ struct UpVal uv

  /* this+0x0 */ struct lua_State th

}

struct GCheader {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
}

struct GROUPMEMBER_INFO {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ char[0x10] mapName
  /* this+0x2c */ unsigned char role
  /* this+0x2d */ unsigned char state
}

struct GUILDALLYINFO {
  /* this+0x0 */ int GDID
  /* this+0x4 */ int OpponentGDID
  /* this+0x8 */ char[0x18] GuildName
  /* this+0x20 */ int Relation
}

struct GUILDBANISHINFO {
  /* this+0x0 */ int GDID
  /* this+0x4 */ char[0x18] MemberName
  /* this+0x1c */ char[0x18] MemberAccount
  /* this+0x34 */ char[0x32] Reason
  /* this+0x66 */ int GID
  /* this+0x6a */ int AID
}

struct GUILDINFO {
  /* this+0x0 */ int GDID
  /* this+0x4 */ int Level
  /* this+0x8 */ char[0x18] Name
  /* this+0x20 */ char[0x18] MName
  /* this+0x38 */ int MaxUserNum
  /* this+0x3c */ int UserNum
  /* this+0x40 */ int Honor
  /* this+0x44 */ int Virtue
  /* this+0x48 */ int Type
  /* this+0x4c */ int Class
  /* this+0x50 */ int Money
  /* this+0x54 */ int ArenaWin
  /* this+0x58 */ int ArenaLose
  /* this+0x5c */ int ArenaDrawn
  /* this+0x60 */ char[0x18] ManageLand
  /* this+0x78 */ int Exp
  /* this+0x7c */ int EmblemVersion
  /* this+0x80 */ int Point
  /* this+0x84 */ char[0x50] Desc
}

struct GUILDINFO_LIST {
  /* this+0x0 */ char[0x18] GName
  /* this+0x18 */ char[0x18] MName
  /* this+0x30 */ int Level
  /* this+0x34 */ int Ranking
}

struct GUILDMINFO {
  /* this+0x0 */ int GID
  /* this+0x4 */ char[0x18] CharName
  /* this+0x1c */ char[0x18] AccountName
  /* this+0x34 */ int Level
  /* this+0x38 */ char[0x32] Memo
  /* this+0x6a */ int Service
  /* this+0x6e */ int MemberExp
  /* this+0x72 */ int GDID
  /* this+0x76 */ int AID
  /* this+0x7a */ int PositionID
  /* this+0x7e */ short head
  /* this+0x80 */ short headPalette
  /* this+0x82 */ short sex
  /* this+0x84 */ int job
  /* this+0x88 */ int status
}

struct GUILDMPOSITION {
  /* this+0x0 */ int GDID
  /* this+0x4 */ int Grade
  /* this+0x8 */ char[0x18] PosName
  /* this+0x20 */ int JoinRight
  /* this+0x24 */ int PenaltyRight
  /* this+0x28 */ int PositionID
  /* this+0x2c */ int Service
}

struct GUILDNOTICE {
  /* this+0x0 */ int GDID
  /* this+0x4 */ char[0x3c] Subject
  /* this+0x40 */ char[0x78] Notice
}

struct GUILD_BAN_INFO {
  /* this+0x0 */ char[0x18] charname
  /* this+0x18 */ char[0x18] account
  /* this+0x30 */ char[0x28] reason
}

struct GUILD_MEMBER_INFO {
  /* this+0x0 */ int AID
  /* this+0x4 */ int GID
  /* this+0x8 */ short head
  /* this+0xa */ short headPalette
  /* this+0xc */ short sex
  /* this+0xe */ short job
  /* this+0x10 */ short level
  /* this+0x12 */ int contributionExp
  /* this+0x16 */ int currentState
  /* this+0x1a */ int positionID
  /* this+0x1e */ char[0x32] intro
  /* this+0x50 */ char[0x18] charname
}

struct GUILD_MEMBER_INFO_SHORT {
  /* this+0x0 */ int AID
  /* this+0x4 */ int GID
}

struct GUILD_POSITION_INFO {
  /* this+0x0 */ int positionID
  /* this+0x4 */ int right
  /* this+0x8 */ int ranking
  /* this+0xc */ int payRate
}

struct GUILD_REG_POSITION_INFO {
  /* this+0x0 */ int positionID
  /* this+0x4 */ int right
  /* this+0x8 */ int ranking
  /* this+0xc */ int payRate
  /* this+0x10 */ char[0x18] posName
}

struct GUILD_SKILL_INFO {
  /* this+0x0 */ unsigned short SKID
}

struct HACCEL__ {
  /* this+0x0 */ int unused
}

struct HBITMAP__ {
  /* this+0x0 */ int unused
}

struct HBRUSH__ {
  /* this+0x0 */ int unused
}

struct HCOLORSPACE__ {
  /* this+0x0 */ int unused
}

struct HDC__ {
  /* this+0x0 */ int unused
}

struct HDESK__ {
  /* this+0x0 */ int unused
}

struct HDRVR__ {
  /* this+0x0 */ int unused
}

struct HEAL_REGULARLY_INFO {
  public void Set(unsigned long, short)
  /* this+0x0 */ unsigned long nextUpdateTime
  /* this+0x4 */ unsigned long term
  /* this+0x8 */ short amount
}

struct HENHMETAFILE__ {
  /* this+0x0 */ int unused
}

struct HFONT__ {
  /* this+0x0 */ int unused
}

struct HGESTUREINFO__ {
  /* this+0x0 */ int unused
}

struct HGLRC__ {
  /* this+0x0 */ int unused
}

struct HHOOK__ {
  /* this+0x0 */ int unused
}

struct HICON__ {
  /* this+0x0 */ int unused
}

struct HIMCC__ {
  /* this+0x0 */ int unused
}

struct HIMC__ {
  /* this+0x0 */ int unused
}

struct HINSTANCE__ {
  /* this+0x0 */ int unused
}

struct HK {
  /* this+0x0 */ unsigned char r
  /* this+0x1 */ unsigned char l
  /* this+0x4 */ int table
  /* this+0x8 */ unsigned char[0x100][0x4][0x2] sbox
}

struct HKEY__ {
  /* this+0x0 */ int unused
}

struct HKL__ {
  /* this+0x0 */ int unused
}

struct HLSURF__ {
  /* this+0x0 */ int unused
}

struct HMENU__ {
  /* this+0x0 */ int unused
}

struct HMETAFILE__ {
  /* this+0x0 */ int unused
}

struct HMIDIIN__ {
  /* this+0x0 */ int unused
}

struct HMIDIOUT__ {
  /* this+0x0 */ int unused
}

struct HMIDISTRM__ {
  /* this+0x0 */ int unused
}

struct HMIDI__ {
  /* this+0x0 */ int unused
}

struct HMIXEROBJ__ {
  /* this+0x0 */ int unused
}

struct HMIXER__ {
  /* this+0x0 */ int unused
}

struct HMMIO__ {
  /* this+0x0 */ int unused
}

struct HMONITOR__ {
  /* this+0x0 */ int unused
}

struct HOMUN_DBINFO {
  /* this+0x0 */ int exp
  /* this+0x4 */ int bodystate
  /* this+0x8 */ int healthstate
  /* this+0xc */ int effectstate
  /* this+0x10 */ int fullness
  /* this+0x14 */ int modified
  /* this+0x18 */ float relation
  /* this+0x1c */ short clevel
  /* this+0x1e */ short job
  /* this+0x20 */ short SKPoint
  /* this+0x22 */ short hp
  /* this+0x24 */ short maxhp
  /* this+0x26 */ short sp
  /* this+0x28 */ short maxsp
  /* this+0x2a */ short accessory
  /* this+0x2c */ short property
  /* this+0x2e */ char[0x18] name
  /* this+0x46 */ unsigned char Str
  /* this+0x47 */ unsigned char Agi
  /* this+0x48 */ unsigned char Vit
  /* this+0x49 */ unsigned char Int
  /* this+0x4a */ unsigned char Dex
  /* this+0x4b */ unsigned char Luk
}

struct HO_SKINFO {
  public void HO_SKINFO()
  /* this+0x0 */ int level
  /* this+0x4 */ int type
  /* this+0x8 */ int count
  /* this+0xc */ unsigned long BlockUseTM
  /* this+0x10 */ bool bDBupdateWhenLogout
}

struct HPALETTE__ {
  /* this+0x0 */ int unused
}

struct HPEN__ {
  /* this+0x0 */ int unused
}

struct HRAWINPUT__ {
  /* this+0x0 */ int unused
}

struct HRGN__ {
  /* this+0x0 */ int unused
}

struct HRSRC__ {
  /* this+0x0 */ int unused
}

struct HSPRITE__ {
  /* this+0x0 */ int unused
}

struct HSTR__ {
  /* this+0x0 */ int unused
}

struct HTASK__ {
  /* this+0x0 */ int unused
}

struct HTOUCHINPUT__ {
  /* this+0x0 */ int unused
}

struct HUMPD__ {
  /* this+0x0 */ int unused
}

struct HWAVEIN__ {
  /* this+0x0 */ int unused
}

struct HWAVEOUT__ {
  /* this+0x0 */ int unused
}

struct HWAVE__ {
  /* this+0x0 */ int unused
}

struct HWINEVENTHOOK__ {
  /* this+0x0 */ int unused
}

struct HWINSTA__ {
  /* this+0x0 */ int unused
}

struct HWND__ {
  /* this+0x0 */ int unused
}

class HomunDataStuff::CHomunData {
    *
  /* this+0x4 */ bool m_bExist
  /* this+0x8 */ class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > m_EfstList

  /* this+0x18 */ class std::map<unsigned short,HO_SKINFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HO_SKINFO> > > m_Skill

  public void HomunDataStuff::CHomunData::Init()
  public bool isExist()
  public void CHomunData(const class HomunDataStuff::CHomunData &)
  public void HomunDataStuff::CHomunData::CHomunData()
  public void HomunDataStuff::CHomunData::~CHomunData()
  public class HomunDataStuff::CHomunData & operator=(const class HomunDataStuff::CHomunData &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct IDispatch {
  IUnknown, offset = 0x0

  public HRESULT GetTypeInfoCount(unsigned int *)
  public HRESULT GetTypeInfo(unsigned int, unsigned long, struct ITypeInfo * *)
  public HRESULT GetIDsOfNames(const struct _GUID &, wchar_t * *, unsigned int, unsigned long, long *)
  public HRESULT Invoke(long, const struct _GUID &, unsigned long, unsigned short, struct tagDISPPARAMS *, struct tagVARIANT *, struct tagEXCEPINFO *, unsigned int *)
  public void IDispatch(const struct IDispatch &)
  public void IDispatch()
  public struct IDispatch & operator=(const struct IDispatch &)
}

struct IDpair {
  /* this+0x0 */ struct _iobuf * stream
  /* this+0x4 */ int prochnd
}

struct IEnumSTATSTG {
  IUnknown, offset = 0x0

  public HRESULT Next(unsigned long, struct tagSTATSTG *, unsigned long *)
  public HRESULT Skip(unsigned long)
  public HRESULT Reset()
  public HRESULT Clone(struct IEnumSTATSTG * *)
  public void IEnumSTATSTG(const struct IEnumSTATSTG &)
  public void IEnumSTATSTG()
  public struct IEnumSTATSTG & operator=(const struct IEnumSTATSTG &)
}

struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
  /* this+0x0 */ unsigned char bAuxType
  /* this+0x1 */ unsigned char bReserved
  /* this+0x2 */ unsigned long SymbolTableIndex
  /* this+0x6 */ unsigned char[0xc] rgbReserved
}

struct IMAGE_COR20_HEADER {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ unsigned short MajorRuntimeVersion
  /* this+0x6 */ unsigned short MinorRuntimeVersion
  /* this+0x8 */ struct _IMAGE_DATA_DIRECTORY MetaData

  /* this+0x10 */ unsigned long Flags
  /* this+0x14 */ unsigned long EntryPointToken
  /* this+0x14 */ unsigned long EntryPointRVA
  /* this+0x18 */ struct _IMAGE_DATA_DIRECTORY Resources

  /* this+0x20 */ struct _IMAGE_DATA_DIRECTORY StrongNameSignature

  /* this+0x28 */ struct _IMAGE_DATA_DIRECTORY CodeManagerTable

  /* this+0x30 */ struct _IMAGE_DATA_DIRECTORY VTableFixups

  /* this+0x38 */ struct _IMAGE_DATA_DIRECTORY ExportAddressTableJumps

  /* this+0x40 */ struct _IMAGE_DATA_DIRECTORY ManagedNativeHeader

}

struct IMAGE_LOAD_CONFIG_DIRECTORY32 {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned long GlobalFlagsClear
  /* this+0x10 */ unsigned long GlobalFlagsSet
  /* this+0x14 */ unsigned long CriticalSectionDefaultTimeout
  /* this+0x18 */ unsigned long DeCommitFreeBlockThreshold
  /* this+0x1c */ unsigned long DeCommitTotalFreeThreshold
  /* this+0x20 */ unsigned long LockPrefixTable
  /* this+0x24 */ unsigned long MaximumAllocationSize
  /* this+0x28 */ unsigned long VirtualMemoryThreshold
  /* this+0x2c */ unsigned long ProcessHeapFlags
  /* this+0x30 */ unsigned long ProcessAffinityMask
  /* this+0x34 */ unsigned short CSDVersion
  /* this+0x36 */ unsigned short Reserved1
  /* this+0x38 */ unsigned long EditList
  /* this+0x3c */ unsigned long SecurityCookie
  /* this+0x40 */ unsigned long SEHandlerTable
  /* this+0x44 */ unsigned long SEHandlerCount
}

struct IMAGE_LOAD_CONFIG_DIRECTORY64 {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned long GlobalFlagsClear
  /* this+0x10 */ unsigned long GlobalFlagsSet
  /* this+0x14 */ unsigned long CriticalSectionDefaultTimeout
  /* this+0x18 */ unsigned __int64 DeCommitFreeBlockThreshold
  /* this+0x20 */ unsigned __int64 DeCommitTotalFreeThreshold
  /* this+0x28 */ unsigned __int64 LockPrefixTable
  /* this+0x30 */ unsigned __int64 MaximumAllocationSize
  /* this+0x38 */ unsigned __int64 VirtualMemoryThreshold
  /* this+0x40 */ unsigned __int64 ProcessAffinityMask
  /* this+0x48 */ unsigned long ProcessHeapFlags
  /* this+0x4c */ unsigned short CSDVersion
  /* this+0x4e */ unsigned short Reserved1
  /* this+0x50 */ unsigned __int64 EditList
  /* this+0x58 */ unsigned __int64 SecurityCookie
  /* this+0x60 */ unsigned __int64 SEHandlerTable
  /* this+0x68 */ unsigned __int64 SEHandlerCount
}

struct IMPORT_OBJECT_HEADER {
  /* this+0x0 */ unsigned short Sig1
  /* this+0x2 */ unsigned short Sig2
  /* this+0x4 */ unsigned short Version
  /* this+0x6 */ unsigned short Machine
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ unsigned long SizeOfData
  /* this+0x10 */ unsigned short Ordinal
  /* this+0x10 */ unsigned short Hint
  /* this(bf)+0x12:0x0 len(0x2) */ unsigned short Type
  /* this(bf)+0x12:0x2 len(0x3) */ unsigned short NameType
  /* this(bf)+0x12:0x5 len(0xb) */ unsigned short Reserved
}

struct IM_SERVER_STATE {
  /* this+0x0 */ int serverID
  /* this+0x4 */ int packetNumber
  /* this+0x8 */ int userCounter
  /* this+0xc */ int loopcountPerSec
}

struct IRMAILID {
    /* this+0x0 */ unsigned char office
  /* this+0x1 */ unsigned int id
  public void IRMAILID()
  public void IRMAILID(const unsigned char, const unsigned int)
}

struct IRecordInfo {
  IUnknown, offset = 0x0

  public HRESULT RecordInit(void *)
  public HRESULT RecordClear(void *)
  public HRESULT RecordCopy(void *, void *)
  public HRESULT GetGuid(struct _GUID *)
  public HRESULT GetName(wchar_t * *)
  public HRESULT GetSize(unsigned long *)
  public HRESULT GetTypeInfo(struct ITypeInfo * *)
  public HRESULT GetField(void *, const wchar_t *, struct tagVARIANT *)
  public HRESULT GetFieldNoCopy(void *, const wchar_t *, struct tagVARIANT *, void * *)
  public HRESULT PutField(unsigned long, void *, const wchar_t *, struct tagVARIANT *)
  public HRESULT PutFieldNoCopy(unsigned long, void *, const wchar_t *, struct tagVARIANT *)
  public HRESULT GetFieldNames(unsigned long *, wchar_t * *)
  public int IsMatchingType(struct IRecordInfo *)
  public void * RecordCreate()
  public HRESULT RecordCreateCopy(void *, void * *)
  public HRESULT RecordDestroy(void *)
  public void IRecordInfo(const struct IRecordInfo &)
  public void IRecordInfo()
  public struct IRecordInfo & operator=(const struct IRecordInfo &)
}

struct ISequentialStream {
  IUnknown, offset = 0x0

  public HRESULT Read(void *, unsigned long, unsigned long *)
  public HRESULT Write(const void *, unsigned long, unsigned long *)
  public void ISequentialStream(const struct ISequentialStream &)
  public void ISequentialStream()
  public struct ISequentialStream & operator=(const struct ISequentialStream &)
}

struct IStorage {
  IUnknown, offset = 0x0

  public HRESULT CreateStream(const wchar_t *, unsigned long, unsigned long, unsigned long, struct IStream * *)
  public HRESULT OpenStream(const wchar_t *, void *, unsigned long, unsigned long, struct IStream * *)
  public HRESULT CreateStorage(const wchar_t *, unsigned long, unsigned long, unsigned long, struct IStorage * *)
  public HRESULT OpenStorage(const wchar_t *, struct IStorage *, unsigned long, wchar_t * *, unsigned long, struct IStorage * *)
  public HRESULT CopyTo(unsigned long, const struct _GUID *, wchar_t * *, struct IStorage *)
  public HRESULT MoveElementTo(const wchar_t *, struct IStorage *, const wchar_t *, unsigned long)
  public HRESULT Commit(unsigned long)
  public HRESULT Revert()
  public HRESULT EnumElements(unsigned long, void *, unsigned long, struct IEnumSTATSTG * *)
  public HRESULT DestroyElement(const wchar_t *)
  public HRESULT RenameElement(const wchar_t *, const wchar_t *)
  public HRESULT SetElementTimes(const wchar_t *, const struct _FILETIME *, const struct _FILETIME *, const struct _FILETIME *)
  public HRESULT SetClass(const struct _GUID &)
  public HRESULT SetStateBits(unsigned long, unsigned long)
  public HRESULT Stat(struct tagSTATSTG *, unsigned long)
  public void IStorage(const struct IStorage &)
  public void IStorage()
  public struct IStorage & operator=(const struct IStorage &)
}

struct IStream {
  ISequentialStream, offset = 0x0

  public HRESULT Seek(union _LARGE_INTEGER, unsigned long, union _ULARGE_INTEGER *)
  public HRESULT SetSize(union _ULARGE_INTEGER)
  public HRESULT CopyTo(struct IStream *, union _ULARGE_INTEGER, union _ULARGE_INTEGER *, union _ULARGE_INTEGER *)
  public HRESULT Commit(unsigned long)
  public HRESULT Revert()
  public HRESULT LockRegion(union _ULARGE_INTEGER, union _ULARGE_INTEGER, unsigned long)
  public HRESULT UnlockRegion(union _ULARGE_INTEGER, union _ULARGE_INTEGER, unsigned long)
  public HRESULT Stat(struct tagSTATSTG *, unsigned long)
  public HRESULT Clone(struct IStream * *)
  public void IStream(const struct IStream &)
  public void IStream()
  public struct IStream & operator=(const struct IStream &)
}

struct ITEMREUSE {
  public void ITEMREUSE()
  /* this+0x0 */ int groupBuffID
  /* this+0x4 */ unsigned long time
}

struct ITEM_INFO {
  /* this+0x0 */ unsigned long MoveReqLastTime
  /* this+0x4 */ unsigned long state
  /* this+0x8 */ unsigned short ITID
  /* this+0xa */ unsigned short type
  /* this+0xc */ unsigned short count
  /* this+0xe */ bool IsIdentified
  /* this+0x10 */ __int64 unique_identity_numberV2
  /* this+0x18 */ long hire_expire_date
  /* this+0x1c */ bool IsDamaged
  /* this+0x1d */ unsigned char RefiningLevel
  /* this+0x1e */ struct EQUIPSLOTINFO slot

  /* this+0x28 */ int xPos
  /* this+0x2c */ int yPos
  /* this+0x30 */ unsigned char subX
  /* this+0x31 */ unsigned char subY
  /* this+0x34 */ class CMapRes * mapRes
  /* this+0x38 */ char[0x18] name
  /* this+0x50 */ char[0x18] DropMonsterName
  public void ITEM_INFO()
}

struct ITEM_PLUSPOWEROFITEM {
  /* this+0x0 */ short rightAttackPower
  /* this+0x2 */ short leftAttackPower
  /* this+0x4 */ short defencePower
  /* this+0x6 */ short magicDefPower
  /* this+0x8 */ short equipedArrowAttPow
  /* this+0xa */ short rightrefiningAttPower
  /* this+0xc */ short leftrefiningAttPower
  /* this+0xe */ short refiningDefPower
  /* this+0x10 */ short magicAttackPower
}

struct ITEM_PLUSSTATUS_VALUE {
  /* this+0x0 */ short dexValue
  /* this+0x2 */ short strValue
  /* this+0x4 */ short intValue
  /* this+0x6 */ short lukValue
  /* this+0x8 */ short agiValue
  /* this+0xa */ short vitValue
}

struct ITypeComp {
  IUnknown, offset = 0x0

  public HRESULT Bind(wchar_t *, unsigned long, unsigned short, struct ITypeInfo * *, enum tagDESCKIND *, union tagBINDPTR *)
  public HRESULT BindType(wchar_t *, unsigned long, struct ITypeInfo * *, struct ITypeComp * *)
  public void ITypeComp(const struct ITypeComp &)
  public void ITypeComp()
  public struct ITypeComp & operator=(const struct ITypeComp &)
}

struct ITypeInfo {
  IUnknown, offset = 0x0

  public HRESULT GetTypeAttr(struct tagTYPEATTR * *)
  public HRESULT GetTypeComp(struct ITypeComp * *)
  public HRESULT GetFuncDesc(unsigned int, struct tagFUNCDESC * *)
  public HRESULT GetVarDesc(unsigned int, struct tagVARDESC * *)
  public HRESULT GetNames(long, wchar_t * *, unsigned int, unsigned int *)
  public HRESULT GetRefTypeOfImplType(unsigned int, unsigned long *)
  public HRESULT GetImplTypeFlags(unsigned int, int *)
  public HRESULT GetIDsOfNames(wchar_t * *, unsigned int, long *)
  public HRESULT Invoke(void *, long, unsigned short, struct tagDISPPARAMS *, struct tagVARIANT *, struct tagEXCEPINFO *, unsigned int *)
  public HRESULT GetDocumentation(long, wchar_t * *, wchar_t * *, unsigned long *, wchar_t * *)
  public HRESULT GetDllEntry(long, enum tagINVOKEKIND, wchar_t * *, wchar_t * *, unsigned short *)
  public HRESULT GetRefTypeInfo(unsigned long, struct ITypeInfo * *)
  public HRESULT AddressOfMember(long, enum tagINVOKEKIND, void * *)
  public HRESULT CreateInstance(struct IUnknown *, const struct _GUID &, void * *)
  public HRESULT GetMops(long, wchar_t * *)
  public HRESULT GetContainingTypeLib(struct ITypeLib * *, unsigned int *)
  public void ReleaseTypeAttr(struct tagTYPEATTR *)
  public void ReleaseFuncDesc(struct tagFUNCDESC *)
  public void ReleaseVarDesc(struct tagVARDESC *)
  public void ITypeInfo(const struct ITypeInfo &)
  public void ITypeInfo()
  public struct ITypeInfo & operator=(const struct ITypeInfo &)
}

struct ITypeLib {
  IUnknown, offset = 0x0

  public unsigned int GetTypeInfoCount()
  public HRESULT GetTypeInfo(unsigned int, struct ITypeInfo * *)
  public HRESULT GetTypeInfoType(unsigned int, enum tagTYPEKIND *)
  public HRESULT GetTypeInfoOfGuid(const struct _GUID &, struct ITypeInfo * *)
  public HRESULT GetLibAttr(struct tagTLIBATTR * *)
  public HRESULT GetTypeComp(struct ITypeComp * *)
  public HRESULT GetDocumentation(int, wchar_t * *, wchar_t * *, unsigned long *, wchar_t * *)
  public HRESULT IsName(wchar_t *, unsigned long, int *)
  public HRESULT FindName(wchar_t *, unsigned long, struct ITypeInfo * *, long *, unsigned short *)
  public void ReleaseTLibAttr(struct tagTLIBATTR *)
  public void ITypeLib(const struct ITypeLib &)
  public void ITypeLib()
  public struct ITypeLib & operator=(const struct ITypeLib &)
}

struct IUnknown {
    *
  public HRESULT QueryInterface(const struct _GUID &, void * *)
  public unsigned long AddRef()
  public unsigned long Release()
  public void IUnknown(const struct IUnknown &)
  public void IUnknown()
  public struct IUnknown & operator=(const struct IUnknown &)
}

class IVItCashPointItem {
  IVItItem, offset = 0x0

  public void IVItCashPointItem::InitReal()
  public void IVItCashPointItem::InitVirtual()
  public unsigned long IVItCashPointItem::GetType()
  public void IVItCashPointItem::CopyFromParData(struct IVItItemData *)
  public void IVItCashPointItem::CopyToParData(struct IVItItemData *)
  public void IVItCashPointItem::CopyFromOtherItem(class IVItItem *)
  public void IVItCashPointItem::IBData_Get(class CItemDBFmtBuffer &, const bool)
  public void IVItCashPointItem::IBData_Set(class CReadBufferAddapter &)
  public int IVItCashPointItem::IBData_Set(char *)
  public void IVItCashPointItem(const class IVItCashPointItem &)
  public void IVItCashPointItem::IVItCashPointItem()
  public void IVItCashPointItem::~IVItCashPointItem()
  public class IVItCashPointItem & operator=(const class IVItCashPointItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct IVItCashPointItemDataV2 {
  IVItItemDataV2, offset = 0x0

  public void IVItCashPointItemDataV2()
}

class IVItEquipItem {
  IVItItem, offset = 0x0

    public void IVItEquipItem::InitReal()
  public void IVItEquipItem::InitVirtual()
  public unsigned long IVItEquipItem::GetType()
  public void SetIdentifyNumber(const __int64)
  public __int64 GetIdentifyNumber()
  public void SetDamageFlag(bool)
  public bool IsDamaged()
  public void SetRefiningLevel(unsigned char)
  public unsigned char IVItEquipItem::GetRefiningLevel()
  public unsigned short GetWearState()
  public void SetWearState(unsigned short)
  public void IVItEquipItem::AddCardToSlot(unsigned short)
  public int IVItEquipItem::IsSlotAvailable()
  public void IVItEquipItem::CopyFromParData(struct IVItItemData *)
  public void IVItEquipItem::CopyToParData(struct IVItItemData *)
  public void IVItEquipItem::CopyFromOtherItem(class IVItItem *)
  public bool IVItEquipItem::IsMapPropertyBlocked(const int)
  public void IVItEquipItem::SetMapPropertyBlocked(const int, bool)
  public void IVItEquipItem::IBData_Set(class CReadBufferAddapter &)
  public int IVItEquipItem::IBData_Set(char *)
  public void IVItEquipItem::IBData_Get(class CItemDBFmtBuffer &, const bool)
  public void IVItEquipItem(const class IVItEquipItem &)
  public void IVItEquipItem::IVItEquipItem()
  public void IVItEquipItem::~IVItEquipItem()
  /* this+0x28 */ unsigned short m_wearState
  /* this+0x2a */ bool m_isDamaged
  /* this+0x2b */ unsigned char m_refiningLevel
  /* this+0x2c */ bool[0x5] m_isMapPropertyBlocked
  public class IVItEquipItem & operator=(const class IVItEquipItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct IVItEquipItemData {
  IVItItemData, offset = 0x0

  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ bool IsIdentified
  /* this+0x3 */ int IdentifyNumber
  /* this+0x7 */ unsigned short WearState
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char RefiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

}

struct IVItEquipItemDataV2 {
  IVItItemDataV2, offset = 0x0

  /* this+0x3 */ unsigned short WearState
  /* this+0x5 */ bool IsDamaged
  /* this+0x6 */ unsigned char RefiningLevel
  /* this+0x7 */ struct EQUIPSLOTINFO slot

  public void IVItEquipItemDataV2()
}

class IVItItem {
  InventoryItem, offset = 0x0

  public void IVItItem(const class IVItItem &)
  public void IVItItem::IVItItem()
  public void IVItItem::InitReal()
  public void IVItItem::InitVirtual()
  public unsigned long IVItItem::GetType()
  public bool IsIdentified()
  public void SetIdentifyflag(bool)
  public short GetCount()
  public void SetCount(short)
  public void AddCount(short)
  public void SetIndex(unsigned short)
  public short GetIndex()
  public void IVItItem::CopyFromParData(struct IVItItemData *)
  public void IVItItem::CopyToParData(struct IVItItemData *)
  public void IVItItem::CopyFromOtherItem(class IVItItem *)
  public bool IsBind()
  public void SetBind(bool)
  public int IVItItem::IsMovable()
  public void SetSlotInfo(struct EQUIPSLOTINFO *)
  public struct EQUIPSLOTINFO * GetSlotInfo()
  public unsigned long GetMakerGID()
  /* this+0x8 */ struct EQUIPSLOTINFO m_slotInfo

  public void IVItItem::SetUniqueIdentityNumV2(const __int64)
  public __int64 GetUniqueIdentityNumV2()
  public void IVItItem::SetHireExpireDate(const long)
  public long GetHireExpireDate()
  public void IVItItem::IBData_Set(class CReadBufferAddapter &)
  public int IVItItem::IBData_Set(char *)
  public bool IVItItem::IsMapPropertyBlocked(const int)
  public void IVItItem::SetMapPropertyBlocked(const int, bool)
  public void IVItItem::IBData_Get(class CItemDBFmtBuffer &, const bool)
  protected void IVItItem::IBData_Save_AdditionalElement(class CItemDBFmtBuffer &, const struct IVItItemDataV2::tagFlag)
  protected int IBData_Save_AdditionalElement(char *, const struct IVItItemDataV2::tagFlag)
  protected void IVItItem::IBData_Save_Type(class CItemDBFmtBuffer &, const bool)
  protected int IBData_Save_Type(char *, const bool)
  protected void IVItItem::IBData_Load_AdditionalElement(const struct IVItItemDataV2::tagFlag, class CReadBufferAddapter &)
  protected int IVItItem::IBData_Load_AdditionalElement(const struct IVItItemDataV2::tagFlag, char *)
  /* this+0x10 */ bool m_isIdentified
  /* this+0x12 */ short m_count
  /* this+0x14 */ short m_index
  /* this+0x18 */ __int64 m_unique_identity_number
  /* this+0x20 */ long m_hire_expire_date
  /* this+0x24 */ bool m_isBind
  public void IVItItem::~IVItItem()
  public class IVItItem & operator=(const class IVItItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct IVItItemData {
  public unsigned long GetType()
}

struct IVItItemDataV2 {
    /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ struct IVItItemDataV2::tagFlag Flag

  public void IVItItemDataV2()
}

struct IVItItemDataV2::tagFlag {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char IsIdentified
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char IsBind
  /* this(bf)+0x0:0x2 len(0x4) */ unsigned char unused
  /* this(bf)+0x0:0x6 len(0x1) */ unsigned char exist_unique_identity_number
  /* this(bf)+0x0:0x7 len(0x1) */ unsigned char exist_hire_expire_date
  public void clear()
}

class IVItMoneyItem {
  IVItItem, offset = 0x0

  public void IVItMoneyItem::InitReal()
  public void IVItMoneyItem::InitVirtual()
  public unsigned long IVItMoneyItem::GetType()
  public void SetMoney(int)
  public int GetMoney()
  public void IVItMoneyItem(const class IVItMoneyItem &)
  public void IVItMoneyItem::IVItMoneyItem()
  public void IVItMoneyItem::~IVItMoneyItem()
  /* this+0x28 */ int m_money
  public class IVItMoneyItem & operator=(const class IVItMoneyItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class IVItNormalArrowItem {
  IVItNormalItem, offset = 0x0

  public void IVItNormalArrowItem::InitReal()
  public void IVItNormalArrowItem::InitVirtual()
  public unsigned long IVItNormalArrowItem::GetType()
  public unsigned short GetWearState()
  public void SetWearState(unsigned short)
  public void IVItNormalArrowItem::CopyFromParData(struct IVItItemData *)
  public void IVItNormalArrowItem::CopyToParData(struct IVItItemData *)
  public void IVItNormalArrowItem::CopyFromOtherItem(class IVItItem *)
  public void IVItNormalArrowItem::IBData_Get(class CItemDBFmtBuffer &, const bool)
  public void IVItNormalArrowItem::IBData_Set(class CReadBufferAddapter &)
  public int IVItNormalArrowItem::IBData_Set(char *)
  public void IVItNormalArrowItem(const class IVItNormalArrowItem &)
  public void IVItNormalArrowItem::IVItNormalArrowItem()
  public void IVItNormalArrowItem::~IVItNormalArrowItem()
  /* this+0x28 */ unsigned short m_wearState
  public class IVItNormalArrowItem & operator=(const class IVItNormalArrowItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct IVItNormalArrowItemData {
  IVItItemData, offset = 0x0

  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ bool IsIdentified
  /* this+0x3 */ short count
  /* this+0x5 */ unsigned short WearState
}

struct IVItNormalArrowItemDataV2 {
  IVItItemDataV2, offset = 0x0

  /* this+0x3 */ short count
  /* this+0x5 */ unsigned short WearState
  public void IVItNormalArrowItemDataV2()
}

class IVItNormalItem {
  IVItItem, offset = 0x0

  public void IVItNormalItem::InitReal()
  public void IVItNormalItem::InitVirtual()
  public unsigned long IVItNormalItem::GetType()
  public void IVItNormalItem::CopyFromParData(struct IVItItemData *)
  public void IVItNormalItem::CopyToParData(struct IVItItemData *)
  public void IVItNormalItem::CopyFromOtherItem(class IVItItem *)
  public void IVItNormalItem::IBData_Set(class CReadBufferAddapter &)
  public int IVItNormalItem::IBData_Set(char *)
  public void IVItNormalItem::IBData_Get(class CItemDBFmtBuffer &, const bool)
  public void IVItNormalItem(const class IVItNormalItem &)
  public void IVItNormalItem::IVItNormalItem()
  public void IVItNormalItem::~IVItNormalItem()
  public class IVItNormalItem & operator=(const class IVItNormalItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct IVItNormalItemData {
  IVItItemData, offset = 0x0

  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ bool IsIdentified
  /* this+0x3 */ short count
  /* this+0x5 */ struct EQUIPSLOTINFO slot

}

struct IVItNormalItemDataV2 {
  IVItItemDataV2, offset = 0x0

  /* this+0x3 */ short count
  /* this+0x5 */ struct EQUIPSLOTINFO slot

  public void IVItNormalItemDataV2()
}

class IVItQuestItem {
  IVItItem, offset = 0x0

  public void IVItQuestItem::InitReal()
  public void IVItQuestItem::InitVirtual()
  public unsigned long IVItQuestItem::GetType()
  public void IVItQuestItem::CopyFromParData(struct IVItItemData *)
  public void IVItQuestItem::CopyToParData(struct IVItItemData *)
  public void IVItQuestItem::CopyFromOtherItem(class IVItItem *)
  public void IVItQuestItem::IBData_Set(class CReadBufferAddapter &)
  public int IVItQuestItem::IBData_Set(char *)
  public void IVItQuestItem::IBData_Get(class CItemDBFmtBuffer &, const bool)
  public void IVItQuestItem(const class IVItQuestItem &)
  public void IVItQuestItem::IVItQuestItem()
  public void ~IVItQuestItem()
  public class IVItQuestItem & operator=(const class IVItQuestItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct IVItQuestItemData {
  IVItItemData, offset = 0x0

  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ short count
}

struct IVItQuestItemDataV2 {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ short count
}

class InventoryItem {
    *
  public void InitReal()
  public unsigned long InventoryItem::GetType()
  public void SetID(unsigned short)
  public unsigned short GetID()
  public void InventoryItem(const class InventoryItem &)
  public void InventoryItem()
  public void InventoryItem::~InventoryItem()
  /* this+0x4 */ unsigned short m_ID
  public class InventoryItem & operator=(const class InventoryItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct ItemRoutingComp {
  std::binary_function<TItemRoutingPriority,TItemRoutingPriority,bool>, offset = 0x0

  public bool operator()(const class TItemRoutingPriority &, const class TItemRoutingPriority &)
}

struct LClosure {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x6 */ unsigned char isC
  /* this+0x7 */ unsigned char nupvalues
  /* this+0x8 */ union GCObject * gclist
  /* this+0xc */ struct Table * env
  /* this+0x10 */ struct Proto * p
  /* this+0x14 */ struct UpVal *[0x1] upvals
}

struct LG {
  /* this+0x0 */ struct lua_State l

  /* this+0x78 */ struct global_State g

}

struct LHS_assign {
  /* this+0x0 */ struct LHS_assign * prev
  /* this+0x8 */ struct expdesc v

}

struct LIST_ENTRY32 {
  /* this+0x0 */ unsigned long Flink
  /* this+0x4 */ unsigned long Blink
}

struct LIST_ENTRY64 {
  /* this+0x0 */ unsigned __int64 Flink
  /* this+0x8 */ unsigned __int64 Blink
}

union L_Umaxalign {
  /* this+0x0 */ double u
  /* this+0x0 */ void * s
  /* this+0x0 */ long l
}

struct LexState {
  /* this+0x0 */ int current
  /* this+0x4 */ int linenumber
  /* this+0x8 */ int lastline
  /* this+0x10 */ struct Token t

  /* this+0x20 */ struct Token lookahead

  /* this+0x30 */ struct FuncState * fs
  /* this+0x34 */ struct lua_State * L
  /* this+0x38 */ struct Zio * z
  /* this+0x3c */ struct Mbuffer * buff
  /* this+0x40 */ union TString * source
  /* this+0x44 */ char decpoint
}

struct LoadF {
  /* this+0x0 */ int extraline
  /* this+0x4 */ struct _iobuf * f
  /* this+0x8 */ char[0x200] buff
}

struct LoadS {
  /* this+0x0 */ const char * s
  /* this+0x4 */ unsigned int size
}

struct LoadState {
  /* this+0x0 */ struct lua_State * L
  /* this+0x4 */ struct Zio * Z
  /* this+0x8 */ struct Mbuffer * b
  /* this+0xc */ const char * name
}

struct LocVar {
  /* this+0x0 */ union TString * varname
  /* this+0x4 */ int startpc
  /* this+0x8 */ int endpc
}

class LuaMonsterAIStuff::NMSG {
    *
  public enum LuaMonsterAIStuff::enumMSGID GetMSGID()
  /* this+0x4 */ enum LuaMonsterAIStuff::enumMSGID m_MSGID
  public void NMSG(const class LuaMonsterAIStuff::NMSG &)
  public void NMSG(const enum LuaMonsterAIStuff::enumMSGID)
  public void LuaMonsterAIStuff::NMSG::~NMSG()
  public class LuaMonsterAIStuff::NMSG & operator=(const class LuaMonsterAIStuff::NMSG &)
  public void * __vecDelDtor(unsigned int)
}

class LuaMonsterAIStuff::NMSG_ATTACKED {
  LuaMonsterAIStuff::NMSG, offset = 0x0

  /* this+0x8 */ const unsigned long m_AID
  /* this+0xc */ const int m_Damage
  public void NMSG_ATTACKED(const class LuaMonsterAIStuff::NMSG_ATTACKED &)
  public void NMSG_ATTACKED(const unsigned long, const int)
  public void ~NMSG_ATTACKED()
  public void * __vecDelDtor(unsigned int)
}

class LuaMonsterAIStuff::NMSG_DEAD {
  LuaMonsterAIStuff::NMSG, offset = 0x0

  /* this+0x8 */ const unsigned long m_AID
  public void NMSG_DEAD(const class LuaMonsterAIStuff::NMSG_DEAD &)
  public void NMSG_DEAD(const unsigned long)
  public void ~NMSG_DEAD()
  public void * __vecDelDtor(unsigned int)
}

class LuaMonsterAIStuff::NMSG_LOG {
  LuaMonsterAIStuff::NMSG, offset = 0x0

  public void NMSG_LOG(const class LuaMonsterAIStuff::NMSG_LOG &)
  public void NMSG_LOG()
  public void ~NMSG_LOG()
  public class LuaMonsterAIStuff::NMSG_LOG & operator=(const class LuaMonsterAIStuff::NMSG_LOG &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class LuaMonsterAIStuff::NMSG_TELEPORT {
  LuaMonsterAIStuff::NMSG, offset = 0x0

  /* this+0x8 */ const int m_xPos
  /* this+0xc */ const int m_yPos
  /* this+0x10 */ const char * m_MapName
  public void NMSG_TELEPORT(const class LuaMonsterAIStuff::NMSG_TELEPORT &)
  public void NMSG_TELEPORT(const int, const int, const char *)
  public void ~NMSG_TELEPORT()
  public void * __vecDelDtor(unsigned int)
}

class LuaMonsterAIStuff::NMSG_USER {
  LuaMonsterAIStuff::NMSG, offset = 0x0

  /* this+0x8 */ const int m_wParam
  /* this+0xc */ const int m_lParam
  public void NMSG_USER(const class LuaMonsterAIStuff::NMSG_USER &)
  public void NMSG_USER(const int, const int)
  public void ~NMSG_USER()
  public void * __vecDelDtor(unsigned int)
}

struct MAIL_LIST {
  /* this+0x0 */ unsigned long MailID
  /* this+0x4 */ char[0x28] HEADER
  /* this+0x2c */ char isOpen
  /* this+0x2d */ char[0x18] FromName
  /* this+0x45 */ long DeleteTime
}

struct MAIL_OPEN {
  /* this+0x0 */ unsigned long MailID
  /* this+0x4 */ char[0x28] HEADER
  /* this+0x2c */ char[0x18] FromName
  /* this+0x44 */ long DeleteTime
  /* this+0x48 */ unsigned long Money
  /* this+0x4c */ int count
  /* this+0x50 */ unsigned short ITID
  /* this+0x52 */ unsigned short Type
  /* this+0x54 */ bool IsIdentified
  /* this+0x55 */ bool IsDamaged
  /* this+0x56 */ unsigned char refiningLevel
  /* this+0x57 */ struct EQUIPSLOTINFO slot

}

struct MAKABLEITEM_INFO {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ unsigned short[0x3] material_ID
}

struct MAKERINFO {
  /* this+0x0 */ int rank
  /* this+0x4 */ char[0x18] charname
  /* this+0x1c */ int point
}

struct MAKER_RANKING {
  /* this+0x0 */ unsigned long GID
  /* this+0x4 */ char[0x18] charname
  /* this+0x1c */ int point
}

struct MAP_STATE {
  public void MAP_STATE()
  /* this+0x0 */ int ZsvrState
  /* this+0x4 */ unsigned char[0x10] mapName
}

struct MCSTORE_ITEMEXTRA_INFO {
  /* this+0x0 */ int price
  /* this+0x4 */ unsigned long SSI_ID
}

struct MEMBER_DATA {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long ROLE
  /* this+0x8 */ char[0x18] charName
}

struct MEMBER_POSITION_ID_NAME_INFO {
  /* this+0x0 */ int positionID
  /* this+0x4 */ char[0x18] posName
}

struct MEMBER_POSITION_INFO {
  /* this+0x0 */ int AID
  /* this+0x4 */ int GID
  /* this+0x8 */ int positionID
}

struct MENUITEMTEMPLATE {
  /* this+0x0 */ unsigned short mtOption
  /* this+0x2 */ unsigned short mtID
  /* this+0x4 */ wchar_t[0x1] mtString
}

struct MENUITEMTEMPLATEHEADER {
  /* this+0x0 */ unsigned short versionNumber
  /* this+0x2 */ unsigned short offset
}

struct MENU_INTERFACE {
  /* this+0x0 */ short Type
}

struct MERSOL_DBINFO {
  /* this+0x0 */ short faith
  /* this+0x2 */ short job
  /* this+0x4 */ short hp
  /* this+0x6 */ short sp
  /* this+0x8 */ short lifeTM
  /* this+0xc */ int exp
  /* this+0x10 */ int property
  /* this+0x14 */ int bodyState
  /* this+0x18 */ int healthState
  /* this+0x1c */ int effectState
  /* this+0x20 */ int[0x3] summonCount
}

struct MIN_MAX {
  /* this+0x0 */ short min
  /* this+0x2 */ short max
}

struct MISSION_HUNT_INFO {
  /* this+0x0 */ unsigned long mobGID
  /* this+0x4 */ short huntCount
  /* this+0x6 */ short maxCount
  /* this+0x8 */ char[0x18] mobName
}

struct MOB_TABLE {
  /* this+0x0 */ char * name
  /* this+0x4 */ int num
}

struct MOB_TABLE2 {
  /* this+0x0 */ char * name1
  /* this+0x4 */ char * name2
  /* this+0x8 */ int num
}

struct MONITEMINFO {
  /* this+0x0 */ char[0x18] name
  /* this+0x18 */ int percent
}

struct MONITEMPERCENT {
  /* this+0x0 */ unsigned short ITID
  /* this+0x4 */ int percent
}

struct MONPARAMETER {
  /* this+0x0 */ int aRan
  /* this+0x4 */ int LV
  /* this+0x8 */ int HP
  /* this+0xc */ int SP
  /* this+0x10 */ int str
  /* this+0x14 */ int Int
  /* this+0x18 */ int vit
  /* this+0x1c */ int dex
  /* this+0x20 */ int agi
  /* this+0x24 */ int luk
  /* this+0x28 */ int atk1
  /* this+0x2c */ int atk2
  /* this+0x30 */ int def
  /* this+0x34 */ int exp
  /* this+0x38 */ int jexp
  /* this+0x3c */ int inc
  /* this+0x40 */ int as
  /* this+0x44 */ int es
  /* this+0x48 */ int rechargeTime
  /* this+0x4c */ int attackedMT
  /* this+0x50 */ int mSpeed
  /* this+0x54 */ int attackMT
  /* this+0x58 */ int property
  /* this+0x5c */ int scale
  /* this+0x60 */ int _class
  /* this+0x64 */ int race
  /* this+0x68 */ int mdef
  /* this+0x6c */ struct MONITEMPERCENT[0x8] itemInfo
  /* this+0xac */ char[0x18] name
  /* this+0xc4 */ int aiType
  /* this+0xc8 */ int attr
}

struct MONSPAWN_SETINFO {
  /* this+0x0 */ unsigned long spriteType
  /* this+0x4 */ unsigned long npcType
  /* this+0x8 */ int count
}

struct MONSTER_CREATED_BYSKILL {
  /* this+0x0 */ unsigned short SKID
  /* this+0x4 */ int monsterJob
  /* this+0x8 */ short count
}

struct MOVEINFO {
  /* this+0x0 */ int xPos
  /* this+0x4 */ int yPos
  /* this+0x8 */ int dxPos
  /* this+0xc */ int dyPos
  /* this+0x10 */ unsigned long LastTime
  /* this+0x14 */ char dir
  /* this+0x18 */ int state
}

class MSGSTR {
  public const char * operator const char *()
  public void Format(const char *, <NoType>)
  /* this+0x0 */ char[0x800] m_buffer
}

struct MSG_TYPE1_TWODWORD {
  /* this+0x0 */ int data1
  /* this+0x4 */ int data2
}

struct MSG_TYPE2_THREEDWORD {
  /* this+0x0 */ int data1
  /* this+0x4 */ int data2
  /* this+0x8 */ int data3
}

struct MSG_TYPE3_FOURDWORD {
  /* this+0x0 */ int data1
  /* this+0x4 */ int data2
  /* this+0x8 */ int data3
  /* this+0xc */ int data4
}

struct MSG_TYPE4_FIVEDWORD {
  /* this+0x0 */ int data1
  /* this+0x4 */ int data2
  /* this+0x8 */ int data3
  /* this+0xc */ int data4
  /* this+0x10 */ int data5
}

struct MSG_TYPE5_SIXDWORD {
  /* this+0x0 */ int data1
  /* this+0x4 */ int data2
  /* this+0x8 */ int data3
  /* this+0xc */ int data4
  /* this+0x10 */ int data5
  /* this+0x14 */ int data6
}

struct MSG_TYPE7_EIGHTWORD {
  /* this+0x0 */ int data1
  /* this+0x4 */ int data2
  /* this+0x8 */ int data3
  /* this+0xc */ int data4
  /* this+0x10 */ int data5
  /* this+0x14 */ int data6
  /* this+0x18 */ int data7
  /* this+0x1c */ int data8
}

struct MSG_TYPE_SKILLDATA {
  /* this+0x0 */ int SKID
  /* this+0x4 */ int skLevel
  /* this+0x8 */ int spCost
  /* this+0xc */ int xPos
  /* this+0x10 */ int yPos
  public void MSG_TYPE_SKILLDATA()
}

class MSGpar::CVar {
    /* this+0x0 */ union MSGpar::CVar::VAR_UNION m_Var

  public void CVar(const class MSGpar::CVar &)
  public void CVar()
  public void MSGpar::CVar::~CVar()
  public void * __vecDelDtor(unsigned int)
}

union MSGpar::CVar::VAR_UNION {
  /* this+0x0 */ struct MSGpar::tagSC_STRIPACCESSARY m_SC_STRIPACCESSARY

  /* this+0x0 */ struct MSGpar::tagRG_STRIPWEAPON m_RG_STRIPWEAPON

  /* this+0x0 */ struct MSGpar::tagRG_STRIPHELM m_RG_STRIPHELM

  /* this+0x0 */ struct MSGpar::tagRG_STRIPSHIELD m_RG_STRIPSHIELD

  /* this+0x0 */ struct MSGpar::tagRG_STRIPARMOR m_RG_STRIPARMOR

  /* this+0x0 */ struct MSGpar::tagWL_CHAINLIGHTNING_ATK m_WL_CHAINLIGHTNING_ATK

  /* this+0x0 */ struct MSGpar::tagWM_REVERBERATION_MELEE m_WM_REVERBERATION_MELEE

  /* this+0x0 */ struct MSGpar::tagWM_REVERBERATION_MAGIC m_WM_REVERBERATION_MAGIC

  /* this+0x0 */ struct MSGpar::tagWM_SEVERE_RAINSTORM_MELEE m_WM_SEVERE_RAINSTORM_MELEE

  /* this+0x0 */ struct MSGpar::tagSR_CRESCENTELBOW_AUTOSPELL m_SR_CRESCENTELBOW_AUTOSPELL

  /* this+0x0 */ struct MSGpar::tagINT m_INT

}

struct MSGpar::tagINT {
  /* this+0x0 */ int value
}

struct MSGpar::tagRG_STRIPARMOR {
  /* this+0x0 */ bool bBlockClientNotify
}

struct MSGpar::tagRG_STRIPHELM {
  /* this+0x0 */ bool bBlockClientNotify
}

struct MSGpar::tagRG_STRIPSHIELD {
  /* this+0x0 */ bool bBlockClientNotify
}

struct MSGpar::tagRG_STRIPWEAPON {
  /* this+0x0 */ bool bBlockClientNotify
}

struct MSGpar::tagSC_STRIPACCESSARY {
  /* this+0x0 */ bool bBlockClientNotify
}

struct MSGpar::tagSR_CRESCENTELBOW_AUTOSPELL {
  /* this+0x0 */ int Damage
}

struct MSGpar::tagWL_CHAINLIGHTNING_ATK {
  /* this(bf)+0x0:0x0 len(0x8) */ int MaxCnt
  /* this(bf)+0x0:0x8 len(0x8) */ int Cnt
  /* this(bf)+0x0:0x10 len(0x10) */ int unused
}

struct MSGpar::tagWM_REVERBERATION_MAGIC {
  /* this+0x0 */ int AtkPercent
}

struct MSGpar::tagWM_REVERBERATION_MELEE {
  /* this+0x0 */ int AtkPercent
}

struct MSGpar::tagWM_SEVERE_RAINSTORM_MELEE {
  /* this+0x0 */ int AtkPercent
}

struct MS_MAPMOVE {
  public void Set(const char *, short, short, unsigned long)
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ short xPos
  /* this+0x6 */ short yPos
  /* this+0x8 */ char[0x10] mapName
}

struct MS_NAVIGATIONINFO {
  public void Set(const char *, const unsigned char, const unsigned char, const bool, const short, const short, const char *)
  /* this+0x0 */ char[0x10] mapName
  /* this+0x10 */ unsigned char FindType
  /* this+0x11 */ unsigned char SetType
  /* this+0x12 */ bool isHide
  /* this+0x14 */ short xPos
  /* this+0x16 */ short yPos
  /* this+0x18 */ char[0x18] mobName
}

struct MTStackFrame {
  /* this+0x0 */ unsigned __int64 MTS_LocalFac
  /* this+0x8 */ unsigned char MTS_cdispflags
}

struct MVPINFO {
  /* this+0x0 */ int expPercent
  /* this+0x4 */ int[0x3] itemPercent
  /* this+0x10 */ char[0x18] name
  /* this+0x28 */ char[0x18][0x3] itemName
}

struct MYMOBDATA {
  /* this+0x0 */ unsigned long AID
}

struct MannerPointData {
  /* this+0x0 */ unsigned long otherGID
  /* this+0x4 */ unsigned long type
}

struct MannerPointInfo {
  public void MannerPointInfo::Init(class CPC *)
  public void MannerPointInfo::Reset()
  public unsigned long IsGivableMP(unsigned long)
  public int MannerPointInfo::LoadMPInfo()
  public void InsertNewMP(unsigned long, int)
  private int SearchOtherCharacter(unsigned long)
  private int GetSize()
  private int DeleteFirstRecord()
  /* this+0x0 */ int m_lastTimeGivingMP
  /* this+0x4 */ class std::list<MannerPointData,std::allocator<MannerPointData> > m_info

  /* this+0x10 */ class CPC * m_owner
  public void MannerPointInfo(const struct MannerPointInfo &)
  public void MannerPointInfo()
  public void MannerPointInfo::~MannerPointInfo()
  public struct MannerPointInfo & operator=(const struct MannerPointInfo &)
  public void * __vecDelDtor(unsigned int)
}

class MapResScheduler::CScheduler {
    *
  public void MapResScheduler::CScheduler::Process(class CMapRes *)
  public void MapResScheduler::CScheduler::Insert(const class std::tr1::shared_ptr<MapResScheduler::CTask> &, const bool)
  public void MapResScheduler::CScheduler::Init()
  public void Delete(const unsigned long)
  public class MapResScheduler::CTask * GetTask(const unsigned long)
  public void CScheduler(const class MapResScheduler::CScheduler &)
  public void CScheduler()
  public void MapResScheduler::CScheduler::~CScheduler()
      /* this+0x4 */ class std::multiset<std::tr1::shared_ptr<MapResScheduler::CTask>,MapResScheduler::CScheduler::lcTaskPriority,std::allocator<std::tr1::shared_ptr<MapResScheduler::CTask> > > m_Tasks

  public class MapResScheduler::CScheduler & operator=(const class MapResScheduler::CScheduler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class MapResScheduler::CScheduler::lcTaskPriority {
  public bool operator()(const class std::tr1::shared_ptr<MapResScheduler::CTask> &, const class std::tr1::shared_ptr<MapResScheduler::CTask> &)
}

class MapResScheduler::CTask {
    *
  /* this+0x4 */ unsigned long m_Identity
  /* this+0x8 */ unsigned long m_Time
  public unsigned long GetExecuteTime()
  public unsigned long GetIdentity()
  public bool MapResScheduler::CTask::operator()(class CMapRes *)
  private void CTask(const class MapResScheduler::CTask &)
  private void CTask()
  public void MapResScheduler::CTask::CTask(const unsigned long, const unsigned long)
  public void MapResScheduler::CTask::~CTask()
  private class MapResScheduler::CTask & operator=(class MapResScheduler::CTask &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class MapResScheduler::`anonymous-namespace'::CTaskCompare {
  std::binary_function<std::tr1::shared_ptr<MapResScheduler::CTask>,unsigned long,bool>, offset = 0x0

  public bool operator()(const class std::tr1::shared_ptr<MapResScheduler::CTask> &, const unsigned long &)
}

struct MatchState {
  /* this+0x0 */ const char * src_init
  /* this+0x4 */ const char * src_end
  /* this+0x8 */ struct lua_State * L
  /* this+0xc */ int level
  /* this+0x10 */ struct <unnamed-tag>[0x20] capture
}

struct Mbuffer {
  /* this+0x0 */ char * buffer
  /* this+0x4 */ unsigned int n
  /* this+0x8 */ unsigned int buffsize
}

class N2FTAFile {
    *
  /* this+0x4 */ const int m_TABSIZE
  /* this+0x8 */ unsigned char * m_pBuffer
  /* this+0xc */ int m_TotalBytes
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strFileName

    /* this+0x2c */ struct N2FTAFile::tagCur m_Cur

        /* this+0x38 */ class std::map<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> > > m_LineInfoContainer

  private void N2FTAFile::Clear()
  private bool N2FTAFile::ParseLine()
  public bool N2FTAFile::Load(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool Write(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool N2FTAFile::isEOF()
  public bool N2FTAFile::GetByte(char &)
  public const int GetCurIdx()
  public const bool N2FTAFile::ViewByte(char &, const int)
  public const bool N2FTAFile::ViewByte(char &)
  public const int N2FTAFile::GetLine()
  public const int N2FTAFile::GetCol()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > N2FTAFile::GetLineStr(const int)
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > N2FTAFile::GetFileName()
  public void N2FTAFile(const class N2FTAFile &)
  public void N2FTAFile::N2FTAFile(const int)
  public void N2FTAFile::~N2FTAFile()
  public void __dflt_ctor_closure()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2FTAFile::CLineInfo {
  /* this+0x0 */ unsigned char * m_pBuffer
  /* this+0x4 */ int m_Bytes
  public void CLineInfo(unsigned char *, int)
  public void ~CLineInfo()
  public void * __vecDelDtor(unsigned int)
}

struct N2FTAFile::tagCur {
  /* this+0x0 */ int Idx
  /* this+0x4 */ int Line
  /* this+0x8 */ int Col
}

class N2FTALexicalAnalyzer {
    *
    /* this+0x4 */ class N2FTAFile & m_SourceFile
  /* this+0x8 */ bool m_bOK
    /* this+0xc */ class std::list<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > m_Container

  private int N2FTALexicalAnalyzer::isLetter(const char)
  private bool N2FTALexicalAnalyzer::isAlpha(const char)
  private bool N2FTALexicalAnalyzer::isDelimiter(const char)
  private bool N2FTALexicalAnalyzer::isNumeric(const char)
  private int N2FTALexicalAnalyzer::RemoveGarbage()
  private int N2FTALexicalAnalyzer::RemoveComment()
  private class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::Anaysis()
  private class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::StringAnaysis()
  private class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::SymbolAnaysis()
  private class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::NumberAnaysis()
  public const bool N2FTALexicalAnalyzer::isOK()
  public class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::GetToken()
  public class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::ViewToken()
  public const int GetLine()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetLineStr(const int)
  public void N2FTALexicalAnalyzer(const class N2FTALexicalAnalyzer &)
  public void N2FTALexicalAnalyzer::N2FTALexicalAnalyzer(class N2FTAFile &)
  public void N2FTALexicalAnalyzer::~N2FTALexicalAnalyzer()
  public void * __vecDelDtor(unsigned int)
}

class N2FTALexicalAnalyzer::FTARet {
    /* this+0x0 */ enum N2FTALexicalAnalyzer::FTARet::enumReturnCode m_Code
  /* this+0x8 */ class N2FTAToken m_Token

  /* this+0x78 */ int m_SourceFileLine
  /* this+0x7c */ int m_SourceFileCol
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_SourceFileName

  public const enum N2FTALexicalAnalyzer::FTARet::enumReturnCode GetResult()
  public class N2FTAToken N2FTALexicalAnalyzer::FTARet::GetToken()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > N2FTALexicalAnalyzer::FTARet::GetSourceFileName()
  public void N2FTALexicalAnalyzer::FTARet::FTARet(const class N2FTALexicalAnalyzer::FTARet &)
  public void N2FTALexicalAnalyzer::FTARet::FTARet()
  public void N2FTALexicalAnalyzer::FTARet::FTARet(const enum N2FTALexicalAnalyzer::FTARet::enumReturnCode, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int)
  public void N2FTALexicalAnalyzer::FTARet::FTARet(const enum N2FTALexicalAnalyzer::FTARet::enumReturnCode, class N2FTAToken)
  public void N2FTALexicalAnalyzer::FTARet::~FTARet()
  public class N2FTALexicalAnalyzer::FTARet & N2FTALexicalAnalyzer::FTARet::operator=(const class N2FTALexicalAnalyzer::FTARet &)
  public void * __vecDelDtor(unsigned int)
}

class N2FTAToken {
    *
    /* this+0x8 */ enum N2FTAToken::enumTYPE m_Type
  /* this+0x10 */ class N2FTAVar m_Value

  /* this+0x48 */ int m_SourceFileLine
  /* this+0x4c */ int m_SourceFileCol
  /* this+0x50 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_SourceFileName

  public const int GetSourceFileCol()
  public const int GetSourceFileLine()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > N2FTAToken::GetSourceFileName()
  public const enum N2FTAToken::enumTYPE GetType()
  public class N2FTAVar N2FTAToken::GetValue()
  public void N2FTAToken::N2FTAToken(const class N2FTAToken &)
  public void N2FTAToken::N2FTAToken(const enum N2FTAToken::enumTYPE, class N2FTAVar, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int)
  public void N2FTAToken::N2FTAToken()
  public void N2FTAToken::~N2FTAToken()
  public class N2FTAToken & operator=(const class N2FTAToken &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2FTAVar {
    *
      /* this+0x8 */ enum N2FTAVar::enumType m_Type
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strData

  /* this+0x28 */ __int64 m_intData
  /* this+0x30 */ double m_floatData
  public int N2FTAVar::operator int()
  public float operator float()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > operator class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >()
  public class N2FTAVar & operator=(const class N2FTAVar &)
  public void operator=(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void operator=(const float)
  public void operator=(const int)
  public bool N2FTAVar::operator==(const class N2FTAVar &)
  public bool N2FTAVar::operator!=(const class N2FTAVar &)
  public class N2FTAVar operator+(class N2FTAVar &)
  public class N2FTAVar operator-(class N2FTAVar &)
  public class N2FTAVar operator*(class N2FTAVar &)
  public class N2FTAVar operator/(class N2FTAVar &)
  public class N2FTAVar operator%(class N2FTAVar &)
  public void N2FTAVar::N2FTAVar(const class N2FTAVar &)
  public void N2FTAVar::N2FTAVar(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void N2FTAVar(const float)
  public void N2FTAVar(const int)
  public void N2FTAVar::N2FTAVar()
  public void N2FTAVar::~N2FTAVar()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2IDAllocator {
    *
  /* [0x0003:0x0004b88c] */ static  class N2IDAllocator * m_cpSelf
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ bool m_bOK
      /* this+0x20 */ class std::map<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> > > m_GroupContainer

  private bool N2IDAllocator::Create()
  private void N2IDAllocator::Destroy()
  public bool isOK()
  public bool RegisterGroup(const unsigned short, const unsigned short, const unsigned short)
  public unsigned int Alloc(const unsigned short)
  public static unsigned short GetGroupID(const unsigned int)
  public void Free(const unsigned int)
  public static bool N2IDAllocator::CreateInstance()
  public static void N2IDAllocator::DestoryInstance()
  public void N2IDAllocator(const class N2IDAllocator &)
  protected void N2IDAllocator::N2IDAllocator()
  protected void N2IDAllocator::~N2IDAllocator()
  public class N2IDAllocator & operator=(const class N2IDAllocator &)
  public void __local_vftable_ctor_closure()
  protected void * __vecDelDtor(unsigned int)
}

class N2IDGenerator {
    *
  /* this+0x4 */ const unsigned short m_MinID
  /* this+0x6 */ const unsigned short m_MaxID
  /* this+0x8 */ const unsigned short m_GroupID
        /* this+0xc */ class std::queue<unsigned int,std::deque<unsigned int,std::allocator<unsigned int> > > m_StandbyIDqueue

  /* this+0x24 */ class std::map<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> > > m_IDContainer

  /* this+0x34 */ bool m_bOK
  public const bool isOK()
  public unsigned int Alloc()
  public void Free(const unsigned int)
  public const int GetGroupID()
  public void N2IDGenerator(const class N2IDGenerator &)
  public void N2IDGenerator(const unsigned short, const unsigned short, const unsigned short)
  public void ~N2IDGenerator()
  public void * __vecDelDtor(unsigned int)
}

class N2IDGenerator36 {
  public bool isOK()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > Generate36(const unsigned long)
  public int ReverseDecimal(const char *)
  public static bool CreateInstance()
  public static void DestroyInstance()
  private void N2IDGenerator36(class N2IDGenerator36 &)
  private void N2IDGenerator36()
  private void ~N2IDGenerator36()
  private class N2IDGenerator36 & operator=(class N2IDGenerator36 &)
  /* this+0x0 */ bool m_bOK
  /* [0x0003:0x0004b884] */ static  class N2IDGenerator36 * m_cpSelf
  private void * __vecDelDtor(unsigned int)
}

class N2Inter {
    *
  public void PostInterMessage(const unsigned int, const int, const int, const int)
  public bool PeekInterMessage(unsigned int &, int &, int &, int &, const bool)
  public void N2Inter(const class N2Inter &)
  public void N2Inter()
  public void ~N2Inter()
  public class N2Inter & operator=(const class N2Inter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2InterMessageSystem {
    *
  /* [0x0003:0x0004b888] */ static  class N2InterMessageSystem * m_cpSelf
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ bool m_bOK
      /* this+0x20 */ class std::map<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> > > m_InterObjContainer

  public bool N2InterMessageSystem::isOK()
  public bool Insert(const unsigned int, class N2Inter *)
  public void Remove(const unsigned int, class N2Inter *)
  public bool PostInterMessage(const unsigned int, const unsigned int, const int, const int, const int)
  public static bool N2InterMessageSystem::CreateInstance()
  public static void N2InterMessageSystem::DestoryInstance()
  public void N2InterMessageSystem(const class N2InterMessageSystem &)
  protected void N2InterMessageSystem::N2InterMessageSystem()
  protected void N2InterMessageSystem::~N2InterMessageSystem()
  public class N2InterMessageSystem & operator=(const class N2InterMessageSystem &)
  public void __local_vftable_ctor_closure()
  protected void * __vecDelDtor(unsigned int)
}

class N2SyncObject {
    *
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION & m_CS
  public void N2SyncObject(struct _RTL_CRITICAL_SECTION &)
  private void N2SyncObject(const class N2SyncObject &)
  private class N2SyncObject & operator=(const class N2SyncObject &)
  public void ~N2SyncObject()
  public void * __vecDelDtor(unsigned int)
}

class N2SystemMgr {
    *
  /* [0x0003:0x0004b65c] */ static  class N2SystemMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  private bool N2SystemMgr::Create()
  private void N2SystemMgr::Destory()
  public const bool N2SystemMgr::isOK()
  public static bool N2SystemMgr::CreateInstance()
  public static void N2SystemMgr::DestoryInstance()
  public void N2SystemMgr(const class N2SystemMgr &)
  private void N2SystemMgr::N2SystemMgr()
  private void N2SystemMgr::~N2SystemMgr()
  public class N2SystemMgr & operator=(const class N2SystemMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class N3DataTransferMgr {
    *
  public bool isOK()
  public unsigned int N3DataTransferMgr::Put(class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public unsigned int N3DataTransferMgr::Put(class std::vector<unsigned char,std::allocator<unsigned char> > &)
  public class std::vector<unsigned char,std::allocator<unsigned char> > N3DataTransferMgr::Get(unsigned int)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > N3DataTransferMgr::GetStr(unsigned int)
  public static bool N3DataTransferMgr::CreateInstance()
  public static void N3DataTransferMgr::DestroyInstance()
  private void N3DataTransferMgr(class N3DataTransferMgr &)
  private void N3DataTransferMgr::N3DataTransferMgr()
  private void N3DataTransferMgr::~N3DataTransferMgr()
  private class N3DataTransferMgr & operator=(class N3DataTransferMgr &)
  /* [0x0003:0x0004b870] */ static  class N3DataTransferMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS

      /* this+0x20 */ class std::map<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > > m_DataMap

    public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class N3DataTransferMgr::lcData {
    *
  public void N3DataTransferMgr::lcData::lcData(const class N3DataTransferMgr::lcData &)
  public void lcData(class std::vector<unsigned char,std::allocator<unsigned char> > &, unsigned long)
  public void lcData()
  public void N3DataTransferMgr::lcData::~lcData()
  /* this+0x4 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_data

  /* this+0x14 */ unsigned long m_Time
  public class N3DataTransferMgr::lcData & operator=(const class N3DataTransferMgr::lcData &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct N3IPAddapter::__l2::threadBuffer {
}

class N3IPAddr {
    *
  public static bool IsPrivateIP(unsigned long)
  public static unsigned long GetHostIP(bool)
  public unsigned long operator unsigned long()
  public void Set(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void Set(const unsigned long)
  public void N3IPAddr(const class N3IPAddr &)
  public void N3IPAddr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void N3IPAddr::N3IPAddr(const unsigned long)
  public void N3IPAddr()
  public void N3IPAddr::~N3IPAddr()
  /* this+0x4 */ unsigned long m_IPAddr
  public class N3IPAddr & operator=(const class N3IPAddr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3Inter {
    *
  public void Receive(const unsigned int, const unsigned int, const unsigned int)
  public void N3Inter(const class N3Inter &)
  public void N3Inter()
  public void N3Inter::~N3Inter()
  public class N3Inter & operator=(const class N3Inter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3MessageMgr {
    *
  public bool isOK()
  public bool N3MessageMgr::Insert(const unsigned int, class N3Inter *)
  public void N3MessageMgr::Remove(const unsigned int, class N3Inter *)
  public bool N3MessageMgr::Post(const unsigned int, const unsigned int, const unsigned int, const unsigned int)
  public static bool N3MessageMgr::CreateInstance()
  public static void N3MessageMgr::DestroyInstance()
  private void N3MessageMgr(const class N3MessageMgr &)
  private void N3MessageMgr::N3MessageMgr()
  private class N3MessageMgr & operator=(const class N3MessageMgr &)
  private void N3MessageMgr::~N3MessageMgr()
  /* [0x0003:0x0004b658] */ static  class N3MessageMgr * m_cpSelf
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ bool m_bOK
    /* this+0x20 */ class std::map<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> > > m_ObjContainer

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class N3MessageQueue {
    *
  public bool isOK()
  public void * GetEventObj()
  public void N3MessageQueue::Put(const unsigned int, const unsigned int, const unsigned int)
    public class std::tr1::tuple<bool,unsigned int const ,unsigned int const ,unsigned int const ,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> N3MessageQueue::Get()
  public void Init()
  public void N3MessageQueue(const class N3MessageQueue &)
  public void N3MessageQueue::N3MessageQueue()
  public void N3MessageQueue::~N3MessageQueue()
  public class N3MessageQueue & operator=(const class N3MessageQueue &)
    /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ class std::deque<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > m_Queue

  /* this+0x34 */ void * m_hSemaphore
  /* this+0x38 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3MessageQueue::lcData {
  /* this+0x0 */ unsigned int m_Message
  /* this+0x4 */ unsigned int m_wParam
  /* this+0x8 */ unsigned int m_lParam
  public void lcData(const unsigned int, const unsigned int, const unsigned int)
  public void lcData()
}

class N3ODBCCtrl {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ void * m_hEnv
  /* this+0xc */ void * m_hDbc
  /* this+0x10 */ bool m_bConnect
  private bool N3ODBCCtrl::Init()
  public bool isOK()
  public bool N3ODBCCtrl::Connect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void Disconnect()
  public void * operator void *()
  public const bool isConnect()
  public void N3ODBCCtrl::OutputErrorString(const short, void * const, const char *, const int, const char *)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetErrorString(const short, void * const)
  public void N3ODBCCtrl(const class N3ODBCCtrl &)
  public void N3ODBCCtrl::N3ODBCCtrl()
  public void N3ODBCCtrl::~N3ODBCCtrl()
  public class N3ODBCCtrl & operator=(const class N3ODBCCtrl &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3ODBCHandler {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class N3ODBCCtrl & m_vcODBCCtrl
  /* this+0xc */ void * m_hStmt
  private bool N3ODBCHandler::Init()
  public bool isOK()
  public short N3ODBCHandler::ExecDirect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public short UnBind()
  public short N3ODBCHandler::BindCol(unsigned short, short, void *, long, long *)
  public short BindParameter(unsigned short, short, short, short, unsigned long, short, void *, long, long *)
  public short GetData(unsigned short, short, void *, long, long *)
  public short CloseCursor()
  public short PutData(void *, long)
  public short N3ODBCHandler::Fetch()
  public short ParamData(void * *)
  public short MoreResults()
  public void * operator void *()
  public void N3ODBCHandler::OutputErrorString(const char *, const int, const char *)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetErrorString()
  public void N3ODBCHandler(const class N3ODBCHandler &)
  public void N3ODBCHandler::N3ODBCHandler(class N3ODBCCtrl &)
  public void N3ODBCHandler::~N3ODBCHandler()
  public void * __vecDelDtor(unsigned int)
}

class N3Object {
    *
    public unsigned int GetMyID()
  public void N3Object(const class N3Object &)
  public void N3Object::N3Object()
  public class N3Object & operator=(const class N3Object &)
  public void N3Object::~N3Object()
  /* this+0x4 */ const unsigned int m_MyID
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3Scheduler<C2CharacterServerClient> {
    *
    public void N3Scheduler<C2CharacterServerClient>::Process(class C2CharacterServerClient *)
  public void N3Scheduler<C2CharacterServerClient>::Insert(const class std::tr1::shared_ptr<N3SchedulerTask<C2CharacterServerClient> > &)
  public void N3Scheduler<C2CharacterServerClient>::Init()
  public bool IsSchedul(const unsigned long)
  public void N3Scheduler<C2CharacterServerClient>::Delete(const unsigned long)
  public void N3Scheduler<C2CharacterServerClient>(const class N3Scheduler<C2CharacterServerClient> &)
  public void N3Scheduler<C2CharacterServerClient>()
  public void N3Scheduler<C2CharacterServerClient>::~N3Scheduler<C2CharacterServerClient>()
      /* this+0x4 */ class std::multiset<std::tr1::shared_ptr<N3SchedulerTask<C2CharacterServerClient> >,N3Scheduler<C2CharacterServerClient>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<C2CharacterServerClient> > > > m_Tasks

  public class N3Scheduler<C2CharacterServerClient> & operator=(const class N3Scheduler<C2CharacterServerClient> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3Scheduler<C2CharacterServerClient>::Delete::__l2::CTaskCompare {
}

class N3Scheduler<C2CharacterServerClient>::lcTaskPriority {
  public bool operator()(const class std::tr1::shared_ptr<N3SchedulerTask<C2CharacterServerClient> > &, const class std::tr1::shared_ptr<N3SchedulerTask<C2CharacterServerClient> > &)
}

class N3Scheduler<C2ClientMgr> {
    *
    public void N3Scheduler<C2ClientMgr>::Process(class C2ClientMgr *)
  public void N3Scheduler<C2ClientMgr>::Insert(const class std::tr1::shared_ptr<N3SchedulerTask<C2ClientMgr> > &)
  public void Init()
  public bool IsSchedul(const unsigned long)
  public void Delete(const unsigned long)
  public void N3Scheduler<C2ClientMgr>(const class N3Scheduler<C2ClientMgr> &)
  public void N3Scheduler<C2ClientMgr>()
  public void N3Scheduler<C2ClientMgr>::~N3Scheduler<C2ClientMgr>()
      /* this+0x4 */ class std::multiset<std::tr1::shared_ptr<N3SchedulerTask<C2ClientMgr> >,N3Scheduler<C2ClientMgr>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<C2ClientMgr> > > > m_Tasks

  public class N3Scheduler<C2ClientMgr> & operator=(const class N3Scheduler<C2ClientMgr> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3Scheduler<C2ClientMgr>::lcTaskPriority {
  public bool operator()(const class std::tr1::shared_ptr<N3SchedulerTask<C2ClientMgr> > &, const class std::tr1::shared_ptr<N3SchedulerTask<C2ClientMgr> > &)
}

class N3Scheduler<C2InterServerClient> {
    *
    public void N3Scheduler<C2InterServerClient>::Process(class C2InterServerClient *)
  public void N3Scheduler<C2InterServerClient>::Insert(const class std::tr1::shared_ptr<N3SchedulerTask<C2InterServerClient> > &)
  public void N3Scheduler<C2InterServerClient>::Init()
  public bool IsSchedul(const unsigned long)
  public void N3Scheduler<C2InterServerClient>::Delete(const unsigned long)
  public void N3Scheduler<C2InterServerClient>(const class N3Scheduler<C2InterServerClient> &)
  public void N3Scheduler<C2InterServerClient>()
  public void N3Scheduler<C2InterServerClient>::~N3Scheduler<C2InterServerClient>()
      /* this+0x4 */ class std::multiset<std::tr1::shared_ptr<N3SchedulerTask<C2InterServerClient> >,N3Scheduler<C2InterServerClient>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<C2InterServerClient> > > > m_Tasks

  public class N3Scheduler<C2InterServerClient> & operator=(const class N3Scheduler<C2InterServerClient> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3Scheduler<C2InterServerClient>::Delete::__l2::CTaskCompare {
}

class N3Scheduler<C2InterServerClient>::lcTaskPriority {
  public bool operator()(const class std::tr1::shared_ptr<N3SchedulerTask<C2InterServerClient> > &, const class std::tr1::shared_ptr<N3SchedulerTask<C2InterServerClient> > &)
}

class N3SchedulerTask<C2CharacterServerClient> {
    *
  /* this+0x4 */ const unsigned long m_Identity
  /* this+0x8 */ unsigned long m_Time
  public unsigned long GetExecuteTime()
  public unsigned long GetIdentity()
  public bool N3SchedulerTask<C2CharacterServerClient>::operator()(class C2CharacterServerClient *)
  private void N3SchedulerTask<C2CharacterServerClient>(const class N3SchedulerTask<C2CharacterServerClient> &)
  private void N3SchedulerTask<C2CharacterServerClient>()
  public void N3SchedulerTask<C2CharacterServerClient>(const unsigned long, const unsigned long)
  public void N3SchedulerTask<C2CharacterServerClient>::~N3SchedulerTask<C2CharacterServerClient>()
  private class N3SchedulerTask<C2CharacterServerClient> & operator=(class N3SchedulerTask<C2CharacterServerClient> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3SchedulerTask<C2ClientMgr> {
    *
  /* this+0x4 */ const unsigned long m_Identity
  /* this+0x8 */ unsigned long m_Time
  public unsigned long GetExecuteTime()
  public unsigned long GetIdentity()
  public bool N3SchedulerTask<C2ClientMgr>::operator()(class C2ClientMgr *)
  private void N3SchedulerTask<C2ClientMgr>(const class N3SchedulerTask<C2ClientMgr> &)
  private void N3SchedulerTask<C2ClientMgr>()
  public void N3SchedulerTask<C2ClientMgr>(const unsigned long, const unsigned long)
  public void N3SchedulerTask<C2ClientMgr>::~N3SchedulerTask<C2ClientMgr>()
  private class N3SchedulerTask<C2ClientMgr> & operator=(class N3SchedulerTask<C2ClientMgr> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3SchedulerTask<C2InterServerClient> {
    *
  /* this+0x4 */ const unsigned long m_Identity
  /* this+0x8 */ unsigned long m_Time
  public unsigned long GetExecuteTime()
  public unsigned long GetIdentity()
  public bool N3SchedulerTask<C2InterServerClient>::operator()(class C2InterServerClient *)
  private void N3SchedulerTask<C2InterServerClient>(const class N3SchedulerTask<C2InterServerClient> &)
  private void N3SchedulerTask<C2InterServerClient>()
  public void N3SchedulerTask<C2InterServerClient>(const unsigned long, const unsigned long)
  public void N3SchedulerTask<C2InterServerClient>::~N3SchedulerTask<C2InterServerClient>()
  private class N3SchedulerTask<C2InterServerClient> & operator=(class N3SchedulerTask<C2InterServerClient> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3SyncObject {
    *
  public void N3SyncObject(const class N3SyncObject &)
  public void N3SyncObject::N3SyncObject(struct _RTL_CRITICAL_SECTION &)
  public void N3SyncObject::~N3SyncObject()
  public class N3SyncObject & operator=(const class N3SyncObject &)
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION & m_CS
  public void * __vecDelDtor(unsigned int)
}

class N3Thread {
    *
  public const bool isOK()
  public bool N3Thread::Begin()
  public void N3Thread::End()
  public void N3Thread::Resume()
  public void Suspend()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetName()
  public unsigned long N3Thread::SetThreadAffinityMask(const unsigned long)
  public void N3Thread(const class N3Thread &)
  public void N3Thread::N3Thread(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void N3Thread::~N3Thread()
  public class N3Thread & operator=(const class N3Thread &)
  private static unsigned int N3Thread::ThreadFunctionCaller(void *)
  private unsigned int ThreadFunction()
  private void PostThreadQuitMessage()
  /* this+0x4 */ unsigned long m_ThreadID
  /* this+0x8 */ bool m_bOK
    /* this+0xc */ enum N3Thread::enumState m_State
  /* this+0x10 */ void * m_hThread
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name

  public void * __vecDelDtor(unsigned int)
}

class NAsyncDBMgr {
  NObject, offset = 0x0

  NInter, offset = 0x24

    /* this+0x28 */ const int MAX_ASYNCDB_WORK
  /* this+0x2c */ const int MAX_TASK_NUM_PER_PROCESSLOOP
  /* [0x0003:0x0004b5f4] */ static  class NAsyncDBMgr * m_cpSelf
  /* this+0x30 */ bool m_bOK
  /* this+0x34 */ class NAsyncDBRequestCircularQueue * m_cpRequestCircularQueue
  /* this+0x38 */ class NAsyncDBResponseCircularQueue * m_cpReponseCircularQueue
  /* this+0x3c */ class NInterMessageQueue m_MessageQueue

      /* this+0x6c */ class std::vector<NAsyncDBThread *,std::allocator<NAsyncDBThread *> > m_WorkThreadContainer

  /* this+0x7c */ int m_WorkThreadGroupID
  private bool NAsyncDBMgr::Create(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private void NAsyncDBMgr::Destory()
  private void NAsyncDBMgr::ProcessMessage()
  private void NAsyncDBMgr::ProcessDBWork(class NAsyncDBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_SAVE_ALL(class CSaveAllADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_LogonPermit(class CLogonPermitADBWork * const)
  private void ProcessDBWork_SAVE_SKILL(class CSaveSkillADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_LOAD_STORE(class CLoadStoreADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_SAVE_STORE(class CSaveStoreADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_LOAD_CART(class CLoadCartADBWork * const)
  private void ProcessDBWork_SAVE_CART(class CSaveCartADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_MERCENARY_CREATE(class CMercenaryCreateADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_MERCENARY_DELETE(class CMercenaryDeleteADBWork * const)
  private void ProcessDBWork_SAVE_EFFECTIVEINFO(class CSaveEffectiveInfoADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_Skill3rdUpdate(class CSkill3rdUpdateADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_Skill3rdReset(class CSkill3rdResetADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_ChangeJob(class CChangeJobADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_TranscendentJob(class CTranscendentJobADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_Effect3rdUpdateAll(class CEffect3rdUpdateAllADBWork * const)
  private void ProcessDBWork_LoadCharName(class CLoadCharNameADBWork *)
  private void ProcessDBWork_PartyBookingInsert(class CPartyBookingInsertADBWork * const)
  private void ProcessDBWork_PartyBookingDelete(class CPartyBookingDeleteADBWork * const)
  private void ProcessDBWork_PartyBookingUpdate(class CPartyBookingUpdateADBWork * const)
  private void ProcessDBWork_Elemenal_Create(class CElementalCreateADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_Elemenal_Delete(class CElementalDeleteADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_InsertCouple(class CInsertCoupleADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_InsertFamilyADBWork(class CInsertFamilyADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_DeleteFamilyADBWork(class CDeleteFamilyADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_DeleteCoupleDBWork(class CDeleteCoupleADBWork * const)
  private void NAsyncDBMgr::ProcessDBWork_LoadWaprInfoDBWork(class CLoadWarpInfoADBWork * const)
  public const bool NAsyncDBMgr::isOK()
  public bool NAsyncDBMgr::Start()
  public void NAsyncDBMgr::Stop()
  public void NAsyncDBMgr::Process()
  public bool NAsyncDBMgr::RequestWork(class NAsyncDBWork *)
  public class NAsyncDBWork * ResponseWork()
  public int GetRequestWorkNum()
  public void NAsyncDBMgr::PostInterMessage(const unsigned int, const unsigned long, const int, const int, const int)
  public bool NAsyncDBMgr::PeekInterMessage(const unsigned long, unsigned int &, int &, int &, int &, const bool)
  public static bool NAsyncDBMgr::CreateInstance(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public static void NAsyncDBMgr::DestoryInstance()
  public void NAsyncDBMgr(const class NAsyncDBMgr &)
  private void NAsyncDBMgr::NAsyncDBMgr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private void NAsyncDBMgr::~NAsyncDBMgr()
  private void * __vecDelDtor(unsigned int)
}

class NAsyncDBPacketRecorder {
    *
  /* [0x0000:0x00000000] */ static  class NAsyncDBPacketRecorder * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x20 */ char[0x104] m_szFileName
  public const bool isOK()
  public const bool isCaptureAID(const unsigned long)
  public void NewFile()
  public void Write(const unsigned char *, const int)
  public static class NAsyncDBPacketRecorder * GetObj()
  public static bool CreateInstance()
  public static void DestoryInstance()
  public void NAsyncDBPacketRecorder(const class NAsyncDBPacketRecorder &)
  private void NAsyncDBPacketRecorder()
  private void ~NAsyncDBPacketRecorder()
  public class NAsyncDBPacketRecorder & operator=(const class NAsyncDBPacketRecorder &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class NAsyncDBRequestCircularQueue {
    *
    /* this+0x4 */ const int m_MaxEleNum
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x20 */ bool m_bOK
  /* this+0x24 */ void * m_hSemaphore
  /* this+0x28 */ int m_DuplicateRefCnt
      /* this+0x2c */ class std::list<NAsyncDBWork *,std::allocator<NAsyncDBWork *> > m_Container

      /* this+0x38 */ class std::vector<unsigned int,std::allocator<unsigned int> > m_SerialCheckContainer

  private bool NAsyncDBRequestCircularQueue::Create()
  private void NAsyncDBRequestCircularQueue::Destory()
  public const bool NAsyncDBRequestCircularQueue::isOK()
  public const bool NAsyncDBRequestCircularQueue::Write3(class NAsyncDBWork * const)
  public class NAsyncDBWork * NAsyncDBRequestCircularQueue::Read3()
  public const void NAsyncDBRequestCircularQueue::Complete3(const class NAsyncDBWork *)
  public void * const GetEventObj()
  public const int GetSize()
  public void NAsyncDBRequestCircularQueue(const class NAsyncDBRequestCircularQueue &)
  public void NAsyncDBRequestCircularQueue::NAsyncDBRequestCircularQueue(const int)
  public void NAsyncDBRequestCircularQueue::~NAsyncDBRequestCircularQueue()
  public void * __vecDelDtor(unsigned int)
}

class NAsyncDBResponseCircularQueue {
  templateNCircularQueue<NAsyncDBWork *>, offset = 0x0

  /* this+0x20 */ bool m_bOK
  /* this+0x24 */ struct _RTL_CRITICAL_SECTION m_CS

  public const bool NAsyncDBResponseCircularQueue::isOK()
  public bool NAsyncDBResponseCircularQueue::isFull()
  public bool NAsyncDBResponseCircularQueue::isEmpty()
  public bool NAsyncDBResponseCircularQueue::Write(class NAsyncDBWork * const)
  public bool NAsyncDBResponseCircularQueue::Read(class NAsyncDBWork * &)
  public bool NAsyncDBResponseCircularQueue::View(class NAsyncDBWork * &)
  public void NAsyncDBResponseCircularQueue::Clear()
  public unsigned int NAsyncDBResponseCircularQueue::GetLastWriteTime()
  public int NAsyncDBResponseCircularQueue::GetNum()
  public int NAsyncDBResponseCircularQueue::GetMaxNum()
  public void NAsyncDBResponseCircularQueue(const class NAsyncDBResponseCircularQueue &)
  public void NAsyncDBResponseCircularQueue::NAsyncDBResponseCircularQueue(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void NAsyncDBResponseCircularQueue::~NAsyncDBResponseCircularQueue()
  public void * __vecDelDtor(unsigned int)
}

class NAsyncDBThread {
  NObject, offset = 0x0

  NThread, offset = 0x24

  NInter, offset = 0x54

  /* this+0x58 */ bool m_bOK
  /* this+0x5c */ class NTPMessageQueue m_MessageQueue

  /* this+0x8c */ void * m_hMessageEvent
  /* this+0x90 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_ODBCConnectionStr

  /* this+0xac */ class NODBCCtrl m_ODBCCtrl

  /* this+0xbc */ const unsigned int m_hMotherInter
  /* this+0xc0 */ class NAsyncDBRequestCircularQueue * const m_vcpRequestCircularQueue
  /* this+0xc4 */ class NAsyncDBResponseCircularQueue * const m_vcpReponseCircularQueue
    /* this+0xc8 */ enum NAsyncDBThread::enumState m_State
  private bool NAsyncDBThread::Create()
  private void NAsyncDBThread::Destory()
  public const bool NAsyncDBThread::isOK()
  public bool NAsyncDBThread::Start()
  public void NAsyncDBThread::Stop()
  public void NAsyncDBThread::PostInterMessage(const unsigned int, const unsigned long, const int, const int, const int)
  private bool NAsyncDBThread::PeekInterMessage(const unsigned long, unsigned int &, int &, int &, int &, const bool)
  private unsigned int NAsyncDBThread::ThreadFunction()
  private const bool NAsyncDBThread::ThreadFunction_Message()
  private void NAsyncDBThread::PostThreadQuitMessage()
  public void NAsyncDBThread(const class NAsyncDBThread &)
  public void NAsyncDBThread::NAsyncDBThread(const unsigned int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, class NAsyncDBRequestCircularQueue * const, class NAsyncDBResponseCircularQueue * const)
  public void NAsyncDBThread::~NAsyncDBThread()
  public void * __vecDelDtor(unsigned int)
}

class NAsyncDBWork {
    *
        /* this+0x4 */ const enum NAsyncDBWork::enumType m_Type
  /* this+0x8 */ unsigned int m_ID
  /* this+0xc */ unsigned long m_StartTM
  /* this+0x10 */ int m_Identity
  private bool ExecQuery(class NODBCCtrl &)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::SaveBodyItem(class NODBCCtrl &, const unsigned long, const unsigned char *, const int)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::SaveCharacterInfo(class NODBCCtrl &, const unsigned long, const char *, struct CHARINFO_TO_CHARACTERDB &)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::SaveStoreItem(class NODBCCtrl &, const unsigned long, const unsigned char *, const int)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::SaveCartItem(class NODBCCtrl &, const unsigned long, const unsigned char *, const int)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::SaveQuestEvent(class NODBCCtrl &, const unsigned long, const unsigned char *, const int, const unsigned char *, const int, const unsigned char *, const int, const unsigned char *, const int)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::Skill3rd_Update(class NODBCCtrl &, const int, const int, const int, const int, const int, const int)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::SaveEffect3rd(class NODBCCtrl &, const unsigned long, class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> >)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::UpdateHomunEffect(class NODBCCtrl &, const unsigned long, const class std::vector<Effect3rd::tagEffect3rdDBFmt,std::allocator<Effect3rd::tagEffect3rdDBFmt> > &)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::DeleteHomunEffectAll(class NODBCCtrl &, const unsigned long)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::SaveHomunSkill(class NODBCCtrl &, const unsigned long, const class std::map<unsigned short,HO_SKINFO,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HO_SKINFO> > > &)
  protected enum NAsyncDBWork::enumRETURN NAsyncDBWork::SaveHomunData(class NODBCCtrl &, const unsigned long, const class HomunDataStuff::CHomunData &)
  public const enum NAsyncDBWork::enumType GetType()
  public const unsigned int GetID()
  public const unsigned long GetStartTM()
  public const int GetIdentity()
  public void NAsyncDBWork::Init(const unsigned int)
  public void NAsyncDBWork(const class NAsyncDBWork &)
  public void NAsyncDBWork::NAsyncDBWork(const enum NAsyncDBWork::enumType)
  public void NAsyncDBWork::~NAsyncDBWork()
  public void * __vecDelDtor(unsigned int)
}

class NCriticalErrorLog {
  NFileLog, offset = 0x0

  public bool isOK()
  public static bool NCriticalErrorLog::CreateInstance()
  public static void NCriticalErrorLog::DestroyInstance()
  private void NCriticalErrorLog(const class NCriticalErrorLog &)
  private void NCriticalErrorLog::NCriticalErrorLog()
  private class NCriticalErrorLog & operator=(const class NCriticalErrorLog &)
  private void NCriticalErrorLog::~NCriticalErrorLog()
  /* [0x0003:0x0004b644] */ static  class NCriticalErrorLog * m_cpSelf
  /* this+0x828 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct NEIGHBORHOOD_SECTION {
  /* this+0x0 */ class std::vector<CCharacter *,std::allocator<CCharacter *> > *[0x4] section
}

struct NEO_PACKAGEITEM::BaseItem {
  /* this+0x0 */ int ITID
  /* this+0x4 */ int Cnt
  /* this+0x8 */ int HireHour
  /* this+0xc */ bool bBroadcasting
  /* this+0xd */ bool bGUID
  public void BaseItem()
  public void BaseItem(const int, const int, const int, const bool, const bool)
}

class NEO_PACKAGEITEM::Box {
  public void NEO_PACKAGEITEM::Box::Box(const class NEO_PACKAGEITEM::Box &)
  public void NEO_PACKAGEITEM::Box::Box()
  /* this+0x0 */ const unsigned int BoxID
  public bool operator()(const struct NEO_PACKAGEITEM::InItem &, const struct NEO_PACKAGEITEM::InItem &)
  /* this+0x4 */ int Gift_Number
  /* this+0x8 */ int MaxRandomRate
  /* this+0xc */ class std::vector<NEO_PACKAGEITEM::InItem,std::allocator<NEO_PACKAGEITEM::InItem> > ItemList

  public void NEO_PACKAGEITEM::Box::~Box()
  public void * __vecDelDtor(unsigned int)
}

class NEO_PACKAGEITEM::CNeoPackageItem {
  public bool IsCreateInstance()
  public static bool NEO_PACKAGEITEM::CNeoPackageItem::CreateInstance()
  public static void NEO_PACKAGEITEM::CNeoPackageItem::DestroyInstance()
  public void NEO_PACKAGEITEM::CNeoPackageItem::InsertItem(const int, const char *, const struct NEO_PACKAGEITEM::InItem &)
  public enum NEO_PACKAGEITEM::RESULT_VALUES NEO_PACKAGEITEM::CNeoPackageItem::Init()
  public bool NEO_PACKAGEITEM::CNeoPackageItem::IsPackageItem(const int)
  public bool NEO_PACKAGEITEM::CNeoPackageItem::ConvertLua_AddPackageItem(const int, struct NEO_PACKAGEITEM::InItem *, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > NEO_PACKAGEITEM::CNeoPackageItem::UnPack_PackageItem(const int, class NEO_PACKAGEITEM::CPseudoRandom &)
  public const int GetTotalRandom(const int)
  public int NEO_PACKAGEITEM::CNeoPackageItem::GetMaxItem(const int)
  public int NEO_PACKAGEITEM::CNeoPackageItem::GetMaxWeight(const int)
  public bool NEO_PACKAGEITEM::CNeoPackageItem::IsExistLuaFile()
  public bool NEO_PACKAGEITEM::CNeoPackageItem::MakeLuaFile2()
  public void NEO_PACKAGEITEM::CNeoPackageItem::PackageListClear()
  public int PackageItemCount()
  public bool NEO_PACKAGEITEM::CNeoPackageItem::SaveGift_NumberInfo()
  public void NEO_PACKAGEITEM::CNeoPackageItem::SetGiftNumber(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &, const int, const int)
  public void NEO_PACKAGEITEM::CNeoPackageItem::UpdatePackageItem(const unsigned short, const class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > &)
  /* this+0x0 */ class NEO_PACKAGEITEM::CPseudoRandom m_Random2

  /* this+0x4 */ bool m_bCreateInstance
  /* [0x0003:0x0004b5f0] */ static  class NEO_PACKAGEITEM::CNeoPackageItem * m_cpSelf
  public void CNeoPackageItem(const class NEO_PACKAGEITEM::CNeoPackageItem &)
  private void NEO_PACKAGEITEM::CNeoPackageItem::CNeoPackageItem()
  private void NEO_PACKAGEITEM::CNeoPackageItem::~CNeoPackageItem()
  /* this+0x8 */ class std::map<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> > > m_PackageList

  private void NEO_PACKAGEITEM::CNeoPackageItem::DoReset()
  private bool NEO_PACKAGEITEM::CNeoPackageItem::DoMaxRandom()
  private void DoSort()
  private void NEO_PACKAGEITEM::CNeoPackageItem::DoGetMaxCount()
  private void NEO_PACKAGEITEM::CNeoPackageItem::DoGetMaxWeight()
  private void DoGetMaxKind()
  private void NEO_PACKAGEITEM::CNeoPackageItem::convertLua(struct _iobuf *)
  private void UnPack_RandomPackageItem(const class NEO_PACKAGEITEM::Box &, const unsigned int, class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > &)
  private void NEO_PACKAGEITEM::CNeoPackageItem::UnPack_RandomPackageItemV2(const class NEO_PACKAGEITEM::Box &, const unsigned int, class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > &)
  private void NEO_PACKAGEITEM::CNeoPackageItem::UnPack_MustPackageItem(const class NEO_PACKAGEITEM::Box &, class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > &)
  public class NEO_PACKAGEITEM::CNeoPackageItem & operator=(const class NEO_PACKAGEITEM::CNeoPackageItem &)
  private void * __vecDelDtor(unsigned int)
}

class NEO_PACKAGEITEM::CNeoPackageItem_Lua {
  public void NEO_PACKAGEITEM::CNeoPackageItem_Lua::CNeoPackageItem_Lua()
  public void ~CNeoPackageItem_Lua()
  public bool NEO_PACKAGEITEM::CNeoPackageItem_Lua::Load_PackageItem()
  public bool NEO_PACKAGEITEM::CNeoPackageItem_Lua::Load_Gift_NumberInfo()
  public void * __vecDelDtor(unsigned int)
}

class NEO_PACKAGEITEM::CPseudoRandom {
  public void CPseudoRandom(const unsigned long)
  public void ~CPseudoRandom()
  public int operator()()
  /* this+0x0 */ unsigned long m_seed
  public void __dflt_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct NEO_PACKAGEITEM::InItem {
  NEO_PACKAGEITEM::BaseItem, offset = 0x0

  /* this+0x10 */ int Rndrate
  /* this+0x14 */ int Gift_Number
  public void InItem()
}

struct NEO_PACKAGEITEM::Package {
  /* this+0x0 */ int nGetMaxCount
  /* this+0x4 */ int nTotalWeight
  /* this+0x8 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > > BoxList

  public class NEO_PACKAGEITEM::Box * NEO_PACKAGEITEM::Package::GetBox(const unsigned int)
  public void Package(const struct NEO_PACKAGEITEM::Package &)
  public void Package()
  public void NEO_PACKAGEITEM::Package::~Package()
  public struct NEO_PACKAGEITEM::Package & operator=(const struct NEO_PACKAGEITEM::Package &)
  public void * __vecDelDtor(unsigned int)
}

struct NEO_PACKAGEITEM::ProvideItem {
  NEO_PACKAGEITEM::BaseItem, offset = 0x0

  public void ProvideItem(const int, const int, const int, const bool, const bool, const unsigned int)
  /* this+0x10 */ unsigned int BoxID
}

struct NEO_PACKAGEITEM::`anonymous-namespace'::Randomcmp {
  public const bool operator()(const int, const int)
}

class NFileLog {
    *
  public bool isOK()
  public void NFileLog::SetOutput(const bool)
  public bool NFileLog::GetOutput()
  public void NFileLog::WriteFmt(const char *, const int, const char *, <NoType>)
  private bool NFileLog::Create(const char *, const char *)
  private void NFileLog::DeleteLogFile(const char *, const char *, const int)
  private void MakeCurLogFileName(char *, const int, const unsigned int)
  private unsigned int GetLastSqeucenCnt()
  public void NFileLog(const class NFileLog &)
  public void NFileLog::NFileLog(const char *, const char *, const bool)
  public class NFileLog & operator=(const class NFileLog &)
  public void NFileLog::~NFileLog()
    /* this+0x4 */ bool m_bOK
  /* this+0x5 */ bool m_bOutput
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x20 */ char[0x400] m_szLogDir
  /* this+0x420 */ char[0x400] m_szLogFilePrefix
  /* this+0x820 */ unsigned int m_SequenceFileCnt
  /* this+0x824 */ int m_BytesOfWritten
  public void * __vecDelDtor(unsigned int)
}

class NIDAllocator {
    *
  /* [0x0003:0x0004b5fc] */ static  class NIDAllocator * m_cpSelf
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ bool m_bOK
        /* this+0x20 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NIDAllocator::NIDGenerator *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NIDAllocator::NIDGenerator *> > > m_GroupContainer

  /* this+0x30 */ unsigned int m_LastAlloGroupNum
  private bool NIDAllocator::Create()
  private void NIDAllocator::Destory()
  public bool NIDAllocator::isOK()
  public bool NIDAllocator::RegisterGroup(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const unsigned int, const unsigned int)
  public unsigned int NIDAllocator::Alloc(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void NIDAllocator::Free(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const unsigned int)
  public const int NIDAllocator::GetGroupID(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public const int NIDAllocator::GetGroupID(const unsigned int)
  public static class NIDAllocator * NIDAllocator::GetObj()
  public static bool NIDAllocator::CreateInstance()
  public static void NIDAllocator::DestoryInstance()
  public void NIDAllocator(const class NIDAllocator &)
  protected void NIDAllocator::NIDAllocator()
  protected void NIDAllocator::~NIDAllocator()
  public class NIDAllocator & operator=(const class NIDAllocator &)
  public void __local_vftable_ctor_closure()
  protected void * __vecDelDtor(unsigned int)
}

class NIDAllocator::NIDGenerator {
    *
  /* this+0x4 */ const unsigned int m_MinID
  /* this+0x8 */ const unsigned int m_MaxID
  /* this+0xc */ const unsigned char m_GroupID
        /* this+0x10 */ class std::queue<unsigned int,std::deque<unsigned int,std::allocator<unsigned int> > > m_StandbyIDqueue

  /* this+0x28 */ class std::map<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> > > m_IDContainer

  /* this+0x38 */ bool m_bOK
  public bool NIDAllocator::NIDGenerator::isOK()
  public unsigned int NIDAllocator::NIDGenerator::Alloc()
  public void NIDAllocator::NIDGenerator::Free(const unsigned int)
  public const int GetGroupID()
  public void NIDGenerator(const class NIDAllocator::NIDGenerator &)
  public void NIDAllocator::NIDGenerator::NIDGenerator(const unsigned int, const unsigned int, const unsigned int)
  public void NIDAllocator::NIDGenerator::~NIDGenerator()
  public void * __vecDelDtor(unsigned int)
}

struct NIPAddapter::__l2::threadBuffer {
}

class NIPAddr {
    *
  public static bool IsPrivateIP(unsigned long)
  public static unsigned long GetHostIP(bool)
  public unsigned long operator unsigned long()
  public void Set(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void Set(const unsigned long)
  public void NIPAddr(const class NIPAddr &)
  public void NIPAddr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void NIPAddr::NIPAddr(const unsigned long)
  public void NIPAddr()
  public void NIPAddr::~NIPAddr()
  /* this+0x4 */ unsigned long m_IPAddr
  public class NIPAddr & operator=(const class NIPAddr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NInter {
    *
    public void PostInterMessage(const unsigned int, const unsigned long, const int, const int, const int)
  public bool PeekInterMessage(const unsigned long, unsigned int &, int &, int &, int &, const bool)
  public void NInter(const class NInter &)
  public void NInter::NInter()
  public void NInter::~NInter()
  public class NInter & operator=(const class NInter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NInterMessageQueue {
    *
    /* this+0x4 */ class std::priority_queue<NInterMessageQueue::Message,std::vector<NInterMessageQueue::Message,std::allocator<NInterMessageQueue::Message> >,NInterMessageQueue::Message::Less> m_queue

  /* this+0x18 */ struct _RTL_CRITICAL_SECTION m_CS

  public void NInterMessageQueue::Post(const unsigned int, const unsigned long, const int, const int, const int)
  public bool NInterMessageQueue::Peek(const unsigned long, unsigned int &, int &, int &, int &, const bool)
  public void NInterMessageQueue(const class NInterMessageQueue &)
  public void NInterMessageQueue::NInterMessageQueue()
  public void NInterMessageQueue::~NInterMessageQueue()
  public class NInterMessageQueue & operator=(const class NInterMessageQueue &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NInterMessageQueue::Message {
  /* this+0x0 */ unsigned int m_FromInter
  /* this+0x4 */ int m_Message
  /* this+0x8 */ int m_wParam
  /* this+0xc */ int m_lParam
  /* this+0x10 */ unsigned long m_ExecTimeMS
    public void Message(const unsigned int, const unsigned long, const int, const int, const int)
  public void Message()
}

class NInterMessageQueue::Message::Less {
  public bool operator()(const class NInterMessageQueue::Message &, const class NInterMessageQueue::Message &)
}

class NInterMessageQueueN {
    *
        /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ class std::list<NInterMessageQueueN::Message,std::allocator<NInterMessageQueueN::Message> > m_Container

  public void Post(const unsigned int, const int, const int, const int)
  public bool Peek(unsigned int &, int &, int &, int &, const bool)
  public void NInterMessageQueueN(const class NInterMessageQueueN &)
  public void NInterMessageQueueN()
  public void ~NInterMessageQueueN()
  public class NInterMessageQueueN & operator=(const class NInterMessageQueueN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NInterMessageQueueN::Message {
  /* this+0x0 */ unsigned int m_FromInter
  /* this+0x4 */ int m_Message
  /* this+0x8 */ int m_wParam
  /* this+0xc */ int m_lParam
  public void Message(const unsigned int, const int, const int, const int)
  public void Message()
}

class NInterMessageSystem {
    *
  /* [0x0003:0x0004b600] */ static  class NInterMessageSystem * m_cpSelf
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ bool m_bOK
      /* this+0x20 */ class std::map<unsigned int,NInter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,NInter *> > > m_InterObjContainer

  public bool NInterMessageSystem::isOK()
  public bool NInterMessageSystem::Insert(const unsigned int, class NInter *)
  public void NInterMessageSystem::Remove(const unsigned int, class NInter *)
  public bool NInterMessageSystem::PostInterMessage(const unsigned int, const unsigned int, const unsigned long, const int, const int, const int)
  public static class NInterMessageSystem * NInterMessageSystem::GetObj()
  public static bool NInterMessageSystem::CreateInstance()
  public static void NInterMessageSystem::DestoryInstance()
  public void NInterMessageSystem(const class NInterMessageSystem &)
  protected void NInterMessageSystem::NInterMessageSystem()
  protected void NInterMessageSystem::~NInterMessageSystem()
  public class NInterMessageSystem & operator=(const class NInterMessageSystem &)
  public void __local_vftable_ctor_closure()
  protected void * __vecDelDtor(unsigned int)
}

class NLuaMonsterAI {
    *
      public void NLuaMonsterAI::InsertMSG_ATTACKED(const unsigned long, const int)
  public void NLuaMonsterAI::InsertMSG_DEAD(const unsigned long)
  public void InsertMSG_LOG()
  public void InsertMSG_TELEPORT(const int, const int, const char *)
  public void SetProcessFuncStep(const enum NLuaMonsterAI::enumProcessFuncStep)
  public enum NLuaMonsterAI::enumProcessFuncStep GetProcessFuncStep()
  public unsigned long GetProcessFuncStepTime()
  public struct lua_State * NLuaMonsterAI::GetStatePtr()
  public bool IsForceProcessing()
  public const int GetID()
  public const char * GetNamePtr()
  public const int GetRef()
  public unsigned long GetAID()
  public struct std::pair<bool,std::tr1::shared_ptr<LuaMonsterAIStuff::NMSG> > NLuaMonsterAI::GetAsyncMsg()
  public void Init(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, class NLuaThread *, const int)
  public void NLuaMonsterAI(const class NLuaMonsterAI &)
  private void NLuaMonsterAI::NLuaMonsterAI(const int, const unsigned long, const bool)
  private void NLuaMonsterAI::~NLuaMonsterAI()
      /* this+0x4 */ class std::list<std::tr1::shared_ptr<LuaMonsterAIStuff::NMSG>,std::allocator<std::tr1::shared_ptr<LuaMonsterAIStuff::NMSG> > > m_MessageQueue

    /* this+0x10 */ class NLuaThread * m_pThread
  /* this+0x14 */ int m_Ref
  /* this+0x18 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name

  /* this+0x34 */ const int m_ID
  /* this+0x38 */ class NLuaMonsterAI::NStep m_ProcFuncStep

  /* this+0x40 */ const unsigned long m_AID
  /* this+0x44 */ const bool m_bForceProcessing
  private void * __vecDelDtor(unsigned int)
}

class NLuaMonsterAI::NStep {
  public enum NLuaMonsterAI::enumProcessFuncStep Get()
  public void Set(enum NLuaMonsterAI::enumProcessFuncStep)
  public unsigned long GetTime()
  /* this+0x0 */ enum NLuaMonsterAI::enumProcessFuncStep m_Step
  /* this+0x4 */ unsigned long m_Time
  public void NStep()
  public void ~NStep()
  public void * __vecDelDtor(unsigned int)
}

class NLuaMonsterAIMgr {
    *
  public class NLuaState & GetLuaState()
  /* [0x0003:0x0004b61c] */ static  class NLuaMonsterAIMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class NLuaState m_LuaState

    /* [0x0002:0x00027c50] */ static  const struct NLuaMonsterAIMgr::tagLuaGlueFunc[0x0] m_LuaGlueFuncTable
      /* this+0x14 */ class std::map<int,NLuaMonsterAI *,std::less<int>,std::allocator<std::pair<int const ,NLuaMonsterAI *> > > m_AppContainer

  private bool NLuaMonsterAIMgr::Create()
  private void NLuaMonsterAIMgr::Destroy()
  private int NLuaMonsterAIMgr::GetNewAppID()
  private void NLuaMonsterAIMgr::AppResume(class NLuaMonsterAI *, const int)
  public int NLuaMonsterAIMgr::CreateApp(unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const bool)
  public void NLuaMonsterAIMgr::DestroyApp(const int)
  public bool isOK()
  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > NLuaMonsterAIMgr::Init()
  public void NLuaMonsterAIMgr::Process()
  public int NLuaMonsterAIMgr::GetUsedMemoryBytes()
  public class NLuaMonsterAI * NLuaMonsterAIMgr::GetAppPtr(const int)
  public void NLuaMonsterAIMgr::InsertMSG_ATTACKED(const int, const unsigned long, const int)
  public void NLuaMonsterAIMgr::InsertMSG_DEAD(const int, const unsigned long)
  public void InsertMSG_LOG(const int)
  public void InsertMSG_TELEPORT(const int, const int, const int, const char *)
  public void WriteLog()
  public static bool NLuaMonsterAIMgr::CreateInstance()
  public static void NLuaMonsterAIMgr::DestroyInstance()
  public void NLuaMonsterAIMgr(const class NLuaMonsterAIMgr &)
  private void NLuaMonsterAIMgr::NLuaMonsterAIMgr()
  private void NLuaMonsterAIMgr::~NLuaMonsterAIMgr()
  public class NLuaMonsterAIMgr & operator=(const class NLuaMonsterAIMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct NLuaMonsterAIMgr::tagLuaGlueFunc {
  /* this+0x0 */ function  * func
  /* this+0x4 */ const char * name
}

class NLuaState {
    *
  /* this+0x4 */ struct lua_State * m_pLuaState
  /* this+0x8 */ bool m_bOK
  private bool NLuaState::Create()
  private void NLuaState::Destroy()
  public bool isOK()
  public struct lua_State * operator struct lua_State *()
  public struct lua_State * operator()()
  public void NLuaState(const class NLuaState &)
  public void NLuaState::NLuaState()
  public void NLuaState::~NLuaState()
  public class NLuaState & operator=(const class NLuaState &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NLuaThread {
    *
  public bool isOK()
  public struct lua_State * operator struct lua_State *()
  public struct lua_State * GetStatePtr()
  public void NLuaThread(const class NLuaThread &)
  public void NLuaThread::NLuaThread(class NLuaState &)
  public void NLuaThread::~NLuaThread()
  /* this+0x4 */ struct lua_State * m_pLuaThread
  /* this+0x8 */ bool m_bOK
  private bool NLuaThread::Create(class NLuaState &)
  public class NLuaThread & operator=(const class NLuaThread &)
  public void * __vecDelDtor(unsigned int)
}

class NMemoryHelper {
    *
  public void * Get(const int)
  public int GetUsedBytes()
  public void NMemoryHelper(class NMemoryHelper &)
  public void NMemoryHelper(void *, const unsigned int)
  public void NMemoryHelper::~NMemoryHelper()
  public class NMemoryHelper & operator=(class NMemoryHelper &)
  /* this+0x4 */ unsigned char * m_pBuffer
  /* this+0x8 */ int m_maxbytes
  /* this+0xc */ int m_usedbytes
  public void * __vecDelDtor(unsigned int)
}

class NNetworkMgr {
    *
  public bool isOK()
  public unsigned int NNetworkMgr::GenerateCompletionKey()
  public void * GetIOCPHandle()
  public bool NNetworkMgr::Start()
  public void NNetworkMgr::Stop()
  private bool NNetworkMgr::Create()
  private void NNetworkMgr::Destroy()
  public static bool NNetworkMgr::CreateInstance()
  public static void NNetworkMgr::DestroyInstance()
  private void NNetworkMgr(class NNetworkMgr &)
  private void NNetworkMgr::NNetworkMgr()
  private void NNetworkMgr::~NNetworkMgr()
  private class NNetworkMgr & operator=(class NNetworkMgr &)
  /* [0x0003:0x0004b2e4] */ static  class NNetworkMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ void * m_hIOCP
  /* this+0xc */ class std::vector<NNetworkWorkThread *,std::allocator<NNetworkWorkThread *> > m_ThreadPool

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class NNetworkWorkThread {
  N3Thread, offset = 0x0

  N3Inter, offset = 0x30

  N3Object, offset = 0x34

    public bool NNetworkWorkThread::Start()
  public void NNetworkWorkThread::Stop()
  private bool NNetworkWorkThread::MessageDispatch()
  private unsigned int NNetworkWorkThread::ThreadFunction()
  private void NNetworkWorkThread::PostThreadQuitMessage()
  public void NNetworkWorkThread::Receive(const unsigned int, const unsigned int, const unsigned int)
  public void NNetworkWorkThread(const class NNetworkWorkThread &)
  public void NNetworkWorkThread::NNetworkWorkThread(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void NNetworkWorkThread::~NNetworkWorkThread()
  /* this+0x3c */ class N3MessageQueue m_MessageQueue

  public class NNetworkWorkThread & operator=(const class NNetworkWorkThread &)
  public void * __vecDelDtor(unsigned int)
}

class NODBCCtrl {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ void * m_hEnv
  /* this+0xc */ void * m_hDbc
  private bool NODBCCtrl::Init()
  public bool isOK()
  public bool NODBCCtrl::Connect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void NODBCCtrl::Disconnect()
  public void * operator void *()
  public void NODBCCtrl::OutputErrorString(const short, void * const, const char *, const int, const char *)
  public void NODBCCtrl(const class NODBCCtrl &)
  public void NODBCCtrl::NODBCCtrl()
  public void NODBCCtrl::~NODBCCtrl()
  public class NODBCCtrl & operator=(const class NODBCCtrl &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NODBCHandler {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class NODBCCtrl & m_vcODBCCtrl
  /* this+0xc */ void * m_hStmt
  private bool NODBCHandler::Init()
  public bool isOK()
  public short NODBCHandler::ExecDirect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public short UnBind()
  public short NODBCHandler::BindCol(unsigned short, short, void *, long, long *)
  public short NODBCHandler::BindParameter(unsigned short, short, short, short, unsigned long, short, void *, long, long *)
  public short GetData(unsigned short, short, void *, long, long *)
  public short CloseCursor()
  public short PutData(void *, long)
  public short NODBCHandler::Fetch()
  public short ParamData(void * *)
  public void * operator void *()
  public void NODBCHandler::OutputErrorString(const char *, const int, const char *)
  public void NODBCHandler(const class NODBCHandler &)
  public void NODBCHandler::NODBCHandler(class NODBCCtrl &)
  public void NODBCHandler::~NODBCHandler()
  public void * __vecDelDtor(unsigned int)
}

class NODBCHandlerEx {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ void * m_hStmt
  public bool isOK()
  public short ExecDirect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public short UnBind()
  public short BindCol(unsigned short, short, void *, long, long *)
  public short BindParameter(unsigned short, short, short, short, unsigned long, short, void *, long, long *)
  public short GetData(unsigned short, short, void *, long, long *)
  public short CloseCursor()
  public short PutData(void *, long)
  public short Fetch()
  public short ParamData(void * *)
  public void * operator void *()
  public void OutputErrorString(const char *, const int, const char *)
  public void NODBCHandlerEx(const class NODBCHandlerEx &)
  public void NODBCHandlerEx(void *)
  public void ~NODBCHandlerEx()
  public class NODBCHandlerEx & operator=(const class NODBCHandlerEx &)
  public void * __vecDelDtor(unsigned int)
}

struct NORMALITEM_EXTRAINFO {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ short count
  /* this+0x8 */ unsigned short WearState
}

struct NORMALITEM_EXTRAINFO2 {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ short count
  /* this+0x8 */ unsigned short WearState
  /* this+0xa */ struct EQUIPSLOTINFO slot

}

struct NORMAL_ITEMINFO_PC {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ short count
  /* this+0x4 */ struct SLOTINFO slot

}

struct NOTIFY_USER_POWER_SETTING {
  /* this+0x0 */ struct _GUID Guid

}

class NObject {
    *
  /* this+0x4 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strOBJname

  /* this+0x20 */ const unsigned int m_MyID
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetOBJName()
  public const unsigned int GetMyID()
  public void NObject(const class NObject &)
  public void NObject::NObject(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void NObject::~NObject()
  public void * __vecDelDtor(unsigned int)
}

class NOutputTextMgr {
  public bool isOK()
  public void NOutputTextMgr::Insert(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void NOutputTextMgr::InsertFmt(const char *, <NoType>)
  public unsigned int NOutputTextMgr::GetMaxLineCnt()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > NOutputTextMgr::GetText(const unsigned int)
  public static bool NOutputTextMgr::CreateInstance()
  public static void NOutputTextMgr::DestroyInstance()
  public void NOutputTextMgr(const class NOutputTextMgr &)
  private void NOutputTextMgr::NOutputTextMgr()
  private void NOutputTextMgr::~NOutputTextMgr()
  /* this+0x0 */ bool m_bOK
  /* this+0x4 */ unsigned int m_LineCnt
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS

  /* [0x0003:0x0004b654] */ static  class NOutputTextMgr * m_cpSelf
  /* this+0x20 */ class std::map<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > > m_Note

  public class NOutputTextMgr & operator=(const class NOutputTextMgr &)
  private void * __vecDelDtor(unsigned int)
}

struct NPCSKILLINFO {
  /* this+0x0 */ int status
  /* this+0x4 */ unsigned short SKID
  /* this+0x8 */ int level
  /* this+0xc */ int percent
  /* this+0x10 */ int casttime
  /* this+0x14 */ unsigned long cooldowntime
  /* this+0x18 */ int noDispel
  /* this+0x1c */ int ai_type
  /* this+0x20 */ int emoticon
  /* this+0x24 */ int chatNo
  /* this+0x28 */ int condition
  /* this+0x2c */ int value
}

struct NPC_CHAT_INFO {
  public void NPC_CHAT_INFO()
  /* this+0x0 */ unsigned long color
  /* this+0x4 */ char[0x100] chat
}

struct NPC_STATEINFO {
  /* this+0x0 */ unsigned long enemyAID
  /* this+0x4 */ unsigned long targetItemAID
  /* this+0x8 */ unsigned long waitStartTime
  /* this+0xc */ unsigned long reChargeTime
  /* this+0x10 */ unsigned long deadTime
}

class NPollTimer {
    *
  public void Init(unsigned long, unsigned long)
  public bool Timeout(const unsigned long)
  public void Reset(unsigned long, unsigned long)
  public void SetEnable(const bool, const unsigned long)
  public void NPollTimer(const class NPollTimer &)
  public void NPollTimer(unsigned long, unsigned long)
  public void ~NPollTimer()
  /* this+0x4 */ unsigned long m_NextTM
  /* this+0x8 */ unsigned long m_PeriodTM
  /* this+0xc */ bool m_bEnable
  public class NPollTimer & operator=(const class NPollTimer &)
  public void __dflt_ctor_closure()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NSyncObject {
    *
  public void NSyncObject(const class NSyncObject &)
  public void NSyncObject::NSyncObject(struct _RTL_CRITICAL_SECTION &)
  public void NSyncObject::~NSyncObject()
  public class NSyncObject & operator=(const class NSyncObject &)
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION & m_CS
  public void * __vecDelDtor(unsigned int)
}

class NSystemMgr {
    *
  /* [0x0003:0x0004b5f8] */ static  class NSystemMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  private bool NSystemMgr::Create()
  private void NSystemMgr::Destory()
  public const bool NSystemMgr::isOK()
  public static class NSystemMgr * GetObj()
  public static bool NSystemMgr::CreateInstance()
  public static void NSystemMgr::DestoryInstance()
  public void NSystemMgr(const class NSystemMgr &)
  private void NSystemMgr::NSystemMgr()
  private void NSystemMgr::~NSystemMgr()
  public class NSystemMgr & operator=(const class NSystemMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class NTPMessageQueue {
  NInterMessageQueue, offset = 0x0

  public bool NTPMessageQueue::isEmpty()
  public unsigned long NTPMessageQueue::GetFirstExecTimeMS()
  public bool NTPMessageQueue::Peek(unsigned int &, int &, int &, int &, const bool)
  public void NTPMessageQueue(const class NTPMessageQueue &)
  public void NTPMessageQueue::NTPMessageQueue()
  public void NTPMessageQueue::~NTPMessageQueue()
  public class NTPMessageQueue & operator=(const class NTPMessageQueue &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NThread {
    *
  public bool isOK()
  public bool NThread::Begin()
  public void NThread::End()
  public void NThread::Resume()
  public void Suspend()
  public unsigned long SetThreadAffinityMask(const unsigned long)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetName()
  private static unsigned int NThread::ThreadFunctionCaller(void *)
  private unsigned int ThreadFunction()
  private void PostThreadQuitMessage()
  public void NThread(const class NThread &)
  public void NThread::NThread(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void NThread::~NThread()
  /* this+0x4 */ unsigned long m_ThreadID
  /* this+0x8 */ bool m_bOK
    /* this+0xc */ enum NThread::enumState m_State
  /* this+0x10 */ void * m_hThread
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name

  public void * __vecDelDtor(unsigned int)
}

class NTraceLog {
  NFileLog, offset = 0x0

  public bool isOK()
  public static bool NTraceLog::CreateInstance()
  public static void NTraceLog::DestroyInstance()
  private void NTraceLog(const class NTraceLog &)
  private void NTraceLog::NTraceLog()
  private class NTraceLog & operator=(const class NTraceLog &)
  private void NTraceLog::~NTraceLog()
  /* [0x0003:0x0004b878] */ static  class NTraceLog * m_cpSelf
  /* this+0x828 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct Node {
  /* this+0x0 */ struct lua_TValue i_val

  /* this+0x10 */ union TKey i_key

}

struct NpcInfo {
  /* this+0x0 */ int accountID
  /* this+0x4 */ short job
  /* this+0x6 */ short clevel
  /* this+0x8 */ short head
  /* this+0xa */ short weapon
  /* this+0xc */ short accessory
  /* this+0xe */ short headerDir
  /* this+0x10 */ int speed
  /* this+0x14 */ int isValid
  /* this+0x18 */ int mapID
  /* this+0x1c */ unsigned long reChargeTime
  /* this+0x20 */ int exp
  /* this+0x24 */ int jexp
  /* this+0x28 */ short inc
  /* this+0x2c */ int hp
  /* this+0x30 */ int maxhp
  /* this+0x34 */ int sp
  /* this+0x38 */ int maxsp
  /* this+0x3c */ int jobpoint
  /* this+0x40 */ char[0x18] accountName
  /* this+0x58 */ char[0x10] mapName
  /* this+0x68 */ unsigned char sex
  /* this+0x6c */ int Str
  /* this+0x70 */ int Agi
  /* this+0x74 */ int Vit
  /* this+0x78 */ int Int
  /* this+0x7c */ int Dex
  /* this+0x80 */ int Luk
  /* this+0x84 */ int xSize
  /* this+0x88 */ int ySize
  /* this+0x8c */ int virtue
  /* this+0x90 */ short attackRange
  /* this+0x92 */ short srcAttackSight
  /* this+0x94 */ short attackSight
  /* this+0x96 */ short srcExpelSight
  /* this+0x98 */ short expelSight
  /* this+0x9a */ short atk1
  /* this+0x9c */ short atk2
  /* this+0x9e */ short def
  /* this+0xa0 */ short attackedMT
  /* this+0xa2 */ short attackMT
  /* this+0xa4 */ short StrAmount
  /* this+0xa6 */ short AgiAmount
  /* this+0xa8 */ short VitAmount
  /* this+0xaa */ short IntAmount
  /* this+0xac */ short DexAmount
  /* this+0xae */ short LukAmount
  /* this+0xb0 */ int ATKPercent
  /* this+0xb4 */ int DEFPercent
  /* this+0xb8 */ int property
  /* this+0xbc */ int scale
  /* this+0xc0 */ int _class
  /* this+0xc4 */ int race
  /* this+0xc8 */ int mdef
  /* this+0xcc */ int roomID
  /* this+0xd0 */ int IsRegen
  /* this+0xd4 */ int revivalXPos
  /* this+0xd8 */ int revivalYPos
  /* this+0xdc */ int revivalXRange
  /* this+0xe0 */ int revivalYRange
  /* this+0xe4 */ int RegenMinTime
  /* this+0xe8 */ int RegenMaxTime
  /* this+0xec */ int RegenType
  /* this+0xf0 */ int GuildID
  /* this+0xf4 */ short originalJob
  /* this+0xf8 */ int MATKPercent
  /* this+0xfc */ int MDEFPercent
  /* this+0x100 */ char[0x33] cashShopName
  /* this+0x133 */ char campID
  /* this+0x134 */ unsigned int attr
}

struct NpcSvrNpcInfo {
  /* this+0x0 */ const char * zone
  /* this+0x4 */ const char * name
  /* this+0x8 */ int type
  /* this+0xc */ int x
  /* this+0x10 */ int y
  /* this+0x14 */ int dx
  /* this+0x18 */ int dy
  /* this+0x1c */ int w
  /* this+0x20 */ int h
  /* this+0x24 */ int sprite
  /* this+0x28 */ int direction
  /* this+0x2c */ int regenMin
  /* this+0x30 */ int regenMax
  /* this+0x34 */ int regenType
  /* this+0x38 */ int npcType
  public void NpcSvrNpcInfo::SetDefault()
}

struct NpcTimeInfo {
  /* this+0x0 */ unsigned long StrEffectiveTime
  /* this+0x4 */ unsigned long AgiEffectiveTime
  /* this+0x8 */ unsigned long VitEffectiveTime
  /* this+0xc */ unsigned long IntEffectiveTime
  /* this+0x10 */ unsigned long DexEffectiveTime
  /* this+0x14 */ unsigned long LukEffectiveTime
  /* this+0x18 */ unsigned long HPHealVelocity
  /* this+0x1c */ unsigned long HPLastHealTime
  /* this+0x20 */ unsigned long SPLastHealTime
  /* this+0x24 */ unsigned long DamageNoMotionTime
  /* this+0x28 */ unsigned long SightRange
  /* this+0x2c */ unsigned long SightplusAttackPower
  /* this+0x30 */ unsigned long SpeedMount
  /* this+0x34 */ int ChangeSpeed
  /* this+0x38 */ int ChangeSpeedTime
}

struct OTHER_GUILD_INFO {
  /* this+0x0 */ char[0x18] guildname
  /* this+0x18 */ int guildLevel
  /* this+0x1c */ int guildMemberSize
  /* this+0x20 */ int guildRanking
}

struct OUTPUT_DATA {
  /* this+0x0 */ unsigned long outputType
  /* this+0x4 */ unsigned long outputState
}

struct OptionInfo {
  /* this+0x0 */ struct MSG_TYPE2_THREEDWORD receiveZENYInfo

  /* this+0xc */ int plusCRI_RANGE
  /* this+0x10 */ bool[0x7] receiveITMGROUP_ID
  /* this+0x18 */ int reflectMagic
  /* this+0x1c */ int[0x3][0x2] damagePercent_Scale
  /* this+0x34 */ int[0x2] damagePercent_CRI
  /* this+0x3c */ int healHP_Kill
  /* this+0x40 */ int healSP_Kill
  /* this+0x44 */ int healHP_Kill_Magic
  /* this+0x48 */ int healSP_Kill_Magic
  /* this+0x4c */ short plusStatusDEF
  /* this+0x4e */ short healSkillPercent
  /* this+0x50 */ short neverKnockBack
  /* this+0x54 */ int reservedArmorProperty
  /* this+0x58 */ int receiveItem_Equip
}

class OutputLuaFileSkillInfo {
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > OutputLuaSkillName(const char *)
  public int OutputLuaMaxLv(const char *)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > OutputLuaSpAmount(const char *)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > OutputLuaAttackRange(const char *)
  public bool Init()
  public bool isOK()
  public static bool CreateInstance()
  public static void DestroyInstance()
  private bool LoadTbl()
  private void OutputLuaFileSkillInfo(class OutputLuaFileSkillInfo &)
  private void OutputLuaFileSkillInfo()
  private void ~OutputLuaFileSkillInfo()
  private class OutputLuaFileSkillInfo & operator=(class OutputLuaFileSkillInfo &)
  /* this+0x0 */ bool m_bOK
  /* [0x0000:0x00000000] */ static  class OutputLuaFileSkillInfo * m_cpSelf
  private void * __vecDelDtor(unsigned int)
}

struct PACKET_AC_ACCEPT_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ int AuthCode
  /* this+0x8 */ unsigned long AID
  /* this+0xc */ unsigned long userLevel
  /* this+0x10 */ unsigned long lastLoginIP
  /* this+0x14 */ char[0x1a] lastLoginTime
  /* this+0x2e */ unsigned char Sex
}

struct PACKET_AC_ACCEPT_LOGIN2 {
  PACKET_AC_ACCEPT_LOGIN, offset = 0x0

  /* this+0x2f */ int iAccountSID
}

struct PACKET_AC_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ucAnswer
}

struct PACKET_AC_ACK_HASH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_AC_ASK_PNGAMEROOM {
  /* this+0x0 */ short PacketType
}

struct PACKET_AC_EVENT_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long EventItemCount
}

struct PACKET_AC_NOTIFY_ERROR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_AC_OTP_AUTH_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned short LoginResult
}

struct PACKET_AC_OTP_USER {
  /* this+0x0 */ short PacketType
}

struct PACKET_AC_PT_ACCOUNT_INFO {
  /* this+0x0 */ short PacketType
}

struct PACKET_AC_PT_LOGIN_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x9] m_SeedValue
}

struct PACKET_AC_REALNAME_AUTH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned short AccountArea
}

struct PACKET_AC_REFUSE_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
  /* this+0x3 */ char[0x14] blockDate
}

struct PACKET_AC_REFUSE_LOGIN_R2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int ErrorCode
  /* this+0x6 */ char[0x14] blockDate
}

struct PACKET_AC_REQUEST_SECOND_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned long dwSeed
}

struct PACKET_AC_REQ_NEW_USER {
  /* this+0x0 */ short PacketType
}

struct PACKET_AC_SHUTDOWN_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ long Time
}

struct PACKET_AC_SHUTDOWN_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ long Time
  /* this+0x6 */ long ServerTime
}

struct PACKET_AC_SSO_LOGIN_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
}

struct PACKET_AHC_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long[0x4] AuthData
}

struct PACKET_CAH_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long[0x4] AuthData
}

struct PACKET_CA_ACK_NEW_USER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Sex
}

struct PACKET_CA_CLIENT_TYPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short ClientType
  /* this+0x4 */ int nVer
}

struct PACKET_CA_CONNECT_INFO_CHANGED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x18] ID
}

struct PACKET_CA_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x10] HashValue
}

struct PACKET_CA_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x18] Passwd
  /* this+0x36 */ unsigned char clienttype
}

struct PACKET_CA_LOGIN2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x10] PasswdMD5
  /* this+0x2e */ unsigned char clienttype
}

struct PACKET_CA_LOGIN3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x10] PasswdMD5
  /* this+0x2e */ unsigned char clienttype
  /* this+0x2f */ unsigned char ClientInfo
}

struct PACKET_CA_LOGIN4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x10] PasswdMD5
  /* this+0x2e */ unsigned char clienttype
  /* this+0x2f */ char[0xd] macData
}

struct PACKET_CA_LOGIN5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x33] ID
  /* this+0x39 */ unsigned char[0x33] Passwd
  /* this+0x6c */ unsigned char clienttype
}

struct PACKET_CA_LOGIN_CHANNEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x18] Passwd
  /* this+0x36 */ unsigned char clienttype
  /* this+0x37 */ char[0x10] m_szIP
  /* this+0x47 */ unsigned char[0xd] m_szMacAddr
  /* this+0x54 */ unsigned char Channeling_Corp
}

struct PACKET_CA_LOGIN_CHN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long Version
  /* this+0x8 */ unsigned char[0x20] PasswdMD5
  /* this+0x28 */ unsigned char clienttype
}

struct PACKET_CA_LOGIN_PCBANG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x18] Passwd
  /* this+0x36 */ unsigned char clienttype
  /* this+0x37 */ char[0x10] IP
  /* this+0x47 */ unsigned char[0xd] MacAdress
}

struct PACKET_CA_OTP_AUTH_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x7] OTPCode
}

struct PACKET_CA_PT_ACCOUNT_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short sex
  /* this+0x4 */ short bPoint
  /* this+0x6 */ char[0x22] E_mail
}

struct PACKET_CA_PT_CARDPASS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x1c] m_cardPass
}

struct PACKET_CA_PT_EKEY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x9] m_SeedValue
  /* this+0xb */ char[0x9] m_EKey
}

struct PACKET_CA_PT_EKEY_FAIL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short errorCode
}

struct PACKET_CA_PT_ID_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x15] szPTID
  /* this+0x17 */ char[0x15] szPTNumID
}

struct PACKET_CA_REPLY_PNGAMEROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Permission
}

struct PACKET_CA_REQ_GAME_GUARD_CHECK {
  /* this+0x0 */ short PacketType
}

struct PACKET_CA_REQ_HASH {
  /* this+0x0 */ short PacketType
}

struct PACKET_CA_SSO_LOGIN_REQ {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long Version
  /* this+0x8 */ unsigned char clienttype
  /* this+0x9 */ char[0x18] ID
  /* this+0x21 */ char[0x11] MacAddr
  /* this+0x32 */ char[0xf] IpAddr
}

struct PACKET_CH_AVAILABLE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CH_CHARLIST_REQ {
  /* this+0x0 */ short PacketType
}

struct PACKET_CH_CHECKBOT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long dwAID
  /* this+0x8 */ char[0x18] szStringInfo
}

struct PACKET_CH_DELETE_CHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x28] key
}

struct PACKET_CH_DELETE_CHAR2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x32] key
}

struct PACKET_CH_DELETE_CHAR3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x6] Birth
}

struct PACKET_CH_DELETE_CHAR3_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CH_DELETE_CHAR3_EXT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long GID
}

struct PACKET_CH_DELETE_CHAR3_RESERVED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CH_DELETE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] SecondPWIdx
}

struct PACKET_CH_EDIT_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] oldSecondPWIdx
  /* this+0xa */ char[0x4] newSecondPWIdx
}

struct PACKET_CH_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int AuthCode
  /* this+0xa */ unsigned long userLevel
  /* this+0xe */ unsigned short clientType
  /* this+0x10 */ unsigned char Sex
}

struct PACKET_CH_ENTER2 {
  PACKET_CH_ENTER, offset = 0x0

  /* this+0x11 */ char[0x10] macData
  /* this+0x21 */ int iAccountSID
}

struct PACKET_CH_ENTER_CHECKBOT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CH_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ClientType
  /* this+0x3 */ unsigned char[0x10] HashValue
}

struct PACKET_CH_MAKE_CHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x18] name
  /* this+0x1a */ unsigned char Str
  /* this+0x1b */ unsigned char Agi
  /* this+0x1c */ unsigned char Vit
  /* this+0x1d */ unsigned char Int
  /* this+0x1e */ unsigned char Dex
  /* this+0x1f */ unsigned char Luk
  /* this+0x20 */ unsigned char CharNum
  /* this+0x21 */ short headPal
  /* this+0x23 */ short head
}

struct PACKET_CH_MAKE_CHAR_NOT_STATS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x18] name
  /* this+0x1a */ unsigned char CharNum
  /* this+0x1b */ short headPal
  /* this+0x1d */ short head
}

struct PACKET_CH_MAKE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] SecondPWIdx
}

struct PACKET_CH_NOT_AVAILABLE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] SecondPWIdx
}

struct PACKET_CH_REQ_CHANGE_CHARACTERNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwGID
  /* this+0x6 */ char[0x18] szCharName
}

struct PACKET_CH_REQ_CHANGE_CHARACTER_SLOT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short beforeCharNum
  /* this+0x4 */ short AfterCharNum
  /* this+0x6 */ short CurChrSlotCnt
}

struct PACKET_CH_REQ_CHANGE_CHARNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwGID
}

struct PACKET_CH_REQ_CHARINFO_PER_PAGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long SeqNum
}

struct PACKET_CH_REQ_IS_VALID_CHARNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwAID
  /* this+0x6 */ unsigned long dwGID
  /* this+0xa */ char[0x18] szCharName
}

struct PACKET_CH_SECOND_PASSWD_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] SecondPWIdx
}

struct PACKET_CH_SELECT_ACCESSIBLE_MAPNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char CharNum
  /* this+0x3 */ unsigned char mapListNum
}

struct PACKET_CH_SELECT_CHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char CharNum
}

struct PACKET_CH_SELECT_CHAR_GOINGTOBEUSED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwAID
  /* this+0x6 */ int nCountSelectedChar
  /* this+0xa */ unsigned long[0x9] ardwSelectedGID
}

struct PACKET_CH_WAITING_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int AuthCode
  /* this+0xa */ unsigned long userLevel
  /* this+0xe */ unsigned short clientType
  /* this+0x10 */ unsigned char Sex
}

struct PACKET_COLLECTORDEAD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ServerID
}

struct PACKET_CONNECTION_CLOSED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
}

struct PACKET_CS_REQ_ENCRYPTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char encCount
  /* this+0x3 */ char decCount
}

struct PACKET_CZ_ACK_CASH_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
  /* this+0x4 */ unsigned char[0x10] Password
  /* this+0x14 */ unsigned char[0x10] NewPassword
}

struct PACKET_CZ_ACK_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_CZ_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long[0x4] AuthData
}

struct PACKET_CZ_ACK_GUILD_NAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GuildID
  /* this+0x6 */ char[0x18] szGuildName
}

struct PACKET_CZ_ACK_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ReqAID
  /* this+0x6 */ unsigned long ReqGID
  /* this+0xa */ int Result
}

struct PACKET_CZ_ACK_SELECT_DEALTYPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned char type
}

struct PACKET_CZ_ACK_STORE_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
  /* this+0x4 */ unsigned char[0x10] Password
  /* this+0x14 */ unsigned char[0x10] NewPassword
}

struct PACKET_CZ_ACTIVE_QUEST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long questID
  /* this+0x6 */ bool active
}

struct PACKET_CZ_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
}

struct PACKET_CZ_AGREE_STARPLACE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char which
}

struct PACKET_CZ_ALCHEMIST_RANK {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long otherAID
  /* this+0x6 */ int answer
}

struct PACKET_CZ_AUCTION_ADD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NowMoney
  /* this+0x6 */ unsigned long MaxMoney
  /* this+0xa */ short DeleteHour
}

struct PACKET_CZ_AUCTION_ADD_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AuctionID
}

struct PACKET_CZ_AUCTION_ADD_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_AUCTION_BUY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AuctionID
  /* this+0x6 */ unsigned long Money
}

struct PACKET_CZ_AUCTION_CREATE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
}

struct PACKET_CZ_AUCTION_ITEM_SEARCH {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
  /* this+0x4 */ unsigned long AuctionID
  /* this+0x8 */ char[0x18] Name
  /* this+0x20 */ unsigned short Page
}

struct PACKET_CZ_AUCTION_REQ_MY_INFO {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
}

struct PACKET_CZ_AUCTION_REQ_MY_SELL_STOP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AuctionID
}

struct PACKET_CZ_BATTLEFIELD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_BATTLE_FIELD_LIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_BLACKSMITH_RANK {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_BLOCKING_PLAY_CANCEL {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_BOT_CHECK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int IsBot
}

struct PACKET_CZ_BROADCAST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_CANCEL_BATTLE_FIELD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
}

struct PACKET_CZ_CANCEL_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CANCEL_LOCKON {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CANCEL_MERGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CHANGE_CHATROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short size
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ char[0x8] passwd
}

struct PACKET_CZ_CHANGE_DIRECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short headDir
  /* this+0x4 */ unsigned char dir
}

struct PACKET_CZ_CHANGE_DIRECTION2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short headDir
  /* this+0x4 */ unsigned char dir
}

struct PACKET_CZ_CHANGE_EFFECTSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int EffectState
}

struct PACKET_CZ_CHANGE_GROUPEXPOPTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long expOption
}

struct PACKET_CZ_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_CHANGE_MAPTYPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short xPos
  /* this+0x4 */ short yPos
  /* this+0x6 */ short type
}

struct PACKET_CZ_CHOOSE_MENU {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned char num
}

struct PACKET_CZ_CHOPOKGI {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CLAN_CHAT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_CLIENT_VERSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ long clientVer
}

struct PACKET_CZ_CLOSE_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_CZ_CLOSE_SEARCH_STORE_INFO {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CLOSE_SIMPLECASH_SHOP {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CLOSE_STORE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CLOSE_WINDOW {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_COMMAND_MER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
  /* this+0x4 */ char command
}

struct PACKET_CZ_COMMAND_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char cSub
}

struct PACKET_CZ_CONCLUDE_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CONFIG {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_CZ_CONFIG::enumConfig Config
  /* this+0x6 */ int Value
}

struct PACKET_CZ_CONTACTNPC {
      /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned char type
  public void Crypt(unsigned int)
}

struct PACKET_CZ_CREATE_CHATROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short size
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ char[0x8] passwd
}

struct PACKET_CZ_DEATH_QUESTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Qanswer
}

struct PACKET_CZ_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_CZ_DISCONNECT_ALL_CHARACTER {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_DORIDORI {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int AuthCode
  /* this+0xe */ unsigned long clientTime
  /* this+0x12 */ unsigned char Sex
}

struct PACKET_CZ_ENTER2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int AuthCode
  /* this+0xe */ unsigned long clientTime
  /* this+0x12 */ unsigned char Sex
}

struct PACKET_CZ_EQUIPWIN_MICROSCOPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_EXEC_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ClientType
  /* this+0x3 */ unsigned char[0x10] HashValue
}

struct PACKET_CZ_EXIT_ROOM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_GANGSI_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketSwitch
}

struct PACKET_CZ_GM_FULLSTRIP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long TargetAID
}

struct PACKET_CZ_GPK_AUTH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_GPK_DYNCODE_RELOAD {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long expOption
  /* this+0x6 */ unsigned char ItemPickupRule
  /* this+0x7 */ unsigned char ItemDivisionRule
}

struct PACKET_CZ_GUILD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_GUILD_NOTICE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x3c] subject
  /* this+0x42 */ char[0x78] notice
}

struct PACKET_CZ_GUILD_ZENY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int zeny
}

struct PACKET_CZ_HACKSH_CPX_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short nLength
  /* this+0x6 */ int Ident
}

struct PACKET_CZ_HUNTINGLIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_INPUT_EDITDLG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ int value
}

struct PACKET_CZ_INPUT_EDITDLGSTR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long NAID
}

struct PACKET_CZ_INVENTORY_TAB {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ bool NORMALorPRIVATE
}

struct PACKET_CZ_IRMAIL_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct IRMAILID MailID

  public void PACKET_CZ_IRMAIL_LIST()
}

struct PACKET_CZ_IRMAIL_SEND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
      /* this+0x4 */ char[0x18] ReceiveName
  /* this+0x1c */ char[0x28] Title
  /* this+0x44 */ int Zeny
  /* this+0x48 */ struct PACKET_CZ_IRMAIL_SEND::tagItem[0xa] Item
}

struct PACKET_CZ_IRMAIL_SEND::tagItem {
  /* this+0x0 */ short index
  /* this+0x2 */ short id
  /* this+0x4 */ short cnt
}

struct PACKET_CZ_ITEMLISTWIN_RES {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ enum ItemListWinPacket::Type Type
  /* this+0x8 */ enum ItemListWinPacket::Action Action
}

struct PACKET_CZ_ITEM_CREATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] itemName
}

struct PACKET_CZ_ITEM_PICKUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_CZ_ITEM_PICKUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_CZ_ITEM_THROW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ short count
}

struct PACKET_CZ_ITEM_THROW2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ short count
}

struct PACKET_CZ_JOIN_BABY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int answer
}

struct PACKET_CZ_JOIN_BATTLE_FIELD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short JoinTeam
}

struct PACKET_CZ_JOIN_COUPLE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int answer
}

struct PACKET_CZ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ int answer
}

struct PACKET_CZ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int answer
}

struct PACKET_CZ_KSY_EVENT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_LESSEFFECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int isLess
}

struct PACKET_CZ_MACRO_ITEM_PICKUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_CZ_MACRO_REQUEST_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char action
  /* this+0x3 */ unsigned long targetGID
}

struct PACKET_CZ_MACRO_REQUEST_MOVE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x3] dest
}

struct PACKET_CZ_MACRO_START {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_MACRO_STOP {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_MACRO_USE_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ short selectedLevel
  /* this+0x6 */ unsigned long targetID
}

struct PACKET_CZ_MACRO_USE_SKILL_TOGROUND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ short selectedLevel
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_CZ_MAIL_ADD_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MAIL_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
}

struct PACKET_CZ_MAIL_GET_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
}

struct PACKET_CZ_MAIL_GET_LIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_MAIL_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
}

struct PACKET_CZ_MAIL_RESET_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
}

struct PACKET_CZ_MAIL_SEND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x18] ReceiveName
  /* this+0x1c */ char[0x28] Header
}

struct PACKET_CZ_MAKE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] groupName
}

struct PACKET_CZ_MAKE_GROUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] groupName
  /* this+0x1a */ unsigned char ItemPickupRule
  /* this+0x1b */ unsigned char ItemDivisionRule
}

struct PACKET_CZ_MEMORIALDUNGEON_COMMAND {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_CZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command
}

struct PACKET_CZ_MER_COMMAND {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char command
}

struct PACKET_CZ_MONSTER_TALK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char stateId
  /* this+0x7 */ unsigned char skillId
  /* this+0x8 */ unsigned char arg1
}

struct PACKET_CZ_MOVETO_MAP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] mapName
  /* this+0x12 */ short xPos
  /* this+0x14 */ short yPos
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_STORE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_BODY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_BODY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_BODY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_NOTIFY_ACTORINIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_OPEN_SIMPLE_CASHSHOP_ITEMLIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_PARTY_BOOKING_REQ_DELETE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_PARTY_BOOKING_REQ_REGISTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct PARTY_BOOKING_DETAIL RegisterInfo

}

struct PACKET_CZ_PARTY_BOOKING_REQ_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Level
  /* this+0x4 */ short MapID
  /* this+0x6 */ short Job
  /* this+0x8 */ unsigned long LastIndex
  /* this+0xc */ short ResultCount
}

struct PACKET_CZ_PARTY_BOOKING_REQ_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short[0x6] Job
}

struct PACKET_CZ_PARTY_CONFIG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bRefuseJoinMsg
}

struct PACKET_CZ_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] characterName
}

struct PACKET_CZ_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ bool bAccept
}

struct PACKET_CZ_PARTY_RECRUIT_ACK_RECALL {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
}

struct PACKET_CZ_PARTY_RECRUIT_ADD_FILTERLINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_CZ_PARTY_RECRUIT_CANCEL_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_CZ_PARTY_RECRUIT_REFUSE_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long REFUSE_AID
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_DELETE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_RECALL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_REGISTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct PARTY_RECRUIT_DETAIL regsiterInfo

}

struct PACKET_CZ_PARTY_RECRUIT_REQ_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Level
  /* this+0x4 */ unsigned long LastIndex
  /* this+0x8 */ short ResultCount
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x25] Notice
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_CZ_PARTY_RECRUIT_SHOW_EQUIPMENT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long TargetGID
}

struct PACKET_CZ_PARTY_RECRUIT_SUB_FILTERLINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CZ_PC_BUY_CASH_POINT_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ short count
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long UniqueID
}

struct PACKET_CZ_PC_SELL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_PETEGG_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
}

struct PACKET_CZ_PET_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int data
}

struct PACKET_CZ_PKMODE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool isTurnOn
}

struct PACKET_CZ_PROGRESS {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REASSEMBLY_AUTH {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REASSEMBLY_IDENTITY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
    /* this+0x4 */ struct PACKET_CZ_REASSEMBLY_IDENTITY::<unnamed-type-ImportAddressTableModify> ImportAddressTableModify

}

struct PACKET_CZ_REASSEMBLY_IDENTITY::<unnamed-type-ImportAddressTableModify> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char Winsock
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char GDI32
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned char Debugging
  /* this(bf)+0x0:0x3 len(0x1) */ unsigned char ClientCheckSumError
  /* this(bf)+0x0:0x4 len(0x4) */ unsigned char Unused
}

struct PACKET_CZ_RECALL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] AccountName
}

struct PACKET_CZ_RECALL_GID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CharacterName
}

struct PACKET_CZ_RECALL_SSO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long aid
}

struct PACKET_CZ_REGISTER_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_REG_CHANGE_GUILD_POSITIONINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_REMEMBER_WARPPOINT {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REMOVE_AID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] AccountName
}

struct PACKET_CZ_REMOVE_AID_SSO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long aid
}

struct PACKET_CZ_RENAME_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] szName
}

struct PACKET_CZ_REPLY_ENTRY_QUEUE_ADMISSION {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
}

struct PACKET_CZ_REPLY_LOBBY_ADMISSION {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
  /* this+0x1b */ char[0x18] LobbyName
}

struct PACKET_CZ_REQMAKINGHOMUN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool result
}

struct PACKET_CZ_REQMAKINGITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct MAKABLEITEM_INFO info

}

struct PACKET_CZ_REQNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQNAME2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQNAME_BYGID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CZ_REQNAME_BYGID2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CZ_REQUEST_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetGID
  /* this+0x6 */ unsigned char action
}

struct PACKET_CZ_REQUEST_ACT2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetGID
  /* this+0x6 */ unsigned char action
}

struct PACKET_CZ_REQUEST_ACTNPC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned char action
}

struct PACKET_CZ_REQUEST_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_REQUEST_CHAT_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_REQUEST_MOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x3] dest
}

struct PACKET_CZ_REQUEST_MOVE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x3] dest
}

struct PACKET_CZ_REQUEST_MOVENPC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char[0x3] dest
}

struct PACKET_CZ_REQUEST_MOVETOOWNER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CZ_REQUEST_QUIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQUEST_TIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long clientTime
}

struct PACKET_CZ_REQUEST_TIME2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long clientTime
}

struct PACKET_CZ_REQ_ACCOUNTNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long MyAID
  /* this+0xa */ unsigned long MyGID
}

struct PACKET_CZ_REQ_BAN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int AID
  /* this+0xa */ int GID
  /* this+0xe */ char[0x28] reasonDesc
}

struct PACKET_CZ_REQ_BATTLE_STATE_MONITOR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
}

struct PACKET_CZ_REQ_BEFORE_WORLD_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_BUY_FROMMC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_CARTOFF {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_CHANGECART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short num
}

struct PACKET_CZ_REQ_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_REQ_CLICK_TO_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
}

struct PACKET_CZ_REQ_CLOSESTORE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_CLOSE_BUYING_STORE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long OpponentGDID
  /* this+0x6 */ int Relation
}

struct PACKET_CZ_REQ_DISCONNECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_CZ_REQ_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x28] key
}

struct PACKET_CZ_REQ_EMOTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
}

struct PACKET_CZ_REQ_ENTER_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long roomID
  /* this+0x6 */ char[0x8] passwd
}

struct PACKET_CZ_REQ_ENTRY_QUEUE_APPLY {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short ApplyType
  /* this+0x4 */ char[0x18] EntryQueueName
}

struct PACKET_CZ_REQ_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
}

struct PACKET_CZ_REQ_ENTRY_QUEUE_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
}

struct PACKET_CZ_REQ_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_EXPEL_GROUP_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] characterName
}

struct PACKET_CZ_REQ_EXPEL_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
}

struct PACKET_CZ_REQ_GIVE_MANNER_BYNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CharName
}

struct PACKET_CZ_REQ_GIVE_MANNER_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long otherAID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ short point
}

struct PACKET_CZ_REQ_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GDID
}

struct PACKET_CZ_REQ_GUILD_MEMBER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GID
}

struct PACKET_CZ_REQ_GUILD_MENU {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Type
}

struct PACKET_CZ_REQ_GUILD_MENUINTERFACE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_GUILD_NAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GuildID
}

struct PACKET_CZ_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_ITEMCOMPOSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short cardIndex
  /* this+0x4 */ short equipIndex
}

struct PACKET_CZ_REQ_ITEMCOMPOSITION_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short cardIndex
}

struct PACKET_CZ_REQ_ITEMIDENTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
}

struct PACKET_CZ_REQ_ITEMREPAIR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct REPAIRITEM_INFO TargetItemInfo

}

struct PACKET_CZ_REQ_JOIN_BABY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_JOIN_COUPLE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long MyAID
  /* this+0xa */ unsigned long MyGID
}

struct PACKET_CZ_REQ_JOIN_GUILD2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] characterName
}

struct PACKET_CZ_REQ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_LEAVE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int AID
  /* this+0xa */ int GID
  /* this+0xe */ char[0x28] reasonDesc
}

struct PACKET_CZ_REQ_MAIL_RETURN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
  /* this+0x6 */ char[0x18] ReceiveName
}

struct PACKET_CZ_REQ_MAKE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] GName
}

struct PACKET_CZ_REQ_MAKINGARROW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short id
}

struct PACKET_CZ_REQ_MAKINGITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short mkType
  /* this+0x4 */ unsigned short id
}

struct PACKET_CZ_REQ_MERGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_REQ_NEXT_SCRIPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_CZ_REQ_OPENSTORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x50] storeName
}

struct PACKET_CZ_REQ_OPENSTORE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x50] storeName
  /* this+0x54 */ bool result
}

struct PACKET_CZ_REQ_OPEN_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long LimitZeny
  /* this+0x8 */ unsigned char result
  /* this+0x9 */ char[0x50] storeName
}

struct PACKET_CZ_REQ_OPEN_MEMBER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int AID
}

struct PACKET_CZ_REQ_PARTY_NAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long PartyID
}

struct PACKET_CZ_REQ_PVPPOINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_CZ_REQ_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short RankingType
}

struct PACKET_CZ_REQ_REMAINTIME {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_ROLE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long role
  /* this+0x6 */ char[0x18] name
}

struct PACKET_CZ_REQ_SCHEDULER_CASHITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_SE_CASH_TAB_CODE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short tab_code
}

struct PACKET_CZ_REQ_STATUS {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_STATUS_GM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CharName
}

struct PACKET_CZ_REQ_TAKEOFF_EQUIP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
}

struct PACKET_CZ_REQ_TRADE_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long makerAID
  /* this+0x8 */ unsigned long StoreID
}

struct PACKET_CZ_REQ_USER_COUNT {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_WEAPONREFINE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Index
}

struct PACKET_CZ_REQ_WEAR_EQUIP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
}

struct PACKET_CZ_REQ_WEAR_EQUIP_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long wearLocation
}

struct PACKET_CZ_REQ_WHISPER_LIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_RESET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_CZ_RESTART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
}

struct PACKET_CZ_SEARCH_STORE_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char StoreType
  /* this+0x5 */ unsigned long maxPrice
  /* this+0x9 */ unsigned long minPrice
  /* this+0xd */ unsigned char ItemIDListSize
  /* this+0xe */ unsigned char CardIDListSize
}

struct PACKET_CZ_SEARCH_STORE_INFO_NEXT_PAGE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_SEEK_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Option
}

struct PACKET_CZ_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Job
  /* this+0x6 */ unsigned long Level
  /* this+0xa */ char[0x10] mapName
  /* this+0x1a */ unsigned long Option
}

struct PACKET_CZ_SELECTAUTOSPELL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int SKID
}

struct PACKET_CZ_SELECTCART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Identity
  /* this+0x6 */ unsigned char type
}

struct PACKET_CZ_SELECT_PETEGG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
}

struct PACKET_CZ_SELECT_WARPPOINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ char[0x10] mapName
}

struct PACKET_CZ_SETTING_WHISPER_PC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
  /* this+0x1a */ unsigned char type
}

struct PACKET_CZ_SETTING_WHISPER_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
}

struct PACKET_CZ_SE_CASHSHOP_CLOSE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_SE_CASHSHOP_OPEN {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_SE_PC_BUY_CASHITEM_LIST {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short item_count
}

struct PACKET_CZ_SHIFT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CharacterName
}

struct PACKET_CZ_SHORTCUT_KEY_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ struct tagShortCutKey ShortCutKey

}

struct PACKET_CZ_SIMPLE_BUY_CASH_POINT_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ short count
}

struct PACKET_CZ_SIMPLE_CASH_BTNSHOW {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_SKILL_SELECT_RESPONSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_ZC_SKILL_SELECT_REQUEST::enumWHY why
  /* this+0x6 */ unsigned short SKID
}

struct PACKET_CZ_SRPACKETR2_START {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ProtectFactor
}

struct PACKET_CZ_SSILIST_ITEM_CLICK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long SSI_ID
  /* this+0xa */ unsigned short ITID
}

struct PACKET_CZ_STANDING_RESURRECTION {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_STATUS_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short statusID
  /* this+0x4 */ unsigned char changeAmount
}

struct PACKET_CZ_TAEKWON_RANK {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_TRYCAPTURE_MONSTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
}

struct PACKET_CZ_TRYCOLLECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
}

struct PACKET_CZ_UPGRADE_SKILLLEVEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
}

struct PACKET_CZ_USE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long AID
}

struct PACKET_CZ_USE_ITEM2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long AID
}

struct PACKET_CZ_USE_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ unsigned long targetID
}

struct PACKET_CZ_USE_SKILL2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ unsigned long targetID
}

struct PACKET_CZ_USE_SKILL_TOGROUND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_CZ_USE_SKILL_TOGROUND2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_CZ_USE_SKILL_TOGROUND_WITHTALKBOX {
  PACKET_CZ_USE_SKILL_TOGROUND, offset = 0x0

  /* this+0xa */ char[0x50] contents
}

struct PACKET_CZ_USE_SKILL_TOGROUND_WITHTALKBOX2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
  /* this+0xa */ char[0x50] contents
}

struct PACKET_CZ_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x18] receiver
}

struct PACKET_HC_ACCEPT_DELETECHAR {
  /* this+0x0 */ short PacketType
}

struct PACKET_HC_ACCEPT_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_HC_ACCEPT_ENTER2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned char NormalSlotNum
  /* this+0x5 */ unsigned char PremiumSlotNum
  /* this+0x6 */ unsigned char BillingSlotNum
  /* this+0x7 */ unsigned char ProducibleSlotNum
  /* this+0x8 */ unsigned char ValidSlotNum
  /* this+0x9 */ char[0x14] m_extension
}

struct PACKET_HC_ACCEPT_ENTER_BILL_EXT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x14] m_extension
}

struct PACKET_HC_ACCEPT_ENTER_FRANCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned short wExtInfo
}

struct PACKET_HC_ACCEPT_ENTER_NEO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned char TotalSlotNum
  /* this+0x5 */ unsigned char PremiumStartSlot
  /* this+0x6 */ unsigned char PremiumEndSlot
}

struct PACKET_HC_ACCEPT_ENTER_ORG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x14] m_extension
}

struct PACKET_HC_ACCEPT_MAKECHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct CHARACTER_INFO charinfo

}

struct PACKET_HC_ACK_CHANGE_CHARACTERNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwResult
}

struct PACKET_HC_ACK_CHANGE_CHARACTER_SLOT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Reason
  /* this+0x6 */ short AfterChrSlotCnt
}

struct PACKET_HC_ACK_CHANGE_CHARNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short sResult
}

struct PACKET_HC_ACK_CHARINFO_PER_PAGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_HC_ACK_IS_VALID_CHARNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short sResult
}

struct PACKET_HC_AVAILABLE_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
}

struct PACKET_HC_BLOCK_CHARACTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_HC_CHARACTER_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_HC_CHARLIST_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int TotalCnt
}

struct PACKET_HC_CHECKBOT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_HC_CHECKBOT_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char Resut
}

struct PACKET_HC_DELETE_CHAR3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ int Result
  }

struct PACKET_HC_DELETE_CHAR3_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ int Result
  }

struct PACKET_HC_DELETE_CHAR3_RESERVED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ int Result
  /* this+0xa */ long DeleteReservedDate
  }

struct PACKET_HC_DELETE_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
  /* this+0x4 */ unsigned long Seed
}

struct PACKET_HC_EDIT_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
  /* this+0x4 */ unsigned long Seed
}

struct PACKET_HC_MAKE_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
  /* this+0x4 */ unsigned long Seed
}

struct PACKET_HC_NOTIFY_ACCESSIBLE_MAPNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_HC_NOTIFY_ZONESVR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char[0x10] mapName
  /* this+0x16 */ struct ZSERVER_ADDR addr

}

struct PACKET_HC_NOT_AVAILABLE_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
  /* this+0x4 */ unsigned long Seed
}

struct PACKET_HC_QUEUE_ORDER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long m_AID
  /* this+0x8 */ unsigned long m_QueueOrder
}

struct PACKET_HC_REFUSE_DELETECHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_HC_REFUSE_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_HC_REFUSE_MAKECHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_HC_REFUSE_SELECTCHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_HC_REQUEST_CHARACTER_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned long dummyValue
}

struct PACKET_HC_SECOND_PASSWD_LOGIN {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Seed
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned short Result
}

struct PACKET_HC_UPDATE_CHARINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct CHARACTER_INFO charinfo

}

struct PACKET_HC_WAITING_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int CurWaitingNum
}

struct PACKET_HZ_ACK_MAPMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long NID
}

struct PACKET_HZ_ACK_RESTART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_HZ_AUTH_ACK {
  /* this+0x0 */ short PacketType
}

struct PACKET_HZ_CHAR_NAME_CHANGED {
  /* this+0x0 */ short sPacketType
  /* this+0x2 */ unsigned long dwGID
}

struct PACKET_HZ_DISCONNECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned char reason
}

struct PACKET_HZ_FATIGUE_INFO_CHN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Level
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long TotalPlayTime
}

struct PACKET_HZ_LOGON_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] ID
  /* this+0x22 */ unsigned long TotalUsingTime
  /* this+0x26 */ int selectedCharNum
}

struct PACKET_HZ_LOGON_CHN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bAuth
  /* this+0x3 */ char[0x18] ID
  /* this+0x1b */ __int64 KunlunAID
  /* this+0x23 */ unsigned long AID
  /* this+0x27 */ unsigned long GID
  /* this+0x2b */ unsigned long TotalUsingTime
  /* this+0x2f */ int selectedCharNum
  /* this+0x33 */ bool bWorldEnterance
}

struct PACKET_HZ_LOGON_KOR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bAuth
  /* this+0x3 */ unsigned long AID
  /* this+0x7 */ unsigned long GID
  /* this+0xb */ unsigned long TotalUsingTime
  /* this+0xf */ int selectedCharNum
  /* this+0x13 */ bool bWorldEnterance
}

struct PACKET_HZ_LOGON_TW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bAuth
  /* this+0x3 */ char[0x18] ID
  /* this+0x1b */ unsigned long AID
  /* this+0x1f */ unsigned long GID
  /* this+0x23 */ unsigned long TotalUsingTime
  /* this+0x27 */ int selectedCharNum
  /* this+0x2b */ bool bWorldEnterance
}

struct PACKET_HZ_NOTIFY_PCBANG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int isPCBang
  /* this+0xe */ int PayType
  /* this+0x12 */ int ConnectionArea
  /* this+0x16 */ int ConnectionState
  /* this+0x1a */ int EventNum
  /* this+0x1e */ unsigned long ConnectionTime
  /* this+0x22 */ float ExpFactor
  /* this+0x26 */ float ExpFactor2
  /* this+0x2a */ float DropFactor
  /* this+0x2e */ short PremiumType
  /* this+0x30 */ short PremiumType2
  /* this+0x32 */ int SpareType4
}

struct PACKET_HZ_NOTIFY_PCBANG_PLAYING_TIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int TimeMinute
}

struct PACKET_HZ_PERSONAL_INFORMATION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int isPCBang
  /* this+0xe */ int PayType
  /* this+0x12 */ int ConnectionArea
  /* this+0x16 */ int ConnectionState
  /* this+0x1a */ int EventNum
  /* this+0x1e */ unsigned long ConnectionTime
  /* this+0x22 */ int ExpFactor
  /* this+0x26 */ int ExpFactor2
  /* this+0x2a */ int DropFactor
  /* this+0x2e */ short PremiumType
  /* this+0x30 */ short PremiumType2
  /* this+0x32 */ int SpareType4
  /* this+0x36 */ int MaxStoreCnt
}

struct PACKET_HZ_PERSONAL_INFORMATION_2ND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GID
  /* this+0xc */ int isPCBang
  /* this+0x10 */ int PayType
  /* this+0x14 */ int ConnectionArea
  /* this+0x18 */ int ConnectionState
  /* this+0x1c */ int EventNum
  /* this+0x20 */ unsigned long ConnectionTime
  /* this+0x24 */ short PremiumType
  /* this+0x26 */ short PremiumType2
  /* this+0x28 */ int SpareType4
  /* this+0x2c */ int MaxStoreCnt
    /* this+0x30 */ unsigned char flag
  /* this+0x31 */ int Exp
  /* this+0x35 */ int Death
  /* this+0x39 */ int Drop
}

struct PACKET_HZ_PERSONAL_INFORMATION_BRZ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
    /* this+0x8 */ unsigned char flag
  /* this+0x9 */ int PayType
  /* this+0xd */ int MaxStoreCnt
  /* this+0x11 */ int Exp
  /* this+0x15 */ int Death
  /* this+0x19 */ int Drop
}

struct PACKET_HZ_PERSONAL_INFORMATION_CHN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ int PayType
  /* this+0xc */ int ConnectionArea
  /* this+0x10 */ int ConnectionState
  /* this+0x14 */ int MaxStoreCnt
  /* this+0x18 */ int Exp
  /* this+0x1c */ int Death
  /* this+0x20 */ int Drop
}

struct PACKET_HZ_PERSONAL_INFORMATION_PHL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
    /* this+0x8 */ unsigned char flag
    /* this+0x9 */ int PayType
  /* this+0xd */ int MaxStoreCnt
  /* this+0x11 */ int Exp
  /* this+0x15 */ int Death
  /* this+0x19 */ int Drop
}

struct PACKET_HZ_PERSONAL_INFORMATION_THAI {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ int isPCBang
  /* this+0xc */ short PremiumType2
    /* this+0xe */ unsigned char flag
  /* this+0xf */ int MaxStoreCnt
  /* this+0x13 */ int Exp
  /* this+0x17 */ int Death
  /* this+0x1b */ int Drop
}

struct PACKET_HZ_PERSONAL_INFORMATION_TW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
    /* this+0x8 */ unsigned char flag
  /* this+0x9 */ int Exp
  /* this+0xd */ int Death
  /* this+0x11 */ int Drop
  /* this+0x15 */ int MaxStoreCnt
}

struct PACKET_HZ_PING {
  /* this+0x0 */ short PacketType
}

struct PACKET_HZ_PING_LIVE {
  /* this+0x0 */ short PacketType
}

struct PACKET_HZ_USER_COUNT_REQ {
  /* this+0x0 */ short PacketType
}

struct PACKET_HZ_ZSVR_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int ZSID
  /* this+0x6 */ unsigned char bReady
  /* this+0x7 */ unsigned char bOverPopulation
}

struct PACKET_INFO_REMAINTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int AID
  /* this+0x6 */ int Type
  /* this+0xa */ int RemainTime
}

struct PACKET_IZ_ACK_BAN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x18] charName
  /* this+0x26 */ char[0x18] AccountName
  /* this+0x3e */ char[0x28] reasonDesc
}

struct PACKET_IZ_ACK_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_ACK_GUILD_POSITION_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_ACK_LEAVE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x18] charName
  /* this+0x26 */ char[0x28] reasonDesc
}

struct PACKET_IZ_ACK_LOGON {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Type
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
}

struct PACKET_IZ_ACK_MAIL_DELETE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int MailID
  /* this+0xe */ unsigned short Result
}

struct PACKET_IZ_ACK_MAIL_RETURN {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long MailID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ short Result
  /* this+0x10 */ char[0x28] ItemInfo
  /* this+0x38 */ char ItemLen
  /* this+0x39 */ unsigned long Money
  /* this+0x3d */ char[0x18] FromName
}

struct PACKET_IZ_ACK_MAKE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] groupName
  /* this+0x22 */ unsigned char result
}

struct PACKET_IZ_ACK_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] characterName
  /* this+0x1e */ unsigned char answer
}

struct PACKET_IZ_ACK_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long ReqAID
  /* this+0xa */ unsigned long GDID
  /* this+0xe */ unsigned char answer
}

struct PACKET_IZ_ACK_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ unsigned char result
}

struct PACKET_IZ_ADD_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned char answer
  /* this+0xb */ struct GUILDALLYINFO Ally

}

struct PACKET_IZ_ADD_EXP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int Exp
  /* this+0xe */ int MaxUserNum
}

struct PACKET_IZ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long FriendAID
  /* this+0xc */ unsigned long FriendGID
  /* this+0x10 */ char[0x18] Name
}

struct PACKET_IZ_ADD_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned char answer
  /* this+0xb */ struct GUILDALLYINFO Hostile

}

struct PACKET_IZ_ADD_MEMBER_TO_GROUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long receiverAID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long Role
  /* this+0xe */ unsigned char state
  /* this+0xf */ char[0x18] groupName
  /* this+0x27 */ char[0x18] characterName
  /* this+0x3f */ char[0x10] mapName
  /* this+0x4f */ unsigned char ItemPickupRule
  /* this+0x50 */ unsigned char ItemDivisionRule
}

struct PACKET_IZ_AUTH_ACK {
  /* this+0x0 */ short PacketType
}

struct PACKET_IZ_BROADCAST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLen
}

struct PACKET_IZ_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long receiverAID
  /* this+0x6 */ unsigned long OldMasterAID
  /* this+0xa */ unsigned long NewMasterAID
}

struct PACKET_IZ_CHAT_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long receiverAID
  /* this+0x8 */ unsigned long senderAID
}

struct PACKET_IZ_CHK_PROCESSTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long InterProcessTime
}

struct PACKET_IZ_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long FriendAID
  /* this+0xa */ unsigned long FriendGID
}

struct PACKET_IZ_DELETE_MEMBER_FROM_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long receiverAID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x18] characterName
  /* this+0x22 */ unsigned char result
}

struct PACKET_IZ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long OpponentGDID
  /* this+0xa */ int Relation
}

struct PACKET_IZ_DISCONNECT_ALL {
  /* this+0x0 */ short PacketType
}

struct PACKET_IZ_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_IZ_DIVORCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] name
}

struct PACKET_IZ_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] EntryQueueName
}

struct PACKET_IZ_ENTRY_QUEUE_LOGOUT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
  /* this+0x1a */ unsigned long GID
}

struct PACKET_IZ_ENTRY_QUEUE_MOVE_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x10] mapName
  /* this+0x16 */ int xPos
  /* this+0x1a */ int yPos
}

struct PACKET_IZ_ENTRY_QUEUE_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
}

struct PACKET_IZ_FREE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
}

struct PACKET_IZ_FRIENDS_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_IZ_FRIENDS_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long FriendAID
  /* this+0xa */ unsigned long FriendGID
  /* this+0xe */ bool State
}

struct PACKET_IZ_GET_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
  /* this+0xc */ short emblemVersion
}

struct PACKET_IZ_GPK_DYNCODE_RELOAD {
  /* this+0x0 */ short PacketType
}

struct PACKET_IZ_GROUP_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long expOption
  /* this+0xc */ char[0x18] groupName
}

struct PACKET_IZ_GUILDINFO_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ struct GUILDINFO Data

}

struct PACKET_IZ_GUILD_ALLYINFO_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_GUILD_BANISHINFO_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_GUILD_CHANGEMAXUSER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int maxNum
}

struct PACKET_IZ_GUILD_CHANGEOWNER_AGIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long oldGDID
  /* this+0x6 */ unsigned long newGDID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_IZ_GUILD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
}

struct PACKET_IZ_GUILD_MAP_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_IZ_GUILD_MEMBERINFO_FRAG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct GUILDMINFO MInfo

  /* this+0x8e */ unsigned long FragNum
  /* this+0x92 */ unsigned long GDID
}

struct PACKET_IZ_GUILD_MEMBERINFO_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_GUILD_MEMBER_ADD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ struct GUILDMINFO Info

}

struct PACKET_IZ_GUILD_MPOSITION_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_GUILD_NOTICE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x3c] subject
  /* this+0x42 */ char[0x78] notice
}

struct PACKET_IZ_GUILD_NOTIFYSKILLDATA {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ int isForceSend
  /* this+0xc */ int SkillPoint
}

struct PACKET_IZ_GUILD_ZENY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x10] mapName
  /* this+0x1e */ unsigned char type
  /* this+0x1f */ int zeny
  /* this+0x23 */ unsigned char ret
}

struct PACKET_IZ_GUILD_ZENY_UPDATE_ALL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long Zeny
}

struct PACKET_IZ_INFO_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] EntryQueueName
  /* this+0x1e */ int Ranking
}

struct PACKET_IZ_INSTANTMAP_ADD3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int ZSID
  /* this+0x6 */ char[0x10] mapName
  /* this+0x16 */ int mapID
  /* this+0x1a */ int mapType
  /* this+0x1e */ bool bPlayerEnter
}

struct PACKET_IZ_INSTANTMAP_CREATE_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int hRequestN2Obj
  /* this+0x6 */ char[0x10] mapName
  /* this+0x16 */ int mapID
  /* this+0x1a */ int mapType
}

struct PACKET_IZ_INSTANTMAP_PLAYER_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int hRequestN2Obj
  /* this+0x6 */ int ZSID
  /* this+0xa */ char[0x10] mapName
  /* this+0x1a */ int mapID
  /* this+0x1e */ int mapType
  /* this+0x22 */ bool bPlayerEnter
}

struct PACKET_IZ_INSTANTMAP_PLAYER_ENTER3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int mapID
  /* this+0x6 */ bool bPlayerEnter
}

struct PACKET_IZ_INSTANTMAP_REMOVE3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int ZSID
  /* this+0x6 */ int mapID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_IZ_INSTNATMAP_DESTROY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] mapName
  /* this+0x12 */ int mapID
}

struct PACKET_IZ_IRMAIL_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ struct IRMAILID MailID

  public void PACKET_IZ_IRMAIL_NOTIFY()
}

struct PACKET_IZ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_IZ_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] EntryQueueName
  /* this+0x1e */ char[0x18] LobbyName
}

struct PACKET_IZ_LOBBY_ADMISSION_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] EntryQueueName
  /* this+0x1e */ char[0x18] LobbyName
  /* this+0x36 */ char CampCode
  /* this+0x37 */ short xPos
  /* this+0x39 */ short yPos
}

struct PACKET_IZ_LOBBY_MOVE_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x10] mapName
  /* this+0x16 */ int xPos
  /* this+0x1a */ int yPos
}

struct PACKET_IZ_MAIL_RECEIVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long MailID
  /* this+0xa */ char[0x28] Header
  /* this+0x32 */ char[0x18] FromName
}

struct PACKET_IZ_MAIL_REQ_GET_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int MailID
  /* this+0xa */ char[0x28] ItemInfo
  /* this+0x32 */ char ItemLen
  /* this+0x33 */ unsigned long Money
  /* this+0x37 */ char[0x18] FromName
}

struct PACKET_IZ_MAIL_REQ_GET_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ int MailNumber
}

struct PACKET_IZ_MAIL_REQ_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ int MailID
  /* this+0xc */ char[0x28] Header
  /* this+0x34 */ char[0x28] ItemInfo
  /* this+0x5c */ char ItemLen
  /* this+0x5d */ unsigned long Money
  /* this+0x61 */ char[0x18] FromName
  /* this+0x79 */ unsigned long DeleteTime
}

struct PACKET_IZ_MAIL_REQ_SEND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char Result
}

struct PACKET_IZ_MEMORIALDUNGEON_COMMAND {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ enum PACKET_IZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command
}

struct PACKET_IZ_MEMORIALDUNGEON_INFO {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

  /* this+0xa */ char[0x3d] MemorialDungeonName
  /* this+0x47 */ unsigned long DestroyDate
  /* this+0x4b */ unsigned long EnterTimeOutDate
}

struct PACKET_IZ_MEMORIALDUNGEON_INFO2 {
  PACKET_IZ_PARTY_BROADCAST_VAR, offset = 0x0

  /* this+0xc */ unsigned long DestroyDate
  /* this+0x10 */ unsigned long EnterTimeOutDate
}

struct PACKET_IZ_MEMORIALDUNGEON_MSG {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

    /* this+0xa */ enum PACKET_IZ_MEMORIALDUNGEON_MSG::enumNotify Notify
  /* this+0xe */ char[0x3d] MemorialDungeonName
}

struct PACKET_IZ_MEMORIALDUNGEON_MSG2 {
  PACKET_IZ_PARTY_BROADCAST_VAR, offset = 0x0

    /* this+0xc */ enum PACKET_IZ_MEMORIALDUNGEON_MSG2::enumNotify Notify
}

struct PACKET_IZ_MEMORIALDUNGEON_NOTIFY {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

  /* this+0xa */ enum PACKET_ZC_MEMORIALDUNGEON_NOTIFY::enumTYPE Type
  /* this+0xe */ unsigned long EnterLimitDate
}

struct PACKET_IZ_MEMORIALDUNGEON_OPENSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bOpen
  /* this+0x3 */ unsigned long ToGID
  /* this+0x7 */ unsigned long ToAID
}

struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_INFO {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

  /* this+0xa */ char[0x3d] MemorialDungeonName
  /* this+0x47 */ short PriorityOrderNum
}

struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_INFO2 {
  PACKET_IZ_PARTY_BROADCAST_VAR, offset = 0x0

  /* this+0xc */ short PriorityOrderNum
}

struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_NOTIFY {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

  /* this+0xa */ short PriorityOrderNum
}

struct PACKET_IZ_MEMORIALDUNGEON_SYNC {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x3d] MemorialDungeonName
  /* this+0x3f */ unsigned long hPartyID
  /* this+0x43 */ char[0x18] partyName
  /* this+0x5b */ unsigned long ExistZSID
  /* this+0x5f */ unsigned long hMemorialDungeonID
  /* this+0x63 */ int Factor
  /* this+0x67 */ enum PACKET_IZ_MEMORIALDUNGEON_SYNC::enumEVENT Event
}

struct PACKET_IZ_MEMORIALDUNGEON_SYNC2 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long hPartyID
  /* this+0x8 */ char[0x18] partyName
  /* this+0x20 */ unsigned long ExistZSID
  /* this+0x24 */ unsigned long hMemorialDungeonID
  /* this+0x28 */ int Factor
  /* this+0x2c */ enum PACKET_IZ_MEMORIALDUNGEON_SYNC2::enumEVENT Event
}

struct PACKET_IZ_MEMORIALDUNGEON_VISA {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long ZSID
  /* this+0xe */ char[0x10] mapName
  /* this+0x1e */ int x
  /* this+0x22 */ int y
}

struct PACKET_IZ_MOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MoveType
  /* this+0x6 */ unsigned long SrcID
  /* this+0xa */ unsigned long DestID
  /* this+0xe */ int DestX
  /* this+0x12 */ int DestY
  /* this+0x16 */ char[0x10] MapName
  /* this+0x26 */ char[0x18] CharName
}

struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ int xPos
  /* this+0x36 */ int yPos
}

struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
}

struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_APPLY {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GID
  /* this+0xc */ char[0x18] EntryQueueName
  /* this+0x24 */ short ApplyType
}

struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
}

struct PACKET_IZ_NOTIFY_ENTRY_QUEUE_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] EntryQueueName
  /* this+0x1e */ int Ranking
}

struct PACKET_IZ_NOTIFY_LOBBY_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ char[0x18] LobbyName
  /* this+0x3a */ char[0x10] mapName
  /* this+0x4a */ int xPos
  /* this+0x4e */ int yPos
}

struct PACKET_IZ_NOTIFY_LOBBY_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ char[0x18] LobbyName
}

struct PACKET_IZ_NOTIFY_MAKERRANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
  /* this+0x4 */ unsigned long[0xa] GID
  /* this+0x2c */ char[0x18][0xa] charname
  /* this+0x11c */ int[0xa] point
}

struct PACKET_IZ_OTHER_ZONE_PC_SEND_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short msg
  /* this+0x4 */ unsigned long TargetAID
}

struct PACKET_IZ_PARTY_BOOKING_NOTIFY_DELETE {
  PACKET_ZI_PARTY_BOOKING_NOTIFY_DELETE, offset = 0x0

}

struct PACKET_IZ_PARTY_BOOKING_NOTIFY_INSERT {
  PACKET_ZI_PARTY_BOOKING_NOTIFY_INSERT, offset = 0x0

}

struct PACKET_IZ_PARTY_BOOKING_NOTIFY_UPDATE {
  PACKET_ZI_PARTY_BOOKING_NOTIFY_UPDATE, offset = 0x0

}

struct PACKET_IZ_PARTY_BROADCAST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
}

struct PACKET_IZ_PARTY_BROADCAST_VAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] groupName
}

struct PACKET_IZ_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long requestAID
  /* this+0x6 */ char[0x18] characterName
  /* this+0x1e */ enum PACKET_ZC_PARTY_JOIN_REQ_ACK::enumAnswer answer
}

struct PACKET_IZ_PING_LIVE {
  /* this+0x0 */ short PacketType
}

struct PACKET_IZ_REQ_DISORGANIZE_GUILD_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ int result
}

struct PACKET_IZ_REQ_EDIT_EXP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int monitornum
  /* this+0x6 */ int Exp
  /* this+0xa */ int Death
  /* this+0xe */ int Drop
}

struct PACKET_IZ_REQ_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ unsigned long expOption
  /* this+0xe */ unsigned char ItemPickupRule
  /* this+0xf */ unsigned char ItemDivisionRule
}

struct PACKET_IZ_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] groupName
}

struct PACKET_IZ_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x18] guildName
}

struct PACKET_IZ_REQ_JOIN_GUILD2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long ReqAID
  /* this+0xe */ char[0x18] guildName
}

struct PACKET_IZ_REQ_SERVERSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int packetNumber
  /* this+0x6 */ int monitorNum
}

struct PACKET_IZ_RESET_EFFECT_HIGH_RANKER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_IZ_RESULT_ENTRY_QUEUE_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char Result
  /* this+0x7 */ char[0x18] EntryQueueName
}

struct PACKET_IZ_RESULT_ENTRY_QUEUE_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char Result
  /* this+0x7 */ char[0x18] EntryQueueName
}

struct PACKET_IZ_RESULT_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char Result
  /* this+0x7 */ char[0x18] EntryQueueName
}

struct PACKET_IZ_RESULT_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char Result
  /* this+0x7 */ char[0x18] EntryQueueName
}

struct PACKET_IZ_RESULT_LOBBY_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char Result
  /* this+0x7 */ char[0x18] EntryQueueName
  /* this+0x1f */ char[0x18] LobbyName
}

struct PACKET_IZ_RESULT_LOBBY_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char Result
  /* this+0x7 */ char[0x18] EntryQueueName
  /* this+0x1f */ char[0x18] LobbyName
}

struct PACKET_IZ_RESULT_MAKE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned char result
}

struct PACKET_IZ_SEEK_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_IZ_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_IZ_SET_EFFECT_HIGH_RANKER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ int RankingType
}

struct PACKET_IZ_UPDATE_CHARGDID {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Type
  /* this+0x3 */ unsigned long GDID
  /* this+0x7 */ int emblemVer
  /* this+0xb */ int InterSID
  /* this+0xf */ unsigned long GID
  /* this+0x13 */ unsigned long AID
  /* this+0x17 */ int right
  /* this+0x1b */ bool isMaster
  /* this+0x1c */ char[0x18] GuildName
}

struct PACKET_IZ_UPDATE_CHARSTAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned long AID
  /* this+0xe */ int status
  /* this+0x12 */ short sex
  /* this+0x14 */ short head
  /* this+0x16 */ short headPalette
  /* this+0x18 */ short job
  /* this+0x1a */ int Level
}

struct PACKET_IZ_USER_COUNT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int count
}

struct PACKET_IZ_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long receiverAID
  /* this+0x8 */ unsigned long senderAID
  /* this+0xc */ char[0x18] sender
  /* this+0x24 */ char[0x18] senderAccountName
}

struct PACKET_IZ_WHISPER_2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long receiverAID
  /* this+0x8 */ unsigned long senderAID
  /* this+0xc */ char[0x18] sender
}

struct PACKET_MOB_HUNTING {
  /* this+0x0 */ unsigned long questID
  /* this+0x4 */ unsigned long mobGID
  /* this+0x8 */ short maxCount
  /* this+0xa */ short count
}

struct PACKET_NZ_CHECKPOINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned long CAID
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ char[0x10] mapName
}

struct PACKET_NZ_DIALOG_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned short length
  /* this+0x8 */ unsigned long CAID
}

struct PACKET_NZ_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned long CAID
  /* this+0xa */ unsigned short getItemITID
  /* this+0xc */ short getItemcount
  /* this+0xe */ unsigned short dropItemITID
  /* this+0x10 */ short dropItemcount
}

struct PACKET_NZ_NEWNPC {
  /* this+0x0 */ int NAID
  /* this+0x4 */ short xPos
  /* this+0x6 */ short yPos
  /* this+0x8 */ short spriteType
  /* this+0xa */ int RegenMinTime
  /* this+0xe */ int RegenMaxTime
  /* this+0x12 */ int RegenType
  /* this+0x16 */ int sizeType
  /* this+0x1a */ unsigned char npcType
  /* this+0x1b */ char direction
  /* this+0x1c */ char[0x10] mapName
  /* this+0x2c */ char[0x18] NPCName
  /* this+0x44 */ unsigned char xSize
  /* this+0x45 */ unsigned char ySize
  /* this+0x46 */ bool force
}

struct PACKET_PING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_REQ_REMAINTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int AID
}

struct PACKET_RES_REMAINTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int AID
  /* this+0x6 */ int Result
  /* this+0xa */ int ExpirationDate
  /* this+0xe */ int RemainTime
}

struct PACKET_SAVE_USING_TIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long TotalUsingTime
  /* this+0x6 */ unsigned long AID
}

struct PACKET_SC_ACK_ENCRYPTION {
  /* this+0x0 */ short PacketType
}

struct PACKET_SC_BILLING_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwAmountRemain
  /* this+0x6 */ unsigned long dwQuantityRemain
  /* this+0xa */ unsigned long dwReserved1
  /* this+0xe */ unsigned long dwReserved2
}

struct PACKET_SC_NOTIFY_BAN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_SERVER_ENTRY_ACK {
  /* this+0x0 */ short Header
  /* this+0x2 */ int AID
}

struct PACKET_XX_CONNECT {
  /* this+0x0 */ short PacketType
}

struct PACKET_XX_DISCONNECT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_ACCEPT_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long startTime
  /* this+0x6 */ unsigned char[0x3] PosDir
  /* this+0x9 */ unsigned char xSize
  /* this+0xa */ unsigned char ySize
}

struct PACKET_ZC_ACCEPT_ENTER2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long startTime
  /* this+0x6 */ unsigned char[0x3] PosDir
  /* this+0x9 */ unsigned char xSize
  /* this+0xa */ unsigned char ySize
  /* this+0xb */ short font
}

struct PACKET_ZC_ACCEPT_QUIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_ACK_ACCOUNTNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] name
}

struct PACKET_ZC_ACK_ADDITEM_TO_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_AUCTION_ADD_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_BAN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] charName
  /* this+0x1a */ char[0x28] reasonDesc
  /* this+0x42 */ char[0x18] account
}

struct PACKET_ZC_ACK_BAN_GUILD_SSO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] charName
  /* this+0x1a */ char[0x28] reasonDesc
}

struct PACKET_ZC_ACK_BATTLE_STATE_MONITOR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short PlayCount
  /* this+0x8 */ short BattleState
  /* this+0xa */ short TeamCount_A
  /* this+0xc */ short TeamCount_B
  /* this+0xe */ short MyCount
  /* this+0x10 */ short JoinTeam
}

struct PACKET_ZC_ACK_BEFORE_WORLD_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] WorldName
  /* this+0x1a */ char[0x18] CharName
}

struct PACKET_ZC_ACK_CHANGE_GUILD_POSITIONINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_ACK_CLAN_LEAVE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_ACK_CREATE_CHATROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x28] reasonDesc
}

struct PACKET_ZC_ACK_DISORGANIZE_GUILD_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int reason
}

struct PACKET_ZC_ACK_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
}

struct PACKET_ZC_ACK_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
}

struct PACKET_ZC_ACK_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_EXCHANGE_ITEM2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short level
}

struct PACKET_ZC_ACK_GIVE_MANNER_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long result
}

struct PACKET_ZC_ACK_GUILD_MEMBER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct GUILD_MEMBER_INFO Info

}

struct PACKET_ZC_ACK_GUILD_MENUINTERFACE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int guildMemuFlag
}

struct PACKET_ZC_ACK_ITEMCOMPOSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short equipIndex
  /* this+0x4 */ short cardIndex
  /* this+0x6 */ unsigned char result
}

struct PACKET_ZC_ACK_ITEMIDENTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_ITEMLIST_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long makerAID
  /* this+0x8 */ unsigned long StoreID
  /* this+0xc */ int limitZeny
}

struct PACKET_ZC_ACK_ITEMREFINING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short result
  /* this+0x4 */ short itemIndex
  /* this+0x6 */ short refiningLevel
}

struct PACKET_ZC_ACK_ITEMREPAIR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_LEAVE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] charName
  /* this+0x1a */ char[0x28] reasonDesc
}

struct PACKET_ZC_ACK_MAIL_ADD_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_MAIL_DELETE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
  /* this+0x6 */ unsigned short Result
}

struct PACKET_ZC_ACK_MAIL_RETURN {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
  /* this+0x6 */ short Result
}

struct PACKET_ZC_ACK_MAKE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_MERGE_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short item_index
  /* this+0x4 */ unsigned short item_count
  /* this+0x6 */ unsigned char Result
}

struct PACKET_ZC_ACK_PARTY_NAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long PartyID
  /* this+0x6 */ char[0x18] szPartyName
}

struct PACKET_ZC_ACK_PVPPOINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ struct PVPINFO PVP

}

struct PACKET_ZC_ACK_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short RankingType
  /* this+0x4 */ char[0x18][0xa] CharName
  /* this+0xf4 */ int[0xa] Point
  /* this+0x11c */ int myPoint
}

struct PACKET_ZC_ACK_REMEMBER_WARPPOINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char errorCode
}

struct PACKET_ZC_ACK_REQMAKINGITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short result
  /* this+0x4 */ unsigned short ITID
}

struct PACKET_ZC_ACK_REQNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] CName
}

struct PACKET_ZC_ACK_REQNAMEALL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] CName
  /* this+0x1e */ char[0x18] PName
  /* this+0x36 */ char[0x18] GName
  /* this+0x4e */ char[0x18] RName
}

struct PACKET_ZC_ACK_REQNAME_BYGID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] CName
}

struct PACKET_ZC_ACK_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char answer
}

struct PACKET_ZC_ACK_REQ_CHANGE_MEMBERS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_ACK_REQ_DISCONNECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short result
}

struct PACKET_ZC_ACK_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] characterName
  /* this+0x1a */ unsigned char answer
}

struct PACKET_ZC_ACK_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char answer
}

struct PACKET_ZC_ACK_SCHEDULER_CASHITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short ItemCount
  /* this+0x6 */ short TabCode
}

struct PACKET_ZC_ACK_SE_CASH_ITEM_LIST {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short item_count
}

struct PACKET_ZC_ACK_SE_CASH_ITEM_LIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long OpenIdentity
  /* this+0x8 */ short item_count
}

struct PACKET_ZC_ACK_STATUS_GM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char str
  /* this+0x3 */ unsigned char standardStr
  /* this+0x4 */ unsigned char agi
  /* this+0x5 */ unsigned char standardAgi
  /* this+0x6 */ unsigned char vit
  /* this+0x7 */ unsigned char standardVit
  /* this+0x8 */ unsigned char Int
  /* this+0x9 */ unsigned char standardInt
  /* this+0xa */ unsigned char dex
  /* this+0xb */ unsigned char standardDex
  /* this+0xc */ unsigned char luk
  /* this+0xd */ unsigned char standardLuk
  /* this+0xe */ short attPower
  /* this+0x10 */ short refiningPower
  /* this+0x12 */ short max_mattPower
  /* this+0x14 */ short min_mattPower
  /* this+0x16 */ short itemdefPower
  /* this+0x18 */ short plusdefPower
  /* this+0x1a */ short mdefPower
  /* this+0x1c */ short plusmdefPower
  /* this+0x1e */ short hitSuccessValue
  /* this+0x20 */ short avoidSuccessValue
  /* this+0x22 */ short plusAvoidSuccessValue
  /* this+0x24 */ short criticalSuccessValue
  /* this+0x26 */ short ASPD
  /* this+0x28 */ short plusASPD
}

struct PACKET_ZC_ACK_TAKEOFF_EQUIP_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long wearLocation
    /* this+0x8 */ unsigned char result
}

struct PACKET_ZC_ACK_TOUSESKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long NUM
  /* this+0x8 */ bool result
  /* this+0x9 */ unsigned char cause
  public int GetItemID()
  public int GetItemNum()
  public void SetItem(const int, const int)
  public int GetComboSKID()
  public void SetComboSkillID(const int)
  public void SetSpiritsNum(const int)
  public int GetSpiritsNum()
  public void SetWeaponClass(const int)
  public int GetWeaponClass()
}

struct PACKET_ZC_ACK_WEAPONREFINE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int msg
  /* this+0x6 */ unsigned short ITID
}

struct PACKET_ZC_ACK_WEAR_EQUIP_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long wearLocation
  /* this+0x8 */ unsigned short wItemSpriteNumber
    /* this+0xa */ unsigned char result
}

struct PACKET_ZC_ACK_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACTION_FAILURE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short errorCode
}

struct PACKET_ZC_ACTIVE_QUEST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long questID
  /* this+0x6 */ bool active
}

struct PACKET_ZC_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int count
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_EXCHANGE_ITEM2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ int count
  /* this+0x9 */ bool IsIdentified
  /* this+0xa */ bool IsDamaged
  /* this+0xb */ unsigned char refiningLevel
  /* this+0xc */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_FRIENDS_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GID
  /* this+0xc */ char[0x18] Name
}

struct PACKET_ZC_ADD_ITEM_TO_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
  /* this+0x8 */ unsigned short ITID
  /* this+0xa */ bool IsIdentified
  /* this+0xb */ bool IsDamaged
  /* this+0xc */ unsigned char refiningLevel
  /* this+0xd */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_ITEM_TO_CART2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
  /* this+0x8 */ unsigned short ITID
  /* this+0xa */ unsigned char type
  /* this+0xb */ bool IsIdentified
  /* this+0xc */ bool IsDamaged
  /* this+0xd */ unsigned char refiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_ITEM_TO_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
  /* this+0x8 */ unsigned short ITID
  /* this+0xa */ bool IsIdentified
  /* this+0xb */ bool IsDamaged
  /* this+0xc */ unsigned char refiningLevel
  /* this+0xd */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_ITEM_TO_STORE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
  /* this+0x8 */ unsigned short ITID
  /* this+0xa */ unsigned char type
  /* this+0xb */ bool IsIdentified
  /* this+0xc */ bool IsDamaged
  /* this+0xd */ unsigned char refiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_MEMBER_TO_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long Role
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned char state
  /* this+0xf */ char[0x18] groupName
  /* this+0x27 */ char[0x18] characterName
  /* this+0x3f */ char[0x10] mapName
}

struct PACKET_ZC_ADD_MEMBER_TO_GROUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long Role
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned char state
  /* this+0xf */ char[0x18] groupName
  /* this+0x27 */ char[0x18] characterName
  /* this+0x3f */ char[0x10] mapName
  /* this+0x4f */ unsigned char ItemPickupRule
  /* this+0x50 */ unsigned char ItemDivisionRule
}

struct PACKET_ZC_ADD_QUEST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long questID
  /* this+0x6 */ bool active
  /* this+0x7 */ long quest_svrTime
  /* this+0xb */ long quest_endTime
  /* this+0xf */ short count
  /* this+0x11 */ struct PACKET_ZC_MISSION_HUNT[0x3] hunt
}

struct PACKET_ZC_ADD_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct RELATED_GUILD_INFO Info

}

struct PACKET_ZC_ADD_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct SKILLINFO data

}

struct PACKET_ZC_AID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_ALCHEMIST_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Point
  /* this+0x6 */ int TotalPoint
}

struct PACKET_ZC_ALCHEMIST_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18][0xa] Name
  /* this+0xf2 */ int[0xa] Point
}

struct PACKET_ZC_ALL_QUEST_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int questCount
}

struct PACKET_ZC_ALL_QUEST_LIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int QuestCount
}

struct PACKET_ZC_ALL_QUEST_MISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int count
}

struct PACKET_ZC_ATTACK_FAILURE_FOR_DISTANCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
  /* this+0x6 */ short targetXPos
  /* this+0x8 */ short targetYPos
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ short currentAttRange
}

struct PACKET_ZC_ATTACK_RANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short currentAttRange
}

struct PACKET_ZC_AUCTION_ACK_MY_SELL_STOP {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_AUCTION_ITEM_REQ_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ int MaxPage
  /* this+0x8 */ int Number
}

struct PACKET_ZC_AUCTION_RESULT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_ZC_AUCTION_WINDOWS {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ int Type
}

struct PACKET_ZC_AUTORUN_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct SKILLINFO data

}

struct PACKET_ZC_AUTOSPELLLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int[0x7] SKID
}

struct PACKET_ZC_BABYMSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MsgNo
}

struct PACKET_ZC_BAN_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_BATTLEFIELD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long accountID
  /* this+0x8 */ char[0x18] name
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_CAMPINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long accountID
  /* this+0x6 */ char[0x18] name
  /* this+0x1e */ short camp
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_HP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long accountID
  /* this+0x6 */ char[0x18] name
  /* this+0x1e */ short hp
  /* this+0x20 */ short maxHp
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short pointCampA
  /* this+0x4 */ short pointCampB
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_POSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long accountID
  /* this+0x6 */ char[0x18] name
  /* this+0x1e */ unsigned short job
  /* this+0x20 */ short x
  /* this+0x22 */ short y
}

struct PACKET_ZC_BATTLE_FIELD_LIST {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Count
  /* this+0x6 */ short ack_type
}

struct PACKET_ZC_BATTLE_JOIN_DISABLE_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool Enable
}

struct PACKET_ZC_BATTLE_JOIN_NOTI_DEFER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
}

struct PACKET_ZC_BATTLE_NOTI_START_STEP {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short Result
}

struct PACKET_ZC_BLACKSMITH_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Point
  /* this+0x6 */ int TotalPoint
}

struct PACKET_ZC_BLACKSMITH_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18][0xa] Name
  /* this+0xf2 */ int[0xa] Point
}

struct PACKET_ZC_BLADESTOP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long srcAID
  /* this+0x6 */ unsigned long destAID
  /* this+0xa */ int flag
}

struct PACKET_ZC_BOSS_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char infoType
  /* this+0x3 */ int xPos
  /* this+0x7 */ int yPos
  /* this+0xb */ unsigned short minHour
  /* this+0xd */ unsigned short minMinute
  /* this+0xf */ unsigned short maxHour
  /* this+0x11 */ unsigned short maxMinute
  /* this+0x13 */ char[0x33] name
}

struct PACKET_ZC_BROADCAST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_BROADCAST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long fontColor
  /* this+0x8 */ short fontType
  /* this+0xa */ short fontSize
  /* this+0xc */ short fontAlign
  /* this+0xe */ short fontY
}

struct PACKET_ZC_BROADCAST4 {
  /* this+0x0 */ short PakcetType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char Msgtype
  /* this+0x5 */ unsigned long ColorRGB
}

struct PACKET_ZC_BROADCASTING_SPECIAL_ITEM_OBTAIN {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ unsigned short ItemID
}

struct PACKET_ZC_BUYING_STORE_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
  /* this+0x6 */ char[0x50] storeName
}

struct PACKET_ZC_CANCEL_BATTLE_FIELD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short Result
}

struct PACKET_ZC_CANCEL_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_CARTOFF {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_CART_EQUIPMENT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_EQUIPMENT_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_EQUIPMENT_ITEMLIST3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_ITEMLIST_EQUIP {
  PACKET_ZC_INVENTORY_ITEMLIST_EQUIP, offset = 0x0

}

struct PACKET_ZC_CART_ITEMLIST_EQUIP_V5 {
  PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5, offset = 0x0

}

struct PACKET_ZC_CART_ITEMLIST_NORMAL {
  PACKET_ZC_INVENTORY_ITEMLIST_NORMAL, offset = 0x0

}

struct PACKET_ZC_CART_ITEMLIST_NORMAL_V5 {
  PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5, offset = 0x0

}

struct PACKET_ZC_CART_NORMAL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_NORMAL_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_NORMAL_ITEMLIST3 {
  PACKET_ZC_NORMAL_ITEMLIST3, offset = 0x0

}

struct PACKET_ZC_CASH_ITEM_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned short ITID
}

struct PACKET_ZC_CASH_TIME_COUNTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned long RemainSecond
}

struct PACKET_ZC_CHANGESTATE_MER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char type
  /* this+0x3 */ char state
  /* this+0x4 */ int GID
  /* this+0x8 */ int data
}

struct PACKET_ZC_CHANGESTATE_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char type
  /* this+0x3 */ int GID
  /* this+0x7 */ int data
}

struct PACKET_ZC_CHANGE_CHATROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long roomID
  /* this+0xc */ short maxcount
  /* this+0xe */ short curcount
  /* this+0x10 */ unsigned char type
}

struct PACKET_ZC_CHANGE_DIRECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short headDir
  /* this+0x8 */ unsigned char dir
}

struct PACKET_ZC_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long OldMasterAID
  /* this+0x6 */ unsigned long NewMasterAID
}

struct PACKET_ZC_CHANGE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GDID
  /* this+0xa */ short emblemVersion
}

struct PACKET_ZC_CLANINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int EmblemNum
  /* this+0x8 */ char[0x18] ClanName
  /* this+0x20 */ char[0x18] Mastername
  /* this+0x38 */ char[0x10] ManageMap
  /* this+0x48 */ unsigned char Num_AllyClan
  /* this+0x49 */ unsigned char Num_HostileClan
}

struct PACKET_ZC_CLEAR_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_CLOSE_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_CLOSE_STORE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_COMBODELAY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long delayTime
}

struct PACKET_ZC_COMPASS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ int type
  /* this+0xa */ int xPos
  /* this+0xe */ int yPos
  /* this+0x12 */ unsigned char id
  /* this+0x13 */ unsigned long color
}

struct PACKET_ZC_CONCLUDE_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char who
}

struct PACKET_ZC_CONFIG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_CZ_CONFIG::enumConfig Config
  /* this+0x6 */ int Value
}

struct PACKET_ZC_CONFIG_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bOpenEquipmentWin
}

struct PACKET_ZC_CONGRATULATION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_COSTUME_SPRITE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ int value
}

struct PACKET_ZC_COUPLENAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CoupleName
}

struct PACKET_ZC_COUPLESTATUS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long statusType
  /* this+0x6 */ int defaultStatus
  /* this+0xa */ int plusStatus
}

struct PACKET_ZC_DEATH_QUESTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Qcategory
  /* this+0x4 */ short Qnum
}

struct PACKET_ZC_DELETEITEM_FROM_MCSTORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ short count
}

struct PACKET_ZC_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_ZC_DELETE_ITEM_FROM_BODY {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short DeleteType
  /* this+0x4 */ unsigned short Index
  /* this+0x6 */ short Count
}

struct PACKET_ZC_DELETE_ITEM_FROM_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_ZC_DELETE_ITEM_FROM_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_ZC_DELETE_MEMBER_FROM_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] characterName
  /* this+0x1e */ unsigned char result
}

struct PACKET_ZC_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long OpponentGDID
  /* this+0x6 */ int Relation
}

struct PACKET_ZC_DEL_QUEST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long questID
}

struct PACKET_ZC_DESTROY_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long roomID
}

struct PACKET_ZC_DEVOTIONLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long myAID
  /* this+0x6 */ unsigned long[0x5] AID
  /* this+0x1a */ short range
}

struct PACKET_ZC_DISAPPEAR_BUYING_STORE_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
}

struct PACKET_ZC_DISAPPEAR_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
}

struct PACKET_ZC_DISPEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_DIVORCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
}

struct PACKET_ZC_EFST_SET_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short hEFST
  /* this+0x8 */ unsigned long Time
  /* this+0xc */ int Val1
  /* this+0x10 */ int Val2
  /* this+0x14 */ int Val3
}

struct PACKET_ZC_EFST_SET_ENTER2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short hEFST
  /* this+0x8 */ unsigned long MaxMS
  /* this+0xc */ unsigned long Time
  /* this+0x10 */ int Val1
  /* this+0x14 */ int Val2
  /* this+0x18 */ int Val3
}

struct PACKET_ZC_EL_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int AID
  /* this+0x6 */ int hp
  /* this+0xa */ int maxHP
  /* this+0xe */ int sp
  /* this+0x12 */ int maxSP
}

struct PACKET_ZC_EL_PAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short var
  /* this+0x4 */ int value
}

struct PACKET_ZC_EMOTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
}

struct PACKET_ZC_ENTER_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long roomID
}

struct PACKET_ZC_ENTRY_QUEUE_INIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_EQUIPITEM_DAMAGED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short wearLocation
  /* this+0x4 */ unsigned long accountID
}

struct PACKET_ZC_EQUIPMENT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_EQUIPMENT_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_EQUIPMENT_ITEMLIST3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_EQUIPWIN_MICROSCOPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ short job
  /* this+0x1e */ short head
  /* this+0x20 */ short accessory
  /* this+0x22 */ short accessory2
  /* this+0x24 */ short accessory3
  /* this+0x26 */ short headpalette
  /* this+0x28 */ short bodypalette
  /* this+0x2a */ unsigned char sex
}

struct PACKET_ZC_EQUIPWIN_MICROSCOPE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ short job
  /* this+0x1e */ short head
  /* this+0x20 */ short accessory
  /* this+0x22 */ short accessory2
  /* this+0x24 */ short accessory3
  /* this+0x26 */ short robe
  /* this+0x28 */ short headpalette
  /* this+0x2a */ short bodypalette
  /* this+0x2c */ unsigned char sex
}

struct PACKET_ZC_EQUIPWIN_MICROSCOPE_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ short job
  /* this+0x1e */ short head
  /* this+0x20 */ short accessory
  /* this+0x22 */ short accessory2
  /* this+0x24 */ short accessory3
  /* this+0x26 */ short robe
  /* this+0x28 */ short headpalette
  /* this+0x2a */ short bodypalette
  /* this+0x2c */ unsigned char sex
}

struct PACKET_ZC_EQUIP_ARROW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
}

struct PACKET_ZC_ES_NOTI_MYINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short esNo
  /* this+0x4 */ char[0x36] esname
}

struct PACKET_ZC_EXCHANGEITEM_UNDO {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_EXEC_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_FAILED_GET_ITEM_FROM_ZONEDA {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_FAILED_OPEN_BUYING_STORE_TO_BUYER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ int total_weight
}

struct PACKET_ZC_FAILED_TRADE_BUYING_STORE_TO_BUYER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_FAILED_TRADE_BUYING_STORE_TO_SELLER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned short ITID
}

struct PACKET_ZC_FASTMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short targetXpos
  /* this+0x8 */ short targetYpos
}

struct PACKET_ZC_FATIGUE_CHN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Level
  /* this+0x3 */ unsigned long TotalPlayTime
}

struct PACKET_ZC_FEED_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char cRet
  /* this+0x3 */ unsigned short ITID
}

struct PACKET_ZC_FORMATSTRING_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned short msg
}

struct PACKET_ZC_FRIENDS_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_FRIENDS_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ bool State
}

struct PACKET_ZC_GAMEGUARD_LINGO_KEY {
  /* this+0x0 */ short packetType
  /* this+0x2 */ struct PGG_LINGO_KEY_TEMP lingoKey

}

struct PACKET_ZC_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long[0x4] AuthData
}

struct PACKET_ZC_GANGSI_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Point
  /* this+0x6 */ int TotalPoint
  /* this+0xa */ short PacketSwitch
}

struct PACKET_ZC_GANGSI_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18][0xa] Name
  /* this+0xf2 */ int[0xa] Point
  /* this+0x11a */ short PacketSwitch
}

struct PACKET_ZC_GPK_AUTH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_GPK_DYNCODE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_GROUPINFO_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long expOption
}

struct PACKET_ZC_GROUP_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] groupName
}

struct PACKET_ZC_GUILD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int GDID
  /* this+0x8 */ int emblemVersion
}

struct PACKET_ZC_GUILD_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GDID
  /* this+0x6 */ int level
  /* this+0xa */ int userNum
  /* this+0xe */ int maxUserNum
  /* this+0x12 */ int userAverageLevel
  /* this+0x16 */ int exp
  /* this+0x1a */ int maxExp
  /* this+0x1e */ int point
  /* this+0x22 */ int honor
  /* this+0x26 */ int virtue
  /* this+0x2a */ int emblemVersion
  /* this+0x2e */ char[0x18] guildname
  /* this+0x46 */ char[0x18] masterName
  /* this+0x5e */ char[0x10] manageLand
}

struct PACKET_ZC_GUILD_INFO2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GDID
  /* this+0x6 */ int level
  /* this+0xa */ int userNum
  /* this+0xe */ int maxUserNum
  /* this+0x12 */ int userAverageLevel
  /* this+0x16 */ int exp
  /* this+0x1a */ int maxExp
  /* this+0x1e */ int point
  /* this+0x22 */ int honor
  /* this+0x26 */ int virtue
  /* this+0x2a */ int emblemVersion
  /* this+0x2e */ char[0x18] guildname
  /* this+0x46 */ char[0x18] masterName
  /* this+0x5e */ char[0x10] manageLand
  /* this+0x6e */ int zeny
}

struct PACKET_ZC_GUILD_MEMBER_MAP_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_ZC_GUILD_NOTICE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x3c] subject
  /* this+0x3e */ char[0x78] notice
}

struct PACKET_ZC_GUILD_SKILLINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short skillPoint
}

struct PACKET_ZC_GUILD_ZENY_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ret
}

struct PACKET_ZC_HACKSH_CPX_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short nLength
  /* this+0x6 */ int Ident
}

struct PACKET_ZC_HACKSH_ERROR_MSG {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short errorType
}

struct PACKET_ZC_HIGHJUMP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_HO_PAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short var
  /* this+0x4 */ int value
}

struct PACKET_ZC_HP_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int HP
  /* this+0xa */ int MaxHP
}

struct PACKET_ZC_HUNTINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Len
}

struct PACKET_ZC_HUNTING_QUEST_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_INFO_REMAINTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Type
  /* this+0x6 */ int RemainTime
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ unsigned short location
  /* this+0x7 */ unsigned short WearState
  /* this+0x9 */ unsigned char RefiningLevel
  /* this+0xa */ struct EQUIPSLOTINFO slot

  /* this+0x12 */ long HireExpireDate
  /* this+0x16 */ unsigned short bindOnEquipType
  /* this+0x18 */ unsigned short wItemSpriteNumber
    /* this+0x1a */ struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP::ITEM::<unnamed-type-Flag> Flag

}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP::ITEM::<unnamed-type-Flag> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char IsIdentified
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char IsDamaged
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned char bPlaceETCTab
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ unsigned long location
  /* this+0x9 */ unsigned long WearState
  /* this+0xd */ unsigned char RefiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

  /* this+0x16 */ long HireExpireDate
  /* this+0x1a */ unsigned short bindOnEquipType
  /* this+0x1c */ unsigned short wItemSpriteNumber
    /* this+0x1e */ struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5::ITEM::<unnamed-type-Flag> Flag

}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5::ITEM::<unnamed-type-Flag> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char IsIdentified
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char IsDamaged
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned char bPlaceETCTab
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ short count
  /* this+0x7 */ unsigned short WearState
  /* this+0x9 */ struct EQUIPSLOTINFO slot

  /* this+0x11 */ long HireExpireDate
    /* this+0x15 */ struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL::ITEM::<unnamed-type-Flag> Flag

}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL::ITEM::<unnamed-type-Flag> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char IsIdentified
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char PlaceETCTab
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ short count
  /* this+0x7 */ unsigned long WearState
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ long HireExpireDate
    /* this+0x17 */ struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5::ITEM::<unnamed-type-Flag> Flag

}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5::ITEM::<unnamed-type-Flag> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char IsIdentified
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char PlaceETCTab
}

struct PACKET_ZC_INVENTORY_TAB {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ bool NORMALorPRIVATE
}

struct PACKET_ZC_IRMAIL_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct IRMAILID MailID

  public void PACKET_ZC_IRMAIL_NOTIFY()
}

struct PACKET_ZC_IRMAIL_SEND_RES {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_ZC_ISVR_DISCONNECT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_ITEMCOMPOSITION_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_ITEMIDENTIFY_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_ITEMLISTWIN_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ enum ItemListWinPacket::Type Type
}

struct PACKET_ZC_ITEM_DELETE_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ short count
  /* this+0x6 */ int zeny
}

struct PACKET_ZC_ITEM_DISAPPEAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_ZC_ITEM_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ short xPos
  /* this+0xb */ short yPos
  /* this+0xd */ short count
  /* this+0xf */ unsigned char subX
  /* this+0x10 */ unsigned char subY
  public void Crypt()
}

struct PACKET_ZC_ITEM_FALL_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ short xPos
  /* this+0xb */ short yPos
  /* this+0xd */ unsigned char subX
  /* this+0xe */ unsigned char subY
  /* this+0xf */ short count
  public void Crypt()
}

struct PACKET_ZC_ITEM_FALL_ENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ unsigned short type
  /* this+0xa */ bool IsIdentified
  /* this+0xb */ short xPos
  /* this+0xd */ short yPos
  /* this+0xf */ unsigned char subX
  /* this+0x10 */ unsigned char subY
  /* this+0x11 */ short count
}

struct PACKET_ZC_ITEM_PICKUP_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ unsigned short count
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ unsigned short location
  /* this+0x15 */ unsigned char type
  /* this+0x16 */ unsigned char result
}

struct PACKET_ZC_ITEM_PICKUP_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ unsigned short count
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ unsigned short location
  /* this+0x15 */ unsigned char type
  /* this+0x16 */ unsigned char result
  /* this+0x17 */ long HireExpireDate
}

struct PACKET_ZC_ITEM_PICKUP_ACK3 {
  PACKET_ZC_ITEM_PICKUP_ACK2, offset = 0x0

  /* this+0x1b */ unsigned short bindOnEquipType
}

struct PACKET_ZC_ITEM_PICKUP_ACK_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ unsigned short count
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ unsigned long location
  /* this+0x17 */ unsigned char type
  /* this+0x18 */ unsigned char result
  /* this+0x19 */ long HireExpireDate
  /* this+0x1d */ unsigned short bindOnEquipType
}

struct PACKET_ZC_ITEM_PICKUP_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long accountID
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ unsigned short location
  /* this+0x15 */ unsigned char type
}

struct PACKET_ZC_ITEM_THROW_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ short count
}

struct PACKET_ZC_JOIN_BATTLE_FIELD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short JoinTeam
  /* this+0x8 */ short Result
}

struct PACKET_ZC_LESSEFFECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int isLess
}

struct PACKET_ZC_LONGPAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short varID
  /* this+0x4 */ int amount
}

struct PACKET_ZC_MACRO_ITEMPICKUP_FAIL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_ZC_MAIL_RECEIVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long MailID
  /* this+0x6 */ char[0x28] Header
  /* this+0x2e */ char[0x18] FromName
}

struct PACKET_ZC_MAIL_REQ_GET_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_ZC_MAIL_REQ_GET_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ int MailNumber
}

struct PACKET_ZC_MAIL_REQ_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ int MailID
  /* this+0x8 */ char[0x28] Header
  /* this+0x30 */ char[0x18] FromName
  /* this+0x48 */ long DeleteTime
  /* this+0x4c */ unsigned long Money
  /* this+0x50 */ int count
  /* this+0x54 */ unsigned short ITID
  /* this+0x56 */ unsigned short Type
  /* this+0x58 */ bool IsIdentified
  /* this+0x59 */ bool IsDamaged
  /* this+0x5a */ unsigned char refiningLevel
  /* this+0x5b */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_MAIL_REQ_SEND {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_ZC_MAIL_WINDOWS {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ int Type
}

struct PACKET_ZC_MAKABLEITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MAKINGARROW_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_MAKINGITEM_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_MAPPROPERTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ short type
}

struct PACKET_ZC_MAPPROPERTY_R2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
    /* this+0x4 */ struct PACKET_ZC_MAPPROPERTY_R2::tagNotifyProperty NotifyProperty

}

struct PACKET_ZC_MAPPROPERTY_R2::tagNotifyProperty {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned int bPARTY
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned int bGUILD
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned int bSIEGE
  /* this(bf)+0x0:0x3 len(0x1) */ unsigned int bUSE_SIMPLE_EFFECT
  /* this(bf)+0x0:0x4 len(0x1) */ unsigned int bDISABLE_LOCKON
  /* this(bf)+0x0:0x5 len(0x1) */ unsigned int bCOUNT_PK
  /* this(bf)+0x0:0x6 len(0x1) */ unsigned int bNO_PARTY_FORMATION
  /* this(bf)+0x0:0x7 len(0x1) */ unsigned int bBATTLEFIELD
  /* this(bf)+0x0:0x8 len(0x1) */ unsigned int bDISABLE_COSTUMEITEM
  /* this(bf)+0x0:0x9 len(0x1) */ unsigned int bUSECART
  /* this(bf)+0x0:0xa len(0x1) */ unsigned int bSUNMOONSTAR_MIRACLE
  /* this(bf)+0x0:0xb len(0x15) */ unsigned int unused
}

struct PACKET_ZC_MCSTORE_NOTMOVEITEM_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MEMBERMGR_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MEMBER_ADD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct GUILD_MEMBER_INFO Info

}

struct PACKET_ZC_MEMBER_EXIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short curcount
  /* this+0x4 */ char[0x18] name
  /* this+0x1c */ unsigned char type
}

struct PACKET_ZC_MEMBER_NEWENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short curcount
  /* this+0x4 */ char[0x18] name
}

struct PACKET_ZC_MEMORIALDUNGEON_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x3d] MemorialDungeonName
  /* this+0x3f */ unsigned long DestroyDate
  /* this+0x43 */ unsigned long EnterTimeOutDate
}

struct PACKET_ZC_MEMORIALDUNGEON_NOTIFY {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_ZC_MEMORIALDUNGEON_NOTIFY::enumTYPE Type
  /* this+0x6 */ unsigned long EnterLimitDate
}

struct PACKET_ZC_MEMORIALDUNGEON_SUBSCRIPTION_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x3d] MemorialDungeonName
  /* this+0x3f */ short PriorityOrderNum
}

struct PACKET_ZC_MEMORIALDUNGEON_SUBSCRIPTION_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PriorityOrderNum
}

struct PACKET_ZC_MENU_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long NAID
}

struct PACKET_ZC_MERGE_ITEM_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MER_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int AID
  /* this+0x6 */ short atk
  /* this+0x8 */ short Matk
  /* this+0xa */ short hit
  /* this+0xc */ short critical
  /* this+0xe */ short def
  /* this+0x10 */ short Mdef
  /* this+0x12 */ short flee
  /* this+0x14 */ short aspd
  /* this+0x16 */ char[0x18] name
  /* this+0x2e */ short level
  /* this+0x30 */ int hp
  /* this+0x34 */ int maxHP
  /* this+0x38 */ int sp
  /* this+0x3c */ int maxSP
  /* this+0x40 */ long ExpireDate
  /* this+0x44 */ short faith
  /* this+0x46 */ int toal_call_num
  /* this+0x4a */ int approval_monster_kill_counter
  /* this+0x4e */ short ATKRange
}

struct PACKET_ZC_MER_PAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short var
  /* this+0x4 */ int value
}

struct PACKET_ZC_MER_PROPERTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short atk
  /* this+0x4 */ short Matk
  /* this+0x6 */ short hit
  /* this+0x8 */ short critical
  /* this+0xa */ short def
  /* this+0xc */ short Mdef
  /* this+0xe */ short flee
  /* this+0x10 */ short aspd
  /* this+0x12 */ char[0x18] name
  /* this+0x2a */ short level
  /* this+0x2c */ short hp
  /* this+0x2e */ short maxHP
  /* this+0x30 */ short sp
  /* this+0x32 */ short maxSP
  /* this+0x34 */ long ExpireDate
  /* this+0x38 */ short faith
  /* this+0x3a */ int toal_call_num
  /* this+0x3e */ int approval_monster_kill_counter
}

struct PACKET_ZC_MICROSCOPE {
  PACKET_ZC_INVENTORY_ITEMLIST_EQUIP, offset = 0x0

  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ short job
  /* this+0x1e */ short head
  /* this+0x20 */ short accessory
  /* this+0x22 */ short accessory2
  /* this+0x24 */ short accessory3
  /* this+0x26 */ short robe
  /* this+0x28 */ short headpalette
  /* this+0x2a */ short bodypalette
  /* this+0x2c */ unsigned char sex
}

struct PACKET_ZC_MILLENNIUMSHIELD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short num
  /* this+0x8 */ short state
}

struct PACKET_ZC_MISSION_HUNT {
  /* this+0x0 */ unsigned long mobGID
  /* this+0x4 */ short huntCount
  /* this+0x6 */ char[0x18] mobName
}

struct PACKET_ZC_MONSTER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short job
  /* this+0x4 */ short level
  /* this+0x6 */ short size
  /* this+0x8 */ int hp
  /* this+0xc */ short def
  /* this+0xe */ short raceType
  /* this+0x10 */ short mdefPower
  /* this+0x12 */ short property
    /* this+0x14 */ struct PACKET_ZC_MONSTER_INFO::<unnamed-type-propertyTable> propertyTable

}

struct PACKET_ZC_MONSTER_INFO::<unnamed-type-propertyTable> {
  /* this+0x0 */ unsigned char water
  /* this+0x1 */ unsigned char earth
  /* this+0x2 */ unsigned char fire
  /* this+0x3 */ unsigned char wind
  /* this+0x4 */ unsigned char poison
  /* this+0x5 */ unsigned char saint
  /* this+0x6 */ unsigned char dark
  /* this+0x7 */ unsigned char mental
  /* this+0x8 */ unsigned char undead
}

struct PACKET_ZC_MONSTER_TALK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char stateId
  /* this+0x7 */ unsigned char skillId
  /* this+0x8 */ unsigned char arg1
}

struct PACKET_ZC_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short msg
}

struct PACKET_ZC_MSG_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ int MSGID
}

struct PACKET_ZC_MSG_STATE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ bool state
}

struct PACKET_ZC_MSG_STATE_CHANGE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ bool state
  /* this+0x9 */ unsigned long RemainMS
  /* this+0xd */ int[0x3] val
}

struct PACKET_ZC_MSG_STATE_CHANGE3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ bool state
  /* this+0x9 */ unsigned long MaxMS
  /* this+0xd */ unsigned long RemainMS
  /* this+0x11 */ int[0x3] val
}

struct PACKET_ZC_MSG_VALUE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short msg
  /* this+0x4 */ int value
}

struct PACKET_ZC_MVP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_MVP_GETTING_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
}

struct PACKET_ZC_MVP_GETTING_SPECIAL_EXP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long exp
}

struct PACKET_ZC_MYGUILD_BASIC_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MYITEMLIST_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ int limitZeny
}

struct PACKET_ZC_NAVIGATION_ACTIVE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Type
  /* this+0x3 */ unsigned char SetType
  /* this+0x4 */ bool Hide
  /* this+0x5 */ char[0x10] MapName
  /* this+0x15 */ short xPos
  /* this+0x17 */ short yPos
  /* this+0x19 */ short sprIndex
}

struct PACKET_ZC_NORMAL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_NORMAL_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_NORMAL_ITEMLIST3 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_NORMAL_ITEMLIST3::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ short count
  /* this+0x8 */ unsigned short WearState
  /* this+0xa */ struct EQUIPSLOTINFO slot

  /* this+0x12 */ long HireExpireDate
}

struct PACKET_ZC_NOTIFY_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned long startTime
  /* this+0xe */ int attackMT
  /* this+0x12 */ int attackedMT
  /* this+0x16 */ short damage
  /* this+0x18 */ short count
  /* this+0x1a */ unsigned char action
  /* this+0x1b */ short leftDamage
}

struct PACKET_ZC_NOTIFY_ACT2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned long startTime
  /* this+0xe */ int attackMT
  /* this+0x12 */ int attackedMT
  /* this+0x16 */ int damage
  /* this+0x1a */ short count
  /* this+0x1c */ unsigned char action
  /* this+0x1d */ int leftDamage
}

struct PACKET_ZC_NOTIFY_ACT3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned long startTime
  /* this+0xe */ int attackMT
  /* this+0x12 */ int attackedMT
  /* this+0x16 */ int damage
  /* this+0x1a */ unsigned char IsSPDamage
  /* this+0x1b */ short count
  /* this+0x1d */ unsigned char action
  /* this+0x1e */ int leftDamage
}

struct PACKET_ZC_NOTIFY_ACTENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ short weapon
  /* this+0x14 */ short accessory
  /* this+0x16 */ short shield
  /* this+0x18 */ short accessory2
  /* this+0x1a */ short accessory3
  /* this+0x1c */ short headpalette
  /* this+0x1e */ short bodypalette
  /* this+0x20 */ short headDir
  /* this+0x22 */ unsigned long GUID
  /* this+0x26 */ short GEmblemVer
  /* this+0x28 */ short honor
  /* this+0x2a */ short virtue
  /* this+0x2c */ bool isPKModeON
  /* this+0x2d */ unsigned char sex
  /* this+0x2e */ unsigned char[0x3] PosDir
  /* this+0x31 */ unsigned char xSize
  /* this+0x32 */ unsigned char ySize
  /* this+0x33 */ unsigned char action
  /* this+0x34 */ unsigned long actStartTime
  /* this+0x38 */ short clevel
}

struct PACKET_ZC_NOTIFY_ACT_POSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned long startTime
  /* this+0xe */ short xPos
  /* this+0x10 */ short yPos
  /* this+0x12 */ short damage
  /* this+0x14 */ short count
  /* this+0x16 */ unsigned char action
}

struct PACKET_ZC_NOTIFY_BIND_ON_EQUIP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
}

struct PACKET_ZC_NOTIFY_CARTITEM_COUNTINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short curCount
  /* this+0x4 */ short maxCount
  /* this+0x6 */ int curWeight
  /* this+0xa */ int maxWeight
}

struct PACKET_ZC_NOTIFY_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GID
}

struct PACKET_ZC_NOTIFY_CHAT_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_ZC_NOTIFY_CLAN_CHAT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] charName
}

struct PACKET_ZC_NOTIFY_CLAN_CONNECTINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short NumConnect
  /* this+0x4 */ unsigned short NumTotal
}

struct PACKET_ZC_NOTIFY_CRAZYKILLER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int isCrazyKiller
}

struct PACKET_ZC_NOTIFY_EFFECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int effectID
}

struct PACKET_ZC_NOTIFY_EFFECT2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int effectID
}

struct PACKET_ZC_NOTIFY_EFFECT3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int effectID
  /* this+0xa */ int numdata
}

struct PACKET_ZC_NOTIFY_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
}

struct PACKET_ZC_NOTIFY_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
  /* this+0x1a */ int Ranking
}

struct PACKET_ZC_NOTIFY_EXP {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int amount
  /* this+0xa */ unsigned short varID
  /* this+0xc */ short expType
}

struct PACKET_ZC_NOTIFY_FONT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short font
}

struct PACKET_ZC_NOTIFY_GROUNDSKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ short level
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned long startTime
}

struct PACKET_ZC_NOTIFY_HP_TO_GROUPM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short hp
  /* this+0x8 */ short maxhp
}

struct PACKET_ZC_NOTIFY_HP_TO_GROUPM_R2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int hp
  /* this+0xa */ int maxhp
}

struct PACKET_ZC_NOTIFY_INITCHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ short Style
  /* this+0xa */ unsigned char Item
}

struct PACKET_ZC_NOTIFY_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
  /* this+0x1a */ char[0x18] LobbyName
}

struct PACKET_ZC_NOTIFY_MANNER_POINT_GIVEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
  /* this+0x3 */ char[0x18] otherCharName
}

struct PACKET_ZC_NOTIFY_MAPINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_ZC_NOTIFY_MAPPROPERTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_ZC_NOTIFY_MAPPROPERTY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_ZC_NOTIFY_MOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char[0x6] MoveData
  /* this+0xc */ unsigned long moveStartTime
}

struct PACKET_ZC_NOTIFY_MOVEENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ short weapon
  /* this+0x14 */ short accessory
  /* this+0x16 */ unsigned long moveStartTime
  /* this+0x1a */ short shield
  /* this+0x1c */ short accessory2
  /* this+0x1e */ short accessory3
  /* this+0x20 */ short headpalette
  /* this+0x22 */ short bodypalette
  /* this+0x24 */ short headDir
  /* this+0x26 */ unsigned long GUID
  /* this+0x2a */ short GEmblemVer
  /* this+0x2c */ short honor
  /* this+0x2e */ short virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x6] MoveData
  /* this+0x38 */ unsigned char xSize
  /* this+0x39 */ unsigned char ySize
  /* this+0x3a */ short clevel
}

struct PACKET_ZC_NOTIFY_MOVEENTRY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ int weapon
  /* this+0x16 */ short accessory
  /* this+0x18 */ unsigned long moveStartTime
  /* this+0x1c */ short accessory2
  /* this+0x1e */ short accessory3
  /* this+0x20 */ short headpalette
  /* this+0x22 */ short bodypalette
  /* this+0x24 */ short headDir
  /* this+0x26 */ unsigned long GUID
  /* this+0x2a */ short GEmblemVer
  /* this+0x2c */ short honor
  /* this+0x2e */ short virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x6] MoveData
  /* this+0x38 */ unsigned char xSize
  /* this+0x39 */ unsigned char ySize
  /* this+0x3a */ short clevel
}

struct PACKET_ZC_NOTIFY_MOVEENTRY3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char objecttype
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short speed
  /* this+0x9 */ short bodyState
  /* this+0xb */ short healthState
  /* this+0xd */ int effectState
  /* this+0x11 */ short job
  /* this+0x13 */ short head
  /* this+0x15 */ int weapon
  /* this+0x19 */ short accessory
  /* this+0x1b */ unsigned long moveStartTime
  /* this+0x1f */ short accessory2
  /* this+0x21 */ short accessory3
  /* this+0x23 */ short headpalette
  /* this+0x25 */ short bodypalette
  /* this+0x27 */ short headDir
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x6] MoveData
  /* this+0x3d */ unsigned char xSize
  /* this+0x3e */ unsigned char ySize
  /* this+0x3f */ short clevel
}

struct PACKET_ZC_NOTIFY_MOVEENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char objecttype
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short speed
  /* this+0x9 */ short bodyState
  /* this+0xb */ short healthState
  /* this+0xd */ int effectState
  /* this+0x11 */ short job
  /* this+0x13 */ short head
  /* this+0x15 */ int weapon
  /* this+0x19 */ short accessory
  /* this+0x1b */ unsigned long moveStartTime
  /* this+0x1f */ short accessory2
  /* this+0x21 */ short accessory3
  /* this+0x23 */ short headpalette
  /* this+0x25 */ short bodypalette
  /* this+0x27 */ short headDir
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x6] MoveData
  /* this+0x3d */ unsigned char xSize
  /* this+0x3e */ unsigned char ySize
  /* this+0x3f */ short clevel
  /* this+0x41 */ short font
}

struct PACKET_ZC_NOTIFY_MOVEENTRY7 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ unsigned long moveStartTime
  /* this+0x21 */ short accessory2
  /* this+0x23 */ short accessory3
  /* this+0x25 */ short headpalette
  /* this+0x27 */ short bodypalette
  /* this+0x29 */ short headDir
  /* this+0x2b */ unsigned long GUID
  /* this+0x2f */ short GEmblemVer
  /* this+0x31 */ short honor
  /* this+0x33 */ int virtue
  /* this+0x37 */ bool isPKModeON
  /* this+0x38 */ unsigned char sex
  /* this+0x39 */ unsigned char[0x6] MoveData
  /* this+0x3f */ unsigned char xSize
  /* this+0x40 */ unsigned char ySize
  /* this+0x41 */ short clevel
  /* this+0x43 */ short font
}

struct PACKET_ZC_NOTIFY_MOVEENTRY8 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ unsigned long moveStartTime
  /* this+0x21 */ short accessory2
  /* this+0x23 */ short accessory3
  /* this+0x25 */ short headpalette
  /* this+0x27 */ short bodypalette
  /* this+0x29 */ short headDir
  /* this+0x2b */ short robe
  /* this+0x2d */ unsigned long GUID
  /* this+0x31 */ short GEmblemVer
  /* this+0x33 */ short honor
  /* this+0x35 */ int virtue
  /* this+0x39 */ bool isPKModeON
  /* this+0x3a */ unsigned char sex
  /* this+0x3b */ unsigned char[0x6] MoveData
  /* this+0x41 */ unsigned char xSize
  /* this+0x42 */ unsigned char ySize
  /* this+0x43 */ short clevel
  /* this+0x45 */ short font
}

struct PACKET_ZC_NOTIFY_MOVEENTRY9 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ unsigned long moveStartTime
  /* this+0x21 */ short accessory2
  /* this+0x23 */ short accessory3
  /* this+0x25 */ short headpalette
  /* this+0x27 */ short bodypalette
  /* this+0x29 */ short headDir
  /* this+0x2b */ short robe
  /* this+0x2d */ unsigned long GUID
  /* this+0x31 */ short GEmblemVer
  /* this+0x33 */ short honor
  /* this+0x35 */ int virtue
  /* this+0x39 */ bool isPKModeON
  /* this+0x3a */ unsigned char sex
  /* this+0x3b */ unsigned char[0x6] MoveData
  /* this+0x41 */ unsigned char xSize
  /* this+0x42 */ unsigned char ySize
  /* this+0x43 */ short clevel
  /* this+0x45 */ short font
  /* this+0x47 */ int maxHP
  /* this+0x4b */ int HP
  /* this+0x4f */ unsigned char isBoss
}

struct PACKET_ZC_NOTIFY_NEWENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ short weapon
  /* this+0x14 */ short accessory
  /* this+0x16 */ short shield
  /* this+0x18 */ short accessory2
  /* this+0x1a */ short accessory3
  /* this+0x1c */ short headpalette
  /* this+0x1e */ short bodypalette
  /* this+0x20 */ short headDir
  /* this+0x22 */ unsigned long GUID
  /* this+0x26 */ short GEmblemVer
  /* this+0x28 */ short honor
  /* this+0x2a */ short virtue
  /* this+0x2c */ bool isPKModeON
  /* this+0x2d */ unsigned char sex
  /* this+0x2e */ unsigned char[0x3] PosDir
  /* this+0x31 */ unsigned char xSize
  /* this+0x32 */ unsigned char ySize
  /* this+0x33 */ short clevel
}

struct PACKET_ZC_NOTIFY_NEWENTRY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ int weapon
  /* this+0x16 */ short accessory
  /* this+0x18 */ short accessory2
  /* this+0x1a */ short accessory3
  /* this+0x1c */ short headpalette
  /* this+0x1e */ short bodypalette
  /* this+0x20 */ short headDir
  /* this+0x22 */ unsigned long GUID
  /* this+0x26 */ short GEmblemVer
  /* this+0x28 */ short honor
  /* this+0x2a */ short virtue
  /* this+0x2c */ bool isPKModeON
  /* this+0x2d */ unsigned char sex
  /* this+0x2e */ unsigned char[0x3] PosDir
  /* this+0x31 */ unsigned char xSize
  /* this+0x32 */ unsigned char ySize
  /* this+0x33 */ short clevel
}

struct PACKET_ZC_NOTIFY_NEWENTRY3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ int effectState
  /* this+0x10 */ short job
  /* this+0x12 */ short head
  /* this+0x14 */ int weapon
  /* this+0x18 */ short accessory
  /* this+0x1a */ short accessory2
  /* this+0x1c */ short accessory3
  /* this+0x1e */ short headpalette
  /* this+0x20 */ short bodypalette
  /* this+0x22 */ short headDir
  /* this+0x24 */ unsigned long GUID
  /* this+0x28 */ short GEmblemVer
  /* this+0x2a */ short honor
  /* this+0x2c */ int virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x3] PosDir
  /* this+0x35 */ unsigned char xSize
  /* this+0x36 */ unsigned char ySize
  /* this+0x37 */ short clevel
}

struct PACKET_ZC_NOTIFY_NEWENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ int effectState
  /* this+0x10 */ short job
  /* this+0x12 */ short head
  /* this+0x14 */ int weapon
  /* this+0x18 */ short accessory
  /* this+0x1a */ short accessory2
  /* this+0x1c */ short accessory3
  /* this+0x1e */ short headpalette
  /* this+0x20 */ short bodypalette
  /* this+0x22 */ short headDir
  /* this+0x24 */ unsigned long GUID
  /* this+0x28 */ short GEmblemVer
  /* this+0x2a */ short honor
  /* this+0x2c */ int virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x3] PosDir
  /* this+0x35 */ unsigned char xSize
  /* this+0x36 */ unsigned char ySize
  /* this+0x37 */ short clevel
  /* this+0x39 */ short font
}

struct PACKET_ZC_NOTIFY_NEWENTRY5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ unsigned long GUID
  /* this+0x2b */ short GEmblemVer
  /* this+0x2d */ short honor
  /* this+0x2f */ int virtue
  /* this+0x33 */ bool isPKModeON
  /* this+0x34 */ unsigned char sex
  /* this+0x35 */ unsigned char[0x3] PosDir
  /* this+0x38 */ unsigned char xSize
  /* this+0x39 */ unsigned char ySize
  /* this+0x3a */ short clevel
  /* this+0x3c */ short font
}

struct PACKET_ZC_NOTIFY_NEWENTRY6 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ short robe
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x3] PosDir
  /* this+0x3a */ unsigned char xSize
  /* this+0x3b */ unsigned char ySize
  /* this+0x3c */ short clevel
  /* this+0x3e */ short font
}

struct PACKET_ZC_NOTIFY_NEWENTRY7 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ short robe
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x3] PosDir
  /* this+0x3a */ unsigned char xSize
  /* this+0x3b */ unsigned char ySize
  /* this+0x3c */ short clevel
  /* this+0x3e */ short font
  /* this+0x40 */ int maxHP
  /* this+0x44 */ int HP
  /* this+0x48 */ unsigned char isBoss
}

struct PACKET_ZC_NOTIFY_PCBANG {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_NOTIFY_PCBANG_PLAYING_TIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int TimeMinute
}

struct PACKET_ZC_NOTIFY_PKINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int winPoint
  /* this+0x6 */ int losePoint
  /* this+0xa */ char[0x18] killName
  /* this+0x22 */ char[0x18] killedName
  /* this+0x3a */ struct _FILETIME expireTime

}

struct PACKET_ZC_NOTIFY_PLAYERCHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_NOTIFY_PLAYERMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long moveStartTime
  /* this+0x6 */ unsigned char[0x6] MoveData
}

struct PACKET_ZC_NOTIFY_POSITION_TO_GROUPM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_NOTIFY_POSITION_TO_GUILDM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_NOTIFY_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int ranking
  /* this+0xa */ int total
}

struct PACKET_ZC_NOTIFY_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long targetID
  /* this+0xc */ unsigned long startTime
  /* this+0x10 */ int attackMT
  /* this+0x14 */ int attackedMT
  /* this+0x18 */ short damage
  /* this+0x1a */ short level
  /* this+0x1c */ short count
  /* this+0x1e */ unsigned char action
}

struct PACKET_ZC_NOTIFY_SKILL2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long targetID
  /* this+0xc */ unsigned long startTime
  /* this+0x10 */ int attackMT
  /* this+0x14 */ int attackedMT
  /* this+0x18 */ int damage
  /* this+0x1c */ short level
  /* this+0x1e */ short count
  /* this+0x20 */ unsigned char action
}

struct PACKET_ZC_NOTIFY_SKILL_POSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long targetID
  /* this+0xc */ unsigned long startTime
  /* this+0x10 */ int attackMT
  /* this+0x14 */ int attackedMT
  /* this+0x18 */ short xPos
  /* this+0x1a */ short yPos
  /* this+0x1c */ short damage
  /* this+0x1e */ short level
  /* this+0x20 */ short count
  /* this+0x22 */ unsigned char action
}

struct PACKET_ZC_NOTIFY_STANDENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char objecttype
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short speed
  /* this+0x9 */ short bodyState
  /* this+0xb */ short healthState
  /* this+0xd */ short effectState
  /* this+0xf */ short job
  /* this+0x11 */ short head
  /* this+0x13 */ short weapon
  /* this+0x15 */ short accessory
  /* this+0x17 */ short shield
  /* this+0x19 */ short accessory2
  /* this+0x1b */ short accessory3
  /* this+0x1d */ short headpalette
  /* this+0x1f */ short bodypalette
  /* this+0x21 */ short headDir
  /* this+0x23 */ unsigned long GUID
  /* this+0x27 */ short GEmblemVer
  /* this+0x29 */ short honor
  /* this+0x2b */ short virtue
  /* this+0x2d */ bool isPKModeON
  /* this+0x2e */ unsigned char sex
  /* this+0x2f */ unsigned char[0x3] PosDir
  /* this+0x32 */ unsigned char xSize
  /* this+0x33 */ unsigned char ySize
  /* this+0x34 */ unsigned char state
  /* this+0x35 */ short clevel
}

struct PACKET_ZC_NOTIFY_STANDENTRY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ int weapon
  /* this+0x16 */ short accessory
  /* this+0x18 */ short accessory2
  /* this+0x1a */ short accessory3
  /* this+0x1c */ short headpalette
  /* this+0x1e */ short bodypalette
  /* this+0x20 */ short headDir
  /* this+0x22 */ unsigned long GUID
  /* this+0x26 */ short GEmblemVer
  /* this+0x28 */ short honor
  /* this+0x2a */ short virtue
  /* this+0x2c */ bool isPKModeON
  /* this+0x2d */ unsigned char sex
  /* this+0x2e */ unsigned char[0x3] PosDir
  /* this+0x31 */ unsigned char xSize
  /* this+0x32 */ unsigned char ySize
  /* this+0x33 */ unsigned char state
  /* this+0x34 */ short clevel
}

struct PACKET_ZC_NOTIFY_STANDENTRY3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ int effectState
  /* this+0x10 */ short job
  /* this+0x12 */ short head
  /* this+0x14 */ int weapon
  /* this+0x18 */ short accessory
  /* this+0x1a */ short accessory2
  /* this+0x1c */ short accessory3
  /* this+0x1e */ short headpalette
  /* this+0x20 */ short bodypalette
  /* this+0x22 */ short headDir
  /* this+0x24 */ unsigned long GUID
  /* this+0x28 */ short GEmblemVer
  /* this+0x2a */ short honor
  /* this+0x2c */ int virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x3] PosDir
  /* this+0x35 */ unsigned char xSize
  /* this+0x36 */ unsigned char ySize
  /* this+0x37 */ unsigned char state
  /* this+0x38 */ short clevel
}

struct PACKET_ZC_NOTIFY_STANDENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ int effectState
  /* this+0x10 */ short job
  /* this+0x12 */ short head
  /* this+0x14 */ int weapon
  /* this+0x18 */ short accessory
  /* this+0x1a */ short accessory2
  /* this+0x1c */ short accessory3
  /* this+0x1e */ short headpalette
  /* this+0x20 */ short bodypalette
  /* this+0x22 */ short headDir
  /* this+0x24 */ unsigned long GUID
  /* this+0x28 */ short GEmblemVer
  /* this+0x2a */ short honor
  /* this+0x2c */ int virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x3] PosDir
  /* this+0x35 */ unsigned char xSize
  /* this+0x36 */ unsigned char ySize
  /* this+0x37 */ unsigned char state
  /* this+0x38 */ short clevel
  /* this+0x3a */ short font
}

struct PACKET_ZC_NOTIFY_STANDENTRY5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ unsigned long GUID
  /* this+0x2b */ short GEmblemVer
  /* this+0x2d */ short honor
  /* this+0x2f */ int virtue
  /* this+0x33 */ bool isPKModeON
  /* this+0x34 */ unsigned char sex
  /* this+0x35 */ unsigned char[0x3] PosDir
  /* this+0x38 */ unsigned char xSize
  /* this+0x39 */ unsigned char ySize
  /* this+0x3a */ unsigned char state
  /* this+0x3b */ short clevel
  /* this+0x3d */ short font
}

struct PACKET_ZC_NOTIFY_STANDENTRY7 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ short robe
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x3] PosDir
  /* this+0x3a */ unsigned char xSize
  /* this+0x3b */ unsigned char ySize
  /* this+0x3c */ unsigned char state
  /* this+0x3d */ short clevel
  /* this+0x3f */ short font
}

struct PACKET_ZC_NOTIFY_STANDENTRY8 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ short robe
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x3] PosDir
  /* this+0x3a */ unsigned char xSize
  /* this+0x3b */ unsigned char ySize
  /* this+0x3c */ unsigned char state
  /* this+0x3d */ short clevel
  /* this+0x3f */ short font
  /* this+0x41 */ int maxHP
  /* this+0x45 */ int HP
  /* this+0x49 */ unsigned char isBoss
}

struct PACKET_ZC_NOTIFY_STANDENTRY_NPC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char objecttype
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short speed
  /* this+0x9 */ short bodyState
  /* this+0xb */ short healthState
  /* this+0xd */ short effectState
  /* this+0xf */ short head
  /* this+0x11 */ short weapon
  /* this+0x13 */ short accessory
  /* this+0x15 */ short job
  /* this+0x17 */ short shield
  /* this+0x19 */ short accessory2
  /* this+0x1b */ short accessory3
  /* this+0x1d */ short headpalette
  /* this+0x1f */ short bodypalette
  /* this+0x21 */ short headDir
  /* this+0x23 */ bool isPKModeON
  /* this+0x24 */ unsigned char sex
  /* this+0x25 */ unsigned char[0x3] PosDir
  /* this+0x28 */ unsigned char xSize
  /* this+0x29 */ unsigned char ySize
  /* this+0x2a */ short clevel
  public void Crypt()
}

struct PACKET_ZC_NOTIFY_STOREITEM_COUNTINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short curCount
  /* this+0x4 */ short maxCount
}

struct PACKET_ZC_NOTIFY_TIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long time
}

struct PACKET_ZC_NOTIFY_UPDATECHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short Style
  /* this+0x8 */ unsigned char Item
}

struct PACKET_ZC_NOTIFY_UPDATEPLAYER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Style
  /* this+0x4 */ unsigned char Item
}

struct PACKET_ZC_NOTIFY_VANISH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
}

struct PACKET_ZC_NOTIFY_WEAPONITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_NPCACK_ENABLE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_NPCACK_MAPMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] mapName
  /* this+0x12 */ short xPos
  /* this+0x14 */ short yPos
}

struct PACKET_ZC_NPCACK_SERVERMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] mapName
  /* this+0x12 */ short xPos
  /* this+0x14 */ short yPos
  /* this+0x16 */ struct ZSERVER_ADDR addr

}

struct PACKET_ZC_NPCSPRITE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ unsigned long value
}

struct PACKET_ZC_NPC_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short packetLength
  /* this+0x4 */ unsigned long accountID
  /* this+0x8 */ unsigned long color
}

struct PACKET_ZC_NPC_SHOWEFST_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int effectState
  /* this+0xa */ int clevel
  /* this+0xe */ int showEFST
}

struct PACKET_ZC_OPENSTORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short itemcount
}

struct PACKET_ZC_OPEN_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char count
}

struct PACKET_ZC_OPEN_EDITDLG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_OPEN_EDITDLGSTR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_OPEN_SEARCH_STORE_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short OpenType
  /* this+0x4 */ unsigned char SearchCntMax
}

struct PACKET_ZC_OTHER_GUILD_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PARTY_BOOKING_ACK_DELETE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_PARTY_BOOKING_ACK_REGISTER {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_PARTY_BOOKING_ACK_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ bool IsExistMoreResult
}

struct PACKET_ZC_PARTY_BOOKING_NOTIFY_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_ZC_PARTY_BOOKING_NOTIFY_INSERT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct PARTY_BOOKING_AD_INFO Info

}

struct PACKET_ZC_PARTY_BOOKING_NOTIFY_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
  /* this+0x6 */ short[0x6] Job
}

struct PACKET_ZC_PARTY_CONFIG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bRefuseJoinMsg
}

struct PACKET_ZC_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ char[0x18] groupName
}

struct PACKET_ZC_PARTY_JOIN_REQ_ACK {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] characterName
  /* this+0x1a */ enum PACKET_ZC_PARTY_JOIN_REQ_ACK::enumAnswer answer
}

struct PACKET_ZC_PARTY_RECRUIT_ACK_DELETE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_PARTY_RECRUIT_ACK_REGISTER {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_PARTY_RECRUIT_ACK_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ bool IsExistMoreResult
}

struct PACKET_ZC_PARTY_RECRUIT_ADD_FILTERLINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] CharName
}

struct PACKET_ZC_PARTY_RECRUIT_CANCEL_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long index
}

struct PACKET_ZC_PARTY_RECRUIT_CANCEL_VOLUNTEER_TO_PM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_PARTY_RECRUIT_FAILED_RECALL {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long CallerAID
  /* this+0x6 */ unsigned char Reason
}

struct PACKET_ZC_PARTY_RECRUIT_NOTIFY_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_ZC_PARTY_RECRUIT_NOTIFY_INSERT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct PARTY_RECRUIT_AD_INFO Info

}

struct PACKET_ZC_PARTY_RECRUIT_NOTIFY_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
  /* this+0x6 */ char[0x25] Notice
}

struct PACKET_ZC_PARTY_RECRUIT_PERSONAL_SETTING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int Cost
}

struct PACKET_ZC_PARTY_RECRUIT_RECALL_COST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Money
  /* this+0x6 */ char[0x10] mapName
}

struct PACKET_ZC_PARTY_RECRUIT_REFUSE_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_ZC_PARTY_RECRUIT_REFUSE_VOLUNTEER_TO_PM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long PM_AID
}

struct PACKET_ZC_PARTY_RECRUIT_SUB_FILTERLINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] CharName
}

struct PACKET_ZC_PARTY_RECRUIT_VOLUNTEER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int Job
  /* this+0xa */ short Level
  /* this+0xc */ char[0x18] CharName
}

struct PACKET_ZC_PAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short varID
  /* this+0x4 */ int count
}

struct PACKET_ZC_PAR_CHANGE_USER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned short varID
  /* this+0x8 */ int count
}

struct PACKET_ZC_PCBANG_EFFECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int ExpFactor
  /* this+0x6 */ int ExpFactor2
  /* this+0xa */ int DropFactor
}

struct PACKET_ZC_PC_CASH_POINT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long CashPoint
}

struct PACKET_ZC_PC_CASH_POINT_UPDATE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long CashPoint
  /* this+0x6 */ short Error
}

struct PACKET_ZC_PC_PURCHASE_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long UniqueID
}

struct PACKET_ZC_PC_PURCHASE_MYITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_ZC_PC_PURCHASE_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_PC_PURCHASE_RESULT_FROMMC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ short curcount
  /* this+0x6 */ unsigned char result
}

struct PACKET_ZC_PC_SELL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PC_SELL_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_PERSONAL_INFOMATION {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Exp
  /* this+0x6 */ short Death
  /* this+0x8 */ short Drop
}

struct PACKET_ZC_PERSONAL_INFOMATION2 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int Exp
  /* this+0x8 */ int Death
  /* this+0xc */ int Drop
}

struct PACKET_ZC_PERSONAL_INFOMATION2::DETAIL_EXP_INFO {
    /* this+0x0 */ unsigned char InfoType
  /* this+0x1 */ int Exp
  /* this+0x5 */ int Death
  /* this+0x9 */ int Drop
}

struct PACKET_ZC_PERSONAL_INFOMATION::DETAIL_EXP_INFO {
    /* this+0x0 */ unsigned char InfoType
  /* this+0x1 */ short Exp
  /* this+0x3 */ short Death
  /* this+0x5 */ short Drop
}

struct PACKET_ZC_PERSONAL_INFOMATION_CHN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Exp
  /* this+0x6 */ short Death
  /* this+0x8 */ short Drop
  /* this+0xa */ short ActivityRate
}

struct PACKET_ZC_PETEGG_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PET_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GID
  /* this+0x6 */ int data
}

struct PACKET_ZC_PLAY_NPC_BGM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Bgm
}

struct PACKET_ZC_POSITION_ID_NAME_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_POSITION_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PREMIUM_CAMPAIGN_INFO {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Count
  /* this+0x6 */ unsigned long PremiumValue
}

class PACKET_ZC_PREMIUM_CAMPAIGN_INFO::PREMIUM_CAMPAIGN_INFO {
  /* this+0x0 */ short Grade
  /* this+0x2 */ float Exp
  /* this+0x6 */ float Death
  /* this+0xa */ float Drp
}

struct PACKET_ZC_PRNPC_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Winner
  /* this+0x3 */ unsigned char Point
}

struct PACKET_ZC_PROGRESS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long color
  /* this+0x6 */ unsigned long time
}

struct PACKET_ZC_PROGRESS_CANCEL {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_PROPERTY_HOMUN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] szName
  /* this+0x1a */ unsigned char bModified
  /* this+0x1b */ short nLevel
  /* this+0x1d */ short nFullness
  /* this+0x1f */ short nRelationship
  /* this+0x21 */ unsigned short ITID
  /* this+0x23 */ short atk
  /* this+0x25 */ short Matk
  /* this+0x27 */ short hit
  /* this+0x29 */ short critical
  /* this+0x2b */ short def
  /* this+0x2d */ short Mdef
  /* this+0x2f */ short flee
  /* this+0x31 */ short aspd
  /* this+0x33 */ short hp
  /* this+0x35 */ short maxHP
  /* this+0x37 */ short sp
  /* this+0x39 */ short maxSP
  /* this+0x3b */ int exp
  /* this+0x3f */ int maxEXP
  /* this+0x43 */ short SKPoint
  /* this+0x45 */ short ATKRange
}

struct PACKET_ZC_PROPERTY_MERCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
  /* this+0x1a */ short level
  /* this+0x1c */ short faith
  /* this+0x1e */ short summonCount
  /* this+0x20 */ short atk
  /* this+0x22 */ short Matk
  /* this+0x24 */ short hit
  /* this+0x26 */ short critical
  /* this+0x28 */ short def
  /* this+0x2a */ short Mdef
  /* this+0x2c */ short flee
  /* this+0x2e */ short aspd
  /* this+0x30 */ short hp
  /* this+0x32 */ short maxHP
  /* this+0x34 */ short sp
  /* this+0x36 */ short maxSP
  /* this+0x38 */ short ATKRange
  /* this+0x3a */ int exp
}

struct PACKET_ZC_PROPERTY_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] szName
  /* this+0x1a */ unsigned char bModified
  /* this+0x1b */ short nLevel
  /* this+0x1d */ short nFullness
  /* this+0x1f */ short nRelationship
  /* this+0x21 */ unsigned short ITID
  /* this+0x23 */ short job
}

struct PACKET_ZC_QUEST_INFO {
  /* this+0x0 */ unsigned long questID
  /* this+0x4 */ bool active
  public void PACKET_ZC_QUEST_INFO()
  public void PACKET_ZC_QUEST_INFO(const unsigned long, const bool)
}

struct PACKET_ZC_QUEST_MISSION_INFO {
  /* this+0x0 */ unsigned long questID
  /* this+0x4 */ long quest_svrTime
  /* this+0x8 */ long quest_endTime
  /* this+0xc */ short count
  /* this+0xe */ struct PACKET_ZC_MISSION_HUNT[0x3] hunt
}

struct PACKET_ZC_QUEST_NOTIFY_EFFECT {
      /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long npcID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
  /* this+0xa */ short effect
  /* this+0xc */ short type
}

struct PACKET_ZC_READ_BOOK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long bookID
  /* this+0x6 */ unsigned long page
}

struct PACKET_ZC_REASSEMBLY_AUTH {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_RECOVERY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short varID
  /* this+0x4 */ short amount
}

struct PACKET_ZC_REFUSE_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_ZC_REFUSE_ENTER_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_REFUSE_QUIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_REPAIRITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_REPLY_ACK_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
}

struct PACKET_ZC_REPLY_ACK_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
  /* this+0x1b */ char[0x18] LobbyName
}

struct PACKET_ZC_REPLY_REMAINTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Result
  /* this+0x6 */ int ExpirationDate
  /* this+0xa */ int RemainTime
}

struct PACKET_ZC_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ReqAID
  /* this+0x6 */ unsigned long ReqGID
  /* this+0xa */ char[0x18] Name
}

struct PACKET_ZC_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long otherAID
  /* this+0x6 */ char[0x18] guildName
}

struct PACKET_ZC_REQ_BABY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] name
}

struct PACKET_ZC_REQ_CASH_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Info
}

struct PACKET_ZC_REQ_COUPLE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] name
}

struct PACKET_ZC_REQ_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
}

struct PACKET_ZC_REQ_EXCHANGE_ITEM2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
  /* this+0x1a */ unsigned long GID
  /* this+0x1e */ short level
}

struct PACKET_ZC_REQ_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long expOption
  /* this+0x6 */ unsigned char ItemPickupRule
  /* this+0x7 */ unsigned char ItemDivisionRule
}

struct PACKET_ZC_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ char[0x18] groupName
}

struct PACKET_ZC_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x18] guildName
}

struct PACKET_ZC_REQ_STORE_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Info
}

struct PACKET_ZC_REQ_TAKEOFF_EQUIP_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
  /* this+0x6 */ bool result
}

struct PACKET_ZC_REQ_TAKEOFF_EQUIP_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
    /* this+0x6 */ unsigned char result
}

struct PACKET_ZC_REQ_WEAR_EQUIP_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
  /* this+0x6 */ unsigned short wItemSpriteNumber
  /* this+0x8 */ unsigned char result
}

struct PACKET_ZC_REQ_WEAR_EQUIP_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
  /* this+0x6 */ unsigned short wItemSpriteNumber
    /* this+0x8 */ unsigned char result
}

struct PACKET_ZC_RESTART_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
}

struct PACKET_ZC_RESULT_CASH_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ short ErrorCount
}

struct PACKET_ZC_RESULT_MAKE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_RESULT_STORE_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ short ErrorCount
}

struct PACKET_ZC_RESURRECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short type
}

struct PACKET_ZC_ROLE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long role
  /* this+0x6 */ char[0x18] name
}

struct PACKET_ZC_ROOM_NEWENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long roomID
  /* this+0xc */ short maxcount
  /* this+0xe */ short curcount
  /* this+0x10 */ unsigned char type
}

struct PACKET_ZC_SAY_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long NAID
}

struct PACKET_ZC_SAY_DIALOG2 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long NAID
  /* this+0x8 */ unsigned char type
}

struct PACKET_ZC_SEARCH_STORE_INFO_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ bool IsFirstPage
  /* this+0x5 */ bool IsNexPage
  /* this+0x6 */ unsigned char RemainedSearchCnt
}

struct PACKET_ZC_SEARCH_STORE_INFO_FAILED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Reason
}

struct PACKET_ZC_SEEK_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_ZC_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_ZC_SELECTCART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int Identity
}

struct PACKET_ZC_SELECT_DEALTYPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_SETTING_WHISPER_PC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
  /* this+0x3 */ unsigned char result
}

struct PACKET_ZC_SETTING_WHISPER_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
  /* this+0x3 */ unsigned char result
}

struct PACKET_ZC_SE_CASHSHOP_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int cash_point
}

struct PACKET_ZC_SE_CASHSHOP_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int cash_point
  /* this+0x6 */ int free_point
}

struct PACKET_ZC_SE_PC_BUY_CASHITEM_RESULT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long item_id
  /* this+0x6 */ short result
  /* this+0x8 */ int update_cash_point
}

struct PACKET_ZC_SHANDA_PROTECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Len
  /* this+0x4 */ short CodeLen
}

struct PACKET_ZC_SHORTCUT_KEY_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct tagShortCutKey[0x1b] ShortCutKey
}

struct PACKET_ZC_SHORTCUT_KEY_LIST_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct tagShortCutKey[0x26] ShortCutKey
}

struct PACKET_ZC_SHOWDIGIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
  /* this+0x3 */ int value
}

struct PACKET_ZC_SHOWSCRIPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_ZC_SHOW_IMAGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] imageName
  /* this+0x12 */ unsigned char type
}

struct PACKET_ZC_SHOW_IMAGE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x40] imageName
  /* this+0x42 */ unsigned char type
}

struct PACKET_ZC_SIMPLE_CASHSHOP_POINT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long CashPoint
  /* this+0x8 */ short md_itemcount
  /* this+0xa */ short md_itemSize
  /* this+0xc */ short best_itemcount
  /* this+0xe */ short best_itemsize
}

struct PACKET_ZC_SIMPLE_CASH_BTNSHOW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool show
}

struct PACKET_ZC_SIMPLE_CASH_POINT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long CashPoint
}

struct PACKET_ZC_SKILLINFO_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
}

struct PACKET_ZC_SKILLINFO_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_SKILLINFO_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ short level
  /* this+0x6 */ short spcost
  /* this+0x8 */ short attackRange
  /* this+0xa */ bool upgradable
}

struct PACKET_ZC_SKILLINFO_UPDATE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ int type
  /* this+0x8 */ short level
  /* this+0xa */ short spcost
  /* this+0xc */ short attackRange
  /* this+0xe */ bool upgradable
}

struct PACKET_ZC_SKILLMSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MsgNo
}

struct PACKET_ZC_SKILL_DISAPPEAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_SKILL_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long creatorAID
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned char job
  /* this+0xf */ bool isVisible
}

struct PACKET_ZC_SKILL_ENTRY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long creatorAID
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned char job
  /* this+0xf */ bool isVisible
  /* this+0x10 */ bool isContens
  /* this+0x11 */ char[0x50] msg
}

struct PACKET_ZC_SKILL_ENTRY3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long creatorAID
  /* this+0xc */ short xPos
  /* this+0xe */ short yPos
  /* this+0x10 */ unsigned char job
  /* this+0x11 */ char RadiusRange
  /* this+0x12 */ bool isVisible
}

struct PACKET_ZC_SKILL_ENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long creatorAID
  /* this+0xc */ short xPos
  /* this+0xe */ short yPos
  /* this+0x10 */ int job
  /* this+0x14 */ char RadiusRange
  /* this+0x15 */ bool isVisible
}

struct PACKET_ZC_SKILL_POSTDELAY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long DelayTM
}

struct PACKET_ZC_SKILL_POSTDELAY_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  }

struct PACKET_ZC_SKILL_POSTDELAY_LIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  }

struct PACKET_ZC_SKILL_POSTDELAY_LIST2::tagSkillPostDelay {
  /* this+0x0 */ unsigned short SKID
  /* this+0x2 */ unsigned long MaxDelayTM
  /* this+0x6 */ unsigned long DelayTM
}

struct PACKET_ZC_SKILL_POSTDELAY_LIST::tagSkillPostDelay {
  /* this+0x0 */ unsigned short SKID
  /* this+0x2 */ unsigned long DelayTM
}

struct PACKET_ZC_SKILL_SELECT_REQUEST {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ enum PACKET_ZC_SKILL_SELECT_REQUEST::enumWHY why
}

struct PACKET_ZC_SKILL_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_SOUND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] fileName
  /* this+0x1a */ unsigned char act
  /* this+0x1b */ unsigned long term
  /* this+0x1f */ unsigned long NAID
}

struct PACKET_ZC_SPIRITS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short num
}

struct PACKET_ZC_SPIRITS2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short num
}

struct PACKET_ZC_SPIRITS_ATTRIBUTE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short SpritsType
  /* this+0x8 */ short Num
}

struct PACKET_ZC_SPRITE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ unsigned char value
}

struct PACKET_ZC_SPRITE_CHANGE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ int value
}

struct PACKET_ZC_SRPACKETR2_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ProtectFactor
  /* this+0x4 */ unsigned int DeformSeedFactor
  /* this+0x8 */ unsigned int DeformAddFactor
  public void Crypt()
}

struct PACKET_ZC_SSILIST_ITEM_CLICK_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short x
  /* this+0x4 */ short y
}

struct PACKET_ZC_STARPLACE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char which
}

struct PACKET_ZC_STARSKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] mapName
  /* this+0x1a */ int monsterID
  /* this+0x1e */ unsigned char star
  /* this+0x1f */ unsigned char result
}

struct PACKET_ZC_START_BABY {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_START_CAPTURE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_START_COLLECTION {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_START_COUPLE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_STATE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short bodyState
  /* this+0x8 */ short healthState
  /* this+0xa */ short effectState
  /* this+0xc */ bool isPKModeON
}

struct PACKET_ZC_STATE_CHANGE3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short bodyState
  /* this+0x8 */ short healthState
  /* this+0xa */ int effectState
  /* this+0xe */ bool isPKModeON
}

struct PACKET_ZC_STATUS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short point
  /* this+0x4 */ unsigned char str
  /* this+0x5 */ unsigned char standardStr
  /* this+0x6 */ unsigned char agi
  /* this+0x7 */ unsigned char standardAgi
  /* this+0x8 */ unsigned char vit
  /* this+0x9 */ unsigned char standardVit
  /* this+0xa */ unsigned char Int
  /* this+0xb */ unsigned char standardInt
  /* this+0xc */ unsigned char dex
  /* this+0xd */ unsigned char standardDex
  /* this+0xe */ unsigned char luk
  /* this+0xf */ unsigned char standardLuk
  /* this+0x10 */ short attPower
  /* this+0x12 */ short refiningPower
  /* this+0x14 */ short max_mattPower
  /* this+0x16 */ short min_mattPower
  /* this+0x18 */ short itemdefPower
  /* this+0x1a */ short plusdefPower
  /* this+0x1c */ short mdefPower
  /* this+0x1e */ short plusmdefPower
  /* this+0x20 */ short hitSuccessValue
  /* this+0x22 */ short avoidSuccessValue
  /* this+0x24 */ short plusAvoidSuccessValue
  /* this+0x26 */ short criticalSuccessValue
  /* this+0x28 */ short ASPD
  /* this+0x2a */ short plusASPD
}

struct PACKET_ZC_STATUS_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short statusID
  /* this+0x4 */ unsigned char value
}

struct PACKET_ZC_STATUS_CHANGE_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short statusID
  /* this+0x4 */ bool result
  /* this+0x5 */ unsigned char value
}

struct PACKET_ZC_STOPMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_STOPMOVE_FORCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_STORE_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
  /* this+0x6 */ char[0x50] storeName
}

struct PACKET_ZC_STORE_EQUIPMENT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_EQUIPMENT_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_EQUIPMENT_ITEMLIST3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_ITEMLIST_EQUIP {
  PACKET_ZC_INVENTORY_ITEMLIST_EQUIP, offset = 0x0

}

struct PACKET_ZC_STORE_ITEMLIST_EQUIP_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] StoreName
}

struct PACKET_ZC_STORE_ITEMLIST_EQUIP_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] StoreName
}

struct PACKET_ZC_STORE_ITEMLIST_NORMAL {
  PACKET_ZC_INVENTORY_ITEMLIST_NORMAL, offset = 0x0

}

struct PACKET_ZC_STORE_ITEMLIST_NORMAL_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] StoreName
}

struct PACKET_ZC_STORE_ITEMLIST_NORMAL_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] StoreName
}

struct PACKET_ZC_STORE_NORMAL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_NORMAL_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_NORMAL_ITEMLIST3 {
  PACKET_ZC_NORMAL_ITEMLIST3, offset = 0x0

}

struct PACKET_ZC_TAEKWON_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Point
  /* this+0x6 */ int TotalPoint
}

struct PACKET_ZC_TAEKWON_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18][0xa] Name
  /* this+0xf2 */ int[0xa] Point
}

struct PACKET_ZC_TALKBOX_CHATCONTENTS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x50] contents
}

struct PACKET_ZC_THROW_MVPITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_TRYCAPTURE_MONSTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_TRYCOLLECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_UPDATE_CHARSTAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int status
}

struct PACKET_ZC_UPDATE_CHARSTAT2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int status
  /* this+0xe */ short sex
  /* this+0x10 */ short head
  /* this+0x12 */ short headPalette
}

struct PACKET_ZC_UPDATE_GDID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int emblemVersion
  /* this+0xa */ int right
  /* this+0xe */ bool isMaster
  /* this+0xf */ int InterSID
  /* this+0x13 */ char[0x18] GName
}

struct PACKET_ZC_UPDATE_ITEM_FROM_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ short count
  /* this+0x6 */ int limitZeny
}

struct PACKET_ZC_UPDATE_MAPINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short xPos
  /* this+0x4 */ short yPos
  /* this+0x6 */ short type
  /* this+0x8 */ char[0x10] mapName
}

struct PACKET_ZC_UPDATE_MISSION_HUNT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short count
}

struct PACKET_ZC_UPDATE_RANKING_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short RankingType
  /* this+0x4 */ int Point
  /* this+0x8 */ int TotalPoint
}

struct PACKET_ZC_USER_COUNT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int count
}

struct PACKET_ZC_USESKILL_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long targetID
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned short SKID
  /* this+0x10 */ unsigned long property
  /* this+0x14 */ unsigned long delayTime
}

struct PACKET_ZC_USESKILL_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long targetID
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned short SKID
  /* this+0x10 */ unsigned long property
  /* this+0x14 */ unsigned long delayTime
  /* this+0x18 */ bool isDisposable
}

struct PACKET_ZC_USE_ITEM_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ short count
  /* this+0x6 */ bool result
}

struct PACKET_ZC_USE_ITEM_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short id
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ short count
  /* this+0xc */ bool result
}

struct PACKET_ZC_USE_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ short level
  /* this+0x6 */ unsigned long targetAID
  /* this+0xa */ unsigned long srcAID
  /* this+0xe */ bool result
  public void Crypt()
}

struct PACKET_ZC_WAIT_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_WAIT_DIALOG2 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned char type
}

struct PACKET_ZC_WARPLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ char[0x10][0x4] mapName
}

struct PACKET_ZC_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x18] sender
  /* this+0x1c */ int isAdmin
}

struct PACKET_ZC_WHISPER_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZH_AUTH_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwIP
  /* this+0x6 */ short sPort
  /* this+0x8 */ int ZSID
}

struct PACKET_ZH_CASTLE_MAP_MOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZH_CHAR_EXIT2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned char disconnetedType
  /* this+0x7 */ int curUser
}

struct PACKET_ZH_LOGON {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int AuthCode
  /* this+0xe */ int curUser
  /* this+0x12 */ unsigned char sex
}

struct PACKET_ZH_MAPMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long NID
  /* this+0xa */ unsigned long ServerID
  /* this+0xe */ unsigned char sex
}

struct PACKET_ZH_MOVE_PVPWORLD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_ZH_PING_LIVE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZH_RESTART2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int curUser
}

struct PACKET_ZH_SAVECHARINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned long AuthCode
}

struct PACKET_ZH_USER_COUNT_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int UserCount
}

struct PACKET_ZH_ZSVR_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int MaxConcurrentPlayerNum
  /* this+0x6 */ unsigned int CurConcurrentPlayerNum
}

struct PACKET_ZI_ACK_CHK_PROCESSTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ long InterProcessTime
  /* this+0x6 */ long ZoneProcessTime
}

struct PACKET_ZI_ACK_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ReqAID
  /* this+0x6 */ unsigned long ReqGID
  /* this+0xa */ unsigned long AckAID
  /* this+0xe */ unsigned long AckGID
}

struct PACKET_ZI_ACK_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ char[0x18] sender
  /* this+0x1e */ unsigned char result
}

struct PACKET_ZI_ADD_EXP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int Exp
}

struct PACKET_ZI_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long otherGDID
  /* this+0xa */ unsigned long myAID
  /* this+0xe */ unsigned long myGID
  /* this+0x12 */ unsigned long otherAID
  /* this+0x16 */ unsigned long otherGID
  /* this+0x1a */ int answer
}

struct PACKET_ZI_AUTH_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwIP
  /* this+0x6 */ short sPort
  /* this+0x8 */ int ZSID
}

struct PACKET_ZI_BROADCAST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZI_BROADCASTING_SPECIAL_ITEM_OBTAIN {
  PACKET_ZC_BROADCASTING_SPECIAL_ITEM_OBTAIN, offset = 0x0

}

struct PACKET_ZI_CHANGE_EXPOPTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long expOption
}

struct PACKET_ZI_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ unsigned long MasterAID
  /* this+0xa */ unsigned long AID
}

struct PACKET_ZI_CHAR_LEVEL_UP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_ZI_CHAT_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GRID
}

struct PACKET_ZI_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long FriendAID
  /* this+0xa */ unsigned long FriendGID
}

struct PACKET_ZI_DISCONNECT_ALL {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZI_DIVORCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] name
}

struct PACKET_ZI_EPISODE_VERSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Episode_Ver
  /* this+0x6 */ unsigned long Minor_Ver
}

struct PACKET_ZI_EXIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] charName
}

struct PACKET_ZI_GDSKILL_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ int SkillPoint
}

struct PACKET_ZI_GPK_DYNCODE_RELOAD {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZI_GRID_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ unsigned long expOption
}

struct PACKET_ZI_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ unsigned long MasterAID
  /* this+0xa */ int FamilyGroup
  /* this+0xe */ unsigned long expOption
  /* this+0x12 */ unsigned char ItemPickupRule
  /* this+0x13 */ unsigned char ItemDivisionRule
}

struct PACKET_ZI_GUILD_CHANGEMAXUSER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int maxNum
}

struct PACKET_ZI_GUILD_CHANGEOWNER_AGIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long oldGDID
  /* this+0x6 */ unsigned long newGDID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_ZI_GUILD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
}

struct PACKET_ZI_GUILD_NOTICE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x3c] subject
  /* this+0x42 */ char[0x78] notice
}

struct PACKET_ZI_GUILD_ZENY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x10] mapName
  /* this+0x1e */ unsigned char type
  /* this+0x1f */ int zeny
}

struct PACKET_ZI_INSTANTMAP_ALLOW {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_ZI_INSTANTMAP_ALLOW::enumWhy why
  /* this+0x6 */ bool bAllow
}

struct PACKET_ZI_INSTANTMAP_CREATE_RES {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int hRequestN2Obj
  /* this+0x6 */ char[0x10] mapName
  /* this+0x16 */ int mapID
  /* this+0x1a */ bool bSuccess
}

struct PACKET_ZI_INSTANTMAP_ERROR {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int hRequestN2Obj
  /* this+0x6 */ int mapID
  /* this+0xa */ enum PACKET_ZI_INSTANTMAP_ERROR::enumWhy why
}

struct PACKET_ZI_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ int answer
}

struct PACKET_ZI_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x18] Name
  /* this+0x1e */ char[0x18] AccountName
  /* this+0x36 */ unsigned long AID
  /* this+0x3a */ unsigned long GID
  /* this+0x3e */ int answer
}

struct PACKET_ZI_LOGON {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int sex
  /* this+0xe */ short head
  /* this+0x10 */ short headpalette
  /* this+0x12 */ short level
  /* this+0x14 */ short job
  /* this+0x16 */ char[0x18] accountName
  /* this+0x2e */ char[0x18] charName
  /* this+0x46 */ char[0x10] mapName
}

struct PACKET_ZI_MAIL_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int MailID
}

struct PACKET_ZI_MAIL_GET_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int MailID
}

struct PACKET_ZI_MAIL_GET_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_ZI_MAIL_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int MailID
}

struct PACKET_ZI_MAIL_SEND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GID
  /* this+0xc */ char[0x28] Header
  /* this+0x34 */ char[0x28] ItemInfo
  /* this+0x5c */ char ItemLen
  /* this+0x5d */ unsigned long Money
  /* this+0x61 */ char[0x18] SendName
  /* this+0x79 */ unsigned long SendAID
}

struct PACKET_ZI_MAKE_GROUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] groupName
  /* this+0x22 */ unsigned char ItemPickupRule
  /* this+0x23 */ unsigned char ItemDivisionRule
}

struct PACKET_ZI_MAPMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x10] mapName
}

struct PACKET_ZI_MEMORIALDUNGEON_COMMAND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x18] partyName
  /* this+0x22 */ enum PACKET_CZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command
}

struct PACKET_ZI_MEMORIALDUNGEON_OPENSTATE {
  /* this+0x0 */ short PacketType
    /* this+0x2 */ enum PACKET_ZI_MEMORIALDUNGEON_OPENSTATE::enumRequest Request
  /* this+0x6 */ unsigned long RequestGID
  /* this+0xa */ unsigned long RequestAID
}

struct PACKET_ZI_MEMORIALDUNGEON_SUBSCRIPTION2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x3d] NickName
  /* this+0x41 */ unsigned long GRID
  /* this+0x45 */ unsigned long AID
  /* this+0x49 */ unsigned long GID
}

struct PACKET_ZI_MEMORIALDUNGEON_VISA {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
}

struct PACKET_ZI_MOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MoveType
  /* this+0x6 */ unsigned long SrcID
  /* this+0xa */ int DestX
  /* this+0xe */ int DestY
  /* this+0x12 */ char[0x18] DestName
}

struct PACKET_ZI_MOVE_2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MoveType
  /* this+0x6 */ unsigned long SrcID
  /* this+0xa */ int DestX
  /* this+0xe */ int DestY
  /* this+0x12 */ unsigned long DestAID
  /* this+0x16 */ unsigned long DestGID
  /* this+0x1a */ char[0x18] DestName
}

struct PACKET_ZI_MOVE_GID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MoveType
  /* this+0x6 */ unsigned long SrcID
  /* this+0xa */ int DestX
  /* this+0xe */ int DestY
  /* this+0x12 */ char[0x18] DestName
  /* this+0x2a */ unsigned long DestGID
}

struct PACKET_ZI_MOVE_SERVER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] charName
}

struct PACKET_ZI_PARTY_BOOKING_NOTIFY_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_ZI_PARTY_BOOKING_NOTIFY_INSERT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ struct PARTY_BOOKING_AD_INFO Info

}

struct PACKET_ZI_PARTY_BOOKING_NOTIFY_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
  /* this+0x6 */ short[0x6] Job
}

struct PACKET_ZI_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] TargetCharName
}

struct PACKET_ZI_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ enum PACKET_ZC_PARTY_JOIN_REQ_ACK::enumAnswer answer
}

struct PACKET_ZI_PING_LIVE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZI_REGISTER_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
  /* this+0xc */ unsigned long GID
}

struct PACKET_ZI_REQ_BAN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ unsigned long MyGID
  /* this+0x12 */ char[0x18] AccountName
  /* this+0x2a */ char[0x28] reasonDesc
}

struct PACKET_ZI_REQ_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
  /* this+0xc */ unsigned long GID
}

struct PACKET_ZI_REQ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long OpponentGDID
  /* this+0xa */ int Relation
}

struct PACKET_ZI_REQ_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x28] key
}

struct PACKET_ZI_REQ_EXPEL_GROUP_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] characterName
}

struct PACKET_ZI_REQ_GUILD_POSITION_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_ZI_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long OtherGDID
  /* this+0xa */ unsigned long MyAID
}

struct PACKET_ZI_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ unsigned long receiverAID
  /* this+0xa */ unsigned long GRID
}

struct PACKET_ZI_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long myGID
  /* this+0xa */ unsigned long myAID
  /* this+0xe */ unsigned long GID
}

struct PACKET_ZI_REQ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_ZI_REQ_LEAVE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x28] reasonDesc
}

struct PACKET_ZI_REQ_MAIL_RETURN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long MailID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x18] FromName
  /* this+0x26 */ unsigned long ReceiveAID
  /* this+0x2a */ unsigned long ReceiveGID
}

struct PACKET_ZI_REQ_MAKE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned long AID
  /* this+0xe */ char[0x18] GName
  /* this+0x26 */ char[0x18] MName
  /* this+0x3e */ char[0x18] AccountName
}

struct PACKET_ZI_REQ_USER_COUNT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZI_SEEK_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_ZI_SERVERSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int monitorNum
  /* this+0x6 */ struct IM_SERVER_STATE state

}

struct PACKET_ZI_STATEINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int UsedKBytesMemory
  /* this+0x6 */ unsigned int NumTotalNPC
}

struct PACKET_ZI_UPDATE_MAKERRANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ int point
  /* this+0xc */ char[0x18] charname
}

struct PACKET_ZI_VERSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
}

struct PACKET_ZI_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long senderAID
  /* this+0x8 */ char[0x18] sender
  /* this+0x20 */ char[0x18] receiver
  /* this+0x38 */ char[0x18] senderAccountName
}

struct PACKET_ZN_ANSWER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned long CAID
  /* this+0xa */ unsigned char answerType
  /* this+0xb */ long answer
}

struct PARAMETER {
  /* this+0x0 */ int varType
  /* this+0x4 */ int amount
}

struct PARTNER_INFO {
  /* this+0x0 */ int bMarried
  /* this+0x4 */ unsigned long partnerGID
  /* this+0x8 */ char[0x18] partnerName
}

struct PARTY_BOOKING_AD_INFO {
  /* this+0x0 */ unsigned long Index
  /* this+0x4 */ char[0x18] CharName
  /* this+0x1c */ long ExpireTime
  /* this+0x20 */ struct PARTY_BOOKING_DETAIL Detail

}

struct PARTY_BOOKING_DETAIL {
  /* this+0x0 */ short Level
  /* this+0x2 */ short MapID
  /* this+0x4 */ short[0x6] Job
}

struct PARTY_RECRUIT_AD_INFO {
  /* this+0x0 */ unsigned long Index
  /* this+0x4 */ long ExpireTime
  /* this+0x8 */ char[0x18] CharName
  /* this+0x20 */ struct PARTY_RECRUIT_DETAIL Detail

}

struct PARTY_RECRUIT_DETAIL {
  /* this+0x0 */ short Level
  /* this+0x2 */ char[0x25] Notice
}

class PASERRET {
    /* this+0x0 */ enum PASERRET::enumError m_error
  /* this+0x4 */ int m_used_bytes
  public void PASERRET(const enum PASERRET::enumError, const int)
  public void PASERRET()
}

struct PC_INDEX_DATA {
  /* this+0x0 */ int index
  /* this+0x4 */ unsigned long connectionTime
}

struct PC_SKILL_INFO {
  public void PC_SKILL_INFO::PC_SKILL_INFO()
  /* this+0x0 */ int level
  /* this+0x4 */ int type
  /* this+0x8 */ int typeBefore
  /* this+0xc */ int disposableLevel
  /* this+0x10 */ int orgDispLevel
  /* this+0x14 */ int imitationLevel
  /* this+0x18 */ int count
  /* this+0x1c */ short skillUseType
  /* this+0x20 */ unsigned long BlockUseTM
  /* this+0x24 */ bool bDBupdateWhenLogout
  /* this+0x28 */ int Data
}

class PERSONAL_INFO::CPersonalFactor {
  public void PERSONAL_INFO::CPersonalFactor::Init()
  public const struct PACKET_ZC_PERSONAL_INFOMATION::DETAIL_EXP_INFO GetDETAIL_EXP_INFO(const int)
  public void CPersonalFactor(class PERSONAL_INFO::CPersonalFactor &)
  public void PERSONAL_INFO::CPersonalFactor::CPersonalFactor()
  public void ~CPersonalFactor()
  public class PERSONAL_INFO::CPersonalFactor & operator=(class PERSONAL_INFO::CPersonalFactor &)
  /* this+0x0 */ int m_nExp
  /* this+0x4 */ int m_nDeath
  /* this+0x8 */ int m_nDrop
  public void * __vecDelDtor(unsigned int)
}

class PERSONAL_INFO::CPersonalInfo {
  public void PERSONAL_INFO::CPersonalInfo::Init()
  public void CPersonalInfo(class PERSONAL_INFO::CPersonalInfo &)
  public void PERSONAL_INFO::CPersonalInfo::CPersonalInfo()
  public void ~CPersonalInfo()
  public class PERSONAL_INFO::CPersonalInfo & operator=(class PERSONAL_INFO::CPersonalInfo &)
  /* this+0x0 */ int isPCBang
  /* this+0x4 */ int PayType
  /* this+0x8 */ int ConnectionArea
  /* this+0xc */ int ConnectionState
  /* this+0x10 */ int EventNum
  /* this+0x14 */ unsigned long ConnectionTime
  /* this+0x18 */ int ExpFactor
  /* this+0x1c */ int DeathFactor
  /* this+0x20 */ int DropFactor
  /* this+0x24 */ int PremiumType
  /* this+0x28 */ int PremiumType2
  /* this+0x2c */ int MaxStoreCnt
  /* this+0x30 */ class PERSONAL_INFO::CPersonalFactor m_PCBangFactor

  /* this+0x3c */ class PERSONAL_INFO::CPersonalFactor m_PremiumFactor

  /* this+0x48 */ class PERSONAL_INFO::CPersonalFactor m_Tplus

  public void * __vecDelDtor(unsigned int)
}

struct PETEGGITEM_INFO {
  /* this+0x0 */ short index
}

struct PET_INFO {
  /* this+0x0 */ int iKind
  /* this+0x4 */ int iCapturePercent
  /* this+0x8 */ int iRIWF
  /* this+0xc */ int iRDWF
  /* this+0x10 */ int iRD
  /* this+0x14 */ int iRDWD
  /* this+0x18 */ int iSIWF
  /* this+0x1c */ int iSD
  /* this+0x20 */ bool bSpecialON
  /* this+0x22 */ unsigned short nAccID
  /* this+0x24 */ unsigned short nFoodID
  /* this+0x26 */ unsigned short nTrap
  /* this+0x28 */ unsigned short nPetEgg
}

struct PET_PROPERTY {
  /* this+0x0 */ int dbkey
  /* this+0x4 */ char[0x18] name
  /* this+0x1c */ int modified
  /* this+0x20 */ int spriteType
  /* this+0x24 */ int level
  /* this+0x28 */ int fullness
  /* this+0x2c */ int relationship
  /* this+0x30 */ int accessary
}

struct PGG_LINGO_KEY_TEMP {
  /* this+0x0 */ unsigned long dwAlgNum
  /* this+0x4 */ unsigned long dwAlgKey1
  /* this+0x8 */ unsigned long dwAlgKey2
  /* this+0xc */ unsigned long dwSeed
}

struct PICKUPABLE_PCLIST {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned short limitTime
}

struct PKInfo {
  /* this+0x0 */ int winPoint
  /* this+0x4 */ int losePoint
  /* this+0x8 */ char[0x18] killName
  /* this+0x20 */ char[0x18] killedName
  /* this+0x38 */ struct _FILETIME expireTime

  /* this+0x40 */ unsigned long noPointTime
  /* this+0x44 */ unsigned long expireTimeCheck
  /* this+0x48 */ unsigned long lastCheckTime
  /* this+0x4c */ int isCrazyKiller
  /* this+0x50 */ int isKingCrazyKiller
}

struct PLAY_SKILLINFO {
  /* this+0x0 */ unsigned long skAID
  /* this+0x4 */ struct PosInfo deltaPos

}

struct PLUSSTATUS_BYJOB {
  /* this+0x0 */ int Str
  /* this+0x4 */ int Int
  /* this+0x8 */ int Dex
  /* this+0xc */ int Agi
  /* this+0x10 */ int Luk
  /* this+0x14 */ int Vit
}

struct PMD {
  /* this+0x0 */ int mdisp
  /* this+0x4 */ int pdisp
  /* this+0x8 */ int vdisp
}

struct POWERBROADCAST_SETTING {
  /* this+0x0 */ struct _GUID PowerSetting

  /* this+0x10 */ unsigned long DataLength
  /* this+0x14 */ unsigned char[0x1] Data
}

struct POWER_ACTION_POLICY {
  /* this+0x0 */ enum POWER_ACTION Action
  /* this+0x4 */ unsigned long Flags
  /* this+0x8 */ unsigned long EventCode
}

struct PPM_IDLESTATE_EVENT {
  /* this+0x0 */ unsigned long NewState
  /* this+0x4 */ unsigned long OldState
  /* this+0x8 */ unsigned __int64 Processors
}

struct PPM_IDLE_ACCOUNTING {
  /* this+0x0 */ unsigned long StateCount
  /* this+0x4 */ unsigned long TotalTransitions
  /* this+0x8 */ unsigned long ResetCount
  /* this+0x10 */ unsigned __int64 StartTime
  /* this+0x18 */ struct PPM_IDLE_STATE_ACCOUNTING[0x1] State
}

struct PPM_IDLE_ACCOUNTING_EX {
  /* this+0x0 */ unsigned long StateCount
  /* this+0x4 */ unsigned long TotalTransitions
  /* this+0x8 */ unsigned long ResetCount
  /* this+0x10 */ unsigned __int64 StartTime
  /* this+0x18 */ struct PPM_IDLE_STATE_ACCOUNTING_EX[0x1] State
}

struct PPM_IDLE_STATE_ACCOUNTING {
  /* this+0x0 */ unsigned long IdleTransitions
  /* this+0x4 */ unsigned long FailedTransitions
  /* this+0x8 */ unsigned long InvalidBucketIndex
  /* this+0x10 */ unsigned __int64 TotalTime
  /* this+0x18 */ unsigned long[0x6] IdleTimeBuckets
}

struct PPM_IDLE_STATE_ACCOUNTING_EX {
  /* this+0x0 */ unsigned __int64 TotalTime
  /* this+0x8 */ unsigned long IdleTransitions
  /* this+0xc */ unsigned long FailedTransitions
  /* this+0x10 */ unsigned long InvalidBucketIndex
  /* this+0x14 */ unsigned long MinTimeUs
  /* this+0x18 */ unsigned long MaxTimeUs
  /* this+0x20 */ struct PPM_IDLE_STATE_BUCKET_EX[0x10] IdleTimeBuckets
}

struct PPM_IDLE_STATE_BUCKET_EX {
  /* this+0x0 */ unsigned __int64 TotalTimeUs
  /* this+0x8 */ unsigned long MinTimeUs
  /* this+0xc */ unsigned long MaxTimeUs
  /* this+0x10 */ unsigned long Count
}

struct PPM_PERFSTATE_DOMAIN_EVENT {
  /* this+0x0 */ unsigned long State
  /* this+0x4 */ unsigned long Latency
  /* this+0x8 */ unsigned long Speed
  /* this+0x10 */ unsigned __int64 Processors
}

struct PPM_PERFSTATE_EVENT {
  /* this+0x0 */ unsigned long State
  /* this+0x4 */ unsigned long Status
  /* this+0x8 */ unsigned long Latency
  /* this+0xc */ unsigned long Speed
  /* this+0x10 */ unsigned long Processor
}

struct PPM_THERMALCHANGE_EVENT {
  /* this+0x0 */ unsigned long ThermalConstraint
  /* this+0x8 */ unsigned __int64 Processors
}

struct PPM_THERMAL_POLICY_EVENT {
  /* this+0x0 */ unsigned char Mode
  /* this+0x8 */ unsigned __int64 Processors
}

struct PPM_WMI_IDLE_STATE {
  /* this+0x0 */ unsigned long Latency
  /* this+0x4 */ unsigned long Power
  /* this+0x8 */ unsigned long TimeCheck
  /* this+0xc */ unsigned char PromotePercent
  /* this+0xd */ unsigned char DemotePercent
  /* this+0xe */ unsigned char StateType
  /* this+0xf */ unsigned char Reserved
  /* this+0x10 */ unsigned long StateFlags
  /* this+0x14 */ unsigned long Context
  /* this+0x18 */ unsigned long IdleHandler
  /* this+0x1c */ unsigned long Reserved1
}

struct PPM_WMI_IDLE_STATES {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned long Count
  /* this+0x8 */ unsigned long TargetState
  /* this+0xc */ unsigned long OldState
  /* this+0x10 */ unsigned __int64 TargetProcessors
  /* this+0x18 */ struct PPM_WMI_IDLE_STATE[0x1] State
}

struct PPM_WMI_IDLE_STATES_EX {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned long Count
  /* this+0x8 */ unsigned long TargetState
  /* this+0xc */ unsigned long OldState
  /* this+0x10 */ void * TargetProcessors
  /* this+0x14 */ struct PPM_WMI_IDLE_STATE[0x1] State
}

struct PPM_WMI_LEGACY_PERFSTATE {
  /* this+0x0 */ unsigned long Frequency
  /* this+0x4 */ unsigned long Flags
  /* this+0x8 */ unsigned long PercentFrequency
}

struct PPM_WMI_PERF_STATE {
  /* this+0x0 */ unsigned long Frequency
  /* this+0x4 */ unsigned long Power
  /* this+0x8 */ unsigned char PercentFrequency
  /* this+0x9 */ unsigned char IncreaseLevel
  /* this+0xa */ unsigned char DecreaseLevel
  /* this+0xb */ unsigned char Type
  /* this+0xc */ unsigned long IncreaseTime
  /* this+0x10 */ unsigned long DecreaseTime
  /* this+0x18 */ unsigned __int64 Control
  /* this+0x20 */ unsigned __int64 Status
  /* this+0x28 */ unsigned long HitCount
  /* this+0x2c */ unsigned long Reserved1
  /* this+0x30 */ unsigned __int64 Reserved2
  /* this+0x38 */ unsigned __int64 Reserved3
}

struct PPM_WMI_PERF_STATES {
  /* this+0x0 */ unsigned long Count
  /* this+0x4 */ unsigned long MaxFrequency
  /* this+0x8 */ unsigned long CurrentState
  /* this+0xc */ unsigned long MaxPerfState
  /* this+0x10 */ unsigned long MinPerfState
  /* this+0x14 */ unsigned long LowestPerfState
  /* this+0x18 */ unsigned long ThermalConstraint
  /* this+0x1c */ unsigned char BusyAdjThreshold
  /* this+0x1d */ unsigned char PolicyType
  /* this+0x1e */ unsigned char Type
  /* this+0x1f */ unsigned char Reserved
  /* this+0x20 */ unsigned long TimerInterval
  /* this+0x28 */ unsigned __int64 TargetProcessors
  /* this+0x30 */ unsigned long PStateHandler
  /* this+0x34 */ unsigned long PStateContext
  /* this+0x38 */ unsigned long TStateHandler
  /* this+0x3c */ unsigned long TStateContext
  /* this+0x40 */ unsigned long FeedbackHandler
  /* this+0x44 */ unsigned long Reserved1
  /* this+0x48 */ unsigned __int64 Reserved2
  /* this+0x50 */ struct PPM_WMI_PERF_STATE[0x1] State
}

struct PPM_WMI_PERF_STATES_EX {
  /* this+0x0 */ unsigned long Count
  /* this+0x4 */ unsigned long MaxFrequency
  /* this+0x8 */ unsigned long CurrentState
  /* this+0xc */ unsigned long MaxPerfState
  /* this+0x10 */ unsigned long MinPerfState
  /* this+0x14 */ unsigned long LowestPerfState
  /* this+0x18 */ unsigned long ThermalConstraint
  /* this+0x1c */ unsigned char BusyAdjThreshold
  /* this+0x1d */ unsigned char PolicyType
  /* this+0x1e */ unsigned char Type
  /* this+0x1f */ unsigned char Reserved
  /* this+0x20 */ unsigned long TimerInterval
  /* this+0x24 */ void * TargetProcessors
  /* this+0x28 */ unsigned long PStateHandler
  /* this+0x2c */ unsigned long PStateContext
  /* this+0x30 */ unsigned long TStateHandler
  /* this+0x34 */ unsigned long TStateContext
  /* this+0x38 */ unsigned long FeedbackHandler
  /* this+0x3c */ unsigned long Reserved1
  /* this+0x40 */ unsigned __int64 Reserved2
  /* this+0x48 */ struct PPM_WMI_PERF_STATE[0x1] State
}

struct PROCESSOR_IDLESTATE_INFO {
  /* this+0x0 */ unsigned long TimeCheck
  /* this+0x4 */ unsigned char DemotePercent
  /* this+0x5 */ unsigned char PromotePercent
  /* this+0x6 */ unsigned char[0x2] Spare
}

struct PROCESSOR_IDLESTATE_POLICY {
  /* this+0x0 */ unsigned short Revision
    /* this+0x2 */ union PROCESSOR_IDLESTATE_POLICY::<unnamed-type-Flags> Flags

  /* this+0x4 */ unsigned long PolicyCount
  /* this+0x8 */ struct PROCESSOR_IDLESTATE_INFO[0x3] Policy
}

union PROCESSOR_IDLESTATE_POLICY::<unnamed-type-Flags> {
  /* this+0x0 */ unsigned short AsWORD
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned short AllowScaling
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned short Disabled
  /* this(bf)+0x0:0x2 len(0xe) */ unsigned short Reserved
}

struct PROCESSOR_PERFSTATE_POLICY {
  /* this+0x0 */ unsigned long Revision
  /* this+0x4 */ unsigned char MaxThrottle
  /* this+0x5 */ unsigned char MinThrottle
  /* this+0x6 */ unsigned char BusyAdjThreshold
  /* this+0x7 */ unsigned char Spare
  /* this+0x7 */ union PROCESSOR_PERFSTATE_POLICY::<unnamed-tag>::<unnamed-type-Flags> Flags

  /* this+0x8 */ unsigned long TimeCheck
  /* this+0xc */ unsigned long IncreaseTime
  /* this+0x10 */ unsigned long DecreaseTime
  /* this+0x14 */ unsigned long IncreasePercent
  /* this+0x18 */ unsigned long DecreasePercent
}

union PROCESSOR_PERFSTATE_POLICY::<unnamed-tag>::<unnamed-type-Flags> {
  /* this+0x0 */ unsigned char AsBYTE
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char NoDomainAccounting
  /* this(bf)+0x0:0x1 len(0x2) */ unsigned char IncreasePolicy
  /* this(bf)+0x0:0x3 len(0x2) */ unsigned char DecreasePolicy
  /* this(bf)+0x0:0x5 len(0x3) */ unsigned char Reserved
}

struct PRODUCTINFO_INSTORE {
  /* this+0x0 */ short index
  /* this+0x2 */ short count
  /* this+0x4 */ int price
}

struct PRODUCTINFO_IN_BUYING_STORE {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ short count
  /* this+0x4 */ int price
}

struct PURCHASE_ITEM {
  /* this+0x0 */ int price
  /* this+0x4 */ int discountprice
  /* this+0x8 */ unsigned char type
  /* this+0x9 */ unsigned short ITID
}

struct PURCHASE_ITEM_FROMMC {
  /* this+0x0 */ int price
  /* this+0x4 */ short count
  /* this+0x6 */ short index
  /* this+0x8 */ unsigned char type
  /* this+0x9 */ unsigned short ITID
  /* this+0xb */ bool IsIdentified
  /* this+0xc */ bool IsDamaged
  /* this+0xd */ unsigned char refiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

}

struct PURCHASE_MYITEM {
  /* this+0x0 */ int price
  /* this+0x4 */ short index
  /* this+0x6 */ short count
  /* this+0x8 */ unsigned char type
  /* this+0x9 */ unsigned short ITID
  /* this+0xb */ bool IsIdentified
  /* this+0xc */ bool IsDamaged
  /* this+0xd */ unsigned char refiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

}

struct PVPINFO {
  /* this+0x0 */ int WinPoint
  /* this+0x4 */ int LosePoint
  /* this+0x8 */ int Point
}

struct PVPSCORE_INFO {
  /* this+0x0 */ int GID
  /* this+0x4 */ int AID
  /* this+0x8 */ int WinTime
  /* this+0xc */ char[0x10] MapName
}

struct PalmStrikeInfo {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ int level
}

struct PathCell {
  /* this+0x0 */ int x
  /* this+0x4 */ int y
  /* this+0x8 */ int dir
  /* this+0xc */ unsigned long time
}

struct PathNode {
  /* this+0x0 */ int x
  /* this+0x4 */ int y
  /* this+0x8 */ struct PathNode * parent
  /* this+0xc */ int cost
  /* this+0x10 */ int total
  /* this+0x14 */ int type
  /* this+0x18 */ int dir
  }

struct PosInfo {
  /* this+0x0 */ int x
  /* this+0x4 */ int y
  /* this+0x8 */ int isCheckPos
}

struct PropTM_Info {
  /* this+0x0 */ class std::map<unsigned short,short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,short> > > propAmount

  /* this+0x10 */ unsigned long time
  public void PropTM_Info(const struct PropTM_Info &)
  public void PropTM_Info()
  public void PropTM_Info::~PropTM_Info()
  public struct PropTM_Info & operator=(const struct PropTM_Info &)
  public void * __vecDelDtor(unsigned int)
}

struct Proto {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x8 */ struct lua_TValue * k
  /* this+0xc */ unsigned int * code
  /* this+0x10 */ struct Proto * * p
  /* this+0x14 */ int * lineinfo
  /* this+0x18 */ struct LocVar * locvars
  /* this+0x1c */ union TString * * upvalues
  /* this+0x20 */ union TString * source
  /* this+0x24 */ int sizeupvalues
  /* this+0x28 */ int sizek
  /* this+0x2c */ int sizecode
  /* this+0x30 */ int sizelineinfo
  /* this+0x34 */ int sizep
  /* this+0x38 */ int sizelocvars
  /* this+0x3c */ int linedefined
  /* this+0x40 */ int lastlinedefined
  /* this+0x44 */ union GCObject * gclist
  /* this+0x48 */ unsigned char nups
  /* this+0x49 */ unsigned char numparams
  /* this+0x4a */ unsigned char is_vararg
  /* this+0x4b */ unsigned char maxstacksize
}

struct QOS_OBJECT_HDR {
  /* this+0x0 */ unsigned long ObjectType
  /* this+0x4 */ unsigned long ObjectLength
}

struct RELATED_GUILD_INFO {
  /* this+0x0 */ int relation
  /* this+0x4 */ int GDID
  /* this+0x8 */ char[0x18] guildname
}

struct REPAIRITEM_INFO {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char refiningLevel
  /* this+0x5 */ struct EQUIPSLOTINFO slot

}

struct ROOM_MEMBER_DATA {
  /* this+0x0 */ unsigned long role
  /* this+0x4 */ char[0x18] name
}

struct RegistrationNode {
  /* this+0x0 */ unsigned long Next
  /* this+0x4 */ unsigned long Handler
  /* this+0x8 */ unsigned long EH4ScopeTable
  /* this+0xc */ unsigned long TryLevel
}

class RepairDamaged {
  public void operator()(class IVItItem *)
}

class Replicator {
  private void operator=(const class Replicator &)
  /* this+0x0 */ int index
  /* this+0x4 */ class DName *[0xa] dNameBuffer
  public void Replicator()
  public int isFull()
  public class Replicator & operator+=(const class DName &)
  public class DName operator[](int)
}

struct Request {
  public void SetID(int)
  public int GetID()
  /* this+0x0 */ int par1
  /* this+0x4 */ int par2
  /* this+0x8 */ int par3
  /* this+0xc */ int m_requestID
}

struct ResultItemInfo {
  /* this+0x0 */ unsigned int SSI_ID
  /* this+0x4 */ unsigned int AID
  /* this+0x8 */ char[0x50] StoreName
  /* this+0x58 */ unsigned short ITID
  /* this+0x5a */ unsigned char ItemType
  /* this+0x5b */ int price
  /* this+0x5f */ unsigned short count
  /* this+0x61 */ unsigned char refiningLevel
  /* this+0x62 */ struct EQUIPSLOTINFO CardSlot

  public struct ResultItemInfo & operator=(const struct ResultItemInfo &)
  public void ResultItemInfo::ResultItemInfo(const struct ResultItemInfo &)
  public void ResultItemInfo()
}

struct SCOMPOSITIONLOG {
  SDATABASELOG, offset = 0x0

  /* this+0x60 */ unsigned long m_dwCardID
  /* this+0x64 */ unsigned long m_dwSlot1
  /* this+0x68 */ unsigned long m_dwSlot2
  /* this+0x6c */ unsigned long m_dwSlot3
  /* this+0x70 */ unsigned long m_dwSlot4
  /* this+0x74 */ unsigned long m_dwEquipItem
  /* this+0x78 */ unsigned long m_dwSerial
}

struct SCOPE_ID {
  /* this(bf)+0x0:0x0 len(0x1c) */ unsigned long Zone
  /* this(bf)+0x0:0x1c len(0x4) */ unsigned long Level
  /* this+0x0 */ unsigned long Value
}

struct SCRIPT_INPUT {
  /* this+0x0 */ unsigned long npcTypeID
  /* this+0x4 */ unsigned long fsmStateID
  /* this+0x8 */ unsigned long inputType
  /* this+0xc */ unsigned long outputType
  /* this+0x10 */ unsigned long outputState
}

struct SC_HANDLE__ {
  /* this+0x0 */ int unused
}

struct SDATABASELOG {
  /* this+0x0 */ unsigned long m_dwAccountID
  /* this+0x4 */ char[0x1a] m_szAccountName
  /* this+0x20 */ unsigned long m_dwCharacterID
  /* this+0x24 */ char[0x1a] m_szCharacterName
  /* this+0x3e */ char[0x19] m_szMapName
  /* this+0x58 */ int m_nX
  /* this+0x5c */ int m_nY
}

struct SELL_ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ int price
  /* this+0x6 */ int overchargeprice
}

struct SERVER_ADDR {
  /* this+0x0 */ unsigned long ip
  /* this+0x4 */ short port
  /* this+0x6 */ unsigned char[0x14] name
  /* this+0x1a */ unsigned short usercount
  /* this+0x1c */ unsigned short state
  /* this+0x1e */ unsigned short property
}

struct SERVICE_STATUS_HANDLE__ {
  /* this+0x0 */ int unused
}

struct SET_POWER_SETTING_VALUE {
  /* this+0x0 */ unsigned long Version
  /* this+0x4 */ struct _GUID Guid

  /* this+0x14 */ enum SYSTEM_POWER_CONDITION PowerCondition
  /* this+0x18 */ unsigned long DataLength
  /* this+0x1c */ unsigned char[0x1] Data
}

struct SHELLHOOKINFO {
  /* this+0x0 */ struct HWND__ * hwnd
  /* this+0x4 */ struct tagRECT rc

}

struct SHOMUNLOG {
  SDATABASELOG, offset = 0x0

  /* this+0x60 */ char[0x10] m_describe
  /* this+0x70 */ int m_fullness
  /* this+0x74 */ int m_relation
  /* this+0x78 */ short m_job
  /* this+0x7a */ short m_level
  /* this+0x7c */ short m_hp
  /* this+0x7e */ short m_maxHP
  /* this+0x80 */ short m_sp
  /* this+0x82 */ short m_maxSP
  /* this+0x84 */ short m_Str
  /* this+0x86 */ short m_Agi
  /* this+0x88 */ short m_Vit
  /* this+0x8a */ short m_Int
  /* this+0x8c */ short m_Dex
  /* this+0x8e */ short m_Luk
  /* this+0x90 */ short m_SKPoint
}

struct SITEMLOG {
  /* this+0x0 */ int m_nVersion
  /* this+0x4 */ int m_nServerID
  /* this+0x8 */ int m_ActionType
  /* this+0xc */ char[0x14] m_szIP
  /* this+0x20 */ int m_nEventPosX
  /* this+0x24 */ int m_nEventPosY
  /* this+0x28 */ struct SITEMLOG_USERINFO m_srcUserInfo

  /* this+0x60 */ struct SITEMLOG_USERINFO m_desUserInfo

  /* this+0x98 */ unsigned long m_dwItemSerialcode
  /* this+0x9c */ char[0x18] m_szItemName
  /* this+0xb4 */ unsigned long m_dwITID
  /* this+0xb8 */ unsigned long m_dwItemCount
  /* this+0xbc */ char[0x19] m_szMapName
  /* this+0xd8 */ unsigned long m_dwPrice
  /* this+0xdc */ struct EQUIPSLOTINFO m_equipSlotInfo

  /* this+0xe4 */ int m_nRefingLevel
  /* this+0xe8 */ unsigned long m_dwAuctionID
  /* this+0xec */ unsigned long m_dwRemainZeny
  /* this+0xf0 */ unsigned long m_dwDestRemainZeny
  /* this+0xf8 */ __int64 m_NP_ItemSerialNum
  /* this+0x100 */ long m_NP_ItemHireExpireDate
  /* this+0x104 */ int m_NP_bCashItem
  /* this+0x108 */ __int64 m_Identity
}

struct SITEMLOG_USERINFO {
  /* this+0x0 */ int m_nAccountID
  /* this+0x4 */ char[0x18] m_szAccount
  /* this+0x1c */ unsigned long m_dwCharID
  /* this+0x20 */ char[0x18] m_szCharName
}

struct SKILLATTACK_MSG {
  public void SKILLATTACK_MSG::SKILLATTACK_MSG()
  public short GetType()
  public void SetType(short)
  /* this+0x0 */ unsigned long targetAID
  /* this+0x4 */ unsigned short SKID
  /* this+0x8 */ unsigned long srcAID
  /* this+0xc */ short level
  /* this+0xe */ short count
  /* this+0x10 */ short xPos
  /* this+0x12 */ short yPos
  /* this+0x14 */ short msgtype
  /* this+0x18 */ int par1
  /* this+0x1c */ unsigned char actionType
  /* this+0x20 */ int isDivide
  /* this+0x24 */ short skLevel
  /* this+0x26 */ bool isEnableDirectPath
  /* this+0x28 */ int finalDamage
  /* this+0x2c */ bool bSilenceSkill
  /* this+0x2d */ char Property
}

struct SKILLINFO {
  /* this+0x0 */ unsigned short SKID
  /* this+0x2 */ int type
  /* this+0x6 */ short level
  /* this+0x8 */ short spcost
  /* this+0xa */ short attackRange
  /* this+0xc */ char[0x18] skillName
  /* this+0x24 */ bool upgradable
}

struct SKILL_ACTIVE {
  /* this+0x0 */ unsigned long itemID
  /* this+0x4 */ unsigned long SKID
  /* this+0x8 */ unsigned long percent
  /* this+0xc */ unsigned long time
}

struct SKILL_ACTIVE_OPTION {
  /* this+0x0 */ unsigned long itemID
  /* this+0x4 */ unsigned long SKID
  /* this+0x8 */ unsigned long time
}

struct SKILL_AUTOSPELL {
  /* this+0x0 */ unsigned long percent
  /* this+0x4 */ unsigned long SKID
  /* this+0x8 */ short who
  /* this+0xa */ short level
}

struct SKILL_HANDICAP {
  /* this+0x0 */ short who
  /* this+0x2 */ short state
  /* this+0x4 */ int percent
}

struct SKILL_INFO {
  /* this+0x0 */ short xPos
  /* this+0x2 */ short yPos
  /* this+0x4 */ unsigned long operateTime
  /* this+0x8 */ unsigned long expiredTime
  /* this+0xc */ unsigned long birthTime
  /* this+0x10 */ unsigned long creatorAID
  /* this+0x14 */ unsigned long state
  /* this+0x18 */ unsigned long MoveReqLastTime
  /* this+0x1c */ int hp
  /* this+0x20 */ unsigned char job
  /* this+0x24 */ int originalJob
  /* this+0x28 */ short level
  /* this+0x2c */ struct PosInfo creatorPos

}

struct SKILL_TIME_INFO {
  /* this+0x0 */ unsigned long lastHPMinusTime
}

class SK_AB_ADORAMUS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_ADORAMUS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public static class CPC * SK_AB_ADORAMUS::GetHELPERPtr(class CPC *, const int)
  public int SK_AB_ADORAMUS::GetBLINDLifeTM(const int)
  public int SK_AB_ADORAMUS::GetDECAGILifeTM(const int)
  public int SK_AB_ADORAMUS::GetDECAGIAmount(const int)
  public int SK_AB_ADORAMUS::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_AB_ADORAMUS(const class SK_AB_ADORAMUS &)
  public void SK_AB_ADORAMUS::SK_AB_ADORAMUS()
  public void ~SK_AB_ADORAMUS()
  public class SK_AB_ADORAMUS & operator=(const class SK_AB_ADORAMUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_ANCILLA {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_ANCILLA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AB_ANCILLA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public struct std::pair<bool,int> SK_AB_ANCILLA::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public void SK_AB_ANCILLA(const class SK_AB_ANCILLA &)
  public void SK_AB_ANCILLA::SK_AB_ANCILLA()
  public void ~SK_AB_ANCILLA()
  public class SK_AB_ANCILLA & operator=(const class SK_AB_ANCILLA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_CANTO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_CANTO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AB_CANTO::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_AB_CANTO::GetApplyRadiusRange(const int)
  public int SK_AB_CANTO::GetLifeTM(const int)
  public void SK_AB_CANTO(const class SK_AB_CANTO &)
  public void SK_AB_CANTO::SK_AB_CANTO()
  public void ~SK_AB_CANTO()
  public class SK_AB_CANTO & operator=(const class SK_AB_CANTO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_CHEAL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_CHEAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AB_CHEAL::GetApplyRadiusRange(const int)
  public int SK_AB_CHEAL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_AB_CHEAL(const class SK_AB_CHEAL &)
  public void SK_AB_CHEAL::SK_AB_CHEAL()
  public void ~SK_AB_CHEAL()
  public class SK_AB_CHEAL & operator=(const class SK_AB_CHEAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_CLEARANCE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_CLEARANCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AB_CLEARANCE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_AB_CLEARANCE::GetApplyRatio(const int)
  public void SK_AB_CLEARANCE(const class SK_AB_CLEARANCE &)
  public void SK_AB_CLEARANCE::SK_AB_CLEARANCE()
  public void ~SK_AB_CLEARANCE()
  public class SK_AB_CLEARANCE & operator=(const class SK_AB_CLEARANCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_CLEMENTIA {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_CLEMENTIA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AB_CLEMENTIA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_AB_CLEMENTIA::GetApplyRadiusRange(const int)
  public int SK_AB_CLEMENTIA::GetLifeTM(const int)
  public void SK_AB_CLEMENTIA(const class SK_AB_CLEMENTIA &)
  public void SK_AB_CLEMENTIA::SK_AB_CLEMENTIA()
  public void ~SK_AB_CLEMENTIA()
  public class SK_AB_CLEMENTIA & operator=(const class SK_AB_CLEMENTIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_DUPLELIGHT {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_DUPLELIGHT::GetLifeTime(const int)
  public int SK_AB_DUPLELIGHT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_DUPLELIGHT(const class SK_AB_DUPLELIGHT &)
  public void SK_AB_DUPLELIGHT::SK_AB_DUPLELIGHT()
  public void ~SK_AB_DUPLELIGHT()
  public class SK_AB_DUPLELIGHT & operator=(const class SK_AB_DUPLELIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_DUPLELIGHT_MAGIC {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_DUPLELIGHT_MAGIC::GetSpellPercent(const int)
  public int SK_AB_DUPLELIGHT_MAGIC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_DUPLELIGHT_MAGIC(const class SK_AB_DUPLELIGHT_MAGIC &)
  public void SK_AB_DUPLELIGHT_MAGIC::SK_AB_DUPLELIGHT_MAGIC()
  public void ~SK_AB_DUPLELIGHT_MAGIC()
  public class SK_AB_DUPLELIGHT_MAGIC & operator=(const class SK_AB_DUPLELIGHT_MAGIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_DUPLELIGHT_MELEE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_DUPLELIGHT_MELEE::GetSpellPercent(const int)
  public int SK_AB_DUPLELIGHT_MELEE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_DUPLELIGHT_MELEE(const class SK_AB_DUPLELIGHT_MELEE &)
  public void SK_AB_DUPLELIGHT_MELEE::SK_AB_DUPLELIGHT_MELEE()
  public void ~SK_AB_DUPLELIGHT_MELEE()
  public class SK_AB_DUPLELIGHT_MELEE & operator=(const class SK_AB_DUPLELIGHT_MELEE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_EPICLESIS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_EPICLESIS::GetLifeTime(const int)
  public int SK_AB_EPICLESIS::GetRecoveryHPpercent(const int)
  public int SK_AB_EPICLESIS::GetRecoverySPpercent(const int)
  public int SK_AB_EPICLESIS::GetMAXHPPercent(const int)
  public bool SK_AB_EPICLESIS::IsDUPLICATE(class CPC *, const class CMyRect &)
  public int SK_AB_EPICLESIS::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_AB_EPICLESIS::Init()
  public int SK_AB_EPICLESIS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_EPICLESIS(const class SK_AB_EPICLESIS &)
  public void SK_AB_EPICLESIS::SK_AB_EPICLESIS()
  public void ~SK_AB_EPICLESIS()
  public class SK_AB_EPICLESIS & operator=(const class SK_AB_EPICLESIS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_EUCHARISTICA {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_EUCHARISTICA::GetPlusAtkPercentMagic(const int)
  public int SK_AB_EUCHARISTICA::GetPlusAtkPercentPhysics(const int)
  public int SK_AB_EUCHARISTICA::GetResistProperty(const int)
  public int SK_AB_EUCHARISTICA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_EUCHARISTICA(const class SK_AB_EUCHARISTICA &)
  public void SK_AB_EUCHARISTICA::SK_AB_EUCHARISTICA()
  public void ~SK_AB_EUCHARISTICA()
  public class SK_AB_EUCHARISTICA & operator=(const class SK_AB_EUCHARISTICA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_EXPIATIO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_EXPIATIO::GetIgnoreDEFPercent(const int)
  public int SK_AB_EXPIATIO::GetLifeTime(const int)
  public int SK_AB_EXPIATIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AB_EXPIATIO::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_AB_EXPIATIO(const class SK_AB_EXPIATIO &)
  public void SK_AB_EXPIATIO::SK_AB_EXPIATIO()
  public void ~SK_AB_EXPIATIO()
  public class SK_AB_EXPIATIO & operator=(const class SK_AB_EXPIATIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_HIGHNESSHEAL {
  CSkillTypeInfo2, offset = 0x0

  public static float SK_AB_HIGHNESSHEAL::GetHealPercent(const int)
  public int SK_AB_HIGHNESSHEAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AB_HIGHNESSHEAL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_AB_HIGHNESSHEAL(const class SK_AB_HIGHNESSHEAL &)
  public void SK_AB_HIGHNESSHEAL::SK_AB_HIGHNESSHEAL()
  public void ~SK_AB_HIGHNESSHEAL()
  public class SK_AB_HIGHNESSHEAL & operator=(const class SK_AB_HIGHNESSHEAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_JUDEX {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_JUDEX::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_JUDEX(const class SK_AB_JUDEX &)
  public void SK_AB_JUDEX::SK_AB_JUDEX()
  public void ~SK_AB_JUDEX()
  public class SK_AB_JUDEX & operator=(const class SK_AB_JUDEX &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_LAUDAAGNUS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_LAUDAAGNUS::GetDeBuffApplyPercent(const int)
  public int SK_AB_LAUDAAGNUS::GetVITplusTime(const int)
  public int SK_AB_LAUDAAGNUS::GetVITplusValue(const int)
  public int SK_AB_LAUDAAGNUS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_LAUDAAGNUS(const class SK_AB_LAUDAAGNUS &)
  public void SK_AB_LAUDAAGNUS::SK_AB_LAUDAAGNUS()
  public void ~SK_AB_LAUDAAGNUS()
  public class SK_AB_LAUDAAGNUS & operator=(const class SK_AB_LAUDAAGNUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_LAUDARAMUS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_LAUDARAMUS::GetDeBuffApplyPercent(const int)
  public int SK_AB_LAUDARAMUS::GetLUKplusTime(const int)
  public int SK_AB_LAUDARAMUS::GetLUKplusValue(const int)
  public int SK_AB_LAUDARAMUS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_LAUDARAMUS(const class SK_AB_LAUDARAMUS &)
  public void SK_AB_LAUDARAMUS::SK_AB_LAUDARAMUS()
  public void ~SK_AB_LAUDARAMUS()
  public class SK_AB_LAUDARAMUS & operator=(const class SK_AB_LAUDARAMUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_ORATIO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_ORATIO::GetLifeTime(const int)
  public int SK_AB_ORATIO::GetSaintPropertyResistDecPercent(const int)
  public int SK_AB_ORATIO::GetApplyRatio(const int)
  public int SK_AB_ORATIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_ORATIO(const class SK_AB_ORATIO &)
  public void SK_AB_ORATIO::SK_AB_ORATIO()
  public void ~SK_AB_ORATIO()
  public class SK_AB_ORATIO & operator=(const class SK_AB_ORATIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_PRAEFATIO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_PRAEFATIO::GetLifeTime(const int)
  public int SK_AB_PRAEFATIO::GetDefenceNum(const int)
  public int SK_AB_PRAEFATIO::GetDefencePercent(const int)
  public int SK_AB_PRAEFATIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_PRAEFATIO(const class SK_AB_PRAEFATIO &)
  public void SK_AB_PRAEFATIO::SK_AB_PRAEFATIO()
  public void ~SK_AB_PRAEFATIO()
  public class SK_AB_PRAEFATIO & operator=(const class SK_AB_PRAEFATIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_RENOVATIO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_RENOVATIO::GetLifeTime(const int)
  public int SK_AB_RENOVATIO::GetHPRecoveryPercent(const int)
  public int SK_AB_RENOVATIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_RENOVATIO(const class SK_AB_RENOVATIO &)
  public void SK_AB_RENOVATIO::SK_AB_RENOVATIO()
  public void ~SK_AB_RENOVATIO()
  public class SK_AB_RENOVATIO & operator=(const class SK_AB_RENOVATIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_SECRAMENT {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_SECRAMENT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AB_SECRAMENT::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_AB_SECRAMENT::GetLifeTime(const int)
  public int SK_AB_SECRAMENT::GetFixedCastingReducePercent(const int)
  public void SK_AB_SECRAMENT(const class SK_AB_SECRAMENT &)
  public void SK_AB_SECRAMENT::SK_AB_SECRAMENT()
  public void ~SK_AB_SECRAMENT()
  public class SK_AB_SECRAMENT & operator=(const class SK_AB_SECRAMENT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AB_SILENTIUM {
  CSkillTypeInfo2, offset = 0x0

  public int SK_AB_SILENTIUM::GetLifeTime(const int)
  public int SK_AB_SILENTIUM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AB_SILENTIUM(const class SK_AB_SILENTIUM &)
  public void SK_AB_SILENTIUM::SK_AB_SILENTIUM()
  public void ~SK_AB_SILENTIUM()
  public class SK_AB_SILENTIUM & operator=(const class SK_AB_SILENTIUM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ACOLYTE {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_ACOLYTE::GetMaxLevel()
  public int SK_ACOLYTE::IsAvailableJob(short)
  public short SK_ACOLYTE::GetSPCost(short)
  public short SK_ACOLYTE::GetPreDelayTime(short)
  public void SK_ACOLYTE(const class SK_ACOLYTE &)
  public void SK_ACOLYTE::SK_ACOLYTE()
  public void SK_ACOLYTE::~SK_ACOLYTE()
  public class SK_ACOLYTE & operator=(const class SK_ACOLYTE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AC_CHARGEARROW {
  SK_ARCHER, offset = 0x0

  public void SK_AC_CHARGEARROW::Init()
  public int SK_AC_CHARGEARROW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AC_CHARGEARROW::GetMaxLevel()
  public short SK_AC_CHARGEARROW::GetSPCost(short)
  public short SK_AC_CHARGEARROW::GetPreDelayTime(short)
  public int SK_AC_CHARGEARROW::IsAvailableJob(short)
  public void SK_AC_CHARGEARROW(const class SK_AC_CHARGEARROW &)
  public void SK_AC_CHARGEARROW::SK_AC_CHARGEARROW()
  public void SK_AC_CHARGEARROW::~SK_AC_CHARGEARROW()
  public class SK_AC_CHARGEARROW & operator=(const class SK_AC_CHARGEARROW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AC_CONCENTRATION {
  SK_ARCHER, offset = 0x0

  public void SK_AC_CONCENTRATION::Init()
  public int SK_AC_CONCENTRATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AC_CONCENTRATION::GetSPCost(short)
  public void SK_AC_CONCENTRATION(const class SK_AC_CONCENTRATION &)
  public void SK_AC_CONCENTRATION()
  public void ~SK_AC_CONCENTRATION()
  public class SK_AC_CONCENTRATION & operator=(const class SK_AC_CONCENTRATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AC_DOUBLE {
  SK_ARCHER, offset = 0x0

  public void SK_AC_DOUBLE::Init()
  public int SK_AC_DOUBLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AC_DOUBLE::IsAvailableJob(short)
  public short SK_AC_DOUBLE::GetSPCost(short)
  public void SK_AC_DOUBLE(const class SK_AC_DOUBLE &)
  public void SK_AC_DOUBLE::SK_AC_DOUBLE()
  public void SK_AC_DOUBLE::~SK_AC_DOUBLE()
  public class SK_AC_DOUBLE & operator=(const class SK_AC_DOUBLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AC_MAKINGARROW {
  SK_ARCHER, offset = 0x0

  public void SK_AC_MAKINGARROW::Init()
  public int SK_AC_MAKINGARROW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AC_MAKINGARROW::GetMaxLevel()
  public short SK_AC_MAKINGARROW::GetSPCost(short)
  public int SK_AC_MAKINGARROW::IsAvailableJob(short)
  public void SK_AC_MAKINGARROW(const class SK_AC_MAKINGARROW &)
  public void SK_AC_MAKINGARROW()
  public void ~SK_AC_MAKINGARROW()
  public class SK_AC_MAKINGARROW & operator=(const class SK_AC_MAKINGARROW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AC_OWL {
  SK_ARCHER, offset = 0x0

  public void SK_AC_OWL::Init()
  public int SK_AC_OWL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AC_OWL(const class SK_AC_OWL &)
  public void SK_AC_OWL()
  public void ~SK_AC_OWL()
  public class SK_AC_OWL & operator=(const class SK_AC_OWL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AC_SHOWER {
  SK_ARCHER, offset = 0x0

  public void SK_AC_SHOWER::Init()
  public int SK_AC_SHOWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AC_SHOWER::GetSPCost(short)
  public short SK_AC_SHOWER::GetPostDelayTM(short)
  public void SK_AC_SHOWER(const class SK_AC_SHOWER &)
  public void SK_AC_SHOWER::SK_AC_SHOWER()
  public void SK_AC_SHOWER::~SK_AC_SHOWER()
  public class SK_AC_SHOWER & operator=(const class SK_AC_SHOWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AC_VULTURE {
  SK_ARCHER, offset = 0x0

  public void SK_AC_VULTURE::Init()
  public int SK_AC_VULTURE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AC_VULTURE::IsAvailableJob(short)
  public void SK_AC_VULTURE(const class SK_AC_VULTURE &)
  public void SK_AC_VULTURE()
  public void ~SK_AC_VULTURE()
  public class SK_AC_VULTURE & operator=(const class SK_AC_VULTURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALCHEMIST {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_ALCHEMIST::GetMaxLevel()
  public int SK_ALCHEMIST::IsAvailableJob(short)
  public short SK_ALCHEMIST::GetSPCost(short)
  public short SK_ALCHEMIST::GetPreDelayTime(short)
  public void SK_ALCHEMIST(const class SK_ALCHEMIST &)
  public void SK_ALCHEMIST::SK_ALCHEMIST()
  public void SK_ALCHEMIST::~SK_ALCHEMIST()
  public class SK_ALCHEMIST & operator=(const class SK_ALCHEMIST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_ANGEL_PROTECT {
  CSkillTypeInfo, offset = 0x0

  public void SK_ALL_ANGEL_PROTECT::Init()
  public int SK_ALL_ANGEL_PROTECT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_ANGEL_PROTECT::GetMaxLevel()
  public short SK_ALL_ANGEL_PROTECT::GetSPCost(short)
  public void SK_ALL_ANGEL_PROTECT(const class SK_ALL_ANGEL_PROTECT &)
  public void SK_ALL_ANGEL_PROTECT()
  public void ~SK_ALL_ANGEL_PROTECT()
  public class SK_ALL_ANGEL_PROTECT & operator=(const class SK_ALL_ANGEL_PROTECT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_BUYING_STORE {
  CSkillTypeInfo, offset = 0x0

    public void SK_ALL_BUYING_STORE::Init()
  public int SK_ALL_BUYING_STORE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_BUYING_STORE::GetMaxLevel()
  public short SK_ALL_BUYING_STORE::GetSPCost(short)
  public int SK_ALL_BUYING_STORE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_ALL_BUYING_STORE(const class SK_ALL_BUYING_STORE &)
  public void SK_ALL_BUYING_STORE()
  public void ~SK_ALL_BUYING_STORE()
  public class SK_ALL_BUYING_STORE & operator=(const class SK_ALL_BUYING_STORE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_CATCRY {
  CSkillTypeInfo, offset = 0x0

  public void SK_ALL_CATCRY::Init()
  public int SK_ALL_CATCRY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_CATCRY::GetMaxLevel()
  public short SK_ALL_CATCRY::GetSPCost(short)
  public void SK_ALL_CATCRY(const class SK_ALL_CATCRY &)
  public void SK_ALL_CATCRY()
  public void ~SK_ALL_CATCRY()
  public class SK_ALL_CATCRY & operator=(const class SK_ALL_CATCRY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_DREAM_SUMMERNIGHT {
  CSkillTypeInfo, offset = 0x0

  public void SK_ALL_DREAM_SUMMERNIGHT::Init()
  public int SK_ALL_DREAM_SUMMERNIGHT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_DREAM_SUMMERNIGHT::GetMaxLevel()
  public short SK_ALL_DREAM_SUMMERNIGHT::GetSPCost(short)
  public void SK_ALL_DREAM_SUMMERNIGHT(const class SK_ALL_DREAM_SUMMERNIGHT &)
  public void SK_ALL_DREAM_SUMMERNIGHT()
  public void ~SK_ALL_DREAM_SUMMERNIGHT()
  public class SK_ALL_DREAM_SUMMERNIGHT & operator=(const class SK_ALL_DREAM_SUMMERNIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_GUARDIAN_RECALL {
  SK_ALL_MAPMOVE, offset = 0x0

  public const int SK_ALL_GUARDIAN_RECALL::GetEfstID()
  public void SK_ALL_GUARDIAN_RECALL(const class SK_ALL_GUARDIAN_RECALL &)
  public void SK_ALL_GUARDIAN_RECALL::SK_ALL_GUARDIAN_RECALL()
  public void ~SK_ALL_GUARDIAN_RECALL()
  public class SK_ALL_GUARDIAN_RECALL & operator=(const class SK_ALL_GUARDIAN_RECALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_INCCARRY {
  CSkillTypeInfo2, offset = 0x0

  public void SK_ALL_INCCARRY(const class SK_ALL_INCCARRY &)
  public void SK_ALL_INCCARRY::SK_ALL_INCCARRY()
  public void ~SK_ALL_INCCARRY()
  public class SK_ALL_INCCARRY & operator=(const class SK_ALL_INCCARRY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_MAPMOVE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_ALL_MAPMOVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const char * SK_ALL_MAPMOVE::GetMapName()
  public void SK_ALL_MAPMOVE::GetPos(short &, short &)
  public const int GetEfstID()
  public void SK_ALL_MAPMOVE(const class SK_ALL_MAPMOVE &)
  public void SK_ALL_MAPMOVE()
  public void SK_ALL_MAPMOVE::~SK_ALL_MAPMOVE()
  public class SK_ALL_MAPMOVE & operator=(const class SK_ALL_MAPMOVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_ODINS_POWER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_ALL_ODINS_POWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const int SK_ALL_ODINS_POWER::GetATKValue(const int)
  public const int SK_ALL_ODINS_POWER::GetMATKValue(const int)
  public const int SK_ALL_ODINS_POWER::GetDEFValue(const int)
  public const int SK_ALL_ODINS_POWER::GetMDEFValue(const int)
  public const int SK_ALL_ODINS_POWER::GetDelayTime(const int)
  public void SK_ALL_ODINS_POWER(const class SK_ALL_ODINS_POWER &)
  public void SK_ALL_ODINS_POWER::SK_ALL_ODINS_POWER()
  public void ~SK_ALL_ODINS_POWER()
  public class SK_ALL_ODINS_POWER & operator=(const class SK_ALL_ODINS_POWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_ODINS_RECALL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_ALL_ODINS_RECALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_ODINS_RECALL::GetMaxLevel()
  public short SK_ALL_ODINS_RECALL::GetSPCost(short)
  public short SK_ALL_ODINS_RECALL::GetPreDelayTime(short)
  public void SK_ALL_ODINS_RECALL(const class SK_ALL_ODINS_RECALL &)
  public void SK_ALL_ODINS_RECALL::SK_ALL_ODINS_RECALL()
  public void ~SK_ALL_ODINS_RECALL()
  public class SK_ALL_ODINS_RECALL & operator=(const class SK_ALL_ODINS_RECALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_PARTYFLEE {
  CSkillTypeInfo, offset = 0x0

  public void SK_ALL_PARTYFLEE::Init()
  public int SK_ALL_PARTYFLEE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_PARTYFLEE::GetMaxLevel()
  public short SK_ALL_PARTYFLEE::GetSPCost(short)
  public void SK_ALL_PARTYFLEE(const class SK_ALL_PARTYFLEE &)
  public void SK_ALL_PARTYFLEE()
  public void ~SK_ALL_PARTYFLEE()
  public class SK_ALL_PARTYFLEE & operator=(const class SK_ALL_PARTYFLEE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_RESURRECTION {
  CSkillTypeInfo, offset = 0x0

  public void SK_ALL_RESURRECTION::Init()
  public int SK_ALL_RESURRECTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_RESURRECTION::GetMaxLevel()
  public int SK_ALL_RESURRECTION::IsAvailableJob(short)
  public short SK_ALL_RESURRECTION::GetSPCost(short)
  public short SK_ALL_RESURRECTION::GetPreDelayTime(short)
  public void SK_ALL_RESURRECTION(const class SK_ALL_RESURRECTION &)
  public void SK_ALL_RESURRECTION()
  public void ~SK_ALL_RESURRECTION()
  public class SK_ALL_RESURRECTION & operator=(const class SK_ALL_RESURRECTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_REVERSEORCISH {
  CSkillTypeInfo, offset = 0x0

  public void SK_ALL_REVERSEORCISH::Init()
  public int SK_ALL_REVERSEORCISH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_REVERSEORCISH::GetMaxLevel()
  public short SK_ALL_REVERSEORCISH::GetSPCost(short)
  public void SK_ALL_REVERSEORCISH(const class SK_ALL_REVERSEORCISH &)
  public void SK_ALL_REVERSEORCISH()
  public void ~SK_ALL_REVERSEORCISH()
  public class SK_ALL_REVERSEORCISH & operator=(const class SK_ALL_REVERSEORCISH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_SONKRAN {
  CSkillTypeInfo, offset = 0x0

  public void SK_ALL_SONKRAN::Init()
  public int SK_ALL_SONKRAN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_SONKRAN::GetMaxLevel()
  public short SK_ALL_SONKRAN::GetSPCost(short)
  public short SK_ALL_SONKRAN::GetPreDelayTime(short)
  public void SK_ALL_SONKRAN(const class SK_ALL_SONKRAN &)
  public void SK_ALL_SONKRAN()
  public void ~SK_ALL_SONKRAN()
  public class SK_ALL_SONKRAN & operator=(const class SK_ALL_SONKRAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_TIMEIN {
  SK_COLLECTOR, offset = 0x0

  public void SK_ALL_TIMEIN::Init()
  public int SK_ALL_TIMEIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_TIMEIN::GetMaxLevel()
  public short SK_ALL_TIMEIN::GetSPCost(short)
  public short SK_ALL_TIMEIN::GetPreDelayTime(short)
  public void SK_ALL_TIMEIN(const class SK_ALL_TIMEIN &)
  public void SK_ALL_TIMEIN::SK_ALL_TIMEIN()
  public void ~SK_ALL_TIMEIN()
  public class SK_ALL_TIMEIN & operator=(const class SK_ALL_TIMEIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ALL_WEWISH {
  CSkillTypeInfo, offset = 0x0

  public void SK_ALL_WEWISH::Init()
  public int SK_ALL_WEWISH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ALL_WEWISH::GetMaxLevel()
  public short SK_ALL_WEWISH::GetSPCost(short)
  public void SK_ALL_WEWISH(const class SK_ALL_WEWISH &)
  public void SK_ALL_WEWISH()
  public void ~SK_ALL_WEWISH()
  public class SK_ALL_WEWISH & operator=(const class SK_ALL_WEWISH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_ANGELUS {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_ANGELUS::Init()
  public int SK_AL_ANGELUS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_ANGELUS::GetSPCost(short)
  public short SK_AL_ANGELUS::GetPreDelayTime(short)
  public void SK_AL_ANGELUS(const class SK_AL_ANGELUS &)
  public void SK_AL_ANGELUS()
  public void ~SK_AL_ANGELUS()
  public class SK_AL_ANGELUS & operator=(const class SK_AL_ANGELUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_BLESSING {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_BLESSING::Init()
  public int SK_AL_BLESSING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_BLESSING::GetSPCost(short)
  public void SK_AL_BLESSING(const class SK_AL_BLESSING &)
  public void SK_AL_BLESSING::SK_AL_BLESSING()
  public void SK_AL_BLESSING::~SK_AL_BLESSING()
  public class SK_AL_BLESSING & operator=(const class SK_AL_BLESSING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_CRUCIS {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_CRUCIS::Init()
  public int SK_AL_CRUCIS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_CRUCIS::GetSPCost(short)
  public short SK_AL_CRUCIS::GetPreDelayTime(short)
  public void SK_AL_CRUCIS(const class SK_AL_CRUCIS &)
  public void SK_AL_CRUCIS()
  public void ~SK_AL_CRUCIS()
  public class SK_AL_CRUCIS & operator=(const class SK_AL_CRUCIS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_CURE {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_CURE::Init()
  public int SK_AL_CURE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_CURE::GetMaxLevel()
  public short SK_AL_CURE::GetSPCost(short)
  public int SK_AL_CURE::IsAvailableJob(short)
  public void SK_AL_CURE(const class SK_AL_CURE &)
  public void SK_AL_CURE()
  public void ~SK_AL_CURE()
  public class SK_AL_CURE & operator=(const class SK_AL_CURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_DECAGI {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_DECAGI::Init()
  public int SK_AL_DECAGI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_DECAGI::GetSPCost(short)
  public short SK_AL_DECAGI::GetPreDelayTime(short)
  public void SK_AL_DECAGI(const class SK_AL_DECAGI &)
  public void SK_AL_DECAGI::SK_AL_DECAGI()
  public void SK_AL_DECAGI::~SK_AL_DECAGI()
  public class SK_AL_DECAGI & operator=(const class SK_AL_DECAGI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_DEMONBANE {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_DEMONBANE::Init()
  public int SK_AL_DEMONBANE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AL_DEMONBANE::IsAvailableJob(short)
  public void SK_AL_DEMONBANE(const class SK_AL_DEMONBANE &)
  public void SK_AL_DEMONBANE()
  public void ~SK_AL_DEMONBANE()
  public class SK_AL_DEMONBANE & operator=(const class SK_AL_DEMONBANE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_DP {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_DP::Init()
  public int SK_AL_DP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_AL_DP::IsAvailableJob(short)
  public void SK_AL_DP(const class SK_AL_DP &)
  public void SK_AL_DP()
  public void ~SK_AL_DP()
  public class SK_AL_DP & operator=(const class SK_AL_DP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_HEAL {
  SK_ACOLYTE, offset = 0x0

  public int SK_AL_HEAL::GetHealPercent(const int)
  public void SK_AL_HEAL::Init()
  public int SK_AL_HEAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_HEAL::GetSPCost(short)
  public int SK_AL_HEAL::IsAvailableJob(short)
  public void SK_AL_HEAL(const class SK_AL_HEAL &)
  public void SK_AL_HEAL()
  public void ~SK_AL_HEAL()
  public class SK_AL_HEAL & operator=(const class SK_AL_HEAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_HOLYLIGHT {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_HOLYLIGHT::Init()
  public int SK_AL_HOLYLIGHT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_HOLYLIGHT::GetMaxLevel()
  public short SK_AL_HOLYLIGHT::GetSPCost(short)
  public short SK_AL_HOLYLIGHT::GetPreDelayTime(short)
  public int SK_AL_HOLYLIGHT::IsAvailableJob(short)
  public void SK_AL_HOLYLIGHT(const class SK_AL_HOLYLIGHT &)
  public void SK_AL_HOLYLIGHT()
  public void ~SK_AL_HOLYLIGHT()
  public class SK_AL_HOLYLIGHT & operator=(const class SK_AL_HOLYLIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_HOLYWATER {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_HOLYWATER::Init()
  public int SK_AL_HOLYWATER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_HOLYWATER::GetMaxLevel()
  public short SK_AL_HOLYWATER::GetSPCost(short)
  public short SK_AL_HOLYWATER::GetPreDelayTime(short)
  public void SK_AL_HOLYWATER(const class SK_AL_HOLYWATER &)
  public void SK_AL_HOLYWATER()
  public void ~SK_AL_HOLYWATER()
  public class SK_AL_HOLYWATER & operator=(const class SK_AL_HOLYWATER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_INCAGI {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_INCAGI::Init()
  public int SK_AL_INCAGI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_INCAGI::GetSPCost(short)
  public short SK_AL_INCAGI::GetPreDelayTime(short)
  public void SK_AL_INCAGI(const class SK_AL_INCAGI &)
  public void SK_AL_INCAGI::SK_AL_INCAGI()
  public void SK_AL_INCAGI::~SK_AL_INCAGI()
  public class SK_AL_INCAGI & operator=(const class SK_AL_INCAGI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_PNEUMA {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_PNEUMA::Init()
  public int SK_AL_PNEUMA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_PNEUMA::GetMaxLevel()
  public short SK_AL_PNEUMA::GetSPCost(short)
  public void SK_AL_PNEUMA(const class SK_AL_PNEUMA &)
  public void SK_AL_PNEUMA()
  public void ~SK_AL_PNEUMA()
  public class SK_AL_PNEUMA & operator=(const class SK_AL_PNEUMA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_RUWACH {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_RUWACH::Init()
  public int SK_AL_RUWACH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_RUWACH::GetMaxLevel()
  public short SK_AL_RUWACH::GetSPCost(short)
  public void SK_AL_RUWACH(const class SK_AL_RUWACH &)
  public void SK_AL_RUWACH()
  public void ~SK_AL_RUWACH()
  public class SK_AL_RUWACH & operator=(const class SK_AL_RUWACH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_TELEPORT {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_TELEPORT::Init()
  public int SK_AL_TELEPORT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_TELEPORT::GetMaxLevel()
  public short SK_AL_TELEPORT::GetSPCost(short)
  public short SK_AL_TELEPORT::GetPreDelayTime(short)
  public void SK_AL_TELEPORT(const class SK_AL_TELEPORT &)
  public void SK_AL_TELEPORT()
  public void ~SK_AL_TELEPORT()
  public class SK_AL_TELEPORT & operator=(const class SK_AL_TELEPORT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AL_WARP {
  SK_ACOLYTE, offset = 0x0

  public void SK_AL_WARP::Init()
  public int SK_AL_WARP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AL_WARP::GetMaxLevel()
  public short SK_AL_WARP::GetSPCost(short)
  public short SK_AL_WARP::GetPreDelayTime(short)
  public void SK_AL_WARP(const class SK_AL_WARP &)
  public void SK_AL_WARP()
  public void ~SK_AL_WARP()
  public class SK_AL_WARP & operator=(const class SK_AL_WARP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_ACIDTERROR {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_ACIDTERROR::Init()
  public int SK_AM_ACIDTERROR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_ACIDTERROR::GetSPCost(short)
  public short SK_AM_ACIDTERROR::GetPreDelayTime(short)
  public void SK_AM_ACIDTERROR(const class SK_AM_ACIDTERROR &)
  public void SK_AM_ACIDTERROR::SK_AM_ACIDTERROR()
  public void ~SK_AM_ACIDTERROR()
  public class SK_AM_ACIDTERROR & operator=(const class SK_AM_ACIDTERROR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_AXEMASTERY {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_AXEMASTERY::Init()
  public int SK_AM_AXEMASTERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_AXEMASTERY::GetMaxLevel()
  public void SK_AM_AXEMASTERY(const class SK_AM_AXEMASTERY &)
  public void SK_AM_AXEMASTERY::SK_AM_AXEMASTERY()
  public void ~SK_AM_AXEMASTERY()
  public class SK_AM_AXEMASTERY & operator=(const class SK_AM_AXEMASTERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_BERSERKPITCHER {
  SK_LINKER, offset = 0x0

  public void SK_AM_BERSERKPITCHER::Init()
  public int SK_AM_BERSERKPITCHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_BERSERKPITCHER::GetMaxLevel()
  public short SK_AM_BERSERKPITCHER::GetSPCost(short)
  public short SK_AM_BERSERKPITCHER::GetPreDelayTime(short)
  public void SK_AM_BERSERKPITCHER(const class SK_AM_BERSERKPITCHER &)
  public void SK_AM_BERSERKPITCHER::SK_AM_BERSERKPITCHER()
  public void ~SK_AM_BERSERKPITCHER()
  public class SK_AM_BERSERKPITCHER & operator=(const class SK_AM_BERSERKPITCHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_BIOETHICS {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_BIOETHICS::Init()
  public int SK_AM_BIOETHICS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_BIOETHICS::GetMaxLevel()
  public int SK_AM_BIOETHICS::IsAvailableJob(short)
  public void SK_AM_BIOETHICS(const class SK_AM_BIOETHICS &)
  public void SK_AM_BIOETHICS::SK_AM_BIOETHICS()
  public void ~SK_AM_BIOETHICS()
  public class SK_AM_BIOETHICS & operator=(const class SK_AM_BIOETHICS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_BIOTECHNOLOGY {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_BIOTECHNOLOGY::Init()
  public int SK_AM_BIOTECHNOLOGY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_BIOTECHNOLOGY::GetMaxLevel()
  public void SK_AM_BIOTECHNOLOGY(const class SK_AM_BIOTECHNOLOGY &)
  public void SK_AM_BIOTECHNOLOGY::SK_AM_BIOTECHNOLOGY()
  public void ~SK_AM_BIOTECHNOLOGY()
  public class SK_AM_BIOTECHNOLOGY & operator=(const class SK_AM_BIOTECHNOLOGY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_CALLHOMUN {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_CALLHOMUN::Init()
  public int SK_AM_CALLHOMUN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_CALLHOMUN::GetMaxLevel()
  public short SK_AM_CALLHOMUN::GetSPCost(short)
  public int SK_AM_CALLHOMUN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_AM_CALLHOMUN(const class SK_AM_CALLHOMUN &)
  public void SK_AM_CALLHOMUN::SK_AM_CALLHOMUN()
  public void ~SK_AM_CALLHOMUN()
  public class SK_AM_CALLHOMUN & operator=(const class SK_AM_CALLHOMUN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_CANNIBALIZE {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_CANNIBALIZE::Init()
  public int SK_AM_CANNIBALIZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_CANNIBALIZE::GetSPCost(short)
  public short SK_AM_CANNIBALIZE::GetPreDelayTime(short)
  public void SK_AM_CANNIBALIZE(const class SK_AM_CANNIBALIZE &)
  public void SK_AM_CANNIBALIZE::SK_AM_CANNIBALIZE()
  public void ~SK_AM_CANNIBALIZE()
  public class SK_AM_CANNIBALIZE & operator=(const class SK_AM_CANNIBALIZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_CP_ARMOR {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_CP_ARMOR::Init()
  public int SK_AM_CP_ARMOR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_CP_ARMOR::GetSPCost(short)
  public short SK_AM_CP_ARMOR::GetPreDelayTime(short)
  public void SK_AM_CP_ARMOR(const class SK_AM_CP_ARMOR &)
  public void SK_AM_CP_ARMOR::SK_AM_CP_ARMOR()
  public void ~SK_AM_CP_ARMOR()
  public class SK_AM_CP_ARMOR & operator=(const class SK_AM_CP_ARMOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_CP_HELM {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_CP_HELM::Init()
  public int SK_AM_CP_HELM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_CP_HELM::GetSPCost(short)
  public short SK_AM_CP_HELM::GetPreDelayTime(short)
  public void SK_AM_CP_HELM(const class SK_AM_CP_HELM &)
  public void SK_AM_CP_HELM::SK_AM_CP_HELM()
  public void ~SK_AM_CP_HELM()
  public class SK_AM_CP_HELM & operator=(const class SK_AM_CP_HELM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_CP_SHIELD {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_CP_SHIELD::Init()
  public int SK_AM_CP_SHIELD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_CP_SHIELD::GetSPCost(short)
  public short SK_AM_CP_SHIELD::GetPreDelayTime(short)
  public void SK_AM_CP_SHIELD(const class SK_AM_CP_SHIELD &)
  public void SK_AM_CP_SHIELD::SK_AM_CP_SHIELD()
  public void ~SK_AM_CP_SHIELD()
  public class SK_AM_CP_SHIELD & operator=(const class SK_AM_CP_SHIELD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_CP_WEAPON {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_CP_WEAPON::Init()
  public int SK_AM_CP_WEAPON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_CP_WEAPON::GetSPCost(short)
  public short SK_AM_CP_WEAPON::GetPreDelayTime(short)
  public void SK_AM_CP_WEAPON(const class SK_AM_CP_WEAPON &)
  public void SK_AM_CP_WEAPON::SK_AM_CP_WEAPON()
  public void ~SK_AM_CP_WEAPON()
  public class SK_AM_CP_WEAPON & operator=(const class SK_AM_CP_WEAPON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_CREATECREATURE {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_CREATECREATURE::Init()
  public int SK_AM_CREATECREATURE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_CREATECREATURE::GetSPCost(short)
  public void SK_AM_CREATECREATURE(const class SK_AM_CREATECREATURE &)
  public void SK_AM_CREATECREATURE::SK_AM_CREATECREATURE()
  public void ~SK_AM_CREATECREATURE()
  public class SK_AM_CREATECREATURE & operator=(const class SK_AM_CREATECREATURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_CULTIVATION {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_CULTIVATION::Init()
  public int SK_AM_CULTIVATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_CULTIVATION::GetSPCost(short)
  public void SK_AM_CULTIVATION(const class SK_AM_CULTIVATION &)
  public void SK_AM_CULTIVATION::SK_AM_CULTIVATION()
  public void ~SK_AM_CULTIVATION()
  public class SK_AM_CULTIVATION & operator=(const class SK_AM_CULTIVATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_DEMONSTRATION {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_DEMONSTRATION::Init()
  public int SK_AM_DEMONSTRATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_DEMONSTRATION::GetSPCost(short)
  public short SK_AM_DEMONSTRATION::GetPreDelayTime(short)
  public void SK_AM_DEMONSTRATION(const class SK_AM_DEMONSTRATION &)
  public void SK_AM_DEMONSTRATION::SK_AM_DEMONSTRATION()
  public void ~SK_AM_DEMONSTRATION()
  public class SK_AM_DEMONSTRATION & operator=(const class SK_AM_DEMONSTRATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_DRILLMASTER {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_DRILLMASTER::Init()
  public int SK_AM_DRILLMASTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_DRILLMASTER::GetMaxLevel()
  public void SK_AM_DRILLMASTER(const class SK_AM_DRILLMASTER &)
  public void SK_AM_DRILLMASTER::SK_AM_DRILLMASTER()
  public void ~SK_AM_DRILLMASTER()
  public class SK_AM_DRILLMASTER & operator=(const class SK_AM_DRILLMASTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_FLAMECONTROL {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_FLAMECONTROL::Init()
  public int SK_AM_FLAMECONTROL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AM_FLAMECONTROL(const class SK_AM_FLAMECONTROL &)
  public void SK_AM_FLAMECONTROL::SK_AM_FLAMECONTROL()
  public void ~SK_AM_FLAMECONTROL()
  public class SK_AM_FLAMECONTROL & operator=(const class SK_AM_FLAMECONTROL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_HEALHOMUN {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_HEALHOMUN::Init()
  public int SK_AM_HEALHOMUN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_HEALHOMUN::GetMaxLevel()
  public short SK_AM_HEALHOMUN::GetPreDelayTime(short)
  public short SK_AM_HEALHOMUN::GetSPCost(short)
  public void SK_AM_HEALHOMUN(const class SK_AM_HEALHOMUN &)
  public void SK_AM_HEALHOMUN::SK_AM_HEALHOMUN()
  public void ~SK_AM_HEALHOMUN()
  public class SK_AM_HEALHOMUN & operator=(const class SK_AM_HEALHOMUN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_LEARNINGPOTION {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_LEARNINGPOTION::Init()
  public int SK_AM_LEARNINGPOTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_LEARNINGPOTION::GetMaxLevel()
  public void SK_AM_LEARNINGPOTION(const class SK_AM_LEARNINGPOTION &)
  public void SK_AM_LEARNINGPOTION::SK_AM_LEARNINGPOTION()
  public void ~SK_AM_LEARNINGPOTION()
  public class SK_AM_LEARNINGPOTION & operator=(const class SK_AM_LEARNINGPOTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_PHARMACY {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_PHARMACY::Init()
  public int SK_AM_PHARMACY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_PHARMACY::GetMaxLevel()
  public short SK_AM_PHARMACY::GetSPCost(short)
  public void SK_AM_PHARMACY(const class SK_AM_PHARMACY &)
  public void SK_AM_PHARMACY::SK_AM_PHARMACY()
  public void ~SK_AM_PHARMACY()
  public class SK_AM_PHARMACY & operator=(const class SK_AM_PHARMACY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_POTIONPITCHER {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_POTIONPITCHER::Init()
  public int SK_AM_POTIONPITCHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_POTIONPITCHER::GetSPCost(short)
  public void SK_AM_POTIONPITCHER(const class SK_AM_POTIONPITCHER &)
  public void SK_AM_POTIONPITCHER::SK_AM_POTIONPITCHER()
  public void ~SK_AM_POTIONPITCHER()
  public class SK_AM_POTIONPITCHER & operator=(const class SK_AM_POTIONPITCHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_REST {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_REST::Init()
  public int SK_AM_REST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_REST::GetMaxLevel()
  public short SK_AM_REST::GetSPCost(short)
  public void SK_AM_REST(const class SK_AM_REST &)
  public void SK_AM_REST::SK_AM_REST()
  public void ~SK_AM_REST()
  public class SK_AM_REST & operator=(const class SK_AM_REST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_RESURRECTHOMUN {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_RESURRECTHOMUN::Init()
  public int SK_AM_RESURRECTHOMUN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_RESURRECTHOMUN::GetPreDelayTime(short)
  public short SK_AM_RESURRECTHOMUN::GetSPCost(short)
  public int SK_AM_RESURRECTHOMUN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_AM_RESURRECTHOMUN(const class SK_AM_RESURRECTHOMUN &)
  public void SK_AM_RESURRECTHOMUN::SK_AM_RESURRECTHOMUN()
  public void ~SK_AM_RESURRECTHOMUN()
  public class SK_AM_RESURRECTHOMUN & operator=(const class SK_AM_RESURRECTHOMUN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_SPHEREMINE {
  SK_ALCHEMIST, offset = 0x0

  public void SK_AM_SPHEREMINE::Init()
  public int SK_AM_SPHEREMINE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_SPHEREMINE::GetSPCost(short)
  public short SK_AM_SPHEREMINE::GetPreDelayTime(short)
  public void SK_AM_SPHEREMINE(const class SK_AM_SPHEREMINE &)
  public void SK_AM_SPHEREMINE::SK_AM_SPHEREMINE()
  public void ~SK_AM_SPHEREMINE()
  public class SK_AM_SPHEREMINE & operator=(const class SK_AM_SPHEREMINE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_TWILIGHT1 {
  SK_LINKER, offset = 0x0

  public void SK_AM_TWILIGHT1::Init()
  public int SK_AM_TWILIGHT1::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_TWILIGHT1::GetMaxLevel()
  public short SK_AM_TWILIGHT1::GetSPCost(short)
  public short SK_AM_TWILIGHT1::GetPreDelayTime(short)
  public void SK_AM_TWILIGHT1(const class SK_AM_TWILIGHT1 &)
  public void SK_AM_TWILIGHT1::SK_AM_TWILIGHT1()
  public void ~SK_AM_TWILIGHT1()
  public class SK_AM_TWILIGHT1 & operator=(const class SK_AM_TWILIGHT1 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_TWILIGHT2 {
  SK_LINKER, offset = 0x0

  public void SK_AM_TWILIGHT2::Init()
  public int SK_AM_TWILIGHT2::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_TWILIGHT2::GetMaxLevel()
  public short SK_AM_TWILIGHT2::GetSPCost(short)
  public short SK_AM_TWILIGHT2::GetPreDelayTime(short)
  public void SK_AM_TWILIGHT2(const class SK_AM_TWILIGHT2 &)
  public void SK_AM_TWILIGHT2::SK_AM_TWILIGHT2()
  public void ~SK_AM_TWILIGHT2()
  public class SK_AM_TWILIGHT2 & operator=(const class SK_AM_TWILIGHT2 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_TWILIGHT3 {
  SK_LINKER, offset = 0x0

  public void SK_AM_TWILIGHT3::Init()
  public int SK_AM_TWILIGHT3::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_TWILIGHT3::GetMaxLevel()
  public short SK_AM_TWILIGHT3::GetSPCost(short)
  public short SK_AM_TWILIGHT3::GetPreDelayTime(short)
  public void SK_AM_TWILIGHT3(const class SK_AM_TWILIGHT3 &)
  public void SK_AM_TWILIGHT3::SK_AM_TWILIGHT3()
  public void ~SK_AM_TWILIGHT3()
  public class SK_AM_TWILIGHT3 & operator=(const class SK_AM_TWILIGHT3 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AM_TWILIGHT4 {
  SK_LINKER, offset = 0x0

  public void SK_AM_TWILIGHT4::Init()
  public int SK_AM_TWILIGHT4::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AM_TWILIGHT4::GetMaxLevel()
  public short SK_AM_TWILIGHT4::GetSPCost(short)
  public short SK_AM_TWILIGHT4::GetPreDelayTime(short)
  public void SK_AM_TWILIGHT4(const class SK_AM_TWILIGHT4 &)
  public void SK_AM_TWILIGHT4::SK_AM_TWILIGHT4()
  public void ~SK_AM_TWILIGHT4()
  public class SK_AM_TWILIGHT4 & operator=(const class SK_AM_TWILIGHT4 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ARCHER {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_ARCHER::GetMaxLevel()
  public int SK_ARCHER::IsAvailableJob(short)
  public short SK_ARCHER::GetSPCost(short)
  public short SK_ARCHER::GetPreDelayTime(short)
  public void SK_ARCHER(const class SK_ARCHER &)
  public void SK_ARCHER::SK_ARCHER()
  public void SK_ARCHER::~SK_ARCHER()
  public class SK_ARCHER & operator=(const class SK_ARCHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ASC_BREAKER {
  SK_ASSASSINCROSS, offset = 0x0

  public void SK_ASC_BREAKER::Init()
  public int SK_ASC_BREAKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ASC_BREAKER::GetMaxLevel()
  public short SK_ASC_BREAKER::GetSPCost(short)
  public short SK_ASC_BREAKER::GetPreDelayTime(short)
  public void SK_ASC_BREAKER(const class SK_ASC_BREAKER &)
  public void SK_ASC_BREAKER::SK_ASC_BREAKER()
  public void ~SK_ASC_BREAKER()
  public class SK_ASC_BREAKER & operator=(const class SK_ASC_BREAKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ASC_CDP {
  SK_ASSASSINCROSS, offset = 0x0

  public void SK_ASC_CDP::Init()
  public int SK_ASC_CDP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ASC_CDP::GetMaxLevel()
  public short SK_ASC_CDP::GetSPCost(short)
  public void SK_ASC_CDP(const class SK_ASC_CDP &)
  public void SK_ASC_CDP::SK_ASC_CDP()
  public void ~SK_ASC_CDP()
  public class SK_ASC_CDP & operator=(const class SK_ASC_CDP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ASC_EDP {
  SK_ASSASSINCROSS, offset = 0x0

  public void SK_ASC_EDP::Init()
  public int SK_ASC_EDP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ASC_EDP::GetSPCost(short)
  public void SK_ASC_EDP(const class SK_ASC_EDP &)
  public void SK_ASC_EDP::SK_ASC_EDP()
  public void ~SK_ASC_EDP()
  public class SK_ASC_EDP & operator=(const class SK_ASC_EDP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ASC_KATAR {
  SK_ASSASSINCROSS, offset = 0x0

  public void SK_ASC_KATAR::Init()
  public int SK_ASC_KATAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_ASC_KATAR(const class SK_ASC_KATAR &)
  public void SK_ASC_KATAR::SK_ASC_KATAR()
  public void ~SK_ASC_KATAR()
  public class SK_ASC_KATAR & operator=(const class SK_ASC_KATAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ASC_METEORASSAULT {
  SK_ASSASSINCROSS, offset = 0x0

  public void SK_ASC_METEORASSAULT::Init()
  public int SK_ASC_METEORASSAULT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ASC_METEORASSAULT::GetMaxLevel()
  public short SK_ASC_METEORASSAULT::GetPreDelayTime(short)
  public short SK_ASC_METEORASSAULT::GetSPCost(short)
  public void SK_ASC_METEORASSAULT(const class SK_ASC_METEORASSAULT &)
  public void SK_ASC_METEORASSAULT::SK_ASC_METEORASSAULT()
  public void ~SK_ASC_METEORASSAULT()
  public class SK_ASC_METEORASSAULT & operator=(const class SK_ASC_METEORASSAULT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ASSASSIN {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_ASSASSIN::GetMaxLevel()
  public int SK_ASSASSIN::IsAvailableJob(short)
  public short SK_ASSASSIN::GetSPCost(short)
  public short SK_ASSASSIN::GetPreDelayTime(short)
  public void SK_ASSASSIN(const class SK_ASSASSIN &)
  public void SK_ASSASSIN::SK_ASSASSIN()
  public void SK_ASSASSIN::~SK_ASSASSIN()
  public class SK_ASSASSIN & operator=(const class SK_ASSASSIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ASSASSINCROSS {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_ASSASSINCROSS::GetMaxLevel()
  public int SK_ASSASSINCROSS::IsAvailableJob(short)
  public short SK_ASSASSINCROSS::GetSPCost(short)
  public short SK_ASSASSINCROSS::GetPreDelayTime(short)
  public void SK_ASSASSINCROSS(const class SK_ASSASSINCROSS &)
  public void SK_ASSASSINCROSS()
  public void SK_ASSASSINCROSS::~SK_ASSASSINCROSS()
  public class SK_ASSASSINCROSS & operator=(const class SK_ASSASSINCROSS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_CLOAKING {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_CLOAKING::Init()
  public int SK_AS_CLOAKING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_CLOAKING::GetSPCost(short)
  public void SK_AS_CLOAKING(const class SK_AS_CLOAKING &)
  public void SK_AS_CLOAKING()
  public void ~SK_AS_CLOAKING()
  public class SK_AS_CLOAKING & operator=(const class SK_AS_CLOAKING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_ENCHANTPOISON {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_ENCHANTPOISON::Init()
  public int SK_AS_ENCHANTPOISON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_ENCHANTPOISON::GetSPCost(short)
  public void SK_AS_ENCHANTPOISON(const class SK_AS_ENCHANTPOISON &)
  public void SK_AS_ENCHANTPOISON()
  public void ~SK_AS_ENCHANTPOISON()
  public class SK_AS_ENCHANTPOISON & operator=(const class SK_AS_ENCHANTPOISON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_GRIMTOOTH {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_GRIMTOOTH::Init()
  public int SK_AS_GRIMTOOTH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_GRIMTOOTH::GetMaxLevel()
  public short SK_AS_GRIMTOOTH::GetSPCost(short)
  public short SK_AS_GRIMTOOTH::GetAttackRange(int)
  public void SK_AS_GRIMTOOTH(const class SK_AS_GRIMTOOTH &)
  public void SK_AS_GRIMTOOTH()
  public void ~SK_AS_GRIMTOOTH()
  public class SK_AS_GRIMTOOTH & operator=(const class SK_AS_GRIMTOOTH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_KATAR {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_KATAR::Init()
  public int SK_AS_KATAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_AS_KATAR(const class SK_AS_KATAR &)
  public void SK_AS_KATAR()
  public void ~SK_AS_KATAR()
  public class SK_AS_KATAR & operator=(const class SK_AS_KATAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_LEFT {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_LEFT::Init()
  public int SK_AS_LEFT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_LEFT::GetMaxLevel()
  public void SK_AS_LEFT(const class SK_AS_LEFT &)
  public void SK_AS_LEFT()
  public void ~SK_AS_LEFT()
  public class SK_AS_LEFT & operator=(const class SK_AS_LEFT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_POISONREACT {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_POISONREACT::Init()
  public int SK_AS_POISONREACT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_POISONREACT::GetSPCost(short)
  public void SK_AS_POISONREACT(const class SK_AS_POISONREACT &)
  public void SK_AS_POISONREACT()
  public void ~SK_AS_POISONREACT()
  public class SK_AS_POISONREACT & operator=(const class SK_AS_POISONREACT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_RIGHT {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_RIGHT::Init()
  public int SK_AS_RIGHT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_RIGHT::GetMaxLevel()
  public void SK_AS_RIGHT(const class SK_AS_RIGHT &)
  public void SK_AS_RIGHT()
  public void ~SK_AS_RIGHT()
  public class SK_AS_RIGHT & operator=(const class SK_AS_RIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_SONICACCEL {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_SONICACCEL::Init()
  public int SK_AS_SONICACCEL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_SONICACCEL::GetMaxLevel()
  public void SK_AS_SONICACCEL(const class SK_AS_SONICACCEL &)
  public void SK_AS_SONICACCEL()
  public void ~SK_AS_SONICACCEL()
  public class SK_AS_SONICACCEL & operator=(const class SK_AS_SONICACCEL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_SONICBLOW {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_SONICBLOW::Init()
  public int SK_AS_SONICBLOW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_SONICBLOW::GetSPCost(short)
  public void SK_AS_SONICBLOW(const class SK_AS_SONICBLOW &)
  public void SK_AS_SONICBLOW()
  public void ~SK_AS_SONICBLOW()
  public class SK_AS_SONICBLOW & operator=(const class SK_AS_SONICBLOW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_SPLASHER {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_SPLASHER::Init()
  public int SK_AS_SPLASHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_SPLASHER::GetSPCost(short)
  public short SK_AS_SPLASHER::GetPreDelayTime(short)
  public void SK_AS_SPLASHER(const class SK_AS_SPLASHER &)
  public void SK_AS_SPLASHER()
  public void ~SK_AS_SPLASHER()
  public class SK_AS_SPLASHER & operator=(const class SK_AS_SPLASHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_VENOMDUST {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_VENOMDUST::Init()
  public int SK_AS_VENOMDUST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_VENOMDUST::GetSPCost(short)
  public void SK_AS_VENOMDUST(const class SK_AS_VENOMDUST &)
  public void SK_AS_VENOMDUST()
  public void ~SK_AS_VENOMDUST()
  public class SK_AS_VENOMDUST & operator=(const class SK_AS_VENOMDUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_AS_VENOMKNIFE {
  SK_ASSASSIN, offset = 0x0

  public void SK_AS_VENOMKNIFE::Init()
  public int SK_AS_VENOMKNIFE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_AS_VENOMKNIFE::GetMaxLevel()
  public short SK_AS_VENOMKNIFE::GetSPCost(short)
  public void SK_AS_VENOMKNIFE(const class SK_AS_VENOMKNIFE &)
  public void SK_AS_VENOMKNIFE()
  public void ~SK_AS_VENOMKNIFE()
  public class SK_AS_VENOMKNIFE & operator=(const class SK_AS_VENOMKNIFE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BARD {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_BARD::GetMaxLevel()
  public int SK_BARD::IsAvailableJob(short)
  public short SK_BARD::GetSPCost(short)
  public short SK_BARD::GetPreDelayTime(short)
  public void SK_BARD(const class SK_BARD &)
  public void SK_BARD::SK_BARD()
  public void SK_BARD::~SK_BARD()
  public class SK_BARD & operator=(const class SK_BARD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BA_APPLEIDUN {
  SK_BARD, offset = 0x0

  public void SK_BA_APPLEIDUN::Init()
  public int SK_BA_APPLEIDUN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BA_APPLEIDUN::GetSPCost(short)
  public void SK_BA_APPLEIDUN(const class SK_BA_APPLEIDUN &)
  public void SK_BA_APPLEIDUN::SK_BA_APPLEIDUN()
  public void ~SK_BA_APPLEIDUN()
  public class SK_BA_APPLEIDUN & operator=(const class SK_BA_APPLEIDUN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BA_ASSASSINCROSS {
  SK_BARD, offset = 0x0

  public void SK_BA_ASSASSINCROSS::Init()
  public int SK_BA_ASSASSINCROSS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BA_ASSASSINCROSS::GetSPCost(short)
  public void SK_BA_ASSASSINCROSS(const class SK_BA_ASSASSINCROSS &)
  public void SK_BA_ASSASSINCROSS::SK_BA_ASSASSINCROSS()
  public void ~SK_BA_ASSASSINCROSS()
  public class SK_BA_ASSASSINCROSS & operator=(const class SK_BA_ASSASSINCROSS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BA_DISSONANCE {
  SK_BARD, offset = 0x0

  public void SK_BA_DISSONANCE::Init()
  public int SK_BA_DISSONANCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BA_DISSONANCE::GetMaxLevel()
  public short SK_BA_DISSONANCE::GetSPCost(short)
  public static int SK_BA_DISSONANCE::IsSpellConditionGratify(class CPC *)
  public void SK_BA_DISSONANCE(const class SK_BA_DISSONANCE &)
  public void SK_BA_DISSONANCE::SK_BA_DISSONANCE()
  public void ~SK_BA_DISSONANCE()
  public class SK_BA_DISSONANCE & operator=(const class SK_BA_DISSONANCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BA_FROSTJOKER {
  SK_BARD, offset = 0x0

  public void SK_BA_FROSTJOKER::Init()
  public int SK_BA_FROSTJOKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BA_FROSTJOKER::GetMaxLevel()
  public short SK_BA_FROSTJOKER::GetSPCost(short)
  public void SK_BA_FROSTJOKER(const class SK_BA_FROSTJOKER &)
  public void SK_BA_FROSTJOKER::SK_BA_FROSTJOKER()
  public void ~SK_BA_FROSTJOKER()
  public class SK_BA_FROSTJOKER & operator=(const class SK_BA_FROSTJOKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BA_MUSICALLESSON {
  SK_BARD, offset = 0x0

  public void SK_BA_MUSICALLESSON::Init()
  public int SK_BA_MUSICALLESSON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_BA_MUSICALLESSON(const class SK_BA_MUSICALLESSON &)
  public void SK_BA_MUSICALLESSON::SK_BA_MUSICALLESSON()
  public void ~SK_BA_MUSICALLESSON()
  public class SK_BA_MUSICALLESSON & operator=(const class SK_BA_MUSICALLESSON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BA_MUSICALSTRIKE {
  SK_BARD, offset = 0x0

  public void SK_BA_MUSICALSTRIKE::Init()
  public int SK_BA_MUSICALSTRIKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BA_MUSICALSTRIKE::GetMaxLevel()
  public short SK_BA_MUSICALSTRIKE::GetSPCost(short)
  public short SK_BA_MUSICALSTRIKE::GetPreDelayTime(short)
  public void SK_BA_MUSICALSTRIKE(const class SK_BA_MUSICALSTRIKE &)
  public void SK_BA_MUSICALSTRIKE::SK_BA_MUSICALSTRIKE()
  public void ~SK_BA_MUSICALSTRIKE()
  public class SK_BA_MUSICALSTRIKE & operator=(const class SK_BA_MUSICALSTRIKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BA_PANGVOICE {
  SK_BARD, offset = 0x0

  public void SK_BA_PANGVOICE::Init()
  public int SK_BA_PANGVOICE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BA_PANGVOICE::GetMaxLevel()
  public short SK_BA_PANGVOICE::GetSPCost(short)
  public short SK_BA_PANGVOICE::GetPreDelayTime(short)
  public short SK_BA_PANGVOICE::GetPostDelayTM(short)
  public void SK_BA_PANGVOICE(const class SK_BA_PANGVOICE &)
  public void SK_BA_PANGVOICE::SK_BA_PANGVOICE()
  public void ~SK_BA_PANGVOICE()
  public class SK_BA_PANGVOICE & operator=(const class SK_BA_PANGVOICE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BA_POEMBRAGI {
  SK_BARD, offset = 0x0

  public void SK_BA_POEMBRAGI::Init()
  public int SK_BA_POEMBRAGI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BA_POEMBRAGI::GetSPCost(short)
  public void SK_BA_POEMBRAGI(const class SK_BA_POEMBRAGI &)
  public void SK_BA_POEMBRAGI::SK_BA_POEMBRAGI()
  public void ~SK_BA_POEMBRAGI()
  public class SK_BA_POEMBRAGI & operator=(const class SK_BA_POEMBRAGI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BA_WHISTLE {
  SK_BARD, offset = 0x0

  public void SK_BA_WHISTLE::Init()
  public int SK_BA_WHISTLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BA_WHISTLE::GetSPCost(short)
  public void SK_BA_WHISTLE(const class SK_BA_WHISTLE &)
  public void SK_BA_WHISTLE::SK_BA_WHISTLE()
  public void ~SK_BA_WHISTLE()
  public class SK_BA_WHISTLE & operator=(const class SK_BA_WHISTLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_ADAPTATION {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_ADAPTATION::Init()
  public int SK_BD_ADAPTATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_ADAPTATION::GetSPCost(short)
  public void SK_BD_ADAPTATION(const class SK_BD_ADAPTATION &)
  public void SK_BD_ADAPTATION::SK_BD_ADAPTATION()
  public void ~SK_BD_ADAPTATION()
  public class SK_BD_ADAPTATION & operator=(const class SK_BD_ADAPTATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_COMMON {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_BD_COMMON::GetMaxLevel()
  public int SK_BD_COMMON::IsAvailableJob(short)
  public short SK_BD_COMMON::GetSPCost(short)
  public short SK_BD_COMMON::GetPreDelayTime(short)
  public void SK_BD_COMMON(const class SK_BD_COMMON &)
  public void SK_BD_COMMON::SK_BD_COMMON()
  public void SK_BD_COMMON::~SK_BD_COMMON()
  public class SK_BD_COMMON & operator=(const class SK_BD_COMMON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_DRUMBATTLEFIELD {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_DRUMBATTLEFIELD::Init()
  public int SK_BD_DRUMBATTLEFIELD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_DRUMBATTLEFIELD::GetMaxLevel()
  public short SK_BD_DRUMBATTLEFIELD::GetSPCost(short)
  public void SK_BD_DRUMBATTLEFIELD(const class SK_BD_DRUMBATTLEFIELD &)
  public void SK_BD_DRUMBATTLEFIELD::SK_BD_DRUMBATTLEFIELD()
  public void ~SK_BD_DRUMBATTLEFIELD()
  public class SK_BD_DRUMBATTLEFIELD & operator=(const class SK_BD_DRUMBATTLEFIELD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_ENCORE {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_ENCORE::Init()
  public int SK_BD_ENCORE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_ENCORE::GetSPCost(short)
  public void SK_BD_ENCORE(const class SK_BD_ENCORE &)
  public void SK_BD_ENCORE::SK_BD_ENCORE()
  public void ~SK_BD_ENCORE()
  public class SK_BD_ENCORE & operator=(const class SK_BD_ENCORE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_ETERNALCHAOS {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_ETERNALCHAOS::Init()
  public int SK_BD_ETERNALCHAOS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_ETERNALCHAOS::GetSPCost(short)
  public void SK_BD_ETERNALCHAOS(const class SK_BD_ETERNALCHAOS &)
  public void SK_BD_ETERNALCHAOS::SK_BD_ETERNALCHAOS()
  public void ~SK_BD_ETERNALCHAOS()
  public class SK_BD_ETERNALCHAOS & operator=(const class SK_BD_ETERNALCHAOS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_INTOABYSS {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_INTOABYSS::Init()
  public int SK_BD_INTOABYSS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_INTOABYSS::GetSPCost(short)
  public void SK_BD_INTOABYSS(const class SK_BD_INTOABYSS &)
  public void SK_BD_INTOABYSS::SK_BD_INTOABYSS()
  public void ~SK_BD_INTOABYSS()
  public class SK_BD_INTOABYSS & operator=(const class SK_BD_INTOABYSS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_LULLABY {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_LULLABY::Init()
  public int SK_BD_LULLABY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_LULLABY::GetSPCost(short)
  public void SK_BD_LULLABY(const class SK_BD_LULLABY &)
  public void SK_BD_LULLABY::SK_BD_LULLABY()
  public void ~SK_BD_LULLABY()
  public class SK_BD_LULLABY & operator=(const class SK_BD_LULLABY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_RAGNAROK {
  SK_BD_COMMON, offset = 0x0

  public void Init()
  public int OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int IsAvailableJob(short)
  public short GetSPCost(short)
  public void SK_BD_RAGNAROK(const class SK_BD_RAGNAROK &)
  public void SK_BD_RAGNAROK()
  public void ~SK_BD_RAGNAROK()
  public class SK_BD_RAGNAROK & operator=(const class SK_BD_RAGNAROK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_RICHMANKIM {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_RICHMANKIM::Init()
  public int SK_BD_RICHMANKIM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_RICHMANKIM::GetMaxLevel()
  public short SK_BD_RICHMANKIM::GetSPCost(short)
  public void SK_BD_RICHMANKIM(const class SK_BD_RICHMANKIM &)
  public void SK_BD_RICHMANKIM::SK_BD_RICHMANKIM()
  public void ~SK_BD_RICHMANKIM()
  public class SK_BD_RICHMANKIM & operator=(const class SK_BD_RICHMANKIM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_RINGNIBELUNGEN {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_RINGNIBELUNGEN::Init()
  public int SK_BD_RINGNIBELUNGEN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_RINGNIBELUNGEN::GetMaxLevel()
  public short SK_BD_RINGNIBELUNGEN::GetSPCost(short)
  public void SK_BD_RINGNIBELUNGEN(const class SK_BD_RINGNIBELUNGEN &)
  public void SK_BD_RINGNIBELUNGEN::SK_BD_RINGNIBELUNGEN()
  public void ~SK_BD_RINGNIBELUNGEN()
  public class SK_BD_RINGNIBELUNGEN & operator=(const class SK_BD_RINGNIBELUNGEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_ROKISWEIL {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_ROKISWEIL::Init()
  public int SK_BD_ROKISWEIL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_ROKISWEIL::GetSPCost(short)
  public void SK_BD_ROKISWEIL(const class SK_BD_ROKISWEIL &)
  public void SK_BD_ROKISWEIL::SK_BD_ROKISWEIL()
  public void ~SK_BD_ROKISWEIL()
  public class SK_BD_ROKISWEIL & operator=(const class SK_BD_ROKISWEIL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BD_SIEGFRIED {
  SK_BD_COMMON, offset = 0x0

  public void SK_BD_SIEGFRIED::Init()
  public int SK_BD_SIEGFRIED::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BD_SIEGFRIED::GetMaxLevel()
  public short SK_BD_SIEGFRIED::GetSPCost(short)
  public void SK_BD_SIEGFRIED(const class SK_BD_SIEGFRIED &)
  public void SK_BD_SIEGFRIED::SK_BD_SIEGFRIED()
  public void ~SK_BD_SIEGFRIED()
  public class SK_BD_SIEGFRIED & operator=(const class SK_BD_SIEGFRIED &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BLACKSMITH {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_BLACKSMITH::GetMaxLevel()
  public int SK_BLACKSMITH::IsAvailableJob(short)
  public short SK_BLACKSMITH::GetSPCost(short)
  public short SK_BLACKSMITH::GetPreDelayTime(short)
  public void SK_BLACKSMITH(const class SK_BLACKSMITH &)
  public void SK_BLACKSMITH::SK_BLACKSMITH()
  public void SK_BLACKSMITH::~SK_BLACKSMITH()
  public class SK_BLACKSMITH & operator=(const class SK_BLACKSMITH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_ADRENALINE {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_ADRENALINE::Init()
  public int SK_BS_ADRENALINE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_ADRENALINE::GetSPCost(short)
  public void SK_BS_ADRENALINE(const class SK_BS_ADRENALINE &)
  public void SK_BS_ADRENALINE()
  public void ~SK_BS_ADRENALINE()
  public class SK_BS_ADRENALINE & operator=(const class SK_BS_ADRENALINE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_ADRENALINE2 {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_ADRENALINE2::Init()
  public int SK_BS_ADRENALINE2::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_ADRENALINE2::GetMaxLevel()
  public short SK_BS_ADRENALINE2::GetSPCost(short)
  public void SK_BS_ADRENALINE2(const class SK_BS_ADRENALINE2 &)
  public void SK_BS_ADRENALINE2::SK_BS_ADRENALINE2()
  public void ~SK_BS_ADRENALINE2()
  public class SK_BS_ADRENALINE2 & operator=(const class SK_BS_ADRENALINE2 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_AXE {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_AXE::Init()
  public int SK_BS_AXE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_AXE::GetMaxLevel()
  public void SK_BS_AXE(const class SK_BS_AXE &)
  public void SK_BS_AXE()
  public void ~SK_BS_AXE()
  public class SK_BS_AXE & operator=(const class SK_BS_AXE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_DAGGER {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_DAGGER::Init()
  public int SK_BS_DAGGER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_DAGGER::GetMaxLevel()
  public void SK_BS_DAGGER(const class SK_BS_DAGGER &)
  public void SK_BS_DAGGER()
  public void ~SK_BS_DAGGER()
  public class SK_BS_DAGGER & operator=(const class SK_BS_DAGGER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_ENCHANTEDSTONE {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_ENCHANTEDSTONE::Init()
  public int SK_BS_ENCHANTEDSTONE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_BS_ENCHANTEDSTONE(const class SK_BS_ENCHANTEDSTONE &)
  public void SK_BS_ENCHANTEDSTONE()
  public void ~SK_BS_ENCHANTEDSTONE()
  public class SK_BS_ENCHANTEDSTONE & operator=(const class SK_BS_ENCHANTEDSTONE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_FINDINGORE {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_FINDINGORE::Init()
  public int SK_BS_FINDINGORE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_FINDINGORE::GetMaxLevel()
  public void SK_BS_FINDINGORE(const class SK_BS_FINDINGORE &)
  public void SK_BS_FINDINGORE()
  public void ~SK_BS_FINDINGORE()
  public class SK_BS_FINDINGORE & operator=(const class SK_BS_FINDINGORE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_GREED {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_GREED::Init()
  public int SK_BS_GREED::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_GREED::GetMaxLevel()
  public short SK_BS_GREED::GetSPCost(short)
  public void SK_BS_GREED(const class SK_BS_GREED &)
  public void SK_BS_GREED()
  public void ~SK_BS_GREED()
  public class SK_BS_GREED & operator=(const class SK_BS_GREED &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_HAMMERFALL {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_HAMMERFALL::Init()
  public int SK_BS_HAMMERFALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_HAMMERFALL::GetSPCost(short)
  public void SK_BS_HAMMERFALL(const class SK_BS_HAMMERFALL &)
  public void SK_BS_HAMMERFALL()
  public void ~SK_BS_HAMMERFALL()
  public class SK_BS_HAMMERFALL & operator=(const class SK_BS_HAMMERFALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_HILTBINDING {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_HILTBINDING::Init()
  public int SK_BS_HILTBINDING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_HILTBINDING::GetMaxLevel()
  public void SK_BS_HILTBINDING(const class SK_BS_HILTBINDING &)
  public void SK_BS_HILTBINDING()
  public void ~SK_BS_HILTBINDING()
  public class SK_BS_HILTBINDING & operator=(const class SK_BS_HILTBINDING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_IRON {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_IRON::Init()
  public int SK_BS_IRON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_BS_IRON(const class SK_BS_IRON &)
  public void SK_BS_IRON()
  public void ~SK_BS_IRON()
  public class SK_BS_IRON & operator=(const class SK_BS_IRON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_KNUCKLE {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_KNUCKLE::Init()
  public int SK_BS_KNUCKLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_KNUCKLE::GetMaxLevel()
  public void SK_BS_KNUCKLE(const class SK_BS_KNUCKLE &)
  public void SK_BS_KNUCKLE()
  public void ~SK_BS_KNUCKLE()
  public class SK_BS_KNUCKLE & operator=(const class SK_BS_KNUCKLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_MACE {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_MACE::Init()
  public int SK_BS_MACE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_MACE::GetMaxLevel()
  public void SK_BS_MACE(const class SK_BS_MACE &)
  public void SK_BS_MACE()
  public void ~SK_BS_MACE()
  public class SK_BS_MACE & operator=(const class SK_BS_MACE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_MAXIMIZE {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_MAXIMIZE::Init()
  public int SK_BS_MAXIMIZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_MAXIMIZE::GetSPCost(short)
  public void SK_BS_MAXIMIZE(const class SK_BS_MAXIMIZE &)
  public void SK_BS_MAXIMIZE()
  public void ~SK_BS_MAXIMIZE()
  public class SK_BS_MAXIMIZE & operator=(const class SK_BS_MAXIMIZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_ORIDEOCON {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_ORIDEOCON::Init()
  public int SK_BS_ORIDEOCON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_BS_ORIDEOCON(const class SK_BS_ORIDEOCON &)
  public void SK_BS_ORIDEOCON()
  public void ~SK_BS_ORIDEOCON()
  public class SK_BS_ORIDEOCON & operator=(const class SK_BS_ORIDEOCON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_OVERTHRUST {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_OVERTHRUST::Init()
  public int SK_BS_OVERTHRUST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_OVERTHRUST::GetSPCost(short)
  public void SK_BS_OVERTHRUST(const class SK_BS_OVERTHRUST &)
  public void SK_BS_OVERTHRUST()
  public void ~SK_BS_OVERTHRUST()
  public class SK_BS_OVERTHRUST & operator=(const class SK_BS_OVERTHRUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_REPAIRWEAPON {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_REPAIRWEAPON::Init()
  public int SK_BS_REPAIRWEAPON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_REPAIRWEAPON::GetMaxLevel()
  public short SK_BS_REPAIRWEAPON::GetSPCost(short)
  public short SK_BS_REPAIRWEAPON::GetPreDelayTime(short)
  public void SK_BS_REPAIRWEAPON(const class SK_BS_REPAIRWEAPON &)
  public void SK_BS_REPAIRWEAPON()
  public void ~SK_BS_REPAIRWEAPON()
  public class SK_BS_REPAIRWEAPON & operator=(const class SK_BS_REPAIRWEAPON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_SKINTEMPER {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_SKINTEMPER::Init()
  public int SK_BS_SKINTEMPER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_BS_SKINTEMPER(const class SK_BS_SKINTEMPER &)
  public void SK_BS_SKINTEMPER()
  public void ~SK_BS_SKINTEMPER()
  public class SK_BS_SKINTEMPER & operator=(const class SK_BS_SKINTEMPER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_SPEAR {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_SPEAR::Init()
  public int SK_BS_SPEAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_SPEAR::GetMaxLevel()
  public void SK_BS_SPEAR(const class SK_BS_SPEAR &)
  public void SK_BS_SPEAR()
  public void ~SK_BS_SPEAR()
  public class SK_BS_SPEAR & operator=(const class SK_BS_SPEAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_STEEL {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_STEEL::Init()
  public int SK_BS_STEEL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_BS_STEEL(const class SK_BS_STEEL &)
  public void SK_BS_STEEL()
  public void ~SK_BS_STEEL()
  public class SK_BS_STEEL & operator=(const class SK_BS_STEEL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_SWORD {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_SWORD::Init()
  public int SK_BS_SWORD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_SWORD::GetMaxLevel()
  public void SK_BS_SWORD(const class SK_BS_SWORD &)
  public void SK_BS_SWORD()
  public void ~SK_BS_SWORD()
  public class SK_BS_SWORD & operator=(const class SK_BS_SWORD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_TWOHANDSWORD {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_TWOHANDSWORD::Init()
  public int SK_BS_TWOHANDSWORD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_TWOHANDSWORD::GetMaxLevel()
  public void SK_BS_TWOHANDSWORD(const class SK_BS_TWOHANDSWORD &)
  public void SK_BS_TWOHANDSWORD()
  public void ~SK_BS_TWOHANDSWORD()
  public class SK_BS_TWOHANDSWORD & operator=(const class SK_BS_TWOHANDSWORD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_UNFAIRLYTRICK {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_UNFAIRLYTRICK::Init()
  public int SK_BS_UNFAIRLYTRICK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_UNFAIRLYTRICK::GetMaxLevel()
  public void SK_BS_UNFAIRLYTRICK(const class SK_BS_UNFAIRLYTRICK &)
  public void SK_BS_UNFAIRLYTRICK()
  public void ~SK_BS_UNFAIRLYTRICK()
  public class SK_BS_UNFAIRLYTRICK & operator=(const class SK_BS_UNFAIRLYTRICK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_WEAPONPERFECT {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_WEAPONPERFECT::Init()
  public int SK_BS_WEAPONPERFECT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_WEAPONPERFECT::GetSPCost(short)
  public void SK_BS_WEAPONPERFECT(const class SK_BS_WEAPONPERFECT &)
  public void SK_BS_WEAPONPERFECT()
  public void ~SK_BS_WEAPONPERFECT()
  public class SK_BS_WEAPONPERFECT & operator=(const class SK_BS_WEAPONPERFECT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_BS_WEAPONRESEARCH {
  SK_BLACKSMITH, offset = 0x0

  public void SK_BS_WEAPONRESEARCH::Init()
  public int SK_BS_WEAPONRESEARCH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_BS_WEAPONRESEARCH::GetMaxLevel()
  public void SK_BS_WEAPONRESEARCH(const class SK_BS_WEAPONRESEARCH &)
  public void SK_BS_WEAPONRESEARCH()
  public void ~SK_BS_WEAPONRESEARCH()
  public class SK_BS_WEAPONRESEARCH & operator=(const class SK_BS_WEAPONRESEARCH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CASH_ASSUMPTIO {
  CSkillTypeInfo, offset = 0x0

  public void SK_CASH_ASSUMPTIO::Init()
  public int SK_CASH_ASSUMPTIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CASH_ASSUMPTIO::GetMaxLevel()
  public void SK_CASH_ASSUMPTIO(const class SK_CASH_ASSUMPTIO &)
  public void SK_CASH_ASSUMPTIO()
  public void ~SK_CASH_ASSUMPTIO()
  public class SK_CASH_ASSUMPTIO & operator=(const class SK_CASH_ASSUMPTIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CASH_BLESSING {
  CSkillTypeInfo, offset = 0x0

  public void SK_CASH_BLESSING::Init()
  public int SK_CASH_BLESSING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CASH_BLESSING::GetMaxLevel()
  public void SK_CASH_BLESSING(const class SK_CASH_BLESSING &)
  public void SK_CASH_BLESSING()
  public void ~SK_CASH_BLESSING()
  public class SK_CASH_BLESSING & operator=(const class SK_CASH_BLESSING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CASH_INCAGI {
  CSkillTypeInfo, offset = 0x0

  public void SK_CASH_INCAGI::Init()
  public int SK_CASH_INCAGI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CASH_INCAGI::GetMaxLevel()
  public void SK_CASH_INCAGI(const class SK_CASH_INCAGI &)
  public void SK_CASH_INCAGI()
  public void ~SK_CASH_INCAGI()
  public class SK_CASH_INCAGI & operator=(const class SK_CASH_INCAGI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CG_ARROWVULCAN {
  SK_CG_COMMON, offset = 0x0

  public void SK_CG_ARROWVULCAN::Init()
  public int SK_CG_ARROWVULCAN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CG_ARROWVULCAN::GetMaxLevel()
  public short SK_CG_ARROWVULCAN::GetSPCost(short)
  public short SK_CG_ARROWVULCAN::GetPreDelayTime(short)
  public void SK_CG_ARROWVULCAN(const class SK_CG_ARROWVULCAN &)
  public void SK_CG_ARROWVULCAN::SK_CG_ARROWVULCAN()
  public void ~SK_CG_ARROWVULCAN()
  public class SK_CG_ARROWVULCAN & operator=(const class SK_CG_ARROWVULCAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CG_COMMON {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short GetMaxLevel()
  public int SK_CG_COMMON::IsAvailableJob(short)
  public short SK_CG_COMMON::GetSPCost(short)
  public short SK_CG_COMMON::GetPreDelayTime(short)
  public void SK_CG_COMMON(const class SK_CG_COMMON &)
  public void SK_CG_COMMON::SK_CG_COMMON()
  public void SK_CG_COMMON::~SK_CG_COMMON()
  public class SK_CG_COMMON & operator=(const class SK_CG_COMMON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CG_HERMODE {
  SK_CG_COMMON, offset = 0x0

  public void SK_CG_HERMODE::Init()
  public int SK_CG_HERMODE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CG_HERMODE::GetMaxLevel()
  public short SK_CG_HERMODE::GetSPCost(short)
  public void SK_CG_HERMODE(const class SK_CG_HERMODE &)
  public void SK_CG_HERMODE::SK_CG_HERMODE()
  public void ~SK_CG_HERMODE()
  public class SK_CG_HERMODE & operator=(const class SK_CG_HERMODE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CG_LONGINGFREEDOM {
  SK_CG_COMMON, offset = 0x0

  public void SK_CG_LONGINGFREEDOM::Init()
  public int SK_CG_LONGINGFREEDOM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CG_LONGINGFREEDOM::GetMaxLevel()
  public short SK_CG_LONGINGFREEDOM::GetSPCost(short)
  public void SK_CG_LONGINGFREEDOM(const class SK_CG_LONGINGFREEDOM &)
  public void SK_CG_LONGINGFREEDOM::SK_CG_LONGINGFREEDOM()
  public void ~SK_CG_LONGINGFREEDOM()
  public class SK_CG_LONGINGFREEDOM & operator=(const class SK_CG_LONGINGFREEDOM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CG_MARIONETTE {
  SK_CG_COMMON, offset = 0x0

  public void SK_CG_MARIONETTE::Init()
  public int SK_CG_MARIONETTE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CG_MARIONETTE::GetMaxLevel()
  public short SK_CG_MARIONETTE::GetSPCost(short)
  public void SK_CG_MARIONETTE(const class SK_CG_MARIONETTE &)
  public void SK_CG_MARIONETTE::SK_CG_MARIONETTE()
  public void ~SK_CG_MARIONETTE()
  public class SK_CG_MARIONETTE & operator=(const class SK_CG_MARIONETTE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CG_MOONLIT {
  SK_CG_COMMON, offset = 0x0

  public void SK_CG_MOONLIT::Init()
  public int SK_CG_MOONLIT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CG_MOONLIT::GetMaxLevel()
  public short SK_CG_MOONLIT::GetSPCost(short)
  public void SK_CG_MOONLIT(const class SK_CG_MOONLIT &)
  public void SK_CG_MOONLIT::SK_CG_MOONLIT()
  public void ~SK_CG_MOONLIT()
  public class SK_CG_MOONLIT & operator=(const class SK_CG_MOONLIT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CG_TAROTCARD {
  SK_CG_COMMON, offset = 0x0

  public void SK_CG_TAROTCARD::Init()
  public int SK_CG_TAROTCARD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CG_TAROTCARD::GetMaxLevel()
  public short SK_CG_TAROTCARD::GetSPCost(short)
  public short SK_CG_TAROTCARD::GetPreDelayTime(short)
  public void SK_CG_TAROTCARD(const class SK_CG_TAROTCARD &)
  public void SK_CG_TAROTCARD::SK_CG_TAROTCARD()
  public void ~SK_CG_TAROTCARD()
  public class SK_CG_TAROTCARD & operator=(const class SK_CG_TAROTCARD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CHAMPION {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_CHAMPION::GetMaxLevel()
  public int SK_CHAMPION::IsAvailableJob(short)
  public short SK_CHAMPION::GetSPCost(short)
  public short SK_CHAMPION::GetPreDelayTime(short)
  public void SK_CHAMPION(const class SK_CHAMPION &)
  public void SK_CHAMPION()
  public void SK_CHAMPION::~SK_CHAMPION()
  public class SK_CHAMPION & operator=(const class SK_CHAMPION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CH_CHAINCRUSH {
  SK_CHAMPION, offset = 0x0

  public void SK_CH_CHAINCRUSH::Init()
  public int SK_CH_CHAINCRUSH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CH_CHAINCRUSH::GetSPCost(short)
  public void SK_CH_CHAINCRUSH(const class SK_CH_CHAINCRUSH &)
  public void SK_CH_CHAINCRUSH::SK_CH_CHAINCRUSH()
  public void ~SK_CH_CHAINCRUSH()
  public class SK_CH_CHAINCRUSH & operator=(const class SK_CH_CHAINCRUSH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CH_PALMSTRIKE {
  SK_CHAMPION, offset = 0x0

  public void SK_CH_PALMSTRIKE::Init()
  public int SK_CH_PALMSTRIKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CH_PALMSTRIKE::GetMaxLevel()
  public short SK_CH_PALMSTRIKE::GetSPCost(short)
  public void SK_CH_PALMSTRIKE(const class SK_CH_PALMSTRIKE &)
  public void SK_CH_PALMSTRIKE::SK_CH_PALMSTRIKE()
  public void ~SK_CH_PALMSTRIKE()
  public class SK_CH_PALMSTRIKE & operator=(const class SK_CH_PALMSTRIKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CH_SOULCOLLECT {
  SK_CHAMPION, offset = 0x0

  public void SK_CH_SOULCOLLECT::Init()
  public int SK_CH_SOULCOLLECT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CH_SOULCOLLECT::GetMaxLevel()
  public short SK_CH_SOULCOLLECT::GetSPCost(short)
  public short SK_CH_SOULCOLLECT::GetPreDelayTime(short)
  public void SK_CH_SOULCOLLECT(const class SK_CH_SOULCOLLECT &)
  public void SK_CH_SOULCOLLECT::SK_CH_SOULCOLLECT()
  public void ~SK_CH_SOULCOLLECT()
  public class SK_CH_SOULCOLLECT & operator=(const class SK_CH_SOULCOLLECT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CH_TIGERFIST {
  SK_CHAMPION, offset = 0x0

  public void SK_CH_TIGERFIST::Init()
  public int SK_CH_TIGERFIST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CH_TIGERFIST::GetMaxLevel()
  public short SK_CH_TIGERFIST::GetSPCost(short)
  public void SK_CH_TIGERFIST(const class SK_CH_TIGERFIST &)
  public void SK_CH_TIGERFIST::SK_CH_TIGERFIST()
  public void ~SK_CH_TIGERFIST()
  public class SK_CH_TIGERFIST & operator=(const class SK_CH_TIGERFIST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_COLLECTOR {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_COLLECTOR::GetMaxLevel()
  public int SK_COLLECTOR::IsAvailableJob(short)
  public short SK_COLLECTOR::GetSPCost(short)
  public short SK_COLLECTOR::GetPreDelayTime(short)
  public void SK_COLLECTOR(const class SK_COLLECTOR &)
  public void SK_COLLECTOR::SK_COLLECTOR()
  public void SK_COLLECTOR::~SK_COLLECTOR()
  public class SK_COLLECTOR & operator=(const class SK_COLLECTOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CREATOR {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short GetMaxLevel()
  public int SK_CREATOR::IsAvailableJob(short)
  public short SK_CREATOR::GetSPCost(short)
  public short SK_CREATOR::GetPreDelayTime(short)
  public void SK_CREATOR(const class SK_CREATOR &)
  public void SK_CREATOR()
  public void SK_CREATOR::~SK_CREATOR()
  public class SK_CREATOR & operator=(const class SK_CREATOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CRUSADER {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_CRUSADER::GetMaxLevel()
  public int SK_CRUSADER::IsAvailableJob(short)
  public short SK_CRUSADER::GetSPCost(short)
  public short SK_CRUSADER::GetPreDelayTime(short)
  public void SK_CRUSADER(const class SK_CRUSADER &)
  public void SK_CRUSADER::SK_CRUSADER()
  public void SK_CRUSADER::~SK_CRUSADER()
  public class SK_CRUSADER & operator=(const class SK_CRUSADER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_ACIDDEMONSTRATION {
  SK_CREATOR, offset = 0x0

  public void SK_CR_ACIDDEMONSTRATION::Init()
  public int SK_CR_ACIDDEMONSTRATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_ACIDDEMONSTRATION::GetMaxLevel()
  public short SK_CR_ACIDDEMONSTRATION::GetSPCost(short)
  public short SK_CR_ACIDDEMONSTRATION::GetPreDelayTime(short)
  public void SK_CR_ACIDDEMONSTRATION(const class SK_CR_ACIDDEMONSTRATION &)
  public void SK_CR_ACIDDEMONSTRATION::SK_CR_ACIDDEMONSTRATION()
  public void ~SK_CR_ACIDDEMONSTRATION()
  public class SK_CR_ACIDDEMONSTRATION & operator=(const class SK_CR_ACIDDEMONSTRATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_AUTOGUARD {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_AUTOGUARD::Init()
  public int SK_CR_AUTOGUARD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_AUTOGUARD::GetSPCost(short)
  public void SK_CR_AUTOGUARD(const class SK_CR_AUTOGUARD &)
  public void SK_CR_AUTOGUARD::SK_CR_AUTOGUARD()
  public void SK_CR_AUTOGUARD::~SK_CR_AUTOGUARD()
  public class SK_CR_AUTOGUARD & operator=(const class SK_CR_AUTOGUARD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_CULTIVATION {
  SK_CREATOR, offset = 0x0

  public void SK_CR_CULTIVATION::Init()
  public int SK_CR_CULTIVATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_CULTIVATION::GetMaxLevel()
  public short SK_CR_CULTIVATION::GetSPCost(short)
  public void SK_CR_CULTIVATION(const class SK_CR_CULTIVATION &)
  public void SK_CR_CULTIVATION::SK_CR_CULTIVATION()
  public void ~SK_CR_CULTIVATION()
  public class SK_CR_CULTIVATION & operator=(const class SK_CR_CULTIVATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_DEFENDER {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_DEFENDER::Init()
  public int SK_CR_DEFENDER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_DEFENDER::GetMaxLevel()
  public short SK_CR_DEFENDER::GetSPCost(short)
  public void SK_CR_DEFENDER(const class SK_CR_DEFENDER &)
  public void SK_CR_DEFENDER::SK_CR_DEFENDER()
  public void SK_CR_DEFENDER::~SK_CR_DEFENDER()
  public class SK_CR_DEFENDER & operator=(const class SK_CR_DEFENDER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_DEVOTION {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_DEVOTION::Init()
  public int SK_CR_DEVOTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_DEVOTION::GetMaxLevel()
  public short SK_CR_DEVOTION::GetPreDelayTime(short)
  public short SK_CR_DEVOTION::GetSPCost(short)
  public short SK_CR_DEVOTION::GetAttackRange(int)
  public void SK_CR_DEVOTION(const class SK_CR_DEVOTION &)
  public void SK_CR_DEVOTION::SK_CR_DEVOTION()
  public void SK_CR_DEVOTION::~SK_CR_DEVOTION()
  public class SK_CR_DEVOTION & operator=(const class SK_CR_DEVOTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_FULLPROTECTION {
  SK_CREATOR, offset = 0x0

  public void SK_CR_FULLPROTECTION::Init()
  public int SK_CR_FULLPROTECTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_FULLPROTECTION::GetMaxLevel()
  public short SK_CR_FULLPROTECTION::GetSPCost(short)
  public short SK_CR_FULLPROTECTION::GetPreDelayTime(short)
  public void SK_CR_FULLPROTECTION(const class SK_CR_FULLPROTECTION &)
  public void SK_CR_FULLPROTECTION::SK_CR_FULLPROTECTION()
  public void ~SK_CR_FULLPROTECTION()
  public class SK_CR_FULLPROTECTION & operator=(const class SK_CR_FULLPROTECTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_GRANDCROSS {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_GRANDCROSS::Init()
  public int SK_CR_GRANDCROSS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_GRANDCROSS::GetPreDelayTime(short)
  public short SK_CR_GRANDCROSS::GetSPCost(short)
  public void SK_CR_GRANDCROSS(const class SK_CR_GRANDCROSS &)
  public void SK_CR_GRANDCROSS::SK_CR_GRANDCROSS()
  public void ~SK_CR_GRANDCROSS()
  public class SK_CR_GRANDCROSS & operator=(const class SK_CR_GRANDCROSS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_HOLYCROSS {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_HOLYCROSS::Init()
  public int SK_CR_HOLYCROSS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_HOLYCROSS::GetSPCost(short)
  public void SK_CR_HOLYCROSS(const class SK_CR_HOLYCROSS &)
  public void SK_CR_HOLYCROSS::SK_CR_HOLYCROSS()
  public void ~SK_CR_HOLYCROSS()
  public class SK_CR_HOLYCROSS & operator=(const class SK_CR_HOLYCROSS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_PROVIDENCE {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_PROVIDENCE::Init()
  public int SK_CR_PROVIDENCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_PROVIDENCE::GetMaxLevel()
  public short SK_CR_PROVIDENCE::GetPreDelayTime(short)
  public short SK_CR_PROVIDENCE::GetSPCost(short)
  public void SK_CR_PROVIDENCE(const class SK_CR_PROVIDENCE &)
  public void SK_CR_PROVIDENCE::SK_CR_PROVIDENCE()
  public void ~SK_CR_PROVIDENCE()
  public class SK_CR_PROVIDENCE & operator=(const class SK_CR_PROVIDENCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_REFLECTSHIELD {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_REFLECTSHIELD::Init()
  public int SK_CR_REFLECTSHIELD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_REFLECTSHIELD::GetSPCost(short)
  public void SK_CR_REFLECTSHIELD(const class SK_CR_REFLECTSHIELD &)
  public void SK_CR_REFLECTSHIELD::SK_CR_REFLECTSHIELD()
  public void SK_CR_REFLECTSHIELD::~SK_CR_REFLECTSHIELD()
  public class SK_CR_REFLECTSHIELD & operator=(const class SK_CR_REFLECTSHIELD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_SHIELDBOOMERANG {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_SHIELDBOOMERANG::Init()
  public int SK_CR_SHIELDBOOMERANG::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_SHIELDBOOMERANG::GetMaxLevel()
  public short SK_CR_SHIELDBOOMERANG::GetSPCost(short)
  public short SK_CR_SHIELDBOOMERANG::GetAttackRange(int)
  public void SK_CR_SHIELDBOOMERANG(const class SK_CR_SHIELDBOOMERANG &)
  public void SK_CR_SHIELDBOOMERANG::SK_CR_SHIELDBOOMERANG()
  public void ~SK_CR_SHIELDBOOMERANG()
  public class SK_CR_SHIELDBOOMERANG & operator=(const class SK_CR_SHIELDBOOMERANG &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_SHIELDCHARGE {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_SHIELDCHARGE::Init()
  public int SK_CR_SHIELDCHARGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_SHIELDCHARGE::GetMaxLevel()
  public short SK_CR_SHIELDCHARGE::GetSPCost(short)
  public void SK_CR_SHIELDCHARGE(const class SK_CR_SHIELDCHARGE &)
  public void SK_CR_SHIELDCHARGE::SK_CR_SHIELDCHARGE()
  public void ~SK_CR_SHIELDCHARGE()
  public class SK_CR_SHIELDCHARGE & operator=(const class SK_CR_SHIELDCHARGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_SHRINK {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_SHRINK::Init()
  public int SK_CR_SHRINK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_SHRINK::GetMaxLevel()
  public short SK_CR_SHRINK::GetSPCost(short)
  public void SK_CR_SHRINK(const class SK_CR_SHRINK &)
  public void SK_CR_SHRINK::SK_CR_SHRINK()
  public void ~SK_CR_SHRINK()
  public class SK_CR_SHRINK & operator=(const class SK_CR_SHRINK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_SLIMPITCHER {
  SK_CREATOR, offset = 0x0

  public void SK_CR_SLIMPITCHER::Init()
  public int SK_CR_SLIMPITCHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_SLIMPITCHER::GetMaxLevel()
  public short SK_CR_SLIMPITCHER::GetSPCost(short)
  public short SK_CR_SLIMPITCHER::GetPreDelayTime(short)
  public void SK_CR_SLIMPITCHER(const class SK_CR_SLIMPITCHER &)
  public void SK_CR_SLIMPITCHER::SK_CR_SLIMPITCHER()
  public void ~SK_CR_SLIMPITCHER()
  public class SK_CR_SLIMPITCHER & operator=(const class SK_CR_SLIMPITCHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_SPEARQUICKEN {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_SPEARQUICKEN::Init()
  public int SK_CR_SPEARQUICKEN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_CR_SPEARQUICKEN::GetSPCost(short)
  public void SK_CR_SPEARQUICKEN(const class SK_CR_SPEARQUICKEN &)
  public void SK_CR_SPEARQUICKEN::SK_CR_SPEARQUICKEN()
  public void ~SK_CR_SPEARQUICKEN()
  public class SK_CR_SPEARQUICKEN & operator=(const class SK_CR_SPEARQUICKEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_CR_TRUST {
  SK_CRUSADER, offset = 0x0

  public void SK_CR_TRUST::Init()
  public int SK_CR_TRUST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_CR_TRUST(const class SK_CR_TRUST &)
  public void SK_CR_TRUST::SK_CR_TRUST()
  public void ~SK_CR_TRUST()
  public class SK_CR_TRUST & operator=(const class SK_CR_TRUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DANCER {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_DANCER::GetMaxLevel()
  public int SK_DANCER::IsAvailableJob(short)
  public short SK_DANCER::GetSPCost(short)
  public short SK_DANCER::GetPreDelayTime(short)
  public void SK_DANCER(const class SK_DANCER &)
  public void SK_DANCER::SK_DANCER()
  public void SK_DANCER::~SK_DANCER()
  public class SK_DANCER & operator=(const class SK_DANCER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_ACCESSORYMIX {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_ACCESSORYMIX::Init()
  public int SK_DA_ACCESSORYMIX::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_ACCESSORYMIX::GetMaxLevel()
  public short SK_DA_ACCESSORYMIX::GetSPCost(short)
  public short SK_DA_ACCESSORYMIX::GetPreDelayTime(short)
  public void SK_DA_ACCESSORYMIX(const class SK_DA_ACCESSORYMIX &)
  public void SK_DA_ACCESSORYMIX::SK_DA_ACCESSORYMIX()
  public void ~SK_DA_ACCESSORYMIX()
  public class SK_DA_ACCESSORYMIX & operator=(const class SK_DA_ACCESSORYMIX &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_BLACK {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_BLACK::Init()
  public int SK_DA_BLACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_BLACK::GetMaxLevel()
  public short SK_DA_BLACK::GetSPCost(short)
  public short SK_DA_BLACK::GetPreDelayTime(short)
  public void SK_DA_BLACK(const class SK_DA_BLACK &)
  public void SK_DA_BLACK::SK_DA_BLACK()
  public void ~SK_DA_BLACK()
  public class SK_DA_BLACK & operator=(const class SK_DA_BLACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_CARTSWING {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_CARTSWING::Init()
  public int SK_DA_CARTSWING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_CARTSWING::GetMaxLevel()
  public short SK_DA_CARTSWING::GetSPCost(short)
  public short SK_DA_CARTSWING::GetPreDelayTime(short)
  public void SK_DA_CARTSWING(const class SK_DA_CARTSWING &)
  public void SK_DA_CARTSWING::SK_DA_CARTSWING()
  public void ~SK_DA_CARTSWING()
  public class SK_DA_CARTSWING & operator=(const class SK_DA_CARTSWING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_CLOUD {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_CLOUD::Init()
  public int SK_DA_CLOUD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_CLOUD::GetMaxLevel()
  public short SK_DA_CLOUD::GetSPCost(short)
  public short SK_DA_CLOUD::GetPreDelayTime(short)
  public void SK_DA_CLOUD(const class SK_DA_CLOUD &)
  public void SK_DA_CLOUD::SK_DA_CLOUD()
  public void ~SK_DA_CLOUD()
  public class SK_DA_CLOUD & operator=(const class SK_DA_CLOUD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_CONTRACT {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_CONTRACT::Init()
  public int SK_DA_CONTRACT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_CONTRACT::GetMaxLevel()
  public short SK_DA_CONTRACT::GetSPCost(short)
  public short SK_DA_CONTRACT::GetPreDelayTime(short)
  public void SK_DA_CONTRACT(const class SK_DA_CONTRACT &)
  public void SK_DA_CONTRACT::SK_DA_CONTRACT()
  public void ~SK_DA_CONTRACT()
  public class SK_DA_CONTRACT & operator=(const class SK_DA_CONTRACT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_COPY {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_COPY::Init()
  public int SK_DA_COPY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_COPY::GetMaxLevel()
  public short SK_DA_COPY::GetSPCost(short)
  public short SK_DA_COPY::GetPreDelayTime(short)
  public void SK_DA_COPY(const class SK_DA_COPY &)
  public void SK_DA_COPY::SK_DA_COPY()
  public void ~SK_DA_COPY()
  public class SK_DA_COPY & operator=(const class SK_DA_COPY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_CRUSH {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_CRUSH::Init()
  public int SK_DA_CRUSH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_CRUSH::GetMaxLevel()
  public short SK_DA_CRUSH::GetSPCost(short)
  public short SK_DA_CRUSH::GetPreDelayTime(short)
  public void SK_DA_CRUSH(const class SK_DA_CRUSH &)
  public void SK_DA_CRUSH::SK_DA_CRUSH()
  public void ~SK_DA_CRUSH()
  public class SK_DA_CRUSH & operator=(const class SK_DA_CRUSH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_CRYSTAL {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_CRYSTAL::Init()
  public int SK_DA_CRYSTAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_CRYSTAL::GetMaxLevel()
  public short SK_DA_CRYSTAL::GetSPCost(short)
  public short SK_DA_CRYSTAL::GetPreDelayTime(short)
  public void SK_DA_CRYSTAL(const class SK_DA_CRYSTAL &)
  public void SK_DA_CRYSTAL::SK_DA_CRYSTAL()
  public void ~SK_DA_CRYSTAL()
  public class SK_DA_CRYSTAL & operator=(const class SK_DA_CRYSTAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_DARKPOWER {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_DARKPOWER::Init()
  public int SK_DA_DARKPOWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_DARKPOWER::GetMaxLevel()
  public short SK_DA_DARKPOWER::GetSPCost(short)
  public short SK_DA_DARKPOWER::GetPreDelayTime(short)
  public void SK_DA_DARKPOWER(const class SK_DA_DARKPOWER &)
  public void SK_DA_DARKPOWER::SK_DA_DARKPOWER()
  public void ~SK_DA_DARKPOWER()
  public class SK_DA_DARKPOWER & operator=(const class SK_DA_DARKPOWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_DREAM {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_DREAM::Init()
  public int SK_DA_DREAM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_DREAM::GetMaxLevel()
  public short SK_DA_DREAM::GetSPCost(short)
  public short SK_DA_DREAM::GetPreDelayTime(short)
  public void SK_DA_DREAM(const class SK_DA_DREAM &)
  public void SK_DA_DREAM::SK_DA_DREAM()
  public void ~SK_DA_DREAM()
  public class SK_DA_DREAM & operator=(const class SK_DA_DREAM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_EARPLUG {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_EARPLUG::Init()
  public int SK_DA_EARPLUG::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_EARPLUG::GetMaxLevel()
  public short SK_DA_EARPLUG::GetSPCost(short)
  public short SK_DA_EARPLUG::GetPreDelayTime(short)
  public void SK_DA_EARPLUG(const class SK_DA_EARPLUG &)
  public void SK_DA_EARPLUG::SK_DA_EARPLUG()
  public void ~SK_DA_EARPLUG()
  public class SK_DA_EARPLUG & operator=(const class SK_DA_EARPLUG &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_EDARKNESS {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_EDARKNESS::Init()
  public int SK_DA_EDARKNESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_EDARKNESS::GetMaxLevel()
  public short SK_DA_EDARKNESS::GetSPCost(short)
  public short SK_DA_EDARKNESS::GetPreDelayTime(short)
  public void SK_DA_EDARKNESS(const class SK_DA_EDARKNESS &)
  public void SK_DA_EDARKNESS::SK_DA_EDARKNESS()
  public void ~SK_DA_EDARKNESS()
  public class SK_DA_EDARKNESS & operator=(const class SK_DA_EDARKNESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_EGUARDIAN {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_EGUARDIAN::Init()
  public int SK_DA_EGUARDIAN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_EGUARDIAN::GetMaxLevel()
  public short SK_DA_EGUARDIAN::GetSPCost(short)
  public short SK_DA_EGUARDIAN::GetPreDelayTime(short)
  public void SK_DA_EGUARDIAN(const class SK_DA_EGUARDIAN &)
  public void SK_DA_EGUARDIAN::SK_DA_EGUARDIAN()
  public void ~SK_DA_EGUARDIAN()
  public class SK_DA_EGUARDIAN & operator=(const class SK_DA_EGUARDIAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_ENERGY {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_ENERGY::Init()
  public int SK_DA_ENERGY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_ENERGY::GetMaxLevel()
  public short SK_DA_ENERGY::GetSPCost(short)
  public void SK_DA_ENERGY(const class SK_DA_ENERGY &)
  public void SK_DA_ENERGY::SK_DA_ENERGY()
  public void ~SK_DA_ENERGY()
  public class SK_DA_ENERGY & operator=(const class SK_DA_ENERGY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_EXP {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_EXP::Init()
  public int SK_DA_EXP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_EXP::GetMaxLevel()
  public short SK_DA_EXP::GetSPCost(short)
  public short SK_DA_EXP::GetPreDelayTime(short)
  public void SK_DA_EXP(const class SK_DA_EXP &)
  public void SK_DA_EXP::SK_DA_EXP()
  public void ~SK_DA_EXP()
  public class SK_DA_EXP & operator=(const class SK_DA_EXP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_EXPLOSION {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_EXPLOSION::Init()
  public int SK_DA_EXPLOSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_EXPLOSION::GetMaxLevel()
  public short SK_DA_EXPLOSION::GetSPCost(short)
  public short SK_DA_EXPLOSION::GetPreDelayTime(short)
  public void SK_DA_EXPLOSION(const class SK_DA_EXPLOSION &)
  public void SK_DA_EXPLOSION::SK_DA_EXPLOSION()
  public void ~SK_DA_EXPLOSION()
  public class SK_DA_EXPLOSION & operator=(const class SK_DA_EXPLOSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_FIRSTSLOT {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_FIRSTSLOT::Init()
  public int SK_DA_FIRSTSLOT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_FIRSTSLOT::GetMaxLevel()
  public short SK_DA_FIRSTSLOT::GetSPCost(short)
  public short SK_DA_FIRSTSLOT::GetPreDelayTime(short)
  public void SK_DA_FIRSTSLOT(const class SK_DA_FIRSTSLOT &)
  public void SK_DA_FIRSTSLOT::SK_DA_FIRSTSLOT()
  public void ~SK_DA_FIRSTSLOT()
  public class SK_DA_FIRSTSLOT & operator=(const class SK_DA_FIRSTSLOT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_HEADDEF {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_HEADDEF::Init()
  public int SK_DA_HEADDEF::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_HEADDEF::GetMaxLevel()
  public short SK_DA_HEADDEF::GetSPCost(short)
  public short SK_DA_HEADDEF::GetPreDelayTime(short)
  public void SK_DA_HEADDEF(const class SK_DA_HEADDEF &)
  public void SK_DA_HEADDEF::SK_DA_HEADDEF()
  public void ~SK_DA_HEADDEF()
  public class SK_DA_HEADDEF & operator=(const class SK_DA_HEADDEF &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_ILLUSION {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_ILLUSION::Init()
  public int SK_DA_ILLUSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_ILLUSION::GetMaxLevel()
  public short SK_DA_ILLUSION::GetSPCost(short)
  public short SK_DA_ILLUSION::GetPreDelayTime(short)
  public void SK_DA_ILLUSION(const class SK_DA_ILLUSION &)
  public void SK_DA_ILLUSION::SK_DA_ILLUSION()
  public void ~SK_DA_ILLUSION()
  public class SK_DA_ILLUSION & operator=(const class SK_DA_ILLUSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_ITEMREBUILD {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_ITEMREBUILD::Init()
  public int SK_DA_ITEMREBUILD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_ITEMREBUILD::GetMaxLevel()
  public short SK_DA_ITEMREBUILD::GetSPCost(short)
  public short SK_DA_ITEMREBUILD::GetPreDelayTime(short)
  public void SK_DA_ITEMREBUILD(const class SK_DA_ITEMREBUILD &)
  public void SK_DA_ITEMREBUILD::SK_DA_ITEMREBUILD()
  public void ~SK_DA_ITEMREBUILD()
  public class SK_DA_ITEMREBUILD & operator=(const class SK_DA_ITEMREBUILD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_JOBCHANGE {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_JOBCHANGE::Init()
  public int SK_DA_JOBCHANGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_DA_JOBCHANGE(const class SK_DA_JOBCHANGE &)
  public void SK_DA_JOBCHANGE::SK_DA_JOBCHANGE()
  public void ~SK_DA_JOBCHANGE()
  public class SK_DA_JOBCHANGE & operator=(const class SK_DA_JOBCHANGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_MAGICCART {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_MAGICCART::Init()
  public int SK_DA_MAGICCART::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_MAGICCART::GetMaxLevel()
  public short SK_DA_MAGICCART::GetSPCost(short)
  public short SK_DA_MAGICCART::GetPreDelayTime(short)
  public void SK_DA_MAGICCART(const class SK_DA_MAGICCART &)
  public void SK_DA_MAGICCART::SK_DA_MAGICCART()
  public void ~SK_DA_MAGICCART()
  public class SK_DA_MAGICCART & operator=(const class SK_DA_MAGICCART &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_NUETRALIZE {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_NUETRALIZE::Init()
  public int SK_DA_NUETRALIZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_NUETRALIZE::GetMaxLevel()
  public void SK_DA_NUETRALIZE(const class SK_DA_NUETRALIZE &)
  public void SK_DA_NUETRALIZE::SK_DA_NUETRALIZE()
  public void ~SK_DA_NUETRALIZE()
  public class SK_DA_NUETRALIZE & operator=(const class SK_DA_NUETRALIZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_REBUILD {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_REBUILD::Init()
  public int SK_DA_REBUILD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_REBUILD::GetMaxLevel()
  public short SK_DA_REBUILD::GetSPCost(short)
  public short SK_DA_REBUILD::GetPreDelayTime(short)
  public void SK_DA_REBUILD(const class SK_DA_REBUILD &)
  public void SK_DA_REBUILD::SK_DA_REBUILD()
  public void ~SK_DA_REBUILD()
  public class SK_DA_REBUILD & operator=(const class SK_DA_REBUILD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_REVENGE {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_REVENGE::Init()
  public int SK_DA_REVENGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_REVENGE::GetMaxLevel()
  public void SK_DA_REVENGE(const class SK_DA_REVENGE &)
  public void SK_DA_REVENGE::SK_DA_REVENGE()
  public void ~SK_DA_REVENGE()
  public class SK_DA_REVENGE & operator=(const class SK_DA_REVENGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_REWARD {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_REWARD::Init()
  public int SK_DA_REWARD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_REWARD::GetMaxLevel()
  public short SK_DA_REWARD::GetSPCost(short)
  public short SK_DA_REWARD::GetPreDelayTime(short)
  public void SK_DA_REWARD(const class SK_DA_REWARD &)
  public void SK_DA_REWARD::SK_DA_REWARD()
  public void ~SK_DA_REWARD()
  public class SK_DA_REWARD & operator=(const class SK_DA_REWARD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_RUNNER {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_RUNNER::Init()
  public int SK_DA_RUNNER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_RUNNER::GetMaxLevel()
  public short SK_DA_RUNNER::GetSPCost(short)
  public short SK_DA_RUNNER::GetPreDelayTime(short)
  public void SK_DA_RUNNER(const class SK_DA_RUNNER &)
  public void SK_DA_RUNNER::SK_DA_RUNNER()
  public void ~SK_DA_RUNNER()
  public class SK_DA_RUNNER & operator=(const class SK_DA_RUNNER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_SPACE {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_SPACE::Init()
  public int SK_DA_SPACE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_SPACE::GetMaxLevel()
  public short SK_DA_SPACE::GetSPCost(short)
  public short SK_DA_SPACE::GetPreDelayTime(short)
  public void SK_DA_SPACE(const class SK_DA_SPACE &)
  public void SK_DA_SPACE::SK_DA_SPACE()
  public void ~SK_DA_SPACE()
  public class SK_DA_SPACE & operator=(const class SK_DA_SPACE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_TIMEOUT {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_TIMEOUT::Init()
  public int SK_DA_TIMEOUT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_TIMEOUT::GetMaxLevel()
  public short SK_DA_TIMEOUT::GetSPCost(short)
  public short SK_DA_TIMEOUT::GetPreDelayTime(short)
  public void SK_DA_TIMEOUT(const class SK_DA_TIMEOUT &)
  public void SK_DA_TIMEOUT::SK_DA_TIMEOUT()
  public void ~SK_DA_TIMEOUT()
  public class SK_DA_TIMEOUT & operator=(const class SK_DA_TIMEOUT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_TRANSFER {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_TRANSFER::Init()
  public int SK_DA_TRANSFER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_TRANSFER::GetMaxLevel()
  public short SK_DA_TRANSFER::GetSPCost(short)
  public short SK_DA_TRANSFER::GetPreDelayTime(short)
  public void SK_DA_TRANSFER(const class SK_DA_TRANSFER &)
  public void SK_DA_TRANSFER::SK_DA_TRANSFER()
  public void ~SK_DA_TRANSFER()
  public class SK_DA_TRANSFER & operator=(const class SK_DA_TRANSFER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_TRANSFORM {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_TRANSFORM::Init()
  public int SK_DA_TRANSFORM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_TRANSFORM::GetMaxLevel()
  public short SK_DA_TRANSFORM::GetSPCost(short)
  public short SK_DA_TRANSFORM::GetPreDelayTime(short)
  public void SK_DA_TRANSFORM(const class SK_DA_TRANSFORM &)
  public void SK_DA_TRANSFORM::SK_DA_TRANSFORM()
  public void ~SK_DA_TRANSFORM()
  public class SK_DA_TRANSFORM & operator=(const class SK_DA_TRANSFORM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_WALL {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_WALL::Init()
  public int SK_DA_WALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_WALL::GetMaxLevel()
  public short SK_DA_WALL::GetSPCost(short)
  public short SK_DA_WALL::GetPreDelayTime(short)
  public void SK_DA_WALL(const class SK_DA_WALL &)
  public void SK_DA_WALL::SK_DA_WALL()
  public void ~SK_DA_WALL()
  public class SK_DA_WALL & operator=(const class SK_DA_WALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DA_ZENYRANK {
  SK_COLLECTOR, offset = 0x0

  public void SK_DA_ZENYRANK::Init()
  public int SK_DA_ZENYRANK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DA_ZENYRANK::GetMaxLevel()
  public short SK_DA_ZENYRANK::GetSPCost(short)
  public short SK_DA_ZENYRANK::GetPreDelayTime(short)
  public void SK_DA_ZENYRANK(const class SK_DA_ZENYRANK &)
  public void SK_DA_ZENYRANK::SK_DA_ZENYRANK()
  public void ~SK_DA_ZENYRANK()
  public class SK_DA_ZENYRANK & operator=(const class SK_DA_ZENYRANK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DC_DANCINGLESSON {
  SK_DANCER, offset = 0x0

  public void SK_DC_DANCINGLESSON::Init()
  public int SK_DC_DANCINGLESSON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_DC_DANCINGLESSON(const class SK_DC_DANCINGLESSON &)
  public void SK_DC_DANCINGLESSON::SK_DC_DANCINGLESSON()
  public void ~SK_DC_DANCINGLESSON()
  public class SK_DC_DANCINGLESSON & operator=(const class SK_DC_DANCINGLESSON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DC_DONTFORGETME {
  SK_DANCER, offset = 0x0

  public void SK_DC_DONTFORGETME::Init()
  public int SK_DC_DONTFORGETME::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DC_DONTFORGETME::GetSPCost(short)
  public void SK_DC_DONTFORGETME(const class SK_DC_DONTFORGETME &)
  public void SK_DC_DONTFORGETME::SK_DC_DONTFORGETME()
  public void ~SK_DC_DONTFORGETME()
  public class SK_DC_DONTFORGETME & operator=(const class SK_DC_DONTFORGETME &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DC_FORTUNEKISS {
  SK_DANCER, offset = 0x0

  public void SK_DC_FORTUNEKISS::Init()
  public int SK_DC_FORTUNEKISS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DC_FORTUNEKISS::GetSPCost(short)
  public void SK_DC_FORTUNEKISS(const class SK_DC_FORTUNEKISS &)
  public void SK_DC_FORTUNEKISS::SK_DC_FORTUNEKISS()
  public void ~SK_DC_FORTUNEKISS()
  public class SK_DC_FORTUNEKISS & operator=(const class SK_DC_FORTUNEKISS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DC_HUMMING {
  SK_DANCER, offset = 0x0

  public void SK_DC_HUMMING::Init()
  public int SK_DC_HUMMING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DC_HUMMING::GetSPCost(short)
  public void SK_DC_HUMMING(const class SK_DC_HUMMING &)
  public void SK_DC_HUMMING::SK_DC_HUMMING()
  public void ~SK_DC_HUMMING()
  public class SK_DC_HUMMING & operator=(const class SK_DC_HUMMING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DC_SCREAM {
  SK_DANCER, offset = 0x0

  public void SK_DC_SCREAM::Init()
  public int SK_DC_SCREAM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DC_SCREAM::GetMaxLevel()
  public short SK_DC_SCREAM::GetSPCost(short)
  public void SK_DC_SCREAM(const class SK_DC_SCREAM &)
  public void SK_DC_SCREAM::SK_DC_SCREAM()
  public void ~SK_DC_SCREAM()
  public class SK_DC_SCREAM & operator=(const class SK_DC_SCREAM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DC_SERVICEFORYOU {
  SK_DANCER, offset = 0x0

  public void SK_DC_SERVICEFORYOU::Init()
  public int SK_DC_SERVICEFORYOU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DC_SERVICEFORYOU::GetSPCost(short)
  public void SK_DC_SERVICEFORYOU(const class SK_DC_SERVICEFORYOU &)
  public void SK_DC_SERVICEFORYOU::SK_DC_SERVICEFORYOU()
  public void ~SK_DC_SERVICEFORYOU()
  public class SK_DC_SERVICEFORYOU & operator=(const class SK_DC_SERVICEFORYOU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DC_THROWARROW {
  SK_DANCER, offset = 0x0

  public void SK_DC_THROWARROW::Init()
  public int SK_DC_THROWARROW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DC_THROWARROW::GetMaxLevel()
  public short SK_DC_THROWARROW::GetSPCost(short)
  public short SK_DC_THROWARROW::GetPreDelayTime(short)
  public void SK_DC_THROWARROW(const class SK_DC_THROWARROW &)
  public void SK_DC_THROWARROW::SK_DC_THROWARROW()
  public void ~SK_DC_THROWARROW()
  public class SK_DC_THROWARROW & operator=(const class SK_DC_THROWARROW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DC_UGLYDANCE {
  SK_DANCER, offset = 0x0

  public void SK_DC_UGLYDANCE::Init()
  public int SK_DC_UGLYDANCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DC_UGLYDANCE::GetMaxLevel()
  public short SK_DC_UGLYDANCE::GetSPCost(short)
  public void SK_DC_UGLYDANCE(const class SK_DC_UGLYDANCE &)
  public void SK_DC_UGLYDANCE::SK_DC_UGLYDANCE()
  public void ~SK_DC_UGLYDANCE()
  public class SK_DC_UGLYDANCE & operator=(const class SK_DC_UGLYDANCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DC_WINKCHARM {
  SK_DANCER, offset = 0x0

  public void SK_DC_WINKCHARM::Init()
  public int SK_DC_WINKCHARM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DC_WINKCHARM::GetMaxLevel()
  public short SK_DC_WINKCHARM::GetSPCost(short)
  public short SK_DC_WINKCHARM::GetPreDelayTime(short)
  public short SK_DC_WINKCHARM::GetPostDelayTM(short)
  public void SK_DC_WINKCHARM(const class SK_DC_WINKCHARM &)
  public void SK_DC_WINKCHARM::SK_DC_WINKCHARM()
  public void ~SK_DC_WINKCHARM()
  public class SK_DC_WINKCHARM & operator=(const class SK_DC_WINKCHARM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DEATHKNIGHT {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_DEATHKNIGHT::GetMaxLevel()
  public int SK_DEATHKNIGHT::IsAvailableJob(short)
  public short SK_DEATHKNIGHT::GetSPCost(short)
  public short SK_DEATHKNIGHT::GetPreDelayTime(short)
  public void SK_DEATHKNIGHT(const class SK_DEATHKNIGHT &)
  public void SK_DEATHKNIGHT::SK_DEATHKNIGHT()
  public void SK_DEATHKNIGHT::~SK_DEATHKNIGHT()
  public class SK_DEATHKNIGHT & operator=(const class SK_DEATHKNIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_ACCEL {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_ACCEL::Init()
  public int SK_DE_ACCEL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_ACCEL::GetMaxLevel()
  public short SK_DE_ACCEL::GetSPCost(short)
  public void SK_DE_ACCEL(const class SK_DE_ACCEL &)
  public void SK_DE_ACCEL::SK_DE_ACCEL()
  public void ~SK_DE_ACCEL()
  public class SK_DE_ACCEL & operator=(const class SK_DE_ACCEL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_AURA {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_AURA::Init()
  public int SK_DE_AURA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_AURA::GetMaxLevel()
  public short SK_DE_AURA::GetSPCost(short)
  public void SK_DE_AURA(const class SK_DE_AURA &)
  public void SK_DE_AURA::SK_DE_AURA()
  public void ~SK_DE_AURA()
  public class SK_DE_AURA & operator=(const class SK_DE_AURA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_BERSERKAIZER {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_BERSERKAIZER::Init()
  public int SK_DE_BERSERKAIZER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_BERSERKAIZER::GetMaxLevel()
  public short SK_DE_BERSERKAIZER::GetSPCost(short)
  public short SK_DE_BERSERKAIZER::GetPreDelayTime(short)
  public void SK_DE_BERSERKAIZER(const class SK_DE_BERSERKAIZER &)
  public void SK_DE_BERSERKAIZER::SK_DE_BERSERKAIZER()
  public void ~SK_DE_BERSERKAIZER()
  public class SK_DE_BERSERKAIZER & operator=(const class SK_DE_BERSERKAIZER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_BLOCKDOUBLE {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_BLOCKDOUBLE::Init()
  public int SK_DE_BLOCKDOUBLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_BLOCKDOUBLE::GetMaxLevel()
  public short SK_DE_BLOCKDOUBLE::GetSPCost(short)
  public short SK_DE_BLOCKDOUBLE::GetPreDelayTime(short)
  public void SK_DE_BLOCKDOUBLE(const class SK_DE_BLOCKDOUBLE &)
  public void SK_DE_BLOCKDOUBLE::SK_DE_BLOCKDOUBLE()
  public void ~SK_DE_BLOCKDOUBLE()
  public class SK_DE_BLOCKDOUBLE & operator=(const class SK_DE_BLOCKDOUBLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_BLOCKFAR {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_BLOCKFAR::Init()
  public int SK_DE_BLOCKFAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_BLOCKFAR::GetMaxLevel()
  public short SK_DE_BLOCKFAR::GetSPCost(short)
  public short SK_DE_BLOCKFAR::GetPreDelayTime(short)
  public void SK_DE_BLOCKFAR(const class SK_DE_BLOCKFAR &)
  public void SK_DE_BLOCKFAR::SK_DE_BLOCKFAR()
  public void ~SK_DE_BLOCKFAR()
  public class SK_DE_BLOCKFAR & operator=(const class SK_DE_BLOCKFAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_BLOCKMELEE {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_BLOCKMELEE::Init()
  public int SK_DE_BLOCKMELEE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_BLOCKMELEE::GetMaxLevel()
  public short SK_DE_BLOCKMELEE::GetSPCost(short)
  public short SK_DE_BLOCKMELEE::GetPreDelayTime(short)
  public void SK_DE_BLOCKMELEE(const class SK_DE_BLOCKMELEE &)
  public void SK_DE_BLOCKMELEE::SK_DE_BLOCKMELEE()
  public void ~SK_DE_BLOCKMELEE()
  public class SK_DE_BLOCKMELEE & operator=(const class SK_DE_BLOCKMELEE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_CHANGEATTACK {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_CHANGEATTACK::Init()
  public int SK_DE_CHANGEATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_CHANGEATTACK::GetMaxLevel()
  public short SK_DE_CHANGEATTACK::GetSPCost(short)
  public short SK_DE_CHANGEATTACK::GetPreDelayTime(short)
  public void SK_DE_CHANGEATTACK(const class SK_DE_CHANGEATTACK &)
  public void SK_DE_CHANGEATTACK::SK_DE_CHANGEATTACK()
  public void ~SK_DE_CHANGEATTACK()
  public class SK_DE_CHANGEATTACK & operator=(const class SK_DE_CHANGEATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_COIL {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_COIL::Init()
  public int SK_DE_COIL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_COIL::GetMaxLevel()
  public short SK_DE_COIL::GetSPCost(short)
  public short SK_DE_COIL::GetPreDelayTime(short)
  public void SK_DE_COIL(const class SK_DE_COIL &)
  public void SK_DE_COIL::SK_DE_COIL()
  public void ~SK_DE_COIL()
  public class SK_DE_COIL & operator=(const class SK_DE_COIL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_DANGERATTACK {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_DANGERATTACK::Init()
  public int SK_DE_DANGERATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_DANGERATTACK::GetMaxLevel()
  public short SK_DE_DANGERATTACK::GetSPCost(short)
  public short SK_DE_DANGERATTACK::GetPreDelayTime(short)
  public void SK_DE_DANGERATTACK(const class SK_DE_DANGERATTACK &)
  public void SK_DE_DANGERATTACK::SK_DE_DANGERATTACK()
  public void ~SK_DE_DANGERATTACK()
  public class SK_DE_DANGERATTACK & operator=(const class SK_DE_DANGERATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_ENERGY {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_ENERGY::Init()
  public int SK_DE_ENERGY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_ENERGY::GetMaxLevel()
  public short SK_DE_ENERGY::GetSPCost(short)
  public void SK_DE_ENERGY(const class SK_DE_ENERGY &)
  public void SK_DE_ENERGY::SK_DE_ENERGY()
  public void ~SK_DE_ENERGY()
  public class SK_DE_ENERGY & operator=(const class SK_DE_ENERGY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_FREEZER {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_FREEZER::Init()
  public int SK_DE_FREEZER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_FREEZER::GetMaxLevel()
  public short SK_DE_FREEZER::GetSPCost(short)
  public void SK_DE_FREEZER(const class SK_DE_FREEZER &)
  public void SK_DE_FREEZER::SK_DE_FREEZER()
  public void ~SK_DE_FREEZER()
  public class SK_DE_FREEZER & operator=(const class SK_DE_FREEZER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_FRONTATTACK {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_FRONTATTACK::Init()
  public int SK_DE_FRONTATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_FRONTATTACK::GetMaxLevel()
  public short SK_DE_FRONTATTACK::GetSPCost(short)
  public void SK_DE_FRONTATTACK(const class SK_DE_FRONTATTACK &)
  public void SK_DE_FRONTATTACK::SK_DE_FRONTATTACK()
  public void ~SK_DE_FRONTATTACK()
  public class SK_DE_FRONTATTACK & operator=(const class SK_DE_FRONTATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_GAUGE {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_GAUGE::Init()
  public int SK_DE_GAUGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_GAUGE::GetMaxLevel()
  public void SK_DE_GAUGE(const class SK_DE_GAUGE &)
  public void SK_DE_GAUGE::SK_DE_GAUGE()
  public void ~SK_DE_GAUGE()
  public class SK_DE_GAUGE & operator=(const class SK_DE_GAUGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_GKILL {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_GKILL::Init()
  public int SK_DE_GKILL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_GKILL::GetMaxLevel()
  public void SK_DE_GKILL(const class SK_DE_GKILL &)
  public void SK_DE_GKILL::SK_DE_GKILL()
  public void ~SK_DE_GKILL()
  public class SK_DE_GKILL & operator=(const class SK_DE_GKILL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_GPAIN {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_GPAIN::Init()
  public int SK_DE_GPAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_GPAIN::GetMaxLevel()
  public void SK_DE_GPAIN(const class SK_DE_GPAIN &)
  public void SK_DE_GPAIN::SK_DE_GPAIN()
  public void ~SK_DE_GPAIN()
  public class SK_DE_GPAIN & operator=(const class SK_DE_GPAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_GSKILL {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_GSKILL::Init()
  public int SK_DE_GSKILL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_DE_GSKILL(const class SK_DE_GSKILL &)
  public void SK_DE_GSKILL::SK_DE_GSKILL()
  public void ~SK_DE_GSKILL()
  public class SK_DE_GSKILL & operator=(const class SK_DE_GSKILL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_GTIME {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_GTIME::Init()
  public int SK_DE_GTIME::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_GTIME::GetMaxLevel()
  public void SK_DE_GTIME(const class SK_DE_GTIME &)
  public void SK_DE_GTIME::SK_DE_GTIME()
  public void ~SK_DE_GTIME()
  public class SK_DE_GTIME & operator=(const class SK_DE_GTIME &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_INSTANT {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_INSTANT::Init()
  public int SK_DE_INSTANT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_INSTANT::GetMaxLevel()
  public short SK_DE_INSTANT::GetSPCost(short)
  public void SK_DE_INSTANT(const class SK_DE_INSTANT &)
  public void SK_DE_INSTANT::SK_DE_INSTANT()
  public void ~SK_DE_INSTANT()
  public class SK_DE_INSTANT & operator=(const class SK_DE_INSTANT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_NIGHTMARE {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_NIGHTMARE::Init()
  public int SK_DE_NIGHTMARE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_NIGHTMARE::GetMaxLevel()
  public short SK_DE_NIGHTMARE::GetSPCost(short)
  public short SK_DE_NIGHTMARE::GetPreDelayTime(short)
  public void SK_DE_NIGHTMARE(const class SK_DE_NIGHTMARE &)
  public void SK_DE_NIGHTMARE::SK_DE_NIGHTMARE()
  public void ~SK_DE_NIGHTMARE()
  public class SK_DE_NIGHTMARE & operator=(const class SK_DE_NIGHTMARE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_PASSIVE {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_PASSIVE::Init()
  public int SK_DE_PASSIVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_PASSIVE::GetMaxLevel()
  public void SK_DE_PASSIVE(const class SK_DE_PASSIVE &)
  public void SK_DE_PASSIVE::SK_DE_PASSIVE()
  public void ~SK_DE_PASSIVE()
  public class SK_DE_PASSIVE & operator=(const class SK_DE_PASSIVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_PATTACK {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_PATTACK::Init()
  public int SK_DE_PATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_PATTACK::GetMaxLevel()
  public void SK_DE_PATTACK(const class SK_DE_PATTACK &)
  public void SK_DE_PATTACK::SK_DE_PATTACK()
  public void ~SK_DE_PATTACK()
  public class SK_DE_PATTACK & operator=(const class SK_DE_PATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_PCRITICAL {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_PCRITICAL::Init()
  public int SK_DE_PCRITICAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_PCRITICAL::GetMaxLevel()
  public void SK_DE_PCRITICAL(const class SK_DE_PCRITICAL &)
  public void SK_DE_PCRITICAL::SK_DE_PCRITICAL()
  public void ~SK_DE_PCRITICAL()
  public class SK_DE_PCRITICAL & operator=(const class SK_DE_PCRITICAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_PDEFENSE {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_PDEFENSE::Init()
  public int SK_DE_PDEFENSE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_PDEFENSE::GetMaxLevel()
  public void SK_DE_PDEFENSE(const class SK_DE_PDEFENSE &)
  public void SK_DE_PDEFENSE::SK_DE_PDEFENSE()
  public void ~SK_DE_PDEFENSE()
  public class SK_DE_PDEFENSE & operator=(const class SK_DE_PDEFENSE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_PHP {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_PHP::Init()
  public int SK_DE_PHP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_PHP::GetMaxLevel()
  public void SK_DE_PHP(const class SK_DE_PHP &)
  public void SK_DE_PHP::SK_DE_PHP()
  public void ~SK_DE_PHP()
  public class SK_DE_PHP & operator=(const class SK_DE_PHP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_POISON {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_POISON::Init()
  public int SK_DE_POISON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_POISON::GetMaxLevel()
  public short SK_DE_POISON::GetSPCost(short)
  public void SK_DE_POISON(const class SK_DE_POISON &)
  public void SK_DE_POISON::SK_DE_POISON()
  public void ~SK_DE_POISON()
  public class SK_DE_POISON & operator=(const class SK_DE_POISON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_PSP {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_PSP::Init()
  public int SK_DE_PSP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_PSP::GetMaxLevel()
  public void SK_DE_PSP(const class SK_DE_PSP &)
  public void SK_DE_PSP::SK_DE_PSP()
  public void ~SK_DE_PSP()
  public class SK_DE_PSP & operator=(const class SK_DE_PSP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_PSPEED {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_PSPEED::Init()
  public int SK_DE_PSPEED::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_PSPEED::GetMaxLevel()
  public void SK_DE_PSPEED(const class SK_DE_PSPEED &)
  public void SK_DE_PSPEED::SK_DE_PSPEED()
  public void ~SK_DE_PSPEED()
  public class SK_DE_PSPEED & operator=(const class SK_DE_PSPEED &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_PTRIPLE {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_PTRIPLE::Init()
  public int SK_DE_PTRIPLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_PTRIPLE::GetMaxLevel()
  public void SK_DE_PTRIPLE(const class SK_DE_PTRIPLE &)
  public void SK_DE_PTRIPLE::SK_DE_PTRIPLE()
  public void ~SK_DE_PTRIPLE()
  public class SK_DE_PTRIPLE & operator=(const class SK_DE_PTRIPLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_PUNISH {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_PUNISH::Init()
  public int SK_DE_PUNISH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_DE_PUNISH(const class SK_DE_PUNISH &)
  public void SK_DE_PUNISH::SK_DE_PUNISH()
  public void ~SK_DE_PUNISH()
  public class SK_DE_PUNISH & operator=(const class SK_DE_PUNISH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_RANKEDGRADIUS {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_RANKEDGRADIUS::Init()
  public int SK_DE_RANKEDGRADIUS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_RANKEDGRADIUS::GetMaxLevel()
  public short SK_DE_RANKEDGRADIUS::GetSPCost(short)
  public short SK_DE_RANKEDGRADIUS::GetPreDelayTime(short)
  public void SK_DE_RANKEDGRADIUS(const class SK_DE_RANKEDGRADIUS &)
  public void SK_DE_RANKEDGRADIUS::SK_DE_RANKEDGRADIUS()
  public void ~SK_DE_RANKEDGRADIUS()
  public class SK_DE_RANKEDGRADIUS & operator=(const class SK_DE_RANKEDGRADIUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_RANKEDKNIFE {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_RANKEDKNIFE::Init()
  public int SK_DE_RANKEDKNIFE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_RANKEDKNIFE::GetMaxLevel()
  public short SK_DE_RANKEDKNIFE::GetSPCost(short)
  public short SK_DE_RANKEDKNIFE::GetPreDelayTime(short)
  public void SK_DE_RANKEDKNIFE(const class SK_DE_RANKEDKNIFE &)
  public void SK_DE_RANKEDKNIFE::SK_DE_RANKEDKNIFE()
  public void ~SK_DE_RANKEDKNIFE()
  public class SK_DE_RANKEDKNIFE & operator=(const class SK_DE_RANKEDKNIFE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_RANKING {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_RANKING::Init()
  public int SK_DE_RANKING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_RANKING::GetMaxLevel()
  public void SK_DE_RANKING(const class SK_DE_RANKING &)
  public void SK_DE_RANKING::SK_DE_RANKING()
  public void ~SK_DE_RANKING()
  public class SK_DE_RANKING & operator=(const class SK_DE_RANKING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_REBIRTH {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_REBIRTH::Init()
  public int SK_DE_REBIRTH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_REBIRTH::GetMaxLevel()
  public void SK_DE_REBIRTH(const class SK_DE_REBIRTH &)
  public void SK_DE_REBIRTH::SK_DE_REBIRTH()
  public void ~SK_DE_REBIRTH()
  public class SK_DE_REBIRTH & operator=(const class SK_DE_REBIRTH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_RESET {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_RESET::Init()
  public int SK_DE_RESET::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_RESET::GetMaxLevel()
  public short SK_DE_RESET::GetSPCost(short)
  public short SK_DE_RESET::GetPreDelayTime(short)
  public void SK_DE_RESET(const class SK_DE_RESET &)
  public void SK_DE_RESET::SK_DE_RESET()
  public void ~SK_DE_RESET()
  public class SK_DE_RESET & operator=(const class SK_DE_RESET &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_SLASH {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_SLASH::Init()
  public int SK_DE_SLASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_SLASH::GetMaxLevel()
  public short SK_DE_SLASH::GetSPCost(short)
  public void SK_DE_SLASH(const class SK_DE_SLASH &)
  public void SK_DE_SLASH::SK_DE_SLASH()
  public void ~SK_DE_SLASH()
  public class SK_DE_SLASH & operator=(const class SK_DE_SLASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_TWINATTACK {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_TWINATTACK::Init()
  public int SK_DE_TWINATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_TWINATTACK::GetMaxLevel()
  public short SK_DE_TWINATTACK::GetSPCost(short)
  public short SK_DE_TWINATTACK::GetPreDelayTime(short)
  public void SK_DE_TWINATTACK(const class SK_DE_TWINATTACK &)
  public void SK_DE_TWINATTACK::SK_DE_TWINATTACK()
  public void ~SK_DE_TWINATTACK()
  public class SK_DE_TWINATTACK & operator=(const class SK_DE_TWINATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_WARNING {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_WARNING::Init()
  public int SK_DE_WARNING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_WARNING::GetMaxLevel()
  public short SK_DE_WARNING::GetSPCost(short)
  public short SK_DE_WARNING::GetPreDelayTime(short)
  public void SK_DE_WARNING(const class SK_DE_WARNING &)
  public void SK_DE_WARNING::SK_DE_WARNING()
  public void ~SK_DE_WARNING()
  public class SK_DE_WARNING & operator=(const class SK_DE_WARNING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_WATERATTACK {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_WATERATTACK::Init()
  public int SK_DE_WATERATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_WATERATTACK::GetMaxLevel()
  public short SK_DE_WATERATTACK::GetSPCost(short)
  public short SK_DE_WATERATTACK::GetPreDelayTime(short)
  public void SK_DE_WATERATTACK(const class SK_DE_WATERATTACK &)
  public void SK_DE_WATERATTACK::SK_DE_WATERATTACK()
  public void ~SK_DE_WATERATTACK()
  public class SK_DE_WATERATTACK & operator=(const class SK_DE_WATERATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_WAVE {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_WAVE::Init()
  public int SK_DE_WAVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_WAVE::GetMaxLevel()
  public short SK_DE_WAVE::GetSPCost(short)
  public void SK_DE_WAVE(const class SK_DE_WAVE &)
  public void SK_DE_WAVE::SK_DE_WAVE()
  public void ~SK_DE_WAVE()
  public class SK_DE_WAVE & operator=(const class SK_DE_WAVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_DE_WINDATTACK {
  SK_DEATHKNIGHT, offset = 0x0

  public void SK_DE_WINDATTACK::Init()
  public int SK_DE_WINDATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_DE_WINDATTACK::GetMaxLevel()
  public short SK_DE_WINDATTACK::GetPreDelayTime(short)
  public short SK_DE_WINDATTACK::GetSPCost(short)
  public void SK_DE_WINDATTACK(const class SK_DE_WINDATTACK &)
  public void SK_DE_WINDATTACK::SK_DE_WINDATTACK()
  public void ~SK_DE_WINDATTACK()
  public class SK_DE_WINDATTACK & operator=(const class SK_DE_WINDATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_AQUAPLAY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_AQUAPLAY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_AQUAPLAY::GetEFSTLifeTM(const int)
  public int SK_EL_AQUAPLAY::GetCostSPAmount(const int)
  public void SK_EL_AQUAPLAY(const class SK_EL_AQUAPLAY &)
  public void SK_EL_AQUAPLAY()
  public void ~SK_EL_AQUAPLAY()
  public class SK_EL_AQUAPLAY & operator=(const class SK_EL_AQUAPLAY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_BLAST {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_BLAST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_BLAST::GetEFSTLifeTM(const int)
  public int SK_EL_BLAST::GetCostSPAmount(const int)
  public void SK_EL_BLAST(const class SK_EL_BLAST &)
  public void SK_EL_BLAST()
  public void ~SK_EL_BLAST()
  public class SK_EL_BLAST & operator=(const class SK_EL_BLAST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_CHILLY_AIR {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_CHILLY_AIR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_CHILLY_AIR::GetEFSTLifeTM(const int)
  public int SK_EL_CHILLY_AIR::GetCostSPAmount(const int)
  public void SK_EL_CHILLY_AIR(const class SK_EL_CHILLY_AIR &)
  public void SK_EL_CHILLY_AIR()
  public void ~SK_EL_CHILLY_AIR()
  public class SK_EL_CHILLY_AIR & operator=(const class SK_EL_CHILLY_AIR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_CIRCLE_OF_FIRE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_CIRCLE_OF_FIRE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_CIRCLE_OF_FIRE::GetEFSTLifeTM(const int)
  public int SK_EL_CIRCLE_OF_FIRE::GetCostSPAmount(const int)
  public void SK_EL_CIRCLE_OF_FIRE(const class SK_EL_CIRCLE_OF_FIRE &)
  public void SK_EL_CIRCLE_OF_FIRE()
  public void ~SK_EL_CIRCLE_OF_FIRE()
  public class SK_EL_CIRCLE_OF_FIRE & operator=(const class SK_EL_CIRCLE_OF_FIRE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_COOLER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_COOLER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_COOLER::GetEFSTLifeTM(const int)
  public int SK_EL_COOLER::GetCostSPAmount(const int)
  public void SK_EL_COOLER(const class SK_EL_COOLER &)
  public void SK_EL_COOLER()
  public void ~SK_EL_COOLER()
  public class SK_EL_COOLER & operator=(const class SK_EL_COOLER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_CURSED_SOIL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_CURSED_SOIL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_CURSED_SOIL::GetEFSTLifeTM(const int)
  public int SK_EL_CURSED_SOIL::GetCostSPAmount(const int)
  public void SK_EL_CURSED_SOIL(const class SK_EL_CURSED_SOIL &)
  public void SK_EL_CURSED_SOIL()
  public void ~SK_EL_CURSED_SOIL()
  public class SK_EL_CURSED_SOIL & operator=(const class SK_EL_CURSED_SOIL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_FIRE_ARROW {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_FIRE_ARROW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_FIRE_ARROW(const class SK_EL_FIRE_ARROW &)
  public void SK_EL_FIRE_ARROW()
  public void ~SK_EL_FIRE_ARROW()
  public class SK_EL_FIRE_ARROW & operator=(const class SK_EL_FIRE_ARROW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_FIRE_BOMB {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_FIRE_BOMB::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_FIRE_BOMB(const class SK_EL_FIRE_BOMB &)
  public void SK_EL_FIRE_BOMB()
  public void ~SK_EL_FIRE_BOMB()
  public class SK_EL_FIRE_BOMB & operator=(const class SK_EL_FIRE_BOMB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_FIRE_BOMB_ATK {
  CSkillTypeInfo2, offset = 0x0

  public void SK_EL_FIRE_BOMB_ATK(const class SK_EL_FIRE_BOMB_ATK &)
  public void SK_EL_FIRE_BOMB_ATK()
  public void ~SK_EL_FIRE_BOMB_ATK()
  public class SK_EL_FIRE_BOMB_ATK & operator=(const class SK_EL_FIRE_BOMB_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_FIRE_CLOAK {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_FIRE_CLOAK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_FIRE_CLOAK::GetEFSTLifeTM(const int)
  public int SK_EL_FIRE_CLOAK::GetCostSPAmount(const int)
  public void SK_EL_FIRE_CLOAK(const class SK_EL_FIRE_CLOAK &)
  public void SK_EL_FIRE_CLOAK()
  public void ~SK_EL_FIRE_CLOAK()
  public class SK_EL_FIRE_CLOAK & operator=(const class SK_EL_FIRE_CLOAK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_FIRE_MANTLE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_FIRE_MANTLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int GetLifeTM(const int)
  public void SK_EL_FIRE_MANTLE(const class SK_EL_FIRE_MANTLE &)
  public void SK_EL_FIRE_MANTLE()
  public void ~SK_EL_FIRE_MANTLE()
  public class SK_EL_FIRE_MANTLE & operator=(const class SK_EL_FIRE_MANTLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_FIRE_WAVE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_FIRE_WAVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_FIRE_WAVE(const class SK_EL_FIRE_WAVE &)
  public void SK_EL_FIRE_WAVE()
  public void ~SK_EL_FIRE_WAVE()
  public class SK_EL_FIRE_WAVE & operator=(const class SK_EL_FIRE_WAVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_FIRE_WAVE_ATK {
  CSkillTypeInfo2, offset = 0x0

  public void SK_EL_FIRE_WAVE_ATK(const class SK_EL_FIRE_WAVE_ATK &)
  public void SK_EL_FIRE_WAVE_ATK()
  public void ~SK_EL_FIRE_WAVE_ATK()
  public class SK_EL_FIRE_WAVE_ATK & operator=(const class SK_EL_FIRE_WAVE_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_GUST {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_GUST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_GUST::GetEFSTLifeTM(const int)
  public int SK_EL_GUST::GetCostSPAmount(const int)
  public void SK_EL_GUST(const class SK_EL_GUST &)
  public void SK_EL_GUST()
  public void ~SK_EL_GUST()
  public class SK_EL_GUST & operator=(const class SK_EL_GUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_HEATER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_HEATER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_HEATER::GetEFSTLifeTM(const int)
  public int SK_EL_HEATER::GetCostSPAmount(const int)
  public void SK_EL_HEATER(const class SK_EL_HEATER &)
  public void SK_EL_HEATER()
  public void ~SK_EL_HEATER()
  public class SK_EL_HEATER & operator=(const class SK_EL_HEATER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_HURRICANE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_HURRICANE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_HURRICANE(const class SK_EL_HURRICANE &)
  public void SK_EL_HURRICANE()
  public void ~SK_EL_HURRICANE()
  public class SK_EL_HURRICANE & operator=(const class SK_EL_HURRICANE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_HURRICANE_ATK {
  CSkillTypeInfo2, offset = 0x0

  public void SK_EL_HURRICANE_ATK(const class SK_EL_HURRICANE_ATK &)
  public void SK_EL_HURRICANE_ATK()
  public void ~SK_EL_HURRICANE_ATK()
  public class SK_EL_HURRICANE_ATK & operator=(const class SK_EL_HURRICANE_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_ICE_NEEDLE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_ICE_NEEDLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_ICE_NEEDLE(const class SK_EL_ICE_NEEDLE &)
  public void SK_EL_ICE_NEEDLE()
  public void ~SK_EL_ICE_NEEDLE()
  public class SK_EL_ICE_NEEDLE & operator=(const class SK_EL_ICE_NEEDLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_PETROLOGY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_PETROLOGY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_PETROLOGY::GetEFSTLifeTM(const int)
  public int SK_EL_PETROLOGY::GetCostSPAmount(const int)
  public void SK_EL_PETROLOGY(const class SK_EL_PETROLOGY &)
  public void SK_EL_PETROLOGY()
  public void ~SK_EL_PETROLOGY()
  public class SK_EL_PETROLOGY & operator=(const class SK_EL_PETROLOGY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_POWER_OF_GAIA {
  CSkillTypeInfo2, offset = 0x0

  public void SK_EL_POWER_OF_GAIA::Init()
  public int SK_EL_POWER_OF_GAIA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_POWER_OF_GAIA::GetEFSTLifeTM(const int)
  public void SK_EL_POWER_OF_GAIA(const class SK_EL_POWER_OF_GAIA &)
  public void SK_EL_POWER_OF_GAIA()
  public void ~SK_EL_POWER_OF_GAIA()
  public class SK_EL_POWER_OF_GAIA & operator=(const class SK_EL_POWER_OF_GAIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_PYROTECHNIC {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_PYROTECHNIC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_PYROTECHNIC::GetEFSTLifeTM(const int)
  public int SK_EL_PYROTECHNIC::GetCostSPAmount(const int)
  public void SK_EL_PYROTECHNIC(const class SK_EL_PYROTECHNIC &)
  public void SK_EL_PYROTECHNIC()
  public void ~SK_EL_PYROTECHNIC()
  public class SK_EL_PYROTECHNIC & operator=(const class SK_EL_PYROTECHNIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_ROCK_CRUSHER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_ROCK_CRUSHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_ROCK_CRUSHER(const class SK_EL_ROCK_CRUSHER &)
  public void SK_EL_ROCK_CRUSHER()
  public void ~SK_EL_ROCK_CRUSHER()
  public class SK_EL_ROCK_CRUSHER & operator=(const class SK_EL_ROCK_CRUSHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_ROCK_CRUSHER_ATK {
  CSkillTypeInfo2, offset = 0x0

  public void SK_EL_ROCK_CRUSHER_ATK(const class SK_EL_ROCK_CRUSHER_ATK &)
  public void SK_EL_ROCK_CRUSHER_ATK()
  public void ~SK_EL_ROCK_CRUSHER_ATK()
  public class SK_EL_ROCK_CRUSHER_ATK & operator=(const class SK_EL_ROCK_CRUSHER_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_SOLID_SKIN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_SOLID_SKIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_SOLID_SKIN::GetEFSTLifeTM(const int)
  public int SK_EL_SOLID_SKIN::GetCostSPAmount(const int)
  public void SK_EL_SOLID_SKIN(const class SK_EL_SOLID_SKIN &)
  public void SK_EL_SOLID_SKIN()
  public void ~SK_EL_SOLID_SKIN()
  public class SK_EL_SOLID_SKIN & operator=(const class SK_EL_SOLID_SKIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_STONE_HAMMER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_STONE_HAMMER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_STONE_HAMMER(const class SK_EL_STONE_HAMMER &)
  public void SK_EL_STONE_HAMMER()
  public void ~SK_EL_STONE_HAMMER()
  public class SK_EL_STONE_HAMMER & operator=(const class SK_EL_STONE_HAMMER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_STONE_RAIN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_STONE_RAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_STONE_RAIN(const class SK_EL_STONE_RAIN &)
  public void SK_EL_STONE_RAIN()
  public void ~SK_EL_STONE_RAIN()
  public class SK_EL_STONE_RAIN & operator=(const class SK_EL_STONE_RAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_STONE_SHIELD {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_STONE_SHIELD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_STONE_SHIELD::GetEFSTLifeTM(const int)
  public int SK_EL_STONE_SHIELD::GetCostSPAmount(const int)
  public void SK_EL_STONE_SHIELD(const class SK_EL_STONE_SHIELD &)
  public void SK_EL_STONE_SHIELD()
  public void ~SK_EL_STONE_SHIELD()
  public class SK_EL_STONE_SHIELD & operator=(const class SK_EL_STONE_SHIELD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_TIDAL_WEAPON {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_TIDAL_WEAPON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_TIDAL_WEAPON(const class SK_EL_TIDAL_WEAPON &)
  public void SK_EL_TIDAL_WEAPON()
  public void ~SK_EL_TIDAL_WEAPON()
  public class SK_EL_TIDAL_WEAPON & operator=(const class SK_EL_TIDAL_WEAPON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_TROPIC {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_TROPIC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_TROPIC::GetEFSTLifeTM(const int)
  public int SK_EL_TROPIC::GetCostSPAmount(const int)
  public void SK_EL_TROPIC(const class SK_EL_TROPIC &)
  public void SK_EL_TROPIC()
  public void ~SK_EL_TROPIC()
  public class SK_EL_TROPIC & operator=(const class SK_EL_TROPIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_TYPOON_MIS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_TYPOON_MIS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_TYPOON_MIS(const class SK_EL_TYPOON_MIS &)
  public void SK_EL_TYPOON_MIS()
  public void ~SK_EL_TYPOON_MIS()
  public class SK_EL_TYPOON_MIS & operator=(const class SK_EL_TYPOON_MIS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_TYPOON_MIS_ATK {
  CSkillTypeInfo2, offset = 0x0

  public void SK_EL_TYPOON_MIS_ATK(const class SK_EL_TYPOON_MIS_ATK &)
  public void SK_EL_TYPOON_MIS_ATK()
  public void ~SK_EL_TYPOON_MIS_ATK()
  public class SK_EL_TYPOON_MIS_ATK & operator=(const class SK_EL_TYPOON_MIS_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_UPHEAVAL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_UPHEAVAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_UPHEAVAL::GetEFSTLifeTM(const int)
  public int SK_EL_UPHEAVAL::GetCostSPAmount(const int)
  public void SK_EL_UPHEAVAL(const class SK_EL_UPHEAVAL &)
  public void SK_EL_UPHEAVAL()
  public void ~SK_EL_UPHEAVAL()
  public class SK_EL_UPHEAVAL & operator=(const class SK_EL_UPHEAVAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_WATER_BARRIER {
  CSkillTypeInfo2, offset = 0x0

  public void SK_EL_WATER_BARRIER::Init()
  public int SK_EL_WATER_BARRIER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_WATER_BARRIER::GetLifeTM(const int)
  public void SK_EL_WATER_BARRIER(const class SK_EL_WATER_BARRIER &)
  public void SK_EL_WATER_BARRIER()
  public void ~SK_EL_WATER_BARRIER()
  public class SK_EL_WATER_BARRIER & operator=(const class SK_EL_WATER_BARRIER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_WATER_DROP {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_WATER_DROP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_WATER_DROP::GetEFSTLifeTM(const int)
  public int SK_EL_WATER_DROP::GetCostSPAmount(const int)
  public void SK_EL_WATER_DROP(const class SK_EL_WATER_DROP &)
  public void SK_EL_WATER_DROP()
  public void ~SK_EL_WATER_DROP()
  public class SK_EL_WATER_DROP & operator=(const class SK_EL_WATER_DROP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_WATER_SCREEN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_WATER_SCREEN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_WATER_SCREEN::GetEFSTLifeTM(const int)
  public int SK_EL_WATER_SCREEN::GetCostSPAmount(const int)
  public void SK_EL_WATER_SCREEN(const class SK_EL_WATER_SCREEN &)
  public void SK_EL_WATER_SCREEN()
  public void ~SK_EL_WATER_SCREEN()
  public class SK_EL_WATER_SCREEN & operator=(const class SK_EL_WATER_SCREEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_WATER_SCREW {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_WATER_SCREW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_WATER_SCREW(const class SK_EL_WATER_SCREW &)
  public void SK_EL_WATER_SCREW()
  public void ~SK_EL_WATER_SCREW()
  public class SK_EL_WATER_SCREW & operator=(const class SK_EL_WATER_SCREW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_WATER_SCREW_ATK {
  CSkillTypeInfo2, offset = 0x0

  public void SK_EL_WATER_SCREW_ATK(const class SK_EL_WATER_SCREW_ATK &)
  public void SK_EL_WATER_SCREW_ATK()
  public void ~SK_EL_WATER_SCREW_ATK()
  public class SK_EL_WATER_SCREW_ATK & operator=(const class SK_EL_WATER_SCREW_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_WILD_STORM {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_WILD_STORM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_WILD_STORM::GetEFSTLifeTM(const int)
  public int SK_EL_WILD_STORM::GetCostSPAmount(const int)
  public void SK_EL_WILD_STORM(const class SK_EL_WILD_STORM &)
  public void SK_EL_WILD_STORM()
  public void ~SK_EL_WILD_STORM()
  public class SK_EL_WILD_STORM & operator=(const class SK_EL_WILD_STORM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_WIND_CURTAIN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_WIND_CURTAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_WIND_CURTAIN::GetEFSTLifeTM(const int)
  public int SK_EL_WIND_CURTAIN::GetCostSPAmount(const int)
  public void SK_EL_WIND_CURTAIN(const class SK_EL_WIND_CURTAIN &)
  public void SK_EL_WIND_CURTAIN()
  public void ~SK_EL_WIND_CURTAIN()
  public class SK_EL_WIND_CURTAIN & operator=(const class SK_EL_WIND_CURTAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_WIND_SLASH {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_WIND_SLASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_EL_WIND_SLASH(const class SK_EL_WIND_SLASH &)
  public void SK_EL_WIND_SLASH()
  public void ~SK_EL_WIND_SLASH()
  public class SK_EL_WIND_SLASH & operator=(const class SK_EL_WIND_SLASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_WIND_STEP {
  CSkillTypeInfo2, offset = 0x0

  public int SK_EL_WIND_STEP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_WIND_STEP::GetEFSTLifeTM(const int)
  public int SK_EL_WIND_STEP::GetCostSPAmount(const int)
  public void SK_EL_WIND_STEP(const class SK_EL_WIND_STEP &)
  public void SK_EL_WIND_STEP()
  public void ~SK_EL_WIND_STEP()
  public class SK_EL_WIND_STEP & operator=(const class SK_EL_WIND_STEP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_EL_ZEPHYR {
  CSkillTypeInfo2, offset = 0x0

  public void SK_EL_ZEPHYR::Init()
  public int SK_EL_ZEPHYR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_EL_ZEPHYR::GetLifeTM(const int)
  public void SK_EL_ZEPHYR(const class SK_EL_ZEPHYR &)
  public void SK_EL_ZEPHYR()
  public void ~SK_EL_ZEPHYR()
  public class SK_EL_ZEPHYR & operator=(const class SK_EL_ZEPHYR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GANGSI {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_GANGSI::GetMaxLevel()
  public int SK_GANGSI::IsAvailableJob(short)
  public short SK_GANGSI::GetSPCost(short)
  public short SK_GANGSI::GetPreDelayTime(short)
  public void SK_GANGSI(const class SK_GANGSI &)
  public void SK_GANGSI::SK_GANGSI()
  public void SK_GANGSI::~SK_GANGSI()
  public class SK_GANGSI & operator=(const class SK_GANGSI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_ANTIDOTE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_ANTIDOTE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_ANTIDOTE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_GC_ANTIDOTE(const class SK_GC_ANTIDOTE &)
  public void SK_GC_ANTIDOTE::SK_GC_ANTIDOTE()
  public void ~SK_GC_ANTIDOTE()
  public class SK_GC_ANTIDOTE & operator=(const class SK_GC_ANTIDOTE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_CLOAKINGEXCEED {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_CLOAKINGEXCEED::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_CLOAKINGEXCEED::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GC_CLOAKINGEXCEED::GetAddReduceSPamount(const int)
  public int SK_GC_CLOAKINGEXCEED::GetDEFCnt(const int)
  public int SK_GC_CLOAKINGEXCEED::GetMoveHastPercent(const int)
  public void SK_GC_CLOAKINGEXCEED(const class SK_GC_CLOAKINGEXCEED &)
  public void SK_GC_CLOAKINGEXCEED::SK_GC_CLOAKINGEXCEED()
  public void ~SK_GC_CLOAKINGEXCEED()
  public class SK_GC_CLOAKINGEXCEED & operator=(const class SK_GC_CLOAKINGEXCEED &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_COUNTERSLASH {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_COUNTERSLASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_COUNTERSLASH::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_GC_COUNTERSLASH(const class SK_GC_COUNTERSLASH &)
  public void SK_GC_COUNTERSLASH::SK_GC_COUNTERSLASH()
  public void ~SK_GC_COUNTERSLASH()
  public class SK_GC_COUNTERSLASH & operator=(const class SK_GC_COUNTERSLASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_CREATENEWPOISON {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_CREATENEWPOISON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_GC_CREATENEWPOISON(const class SK_GC_CREATENEWPOISON &)
  public void SK_GC_CREATENEWPOISON::SK_GC_CREATENEWPOISON()
  public void ~SK_GC_CREATENEWPOISON()
  public class SK_GC_CREATENEWPOISON & operator=(const class SK_GC_CREATENEWPOISON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_CROSSIMPACT {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_CROSSIMPACT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_GC_CROSSIMPACT(const class SK_GC_CROSSIMPACT &)
  public void SK_GC_CROSSIMPACT::SK_GC_CROSSIMPACT()
  public void ~SK_GC_CROSSIMPACT()
  public class SK_GC_CROSSIMPACT & operator=(const class SK_GC_CROSSIMPACT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_CROSSRIPPERSLASHER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_CROSSRIPPERSLASHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_CROSSRIPPERSLASHER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_GC_CROSSRIPPERSLASHER(const class SK_GC_CROSSRIPPERSLASHER &)
  public void SK_GC_CROSSRIPPERSLASHER::SK_GC_CROSSRIPPERSLASHER()
  public void ~SK_GC_CROSSRIPPERSLASHER()
  public class SK_GC_CROSSRIPPERSLASHER & operator=(const class SK_GC_CROSSRIPPERSLASHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_DARKILLUSION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_DARKILLUSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_DARKILLUSION::GetCROSSIMPACTgenerationPercent(const int)
  public int SK_GC_DARKILLUSION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_GC_DARKILLUSION(const class SK_GC_DARKILLUSION &)
  public void SK_GC_DARKILLUSION::SK_GC_DARKILLUSION()
  public void ~SK_GC_DARKILLUSION()
  public class SK_GC_DARKILLUSION & operator=(const class SK_GC_DARKILLUSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_HALLUCINATIONWALK {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_HALLUCINATIONWALK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_HALLUCINATIONWALK::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GC_HALLUCINATIONWALK::GetPlusAVOIDamount(const int)
  public int SK_GC_HALLUCINATIONWALK::GetImmuneMagicPercent(const int)
  public int SK_GC_HALLUCINATIONWALK::GetLifeTM(const int)
  public int SK_GC_HALLUCINATIONWALK::GetReduceHPpercent(const int)
  public void SK_GC_HALLUCINATIONWALK(const class SK_GC_HALLUCINATIONWALK &)
  public void SK_GC_HALLUCINATIONWALK::SK_GC_HALLUCINATIONWALK()
  public void ~SK_GC_HALLUCINATIONWALK()
  public class SK_GC_HALLUCINATIONWALK & operator=(const class SK_GC_HALLUCINATIONWALK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_PHANTOMMENACE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_PHANTOMMENACE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_GC_PHANTOMMENACE(const class SK_GC_PHANTOMMENACE &)
  public void SK_GC_PHANTOMMENACE::SK_GC_PHANTOMMENACE()
  public void ~SK_GC_PHANTOMMENACE()
  public class SK_GC_PHANTOMMENACE & operator=(const class SK_GC_PHANTOMMENACE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_POISONINGWEAPON {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_POISONINGWEAPON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_POISONINGWEAPON::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GC_POISONINGWEAPON::GetPoisonAppyPercent(const int)
  public int SK_GC_POISONINGWEAPON::GetPoisonLifeTM(const int)
  public void SK_GC_POISONINGWEAPON(const class SK_GC_POISONINGWEAPON &)
  public void SK_GC_POISONINGWEAPON::SK_GC_POISONINGWEAPON()
  public void ~SK_GC_POISONINGWEAPON()
  public class SK_GC_POISONINGWEAPON & operator=(const class SK_GC_POISONINGWEAPON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_POISONSMOKE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_POISONSMOKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_POISONSMOKE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GC_POISONSMOKE::GetEFSTLifeTM(const int)
  public void SK_GC_POISONSMOKE(const class SK_GC_POISONSMOKE &)
  public void SK_GC_POISONSMOKE::SK_GC_POISONSMOKE()
  public void ~SK_GC_POISONSMOKE()
  public class SK_GC_POISONSMOKE & operator=(const class SK_GC_POISONSMOKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_RESEARCHNEWPOISON {
  CSkillTypeInfo2, offset = 0x0

  public void SK_GC_RESEARCHNEWPOISON(const class SK_GC_RESEARCHNEWPOISON &)
  public void SK_GC_RESEARCHNEWPOISON::SK_GC_RESEARCHNEWPOISON()
  public void ~SK_GC_RESEARCHNEWPOISON()
  public class SK_GC_RESEARCHNEWPOISON & operator=(const class SK_GC_RESEARCHNEWPOISON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_ROLLINGCUTTER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_ROLLINGCUTTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_ROLLINGCUTTER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GC_ROLLINGCUTTER::GetApplyRadiusRange(const int)
  public void SK_GC_ROLLINGCUTTER(const class SK_GC_ROLLINGCUTTER &)
  public void SK_GC_ROLLINGCUTTER::SK_GC_ROLLINGCUTTER()
  public void ~SK_GC_ROLLINGCUTTER()
  public class SK_GC_ROLLINGCUTTER & operator=(const class SK_GC_ROLLINGCUTTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_VENOMIMPRESS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_VENOMIMPRESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_VENOMIMPRESS::GetEFSTLifeTM(const int)
  public int SK_GC_VENOMIMPRESS::GetPoisonResistPercent(const int)
  public void SK_GC_VENOMIMPRESS(const class SK_GC_VENOMIMPRESS &)
  public void SK_GC_VENOMIMPRESS::SK_GC_VENOMIMPRESS()
  public void ~SK_GC_VENOMIMPRESS()
  public class SK_GC_VENOMIMPRESS & operator=(const class SK_GC_VENOMIMPRESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_VENOMPRESSURE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_VENOMPRESSURE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_VENOMPRESSURE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GC_VENOMPRESSURE::GetPosionApplySuccessPercent(const int)
  public int SK_GC_VENOMPRESSURE::GetModifyHitSuccessPercent(const int)
  public void SK_GC_VENOMPRESSURE(const class SK_GC_VENOMPRESSURE &)
  public void SK_GC_VENOMPRESSURE::SK_GC_VENOMPRESSURE()
  public void ~SK_GC_VENOMPRESSURE()
  public class SK_GC_VENOMPRESSURE & operator=(const class SK_GC_VENOMPRESSURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_WEAPONBLOCKING {
  CSkillTypeInfo2, offset = 0x0

    public int SK_GC_WEAPONBLOCKING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_WEAPONBLOCKING::GetEFSTLifeTM(const int)
  public int SK_GC_WEAPONBLOCKING::GetBlockingPercent(const int)
  public void SK_GC_WEAPONBLOCKING(const class SK_GC_WEAPONBLOCKING &)
  public void SK_GC_WEAPONBLOCKING::SK_GC_WEAPONBLOCKING()
  public void ~SK_GC_WEAPONBLOCKING()
  public class SK_GC_WEAPONBLOCKING & operator=(const class SK_GC_WEAPONBLOCKING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GC_WEAPONCRUSH {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GC_WEAPONCRUSH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GC_WEAPONCRUSH::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_GC_WEAPONCRUSH(const class SK_GC_WEAPONCRUSH &)
  public void SK_GC_WEAPONCRUSH::SK_GC_WEAPONCRUSH()
  public void ~SK_GC_WEAPONCRUSH()
  public class SK_GC_WEAPONCRUSH & operator=(const class SK_GC_WEAPONCRUSH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_APPROVAL {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_APPROVAL::Init()
  public int SK_GD_APPROVAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_APPROVAL::GetMaxLevel()
  public int SK_GD_APPROVAL::IsAvailableJob(short)
  public void SK_GD_APPROVAL(const class SK_GD_APPROVAL &)
  public void SK_GD_APPROVAL()
  public void ~SK_GD_APPROVAL()
  public class SK_GD_APPROVAL & operator=(const class SK_GD_APPROVAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_BATTLEORDER {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_BATTLEORDER::Init()
  public int SK_GD_BATTLEORDER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_BATTLEORDER::GetMaxLevel()
  public int SK_GD_BATTLEORDER::IsAvailableJob(short)
  public void SK_GD_BATTLEORDER(const class SK_GD_BATTLEORDER &)
  public void SK_GD_BATTLEORDER()
  public void ~SK_GD_BATTLEORDER()
  public class SK_GD_BATTLEORDER & operator=(const class SK_GD_BATTLEORDER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_DEVELOPMENT {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_DEVELOPMENT::Init()
  public short SK_GD_DEVELOPMENT::GetMaxLevel()
  public int SK_GD_DEVELOPMENT::IsAvailableJob(short)
  public void SK_GD_DEVELOPMENT(const class SK_GD_DEVELOPMENT &)
  public void SK_GD_DEVELOPMENT()
  public void ~SK_GD_DEVELOPMENT()
  public class SK_GD_DEVELOPMENT & operator=(const class SK_GD_DEVELOPMENT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_EMERGENCYCALL {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_EMERGENCYCALL::Init()
  public int SK_GD_EMERGENCYCALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_EMERGENCYCALL::GetMaxLevel()
  public int SK_GD_EMERGENCYCALL::IsAvailableJob(short)
  public short SK_GD_EMERGENCYCALL::GetPreDelayTime(short)
  public void SK_GD_EMERGENCYCALL(const class SK_GD_EMERGENCYCALL &)
  public void SK_GD_EMERGENCYCALL()
  public void ~SK_GD_EMERGENCYCALL()
  public class SK_GD_EMERGENCYCALL & operator=(const class SK_GD_EMERGENCYCALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_EXTENSION {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_EXTENSION::Init()
  public int SK_GD_EXTENSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_EXTENSION::GetMaxLevel()
  public int SK_GD_EXTENSION::IsAvailableJob(short)
  public void SK_GD_EXTENSION(const class SK_GD_EXTENSION &)
  public void SK_GD_EXTENSION()
  public void ~SK_GD_EXTENSION()
  public class SK_GD_EXTENSION & operator=(const class SK_GD_EXTENSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_GLORYWOUNDS {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_GLORYWOUNDS::Init()
  public int SK_GD_GLORYWOUNDS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_GLORYWOUNDS::GetMaxLevel()
  public int SK_GD_GLORYWOUNDS::IsAvailableJob(short)
  public void SK_GD_GLORYWOUNDS(const class SK_GD_GLORYWOUNDS &)
  public void SK_GD_GLORYWOUNDS()
  public void ~SK_GD_GLORYWOUNDS()
  public class SK_GD_GLORYWOUNDS & operator=(const class SK_GD_GLORYWOUNDS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_GUARDRESEARCH {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_GUARDRESEARCH::Init()
  public int SK_GD_GUARDRESEARCH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_GUARDRESEARCH::GetMaxLevel()
  public int SK_GD_GUARDRESEARCH::IsAvailableJob(short)
  public void SK_GD_GUARDRESEARCH(const class SK_GD_GUARDRESEARCH &)
  public void SK_GD_GUARDRESEARCH()
  public void ~SK_GD_GUARDRESEARCH()
  public class SK_GD_GUARDRESEARCH & operator=(const class SK_GD_GUARDRESEARCH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_GUARDUP {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_GUARDUP::Init()
  public int SK_GD_GUARDUP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_GUARDUP::GetMaxLevel()
  public int SK_GD_GUARDUP::IsAvailableJob(short)
  public void SK_GD_GUARDUP(const class SK_GD_GUARDUP &)
  public void SK_GD_GUARDUP()
  public void ~SK_GD_GUARDUP()
  public class SK_GD_GUARDUP & operator=(const class SK_GD_GUARDUP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_HAWKEYES {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_HAWKEYES::Init()
  public int SK_GD_HAWKEYES::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_HAWKEYES::GetMaxLevel()
  public int SK_GD_HAWKEYES::IsAvailableJob(short)
  public void SK_GD_HAWKEYES(const class SK_GD_HAWKEYES &)
  public void SK_GD_HAWKEYES()
  public void ~SK_GD_HAWKEYES()
  public class SK_GD_HAWKEYES & operator=(const class SK_GD_HAWKEYES &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_ITEMEMERGENCYCALL {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_ITEMEMERGENCYCALL::Init()
  public int SK_GD_ITEMEMERGENCYCALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_ITEMEMERGENCYCALL::GetMaxLevel()
  public int SK_GD_ITEMEMERGENCYCALL::IsAvailableJob(short)
  public void SK_GD_ITEMEMERGENCYCALL(const class SK_GD_ITEMEMERGENCYCALL &)
  public void SK_GD_ITEMEMERGENCYCALL()
  public void ~SK_GD_ITEMEMERGENCYCALL()
  public class SK_GD_ITEMEMERGENCYCALL & operator=(const class SK_GD_ITEMEMERGENCYCALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_KAFRACONTRACT {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_KAFRACONTRACT::Init()
  public int SK_GD_KAFRACONTRACT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_KAFRACONTRACT::GetMaxLevel()
  public int SK_GD_KAFRACONTRACT::IsAvailableJob(short)
  public void SK_GD_KAFRACONTRACT(const class SK_GD_KAFRACONTRACT &)
  public void SK_GD_KAFRACONTRACT()
  public void ~SK_GD_KAFRACONTRACT()
  public class SK_GD_KAFRACONTRACT & operator=(const class SK_GD_KAFRACONTRACT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_LEADERSHIP {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_LEADERSHIP::Init()
  public int SK_GD_LEADERSHIP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_LEADERSHIP::GetMaxLevel()
  public int SK_GD_LEADERSHIP::IsAvailableJob(short)
  public void SK_GD_LEADERSHIP(const class SK_GD_LEADERSHIP &)
  public void SK_GD_LEADERSHIP()
  public void ~SK_GD_LEADERSHIP()
  public class SK_GD_LEADERSHIP & operator=(const class SK_GD_LEADERSHIP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_REGENERATION {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_REGENERATION::Init()
  public int SK_GD_REGENERATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_REGENERATION::GetMaxLevel()
  public int SK_GD_REGENERATION::IsAvailableJob(short)
  public void SK_GD_REGENERATION(const class SK_GD_REGENERATION &)
  public void SK_GD_REGENERATION()
  public void ~SK_GD_REGENERATION()
  public class SK_GD_REGENERATION & operator=(const class SK_GD_REGENERATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_RESTORE {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_RESTORE::Init()
  public int SK_GD_RESTORE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_RESTORE::GetMaxLevel()
  public int SK_GD_RESTORE::IsAvailableJob(short)
  public short SK_GD_RESTORE::GetPreDelayTime(short)
  public void SK_GD_RESTORE(const class SK_GD_RESTORE &)
  public void SK_GD_RESTORE()
  public void ~SK_GD_RESTORE()
  public class SK_GD_RESTORE & operator=(const class SK_GD_RESTORE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GD_SOULCOLD {
  CSkillTypeInfo, offset = 0x0

  public void SK_GD_SOULCOLD::Init()
  public int SK_GD_SOULCOLD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GD_SOULCOLD::GetMaxLevel()
  public int SK_GD_SOULCOLD::IsAvailableJob(short)
  public void SK_GD_SOULCOLD(const class SK_GD_SOULCOLD &)
  public void SK_GD_SOULCOLD()
  public void ~SK_GD_SOULCOLD()
  public class SK_GD_SOULCOLD & operator=(const class SK_GD_SOULCOLD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GM_SANDMAN {
  CSkillTypeInfo, offset = 0x0

  public void SK_GM_SANDMAN::Init()
  public int SK_GM_SANDMAN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GM_SANDMAN::GetMaxLevel()
  public short SK_GM_SANDMAN::GetSPCost(short)
  public void SK_GM_SANDMAN(const class SK_GM_SANDMAN &)
  public void SK_GM_SANDMAN()
  public void ~SK_GM_SANDMAN()
  public class SK_GM_SANDMAN & operator=(const class SK_GM_SANDMAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_BLOOD_SUCKER {
  CSkillTypeInfo2, offset = 0x0

    public int SK_GN_BLOOD_SUCKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_BLOOD_SUCKER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GN_BLOOD_SUCKER::GetLifeTM(const int)
  public int SK_GN_BLOOD_SUCKER::GetBloodSuckerDamage(const int)
  public int SK_GN_BLOOD_SUCKER::GetBloodSuckerPercent(const int)
  public void SK_GN_BLOOD_SUCKER(const class SK_GN_BLOOD_SUCKER &)
  public void SK_GN_BLOOD_SUCKER::SK_GN_BLOOD_SUCKER()
  public void ~SK_GN_BLOOD_SUCKER()
  public class SK_GN_BLOOD_SUCKER & operator=(const class SK_GN_BLOOD_SUCKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_CARTBOOST {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_CARTBOOST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_CARTBOOST::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GN_CARTBOOST::GetMoveHastPercent(const int)
  public int SK_GN_CARTBOOST::GetPlusATKAmount(const int)
  public int SK_GN_CARTBOOST::GetLifeTM(const int)
  public void SK_GN_CARTBOOST(const class SK_GN_CARTBOOST &)
  public void SK_GN_CARTBOOST::SK_GN_CARTBOOST()
  public void ~SK_GN_CARTBOOST()
  public class SK_GN_CARTBOOST & operator=(const class SK_GN_CARTBOOST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_CARTCANNON {
  CSkillTypeInfo2, offset = 0x0

  public void SK_GN_CARTCANNON::Init()
  public int SK_GN_CARTCANNON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_CARTCANNON::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GN_CARTCANNON::GetApplyRadiusRange(const int)
  public void SK_GN_CARTCANNON(const class SK_GN_CARTCANNON &)
  public void SK_GN_CARTCANNON::SK_GN_CARTCANNON()
  public void ~SK_GN_CARTCANNON()
  public class SK_GN_CARTCANNON & operator=(const class SK_GN_CARTCANNON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_CART_TORNADO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_CART_TORNADO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_CART_TORNADO::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GN_CART_TORNADO::GetKnockBackRange(const int)
  public int SK_GN_CART_TORNADO::GetApplyRadiusRange(const int)
  public void SK_GN_CART_TORNADO(const class SK_GN_CART_TORNADO &)
  public void SK_GN_CART_TORNADO::SK_GN_CART_TORNADO()
  public void ~SK_GN_CART_TORNADO()
  public class SK_GN_CART_TORNADO & operator=(const class SK_GN_CART_TORNADO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_CHANGEMATERIAL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_CHANGEMATERIAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_CHANGEMATERIAL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_GN_CHANGEMATERIAL(const class SK_GN_CHANGEMATERIAL &)
  public void SK_GN_CHANGEMATERIAL::SK_GN_CHANGEMATERIAL()
  public void ~SK_GN_CHANGEMATERIAL()
  public class SK_GN_CHANGEMATERIAL & operator=(const class SK_GN_CHANGEMATERIAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_CRAZYWEED {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_CRAZYWEED::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_CRAZYWEED::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GN_CRAZYWEED::GetDropRadius(const int)
  public int SK_GN_CRAZYWEED::GetDropCnt(const int)
  public void SK_GN_CRAZYWEED(const class SK_GN_CRAZYWEED &)
  public void SK_GN_CRAZYWEED::SK_GN_CRAZYWEED()
  public void ~SK_GN_CRAZYWEED()
  public class SK_GN_CRAZYWEED & operator=(const class SK_GN_CRAZYWEED &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_CRAZYWEED_ATK {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_CRAZYWEED_ATK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_GN_CRAZYWEED_ATK(const class SK_GN_CRAZYWEED_ATK &)
  public void SK_GN_CRAZYWEED_ATK::SK_GN_CRAZYWEED_ATK()
  public void ~SK_GN_CRAZYWEED_ATK()
  public class SK_GN_CRAZYWEED_ATK & operator=(const class SK_GN_CRAZYWEED_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_DEMONIC_FIRE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_GN_DEMONIC_FIRE::Init()
  public int SK_GN_DEMONIC_FIRE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_DEMONIC_FIRE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public bool SK_GN_DEMONIC_FIRE::IsExistInSCREEN(class CCharacter *, const int)
  public int SK_GN_DEMONIC_FIRE::GetLifeTM(const int)
  public int SK_GN_DEMONIC_FIRE::Get2secondMATKpercent(const int)
  public int SK_GN_DEMONIC_FIRE::Get2secondBURNNINGpercent(const int)
  public void SK_GN_DEMONIC_FIRE(const class SK_GN_DEMONIC_FIRE &)
  public void SK_GN_DEMONIC_FIRE::SK_GN_DEMONIC_FIRE()
  public void ~SK_GN_DEMONIC_FIRE()
  public class SK_GN_DEMONIC_FIRE & operator=(const class SK_GN_DEMONIC_FIRE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_FIRE_EXPANSION {
  CSkillTypeInfo2, offset = 0x0

  public int GetConsumeItemID(const unsigned int)
  public int GetConsumeItemNum(const unsigned int)
      /* [0x0003:0x000099b0] */ static  struct SK_GN_FIRE_EXPANSION::NEEDITEM[0x5] m_NeedItem
  public int SK_GN_FIRE_EXPANSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_FIRE_EXPANSION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_GN_FIRE_EXPANSION(const class SK_GN_FIRE_EXPANSION &)
  public void SK_GN_FIRE_EXPANSION::SK_GN_FIRE_EXPANSION()
  public void ~SK_GN_FIRE_EXPANSION()
  public class SK_GN_FIRE_EXPANSION & operator=(const class SK_GN_FIRE_EXPANSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct SK_GN_FIRE_EXPANSION::NEEDITEM {
  /* this+0x0 */ int ConsumeItemID
  /* this+0x4 */ int ConsumeItemNum
}

class SK_GN_FIRE_EXPANSION_ACID {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_FIRE_EXPANSION_ACID::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_FIRE_EXPANSION_ACID::GetATKCnt(const int)
  public int SK_GN_FIRE_EXPANSION_ACID::GetDestructionItemPercent(const int)
  public void SK_GN_FIRE_EXPANSION_ACID(const class SK_GN_FIRE_EXPANSION_ACID &)
  public void SK_GN_FIRE_EXPANSION_ACID::SK_GN_FIRE_EXPANSION_ACID()
  public void ~SK_GN_FIRE_EXPANSION_ACID()
  public class SK_GN_FIRE_EXPANSION_ACID & operator=(const class SK_GN_FIRE_EXPANSION_ACID &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_FIRE_EXPANSION_SMOKE_POWDER {
  CSkillTypeInfo2, offset = 0x0

  public void SK_GN_FIRE_EXPANSION_SMOKE_POWDER::Init()
  public static int GetAtkedDamagePercent(const int)
  public void SK_GN_FIRE_EXPANSION_SMOKE_POWDER(const class SK_GN_FIRE_EXPANSION_SMOKE_POWDER &)
  public void SK_GN_FIRE_EXPANSION_SMOKE_POWDER::SK_GN_FIRE_EXPANSION_SMOKE_POWDER()
  public void ~SK_GN_FIRE_EXPANSION_SMOKE_POWDER()
  public class SK_GN_FIRE_EXPANSION_SMOKE_POWDER & operator=(const class SK_GN_FIRE_EXPANSION_SMOKE_POWDER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_FIRE_EXPANSION_TEAR_GAS {
  CSkillTypeInfo2, offset = 0x0

  public void SK_GN_FIRE_EXPANSION_TEAR_GAS::Init()
  public void SK_GN_FIRE_EXPANSION_TEAR_GAS(const class SK_GN_FIRE_EXPANSION_TEAR_GAS &)
  public void SK_GN_FIRE_EXPANSION_TEAR_GAS::SK_GN_FIRE_EXPANSION_TEAR_GAS()
  public void ~SK_GN_FIRE_EXPANSION_TEAR_GAS()
  public class SK_GN_FIRE_EXPANSION_TEAR_GAS & operator=(const class SK_GN_FIRE_EXPANSION_TEAR_GAS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_HELLS_PLANT {
  CSkillTypeInfo2, offset = 0x0

  public void SK_GN_HELLS_PLANT::Init()
  public int SK_GN_HELLS_PLANT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_HELLS_PLANT::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GN_HELLS_PLANT::GetLifeTM(const int)
  public int SK_GN_HELLS_PLANT::GetMaxInstallCnt(const int)
  public int SK_GN_HELLS_PLANT::GetBLOODINGpercent(const int)
  public int SK_GN_HELLS_PLANT::GetSTUNpercent(const int)
  public void SK_GN_HELLS_PLANT(const class SK_GN_HELLS_PLANT &)
  public void SK_GN_HELLS_PLANT::SK_GN_HELLS_PLANT()
  public void ~SK_GN_HELLS_PLANT()
  public class SK_GN_HELLS_PLANT & operator=(const class SK_GN_HELLS_PLANT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_HELLS_PLANT_ATK {
  CSkillTypeInfo2, offset = 0x0

  public void SK_GN_HELLS_PLANT_ATK::Init()
  public void SK_GN_HELLS_PLANT_ATK(const class SK_GN_HELLS_PLANT_ATK &)
  public void SK_GN_HELLS_PLANT_ATK::SK_GN_HELLS_PLANT_ATK()
  public void ~SK_GN_HELLS_PLANT_ATK()
  public class SK_GN_HELLS_PLANT_ATK & operator=(const class SK_GN_HELLS_PLANT_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_MAKEBOMB {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_MAKEBOMB::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_MAKEBOMB::GetMultiplyFactor(const int)
  public void SK_GN_MAKEBOMB(const class SK_GN_MAKEBOMB &)
  public void SK_GN_MAKEBOMB::SK_GN_MAKEBOMB()
  public void ~SK_GN_MAKEBOMB()
  public class SK_GN_MAKEBOMB & operator=(const class SK_GN_MAKEBOMB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_MANDRAGORA {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_MANDRAGORA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_MANDRAGORA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GN_MANDRAGORA::GetApplySuccessPercent(const int)
  public int SK_GN_MANDRAGORA::GetReduceINTAmount(const int)
  public int SK_GN_MANDRAGORA::GetReduceSPPercent(const int)
  public int SK_GN_MANDRAGORA::GetApplyRadiusRange(const int)
  public int SK_GN_MANDRAGORA::GetLifeTM(const int)
  public void SK_GN_MANDRAGORA(const class SK_GN_MANDRAGORA &)
  public void SK_GN_MANDRAGORA::SK_GN_MANDRAGORA()
  public void ~SK_GN_MANDRAGORA()
  public class SK_GN_MANDRAGORA & operator=(const class SK_GN_MANDRAGORA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_MIX_COOKING {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_MIX_COOKING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_MIX_COOKING::GetMultiplyFactor(const int)
  public void SK_GN_MIX_COOKING(const class SK_GN_MIX_COOKING &)
  public void SK_GN_MIX_COOKING::SK_GN_MIX_COOKING()
  public void ~SK_GN_MIX_COOKING()
  public class SK_GN_MIX_COOKING & operator=(const class SK_GN_MIX_COOKING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_REMODELING_CART {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_REMODELING_CART::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_REMODELING_CART::GetPlusHitSuccessValueAmountForCartSK(const int)
  public int SK_GN_REMODELING_CART::GetPlusCartMaxWeightAmount(const int)
  public void SK_GN_REMODELING_CART(const class SK_GN_REMODELING_CART &)
  public void SK_GN_REMODELING_CART::SK_GN_REMODELING_CART()
  public void ~SK_GN_REMODELING_CART()
  public class SK_GN_REMODELING_CART & operator=(const class SK_GN_REMODELING_CART &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_SLINGITEM {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_SLINGITEM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_SLINGITEM::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_GN_SLINGITEM(const class SK_GN_SLINGITEM &)
  public void SK_GN_SLINGITEM::SK_GN_SLINGITEM()
  public void ~SK_GN_SLINGITEM()
  public class SK_GN_SLINGITEM & operator=(const class SK_GN_SLINGITEM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_SLINGITEM_RANGEMELEEATK {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_SLINGITEM_RANGEMELEEATK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_GN_SLINGITEM_RANGEMELEEATK(const class SK_GN_SLINGITEM_RANGEMELEEATK &)
  public void SK_GN_SLINGITEM_RANGEMELEEATK::SK_GN_SLINGITEM_RANGEMELEEATK()
  public void ~SK_GN_SLINGITEM_RANGEMELEEATK()
  public class SK_GN_SLINGITEM_RANGEMELEEATK & operator=(const class SK_GN_SLINGITEM_RANGEMELEEATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_SPORE_EXPLOSION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_SPORE_EXPLOSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_SPORE_EXPLOSION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GN_SPORE_EXPLOSION::GetExplosionDelayTM(const int)
  public int SK_GN_SPORE_EXPLOSION::GetApplyRadius(const int)
  public void SK_GN_SPORE_EXPLOSION(const class SK_GN_SPORE_EXPLOSION &)
  public void SK_GN_SPORE_EXPLOSION::SK_GN_SPORE_EXPLOSION()
  public void ~SK_GN_SPORE_EXPLOSION()
  public class SK_GN_SPORE_EXPLOSION & operator=(const class SK_GN_SPORE_EXPLOSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_S_PHARMACY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_S_PHARMACY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_S_PHARMACY::GetProductCnt(const int)
  public int SK_GN_S_PHARMACY::GetStandardManufactureFactor(const int)
  public void SK_GN_S_PHARMACY(const class SK_GN_S_PHARMACY &)
  public void SK_GN_S_PHARMACY::SK_GN_S_PHARMACY()
  public void ~SK_GN_S_PHARMACY()
  public class SK_GN_S_PHARMACY & operator=(const class SK_GN_S_PHARMACY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_THORNS_TRAP {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_THORNS_TRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_THORNS_TRAP::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_GN_THORNS_TRAP::Init()
  public int SK_GN_THORNS_TRAP::GetLifeTM(const int)
  public int SK_GN_THORNS_TRAP::GetDamagePerSec(const int)
  public int SK_GN_THORNS_TRAP::GetMaxInstallCnt(const int)
  public void SK_GN_THORNS_TRAP(const class SK_GN_THORNS_TRAP &)
  public void SK_GN_THORNS_TRAP::SK_GN_THORNS_TRAP()
  public void ~SK_GN_THORNS_TRAP()
  public class SK_GN_THORNS_TRAP & operator=(const class SK_GN_THORNS_TRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_TRAINING_SWORD {
  CSkillTypeInfo2, offset = 0x0

  public int SK_GN_TRAINING_SWORD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_TRAINING_SWORD::GetPlusATKAmount(const int)
  public int SK_GN_TRAINING_SWORD::GetPlusHitSuccessValueAmount(const int)
  public void SK_GN_TRAINING_SWORD(const class SK_GN_TRAINING_SWORD &)
  public void SK_GN_TRAINING_SWORD::SK_GN_TRAINING_SWORD()
  public void ~SK_GN_TRAINING_SWORD()
  public class SK_GN_TRAINING_SWORD & operator=(const class SK_GN_TRAINING_SWORD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GN_WALLOFTHORN {
  CSkillTypeInfo2, offset = 0x0

      /* [0x0003:0x00009930] */ static  struct SK_GN_WALLOFTHORN::InstallOffsetPos[0x10] m_InstallOffsetPosTbl
  public static int GetInstallOffsetPosX(const unsigned int)
  public static int GetInstallOffsetPosY(const unsigned int)
  public static int GetInstallOffsetPosIdx(const int, const int)
  public int SK_GN_WALLOFTHORN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_GN_WALLOFTHORN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_GN_WALLOFTHORN::GetLifeTM(const int)
  public int SK_GN_WALLOFTHORN::GetObjHP(const int)
  public void SK_GN_WALLOFTHORN(const class SK_GN_WALLOFTHORN &)
  public void SK_GN_WALLOFTHORN::SK_GN_WALLOFTHORN()
  public void ~SK_GN_WALLOFTHORN()
  public class SK_GN_WALLOFTHORN & operator=(const class SK_GN_WALLOFTHORN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct SK_GN_WALLOFTHORN::InstallOffsetPos {
  /* this+0x0 */ int dx
  /* this+0x4 */ int dy
}

class SK_GS_ADJUSTMENT {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_ADJUSTMENT::Init()
  public int SK_GS_ADJUSTMENT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_ADJUSTMENT::GetMaxLevel()
  public short SK_GS_ADJUSTMENT::GetSPCost(short)
  public short SK_GS_ADJUSTMENT::GetPreDelayTime(short)
  public short SK_GS_ADJUSTMENT::GetPostDelayTM(short)
  public void SK_GS_ADJUSTMENT(const class SK_GS_ADJUSTMENT &)
  public void SK_GS_ADJUSTMENT::SK_GS_ADJUSTMENT()
  public void ~SK_GS_ADJUSTMENT()
  public class SK_GS_ADJUSTMENT & operator=(const class SK_GS_ADJUSTMENT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_BULLSEYE {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_BULLSEYE::Init()
  public int SK_GS_BULLSEYE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_BULLSEYE::GetMaxLevel()
  public short SK_GS_BULLSEYE::GetSPCost(short)
  public short SK_GS_BULLSEYE::GetPreDelayTime(short)
  public short SK_GS_BULLSEYE::GetPostDelayTM(short)
  public void SK_GS_BULLSEYE(const class SK_GS_BULLSEYE &)
  public void SK_GS_BULLSEYE::SK_GS_BULLSEYE()
  public void ~SK_GS_BULLSEYE()
  public class SK_GS_BULLSEYE & operator=(const class SK_GS_BULLSEYE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_CHAINACTION {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_CHAINACTION::Init()
  public int SK_GS_CHAINACTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_GS_CHAINACTION(const class SK_GS_CHAINACTION &)
  public void SK_GS_CHAINACTION::SK_GS_CHAINACTION()
  public void ~SK_GS_CHAINACTION()
  public class SK_GS_CHAINACTION & operator=(const class SK_GS_CHAINACTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_CRACKER {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_CRACKER::Init()
  public int SK_GS_CRACKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_CRACKER::GetMaxLevel()
  public short SK_GS_CRACKER::GetSPCost(short)
  public short SK_GS_CRACKER::GetPostDelayTM(short)
  public void SK_GS_CRACKER(const class SK_GS_CRACKER &)
  public void SK_GS_CRACKER::SK_GS_CRACKER()
  public void ~SK_GS_CRACKER()
  public class SK_GS_CRACKER & operator=(const class SK_GS_CRACKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_DESPERADO {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_DESPERADO::Init()
  public int SK_GS_DESPERADO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_DESPERADO::GetSPCost(short)
  public short SK_GS_DESPERADO::GetPostDelayTM(short)
  public void SK_GS_DESPERADO(const class SK_GS_DESPERADO &)
  public void SK_GS_DESPERADO::SK_GS_DESPERADO()
  public void ~SK_GS_DESPERADO()
  public class SK_GS_DESPERADO & operator=(const class SK_GS_DESPERADO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_DISARM {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_DISARM::Init()
  public int SK_GS_DISARM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_DISARM::GetMaxLevel()
  public short SK_GS_DISARM::GetSPCost(short)
  public short SK_GS_DISARM::GetPreDelayTime(short)
  public short SK_GS_DISARM::GetPostDelayTM(short)
  public void SK_GS_DISARM(const class SK_GS_DISARM &)
  public void SK_GS_DISARM::SK_GS_DISARM()
  public void ~SK_GS_DISARM()
  public class SK_GS_DISARM & operator=(const class SK_GS_DISARM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_DUST {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_DUST::Init()
  public int SK_GS_DUST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_DUST::GetSPCost(short)
  public short SK_GS_DUST::GetPreDelayTime(short)
  public short SK_GS_DUST::GetPostDelayTM(short)
  public void SK_GS_DUST(const class SK_GS_DUST &)
  public void SK_GS_DUST::SK_GS_DUST()
  public void ~SK_GS_DUST()
  public class SK_GS_DUST & operator=(const class SK_GS_DUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_FLING {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_FLING::Init()
  public int SK_GS_FLING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_FLING::GetMaxLevel()
  public short SK_GS_FLING::GetSPCost(short)
  public void SK_GS_FLING(const class SK_GS_FLING &)
  public void SK_GS_FLING::SK_GS_FLING()
  public void ~SK_GS_FLING()
  public class SK_GS_FLING & operator=(const class SK_GS_FLING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_FULLBUSTER {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_FULLBUSTER::Init()
  public int SK_GS_FULLBUSTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_FULLBUSTER::GetMaxLevel()
  public short SK_GS_FULLBUSTER::GetSPCost(short)
  public short SK_GS_FULLBUSTER::GetPreDelayTime(short)
  public short SK_GS_FULLBUSTER::GetPostDelayTM(short)
  public void SK_GS_FULLBUSTER(const class SK_GS_FULLBUSTER &)
  public void SK_GS_FULLBUSTER::SK_GS_FULLBUSTER()
  public void ~SK_GS_FULLBUSTER()
  public class SK_GS_FULLBUSTER & operator=(const class SK_GS_FULLBUSTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_GATLINGFEVER {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_GATLINGFEVER::Init()
  public int SK_GS_GATLINGFEVER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_GATLINGFEVER::GetSPCost(short)
  public short SK_GS_GATLINGFEVER::GetPreDelayTime(short)
  public short SK_GS_GATLINGFEVER::GetPostDelayTM(short)
  public void SK_GS_GATLINGFEVER(const class SK_GS_GATLINGFEVER &)
  public void SK_GS_GATLINGFEVER::SK_GS_GATLINGFEVER()
  public void ~SK_GS_GATLINGFEVER()
  public class SK_GS_GATLINGFEVER & operator=(const class SK_GS_GATLINGFEVER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_GLITTERING {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_GLITTERING::Init()
  public int SK_GS_GLITTERING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_GLITTERING::GetMaxLevel()
  public short SK_GS_GLITTERING::GetSPCost(short)
  public void SK_GS_GLITTERING(const class SK_GS_GLITTERING &)
  public void SK_GS_GLITTERING::SK_GS_GLITTERING()
  public void ~SK_GS_GLITTERING()
  public class SK_GS_GLITTERING & operator=(const class SK_GS_GLITTERING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_GROUNDDRIFT {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_GROUNDDRIFT::Init()
  public int SK_GS_GROUNDDRIFT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_GROUNDDRIFT::GetSPCost(short)
  public short SK_GS_GROUNDDRIFT::GetPreDelayTime(short)
  public short SK_GS_GROUNDDRIFT::GetPostDelayTM(short)
  public void SK_GS_GROUNDDRIFT(const class SK_GS_GROUNDDRIFT &)
  public void SK_GS_GROUNDDRIFT::SK_GS_GROUNDDRIFT()
  public void ~SK_GS_GROUNDDRIFT()
  public class SK_GS_GROUNDDRIFT & operator=(const class SK_GS_GROUNDDRIFT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_INCREASING {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_INCREASING::Init()
  public int SK_GS_INCREASING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_INCREASING::GetMaxLevel()
  public short SK_GS_INCREASING::GetSPCost(short)
  public short SK_GS_INCREASING::GetPostDelayTM(short)
  public void SK_GS_INCREASING(const class SK_GS_INCREASING &)
  public void SK_GS_INCREASING::SK_GS_INCREASING()
  public void ~SK_GS_INCREASING()
  public class SK_GS_INCREASING & operator=(const class SK_GS_INCREASING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_MADNESSCANCEL {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_MADNESSCANCEL::Init()
  public int SK_GS_MADNESSCANCEL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_MADNESSCANCEL::GetMaxLevel()
  public short SK_GS_MADNESSCANCEL::GetSPCost(short)
  public short SK_GS_MADNESSCANCEL::GetPreDelayTime(short)
  public short SK_GS_MADNESSCANCEL::GetPostDelayTM(short)
  public void SK_GS_MADNESSCANCEL(const class SK_GS_MADNESSCANCEL &)
  public void SK_GS_MADNESSCANCEL::SK_GS_MADNESSCANCEL()
  public void ~SK_GS_MADNESSCANCEL()
  public class SK_GS_MADNESSCANCEL & operator=(const class SK_GS_MADNESSCANCEL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_MAGICALBULLET {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_MAGICALBULLET::Init()
  public int SK_GS_MAGICALBULLET::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_MAGICALBULLET::GetMaxLevel()
  public short SK_GS_MAGICALBULLET::GetSPCost(short)
  public short SK_GS_MAGICALBULLET::GetPostDelayTM(short)
  public void SK_GS_MAGICALBULLET(const class SK_GS_MAGICALBULLET &)
  public void SK_GS_MAGICALBULLET::SK_GS_MAGICALBULLET()
  public void ~SK_GS_MAGICALBULLET()
  public class SK_GS_MAGICALBULLET & operator=(const class SK_GS_MAGICALBULLET &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_PIERCINGSHOT {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_PIERCINGSHOT::Init()
  public int SK_GS_PIERCINGSHOT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_PIERCINGSHOT::GetMaxLevel()
  public short SK_GS_PIERCINGSHOT::GetSPCost(short)
  public short SK_GS_PIERCINGSHOT::GetPreDelayTime(short)
  public short SK_GS_PIERCINGSHOT::GetPostDelayTM(short)
  public void SK_GS_PIERCINGSHOT(const class SK_GS_PIERCINGSHOT &)
  public void SK_GS_PIERCINGSHOT::SK_GS_PIERCINGSHOT()
  public void ~SK_GS_PIERCINGSHOT()
  public class SK_GS_PIERCINGSHOT & operator=(const class SK_GS_PIERCINGSHOT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_RAPIDSHOWER {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_RAPIDSHOWER::Init()
  public int SK_GS_RAPIDSHOWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_RAPIDSHOWER::GetSPCost(short)
  public short SK_GS_RAPIDSHOWER::GetPostDelayTM(short)
  public void SK_GS_RAPIDSHOWER(const class SK_GS_RAPIDSHOWER &)
  public void SK_GS_RAPIDSHOWER::SK_GS_RAPIDSHOWER()
  public void ~SK_GS_RAPIDSHOWER()
  public class SK_GS_RAPIDSHOWER & operator=(const class SK_GS_RAPIDSHOWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_SINGLEACTION {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_SINGLEACTION::Init()
  public int SK_GS_SINGLEACTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_GS_SINGLEACTION(const class SK_GS_SINGLEACTION &)
  public void SK_GS_SINGLEACTION::SK_GS_SINGLEACTION()
  public void ~SK_GS_SINGLEACTION()
  public class SK_GS_SINGLEACTION & operator=(const class SK_GS_SINGLEACTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_SNAKEEYE {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_SNAKEEYE::Init()
  public int SK_GS_SNAKEEYE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_GS_SNAKEEYE(const class SK_GS_SNAKEEYE &)
  public void SK_GS_SNAKEEYE::SK_GS_SNAKEEYE()
  public void ~SK_GS_SNAKEEYE()
  public class SK_GS_SNAKEEYE & operator=(const class SK_GS_SNAKEEYE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_SPREADATTACK {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_SPREADATTACK::Init()
  public int SK_GS_SPREADATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_SPREADATTACK::GetSPCost(short)
  public short SK_GS_SPREADATTACK::GetPreDelayTime(short)
  public short SK_GS_SPREADATTACK::GetPostDelayTM(short)
  public void SK_GS_SPREADATTACK(const class SK_GS_SPREADATTACK &)
  public void SK_GS_SPREADATTACK::SK_GS_SPREADATTACK()
  public void ~SK_GS_SPREADATTACK()
  public class SK_GS_SPREADATTACK & operator=(const class SK_GS_SPREADATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_TRACKING {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_TRACKING::Init()
  public int SK_GS_TRACKING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_TRACKING::GetSPCost(short)
  public short SK_GS_TRACKING::GetPreDelayTime(short)
  public short SK_GS_TRACKING::GetPostDelayTM(short)
  public void SK_GS_TRACKING(const class SK_GS_TRACKING &)
  public void SK_GS_TRACKING::SK_GS_TRACKING()
  public void ~SK_GS_TRACKING()
  public class SK_GS_TRACKING & operator=(const class SK_GS_TRACKING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GS_TRIPLEACTION {
  SK_GUNSLINGER, offset = 0x0

  public void SK_GS_TRIPLEACTION::Init()
  public int SK_GS_TRIPLEACTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_GS_TRIPLEACTION::GetMaxLevel()
  public short SK_GS_TRIPLEACTION::GetSPCost(short)
  public short SK_GS_TRIPLEACTION::GetPostDelayTM(short)
  public void SK_GS_TRIPLEACTION(const class SK_GS_TRIPLEACTION &)
  public void SK_GS_TRIPLEACTION::SK_GS_TRIPLEACTION()
  public void ~SK_GS_TRIPLEACTION()
  public class SK_GS_TRIPLEACTION & operator=(const class SK_GS_TRIPLEACTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_GUNSLINGER {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_GUNSLINGER::GetMaxLevel()
  public short SK_GUNSLINGER::GetSPCost(short)
  public short SK_GUNSLINGER::GetPreDelayTime(short)
  public void SK_GUNSLINGER(const class SK_GUNSLINGER &)
  public void SK_GUNSLINGER::SK_GUNSLINGER()
  public void SK_GUNSLINGER::~SK_GUNSLINGER()
  public class SK_GUNSLINGER & operator=(const class SK_GUNSLINGER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HAMI_BLOODLUST {
  CSkillTypeInfo, offset = 0x0

  public void SK_HAMI_BLOODLUST::Init()
  public int SK_HAMI_BLOODLUST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HAMI_BLOODLUST::GetMaxLevel()
  public short SK_HAMI_BLOODLUST::GetSPCost(short)
  public void SK_HAMI_BLOODLUST(const class SK_HAMI_BLOODLUST &)
  public void SK_HAMI_BLOODLUST()
  public void ~SK_HAMI_BLOODLUST()
  public class SK_HAMI_BLOODLUST & operator=(const class SK_HAMI_BLOODLUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HAMI_CASTLE {
  CSkillTypeInfo, offset = 0x0

  public void SK_HAMI_CASTLE::Init()
  public int SK_HAMI_CASTLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HAMI_CASTLE::GetMaxLevel()
  public short SK_HAMI_CASTLE::GetSPCost(short)
  public void SK_HAMI_CASTLE(const class SK_HAMI_CASTLE &)
  public void SK_HAMI_CASTLE()
  public void ~SK_HAMI_CASTLE()
  public class SK_HAMI_CASTLE & operator=(const class SK_HAMI_CASTLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HAMI_DEFENCE {
  CSkillTypeInfo, offset = 0x0

  public void SK_HAMI_DEFENCE::Init()
  public int SK_HAMI_DEFENCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HAMI_DEFENCE::GetMaxLevel()
  public short SK_HAMI_DEFENCE::GetSPCost(short)
  public void SK_HAMI_DEFENCE(const class SK_HAMI_DEFENCE &)
  public void SK_HAMI_DEFENCE()
  public void ~SK_HAMI_DEFENCE()
  public class SK_HAMI_DEFENCE & operator=(const class SK_HAMI_DEFENCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HAMI_SKIN {
  CSkillTypeInfo, offset = 0x0

  public void SK_HAMI_SKIN::Init()
  public int SK_HAMI_SKIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HAMI_SKIN::GetMaxLevel()
  public void SK_HAMI_SKIN(const class SK_HAMI_SKIN &)
  public void SK_HAMI_SKIN()
  public void ~SK_HAMI_SKIN()
  public class SK_HAMI_SKIN & operator=(const class SK_HAMI_SKIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HFLI_FLEET {
  CSkillTypeInfo, offset = 0x0

  public void SK_HFLI_FLEET::Init()
  public int SK_HFLI_FLEET::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HFLI_FLEET::GetMaxLevel()
  public short SK_HFLI_FLEET::GetSPCost(short)
  public void SK_HFLI_FLEET(const class SK_HFLI_FLEET &)
  public void SK_HFLI_FLEET()
  public void ~SK_HFLI_FLEET()
  public class SK_HFLI_FLEET & operator=(const class SK_HFLI_FLEET &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HFLI_MOON {
  CSkillTypeInfo, offset = 0x0

  public void SK_HFLI_MOON::Init()
  public int SK_HFLI_MOON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HFLI_MOON::GetMaxLevel()
  public short SK_HFLI_MOON::GetSPCost(short)
  public void SK_HFLI_MOON(const class SK_HFLI_MOON &)
  public void SK_HFLI_MOON()
  public void ~SK_HFLI_MOON()
  public class SK_HFLI_MOON & operator=(const class SK_HFLI_MOON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HFLI_SBR44 {
  CSkillTypeInfo, offset = 0x0

  public void SK_HFLI_SBR44::Init()
  public int SK_HFLI_SBR44::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HFLI_SBR44::GetMaxLevel()
  public short SK_HFLI_SBR44::GetSPCost(short)
  public void SK_HFLI_SBR44(const class SK_HFLI_SBR44 &)
  public void SK_HFLI_SBR44()
  public void ~SK_HFLI_SBR44()
  public class SK_HFLI_SBR44 & operator=(const class SK_HFLI_SBR44 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HFLI_SPEED {
  CSkillTypeInfo, offset = 0x0

  public void SK_HFLI_SPEED::Init()
  public int SK_HFLI_SPEED::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HFLI_SPEED::GetMaxLevel()
  public short SK_HFLI_SPEED::GetSPCost(short)
  public void SK_HFLI_SPEED(const class SK_HFLI_SPEED &)
  public void SK_HFLI_SPEED()
  public void ~SK_HFLI_SPEED()
  public class SK_HFLI_SPEED & operator=(const class SK_HFLI_SPEED &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HIGHPRIEST {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_HIGHPRIEST::GetMaxLevel()
  public int SK_HIGHPRIEST::IsAvailableJob(short)
  public short SK_HIGHPRIEST::GetSPCost(short)
  public short SK_HIGHPRIEST::GetPreDelayTime(short)
  public void SK_HIGHPRIEST(const class SK_HIGHPRIEST &)
  public void SK_HIGHPRIEST()
  public void SK_HIGHPRIEST::~SK_HIGHPRIEST()
  public class SK_HIGHPRIEST & operator=(const class SK_HIGHPRIEST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HIGHWIZARD {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_HIGHWIZARD::GetMaxLevel()
  public int SK_HIGHWIZARD::IsAvailableJob(short)
  public short SK_HIGHWIZARD::GetSPCost(short)
  public short SK_HIGHWIZARD::GetPreDelayTime(short)
  public void SK_HIGHWIZARD(const class SK_HIGHWIZARD &)
  public void SK_HIGHWIZARD::SK_HIGHWIZARD()
  public void SK_HIGHWIZARD::~SK_HIGHWIZARD()
  public class SK_HIGHWIZARD & operator=(const class SK_HIGHWIZARD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HLIF_AVOID {
  CSkillTypeInfo, offset = 0x0

  public void SK_HLIF_AVOID::Init()
  public int SK_HLIF_AVOID::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HLIF_AVOID::GetMaxLevel()
  public short SK_HLIF_AVOID::GetSPCost(short)
  public void SK_HLIF_AVOID(const class SK_HLIF_AVOID &)
  public void SK_HLIF_AVOID()
  public void ~SK_HLIF_AVOID()
  public class SK_HLIF_AVOID & operator=(const class SK_HLIF_AVOID &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HLIF_BRAIN {
  CSkillTypeInfo, offset = 0x0

  public void SK_HLIF_BRAIN::Init()
  public int SK_HLIF_BRAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HLIF_BRAIN::GetMaxLevel()
  public void SK_HLIF_BRAIN(const class SK_HLIF_BRAIN &)
  public void SK_HLIF_BRAIN()
  public void ~SK_HLIF_BRAIN()
  public class SK_HLIF_BRAIN & operator=(const class SK_HLIF_BRAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HLIF_CHANGE {
  CSkillTypeInfo, offset = 0x0

  public void SK_HLIF_CHANGE::Init()
  public int SK_HLIF_CHANGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HLIF_CHANGE::GetMaxLevel()
  public short SK_HLIF_CHANGE::GetSPCost(short)
  public void SK_HLIF_CHANGE(const class SK_HLIF_CHANGE &)
  public void SK_HLIF_CHANGE()
  public void ~SK_HLIF_CHANGE()
  public class SK_HLIF_CHANGE & operator=(const class SK_HLIF_CHANGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HLIF_HEAL {
  CSkillTypeInfo, offset = 0x0

  public void SK_HLIF_HEAL::Init()
  public int SK_HLIF_HEAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HLIF_HEAL::GetMaxLevel()
  public short SK_HLIF_HEAL::GetSPCost(short)
  public void SK_HLIF_HEAL(const class SK_HLIF_HEAL &)
  public void SK_HLIF_HEAL()
  public void ~SK_HLIF_HEAL()
  public class SK_HLIF_HEAL & operator=(const class SK_HLIF_HEAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HP_ASSUMPTIO {
  SK_HIGHPRIEST, offset = 0x0

  public void SK_HP_ASSUMPTIO::Init()
  public int SK_HP_ASSUMPTIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HP_ASSUMPTIO::GetMaxLevel()
  public short SK_HP_ASSUMPTIO::GetSPCost(short)
  public short SK_HP_ASSUMPTIO::GetPreDelayTime(short)
  public void SK_HP_ASSUMPTIO(const class SK_HP_ASSUMPTIO &)
  public void SK_HP_ASSUMPTIO::SK_HP_ASSUMPTIO()
  public void ~SK_HP_ASSUMPTIO()
  public class SK_HP_ASSUMPTIO & operator=(const class SK_HP_ASSUMPTIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HP_BASILICA {
  SK_HIGHPRIEST, offset = 0x0

  public void SK_HP_BASILICA::Init()
  public int SK_HP_BASILICA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HP_BASILICA::GetMaxLevel()
  public short SK_HP_BASILICA::GetSPCost(short)
  public short SK_HP_BASILICA::GetPreDelayTime(short)
  public void SK_HP_BASILICA(const class SK_HP_BASILICA &)
  public void SK_HP_BASILICA::SK_HP_BASILICA()
  public void ~SK_HP_BASILICA()
  public class SK_HP_BASILICA & operator=(const class SK_HP_BASILICA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HP_MANARECHARGE {
  SK_HIGHPRIEST, offset = 0x0

  public void SK_HP_MANARECHARGE::Init()
  public int SK_HP_MANARECHARGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HP_MANARECHARGE::GetMaxLevel()
  public void SK_HP_MANARECHARGE(const class SK_HP_MANARECHARGE &)
  public void SK_HP_MANARECHARGE::SK_HP_MANARECHARGE()
  public void ~SK_HP_MANARECHARGE()
  public class SK_HP_MANARECHARGE & operator=(const class SK_HP_MANARECHARGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HP_MEDITATIO {
  SK_HIGHPRIEST, offset = 0x0

  public void SK_HP_MEDITATIO::Init()
  public int SK_HP_MEDITATIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_HP_MEDITATIO(const class SK_HP_MEDITATIO &)
  public void SK_HP_MEDITATIO::SK_HP_MEDITATIO()
  public void ~SK_HP_MEDITATIO()
  public class SK_HP_MEDITATIO & operator=(const class SK_HP_MEDITATIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_ANKLESNARE {
  SK_HUNTER, offset = 0x0

  public void SK_HT_ANKLESNARE::Init()
  public int SK_HT_ANKLESNARE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_ANKLESNARE::GetSPCost(short)
  public void SK_HT_ANKLESNARE(const class SK_HT_ANKLESNARE &)
  public void SK_HT_ANKLESNARE()
  public void ~SK_HT_ANKLESNARE()
  public class SK_HT_ANKLESNARE & operator=(const class SK_HT_ANKLESNARE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_BEASTBANE {
  SK_HUNTER, offset = 0x0

  public void SK_HT_BEASTBANE::Init()
  public int SK_HT_BEASTBANE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_BEASTBANE::GetMaxLevel()
  public void SK_HT_BEASTBANE(const class SK_HT_BEASTBANE &)
  public void SK_HT_BEASTBANE()
  public void ~SK_HT_BEASTBANE()
  public class SK_HT_BEASTBANE & operator=(const class SK_HT_BEASTBANE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_BLASTMINE {
  SK_HUNTER, offset = 0x0

  public void SK_HT_BLASTMINE::Init()
  public int SK_HT_BLASTMINE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_BLASTMINE::GetSPCost(short)
  public void SK_HT_BLASTMINE(const class SK_HT_BLASTMINE &)
  public void SK_HT_BLASTMINE()
  public void ~SK_HT_BLASTMINE()
  public class SK_HT_BLASTMINE & operator=(const class SK_HT_BLASTMINE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_BLITZBEAT {
  SK_HUNTER, offset = 0x0

  public void SK_HT_BLITZBEAT::Init()
  public int SK_HT_BLITZBEAT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_BLITZBEAT::GetSPCost(short)
  public short SK_HT_BLITZBEAT::GetPreDelayTime(short)
  public void SK_HT_BLITZBEAT(const class SK_HT_BLITZBEAT &)
  public void SK_HT_BLITZBEAT()
  public void ~SK_HT_BLITZBEAT()
  public class SK_HT_BLITZBEAT & operator=(const class SK_HT_BLITZBEAT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_CLAYMORETRAP {
  SK_HUNTER, offset = 0x0

  public void SK_HT_CLAYMORETRAP::Init()
  public int SK_HT_CLAYMORETRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_CLAYMORETRAP::GetSPCost(short)
  public void SK_HT_CLAYMORETRAP(const class SK_HT_CLAYMORETRAP &)
  public void SK_HT_CLAYMORETRAP()
  public void ~SK_HT_CLAYMORETRAP()
  public class SK_HT_CLAYMORETRAP & operator=(const class SK_HT_CLAYMORETRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_DETECTING {
  SK_HUNTER, offset = 0x0

  public void SK_HT_DETECTING::Init()
  public int SK_HT_DETECTING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_DETECTING::GetMaxLevel()
  public short SK_HT_DETECTING::GetSPCost(short)
  public short SK_HT_DETECTING::GetAttackRange(int)
  public void SK_HT_DETECTING(const class SK_HT_DETECTING &)
  public void SK_HT_DETECTING()
  public void ~SK_HT_DETECTING()
  public class SK_HT_DETECTING & operator=(const class SK_HT_DETECTING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_FALCON {
  SK_HUNTER, offset = 0x0

  public void SK_HT_FALCON::Init()
  public int SK_HT_FALCON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_FALCON::GetMaxLevel()
  public void SK_HT_FALCON(const class SK_HT_FALCON &)
  public void SK_HT_FALCON()
  public void ~SK_HT_FALCON()
  public class SK_HT_FALCON & operator=(const class SK_HT_FALCON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_FLASHER {
  SK_HUNTER, offset = 0x0

  public void SK_HT_FLASHER::Init()
  public int SK_HT_FLASHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_FLASHER::GetSPCost(short)
  public void SK_HT_FLASHER(const class SK_HT_FLASHER &)
  public void SK_HT_FLASHER()
  public void ~SK_HT_FLASHER()
  public class SK_HT_FLASHER & operator=(const class SK_HT_FLASHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_FREEZINGTRAP {
  SK_HUNTER, offset = 0x0

  public void SK_HT_FREEZINGTRAP::Init()
  public int SK_HT_FREEZINGTRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_FREEZINGTRAP::GetSPCost(short)
  public void SK_HT_FREEZINGTRAP(const class SK_HT_FREEZINGTRAP &)
  public void SK_HT_FREEZINGTRAP::SK_HT_FREEZINGTRAP()
  public void SK_HT_FREEZINGTRAP::~SK_HT_FREEZINGTRAP()
  public class SK_HT_FREEZINGTRAP & operator=(const class SK_HT_FREEZINGTRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_LANDMINE {
  SK_HUNTER, offset = 0x0

  public void SK_HT_LANDMINE::Init()
  public int SK_HT_LANDMINE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_LANDMINE::GetSPCost(short)
  public void SK_HT_LANDMINE(const class SK_HT_LANDMINE &)
  public void SK_HT_LANDMINE::SK_HT_LANDMINE()
  public void SK_HT_LANDMINE::~SK_HT_LANDMINE()
  public class SK_HT_LANDMINE & operator=(const class SK_HT_LANDMINE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_PHANTASMIC {
  SK_HUNTER, offset = 0x0

  public void SK_HT_PHANTASMIC::Init()
  public int SK_HT_PHANTASMIC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_PHANTASMIC::GetMaxLevel()
  public short SK_HT_PHANTASMIC::GetSPCost(short)
  public void SK_HT_PHANTASMIC(const class SK_HT_PHANTASMIC &)
  public void SK_HT_PHANTASMIC()
  public void ~SK_HT_PHANTASMIC()
  public class SK_HT_PHANTASMIC & operator=(const class SK_HT_PHANTASMIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_POWER {
  SK_ARCHER, offset = 0x0

  public void SK_HT_POWER::Init()
  public int SK_HT_POWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_HT_POWER::IsAvailableJob(short)
  public short SK_HT_POWER::GetMaxLevel()
  public short SK_HT_POWER::GetSPCost(short)
  public void SK_HT_POWER(const class SK_HT_POWER &)
  public void SK_HT_POWER::SK_HT_POWER()
  public void ~SK_HT_POWER()
  public class SK_HT_POWER & operator=(const class SK_HT_POWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_REMOVETRAP {
  SK_HUNTER, offset = 0x0

  public void SK_HT_REMOVETRAP::Init()
  public int SK_HT_REMOVETRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_REMOVETRAP::GetMaxLevel()
  public int SK_HT_REMOVETRAP::IsAvailableJob(short)
  public short SK_HT_REMOVETRAP::GetSPCost(short)
  public void SK_HT_REMOVETRAP(const class SK_HT_REMOVETRAP &)
  public void SK_HT_REMOVETRAP::SK_HT_REMOVETRAP()
  public void SK_HT_REMOVETRAP::~SK_HT_REMOVETRAP()
  public class SK_HT_REMOVETRAP & operator=(const class SK_HT_REMOVETRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_SANDMAN {
  SK_HUNTER, offset = 0x0

  public void SK_HT_SANDMAN::Init()
  public int SK_HT_SANDMAN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_SANDMAN::GetSPCost(short)
  public void SK_HT_SANDMAN(const class SK_HT_SANDMAN &)
  public void SK_HT_SANDMAN::SK_HT_SANDMAN()
  public void SK_HT_SANDMAN::~SK_HT_SANDMAN()
  public class SK_HT_SANDMAN & operator=(const class SK_HT_SANDMAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_SHOCKWAVE {
  SK_HUNTER, offset = 0x0

  public void SK_HT_SHOCKWAVE::Init()
  public int SK_HT_SHOCKWAVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_SHOCKWAVE::GetSPCost(short)
  public void SK_HT_SHOCKWAVE(const class SK_HT_SHOCKWAVE &)
  public void SK_HT_SHOCKWAVE()
  public void ~SK_HT_SHOCKWAVE()
  public class SK_HT_SHOCKWAVE & operator=(const class SK_HT_SHOCKWAVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_SKIDTRAP {
  SK_HUNTER, offset = 0x0

  public void SK_HT_SKIDTRAP::Init()
  public int SK_HT_SKIDTRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_SKIDTRAP::GetSPCost(short)
  public void SK_HT_SKIDTRAP(const class SK_HT_SKIDTRAP &)
  public void SK_HT_SKIDTRAP::SK_HT_SKIDTRAP()
  public void SK_HT_SKIDTRAP::~SK_HT_SKIDTRAP()
  public class SK_HT_SKIDTRAP & operator=(const class SK_HT_SKIDTRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_SPRINGTRAP {
  SK_HUNTER, offset = 0x0

  public void SK_HT_SPRINGTRAP::Init()
  public int SK_HT_SPRINGTRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_SPRINGTRAP::GetSPCost(short)
  public short SK_HT_SPRINGTRAP::GetAttackRange(int)
  public void SK_HT_SPRINGTRAP(const class SK_HT_SPRINGTRAP &)
  public void SK_HT_SPRINGTRAP()
  public void ~SK_HT_SPRINGTRAP()
  public class SK_HT_SPRINGTRAP & operator=(const class SK_HT_SPRINGTRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_STEELCROW {
  SK_HUNTER, offset = 0x0

  public void SK_HT_STEELCROW::Init()
  public int SK_HT_STEELCROW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_STEELCROW::GetMaxLevel()
  public void SK_HT_STEELCROW(const class SK_HT_STEELCROW &)
  public void SK_HT_STEELCROW()
  public void ~SK_HT_STEELCROW()
  public class SK_HT_STEELCROW & operator=(const class SK_HT_STEELCROW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HT_TALKIEBOX {
  SK_HUNTER, offset = 0x0

  public void SK_HT_TALKIEBOX::Init()
  public int SK_HT_TALKIEBOX::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HT_TALKIEBOX::GetMaxLevel()
  public short SK_HT_TALKIEBOX::GetSPCost(short)
  public void SK_HT_TALKIEBOX(const class SK_HT_TALKIEBOX &)
  public void SK_HT_TALKIEBOX()
  public void ~SK_HT_TALKIEBOX()
  public class SK_HT_TALKIEBOX & operator=(const class SK_HT_TALKIEBOX &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HUNTER {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_HUNTER::GetMaxLevel()
  public int SK_HUNTER::IsAvailableJob(short)
  public short SK_HUNTER::GetSPCost(short)
  public short SK_HUNTER::GetPreDelayTime(short)
  public void SK_HUNTER(const class SK_HUNTER &)
  public void SK_HUNTER::SK_HUNTER()
  public void SK_HUNTER::~SK_HUNTER()
  public class SK_HUNTER & operator=(const class SK_HUNTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HVAN_CAPRICE {
  CSkillTypeInfo, offset = 0x0

  public void SK_HVAN_CAPRICE::Init()
  public int SK_HVAN_CAPRICE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HVAN_CAPRICE::GetMaxLevel()
  public short SK_HVAN_CAPRICE::GetSPCost(short)
  public void SK_HVAN_CAPRICE(const class SK_HVAN_CAPRICE &)
  public void SK_HVAN_CAPRICE()
  public void ~SK_HVAN_CAPRICE()
  public class SK_HVAN_CAPRICE & operator=(const class SK_HVAN_CAPRICE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HVAN_CHAOTIC {
  CSkillTypeInfo, offset = 0x0

  public void SK_HVAN_CHAOTIC::Init()
  public int SK_HVAN_CHAOTIC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HVAN_CHAOTIC::GetMaxLevel()
  public short SK_HVAN_CHAOTIC::GetSPCost(short)
  public void SK_HVAN_CHAOTIC(const class SK_HVAN_CHAOTIC &)
  public void SK_HVAN_CHAOTIC()
  public void ~SK_HVAN_CHAOTIC()
  public class SK_HVAN_CHAOTIC & operator=(const class SK_HVAN_CHAOTIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HVAN_EXPLOSION {
  CSkillTypeInfo, offset = 0x0

  public void SK_HVAN_EXPLOSION::Init()
  public int SK_HVAN_EXPLOSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HVAN_EXPLOSION::GetMaxLevel()
  public short SK_HVAN_EXPLOSION::GetSPCost(short)
  public short SK_HVAN_EXPLOSION::GetPostDelayTM(short)
  public void SK_HVAN_EXPLOSION(const class SK_HVAN_EXPLOSION &)
  public void SK_HVAN_EXPLOSION()
  public void ~SK_HVAN_EXPLOSION()
  public class SK_HVAN_EXPLOSION & operator=(const class SK_HVAN_EXPLOSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HVAN_INSTRUCT {
  CSkillTypeInfo, offset = 0x0

  public void SK_HVAN_INSTRUCT::Init()
  public int SK_HVAN_INSTRUCT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HVAN_INSTRUCT::GetMaxLevel()
  public void SK_HVAN_INSTRUCT(const class SK_HVAN_INSTRUCT &)
  public void SK_HVAN_INSTRUCT()
  public void ~SK_HVAN_INSTRUCT()
  public class SK_HVAN_INSTRUCT & operator=(const class SK_HVAN_INSTRUCT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HW_GANBANTEIN {
  SK_HIGHWIZARD, offset = 0x0

  public void SK_HW_GANBANTEIN::Init()
  public int SK_HW_GANBANTEIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HW_GANBANTEIN::GetMaxLevel()
  public short SK_HW_GANBANTEIN::GetSPCost(short)
  public short SK_HW_GANBANTEIN::GetPreDelayTime(short)
  public void SK_HW_GANBANTEIN(const class SK_HW_GANBANTEIN &)
  public void SK_HW_GANBANTEIN::SK_HW_GANBANTEIN()
  public void ~SK_HW_GANBANTEIN()
  public class SK_HW_GANBANTEIN & operator=(const class SK_HW_GANBANTEIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HW_GRAVITATION {
  SK_HIGHWIZARD, offset = 0x0

  public void SK_HW_GRAVITATION::Init()
  public int SK_HW_GRAVITATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HW_GRAVITATION::GetMaxLevel()
  public short SK_HW_GRAVITATION::GetSPCost(short)
  public short SK_HW_GRAVITATION::GetPreDelayTime(short)
  public void SK_HW_GRAVITATION(const class SK_HW_GRAVITATION &)
  public void SK_HW_GRAVITATION::SK_HW_GRAVITATION()
  public void ~SK_HW_GRAVITATION()
  public class SK_HW_GRAVITATION & operator=(const class SK_HW_GRAVITATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HW_MAGICCRASHER {
  SK_HIGHWIZARD, offset = 0x0

  public void SK_HW_MAGICCRASHER::Init()
  public int SK_HW_MAGICCRASHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HW_MAGICCRASHER::GetMaxLevel()
  public short SK_HW_MAGICCRASHER::GetSPCost(short)
  public short SK_HW_MAGICCRASHER::GetPreDelayTime(short)
  public void SK_HW_MAGICCRASHER(const class SK_HW_MAGICCRASHER &)
  public void SK_HW_MAGICCRASHER::SK_HW_MAGICCRASHER()
  public void ~SK_HW_MAGICCRASHER()
  public class SK_HW_MAGICCRASHER & operator=(const class SK_HW_MAGICCRASHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HW_MAGICPOWER {
  SK_HIGHWIZARD, offset = 0x0

  public void SK_HW_MAGICPOWER::Init()
  public int SK_HW_MAGICPOWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HW_MAGICPOWER::GetSPCost(short)
  public void SK_HW_MAGICPOWER(const class SK_HW_MAGICPOWER &)
  public void SK_HW_MAGICPOWER::SK_HW_MAGICPOWER()
  public void ~SK_HW_MAGICPOWER()
  public class SK_HW_MAGICPOWER & operator=(const class SK_HW_MAGICPOWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HW_NAPALMVULCAN {
  SK_HIGHWIZARD, offset = 0x0

  public void SK_HW_NAPALMVULCAN::Init()
  public int SK_HW_NAPALMVULCAN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_HW_NAPALMVULCAN::GetMaxLevel()
  public short SK_HW_NAPALMVULCAN::GetSPCost(short)
  public void SK_HW_NAPALMVULCAN(const class SK_HW_NAPALMVULCAN &)
  public void SK_HW_NAPALMVULCAN::SK_HW_NAPALMVULCAN()
  public void ~SK_HW_NAPALMVULCAN()
  public class SK_HW_NAPALMVULCAN & operator=(const class SK_HW_NAPALMVULCAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_HW_SOULDRAIN {
  SK_HIGHWIZARD, offset = 0x0

  public void SK_HW_SOULDRAIN::Init()
  public int SK_HW_SOULDRAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_HW_SOULDRAIN(const class SK_HW_SOULDRAIN &)
  public void SK_HW_SOULDRAIN::SK_HW_SOULDRAIN()
  public void ~SK_HW_SOULDRAIN()
  public class SK_HW_SOULDRAIN & operator=(const class SK_HW_SOULDRAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ITEM_ENCHANTARMS {
  CSkillTypeInfo, offset = 0x0

  public void SK_ITEM_ENCHANTARMS::Init()
  public int SK_ITEM_ENCHANTARMS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ITEM_ENCHANTARMS::GetMaxLevel()
  public int SK_ITEM_ENCHANTARMS::IsAvailableJob(short)
  public short SK_ITEM_ENCHANTARMS::GetSPCost(short)
  public void SK_ITEM_ENCHANTARMS(const class SK_ITEM_ENCHANTARMS &)
  public void SK_ITEM_ENCHANTARMS()
  public void ~SK_ITEM_ENCHANTARMS()
  public class SK_ITEM_ENCHANTARMS & operator=(const class SK_ITEM_ENCHANTARMS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ITM_TOMAHAWK {
  CSkillTypeInfo, offset = 0x0

  public void SK_ITM_TOMAHAWK::Init()
  public int SK_ITM_TOMAHAWK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ITM_TOMAHAWK::GetMaxLevel()
  public int SK_ITM_TOMAHAWK::IsAvailableJob(short)
  public short SK_ITM_TOMAHAWK::GetSPCost(short)
  public void SK_ITM_TOMAHAWK(const class SK_ITM_TOMAHAWK &)
  public void SK_ITM_TOMAHAWK()
  public void ~SK_ITM_TOMAHAWK()
  public class SK_ITM_TOMAHAWK & operator=(const class SK_ITM_TOMAHAWK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KG_KAGEHUMI {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KG_KAGEHUMI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KG_KAGEHUMI::GetApplyRadius(const int)
  public int SK_KG_KAGEHUMI::GetContinuousTM(const int)
  public void SK_KG_KAGEHUMI(const class SK_KG_KAGEHUMI &)
  public void SK_KG_KAGEHUMI::SK_KG_KAGEHUMI()
  public void ~SK_KG_KAGEHUMI()
  public class SK_KG_KAGEHUMI & operator=(const class SK_KG_KAGEHUMI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KG_KAGEMUSYA {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KG_KAGEMUSYA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KG_KAGEMUSYA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_KG_KAGEMUSYA::GetContinuousTM(const int)
  public void SK_KG_KAGEMUSYA(const class SK_KG_KAGEMUSYA &)
  public void SK_KG_KAGEMUSYA::SK_KG_KAGEMUSYA()
  public void ~SK_KG_KAGEMUSYA()
  public class SK_KG_KAGEMUSYA & operator=(const class SK_KG_KAGEMUSYA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KG_KYOMU {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KG_KYOMU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KG_KYOMU::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_KG_KYOMU::GetContinuousTM(const int)
  public bool SK_KG_KYOMU::IsSuccessCastingSkill(const int)
  public void SK_KG_KYOMU(const class SK_KG_KYOMU &)
  public void SK_KG_KYOMU::SK_KG_KYOMU()
  public void ~SK_KG_KYOMU()
  public class SK_KG_KYOMU & operator=(const class SK_KG_KYOMU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KNIGHT {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_KNIGHT::GetMaxLevel()
  public int SK_KNIGHT::IsAvailableJob(short)
  public short SK_KNIGHT::GetSPCost(short)
  public short SK_KNIGHT::GetPreDelayTime(short)
  public void SK_KNIGHT(const class SK_KNIGHT &)
  public void SK_KNIGHT::SK_KNIGHT()
  public void SK_KNIGHT::~SK_KNIGHT()
  public class SK_KNIGHT & operator=(const class SK_KNIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_AUTOCOUNTER {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_AUTOCOUNTER::Init()
  public int SK_KN_AUTOCOUNTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_AUTOCOUNTER::GetMaxLevel()
  public short SK_KN_AUTOCOUNTER::GetSPCost(short)
  public void SK_KN_AUTOCOUNTER(const class SK_KN_AUTOCOUNTER &)
  public void SK_KN_AUTOCOUNTER()
  public void ~SK_KN_AUTOCOUNTER()
  public class SK_KN_AUTOCOUNTER & operator=(const class SK_KN_AUTOCOUNTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_BOWLINGBASH {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_BOWLINGBASH::Init()
  public int SK_KN_BOWLINGBASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_BOWLINGBASH::GetPreDelayTime(short)
  public short SK_KN_BOWLINGBASH::GetSPCost(short)
  public void SK_KN_BOWLINGBASH(const class SK_KN_BOWLINGBASH &)
  public void SK_KN_BOWLINGBASH::SK_KN_BOWLINGBASH()
  public void SK_KN_BOWLINGBASH::~SK_KN_BOWLINGBASH()
  public class SK_KN_BOWLINGBASH & operator=(const class SK_KN_BOWLINGBASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_BRANDISHSPEAR {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_BRANDISHSPEAR::Init()
  public int SK_KN_BRANDISHSPEAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_BRANDISHSPEAR::GetSPCost(short)
  public short SK_KN_BRANDISHSPEAR::GetPreDelayTime(short)
  public void SK_KN_BRANDISHSPEAR(const class SK_KN_BRANDISHSPEAR &)
  public void SK_KN_BRANDISHSPEAR::SK_KN_BRANDISHSPEAR()
  public void SK_KN_BRANDISHSPEAR::~SK_KN_BRANDISHSPEAR()
  public class SK_KN_BRANDISHSPEAR & operator=(const class SK_KN_BRANDISHSPEAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_CAVALIERMASTERY {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_CAVALIERMASTERY::Init()
  public int SK_KN_CAVALIERMASTERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_CAVALIERMASTERY::GetMaxLevel()
  public int SK_KN_CAVALIERMASTERY::IsAvailableJob(short)
  public void SK_KN_CAVALIERMASTERY(const class SK_KN_CAVALIERMASTERY &)
  public void SK_KN_CAVALIERMASTERY()
  public void ~SK_KN_CAVALIERMASTERY()
  public class SK_KN_CAVALIERMASTERY & operator=(const class SK_KN_CAVALIERMASTERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_CHARGEATK {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_CHARGEATK::Init()
  public int SK_KN_CHARGEATK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_CHARGEATK::GetMaxLevel()
  public short SK_KN_CHARGEATK::GetPreDelayTime(short)
  public short SK_KN_CHARGEATK::GetSPCost(short)
  public void SK_KN_CHARGEATK(const class SK_KN_CHARGEATK &)
  public void SK_KN_CHARGEATK()
  public void ~SK_KN_CHARGEATK()
  public class SK_KN_CHARGEATK & operator=(const class SK_KN_CHARGEATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_ONEHAND {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_ONEHAND::Init()
  public int SK_KN_ONEHAND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_ONEHAND::GetSPCost(short)
  public void SK_KN_ONEHAND(const class SK_KN_ONEHAND &)
  public void SK_KN_ONEHAND::SK_KN_ONEHAND()
  public void ~SK_KN_ONEHAND()
  public class SK_KN_ONEHAND & operator=(const class SK_KN_ONEHAND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_PIERCE {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_PIERCE::Init()
  public int SK_KN_PIERCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_PIERCE::GetSPCost(short)
  public void SK_KN_PIERCE(const class SK_KN_PIERCE &)
  public void SK_KN_PIERCE::SK_KN_PIERCE()
  public void SK_KN_PIERCE::~SK_KN_PIERCE()
  public class SK_KN_PIERCE & operator=(const class SK_KN_PIERCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_RIDING {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_RIDING::Init()
  public int SK_KN_RIDING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_RIDING::GetMaxLevel()
  public int SK_KN_RIDING::IsAvailableJob(short)
  public void SK_KN_RIDING(const class SK_KN_RIDING &)
  public void SK_KN_RIDING()
  public void ~SK_KN_RIDING()
  public class SK_KN_RIDING & operator=(const class SK_KN_RIDING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_SPEARBOOMERANG {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_SPEARBOOMERANG::Init()
  public int SK_KN_SPEARBOOMERANG::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_SPEARBOOMERANG::GetMaxLevel()
  public short SK_KN_SPEARBOOMERANG::GetSPCost(short)
  public short SK_KN_SPEARBOOMERANG::GetAttackRange(int)
  public short SK_KN_SPEARBOOMERANG::GetPostDelayTM(short)
  public void SK_KN_SPEARBOOMERANG(const class SK_KN_SPEARBOOMERANG &)
  public void SK_KN_SPEARBOOMERANG()
  public void ~SK_KN_SPEARBOOMERANG()
  public class SK_KN_SPEARBOOMERANG & operator=(const class SK_KN_SPEARBOOMERANG &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_SPEARMASTERY {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_SPEARMASTERY::Init()
  public int SK_KN_SPEARMASTERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KN_SPEARMASTERY::IsAvailableJob(short)
  public void SK_KN_SPEARMASTERY(const class SK_KN_SPEARMASTERY &)
  public void SK_KN_SPEARMASTERY()
  public void ~SK_KN_SPEARMASTERY()
  public class SK_KN_SPEARMASTERY & operator=(const class SK_KN_SPEARMASTERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_SPEARSTAB {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_SPEARSTAB::Init()
  public int SK_KN_SPEARSTAB::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_SPEARSTAB::GetSPCost(short)
  public void SK_KN_SPEARSTAB(const class SK_KN_SPEARSTAB &)
  public void SK_KN_SPEARSTAB()
  public void ~SK_KN_SPEARSTAB()
  public class SK_KN_SPEARSTAB & operator=(const class SK_KN_SPEARSTAB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KN_TWOHANDQUICKEN {
  SK_KNIGHT, offset = 0x0

  public void SK_KN_TWOHANDQUICKEN::Init()
  public int SK_KN_TWOHANDQUICKEN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_KN_TWOHANDQUICKEN::GetSPCost(short)
  public void SK_KN_TWOHANDQUICKEN(const class SK_KN_TWOHANDQUICKEN &)
  public void SK_KN_TWOHANDQUICKEN::SK_KN_TWOHANDQUICKEN()
  public void SK_KN_TWOHANDQUICKEN::~SK_KN_TWOHANDQUICKEN()
  public class SK_KN_TWOHANDQUICKEN & operator=(const class SK_KN_TWOHANDQUICKEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_BAKURETSU {
  CSkillTypeInfo2, offset = 0x0

  public void SK_KO_BAKURETSU::Init()
  public int SK_KO_BAKURETSU::GetApplyRadiusRange(const int)
  public int SK_KO_BAKURETSU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_BAKURETSU::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_BAKURETSU(const class SK_KO_BAKURETSU &)
  public void SK_KO_BAKURETSU::SK_KO_BAKURETSU()
  public void ~SK_KO_BAKURETSU()
  public class SK_KO_BAKURETSU & operator=(const class SK_KO_BAKURETSU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_DOHU_KOUKAI {
  CSkillTypeInfo2, offset = 0x0

    public int SK_KO_DOHU_KOUKAI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_DOHU_KOUKAI::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_DOHU_KOUKAI(const class SK_KO_DOHU_KOUKAI &)
  public void SK_KO_DOHU_KOUKAI::SK_KO_DOHU_KOUKAI()
  public void ~SK_KO_DOHU_KOUKAI()
  public class SK_KO_DOHU_KOUKAI & operator=(const class SK_KO_DOHU_KOUKAI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_GENWAKU {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_GENWAKU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_GENWAKU::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_KO_GENWAKU::GetApplyPercent(const int)
  public void SK_KO_GENWAKU(const class SK_KO_GENWAKU &)
  public void SK_KO_GENWAKU::SK_KO_GENWAKU()
  public void ~SK_KO_GENWAKU()
  public class SK_KO_GENWAKU & operator=(const class SK_KO_GENWAKU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_HAPPOKUNAI {
  CSkillTypeInfo2, offset = 0x0

    public int SK_KO_HAPPOKUNAI::GetApplyRadiusRange(const int)
  public bool IsUseableItem(const unsigned short)
  public void SK_KO_HAPPOKUNAI::Init()
  public int SK_KO_HAPPOKUNAI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_HAPPOKUNAI::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_HAPPOKUNAI(const class SK_KO_HAPPOKUNAI &)
  public void SK_KO_HAPPOKUNAI::SK_KO_HAPPOKUNAI()
  public void ~SK_KO_HAPPOKUNAI()
  public class SK_KO_HAPPOKUNAI & operator=(const class SK_KO_HAPPOKUNAI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_HUUMARANKA {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_HUUMARANKA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_HUUMARANKA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_HUUMARANKA(const class SK_KO_HUUMARANKA &)
  public void SK_KO_HUUMARANKA::SK_KO_HUUMARANKA()
  public void ~SK_KO_HUUMARANKA()
  public class SK_KO_HUUMARANKA & operator=(const class SK_KO_HUUMARANKA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_HYOUHU_HUBUKI {
  CSkillTypeInfo2, offset = 0x0

    public int SK_KO_HYOUHU_HUBUKI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_HYOUHU_HUBUKI::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_HYOUHU_HUBUKI(const class SK_KO_HYOUHU_HUBUKI &)
  public void SK_KO_HYOUHU_HUBUKI::SK_KO_HYOUHU_HUBUKI()
  public void ~SK_KO_HYOUHU_HUBUKI()
  public class SK_KO_HYOUHU_HUBUKI & operator=(const class SK_KO_HYOUHU_HUBUKI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_IZAYOI {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_IZAYOI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_IZAYOI::GetContinuousTM(const int)
  public void SK_KO_IZAYOI(const class SK_KO_IZAYOI &)
  public void SK_KO_IZAYOI::SK_KO_IZAYOI()
  public void ~SK_KO_IZAYOI()
  public class SK_KO_IZAYOI & operator=(const class SK_KO_IZAYOI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_JYUMONJIKIRI {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_JYUMONJIKIRI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_JYUMONJIKIRI::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_JYUMONJIKIRI(const class SK_KO_JYUMONJIKIRI &)
  public void SK_KO_JYUMONJIKIRI::SK_KO_JYUMONJIKIRI()
  public void ~SK_KO_JYUMONJIKIRI()
  public class SK_KO_JYUMONJIKIRI & operator=(const class SK_KO_JYUMONJIKIRI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_JYUSATSU {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_JYUSATSU::GetPreDelayTime(const int)
  public int SK_KO_JYUSATSU::GetApplyPercent(const int)
  public int SK_KO_JYUSATSU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_JYUSATSU::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_JYUSATSU(const class SK_KO_JYUSATSU &)
  public void SK_KO_JYUSATSU::SK_KO_JYUSATSU()
  public void ~SK_KO_JYUSATSU()
  public class SK_KO_JYUSATSU & operator=(const class SK_KO_JYUSATSU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_KAHU_ENTEN {
  CSkillTypeInfo2, offset = 0x0

    public int SK_KO_KAHU_ENTEN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_KAHU_ENTEN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_KAHU_ENTEN(const class SK_KO_KAHU_ENTEN &)
  public void SK_KO_KAHU_ENTEN::SK_KO_KAHU_ENTEN()
  public void ~SK_KO_KAHU_ENTEN()
  public class SK_KO_KAHU_ENTEN & operator=(const class SK_KO_KAHU_ENTEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_KAIHOU {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_KAIHOU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_KAIHOU::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_KAIHOU(const class SK_KO_KAIHOU &)
  public void SK_KO_KAIHOU::SK_KO_KAIHOU()
  public void ~SK_KO_KAIHOU()
  public class SK_KO_KAIHOU & operator=(const class SK_KO_KAIHOU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_KAZEHU_SEIRAN {
  CSkillTypeInfo2, offset = 0x0

    public int SK_KO_KAZEHU_SEIRAN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_KAZEHU_SEIRAN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_KAZEHU_SEIRAN(const class SK_KO_KAZEHU_SEIRAN &)
  public void SK_KO_KAZEHU_SEIRAN::SK_KO_KAZEHU_SEIRAN()
  public void ~SK_KO_KAZEHU_SEIRAN()
  public class SK_KO_KAZEHU_SEIRAN & operator=(const class SK_KO_KAZEHU_SEIRAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_KYOUGAKU {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_KYOUGAKU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_KYOUGAKU::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_KO_KYOUGAKU::GetContinuousTM(const int)
  public int SK_KO_KYOUGAKU::GetApplyPercent(const int)
  public void SK_KO_KYOUGAKU(const class SK_KO_KYOUGAKU &)
  public void SK_KO_KYOUGAKU::SK_KO_KYOUGAKU()
  public void ~SK_KO_KYOUGAKU()
  public class SK_KO_KYOUGAKU & operator=(const class SK_KO_KYOUGAKU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_LEFT {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_LEFT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_KO_LEFT(const class SK_KO_LEFT &)
  public void SK_KO_LEFT::SK_KO_LEFT()
  public void ~SK_KO_LEFT()
  public class SK_KO_LEFT & operator=(const class SK_KO_LEFT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_MAKIBISHI {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_MAKIBISHI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_MAKIBISHI::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_KO_MAKIBISHI::GetMAKIBISHICnt(const int)
  public int SK_KO_MAKIBISHI::GetLifeTM(const int)
  public int SK_KO_MAKIBISHI::GetConsumeItemMAKIBISHICnt(const int)
  public void SK_KO_MAKIBISHI(const class SK_KO_MAKIBISHI &)
  public void SK_KO_MAKIBISHI::SK_KO_MAKIBISHI()
  public void ~SK_KO_MAKIBISHI()
  public class SK_KO_MAKIBISHI & operator=(const class SK_KO_MAKIBISHI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_MEIKYOUSISUI {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_MEIKYOUSISUI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_MEIKYOUSISUI::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_KO_MEIKYOUSISUI::GetLifeTM(const int)
  public void SK_KO_MEIKYOUSISUI(const class SK_KO_MEIKYOUSISUI &)
  public void SK_KO_MEIKYOUSISUI::SK_KO_MEIKYOUSISUI()
  public void ~SK_KO_MEIKYOUSISUI()
  public class SK_KO_MEIKYOUSISUI & operator=(const class SK_KO_MEIKYOUSISUI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_MUCHANAGE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_MUCHANAGE::GetCostZeny(const int)
  public int SK_KO_MUCHANAGE::GetApplyRadiusRange(const int)
  public int SK_KO_MUCHANAGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_MUCHANAGE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_MUCHANAGE(const class SK_KO_MUCHANAGE &)
  public void SK_KO_MUCHANAGE::SK_KO_MUCHANAGE()
  public void ~SK_KO_MUCHANAGE()
  public class SK_KO_MUCHANAGE & operator=(const class SK_KO_MUCHANAGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_RIGHT {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_RIGHT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_KO_RIGHT(const class SK_KO_RIGHT &)
  public void SK_KO_RIGHT::SK_KO_RIGHT()
  public void ~SK_KO_RIGHT()
  public class SK_KO_RIGHT & operator=(const class SK_KO_RIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_SETSUDAN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_SETSUDAN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_KO_SETSUDAN(const class SK_KO_SETSUDAN &)
  public void SK_KO_SETSUDAN::SK_KO_SETSUDAN()
  public void ~SK_KO_SETSUDAN()
  public class SK_KO_SETSUDAN & operator=(const class SK_KO_SETSUDAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_YAMIKUMO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_YAMIKUMO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_KO_YAMIKUMO(const class SK_KO_YAMIKUMO &)
  public void SK_KO_YAMIKUMO::SK_KO_YAMIKUMO()
  public void ~SK_KO_YAMIKUMO()
  public class SK_KO_YAMIKUMO & operator=(const class SK_KO_YAMIKUMO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_ZANZOU {
  CSkillTypeInfo2, offset = 0x0

  public int SK_KO_ZANZOU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_ZANZOU::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_KO_ZANZOU::GetDOPPELGANGERLifeTM(const int)
  public void SK_KO_ZANZOU(const class SK_KO_ZANZOU &)
  public void SK_KO_ZANZOU::SK_KO_ZANZOU()
  public void ~SK_KO_ZANZOU()
  public class SK_KO_ZANZOU & operator=(const class SK_KO_ZANZOU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_KO_ZENKAI {
  CSkillTypeInfo2, offset = 0x0

  public void SK_KO_ZENKAI::Init()
  public int SK_KO_ZENKAI::GetGNDRange(short)
  public int SK_KO_ZENKAI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_KO_ZENKAI::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_KO_ZENKAI(const class SK_KO_ZENKAI &)
  public void SK_KO_ZENKAI::SK_KO_ZENKAI()
  public void ~SK_KO_ZENKAI()
  public class SK_KO_ZENKAI & operator=(const class SK_KO_ZENKAI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_BANDING {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_BANDING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_BANDING::GetReduceSPValue(const int)
  public int SK_LG_BANDING::GetPlusATK(const int)
  public int SK_LG_BANDING::GetPlusDEF(const int)
  public int SK_LG_BANDING::GetGNDRange(short)
  public void SK_LG_BANDING(const class SK_LG_BANDING &)
  public void SK_LG_BANDING::SK_LG_BANDING()
  public void ~SK_LG_BANDING()
  public class SK_LG_BANDING & operator=(const class SK_LG_BANDING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_BANISHINGPOINT {
  CSkillTypeInfo_ThirdJob_Attack, offset = 0x0

  public int SK_LG_BANISHINGPOINT::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_LG_BANISHINGPOINT(const class SK_LG_BANISHINGPOINT &)
  public void SK_LG_BANISHINGPOINT::SK_LG_BANISHINGPOINT()
  public void ~SK_LG_BANISHINGPOINT()
  public class SK_LG_BANISHINGPOINT & operator=(const class SK_LG_BANISHINGPOINT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_CANNONSPEAR {
  CSkillTypeInfo_ThirdJob_Attack, offset = 0x0

  public int SK_LG_CANNONSPEAR::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_LG_CANNONSPEAR(const class SK_LG_CANNONSPEAR &)
  public void SK_LG_CANNONSPEAR::SK_LG_CANNONSPEAR()
  public void ~SK_LG_CANNONSPEAR()
  public class SK_LG_CANNONSPEAR & operator=(const class SK_LG_CANNONSPEAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_EARTHDRIVE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_EARTHDRIVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_EARTHDRIVE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_LG_EARTHDRIVE::GetSplashRange(const int)
  public int SK_LG_EARTHDRIVE::GetAttackCount(const int)
  public int SK_LG_EARTHDRIVE::GetPenaltyPercent(const int)
  public int SK_LG_EARTHDRIVE::GetDelayTime(const int)
  public void SK_LG_EARTHDRIVE(const class SK_LG_EARTHDRIVE &)
  public void SK_LG_EARTHDRIVE::SK_LG_EARTHDRIVE()
  public void ~SK_LG_EARTHDRIVE()
  public class SK_LG_EARTHDRIVE & operator=(const class SK_LG_EARTHDRIVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_EXEEDBREAK {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_EXEEDBREAK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_EXEEDBREAK::GetDelayTime(const int)
  public int SK_LG_EXEEDBREAK::GetReduceCastingPercent(const int)
  public void SK_LG_EXEEDBREAK(const class SK_LG_EXEEDBREAK &)
  public void SK_LG_EXEEDBREAK::SK_LG_EXEEDBREAK()
  public void ~SK_LG_EXEEDBREAK()
  public class SK_LG_EXEEDBREAK & operator=(const class SK_LG_EXEEDBREAK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_FORCEOFVANGUARD {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_FORCEOFVANGUARD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_FORCEOFVANGUARD::GetMaxForceOfRageCount(const int)
  public int SK_LG_FORCEOFVANGUARD::GetReduceSPValue(const int)
  public int SK_LG_FORCEOFVANGUARD::GetForceOfRageAcquirePercent(const int)
  public void SK_LG_FORCEOFVANGUARD(const class SK_LG_FORCEOFVANGUARD &)
  public void SK_LG_FORCEOFVANGUARD::SK_LG_FORCEOFVANGUARD()
  public void ~SK_LG_FORCEOFVANGUARD()
  public class SK_LG_FORCEOFVANGUARD & operator=(const class SK_LG_FORCEOFVANGUARD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_HESPERUSLIT {
  CSkillTypeInfo_ThirdJob_Attack, offset = 0x0

  public int SK_LG_HESPERUSLIT::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_LG_HESPERUSLIT(const class SK_LG_HESPERUSLIT &)
  public void SK_LG_HESPERUSLIT::SK_LG_HESPERUSLIT()
  public void ~SK_LG_HESPERUSLIT()
  public class SK_LG_HESPERUSLIT & operator=(const class SK_LG_HESPERUSLIT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_INSPIRATION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_INSPIRATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_INSPIRATION::GetDelayTime(const int)
  public int SK_LG_INSPIRATION::GetReduceHPValue(const int)
  public int SK_LG_INSPIRATION::GetReduceSPValue(const int)
  public int SK_LG_INSPIRATION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_LG_INSPIRATION(const class SK_LG_INSPIRATION &)
  public void SK_LG_INSPIRATION::SK_LG_INSPIRATION()
  public void ~SK_LG_INSPIRATION()
  public class SK_LG_INSPIRATION & operator=(const class SK_LG_INSPIRATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_MOONSLASHER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_MOONSLASHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_MOONSLASHER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_LG_MOONSLASHER::GetSplashRange(const int)
  public int SK_LG_MOONSLASHER::GetRigidityPercent(const int)
  public void SK_LG_MOONSLASHER(const class SK_LG_MOONSLASHER &)
  public void SK_LG_MOONSLASHER::SK_LG_MOONSLASHER()
  public void ~SK_LG_MOONSLASHER()
  public class SK_LG_MOONSLASHER & operator=(const class SK_LG_MOONSLASHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_OVERBRAND {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_OVERBRAND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_OVERBRAND::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_LG_OVERBRAND(const class SK_LG_OVERBRAND &)
  public void SK_LG_OVERBRAND::SK_LG_OVERBRAND()
  public void ~SK_LG_OVERBRAND()
  public class SK_LG_OVERBRAND & operator=(const class SK_LG_OVERBRAND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_OVERBRAND_BRANDISH {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_OVERBRAND_BRANDISH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_OVERBRAND_BRANDISH::GetKnockBackDistance(const int)
  public void SK_LG_OVERBRAND_BRANDISH(const class SK_LG_OVERBRAND_BRANDISH &)
  public void SK_LG_OVERBRAND_BRANDISH::SK_LG_OVERBRAND_BRANDISH()
  public void ~SK_LG_OVERBRAND_BRANDISH()
  public class SK_LG_OVERBRAND_BRANDISH & operator=(const class SK_LG_OVERBRAND_BRANDISH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_OVERBRAND_PLUSATK {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_OVERBRAND_PLUSATK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int GetKnockBackDistance(const int)
  public void SK_LG_OVERBRAND_PLUSATK(const class SK_LG_OVERBRAND_PLUSATK &)
  public void SK_LG_OVERBRAND_PLUSATK::SK_LG_OVERBRAND_PLUSATK()
  public void ~SK_LG_OVERBRAND_PLUSATK()
  public class SK_LG_OVERBRAND_PLUSATK & operator=(const class SK_LG_OVERBRAND_PLUSATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_PIETY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_PIETY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_PIETY::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_LG_PIETY::GetDelayTime(const int)
  public void SK_LG_PIETY(const class SK_LG_PIETY &)
  public void SK_LG_PIETY::SK_LG_PIETY()
  public void ~SK_LG_PIETY()
  public class SK_LG_PIETY & operator=(const class SK_LG_PIETY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_PINPOINTATTACK {
  CSkillTypeInfo_ThirdJob_Attack, offset = 0x0

  public int SK_LG_PINPOINTATTACK::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_LG_PINPOINTATTACK(const class SK_LG_PINPOINTATTACK &)
  public void SK_LG_PINPOINTATTACK::SK_LG_PINPOINTATTACK()
  public void ~SK_LG_PINPOINTATTACK()
  public class SK_LG_PINPOINTATTACK & operator=(const class SK_LG_PINPOINTATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_PRESTIGE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_PRESTIGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_PRESTIGE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_LG_PRESTIGE::GetDelayTime(const int)
  public void SK_LG_PRESTIGE(const class SK_LG_PRESTIGE &)
  public void SK_LG_PRESTIGE::SK_LG_PRESTIGE()
  public void ~SK_LG_PRESTIGE()
  public class SK_LG_PRESTIGE & operator=(const class SK_LG_PRESTIGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_RAGEBURST {
  CSkillTypeInfo_ThirdJob_Attack, offset = 0x0

  public void SK_LG_RAGEBURST(const class SK_LG_RAGEBURST &)
  public void SK_LG_RAGEBURST::SK_LG_RAGEBURST()
  public void ~SK_LG_RAGEBURST()
  public class SK_LG_RAGEBURST & operator=(const class SK_LG_RAGEBURST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_RAYOFGENESIS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_RAYOFGENESIS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_RAYOFGENESIS::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_LG_RAYOFGENESIS::GetNeedHPPercent(const int)
  public int SK_LG_RAYOFGENESIS::GetSplashRange(const int)
  public void SK_LG_RAYOFGENESIS(const class SK_LG_RAYOFGENESIS &)
  public void SK_LG_RAYOFGENESIS::SK_LG_RAYOFGENESIS()
  public void ~SK_LG_RAYOFGENESIS()
  public class SK_LG_RAYOFGENESIS & operator=(const class SK_LG_RAYOFGENESIS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_REFLECTDAMAGE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_REFLECTDAMAGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_REFLECTDAMAGE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_LG_REFLECTDAMAGE::GetDelayTime(const int)
  public int SK_LG_REFLECTDAMAGE::GetReflectPercent(const int)
  public int SK_LG_REFLECTDAMAGE::GetReduceSPValue(const int)
  public int SK_LG_REFLECTDAMAGE::GetSuccessRate(const int)
  public int SK_LG_REFLECTDAMAGE::GetDamageCountToSkillOff(const int)
  public void SK_LG_REFLECTDAMAGE(const class SK_LG_REFLECTDAMAGE &)
  public void SK_LG_REFLECTDAMAGE::SK_LG_REFLECTDAMAGE()
  public void ~SK_LG_REFLECTDAMAGE()
  public class SK_LG_REFLECTDAMAGE & operator=(const class SK_LG_REFLECTDAMAGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_SHIELDPRESS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_SHIELDPRESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_SHIELDPRESS::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetStunPercent(const int)
  public void SK_LG_SHIELDPRESS(const class SK_LG_SHIELDPRESS &)
  public void SK_LG_SHIELDPRESS::SK_LG_SHIELDPRESS()
  public void ~SK_LG_SHIELDPRESS()
  public class SK_LG_SHIELDPRESS & operator=(const class SK_LG_SHIELDPRESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_SHIELDSPELL {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public int SK_LG_SHIELDSPELL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_LG_SHIELDSPELL(const class SK_LG_SHIELDSPELL &)
  public void SK_LG_SHIELDSPELL::SK_LG_SHIELDSPELL()
  public void ~SK_LG_SHIELDSPELL()
  public class SK_LG_SHIELDSPELL & operator=(const class SK_LG_SHIELDSPELL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LG_TRAMPLE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_LG_TRAMPLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_LG_TRAMPLE::GetSuccessPercent(const int)
  public void SK_LG_TRAMPLE(const class SK_LG_TRAMPLE &)
  public void SK_LG_TRAMPLE::SK_LG_TRAMPLE()
  public void ~SK_LG_TRAMPLE()
  public class SK_LG_TRAMPLE & operator=(const class SK_LG_TRAMPLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LINKER {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_LINKER::GetMaxLevel()
  public int SK_LINKER::IsAvailableJob(short)
  public void SK_LINKER(const class SK_LINKER &)
  public void SK_LINKER::SK_LINKER()
  public void SK_LINKER::~SK_LINKER()
  public class SK_LINKER & operator=(const class SK_LINKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LK_AURABLADE {
  SK_LORDKNIGHT, offset = 0x0

  public void SK_LK_AURABLADE::Init()
  public int SK_LK_AURABLADE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_LK_AURABLADE::GetMaxLevel()
  public short SK_LK_AURABLADE::GetSPCost(short)
  public void SK_LK_AURABLADE(const class SK_LK_AURABLADE &)
  public void SK_LK_AURABLADE::SK_LK_AURABLADE()
  public void ~SK_LK_AURABLADE()
  public class SK_LK_AURABLADE & operator=(const class SK_LK_AURABLADE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LK_BERSERK {
  SK_LORDKNIGHT, offset = 0x0

  public void SK_LK_BERSERK::Init()
  public int SK_LK_BERSERK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_LK_BERSERK::GetMaxLevel()
  public short SK_LK_BERSERK::GetSPCost(short)
  public void SK_LK_BERSERK(const class SK_LK_BERSERK &)
  public void SK_LK_BERSERK::SK_LK_BERSERK()
  public void SK_LK_BERSERK::~SK_LK_BERSERK()
  public class SK_LK_BERSERK & operator=(const class SK_LK_BERSERK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LK_CONCENTRATION {
  SK_LORDKNIGHT, offset = 0x0

  public void SK_LK_CONCENTRATION::Init()
  public int SK_LK_CONCENTRATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_LK_CONCENTRATION::GetMaxLevel()
  public short SK_LK_CONCENTRATION::GetSPCost(short)
  public void SK_LK_CONCENTRATION(const class SK_LK_CONCENTRATION &)
  public void SK_LK_CONCENTRATION::SK_LK_CONCENTRATION()
  public void ~SK_LK_CONCENTRATION()
  public class SK_LK_CONCENTRATION & operator=(const class SK_LK_CONCENTRATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LK_FURY {
  SK_LORDKNIGHT, offset = 0x0

  public void SK_LK_FURY::Init()
  public int SK_LK_FURY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_LK_FURY::GetMaxLevel()
  public short SK_LK_FURY::GetSPCost(short)
  public void SK_LK_FURY(const class SK_LK_FURY &)
  public void SK_LK_FURY::SK_LK_FURY()
  public void ~SK_LK_FURY()
  public class SK_LK_FURY & operator=(const class SK_LK_FURY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LK_HEADCRUSH {
  SK_LORDKNIGHT, offset = 0x0

  public void SK_LK_HEADCRUSH::Init()
  public int SK_LK_HEADCRUSH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_LK_HEADCRUSH::GetMaxLevel()
  public short SK_LK_HEADCRUSH::GetSPCost(short)
  public void SK_LK_HEADCRUSH(const class SK_LK_HEADCRUSH &)
  public void SK_LK_HEADCRUSH::SK_LK_HEADCRUSH()
  public void ~SK_LK_HEADCRUSH()
  public class SK_LK_HEADCRUSH & operator=(const class SK_LK_HEADCRUSH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LK_JOINTBEAT {
  SK_LORDKNIGHT, offset = 0x0

  public void SK_LK_JOINTBEAT::Init()
  public int SK_LK_JOINTBEAT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_LK_JOINTBEAT::GetMaxLevel()
  public short SK_LK_JOINTBEAT::GetSPCost(short)
  public void SK_LK_JOINTBEAT(const class SK_LK_JOINTBEAT &)
  public void SK_LK_JOINTBEAT::SK_LK_JOINTBEAT()
  public void ~SK_LK_JOINTBEAT()
  public class SK_LK_JOINTBEAT & operator=(const class SK_LK_JOINTBEAT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LK_PARRYING {
  SK_LORDKNIGHT, offset = 0x0

  public void SK_LK_PARRYING::Init()
  public int SK_LK_PARRYING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_LK_PARRYING::GetSPCost(short)
  public void SK_LK_PARRYING(const class SK_LK_PARRYING &)
  public void SK_LK_PARRYING::SK_LK_PARRYING()
  public void SK_LK_PARRYING::~SK_LK_PARRYING()
  public class SK_LK_PARRYING & operator=(const class SK_LK_PARRYING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LK_SPIRALPIERCE {
  SK_LORDKNIGHT, offset = 0x0

  public void SK_LK_SPIRALPIERCE::Init()
  public int SK_LK_SPIRALPIERCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_LK_SPIRALPIERCE::GetMaxLevel()
  public short SK_LK_SPIRALPIERCE::GetSPCost(short)
  public short SK_LK_SPIRALPIERCE::GetPreDelayTime(short)
  public void SK_LK_SPIRALPIERCE(const class SK_LK_SPIRALPIERCE &)
  public void SK_LK_SPIRALPIERCE::SK_LK_SPIRALPIERCE()
  public void SK_LK_SPIRALPIERCE::~SK_LK_SPIRALPIERCE()
  public class SK_LK_SPIRALPIERCE & operator=(const class SK_LK_SPIRALPIERCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LK_TENSIONRELAX {
  SK_LORDKNIGHT, offset = 0x0

  public void SK_LK_TENSIONRELAX::Init()
  public int SK_LK_TENSIONRELAX::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_LK_TENSIONRELAX::GetMaxLevel()
  public short SK_LK_TENSIONRELAX::GetSPCost(short)
  public void SK_LK_TENSIONRELAX(const class SK_LK_TENSIONRELAX &)
  public void SK_LK_TENSIONRELAX::SK_LK_TENSIONRELAX()
  public void ~SK_LK_TENSIONRELAX()
  public class SK_LK_TENSIONRELAX & operator=(const class SK_LK_TENSIONRELAX &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_LORDKNIGHT {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_LORDKNIGHT::GetMaxLevel()
  public int SK_LORDKNIGHT::IsAvailableJob(short)
  public short SK_LORDKNIGHT::GetSPCost(short)
  public short SK_LORDKNIGHT::GetPreDelayTime(short)
  public void SK_LORDKNIGHT(const class SK_LORDKNIGHT &)
  public void SK_LORDKNIGHT::SK_LORDKNIGHT()
  public void SK_LORDKNIGHT::~SK_LORDKNIGHT()
  public class SK_LORDKNIGHT & operator=(const class SK_LORDKNIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MAGICIAN {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_MAGICIAN::GetMaxLevel()
  public int SK_MAGICIAN::IsAvailableJob(short)
  public short SK_MAGICIAN::GetSPCost(short)
  public short SK_MAGICIAN::GetPreDelayTime(short)
  public void SK_MAGICIAN(const class SK_MAGICIAN &)
  public void SK_MAGICIAN::SK_MAGICIAN()
  public void SK_MAGICIAN::~SK_MAGICIAN()
  public class SK_MAGICIAN & operator=(const class SK_MAGICIAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MA_CHARGEARROW {
  SK_AC_CHARGEARROW, offset = 0x0

  public void SK_MA_CHARGEARROW::Init()
  public int SK_MA_CHARGEARROW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MA_CHARGEARROW(const class SK_MA_CHARGEARROW &)
  public void SK_MA_CHARGEARROW()
  public void ~SK_MA_CHARGEARROW()
  public class SK_MA_CHARGEARROW & operator=(const class SK_MA_CHARGEARROW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MA_DOUBLE {
  SK_AC_DOUBLE, offset = 0x0

  public void SK_MA_DOUBLE::Init()
  public int SK_MA_DOUBLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MA_DOUBLE(const class SK_MA_DOUBLE &)
  public void SK_MA_DOUBLE()
  public void ~SK_MA_DOUBLE()
  public class SK_MA_DOUBLE & operator=(const class SK_MA_DOUBLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MA_FREEZINGTRAP {
  SK_HT_FREEZINGTRAP, offset = 0x0

  public void SK_MA_FREEZINGTRAP::Init()
  public void SK_MA_FREEZINGTRAP(const class SK_MA_FREEZINGTRAP &)
  public void SK_MA_FREEZINGTRAP()
  public void ~SK_MA_FREEZINGTRAP()
  public class SK_MA_FREEZINGTRAP & operator=(const class SK_MA_FREEZINGTRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MA_LANDMINE {
  SK_HT_LANDMINE, offset = 0x0

  public void SK_MA_LANDMINE::Init()
  public void SK_MA_LANDMINE(const class SK_MA_LANDMINE &)
  public void SK_MA_LANDMINE()
  public void ~SK_MA_LANDMINE()
  public class SK_MA_LANDMINE & operator=(const class SK_MA_LANDMINE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MA_REMOVETRAP {
  SK_HT_REMOVETRAP, offset = 0x0

  public void SK_MA_REMOVETRAP::Init()
  public void SK_MA_REMOVETRAP(const class SK_MA_REMOVETRAP &)
  public void SK_MA_REMOVETRAP()
  public void ~SK_MA_REMOVETRAP()
  public class SK_MA_REMOVETRAP & operator=(const class SK_MA_REMOVETRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MA_SANDMAN {
  SK_HT_SANDMAN, offset = 0x0

  public void SK_MA_SANDMAN::Init()
  public void SK_MA_SANDMAN(const class SK_MA_SANDMAN &)
  public void SK_MA_SANDMAN()
  public void ~SK_MA_SANDMAN()
  public class SK_MA_SANDMAN & operator=(const class SK_MA_SANDMAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MA_SHARPSHOOTING {
  SK_SN_SHARPSHOOTING, offset = 0x0

  public void SK_MA_SHARPSHOOTING::Init()
  public int SK_MA_SHARPSHOOTING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MA_SHARPSHOOTING(const class SK_MA_SHARPSHOOTING &)
  public void SK_MA_SHARPSHOOTING()
  public void ~SK_MA_SHARPSHOOTING()
  public class SK_MA_SHARPSHOOTING & operator=(const class SK_MA_SHARPSHOOTING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MA_SHOWER {
  SK_AC_SHOWER, offset = 0x0

  public void SK_MA_SHOWER::Init()
  public int SK_MA_SHOWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MA_SHOWER(const class SK_MA_SHOWER &)
  public void SK_MA_SHOWER()
  public void ~SK_MA_SHOWER()
  public class SK_MA_SHOWER & operator=(const class SK_MA_SHOWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MA_SKIDTRAP {
  SK_HT_SKIDTRAP, offset = 0x0

  public void SK_MA_SKIDTRAP::Init()
  public void SK_MA_SKIDTRAP(const class SK_MA_SKIDTRAP &)
  public void SK_MA_SKIDTRAP()
  public void ~SK_MA_SKIDTRAP()
  public class SK_MA_SKIDTRAP & operator=(const class SK_MA_SKIDTRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_BODYALTER {
  SK_GANGSI, offset = 0x0

  public void SK_MB_BODYALTER::Init()
  public int SK_MB_BODYALTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_BODYALTER::GetMaxLevel()
  public void SK_MB_BODYALTER(const class SK_MB_BODYALTER &)
  public void SK_MB_BODYALTER::SK_MB_BODYALTER()
  public void ~SK_MB_BODYALTER()
  public class SK_MB_BODYALTER & operator=(const class SK_MB_BODYALTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_BODYSTUDY {
  SK_GANGSI, offset = 0x0

  public void SK_MB_BODYSTUDY::Init()
  public int SK_MB_BODYSTUDY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_BODYSTUDY::GetMaxLevel()
  public void SK_MB_BODYSTUDY(const class SK_MB_BODYSTUDY &)
  public void SK_MB_BODYSTUDY::SK_MB_BODYSTUDY()
  public void ~SK_MB_BODYSTUDY()
  public class SK_MB_BODYSTUDY & operator=(const class SK_MB_BODYSTUDY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_B_DRIFT {
  SK_GANGSI, offset = 0x0

  public void SK_MB_B_DRIFT::Init()
  public int SK_MB_B_DRIFT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_B_DRIFT::GetMaxLevel()
  public short SK_MB_B_DRIFT::GetSPCost(short)
  public void SK_MB_B_DRIFT(const class SK_MB_B_DRIFT &)
  public void SK_MB_B_DRIFT::SK_MB_B_DRIFT()
  public void ~SK_MB_B_DRIFT()
  public class SK_MB_B_DRIFT & operator=(const class SK_MB_B_DRIFT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_B_EQUIP {
  SK_GANGSI, offset = 0x0

  public void SK_MB_B_EQUIP::Init()
  public int SK_MB_B_EQUIP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_B_EQUIP::GetMaxLevel()
  public void SK_MB_B_EQUIP(const class SK_MB_B_EQUIP &)
  public void SK_MB_B_EQUIP::SK_MB_B_EQUIP()
  public void ~SK_MB_B_EQUIP()
  public class SK_MB_B_EQUIP & operator=(const class SK_MB_B_EQUIP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_B_EXCLUDE {
  SK_GANGSI, offset = 0x0

  public void SK_MB_B_EXCLUDE::Init()
  public int SK_MB_B_EXCLUDE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_B_EXCLUDE::GetMaxLevel()
  public short SK_MB_B_EXCLUDE::GetSPCost(short)
  public short SK_MB_B_EXCLUDE::GetPreDelayTime(short)
  public void SK_MB_B_EXCLUDE(const class SK_MB_B_EXCLUDE &)
  public void SK_MB_B_EXCLUDE::SK_MB_B_EXCLUDE()
  public void ~SK_MB_B_EXCLUDE()
  public class SK_MB_B_EXCLUDE & operator=(const class SK_MB_B_EXCLUDE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_B_GAIN {
  SK_GANGSI, offset = 0x0

  public void SK_MB_B_GAIN::Init()
  public int SK_MB_B_GAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_B_GAIN::GetMaxLevel()
  public short SK_MB_B_GAIN::GetSPCost(short)
  public short SK_MB_B_GAIN::GetPreDelayTime(short)
  public void SK_MB_B_GAIN(const class SK_MB_B_GAIN &)
  public void SK_MB_B_GAIN::SK_MB_B_GAIN()
  public void ~SK_MB_B_GAIN()
  public class SK_MB_B_GAIN & operator=(const class SK_MB_B_GAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_B_GATHERING {
  SK_GANGSI, offset = 0x0

  public void SK_MB_B_GATHERING::Init()
  public int SK_MB_B_GATHERING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_B_GATHERING::GetMaxLevel()
  public short SK_MB_B_GATHERING::GetSPCost(short)
  public short SK_MB_B_GATHERING::GetPreDelayTime(short)
  public void SK_MB_B_GATHERING(const class SK_MB_B_GATHERING &)
  public void SK_MB_B_GATHERING::SK_MB_B_GATHERING()
  public void ~SK_MB_B_GATHERING()
  public class SK_MB_B_GATHERING & operator=(const class SK_MB_B_GATHERING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_B_WALLRUSH {
  SK_GANGSI, offset = 0x0

  public void SK_MB_B_WALLRUSH::Init()
  public int SK_MB_B_WALLRUSH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_B_WALLRUSH::GetMaxLevel()
  public short SK_MB_B_WALLRUSH::GetSPCost(short)
  public void SK_MB_B_WALLRUSH(const class SK_MB_B_WALLRUSH &)
  public void SK_MB_B_WALLRUSH::SK_MB_B_WALLRUSH()
  public void ~SK_MB_B_WALLRUSH()
  public class SK_MB_B_WALLRUSH & operator=(const class SK_MB_B_WALLRUSH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_B_WALLSHIFT {
  SK_GANGSI, offset = 0x0

  public void SK_MB_B_WALLSHIFT::Init()
  public int SK_MB_B_WALLSHIFT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_B_WALLSHIFT::GetMaxLevel()
  public short SK_MB_B_WALLSHIFT::GetSPCost(short)
  public short SK_MB_B_WALLSHIFT::GetPreDelayTime(short)
  public void SK_MB_B_WALLSHIFT(const class SK_MB_B_WALLSHIFT &)
  public void SK_MB_B_WALLSHIFT::SK_MB_B_WALLSHIFT()
  public void ~SK_MB_B_WALLSHIFT()
  public class SK_MB_B_WALLSHIFT & operator=(const class SK_MB_B_WALLSHIFT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_CARDPITCHER {
  SK_GANGSI, offset = 0x0

  public void SK_MB_CARDPITCHER::Init()
  public int SK_MB_CARDPITCHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_CARDPITCHER::GetMaxLevel()
  public short SK_MB_CARDPITCHER::GetSPCost(short)
  public void SK_MB_CARDPITCHER(const class SK_MB_CARDPITCHER &)
  public void SK_MB_CARDPITCHER::SK_MB_CARDPITCHER()
  public void ~SK_MB_CARDPITCHER()
  public class SK_MB_CARDPITCHER & operator=(const class SK_MB_CARDPITCHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_FIGHTING {
  SK_GANGSI, offset = 0x0

  public void SK_MB_FIGHTING::Init()
  public int SK_MB_FIGHTING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_FIGHTING::GetMaxLevel()
  public void SK_MB_FIGHTING(const class SK_MB_FIGHTING &)
  public void SK_MB_FIGHTING::SK_MB_FIGHTING()
  public void ~SK_MB_FIGHTING()
  public class SK_MB_FIGHTING & operator=(const class SK_MB_FIGHTING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_MENTAL {
  SK_GANGSI, offset = 0x0

  public void SK_MB_MENTAL::Init()
  public int SK_MB_MENTAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_MENTAL::GetMaxLevel()
  public short SK_MB_MENTAL::GetSPCost(short)
  public short SK_MB_MENTAL::GetPreDelayTime(short)
  public void SK_MB_MENTAL(const class SK_MB_MENTAL &)
  public void SK_MB_MENTAL::SK_MB_MENTAL()
  public void ~SK_MB_MENTAL()
  public class SK_MB_MENTAL & operator=(const class SK_MB_MENTAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_MISSION {
  SK_GANGSI, offset = 0x0

  public void SK_MB_MISSION::Init()
  public int SK_MB_MISSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_MISSION::GetMaxLevel()
  public short SK_MB_MISSION::GetSPCost(short)
  public short SK_MB_MISSION::GetPreDelayTime(short)
  public void SK_MB_MISSION(const class SK_MB_MISSION &)
  public void SK_MB_MISSION::SK_MB_MISSION()
  public void ~SK_MB_MISSION()
  public class SK_MB_MISSION & operator=(const class SK_MB_MISSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_MUNAKBALL {
  SK_GANGSI, offset = 0x0

  public void SK_MB_MUNAKBALL::Init()
  public int SK_MB_MUNAKBALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_MUNAKBALL::GetMaxLevel()
  public short SK_MB_MUNAKBALL::GetSPCost(short)
  public short SK_MB_MUNAKBALL::GetPreDelayTime(short)
  public void SK_MB_MUNAKBALL(const class SK_MB_MUNAKBALL &)
  public void SK_MB_MUNAKBALL::SK_MB_MUNAKBALL()
  public void ~SK_MB_MUNAKBALL()
  public class SK_MB_MUNAKBALL & operator=(const class SK_MB_MUNAKBALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_MUNAKKNOWLEDGE {
  SK_GANGSI, offset = 0x0

  public void SK_MB_MUNAKKNOWLEDGE::Init()
  public int SK_MB_MUNAKKNOWLEDGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_MUNAKKNOWLEDGE::GetMaxLevel()
  public short SK_MB_MUNAKKNOWLEDGE::GetSPCost(short)
  public short SK_MB_MUNAKKNOWLEDGE::GetPreDelayTime(short)
  public void SK_MB_MUNAKKNOWLEDGE(const class SK_MB_MUNAKKNOWLEDGE &)
  public void SK_MB_MUNAKKNOWLEDGE::SK_MB_MUNAKKNOWLEDGE()
  public void ~SK_MB_MUNAKKNOWLEDGE()
  public class SK_MB_MUNAKKNOWLEDGE & operator=(const class SK_MB_MUNAKKNOWLEDGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_M_GAIN {
  SK_GANGSI, offset = 0x0

  public void SK_MB_M_GAIN::Init()
  public int SK_MB_M_GAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_M_GAIN::GetMaxLevel()
  public short SK_MB_M_GAIN::GetSPCost(short)
  public short SK_MB_M_GAIN::GetPreDelayTime(short)
  public void SK_MB_M_GAIN(const class SK_MB_M_GAIN &)
  public void SK_MB_M_GAIN::SK_MB_M_GAIN()
  public void ~SK_MB_M_GAIN()
  public class SK_MB_M_GAIN & operator=(const class SK_MB_M_GAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_M_GATHERING {
  SK_GANGSI, offset = 0x0

  public void SK_MB_M_GATHERING::Init()
  public int SK_MB_M_GATHERING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_M_GATHERING::GetMaxLevel()
  public short SK_MB_M_GATHERING::GetSPCost(short)
  public short SK_MB_M_GATHERING::GetPreDelayTime(short)
  public void SK_MB_M_GATHERING(const class SK_MB_M_GATHERING &)
  public void SK_MB_M_GATHERING::SK_MB_M_GATHERING()
  public void ~SK_MB_M_GATHERING()
  public class SK_MB_M_GATHERING & operator=(const class SK_MB_M_GATHERING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_M_REINCARNATION {
  SK_GANGSI, offset = 0x0

  public void SK_MB_M_REINCARNATION::Init()
  public int SK_MB_M_REINCARNATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_M_REINCARNATION::GetMaxLevel()
  public short SK_MB_M_REINCARNATION::GetSPCost(short)
  public void SK_MB_M_REINCARNATION(const class SK_MB_M_REINCARNATION &)
  public void SK_MB_M_REINCARNATION::SK_MB_M_REINCARNATION()
  public void ~SK_MB_M_REINCARNATION()
  public class SK_MB_M_REINCARNATION & operator=(const class SK_MB_M_REINCARNATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_M_TELEPORT {
  SK_GANGSI, offset = 0x0

  public void SK_MB_M_TELEPORT::Init()
  public int SK_MB_M_TELEPORT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_M_TELEPORT::GetMaxLevel()
  public short SK_MB_M_TELEPORT::GetSPCost(short)
  public short SK_MB_M_TELEPORT::GetPreDelayTime(short)
  public void SK_MB_M_TELEPORT(const class SK_MB_M_TELEPORT &)
  public void SK_MB_M_TELEPORT::SK_MB_M_TELEPORT()
  public void ~SK_MB_M_TELEPORT()
  public class SK_MB_M_TELEPORT & operator=(const class SK_MB_M_TELEPORT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_M_WALLCRASH {
  SK_GANGSI, offset = 0x0

  public void SK_MB_M_WALLCRASH::Init()
  public int SK_MB_M_WALLCRASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_M_WALLCRASH::GetMaxLevel()
  public short SK_MB_M_WALLCRASH::GetSPCost(short)
  public void SK_MB_M_WALLCRASH(const class SK_MB_M_WALLCRASH &)
  public void SK_MB_M_WALLCRASH::SK_MB_M_WALLCRASH()
  public void ~SK_MB_M_WALLCRASH()
  public class SK_MB_M_WALLCRASH & operator=(const class SK_MB_M_WALLCRASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_M_WALLRUSH {
  SK_GANGSI, offset = 0x0

  public void SK_MB_M_WALLRUSH::Init()
  public int SK_MB_M_WALLRUSH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_M_WALLRUSH::GetMaxLevel()
  public short SK_MB_M_WALLRUSH::GetSPCost(short)
  public void SK_MB_M_WALLRUSH(const class SK_MB_M_WALLRUSH &)
  public void SK_MB_M_WALLRUSH::SK_MB_M_WALLRUSH()
  public void ~SK_MB_M_WALLRUSH()
  public class SK_MB_M_WALLRUSH & operator=(const class SK_MB_M_WALLRUSH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_NEUTRAL {
  SK_GANGSI, offset = 0x0

  public void SK_MB_NEUTRAL::Init()
  public int SK_MB_NEUTRAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_NEUTRAL::GetMaxLevel()
  public void SK_MB_NEUTRAL(const class SK_MB_NEUTRAL &)
  public void SK_MB_NEUTRAL::SK_MB_NEUTRAL()
  public void ~SK_MB_NEUTRAL()
  public class SK_MB_NEUTRAL & operator=(const class SK_MB_NEUTRAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_PETMEMORY {
  SK_GANGSI, offset = 0x0

  public void SK_MB_PETMEMORY::Init()
  public int SK_MB_PETMEMORY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_PETMEMORY::GetMaxLevel()
  public short SK_MB_PETMEMORY::GetSPCost(short)
  public void SK_MB_PETMEMORY(const class SK_MB_PETMEMORY &)
  public void SK_MB_PETMEMORY::SK_MB_PETMEMORY()
  public void ~SK_MB_PETMEMORY()
  public class SK_MB_PETMEMORY & operator=(const class SK_MB_PETMEMORY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_PETPITCHER {
  SK_GANGSI, offset = 0x0

  public void SK_MB_PETPITCHER::Init()
  public int SK_MB_PETPITCHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_PETPITCHER::GetMaxLevel()
  public short SK_MB_PETPITCHER::GetSPCost(short)
  public short SK_MB_PETPITCHER::GetPreDelayTime(short)
  public void SK_MB_PETPITCHER(const class SK_MB_PETPITCHER &)
  public void SK_MB_PETPITCHER::SK_MB_PETPITCHER()
  public void ~SK_MB_PETPITCHER()
  public class SK_MB_PETPITCHER & operator=(const class SK_MB_PETPITCHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_SCROLL {
  SK_GANGSI, offset = 0x0

  public void SK_MB_SCROLL::Init()
  public int SK_MB_SCROLL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_SCROLL::GetMaxLevel()
  public void SK_MB_SCROLL(const class SK_MB_SCROLL &)
  public void SK_MB_SCROLL::SK_MB_SCROLL()
  public void ~SK_MB_SCROLL()
  public class SK_MB_SCROLL & operator=(const class SK_MB_SCROLL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_TAIMING_PUTI {
  SK_GANGSI, offset = 0x0

  public void SK_MB_TAIMING_PUTI::Init()
  public int SK_MB_TAIMING_PUTI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_TAIMING_PUTI::GetMaxLevel()
  public void SK_MB_TAIMING_PUTI(const class SK_MB_TAIMING_PUTI &)
  public void SK_MB_TAIMING_PUTI::SK_MB_TAIMING_PUTI()
  public void ~SK_MB_TAIMING_PUTI()
  public class SK_MB_TAIMING_PUTI & operator=(const class SK_MB_TAIMING_PUTI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MB_WHITEPOTION {
  SK_GANGSI, offset = 0x0

  public void SK_MB_WHITEPOTION::Init()
  public int SK_MB_WHITEPOTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MB_WHITEPOTION::GetMaxLevel()
  public short SK_MB_WHITEPOTION::GetSPCost(short)
  public void SK_MB_WHITEPOTION(const class SK_MB_WHITEPOTION &)
  public void SK_MB_WHITEPOTION::SK_MB_WHITEPOTION()
  public void ~SK_MB_WHITEPOTION()
  public class SK_MB_WHITEPOTION & operator=(const class SK_MB_WHITEPOTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_CARTDECORATE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MC_CARTDECORATE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MC_CARTDECORATE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public class std::vector<unsigned char,std::allocator<unsigned char> > SK_MC_CARTDECORATE::GetSelectCartArray(const int)
  public void SK_MC_CARTDECORATE(const class SK_MC_CARTDECORATE &)
  public void SK_MC_CARTDECORATE::SK_MC_CARTDECORATE()
  public void ~SK_MC_CARTDECORATE()
  public class SK_MC_CARTDECORATE & operator=(const class SK_MC_CARTDECORATE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_CARTREVOLUTION {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_CARTREVOLUTION::Init()
  public int SK_MC_CARTREVOLUTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MC_CARTREVOLUTION::GetMaxLevel()
  public short SK_MC_CARTREVOLUTION::GetSPCost(short)
  public int SK_MC_CARTREVOLUTION::IsAvailableJob(short)
  public void SK_MC_CARTREVOLUTION(const class SK_MC_CARTREVOLUTION &)
  public void SK_MC_CARTREVOLUTION()
  public void ~SK_MC_CARTREVOLUTION()
  public class SK_MC_CARTREVOLUTION & operator=(const class SK_MC_CARTREVOLUTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_CHANGECART {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_CHANGECART::Init()
  public int SK_MC_CHANGECART::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MC_CHANGECART::GetMaxLevel()
  public short SK_MC_CHANGECART::GetSPCost(short)
  public int SK_MC_CHANGECART::IsAvailableJob(short)
  public void SK_MC_CHANGECART(const class SK_MC_CHANGECART &)
  public void SK_MC_CHANGECART()
  public void ~SK_MC_CHANGECART()
  public class SK_MC_CHANGECART & operator=(const class SK_MC_CHANGECART &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_DISCOUNT {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_DISCOUNT::Init()
  public int SK_MC_DISCOUNT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MC_DISCOUNT(const class SK_MC_DISCOUNT &)
  public void SK_MC_DISCOUNT()
  public void ~SK_MC_DISCOUNT()
  public class SK_MC_DISCOUNT & operator=(const class SK_MC_DISCOUNT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_IDENTIFY {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_IDENTIFY::Init()
  public int SK_MC_IDENTIFY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MC_IDENTIFY::GetMaxLevel()
  public short SK_MC_IDENTIFY::GetSPCost(short)
  public void SK_MC_IDENTIFY(const class SK_MC_IDENTIFY &)
  public void SK_MC_IDENTIFY()
  public void ~SK_MC_IDENTIFY()
  public class SK_MC_IDENTIFY & operator=(const class SK_MC_IDENTIFY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_INCCARRY {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_INCCARRY::Init()
  public int SK_MC_INCCARRY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MC_INCCARRY(const class SK_MC_INCCARRY &)
  public void SK_MC_INCCARRY()
  public void ~SK_MC_INCCARRY()
  public class SK_MC_INCCARRY & operator=(const class SK_MC_INCCARRY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_LOUD {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_LOUD::Init()
  public int SK_MC_LOUD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MC_LOUD::GetMaxLevel()
  public short SK_MC_LOUD::GetSPCost(short)
  public int SK_MC_LOUD::IsAvailableJob(short)
  public void SK_MC_LOUD(const class SK_MC_LOUD &)
  public void SK_MC_LOUD()
  public void ~SK_MC_LOUD()
  public class SK_MC_LOUD & operator=(const class SK_MC_LOUD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_MAMMONITE {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_MAMMONITE::Init()
  public int SK_MC_MAMMONITE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MC_MAMMONITE::GetSPCost(short)
  public void SK_MC_MAMMONITE(const class SK_MC_MAMMONITE &)
  public void SK_MC_MAMMONITE()
  public void ~SK_MC_MAMMONITE()
  public class SK_MC_MAMMONITE & operator=(const class SK_MC_MAMMONITE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_OVERCHARGE {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_OVERCHARGE::Init()
  public int SK_MC_OVERCHARGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MC_OVERCHARGE(const class SK_MC_OVERCHARGE &)
  public void SK_MC_OVERCHARGE()
  public void ~SK_MC_OVERCHARGE()
  public class SK_MC_OVERCHARGE & operator=(const class SK_MC_OVERCHARGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_PUSHCART {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_PUSHCART::Init()
  public int SK_MC_PUSHCART::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MC_PUSHCART(const class SK_MC_PUSHCART &)
  public void SK_MC_PUSHCART()
  public void ~SK_MC_PUSHCART()
  public class SK_MC_PUSHCART & operator=(const class SK_MC_PUSHCART &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MC_VENDING {
  SK_MERCHANT, offset = 0x0

  public void SK_MC_VENDING::Init()
  public int SK_MC_VENDING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MC_VENDING::GetSPCost(short)
  public void SK_MC_VENDING(const class SK_MC_VENDING &)
  public void SK_MC_VENDING()
  public void ~SK_MC_VENDING()
  public class SK_MC_VENDING & operator=(const class SK_MC_VENDING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MERCHANT {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_MERCHANT::GetMaxLevel()
  public int SK_MERCHANT::IsAvailableJob(short)
  public short SK_MERCHANT::GetSPCost(short)
  public short SK_MERCHANT::GetPreDelayTime(short)
  public void SK_MERCHANT(const class SK_MERCHANT &)
  public void SK_MERCHANT::SK_MERCHANT()
  public void SK_MERCHANT::~SK_MERCHANT()
  public class SK_MERCHANT & operator=(const class SK_MERCHANT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_AUTOBERSERK {
  SK_SM_AUTOBERSERK, offset = 0x0

  public void SK_MER_AUTOBERSERK::Init()
  public void SK_MER_AUTOBERSERK(const class SK_MER_AUTOBERSERK &)
  public void SK_MER_AUTOBERSERK()
  public void ~SK_MER_AUTOBERSERK()
  public class SK_MER_AUTOBERSERK & operator=(const class SK_MER_AUTOBERSERK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_BENEDICTION {
  CSkillTypeInfo2, offset = 0x0

  public void SK_MER_BENEDICTION(const class SK_MER_BENEDICTION &)
  public void SK_MER_BENEDICTION::SK_MER_BENEDICTION()
  public void ~SK_MER_BENEDICTION()
  public class SK_MER_BENEDICTION & operator=(const class SK_MER_BENEDICTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_BLESSING {
  SK_AL_BLESSING, offset = 0x0

  public void SK_MER_BLESSING::Init()
  public void SK_MER_BLESSING(const class SK_MER_BLESSING &)
  public void SK_MER_BLESSING()
  public void ~SK_MER_BLESSING()
  public class SK_MER_BLESSING & operator=(const class SK_MER_BLESSING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_COMPRESS {
  CSkillTypeInfo2, offset = 0x0

  public void SK_MER_COMPRESS(const class SK_MER_COMPRESS &)
  public void SK_MER_COMPRESS::SK_MER_COMPRESS()
  public void ~SK_MER_COMPRESS()
  public class SK_MER_COMPRESS & operator=(const class SK_MER_COMPRESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_CRASH {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MER_CRASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MER_CRASH(const class SK_MER_CRASH &)
  public void SK_MER_CRASH::SK_MER_CRASH()
  public void ~SK_MER_CRASH()
  public class SK_MER_CRASH & operator=(const class SK_MER_CRASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_DECAGI {
  SK_AL_DECAGI, offset = 0x0

  public void SK_MER_DECAGI::Init()
  public void SK_MER_DECAGI(const class SK_MER_DECAGI &)
  public void SK_MER_DECAGI()
  public void ~SK_MER_DECAGI()
  public class SK_MER_DECAGI & operator=(const class SK_MER_DECAGI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_ESTIMATION {
  SK_WZ_ESTIMATION, offset = 0x0

  public void SK_MER_ESTIMATION::Init()
  public void SK_MER_ESTIMATION(const class SK_MER_ESTIMATION &)
  public void SK_MER_ESTIMATION()
  public void ~SK_MER_ESTIMATION()
  public class SK_MER_ESTIMATION & operator=(const class SK_MER_ESTIMATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_INCAGI {
  SK_AL_INCAGI, offset = 0x0

  public void SK_MER_INCAGI::Init()
  public void SK_MER_INCAGI(const class SK_MER_INCAGI &)
  public void SK_MER_INCAGI()
  public void ~SK_MER_INCAGI()
  public class SK_MER_INCAGI & operator=(const class SK_MER_INCAGI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_KYRIE {
  SK_PR_KYRIE, offset = 0x0

  public void SK_MER_KYRIE::Init()
  public void SK_MER_KYRIE(const class SK_MER_KYRIE &)
  public void SK_MER_KYRIE()
  public void ~SK_MER_KYRIE()
  public class SK_MER_KYRIE & operator=(const class SK_MER_KYRIE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_LEXDIVINA {
  SK_PR_LEXDIVINA, offset = 0x0

  public void SK_MER_LEXDIVINA::Init()
  public void SK_MER_LEXDIVINA(const class SK_MER_LEXDIVINA &)
  public void SK_MER_LEXDIVINA()
  public void ~SK_MER_LEXDIVINA()
  public class SK_MER_LEXDIVINA & operator=(const class SK_MER_LEXDIVINA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_MAGNIFICAT {
  SK_PR_MAGNIFICAT, offset = 0x0

  public void SK_MER_MAGNIFICAT::Init()
  public void SK_MER_MAGNIFICAT(const class SK_MER_MAGNIFICAT &)
  public void SK_MER_MAGNIFICAT()
  public void ~SK_MER_MAGNIFICAT()
  public class SK_MER_MAGNIFICAT & operator=(const class SK_MER_MAGNIFICAT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_MENTALCURE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_MER_MENTALCURE(const class SK_MER_MENTALCURE &)
  public void SK_MER_MENTALCURE::SK_MER_MENTALCURE()
  public void ~SK_MER_MENTALCURE()
  public class SK_MER_MENTALCURE & operator=(const class SK_MER_MENTALCURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_PROVOKE {
  SK_SM_PROVOKE, offset = 0x0

  public void SK_MER_PROVOKE::Init()
  public void SK_MER_PROVOKE(const class SK_MER_PROVOKE &)
  public void SK_MER_PROVOKE()
  public void ~SK_MER_PROVOKE()
  public class SK_MER_PROVOKE & operator=(const class SK_MER_PROVOKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_QUICKEN {
  SK_KN_TWOHANDQUICKEN, offset = 0x0

  public void SK_MER_QUICKEN::Init()
  public void SK_MER_QUICKEN(const class SK_MER_QUICKEN &)
  public void SK_MER_QUICKEN()
  public void ~SK_MER_QUICKEN()
  public class SK_MER_QUICKEN & operator=(const class SK_MER_QUICKEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_RECUPERATE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_MER_RECUPERATE(const class SK_MER_RECUPERATE &)
  public void SK_MER_RECUPERATE::SK_MER_RECUPERATE()
  public void ~SK_MER_RECUPERATE()
  public class SK_MER_RECUPERATE & operator=(const class SK_MER_RECUPERATE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_REGAIN {
  CSkillTypeInfo2, offset = 0x0

  public void SK_MER_REGAIN(const class SK_MER_REGAIN &)
  public void SK_MER_REGAIN::SK_MER_REGAIN()
  public void ~SK_MER_REGAIN()
  public class SK_MER_REGAIN & operator=(const class SK_MER_REGAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_SCAPEGOAT {
  CSkillTypeInfo2, offset = 0x0

  public void SK_MER_SCAPEGOAT(const class SK_MER_SCAPEGOAT &)
  public void SK_MER_SCAPEGOAT::SK_MER_SCAPEGOAT()
  public void ~SK_MER_SCAPEGOAT()
  public class SK_MER_SCAPEGOAT & operator=(const class SK_MER_SCAPEGOAT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_SIGHT {
  SK_MG_SIGHT, offset = 0x0

  public void SK_MER_SIGHT::Init()
  public void SK_MER_SIGHT(const class SK_MER_SIGHT &)
  public void SK_MER_SIGHT()
  public void ~SK_MER_SIGHT()
  public class SK_MER_SIGHT & operator=(const class SK_MER_SIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MER_TENDER {
  CSkillTypeInfo2, offset = 0x0

  public void SK_MER_TENDER(const class SK_MER_TENDER &)
  public void SK_MER_TENDER::SK_MER_TENDER()
  public void ~SK_MER_TENDER()
  public class SK_MER_TENDER & operator=(const class SK_MER_TENDER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_COLDBOLT {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_COLDBOLT::Init()
  public int SK_MG_COLDBOLT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_COLDBOLT::GetSPCost(short)
  public short SK_MG_COLDBOLT::GetPreDelayTime(short)
  public void SK_MG_COLDBOLT(const class SK_MG_COLDBOLT &)
  public void SK_MG_COLDBOLT()
  public void ~SK_MG_COLDBOLT()
  public class SK_MG_COLDBOLT & operator=(const class SK_MG_COLDBOLT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_ENERGYCOAT {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_ENERGYCOAT::Init()
  public int SK_MG_ENERGYCOAT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_ENERGYCOAT::GetMaxLevel()
  public short SK_MG_ENERGYCOAT::GetSPCost(short)
  public short SK_MG_ENERGYCOAT::GetPreDelayTime(short)
  public int SK_MG_ENERGYCOAT::IsAvailableJob(short)
  public void SK_MG_ENERGYCOAT(const class SK_MG_ENERGYCOAT &)
  public void SK_MG_ENERGYCOAT()
  public void ~SK_MG_ENERGYCOAT()
  public class SK_MG_ENERGYCOAT & operator=(const class SK_MG_ENERGYCOAT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_FIREBALL {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_FIREBALL::Init()
  public int SK_MG_FIREBALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_FIREBALL::GetSPCost(short)
  public short SK_MG_FIREBALL::GetPreDelayTime(short)
  public void SK_MG_FIREBALL(const class SK_MG_FIREBALL &)
  public void SK_MG_FIREBALL()
  public void ~SK_MG_FIREBALL()
  public class SK_MG_FIREBALL & operator=(const class SK_MG_FIREBALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_FIREBOLT {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_FIREBOLT::Init()
  public int SK_MG_FIREBOLT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_FIREBOLT::GetSPCost(short)
  public short SK_MG_FIREBOLT::GetPreDelayTime(short)
  public void SK_MG_FIREBOLT(const class SK_MG_FIREBOLT &)
  public void SK_MG_FIREBOLT()
  public void ~SK_MG_FIREBOLT()
  public class SK_MG_FIREBOLT & operator=(const class SK_MG_FIREBOLT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_FIREWALL {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_FIREWALL::Init()
  public int SK_MG_FIREWALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_FIREWALL::GetSPCost(short)
  public short SK_MG_FIREWALL::GetPreDelayTime(short)
  public void SK_MG_FIREWALL(const class SK_MG_FIREWALL &)
  public void SK_MG_FIREWALL()
  public void ~SK_MG_FIREWALL()
  public class SK_MG_FIREWALL & operator=(const class SK_MG_FIREWALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_FROSTDIVER {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_FROSTDIVER::Init()
  public int SK_MG_FROSTDIVER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_FROSTDIVER::GetSPCost(short)
  public short SK_MG_FROSTDIVER::GetPreDelayTime(short)
  public void SK_MG_FROSTDIVER(const class SK_MG_FROSTDIVER &)
  public void SK_MG_FROSTDIVER()
  public void ~SK_MG_FROSTDIVER()
  public class SK_MG_FROSTDIVER & operator=(const class SK_MG_FROSTDIVER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_LIGHTNINGBOLT {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_LIGHTNINGBOLT::Init()
  public int SK_MG_LIGHTNINGBOLT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_LIGHTNINGBOLT::GetSPCost(short)
  public short SK_MG_LIGHTNINGBOLT::GetPreDelayTime(short)
  public void SK_MG_LIGHTNINGBOLT(const class SK_MG_LIGHTNINGBOLT &)
  public void SK_MG_LIGHTNINGBOLT()
  public void ~SK_MG_LIGHTNINGBOLT()
  public class SK_MG_LIGHTNINGBOLT & operator=(const class SK_MG_LIGHTNINGBOLT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_NAPALMBEAT {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_NAPALMBEAT::Init()
  public int SK_MG_NAPALMBEAT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_NAPALMBEAT::GetSPCost(short)
  public short SK_MG_NAPALMBEAT::GetPreDelayTime(short)
  public void SK_MG_NAPALMBEAT(const class SK_MG_NAPALMBEAT &)
  public void SK_MG_NAPALMBEAT()
  public void ~SK_MG_NAPALMBEAT()
  public class SK_MG_NAPALMBEAT & operator=(const class SK_MG_NAPALMBEAT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_SAFETYWALL {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_SAFETYWALL::Init()
  public int SK_MG_SAFETYWALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MG_SAFETYWALL::IsAvailableJob(short)
  public short SK_MG_SAFETYWALL::GetSPCost(short)
  public short SK_MG_SAFETYWALL::GetPreDelayTime(short)
  public void SK_MG_SAFETYWALL(const class SK_MG_SAFETYWALL &)
  public void SK_MG_SAFETYWALL()
  public void ~SK_MG_SAFETYWALL()
  public class SK_MG_SAFETYWALL & operator=(const class SK_MG_SAFETYWALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_SIGHT {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_SIGHT::Init()
  public int SK_MG_SIGHT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_SIGHT::GetMaxLevel()
  public short SK_MG_SIGHT::GetSPCost(short)
  public void SK_MG_SIGHT(const class SK_MG_SIGHT &)
  public void SK_MG_SIGHT::SK_MG_SIGHT()
  public void SK_MG_SIGHT::~SK_MG_SIGHT()
  public class SK_MG_SIGHT & operator=(const class SK_MG_SIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_SOULSTRIKE {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_SOULSTRIKE::Init()
  public int SK_MG_SOULSTRIKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_SOULSTRIKE::GetSPCost(short)
  public short SK_MG_SOULSTRIKE::GetPreDelayTime(short)
  public void SK_MG_SOULSTRIKE(const class SK_MG_SOULSTRIKE &)
  public void SK_MG_SOULSTRIKE()
  public void ~SK_MG_SOULSTRIKE()
  public class SK_MG_SOULSTRIKE & operator=(const class SK_MG_SOULSTRIKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_SRECOVERY {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_SRECOVERY::Init()
  public int SK_MG_SRECOVERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MG_SRECOVERY::IsAvailableJob(short)
  public void SK_MG_SRECOVERY(const class SK_MG_SRECOVERY &)
  public void SK_MG_SRECOVERY()
  public void ~SK_MG_SRECOVERY()
  public class SK_MG_SRECOVERY & operator=(const class SK_MG_SRECOVERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_STONECURSE {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_STONECURSE::Init()
  public int SK_MG_STONECURSE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_STONECURSE::GetSPCost(short)
  public short SK_MG_STONECURSE::GetPreDelayTime(short)
  public void SK_MG_STONECURSE(const class SK_MG_STONECURSE &)
  public void SK_MG_STONECURSE()
  public void ~SK_MG_STONECURSE()
  public class SK_MG_STONECURSE & operator=(const class SK_MG_STONECURSE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MG_THUNDERSTORM {
  SK_MAGICIAN, offset = 0x0

  public void SK_MG_THUNDERSTORM::Init()
  public int SK_MG_THUNDERSTORM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MG_THUNDERSTORM::GetSPCost(short)
  public short SK_MG_THUNDERSTORM::GetPreDelayTime(short)
  public short SK_MG_THUNDERSTORM::GetPostDelayTM(short)
  public void SK_MG_THUNDERSTORM(const class SK_MG_THUNDERSTORM &)
  public void SK_MG_THUNDERSTORM()
  public void ~SK_MG_THUNDERSTORM()
  public class SK_MG_THUNDERSTORM & operator=(const class SK_MG_THUNDERSTORM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_ANGRIFFS_MODUS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_ANGRIFFS_MODUS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const int SK_MH_ANGRIFFS_MODUS::GetATKValue(const int)
  public const int SK_MH_ANGRIFFS_MODUS::GetDEFValue(const int)
  public const int SK_MH_ANGRIFFS_MODUS::GetFleeValue(const int)
  public const int SK_MH_ANGRIFFS_MODUS::GetDelayTime(const int)
  public void SK_MH_ANGRIFFS_MODUS(const class SK_MH_ANGRIFFS_MODUS &)
  public void SK_MH_ANGRIFFS_MODUS()
  public void ~SK_MH_ANGRIFFS_MODUS()
  public class SK_MH_ANGRIFFS_MODUS & operator=(const class SK_MH_ANGRIFFS_MODUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_CBC {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_CBC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_CBC::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetNeedNumOfSpirits()
  public void SK_MH_CBC(const class SK_MH_CBC &)
  public void SK_MH_CBC()
  public void ~SK_MH_CBC()
  public class SK_MH_CBC & operator=(const class SK_MH_CBC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_EQC {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_EQC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_EQC::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetNeedNumOfSpirits()
  public void SK_MH_EQC(const class SK_MH_EQC &)
  public void SK_MH_EQC()
  public void ~SK_MH_EQC()
  public class SK_MH_EQC & operator=(const class SK_MH_EQC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_ERASER_CUTTER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_ERASER_CUTTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const int SK_MH_ERASER_CUTTER::GetSkillProperty(const int)
  public void SK_MH_ERASER_CUTTER(const class SK_MH_ERASER_CUTTER &)
  public void SK_MH_ERASER_CUTTER()
  public void ~SK_MH_ERASER_CUTTER()
  public class SK_MH_ERASER_CUTTER & operator=(const class SK_MH_ERASER_CUTTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_GOLDENE_FERSE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_GOLDENE_FERSE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const int SK_MH_GOLDENE_FERSE::GetFleeValue(const int)
  public const int SK_MH_GOLDENE_FERSE::GetAspdPercent(const int)
  public const int SK_MH_GOLDENE_FERSE::GetPROPERTY_SAINTPercent(const int)
  public const int SK_MH_GOLDENE_FERSE::GetDelayTime(const int)
  public void SK_MH_GOLDENE_FERSE(const class SK_MH_GOLDENE_FERSE &)
  public void SK_MH_GOLDENE_FERSE()
  public void ~SK_MH_GOLDENE_FERSE()
  public class SK_MH_GOLDENE_FERSE & operator=(const class SK_MH_GOLDENE_FERSE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_GRANITIC_ARMOR {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_GRANITIC_ARMOR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const int SK_MH_GRANITIC_ARMOR::GetDelayTime(const int)
  public void SK_MH_GRANITIC_ARMOR(const class SK_MH_GRANITIC_ARMOR &)
  public void SK_MH_GRANITIC_ARMOR()
  public void ~SK_MH_GRANITIC_ARMOR()
  public class SK_MH_GRANITIC_ARMOR & operator=(const class SK_MH_GRANITIC_ARMOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_HEILIGE_STANGE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_HEILIGE_STANGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_HEILIGE_STANGE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public const int SK_MH_HEILIGE_STANGE::GetSplashRange(const int)
  public void SK_MH_HEILIGE_STANGE(const class SK_MH_HEILIGE_STANGE &)
  public void SK_MH_HEILIGE_STANGE()
  public void ~SK_MH_HEILIGE_STANGE()
  public class SK_MH_HEILIGE_STANGE & operator=(const class SK_MH_HEILIGE_STANGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_LAVA_SLIDE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_LAVA_SLIDE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_LAVA_SLIDE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_MH_LAVA_SLIDE::GetDelayTime(const int)
  public int SK_MH_LAVA_SLIDE::GetSplashRange(const int)
  public int GetExpireCount(const int)
  public int GetInvinsibleTime(const int)
  public void SK_MH_LAVA_SLIDE(const class SK_MH_LAVA_SLIDE &)
  public void SK_MH_LAVA_SLIDE()
  public void ~SK_MH_LAVA_SLIDE()
  public class SK_MH_LAVA_SLIDE & operator=(const class SK_MH_LAVA_SLIDE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_LIGHT_OF_REGENE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_LIGHT_OF_REGENE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_LIGHT_OF_REGENE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public const int SK_MH_LIGHT_OF_REGENE::GetDelayTime(const int)
  public void SK_MH_LIGHT_OF_REGENE(const class SK_MH_LIGHT_OF_REGENE &)
  public void SK_MH_LIGHT_OF_REGENE()
  public void ~SK_MH_LIGHT_OF_REGENE()
  public class SK_MH_LIGHT_OF_REGENE & operator=(const class SK_MH_LIGHT_OF_REGENE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_MAGMA_FLOW {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_MAGMA_FLOW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const int SK_MH_MAGMA_FLOW::GetDelayTime(const int)
  public const int SK_MH_MAGMA_FLOW::GetOperatePercent(const int)
  public const int SK_MH_MAGMA_FLOW::GetSplashRange(const int)
  public void SK_MH_MAGMA_FLOW(const class SK_MH_MAGMA_FLOW &)
  public void SK_MH_MAGMA_FLOW()
  public void ~SK_MH_MAGMA_FLOW()
  public class SK_MH_MAGMA_FLOW & operator=(const class SK_MH_MAGMA_FLOW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_MIDNIGHT_FRENZY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_MIDNIGHT_FRENZY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_MIDNIGHT_FRENZY::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public const int SK_MH_MIDNIGHT_FRENZY::GetFearPercent(const int)
  public int GetNeedNumOfSpirits()
  public void SK_MH_MIDNIGHT_FRENZY(const class SK_MH_MIDNIGHT_FRENZY &)
  public void SK_MH_MIDNIGHT_FRENZY()
  public void ~SK_MH_MIDNIGHT_FRENZY()
  public class SK_MH_MIDNIGHT_FRENZY & operator=(const class SK_MH_MIDNIGHT_FRENZY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_NEEDLE_OF_PARALYZE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_NEEDLE_OF_PARALYZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const int SK_MH_NEEDLE_OF_PARALYZE::GetParalyzePercent(const int)
  public void SK_MH_NEEDLE_OF_PARALYZE(const class SK_MH_NEEDLE_OF_PARALYZE &)
  public void SK_MH_NEEDLE_OF_PARALYZE()
  public void ~SK_MH_NEEDLE_OF_PARALYZE()
  public class SK_MH_NEEDLE_OF_PARALYZE & operator=(const class SK_MH_NEEDLE_OF_PARALYZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_OVERED_BOOST {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_OVERED_BOOST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_OVERED_BOOST::GetFleeValue(const int)
  public int SK_MH_OVERED_BOOST::GetASPDValue(const int)
  public int SK_MH_OVERED_BOOST::GetDelayTime(const int)
  public void SK_MH_OVERED_BOOST(const class SK_MH_OVERED_BOOST &)
  public void SK_MH_OVERED_BOOST()
  public void ~SK_MH_OVERED_BOOST()
  public class SK_MH_OVERED_BOOST & operator=(const class SK_MH_OVERED_BOOST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_PAIN_KILLER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_PAIN_KILLER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_PAIN_KILLER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public const int SK_MH_PAIN_KILLER::GetDelayTime(const int)
  public void SK_MH_PAIN_KILLER(const class SK_MH_PAIN_KILLER &)
  public void SK_MH_PAIN_KILLER()
  public void ~SK_MH_PAIN_KILLER()
  public class SK_MH_PAIN_KILLER & operator=(const class SK_MH_PAIN_KILLER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_POISON_MIST {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_POISON_MIST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_POISON_MIST::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_MH_POISON_MIST::GetGNDRange(short)
  public const int SK_MH_POISON_MIST::GetMistDelayTime(const int)
  public const int SK_MH_POISON_MIST::GetBlindPercent(const int)
  public const int SK_MH_POISON_MIST::GetBlindDelayTime(const int)
  public const int SK_MH_POISON_MIST::GetInvinsibleTime(const int)
  public void SK_MH_POISON_MIST(const class SK_MH_POISON_MIST &)
  public void SK_MH_POISON_MIST()
  public void ~SK_MH_POISON_MIST()
  public class SK_MH_POISON_MIST & operator=(const class SK_MH_POISON_MIST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_PYROCLASTIC {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_PYROCLASTIC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const int SK_MH_PYROCLASTIC::GetDelayTime(const int)
  public int GetHammerFallPercent(const int)
  public void SK_MH_PYROCLASTIC(const class SK_MH_PYROCLASTIC &)
  public void SK_MH_PYROCLASTIC()
  public void ~SK_MH_PYROCLASTIC()
  public class SK_MH_PYROCLASTIC & operator=(const class SK_MH_PYROCLASTIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_SILENT_BREEZE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_SILENT_BREEZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public const int SK_MH_SILENT_BREEZE::GetDelayTime(const int)
  public const int GetSilentPercent(const int)
  public void SK_MH_SILENT_BREEZE(const class SK_MH_SILENT_BREEZE &)
  public void SK_MH_SILENT_BREEZE()
  public void ~SK_MH_SILENT_BREEZE()
  public class SK_MH_SILENT_BREEZE & operator=(const class SK_MH_SILENT_BREEZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_SILVERVEIN_RUSH {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_SILVERVEIN_RUSH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_SILVERVEIN_RUSH::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public const int SK_MH_SILVERVEIN_RUSH::GetStunPercent(const int)
  public int GetNeedNumOfSpirits()
  public void SK_MH_SILVERVEIN_RUSH(const class SK_MH_SILVERVEIN_RUSH &)
  public void SK_MH_SILVERVEIN_RUSH()
  public void ~SK_MH_SILVERVEIN_RUSH()
  public class SK_MH_SILVERVEIN_RUSH & operator=(const class SK_MH_SILVERVEIN_RUSH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_SONIC_CLAW {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_SONIC_CLAW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_SONIC_CLAW::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetNeedNumOfSpirits()
  public void SK_MH_SONIC_CLAW(const class SK_MH_SONIC_CLAW &)
  public void SK_MH_SONIC_CLAW()
  public void ~SK_MH_SONIC_CLAW()
  public class SK_MH_SONIC_CLAW & operator=(const class SK_MH_SONIC_CLAW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_STAHL_HORN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_STAHL_HORN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_STAHL_HORN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_MH_STAHL_HORN::GetKnockbackDistance(const int)
  public int SK_MH_STAHL_HORN::GetStunPercent(const int)
  public void SK_MH_STAHL_HORN(const class SK_MH_STAHL_HORN &)
  public void SK_MH_STAHL_HORN()
  public void ~SK_MH_STAHL_HORN()
  public class SK_MH_STAHL_HORN & operator=(const class SK_MH_STAHL_HORN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_STEINWAND {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_STEINWAND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_STEINWAND::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_MH_STEINWAND::GetDefenceCount(const int)
  public int SK_MH_STEINWAND::GetDelayTime(const int)
  public void SK_MH_STEINWAND(const class SK_MH_STEINWAND &)
  public void SK_MH_STEINWAND()
  public void ~SK_MH_STEINWAND()
  public class SK_MH_STEINWAND & operator=(const class SK_MH_STEINWAND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_STYLE_CHANGE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_STYLE_CHANGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MH_STYLE_CHANGE(const class SK_MH_STYLE_CHANGE &)
  public void SK_MH_STYLE_CHANGE()
  public void ~SK_MH_STYLE_CHANGE()
  public class SK_MH_STYLE_CHANGE & operator=(const class SK_MH_STYLE_CHANGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_SUMMON_LEGION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_SUMMON_LEGION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_SUMMON_LEGION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_MH_SUMMON_LEGION::GetSummonLegionJob(const int)
  public int SK_MH_SUMMON_LEGION::GetMaxSummonCount(const int)
  public int SK_MH_SUMMON_LEGION::GetSummonLegionDelayTime(const int)
  public void SK_MH_SUMMON_LEGION(const class SK_MH_SUMMON_LEGION &)
  public void SK_MH_SUMMON_LEGION()
  public void ~SK_MH_SUMMON_LEGION()
  public class SK_MH_SUMMON_LEGION & operator=(const class SK_MH_SUMMON_LEGION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_TINDER_BREAKER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_TINDER_BREAKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_TINDER_BREAKER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetNeedNumOfSpirits()
  public void SK_MH_TINDER_BREAKER(const class SK_MH_TINDER_BREAKER &)
  public void SK_MH_TINDER_BREAKER()
  public void ~SK_MH_TINDER_BREAKER()
  public class SK_MH_TINDER_BREAKER & operator=(const class SK_MH_TINDER_BREAKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_VOLCANIC_ASH {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_VOLCANIC_ASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_VOLCANIC_ASH::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_MH_VOLCANIC_ASH::GetGNDRange(short)
  public const int SK_MH_VOLCANIC_ASH::GetDelayTime(const int)
  public int GetMaxVolcanicAshCount(const int)
  public int GetInvinsibleTime(const int)
  public int GetEFST_VOLCANIC_ASHDelayTime(const int)
  public void SK_MH_VOLCANIC_ASH(const class SK_MH_VOLCANIC_ASH &)
  public void SK_MH_VOLCANIC_ASH()
  public void ~SK_MH_VOLCANIC_ASH()
  public class SK_MH_VOLCANIC_ASH & operator=(const class SK_MH_VOLCANIC_ASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MH_XENO_SLASHER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MH_XENO_SLASHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MH_XENO_SLASHER::GetSplashRange(const int)
  public int SK_MH_XENO_SLASHER::GetSkillProperty(const int)
  public void SK_MH_XENO_SLASHER(const class SK_MH_XENO_SLASHER &)
  public void SK_MH_XENO_SLASHER()
  public void ~SK_MH_XENO_SLASHER()
  public class SK_MH_XENO_SLASHER & operator=(const class SK_MH_XENO_SLASHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MI_ECHOSONG {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MI_ECHOSONG::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MI_ECHOSONG::GetEFSTLifeTM(const int)
  public int SK_MI_ECHOSONG::GetApplyRadiusRange(const int)
  public int SK_MI_ECHOSONG::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_MI_ECHOSONG(const class SK_MI_ECHOSONG &)
  public void SK_MI_ECHOSONG::SK_MI_ECHOSONG()
  public void ~SK_MI_ECHOSONG()
  public class SK_MI_ECHOSONG & operator=(const class SK_MI_ECHOSONG &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MI_HARMONIZE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MI_HARMONIZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MI_HARMONIZE::GetEFSTLifeTM(const int)
  public int SK_MI_HARMONIZE::GetAllStatReduceAmount(const int)
  public int SK_MI_HARMONIZE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_MI_HARMONIZE(const class SK_MI_HARMONIZE &)
  public void SK_MI_HARMONIZE::SK_MI_HARMONIZE()
  public void ~SK_MI_HARMONIZE()
  public class SK_MI_HARMONIZE & operator=(const class SK_MI_HARMONIZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MI_RUSH_WINDMILL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_MI_RUSH_WINDMILL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_MI_RUSH_WINDMILL::GetEFSTLifeTM(const int)
  public int SK_MI_RUSH_WINDMILL::GetApplyRadiusRange(const int)
  public int SK_MI_RUSH_WINDMILL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_MI_RUSH_WINDMILL(const class SK_MI_RUSH_WINDMILL &)
  public void SK_MI_RUSH_WINDMILL::SK_MI_RUSH_WINDMILL()
  public void ~SK_MI_RUSH_WINDMILL()
  public class SK_MI_RUSH_WINDMILL & operator=(const class SK_MI_RUSH_WINDMILL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ML_AUTOGUARD {
  SK_CR_AUTOGUARD, offset = 0x0

  public void SK_ML_AUTOGUARD::Init()
  public void SK_ML_AUTOGUARD(const class SK_ML_AUTOGUARD &)
  public void SK_ML_AUTOGUARD()
  public void ~SK_ML_AUTOGUARD()
  public class SK_ML_AUTOGUARD & operator=(const class SK_ML_AUTOGUARD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ML_BRANDISH {
  SK_KN_BRANDISHSPEAR, offset = 0x0

  public void SK_ML_BRANDISH::Init()
  public int SK_ML_BRANDISH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_ML_BRANDISH(const class SK_ML_BRANDISH &)
  public void SK_ML_BRANDISH()
  public void ~SK_ML_BRANDISH()
  public class SK_ML_BRANDISH & operator=(const class SK_ML_BRANDISH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ML_DEFENDER {
  SK_CR_DEFENDER, offset = 0x0

  public void SK_ML_DEFENDER::Init()
  public void SK_ML_DEFENDER(const class SK_ML_DEFENDER &)
  public void SK_ML_DEFENDER()
  public void ~SK_ML_DEFENDER()
  public class SK_ML_DEFENDER & operator=(const class SK_ML_DEFENDER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ML_DEVOTION {
  SK_CR_DEVOTION, offset = 0x0

  public void SK_ML_DEVOTION::Init()
  public void SK_ML_DEVOTION(const class SK_ML_DEVOTION &)
  public void SK_ML_DEVOTION()
  public void ~SK_ML_DEVOTION()
  public class SK_ML_DEVOTION & operator=(const class SK_ML_DEVOTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ML_PIERCE {
  SK_KN_PIERCE, offset = 0x0

  public void SK_ML_PIERCE::Init()
  public int SK_ML_PIERCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_ML_PIERCE(const class SK_ML_PIERCE &)
  public void SK_ML_PIERCE()
  public void ~SK_ML_PIERCE()
  public class SK_ML_PIERCE & operator=(const class SK_ML_PIERCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ML_SPIRALPIERCE {
  SK_LK_SPIRALPIERCE, offset = 0x0

  public void SK_ML_SPIRALPIERCE::Init()
  public int SK_ML_SPIRALPIERCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_ML_SPIRALPIERCE(const class SK_ML_SPIRALPIERCE &)
  public void SK_ML_SPIRALPIERCE()
  public void ~SK_ML_SPIRALPIERCE()
  public class SK_ML_SPIRALPIERCE & operator=(const class SK_ML_SPIRALPIERCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MONK {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_MONK::GetMaxLevel()
  public int SK_MONK::IsAvailableJob(short)
  public short SK_MONK::GetSPCost(short)
  public short SK_MONK::GetPreDelayTime(short)
  public void SK_MONK(const class SK_MONK &)
  public void SK_MONK::SK_MONK()
  public void SK_MONK::~SK_MONK()
  public class SK_MONK & operator=(const class SK_MONK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_ABSORBSPIRITS {
  SK_MONK, offset = 0x0

  public void SK_MO_ABSORBSPIRITS::Init()
  public int SK_MO_ABSORBSPIRITS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_ABSORBSPIRITS::GetMaxLevel()
  public short SK_MO_ABSORBSPIRITS::GetSPCost(short)
  public short SK_MO_ABSORBSPIRITS::GetPreDelayTime(short)
  public void SK_MO_ABSORBSPIRITS(const class SK_MO_ABSORBSPIRITS &)
  public void SK_MO_ABSORBSPIRITS::SK_MO_ABSORBSPIRITS()
  public void ~SK_MO_ABSORBSPIRITS()
  public class SK_MO_ABSORBSPIRITS & operator=(const class SK_MO_ABSORBSPIRITS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_BALKYOUNG {
  SK_MONK, offset = 0x0

  public void SK_MO_BALKYOUNG::Init()
  public int SK_MO_BALKYOUNG::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_BALKYOUNG::GetMaxLevel()
  public short SK_MO_BALKYOUNG::GetSPCost(short)
  public short SK_MO_BALKYOUNG::GetPostDelayTM(short)
  public void SK_MO_BALKYOUNG(const class SK_MO_BALKYOUNG &)
  public void SK_MO_BALKYOUNG::SK_MO_BALKYOUNG()
  public void ~SK_MO_BALKYOUNG()
  public class SK_MO_BALKYOUNG & operator=(const class SK_MO_BALKYOUNG &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_BLADESTOP {
  SK_MONK, offset = 0x0

  public void SK_MO_BLADESTOP::Init()
  public int SK_MO_BLADESTOP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_BLADESTOP::GetMaxLevel()
  public short SK_MO_BLADESTOP::GetSPCost(short)
  public void SK_MO_BLADESTOP(const class SK_MO_BLADESTOP &)
  public void SK_MO_BLADESTOP::SK_MO_BLADESTOP()
  public void ~SK_MO_BLADESTOP()
  public class SK_MO_BLADESTOP & operator=(const class SK_MO_BLADESTOP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_BODYRELOCATION {
  SK_MONK, offset = 0x0

  public void SK_MO_BODYRELOCATION::Init()
  public int SK_MO_BODYRELOCATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_BODYRELOCATION::GetMaxLevel()
  public short SK_MO_BODYRELOCATION::GetSPCost(short)
  public void SK_MO_BODYRELOCATION(const class SK_MO_BODYRELOCATION &)
  public void SK_MO_BODYRELOCATION::SK_MO_BODYRELOCATION()
  public void ~SK_MO_BODYRELOCATION()
  public class SK_MO_BODYRELOCATION & operator=(const class SK_MO_BODYRELOCATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_CALLSPIRITS {
  SK_MONK, offset = 0x0

  public void SK_MO_CALLSPIRITS::Init()
  public int SK_MO_CALLSPIRITS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_CALLSPIRITS::GetMaxLevel()
  public short SK_MO_CALLSPIRITS::GetSPCost(short)
  public short SK_MO_CALLSPIRITS::GetPreDelayTime(short)
  public void SK_MO_CALLSPIRITS(const class SK_MO_CALLSPIRITS &)
  public void SK_MO_CALLSPIRITS::SK_MO_CALLSPIRITS()
  public void ~SK_MO_CALLSPIRITS()
  public class SK_MO_CALLSPIRITS & operator=(const class SK_MO_CALLSPIRITS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_CHAINCOMBO {
  SK_MONK, offset = 0x0

  public void SK_MO_CHAINCOMBO::Init()
  public int SK_MO_CHAINCOMBO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_CHAINCOMBO::GetMaxLevel()
  public short SK_MO_CHAINCOMBO::GetSPCost(short)
  public void SK_MO_CHAINCOMBO(const class SK_MO_CHAINCOMBO &)
  public void SK_MO_CHAINCOMBO::SK_MO_CHAINCOMBO()
  public void ~SK_MO_CHAINCOMBO()
  public class SK_MO_CHAINCOMBO & operator=(const class SK_MO_CHAINCOMBO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_COMBOFINISH {
  SK_MONK, offset = 0x0

  public void SK_MO_COMBOFINISH::Init()
  public int SK_MO_COMBOFINISH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_COMBOFINISH::GetMaxLevel()
  public short SK_MO_COMBOFINISH::GetSPCost(short)
  public void SK_MO_COMBOFINISH(const class SK_MO_COMBOFINISH &)
  public void SK_MO_COMBOFINISH::SK_MO_COMBOFINISH()
  public void ~SK_MO_COMBOFINISH()
  public class SK_MO_COMBOFINISH & operator=(const class SK_MO_COMBOFINISH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_DODGE {
  SK_MONK, offset = 0x0

  public void SK_MO_DODGE::Init()
  public int SK_MO_DODGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MO_DODGE(const class SK_MO_DODGE &)
  public void SK_MO_DODGE::SK_MO_DODGE()
  public void ~SK_MO_DODGE()
  public class SK_MO_DODGE & operator=(const class SK_MO_DODGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_EXPLOSIONSPIRITS {
  SK_MONK, offset = 0x0

  public void SK_MO_EXPLOSIONSPIRITS::Init()
  public int SK_MO_EXPLOSIONSPIRITS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_EXPLOSIONSPIRITS::GetMaxLevel()
  public short SK_MO_EXPLOSIONSPIRITS::GetSPCost(short)
  public void SK_MO_EXPLOSIONSPIRITS(const class SK_MO_EXPLOSIONSPIRITS &)
  public void SK_MO_EXPLOSIONSPIRITS::SK_MO_EXPLOSIONSPIRITS()
  public void ~SK_MO_EXPLOSIONSPIRITS()
  public class SK_MO_EXPLOSIONSPIRITS & operator=(const class SK_MO_EXPLOSIONSPIRITS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_EXTREMITYFIST {
  SK_MONK, offset = 0x0

  public void SK_MO_EXTREMITYFIST::Init()
  public int SK_MO_EXTREMITYFIST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_EXTREMITYFIST::GetMaxLevel()
  public short SK_MO_EXTREMITYFIST::GetSPCost(short)
  public short SK_MO_EXTREMITYFIST::GetPreDelayTime(short)
  public void SK_MO_EXTREMITYFIST(const class SK_MO_EXTREMITYFIST &)
  public void SK_MO_EXTREMITYFIST::SK_MO_EXTREMITYFIST()
  public void ~SK_MO_EXTREMITYFIST()
  public class SK_MO_EXTREMITYFIST & operator=(const class SK_MO_EXTREMITYFIST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_FINGEROFFENSIVE {
  SK_MONK, offset = 0x0

  public void SK_MO_FINGEROFFENSIVE::Init()
  public int SK_MO_FINGEROFFENSIVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_FINGEROFFENSIVE::GetMaxLevel()
  public short SK_MO_FINGEROFFENSIVE::GetSPCost(short)
  public short SK_MO_FINGEROFFENSIVE::GetPreDelayTime(short)
  public void SK_MO_FINGEROFFENSIVE(const class SK_MO_FINGEROFFENSIVE &)
  public void SK_MO_FINGEROFFENSIVE::SK_MO_FINGEROFFENSIVE()
  public void ~SK_MO_FINGEROFFENSIVE()
  public class SK_MO_FINGEROFFENSIVE & operator=(const class SK_MO_FINGEROFFENSIVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_INVESTIGATE {
  SK_MONK, offset = 0x0

  public void SK_MO_INVESTIGATE::Init()
  public int SK_MO_INVESTIGATE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_INVESTIGATE::GetMaxLevel()
  public short SK_MO_INVESTIGATE::GetSPCost(short)
  public short SK_MO_INVESTIGATE::GetPreDelayTime(short)
  public void SK_MO_INVESTIGATE(const class SK_MO_INVESTIGATE &)
  public void SK_MO_INVESTIGATE::SK_MO_INVESTIGATE()
  public void ~SK_MO_INVESTIGATE()
  public class SK_MO_INVESTIGATE & operator=(const class SK_MO_INVESTIGATE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_IRONHAND {
  SK_MONK, offset = 0x0

  public void SK_MO_IRONHAND::Init()
  public int SK_MO_IRONHAND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MO_IRONHAND(const class SK_MO_IRONHAND &)
  public void SK_MO_IRONHAND::SK_MO_IRONHAND()
  public void ~SK_MO_IRONHAND()
  public class SK_MO_IRONHAND & operator=(const class SK_MO_IRONHAND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_KITRANSLATION {
  SK_MONK, offset = 0x0

  public void SK_MO_KITRANSLATION::Init()
  public int SK_MO_KITRANSLATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_KITRANSLATION::GetMaxLevel()
  public short SK_MO_KITRANSLATION::GetSPCost(short)
  public short SK_MO_KITRANSLATION::GetPreDelayTime(short)
  public short SK_MO_KITRANSLATION::GetPostDelayTM(short)
  public void SK_MO_KITRANSLATION(const class SK_MO_KITRANSLATION &)
  public void SK_MO_KITRANSLATION::SK_MO_KITRANSLATION()
  public void ~SK_MO_KITRANSLATION()
  public class SK_MO_KITRANSLATION & operator=(const class SK_MO_KITRANSLATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_SPIRITSRECOVERY {
  SK_MONK, offset = 0x0

  public void SK_MO_SPIRITSRECOVERY::Init()
  public int SK_MO_SPIRITSRECOVERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_SPIRITSRECOVERY::GetMaxLevel()
  public void SK_MO_SPIRITSRECOVERY(const class SK_MO_SPIRITSRECOVERY &)
  public void SK_MO_SPIRITSRECOVERY::SK_MO_SPIRITSRECOVERY()
  public void ~SK_MO_SPIRITSRECOVERY()
  public class SK_MO_SPIRITSRECOVERY & operator=(const class SK_MO_SPIRITSRECOVERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_STEELBODY {
  SK_MONK, offset = 0x0

  public void SK_MO_STEELBODY::Init()
  public int SK_MO_STEELBODY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_MO_STEELBODY::GetMaxLevel()
  public short SK_MO_STEELBODY::GetSPCost(short)
  public short SK_MO_STEELBODY::GetPreDelayTime(short)
  public void SK_MO_STEELBODY(const class SK_MO_STEELBODY &)
  public void SK_MO_STEELBODY::SK_MO_STEELBODY()
  public void ~SK_MO_STEELBODY()
  public class SK_MO_STEELBODY & operator=(const class SK_MO_STEELBODY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MO_TRIPLEATTACK {
  SK_MONK, offset = 0x0

  public void SK_MO_TRIPLEATTACK::Init()
  public int SK_MO_TRIPLEATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MO_TRIPLEATTACK(const class SK_MO_TRIPLEATTACK &)
  public void SK_MO_TRIPLEATTACK::SK_MO_TRIPLEATTACK()
  public void ~SK_MO_TRIPLEATTACK()
  public class SK_MO_TRIPLEATTACK & operator=(const class SK_MO_TRIPLEATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MS_BASH {
  SK_SM_BASH, offset = 0x0

  public void SK_MS_BASH::Init()
  public int SK_MS_BASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MS_BASH(const class SK_MS_BASH &)
  public void SK_MS_BASH()
  public void ~SK_MS_BASH()
  public class SK_MS_BASH & operator=(const class SK_MS_BASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MS_BERSERK {
  SK_LK_BERSERK, offset = 0x0

  public void SK_MS_BERSERK::Init()
  public void SK_MS_BERSERK(const class SK_MS_BERSERK &)
  public void SK_MS_BERSERK()
  public void ~SK_MS_BERSERK()
  public class SK_MS_BERSERK & operator=(const class SK_MS_BERSERK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MS_BOWLINGBASH {
  SK_KN_BOWLINGBASH, offset = 0x0

  public void SK_MS_BOWLINGBASH::Init()
  public int SK_MS_BOWLINGBASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MS_BOWLINGBASH(const class SK_MS_BOWLINGBASH &)
  public void SK_MS_BOWLINGBASH()
  public void ~SK_MS_BOWLINGBASH()
  public class SK_MS_BOWLINGBASH & operator=(const class SK_MS_BOWLINGBASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MS_MAGNUM {
  SK_SM_MAGNUM, offset = 0x0

  public void SK_MS_MAGNUM::Init()
  public int SK_MS_MAGNUM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_MS_MAGNUM(const class SK_MS_MAGNUM &)
  public void SK_MS_MAGNUM()
  public void ~SK_MS_MAGNUM()
  public class SK_MS_MAGNUM & operator=(const class SK_MS_MAGNUM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MS_PARRYING {
  SK_LK_PARRYING, offset = 0x0

  public void SK_MS_PARRYING::Init()
  public void SK_MS_PARRYING(const class SK_MS_PARRYING &)
  public void SK_MS_PARRYING()
  public void ~SK_MS_PARRYING()
  public class SK_MS_PARRYING & operator=(const class SK_MS_PARRYING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MS_REFLECTSHIELD {
  SK_CR_REFLECTSHIELD, offset = 0x0

  public void SK_MS_REFLECTSHIELD::Init()
  public void SK_MS_REFLECTSHIELD(const class SK_MS_REFLECTSHIELD &)
  public void SK_MS_REFLECTSHIELD()
  public void ~SK_MS_REFLECTSHIELD()
  public class SK_MS_REFLECTSHIELD & operator=(const class SK_MS_REFLECTSHIELD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_MUTATION_BASEJOB {
  CSkillTypeInfo2, offset = 0x0

  public short SK_MUTATION_BASEJOB::GetMaxLevel()
  public void SK_MUTATION_BASEJOB(const class SK_MUTATION_BASEJOB &)
  public void SK_MUTATION_BASEJOB()
  public void ~SK_MUTATION_BASEJOB()
  public class SK_MUTATION_BASEJOB & operator=(const class SK_MUTATION_BASEJOB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_ACCELERATION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_ACCELERATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_ACCELERATION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_ACCELERATION::GetLifeTM(const int)
  public void SK_NC_ACCELERATION(const class SK_NC_ACCELERATION &)
  public void SK_NC_ACCELERATION::SK_NC_ACCELERATION()
  public void ~SK_NC_ACCELERATION()
  public class SK_NC_ACCELERATION & operator=(const class SK_NC_ACCELERATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_ANALYZE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_ANALYZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_ANALYZE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_ANALYZE::GetApplySuccessPercent(const int)
  public int SK_NC_ANALYZE::GetDecDEForMDEFpercent(const int)
  public int SK_NC_ANALYZE::GetLifeTM(const int)
  public void SK_NC_ANALYZE(const class SK_NC_ANALYZE &)
  public void SK_NC_ANALYZE::SK_NC_ANALYZE()
  public void ~SK_NC_ANALYZE()
  public class SK_NC_ANALYZE & operator=(const class SK_NC_ANALYZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_ARMSCANNON {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NC_ARMSCANNON::Init()
  public int SK_NC_ARMSCANNON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_ARMSCANNON::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_ARMSCANNON::GetApplyRadiusRange(const int)
  public static int GetPlusATKpercent(const int, class CCharacter *)
  private int GetPlusATKpercetSMALL(const int)
  private int GetPlusATKpercetMEDIUM(const int)
  private int GetPlusATKpercetBIG(const int)
  public void SK_NC_ARMSCANNON(const class SK_NC_ARMSCANNON &)
  public void SK_NC_ARMSCANNON::SK_NC_ARMSCANNON()
  public void ~SK_NC_ARMSCANNON()
  public class SK_NC_ARMSCANNON & operator=(const class SK_NC_ARMSCANNON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_AXEBOOMERANG {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_AXEBOOMERANG::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_AXEBOOMERANG::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_AXEBOOMERANG::GetKnockBackRange(const int)
  public void SK_NC_AXEBOOMERANG(const class SK_NC_AXEBOOMERANG &)
  public void SK_NC_AXEBOOMERANG::SK_NC_AXEBOOMERANG()
  public void ~SK_NC_AXEBOOMERANG()
  public class SK_NC_AXEBOOMERANG & operator=(const class SK_NC_AXEBOOMERANG &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_AXETORNADO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_AXETORNADO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_AXETORNADO::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_AXETORNADO::GetReduceHPamount(const int)
  public int SK_NC_AXETORNADO::GetApplyRadiusRange(const int)
  public void SK_NC_AXETORNADO(const class SK_NC_AXETORNADO &)
  public void SK_NC_AXETORNADO::SK_NC_AXETORNADO()
  public void ~SK_NC_AXETORNADO()
  public class SK_NC_AXETORNADO & operator=(const class SK_NC_AXETORNADO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_BOOSTKNUCKLE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_BOOSTKNUCKLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_BOOSTKNUCKLE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_NC_BOOSTKNUCKLE(const class SK_NC_BOOSTKNUCKLE &)
  public void SK_NC_BOOSTKNUCKLE::SK_NC_BOOSTKNUCKLE()
  public void ~SK_NC_BOOSTKNUCKLE()
  public class SK_NC_BOOSTKNUCKLE & operator=(const class SK_NC_BOOSTKNUCKLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_B_SIDESLIDE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_B_SIDESLIDE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_B_SIDESLIDE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_NC_B_SIDESLIDE(const class SK_NC_B_SIDESLIDE &)
  public void SK_NC_B_SIDESLIDE::SK_NC_B_SIDESLIDE()
  public void ~SK_NC_B_SIDESLIDE()
  public class SK_NC_B_SIDESLIDE & operator=(const class SK_NC_B_SIDESLIDE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_COLDSLOWER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_COLDSLOWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_COLDSLOWER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_COLDSLOWER::GetApplyRadiusRange(const int)
  public int SK_NC_COLDSLOWER::GetFREEZINGSuccessPercent(const int)
  public int SK_NC_COLDSLOWER::GetFROSTMISTYSuccessPercent(const int)
  public static void SK_NC_COLDSLOWER::OperationATKSuccess(class CPC *, const int, class CCharacter *)
  public void SK_NC_COLDSLOWER(const class SK_NC_COLDSLOWER &)
  public void SK_NC_COLDSLOWER::SK_NC_COLDSLOWER()
  public void ~SK_NC_COLDSLOWER()
  public class SK_NC_COLDSLOWER & operator=(const class SK_NC_COLDSLOWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_DISJOINT {
  SK_NC_FAW, offset = 0x0

  public int SK_NC_DISJOINT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_DISJOINT::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_NC_DISJOINT(const class SK_NC_DISJOINT &)
  public void SK_NC_DISJOINT::SK_NC_DISJOINT()
  public void ~SK_NC_DISJOINT()
  public class SK_NC_DISJOINT & operator=(const class SK_NC_DISJOINT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_EMERGENCYCOOL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_EMERGENCYCOOL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_EMERGENCYCOOL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_EMERGENCYCOOL::GetDecOverHeatLimitPointAmount(class CPC *)
  public void SK_NC_EMERGENCYCOOL(const class SK_NC_EMERGENCYCOOL &)
  public void SK_NC_EMERGENCYCOOL::SK_NC_EMERGENCYCOOL()
  public void ~SK_NC_EMERGENCYCOOL()
  public class SK_NC_EMERGENCYCOOL & operator=(const class SK_NC_EMERGENCYCOOL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_FAW {
  CSkillTypeInfo2, offset = 0x0

    public static bool SK_NC_FAW::IsFAW(const int)
  public static bool SK_NC_FAW::IsMyFAW(class CPC *, class CCharacter *)
  public void SK_NC_FAW(const class SK_NC_FAW &)
  public void SK_NC_FAW()
  public void SK_NC_FAW::~SK_NC_FAW()
  public class SK_NC_FAW & operator=(const class SK_NC_FAW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_FLAMELAUNCHER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_FLAMELAUNCHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_FLAMELAUNCHER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public static void SK_NC_FLAMELAUNCHER::OperationATKSuccess(class CPC *, const int, class CCharacter *)
  public int SK_NC_FLAMELAUNCHER::GetBURNNINGSuccessPercent(const int)
  public int SK_NC_FLAMELAUNCHER::GetBURNNINGLifeTM(const int)
  public int SK_NC_FLAMELAUNCHER::GetApplyRadiusRange(const int)
  public void SK_NC_FLAMELAUNCHER(const class SK_NC_FLAMELAUNCHER &)
  public void SK_NC_FLAMELAUNCHER::SK_NC_FLAMELAUNCHER()
  public void ~SK_NC_FLAMELAUNCHER()
  public class SK_NC_FLAMELAUNCHER & operator=(const class SK_NC_FLAMELAUNCHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_F_SIDESLIDE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_F_SIDESLIDE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_F_SIDESLIDE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_NC_F_SIDESLIDE(const class SK_NC_F_SIDESLIDE &)
  public void SK_NC_F_SIDESLIDE::SK_NC_F_SIDESLIDE()
  public void ~SK_NC_F_SIDESLIDE()
  public class SK_NC_F_SIDESLIDE & operator=(const class SK_NC_F_SIDESLIDE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_HOVERING {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_HOVERING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_HOVERING::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_HOVERING::GetLifeTM(const int)
  public void SK_NC_HOVERING(const class SK_NC_HOVERING &)
  public void SK_NC_HOVERING::SK_NC_HOVERING()
  public void ~SK_NC_HOVERING()
  public class SK_NC_HOVERING & operator=(const class SK_NC_HOVERING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_INFRAREDSCAN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_INFRAREDSCAN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_INFRAREDSCAN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_NC_INFRAREDSCAN(const class SK_NC_INFRAREDSCAN &)
  public void SK_NC_INFRAREDSCAN::SK_NC_INFRAREDSCAN()
  public void ~SK_NC_INFRAREDSCAN()
  public class SK_NC_INFRAREDSCAN & operator=(const class SK_NC_INFRAREDSCAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_MADOGEAR {
  CSkillTypeInfo2, offset = 0x0

  public static bool SK_NC_MADOGEAR::IsTarget(const int)
  public static bool SK_NC_MADOGEAR::IsSkillUseable(const int)
  public void SK_NC_MADOGEAR(const class SK_NC_MADOGEAR &)
  public void SK_NC_MADOGEAR()
  public void ~SK_NC_MADOGEAR()
  public class SK_NC_MADOGEAR & operator=(const class SK_NC_MADOGEAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_MADOLICENCE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_MADOLICENCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public static int SK_NC_MADOLICENCE::GetPlusATKamount(const int)
  public static int SK_NC_MADOLICENCE::GetMoveSlowPercent(const int)
  public void SK_NC_MADOLICENCE(const class SK_NC_MADOLICENCE &)
  public void SK_NC_MADOLICENCE::SK_NC_MADOLICENCE()
  public void ~SK_NC_MADOLICENCE()
  public class SK_NC_MADOLICENCE & operator=(const class SK_NC_MADOLICENCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_MAGICDECOY {
  SK_NC_FAW, offset = 0x0

      /* [0x0002:0x00027de8] */ static  const struct SK_NC_MAGICDECOY::tagMappingData[0x4] m_MappingDataTbl
  public int SK_NC_MAGICDECOY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_MAGICDECOY::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public bool SK_NC_MAGICDECOY::IsExistConditionItem(class CPC *)
  public bool SK_NC_MAGICDECOY::ConsumeItem(class CPC *, const bool, const int)
  public int SK_NC_MAGICDECOY::GetMonsterJob(const int)
  public int SK_NC_MAGICDECOY::GetLifeTM(const int)
  public int SK_NC_MAGICDECOY::GetPlusMATKamount(const int)
  public void SK_NC_MAGICDECOY(const class SK_NC_MAGICDECOY &)
  public void SK_NC_MAGICDECOY::SK_NC_MAGICDECOY()
  public void ~SK_NC_MAGICDECOY()
  public class SK_NC_MAGICDECOY & operator=(const class SK_NC_MAGICDECOY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct SK_NC_MAGICDECOY::tagMappingData {
  /* this+0x0 */ int PropertyItemID
  /* this+0x4 */ int CreateMonsterJob
}

class SK_NC_MAGNETICFIELD {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_MAGNETICFIELD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_MAGNETICFIELD::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_MAGNETICFIELD::GetApplyRadiusRange(const int)
  public int SK_NC_MAGNETICFIELD::GetEFSTLifeTM(const int)
  public int SK_NC_MAGNETICFIELD::GetReduceSPamountPerSecond(const int)
  public void SK_NC_MAGNETICFIELD(const class SK_NC_MAGNETICFIELD &)
  public void SK_NC_MAGNETICFIELD::SK_NC_MAGNETICFIELD()
  public void ~SK_NC_MAGNETICFIELD()
  public class SK_NC_MAGNETICFIELD & operator=(const class SK_NC_MAGNETICFIELD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_MAINFRAME {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_MAINFRAME::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public static int SK_NC_MAINFRAME::GetExpireOverHeatLimitPoint(class CPC *)
  private int SK_NC_MAINFRAME::GetIncDEFamount(const int)
  private int SK_NC_MAINFRAME::GetAdditionalMaxOverHeatLimitPoint(const int)
  public void SK_NC_MAINFRAME(const class SK_NC_MAINFRAME &)
  public void SK_NC_MAINFRAME::SK_NC_MAINFRAME()
  public void ~SK_NC_MAINFRAME()
  public class SK_NC_MAINFRAME & operator=(const class SK_NC_MAINFRAME &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_NEUTRALBARRIER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_NEUTRALBARRIER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_NEUTRALBARRIER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public static int SK_NC_NEUTRALBARRIER::GetIncDEForMDEFpercent(const int)
  public int SK_NC_NEUTRALBARRIER::GetLifeTM(const int)
  public void SK_NC_NEUTRALBARRIER(const class SK_NC_NEUTRALBARRIER &)
  public void SK_NC_NEUTRALBARRIER::SK_NC_NEUTRALBARRIER()
  public void ~SK_NC_NEUTRALBARRIER()
  public class SK_NC_NEUTRALBARRIER & operator=(const class SK_NC_NEUTRALBARRIER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_PILEBUNKER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_PILEBUNKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_PILEBUNKER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_PILEBUNKER::GetResetBuffPercent(const int)
  public void SK_NC_PILEBUNKER(const class SK_NC_PILEBUNKER &)
  public void SK_NC_PILEBUNKER::SK_NC_PILEBUNKER()
  public void ~SK_NC_PILEBUNKER()
  public class SK_NC_PILEBUNKER & operator=(const class SK_NC_PILEBUNKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_POWERSWING {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_POWERSWING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_POWERSWING::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_NC_POWERSWING(const class SK_NC_POWERSWING &)
  public void SK_NC_POWERSWING::SK_NC_POWERSWING()
  public void ~SK_NC_POWERSWING()
  public class SK_NC_POWERSWING & operator=(const class SK_NC_POWERSWING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_REPAIR {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_REPAIR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_REPAIR::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_REPAIR::GetRecoveryHPpercent(const int)
  public int SK_NC_REPAIR::GetMustHaveItem(const int)
  public void SK_NC_REPAIR(const class SK_NC_REPAIR &)
  public void SK_NC_REPAIR::SK_NC_REPAIR()
  public void ~SK_NC_REPAIR()
  public class SK_NC_REPAIR & operator=(const class SK_NC_REPAIR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_RESEARCHFE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_RESEARCHFE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public static int SK_NC_RESEARCHFE::GetPlusDEFamountByFIREorGROUND(class CPC *)
  public static int SK_NC_RESEARCHFE::GetPlusATKamountByFIREorGROUND(const int)
  public void SK_NC_RESEARCHFE(const class SK_NC_RESEARCHFE &)
  public void SK_NC_RESEARCHFE::SK_NC_RESEARCHFE()
  public void ~SK_NC_RESEARCHFE()
  public class SK_NC_RESEARCHFE & operator=(const class SK_NC_RESEARCHFE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_SELFDESTRUCTION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_SELFDESTRUCTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_SELFDESTRUCTION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_SELFDESTRUCTION::GetApplyRadiusRange(const int)
  public void SK_NC_SELFDESTRUCTION(const class SK_NC_SELFDESTRUCTION &)
  public void SK_NC_SELFDESTRUCTION::SK_NC_SELFDESTRUCTION()
  public void ~SK_NC_SELFDESTRUCTION()
  public class SK_NC_SELFDESTRUCTION & operator=(const class SK_NC_SELFDESTRUCTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_SHAPESHIFT {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_SHAPESHIFT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_SHAPESHIFT::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_SHAPESHIFT::GetPropertyStoneItemID(const int)
  public int SK_NC_SHAPESHIFT::GetApplyPropertyID(const int)
  public int SK_NC_SHAPESHIFT::GetLifeTM(const int)
  public void SK_NC_SHAPESHIFT(const class SK_NC_SHAPESHIFT &)
  public void SK_NC_SHAPESHIFT::SK_NC_SHAPESHIFT()
  public void ~SK_NC_SHAPESHIFT()
  public class SK_NC_SHAPESHIFT & operator=(const class SK_NC_SHAPESHIFT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_SILVERSNIPER {
  SK_NC_FAW, offset = 0x0

  public int SK_NC_SILVERSNIPER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_SILVERSNIPER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_SILVERSNIPER::GetPlusATKamount(const int)
  public int SK_NC_SILVERSNIPER::GetLifeTM(const int)
  public void SK_NC_SILVERSNIPER(const class SK_NC_SILVERSNIPER &)
  public void SK_NC_SILVERSNIPER::SK_NC_SILVERSNIPER()
  public void ~SK_NC_SILVERSNIPER()
  public class SK_NC_SILVERSNIPER & operator=(const class SK_NC_SILVERSNIPER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_STEALTHFIELD {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_STEALTHFIELD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_STEALTHFIELD::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_NC_STEALTHFIELD::GetLifeTM(const int)
  public int SK_NC_STEALTHFIELD::GetReduceSPTime(const int)
  public void SK_NC_STEALTHFIELD(const class SK_NC_STEALTHFIELD &)
  public void SK_NC_STEALTHFIELD::SK_NC_STEALTHFIELD()
  public void ~SK_NC_STEALTHFIELD()
  public class SK_NC_STEALTHFIELD & operator=(const class SK_NC_STEALTHFIELD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_TRAININGAXE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_TRAININGAXE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public static int SK_NC_TRAININGAXE::GetPlusHitAmountByAXE(class CPC *)
  public static int SK_NC_TRAININGAXE::GetPlusHitAmountByMACE(class CPC *)
  public static int SK_NC_TRAININGAXE::GetPlusATKamount(class CPC *, const short)
  public void SK_NC_TRAININGAXE(const class SK_NC_TRAININGAXE &)
  public void SK_NC_TRAININGAXE::SK_NC_TRAININGAXE()
  public void ~SK_NC_TRAININGAXE()
  public class SK_NC_TRAININGAXE & operator=(const class SK_NC_TRAININGAXE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NC_VULCANARM {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NC_VULCANARM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NC_VULCANARM::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_NC_VULCANARM(const class SK_NC_VULCANARM &)
  public void SK_NC_VULCANARM::SK_NC_VULCANARM()
  public void ~SK_NC_VULCANARM()
  public class SK_NC_VULCANARM & operator=(const class SK_NC_VULCANARM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NINJA {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_NINJA::GetMaxLevel()
  public short SK_NINJA::GetSPCost(short)
  public short SK_NINJA::GetPreDelayTime(short)
  public void SK_NINJA(const class SK_NINJA &)
  public void SK_NINJA::SK_NINJA()
  public void SK_NINJA::~SK_NINJA()
  public class SK_NINJA & operator=(const class SK_NINJA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_BAKUENRYU {
  SK_NINJA, offset = 0x0

  public void SK_NJ_BAKUENRYU::Init()
  public int SK_NJ_BAKUENRYU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_BAKUENRYU::GetMaxLevel()
  public short SK_NJ_BAKUENRYU::GetSPCost(short)
  public short SK_NJ_BAKUENRYU::GetPreDelayTime(short)
  public short SK_NJ_BAKUENRYU::GetPostDelayTM(short)
  public void SK_NJ_BAKUENRYU(const class SK_NJ_BAKUENRYU &)
  public void SK_NJ_BAKUENRYU::SK_NJ_BAKUENRYU()
  public void ~SK_NJ_BAKUENRYU()
  public class SK_NJ_BAKUENRYU & operator=(const class SK_NJ_BAKUENRYU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_BUNSINJYUTSU {
  SK_NINJA, offset = 0x0

  public void SK_NJ_BUNSINJYUTSU::Init()
  public int SK_NJ_BUNSINJYUTSU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_BUNSINJYUTSU::GetSPCost(short)
  public short SK_NJ_BUNSINJYUTSU::GetPreDelayTime(short)
  public short SK_NJ_BUNSINJYUTSU::GetPostDelayTM(short)
  public void SK_NJ_BUNSINJYUTSU(const class SK_NJ_BUNSINJYUTSU &)
  public void SK_NJ_BUNSINJYUTSU::SK_NJ_BUNSINJYUTSU()
  public void ~SK_NJ_BUNSINJYUTSU()
  public class SK_NJ_BUNSINJYUTSU & operator=(const class SK_NJ_BUNSINJYUTSU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_HUUJIN {
  SK_NINJA, offset = 0x0

  public void SK_NJ_HUUJIN::Init()
  public int SK_NJ_HUUJIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_HUUJIN::GetSPCost(short)
  public short SK_NJ_HUUJIN::GetPreDelayTime(short)
  public short SK_NJ_HUUJIN::GetPostDelayTM(short)
  public void SK_NJ_HUUJIN(const class SK_NJ_HUUJIN &)
  public void SK_NJ_HUUJIN::SK_NJ_HUUJIN()
  public void ~SK_NJ_HUUJIN()
  public class SK_NJ_HUUJIN & operator=(const class SK_NJ_HUUJIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_HUUMA {
  SK_NINJA, offset = 0x0

  public void SK_NJ_HUUMA::Init()
  public int SK_NJ_HUUMA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_HUUMA::GetMaxLevel()
  public short SK_NJ_HUUMA::GetSPCost(short)
  public short SK_NJ_HUUMA::GetPreDelayTime(short)
  public short SK_NJ_HUUMA::GetPostDelayTM(short)
  public void SK_NJ_HUUMA(const class SK_NJ_HUUMA &)
  public void SK_NJ_HUUMA::SK_NJ_HUUMA()
  public void ~SK_NJ_HUUMA()
  public class SK_NJ_HUUMA & operator=(const class SK_NJ_HUUMA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_HYOUSENSOU {
  SK_NINJA, offset = 0x0

  public void SK_NJ_HYOUSENSOU::Init()
  public int SK_NJ_HYOUSENSOU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_HYOUSENSOU::GetSPCost(short)
  public short SK_NJ_HYOUSENSOU::GetPreDelayTime(short)
  public void SK_NJ_HYOUSENSOU(const class SK_NJ_HYOUSENSOU &)
  public void SK_NJ_HYOUSENSOU::SK_NJ_HYOUSENSOU()
  public void ~SK_NJ_HYOUSENSOU()
  public class SK_NJ_HYOUSENSOU & operator=(const class SK_NJ_HYOUSENSOU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_HYOUSYOURAKU {
  SK_NINJA, offset = 0x0

  public void SK_NJ_HYOUSYOURAKU::Init()
  public int SK_NJ_HYOUSYOURAKU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_HYOUSYOURAKU::GetMaxLevel()
  public short SK_NJ_HYOUSYOURAKU::GetSPCost(short)
  public short SK_NJ_HYOUSYOURAKU::GetPreDelayTime(short)
  public short SK_NJ_HYOUSYOURAKU::GetPostDelayTM(short)
  public void SK_NJ_HYOUSYOURAKU(const class SK_NJ_HYOUSYOURAKU &)
  public void SK_NJ_HYOUSYOURAKU::SK_NJ_HYOUSYOURAKU()
  public void ~SK_NJ_HYOUSYOURAKU()
  public class SK_NJ_HYOUSYOURAKU & operator=(const class SK_NJ_HYOUSYOURAKU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_ISSEN {
  SK_NINJA, offset = 0x0

  public void SK_NJ_ISSEN::Init()
  public int SK_NJ_ISSEN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_ISSEN::GetSPCost(short)
  public short SK_NJ_ISSEN::GetPostDelayTM(short)
  public void SK_NJ_ISSEN(const class SK_NJ_ISSEN &)
  public void SK_NJ_ISSEN::SK_NJ_ISSEN()
  public void ~SK_NJ_ISSEN()
  public class SK_NJ_ISSEN & operator=(const class SK_NJ_ISSEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_KAENSIN {
  SK_NINJA, offset = 0x0

  public void SK_NJ_KAENSIN::Init()
  public int SK_NJ_KAENSIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_KAENSIN::GetSPCost(short)
  public short SK_NJ_KAENSIN::GetPreDelayTime(short)
  public short SK_NJ_KAENSIN::GetPostDelayTM(short)
  public void SK_NJ_KAENSIN(const class SK_NJ_KAENSIN &)
  public void SK_NJ_KAENSIN::SK_NJ_KAENSIN()
  public void ~SK_NJ_KAENSIN()
  public class SK_NJ_KAENSIN & operator=(const class SK_NJ_KAENSIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_KAMAITACHI {
  SK_NINJA, offset = 0x0

  public void SK_NJ_KAMAITACHI::Init()
  public int SK_NJ_KAMAITACHI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_KAMAITACHI::GetMaxLevel()
  public short SK_NJ_KAMAITACHI::GetSPCost(short)
  public short SK_NJ_KAMAITACHI::GetPreDelayTime(short)
  public short SK_NJ_KAMAITACHI::GetAttackRange(int)
  public void SK_NJ_KAMAITACHI(const class SK_NJ_KAMAITACHI &)
  public void SK_NJ_KAMAITACHI::SK_NJ_KAMAITACHI()
  public void ~SK_NJ_KAMAITACHI()
  public class SK_NJ_KAMAITACHI & operator=(const class SK_NJ_KAMAITACHI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_KASUMIKIRI {
  SK_NINJA, offset = 0x0

  public void SK_NJ_KASUMIKIRI::Init()
  public int SK_NJ_KASUMIKIRI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_KASUMIKIRI::GetSPCost(short)
  public short SK_NJ_KASUMIKIRI::GetPostDelayTM(short)
  public void SK_NJ_KASUMIKIRI(const class SK_NJ_KASUMIKIRI &)
  public void SK_NJ_KASUMIKIRI::SK_NJ_KASUMIKIRI()
  public void ~SK_NJ_KASUMIKIRI()
  public class SK_NJ_KASUMIKIRI & operator=(const class SK_NJ_KASUMIKIRI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_KIRIKAGE {
  SK_NINJA, offset = 0x0

  public void SK_NJ_KIRIKAGE::Init()
  public int SK_NJ_KIRIKAGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_KIRIKAGE::GetMaxLevel()
  public short SK_NJ_KIRIKAGE::GetSPCost(short)
  public void SK_NJ_KIRIKAGE(const class SK_NJ_KIRIKAGE &)
  public void SK_NJ_KIRIKAGE::SK_NJ_KIRIKAGE()
  public void ~SK_NJ_KIRIKAGE()
  public class SK_NJ_KIRIKAGE & operator=(const class SK_NJ_KIRIKAGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_KOUENKA {
  SK_NINJA, offset = 0x0

  public void SK_NJ_KOUENKA::Init()
  public int SK_NJ_KOUENKA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_KOUENKA::GetSPCost(short)
  public short SK_NJ_KOUENKA::GetPreDelayTime(short)
  public void SK_NJ_KOUENKA(const class SK_NJ_KOUENKA &)
  public void SK_NJ_KOUENKA::SK_NJ_KOUENKA()
  public void ~SK_NJ_KOUENKA()
  public class SK_NJ_KOUENKA & operator=(const class SK_NJ_KOUENKA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_KUNAI {
  SK_NINJA, offset = 0x0

  public void SK_NJ_KUNAI::Init()
  public int SK_NJ_KUNAI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_KUNAI::GetMaxLevel()
  public short SK_NJ_KUNAI::GetSPCost(short)
  public short SK_NJ_KUNAI::GetPostDelayTM(short)
  public void SK_NJ_KUNAI(const class SK_NJ_KUNAI &)
  public void SK_NJ_KUNAI::SK_NJ_KUNAI()
  public void ~SK_NJ_KUNAI()
  public class SK_NJ_KUNAI & operator=(const class SK_NJ_KUNAI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_NEN {
  SK_NINJA, offset = 0x0

  public void SK_NJ_NEN::Init()
  public int SK_NJ_NEN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_NEN::GetMaxLevel()
  public short SK_NJ_NEN::GetSPCost(short)
  public short SK_NJ_NEN::GetPreDelayTime(short)
  public void SK_NJ_NEN(const class SK_NJ_NEN &)
  public void SK_NJ_NEN::SK_NJ_NEN()
  public void ~SK_NJ_NEN()
  public class SK_NJ_NEN & operator=(const class SK_NJ_NEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_NINPOU {
  SK_NINJA, offset = 0x0

  public void SK_NJ_NINPOU::Init()
  public int SK_NJ_NINPOU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NJ_NINPOU(const class SK_NJ_NINPOU &)
  public void SK_NJ_NINPOU::SK_NJ_NINPOU()
  public void ~SK_NJ_NINPOU()
  public class SK_NJ_NINPOU & operator=(const class SK_NJ_NINPOU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_RAIGEKISAI {
  SK_NINJA, offset = 0x0

  public void SK_NJ_RAIGEKISAI::Init()
  public int SK_NJ_RAIGEKISAI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_RAIGEKISAI::GetMaxLevel()
  public short SK_NJ_RAIGEKISAI::GetSPCost(short)
  public short SK_NJ_RAIGEKISAI::GetPreDelayTime(short)
  public void SK_NJ_RAIGEKISAI(const class SK_NJ_RAIGEKISAI &)
  public void SK_NJ_RAIGEKISAI::SK_NJ_RAIGEKISAI()
  public void ~SK_NJ_RAIGEKISAI()
  public class SK_NJ_RAIGEKISAI & operator=(const class SK_NJ_RAIGEKISAI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_SHADOWJUMP {
  SK_NINJA, offset = 0x0

  public void SK_NJ_SHADOWJUMP::Init()
  public int SK_NJ_SHADOWJUMP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_SHADOWJUMP::GetMaxLevel()
  public short SK_NJ_SHADOWJUMP::GetSPCost(short)
  public short SK_NJ_SHADOWJUMP::GetPostDelayTM(short)
  public short SK_NJ_SHADOWJUMP::GetAttackRange(int)
  public void SK_NJ_SHADOWJUMP(const class SK_NJ_SHADOWJUMP &)
  public void SK_NJ_SHADOWJUMP::SK_NJ_SHADOWJUMP()
  public void ~SK_NJ_SHADOWJUMP()
  public class SK_NJ_SHADOWJUMP & operator=(const class SK_NJ_SHADOWJUMP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_SUITON {
  SK_NINJA, offset = 0x0

  public void SK_NJ_SUITON::Init()
  public int SK_NJ_SUITON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_SUITON::GetSPCost(short)
  public short SK_NJ_SUITON::GetPreDelayTime(short)
  public short SK_NJ_SUITON::GetPostDelayTM(short)
  public void SK_NJ_SUITON(const class SK_NJ_SUITON &)
  public void SK_NJ_SUITON::SK_NJ_SUITON()
  public void ~SK_NJ_SUITON()
  public class SK_NJ_SUITON & operator=(const class SK_NJ_SUITON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_SYURIKEN {
  SK_NINJA, offset = 0x0

  public void SK_NJ_SYURIKEN::Init()
  public int SK_NJ_SYURIKEN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_SYURIKEN::GetSPCost(short)
  public void SK_NJ_SYURIKEN(const class SK_NJ_SYURIKEN &)
  public void SK_NJ_SYURIKEN::SK_NJ_SYURIKEN()
  public void ~SK_NJ_SYURIKEN()
  public class SK_NJ_SYURIKEN & operator=(const class SK_NJ_SYURIKEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_TATAMIGAESHI {
  SK_NINJA, offset = 0x0

  public void SK_NJ_TATAMIGAESHI::Init()
  public int SK_NJ_TATAMIGAESHI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_TATAMIGAESHI::GetMaxLevel()
  public short SK_NJ_TATAMIGAESHI::GetSPCost(short)
  public short SK_NJ_TATAMIGAESHI::GetPostDelayTM(short)
  public void SK_NJ_TATAMIGAESHI(const class SK_NJ_TATAMIGAESHI &)
  public void SK_NJ_TATAMIGAESHI::SK_NJ_TATAMIGAESHI()
  public void ~SK_NJ_TATAMIGAESHI()
  public class SK_NJ_TATAMIGAESHI & operator=(const class SK_NJ_TATAMIGAESHI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_TOBIDOUGU {
  SK_NINJA, offset = 0x0

  public void SK_NJ_TOBIDOUGU::Init()
  public int SK_NJ_TOBIDOUGU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NJ_TOBIDOUGU(const class SK_NJ_TOBIDOUGU &)
  public void SK_NJ_TOBIDOUGU::SK_NJ_TOBIDOUGU()
  public void ~SK_NJ_TOBIDOUGU()
  public class SK_NJ_TOBIDOUGU & operator=(const class SK_NJ_TOBIDOUGU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_UTSUSEMI {
  SK_NINJA, offset = 0x0

  public void SK_NJ_UTSUSEMI::Init()
  public int SK_NJ_UTSUSEMI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_UTSUSEMI::GetMaxLevel()
  public short SK_NJ_UTSUSEMI::GetSPCost(short)
  public short SK_NJ_UTSUSEMI::GetPostDelayTM(short)
  public void SK_NJ_UTSUSEMI(const class SK_NJ_UTSUSEMI &)
  public void SK_NJ_UTSUSEMI::SK_NJ_UTSUSEMI()
  public void ~SK_NJ_UTSUSEMI()
  public class SK_NJ_UTSUSEMI & operator=(const class SK_NJ_UTSUSEMI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NJ_ZENYNAGE {
  SK_NINJA, offset = 0x0

  public void SK_NJ_ZENYNAGE::Init()
  public int SK_NJ_ZENYNAGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NJ_ZENYNAGE::GetSPCost(short)
  public short SK_NJ_ZENYNAGE::GetPostDelayTM(short)
  public void SK_NJ_ZENYNAGE(const class SK_NJ_ZENYNAGE &)
  public void SK_NJ_ZENYNAGE::SK_NJ_ZENYNAGE()
  public void ~SK_NJ_ZENYNAGE()
  public class SK_NJ_ZENYNAGE & operator=(const class SK_NJ_ZENYNAGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_ACIDBREATH {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_ACIDBREATH(const class SK_NPC_ACIDBREATH &)
  public void SK_NPC_ACIDBREATH::SK_NPC_ACIDBREATH()
  public void ~SK_NPC_ACIDBREATH()
  public class SK_NPC_ACIDBREATH & operator=(const class SK_NPC_ACIDBREATH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_AGIUP {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_AGIUP::Init()
  public void SK_NPC_AGIUP(const class SK_NPC_AGIUP &)
  public void SK_NPC_AGIUP::SK_NPC_AGIUP()
  public void ~SK_NPC_AGIUP()
  public class SK_NPC_AGIUP & operator=(const class SK_NPC_AGIUP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_ALLHEAL {
  SK_NPC_CHARACTERSKILL, offset = 0x0

  public void SK_NPC_ALLHEAL::Init()
  public short SK_NPC_ALLHEAL::GetMaxLevel()
  public void SK_NPC_ALLHEAL(const class SK_NPC_ALLHEAL &)
  public void SK_NPC_ALLHEAL::SK_NPC_ALLHEAL()
  public void ~SK_NPC_ALLHEAL()
  public class SK_NPC_ALLHEAL & operator=(const class SK_NPC_ALLHEAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_ANTIMAGIC {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_ANTIMAGIC(const class SK_NPC_ANTIMAGIC &)
  public void SK_NPC_ANTIMAGIC::SK_NPC_ANTIMAGIC()
  public void ~SK_NPC_ANTIMAGIC()
  public class SK_NPC_ANTIMAGIC & operator=(const class SK_NPC_ANTIMAGIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_ARMORBRAKE {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_ARMORBRAKE::Init()
  public int SK_NPC_ARMORBRAKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_ARMORBRAKE(const class SK_NPC_ARMORBRAKE &)
  public void SK_NPC_ARMORBRAKE()
  public void ~SK_NPC_ARMORBRAKE()
  public class SK_NPC_ARMORBRAKE & operator=(const class SK_NPC_ARMORBRAKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_ASSASSINCROSS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NPC_ASSASSINCROSS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NPC_ASSASSINCROSS::GetPercentASP_UP(const int)
  public void SK_NPC_ASSASSINCROSS(const class SK_NPC_ASSASSINCROSS &)
  public void SK_NPC_ASSASSINCROSS::SK_NPC_ASSASSINCROSS()
  public void ~SK_NPC_ASSASSINCROSS()
  public class SK_NPC_ASSASSINCROSS & operator=(const class SK_NPC_ASSASSINCROSS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_ATTRICHANGE {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_ATTRICHANGE::Init()
  public int SK_NPC_ATTRICHANGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_ATTRICHANGE(const class SK_NPC_ATTRICHANGE &)
  public void SK_NPC_ATTRICHANGE()
  public void ~SK_NPC_ATTRICHANGE()
  public class SK_NPC_ATTRICHANGE & operator=(const class SK_NPC_ATTRICHANGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_BARRIER {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_BARRIER::Init()
  public void SK_NPC_BARRIER(const class SK_NPC_BARRIER &)
  public void SK_NPC_BARRIER()
  public void ~SK_NPC_BARRIER()
  public class SK_NPC_BARRIER & operator=(const class SK_NPC_BARRIER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_BLEEDING {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_BLEEDING(const class SK_NPC_BLEEDING &)
  public void SK_NPC_BLEEDING::SK_NPC_BLEEDING()
  public void ~SK_NPC_BLEEDING()
  public class SK_NPC_BLEEDING & operator=(const class SK_NPC_BLEEDING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_BLINDATTACK {
  SK_NPC_HANDICAPATTACK, offset = 0x0

  public void SK_NPC_BLINDATTACK::Init()
  public void SK_NPC_BLINDATTACK(const class SK_NPC_BLINDATTACK &)
  public void SK_NPC_BLINDATTACK()
  public void ~SK_NPC_BLINDATTACK()
  public class SK_NPC_BLINDATTACK & operator=(const class SK_NPC_BLINDATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_BLOODDRAIN {
  SK_NPC_CHARACTERSKILL, offset = 0x0

  public void SK_NPC_BLOODDRAIN::Init()
  public void SK_NPC_BLOODDRAIN(const class SK_NPC_BLOODDRAIN &)
  public void SK_NPC_BLOODDRAIN()
  public void ~SK_NPC_BLOODDRAIN()
  public class SK_NPC_BLOODDRAIN & operator=(const class SK_NPC_BLOODDRAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CALLSLAVE {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_CALLSLAVE::Init()
  public void SK_NPC_CALLSLAVE(const class SK_NPC_CALLSLAVE &)
  public void SK_NPC_CALLSLAVE::SK_NPC_CALLSLAVE()
  public void ~SK_NPC_CALLSLAVE()
  public class SK_NPC_CALLSLAVE & operator=(const class SK_NPC_CALLSLAVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEDARKNESS {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGEDARKNESS::Init()
  public int SK_NPC_CHANGEDARKNESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEDARKNESS(const class SK_NPC_CHANGEDARKNESS &)
  public void SK_NPC_CHANGEDARKNESS()
  public void ~SK_NPC_CHANGEDARKNESS()
  public class SK_NPC_CHANGEDARKNESS & operator=(const class SK_NPC_CHANGEDARKNESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEFIRE {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGEFIRE::Init()
  public int SK_NPC_CHANGEFIRE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEFIRE(const class SK_NPC_CHANGEFIRE &)
  public void SK_NPC_CHANGEFIRE()
  public void ~SK_NPC_CHANGEFIRE()
  public class SK_NPC_CHANGEFIRE & operator=(const class SK_NPC_CHANGEFIRE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEGROUND {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGEGROUND::Init()
  public int SK_NPC_CHANGEGROUND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEGROUND(const class SK_NPC_CHANGEGROUND &)
  public void SK_NPC_CHANGEGROUND()
  public void ~SK_NPC_CHANGEGROUND()
  public class SK_NPC_CHANGEGROUND & operator=(const class SK_NPC_CHANGEGROUND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEHOLY {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGEHOLY::Init()
  public int SK_NPC_CHANGEHOLY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEHOLY(const class SK_NPC_CHANGEHOLY &)
  public void SK_NPC_CHANGEHOLY()
  public void ~SK_NPC_CHANGEHOLY()
  public class SK_NPC_CHANGEHOLY & operator=(const class SK_NPC_CHANGEHOLY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEPOISON {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGEPOISON::Init()
  public int SK_NPC_CHANGEPOISON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEPOISON(const class SK_NPC_CHANGEPOISON &)
  public void SK_NPC_CHANGEPOISON()
  public void ~SK_NPC_CHANGEPOISON()
  public class SK_NPC_CHANGEPOISON & operator=(const class SK_NPC_CHANGEPOISON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEPROPERTY {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public int OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEPROPERTY(const class SK_NPC_CHANGEPROPERTY &)
  public void SK_NPC_CHANGEPROPERTY()
  public void ~SK_NPC_CHANGEPROPERTY()
  public class SK_NPC_CHANGEPROPERTY & operator=(const class SK_NPC_CHANGEPROPERTY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGETELEKINESIS {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGETELEKINESIS::Init()
  public int SK_NPC_CHANGETELEKINESIS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGETELEKINESIS(const class SK_NPC_CHANGETELEKINESIS &)
  public void SK_NPC_CHANGETELEKINESIS()
  public void ~SK_NPC_CHANGETELEKINESIS()
  public class SK_NPC_CHANGETELEKINESIS & operator=(const class SK_NPC_CHANGETELEKINESIS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEUNDEAD {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGEUNDEAD::Init()
  public int SK_NPC_CHANGEUNDEAD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEUNDEAD(const class SK_NPC_CHANGEUNDEAD &)
  public void SK_NPC_CHANGEUNDEAD()
  public void ~SK_NPC_CHANGEUNDEAD()
  public class SK_NPC_CHANGEUNDEAD & operator=(const class SK_NPC_CHANGEUNDEAD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEUNDEAD2 {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGEUNDEAD2::Init()
  public int SK_NPC_CHANGEUNDEAD2::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEUNDEAD2(const class SK_NPC_CHANGEUNDEAD2 &)
  public void SK_NPC_CHANGEUNDEAD2()
  public void ~SK_NPC_CHANGEUNDEAD2()
  public class SK_NPC_CHANGEUNDEAD2 & operator=(const class SK_NPC_CHANGEUNDEAD2 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEWATER {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGEWATER::Init()
  public int SK_NPC_CHANGEWATER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEWATER(const class SK_NPC_CHANGEWATER &)
  public void SK_NPC_CHANGEWATER()
  public void ~SK_NPC_CHANGEWATER()
  public class SK_NPC_CHANGEWATER & operator=(const class SK_NPC_CHANGEWATER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHANGEWIND {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CHANGEWIND::Init()
  public int SK_NPC_CHANGEWIND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHANGEWIND(const class SK_NPC_CHANGEWIND &)
  public void SK_NPC_CHANGEWIND()
  public void ~SK_NPC_CHANGEWIND()
  public class SK_NPC_CHANGEWIND & operator=(const class SK_NPC_CHANGEWIND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CHARACTERSKILL {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public int SK_NPC_CHARACTERSKILL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CHARACTERSKILL(const class SK_NPC_CHARACTERSKILL &)
  public void SK_NPC_CHARACTERSKILL::SK_NPC_CHARACTERSKILL()
  public void SK_NPC_CHARACTERSKILL::~SK_NPC_CHARACTERSKILL()
  public class SK_NPC_CHARACTERSKILL & operator=(const class SK_NPC_CHARACTERSKILL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_COMBOATTACK {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_COMBOATTACK::Init()
  public int SK_NPC_COMBOATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_COMBOATTACK(const class SK_NPC_COMBOATTACK &)
  public void SK_NPC_COMBOATTACK()
  public void ~SK_NPC_COMBOATTACK()
  public class SK_NPC_COMBOATTACK & operator=(const class SK_NPC_COMBOATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CRITICALSLASH {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_CRITICALSLASH::Init()
  public int SK_NPC_CRITICALSLASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_CRITICALSLASH(const class SK_NPC_CRITICALSLASH &)
  public void SK_NPC_CRITICALSLASH()
  public void ~SK_NPC_CRITICALSLASH()
  public class SK_NPC_CRITICALSLASH & operator=(const class SK_NPC_CRITICALSLASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CRITICALWOUND {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_CRITICALWOUND(const class SK_NPC_CRITICALWOUND &)
  public void SK_NPC_CRITICALWOUND::SK_NPC_CRITICALWOUND()
  public void ~SK_NPC_CRITICALWOUND()
  public class SK_NPC_CRITICALWOUND & operator=(const class SK_NPC_CRITICALWOUND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_CURSEATTACK {
  SK_NPC_HANDICAPATTACK, offset = 0x0

  public void SK_NPC_CURSEATTACK::Init()
  public void SK_NPC_CURSEATTACK(const class SK_NPC_CURSEATTACK &)
  public void SK_NPC_CURSEATTACK()
  public void ~SK_NPC_CURSEATTACK()
  public class SK_NPC_CURSEATTACK & operator=(const class SK_NPC_CURSEATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DARKBLESSING {
  SK_NPC_CHARACTERSKILL, offset = 0x0

  public void SK_NPC_DARKBLESSING::Init()
  public void SK_NPC_DARKBLESSING(const class SK_NPC_DARKBLESSING &)
  public void SK_NPC_DARKBLESSING()
  public void ~SK_NPC_DARKBLESSING()
  public class SK_NPC_DARKBLESSING & operator=(const class SK_NPC_DARKBLESSING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DARKBREATH {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_DARKBREATH::Init()
  public int SK_NPC_DARKBREATH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_DARKBREATH(const class SK_NPC_DARKBREATH &)
  public void SK_NPC_DARKBREATH()
  public void ~SK_NPC_DARKBREATH()
  public class SK_NPC_DARKBREATH & operator=(const class SK_NPC_DARKBREATH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DARKCROSS {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_DARKCROSS::Init()
  public int SK_NPC_DARKCROSS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_DARKCROSS(const class SK_NPC_DARKCROSS &)
  public void SK_NPC_DARKCROSS()
  public void ~SK_NPC_DARKCROSS()
  public class SK_NPC_DARKCROSS & operator=(const class SK_NPC_DARKCROSS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DARKNESSATTACK {
  SK_NPC_PROPERTYATTACK, offset = 0x0

  public void SK_NPC_DARKNESSATTACK::Init()
  public void SK_NPC_DARKNESSATTACK(const class SK_NPC_DARKNESSATTACK &)
  public void SK_NPC_DARKNESSATTACK()
  public void ~SK_NPC_DARKNESSATTACK()
  public class SK_NPC_DARKNESSATTACK & operator=(const class SK_NPC_DARKNESSATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DARKNESSBREATH {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_DARKNESSBREATH(const class SK_NPC_DARKNESSBREATH &)
  public void SK_NPC_DARKNESSBREATH::SK_NPC_DARKNESSBREATH()
  public void ~SK_NPC_DARKNESSBREATH()
  public class SK_NPC_DARKNESSBREATH & operator=(const class SK_NPC_DARKNESSBREATH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DARKSTRIKE {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_DARKSTRIKE::Init()
  public int SK_NPC_DARKSTRIKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_DARKSTRIKE(const class SK_NPC_DARKSTRIKE &)
  public void SK_NPC_DARKSTRIKE()
  public void ~SK_NPC_DARKSTRIKE()
  public class SK_NPC_DARKSTRIKE & operator=(const class SK_NPC_DARKSTRIKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DARKTHUNDER {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_DARKTHUNDER::Init()
  public int SK_NPC_DARKTHUNDER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_DARKTHUNDER(const class SK_NPC_DARKTHUNDER &)
  public void SK_NPC_DARKTHUNDER()
  public void ~SK_NPC_DARKTHUNDER()
  public class SK_NPC_DARKTHUNDER & operator=(const class SK_NPC_DARKTHUNDER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DEFENDER {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_DEFENDER::Init()
  public void SK_NPC_DEFENDER(const class SK_NPC_DEFENDER &)
  public void SK_NPC_DEFENDER()
  public void ~SK_NPC_DEFENDER()
  public class SK_NPC_DEFENDER & operator=(const class SK_NPC_DEFENDER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DISSONANCE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NPC_DISSONANCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NPC_DISSONANCE::GetDamage(const int)
  public void SK_NPC_DISSONANCE(const class SK_NPC_DISSONANCE &)
  public void SK_NPC_DISSONANCE::SK_NPC_DISSONANCE()
  public void ~SK_NPC_DISSONANCE()
  public class SK_NPC_DISSONANCE & operator=(const class SK_NPC_DISSONANCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_DRAGONFEAR {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_DRAGONFEAR(const class SK_NPC_DRAGONFEAR &)
  public void SK_NPC_DRAGONFEAR::SK_NPC_DRAGONFEAR()
  public void ~SK_NPC_DRAGONFEAR()
  public class SK_NPC_DRAGONFEAR & operator=(const class SK_NPC_DRAGONFEAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_EARTHQUAKE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_EARTHQUAKE(const class SK_NPC_EARTHQUAKE &)
  public void SK_NPC_EARTHQUAKE::SK_NPC_EARTHQUAKE()
  public void ~SK_NPC_EARTHQUAKE()
  public class SK_NPC_EARTHQUAKE & operator=(const class SK_NPC_EARTHQUAKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_EMOTION {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_EMOTION::Init()
  public void SK_NPC_EMOTION(const class SK_NPC_EMOTION &)
  public void SK_NPC_EMOTION()
  public void ~SK_NPC_EMOTION()
  public class SK_NPC_EMOTION & operator=(const class SK_NPC_EMOTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_EMOTION_ON {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_EMOTION_ON::Init()
  public void SK_NPC_EMOTION_ON(const class SK_NPC_EMOTION_ON &)
  public void SK_NPC_EMOTION_ON::SK_NPC_EMOTION_ON()
  public void ~SK_NPC_EMOTION_ON()
  public class SK_NPC_EMOTION_ON & operator=(const class SK_NPC_EMOTION_ON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_ENERGYDRAIN {
  SK_NPC_CHARACTERSKILL, offset = 0x0

  public void SK_NPC_ENERGYDRAIN::Init()
  public void SK_NPC_ENERGYDRAIN(const class SK_NPC_ENERGYDRAIN &)
  public void SK_NPC_ENERGYDRAIN()
  public void ~SK_NPC_ENERGYDRAIN()
  public class SK_NPC_ENERGYDRAIN & operator=(const class SK_NPC_ENERGYDRAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_EVILLAND {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_EVILLAND(const class SK_NPC_EVILLAND &)
  public void SK_NPC_EVILLAND::SK_NPC_EVILLAND()
  public void ~SK_NPC_EVILLAND()
  public class SK_NPC_EVILLAND & operator=(const class SK_NPC_EVILLAND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_EXPULSION {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_EXPULSION(const class SK_NPC_EXPULSION &)
  public void SK_NPC_EXPULSION::SK_NPC_EXPULSION()
  public void ~SK_NPC_EXPULSION()
  public class SK_NPC_EXPULSION & operator=(const class SK_NPC_EXPULSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_FIREATTACK {
  SK_NPC_PROPERTYATTACK, offset = 0x0

  public void SK_NPC_FIREATTACK::Init()
  public void SK_NPC_FIREATTACK(const class SK_NPC_FIREATTACK &)
  public void SK_NPC_FIREATTACK()
  public void ~SK_NPC_FIREATTACK()
  public class SK_NPC_FIREATTACK & operator=(const class SK_NPC_FIREATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_FIREBREATH {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_FIREBREATH(const class SK_NPC_FIREBREATH &)
  public void SK_NPC_FIREBREATH::SK_NPC_FIREBREATH()
  public void ~SK_NPC_FIREBREATH()
  public class SK_NPC_FIREBREATH & operator=(const class SK_NPC_FIREBREATH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_GRANDDARKNESS {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_GRANDDARKNESS::Init()
  public int SK_NPC_GRANDDARKNESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_GRANDDARKNESS(const class SK_NPC_GRANDDARKNESS &)
  public void SK_NPC_GRANDDARKNESS()
  public void ~SK_NPC_GRANDDARKNESS()
  public class SK_NPC_GRANDDARKNESS & operator=(const class SK_NPC_GRANDDARKNESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_GROUNDATTACK {
  SK_NPC_PROPERTYATTACK, offset = 0x0

  public void SK_NPC_GROUNDATTACK::Init()
  public void SK_NPC_GROUNDATTACK(const class SK_NPC_GROUNDATTACK &)
  public void SK_NPC_GROUNDATTACK()
  public void ~SK_NPC_GROUNDATTACK()
  public class SK_NPC_GROUNDATTACK & operator=(const class SK_NPC_GROUNDATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_GUIDEDATTACK {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_GUIDEDATTACK::Init()
  public int SK_NPC_GUIDEDATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_GUIDEDATTACK(const class SK_NPC_GUIDEDATTACK &)
  public void SK_NPC_GUIDEDATTACK()
  public void ~SK_NPC_GUIDEDATTACK()
  public class SK_NPC_GUIDEDATTACK & operator=(const class SK_NPC_GUIDEDATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_HALLUCINATION {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_HALLUCINATION::Init()
  public int SK_NPC_HALLUCINATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_HALLUCINATION(const class SK_NPC_HALLUCINATION &)
  public void SK_NPC_HALLUCINATION()
  public void ~SK_NPC_HALLUCINATION()
  public class SK_NPC_HALLUCINATION & operator=(const class SK_NPC_HALLUCINATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_HANDICAPATTACK {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public int SK_NPC_HANDICAPATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_HANDICAPATTACK(const class SK_NPC_HANDICAPATTACK &)
  public void SK_NPC_HANDICAPATTACK::SK_NPC_HANDICAPATTACK()
  public void SK_NPC_HANDICAPATTACK::~SK_NPC_HANDICAPATTACK()
  public class SK_NPC_HANDICAPATTACK & operator=(const class SK_NPC_HANDICAPATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_HELLJUDGEMENT {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_HELLJUDGEMENT(const class SK_NPC_HELLJUDGEMENT &)
  public void SK_NPC_HELLJUDGEMENT::SK_NPC_HELLJUDGEMENT()
  public void ~SK_NPC_HELLJUDGEMENT()
  public class SK_NPC_HELLJUDGEMENT & operator=(const class SK_NPC_HELLJUDGEMENT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_HELLPOWER {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_HELLPOWER::Init()
  public int SK_NPC_HELLPOWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NPC_HELLPOWER::GetMaxLevel()
  public void SK_NPC_HELLPOWER(const class SK_NPC_HELLPOWER &)
  public void SK_NPC_HELLPOWER()
  public void ~SK_NPC_HELLPOWER()
  public class SK_NPC_HELLPOWER & operator=(const class SK_NPC_HELLPOWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_HELMBRAKE {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_HELMBRAKE::Init()
  public int SK_NPC_HELMBRAKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_HELMBRAKE(const class SK_NPC_HELMBRAKE &)
  public void SK_NPC_HELMBRAKE()
  public void ~SK_NPC_HELMBRAKE()
  public class SK_NPC_HELMBRAKE & operator=(const class SK_NPC_HELMBRAKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_HOLYATTACK {
  SK_NPC_PROPERTYATTACK, offset = 0x0

  public void SK_NPC_HOLYATTACK::Init()
  public void SK_NPC_HOLYATTACK(const class SK_NPC_HOLYATTACK &)
  public void SK_NPC_HOLYATTACK()
  public void ~SK_NPC_HOLYATTACK()
  public class SK_NPC_HOLYATTACK & operator=(const class SK_NPC_HOLYATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_ICEBREATH {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_ICEBREATH(const class SK_NPC_ICEBREATH &)
  public void SK_NPC_ICEBREATH::SK_NPC_ICEBREATH()
  public void ~SK_NPC_ICEBREATH()
  public class SK_NPC_ICEBREATH & operator=(const class SK_NPC_ICEBREATH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_INVINCIBLE {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_INVINCIBLE::Init()
  public short SK_NPC_INVINCIBLE::GetMaxLevel()
  public void SK_NPC_INVINCIBLE(const class SK_NPC_INVINCIBLE &)
  public void SK_NPC_INVINCIBLE::SK_NPC_INVINCIBLE()
  public void ~SK_NPC_INVINCIBLE()
  public class SK_NPC_INVINCIBLE & operator=(const class SK_NPC_INVINCIBLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_INVINCIBLEOFF {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_INVINCIBLEOFF::Init()
  public short SK_NPC_INVINCIBLEOFF::GetMaxLevel()
  public void SK_NPC_INVINCIBLEOFF(const class SK_NPC_INVINCIBLEOFF &)
  public void SK_NPC_INVINCIBLEOFF::SK_NPC_INVINCIBLEOFF()
  public void ~SK_NPC_INVINCIBLEOFF()
  public class SK_NPC_INVINCIBLEOFF & operator=(const class SK_NPC_INVINCIBLEOFF &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_INVISIBLE {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_INVISIBLE::Init()
  public void SK_NPC_INVISIBLE(const class SK_NPC_INVISIBLE &)
  public void SK_NPC_INVISIBLE::SK_NPC_INVISIBLE()
  public void ~SK_NPC_INVISIBLE()
  public class SK_NPC_INVISIBLE & operator=(const class SK_NPC_INVISIBLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_KEEPING {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_KEEPING::Init()
  public void SK_NPC_KEEPING(const class SK_NPC_KEEPING &)
  public void SK_NPC_KEEPING()
  public void ~SK_NPC_KEEPING()
  public class SK_NPC_KEEPING & operator=(const class SK_NPC_KEEPING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_LICK {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_LICK::Init()
  public int SK_NPC_LICK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_LICK(const class SK_NPC_LICK &)
  public void SK_NPC_LICK()
  public void ~SK_NPC_LICK()
  public class SK_NPC_LICK & operator=(const class SK_NPC_LICK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_MAGICALATTACK {
  SK_NPC_CHARACTERSKILL, offset = 0x0

  public void SK_NPC_MAGICALATTACK::Init()
  public void SK_NPC_MAGICALATTACK(const class SK_NPC_MAGICALATTACK &)
  public void SK_NPC_MAGICALATTACK()
  public void ~SK_NPC_MAGICALATTACK()
  public class SK_NPC_MAGICALATTACK & operator=(const class SK_NPC_MAGICALATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_MAGICMIRROR {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_MAGICMIRROR(const class SK_NPC_MAGICMIRROR &)
  public void SK_NPC_MAGICMIRROR::SK_NPC_MAGICMIRROR()
  public void ~SK_NPC_MAGICMIRROR()
  public class SK_NPC_MAGICMIRROR & operator=(const class SK_NPC_MAGICMIRROR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_MENTALBREAKER {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_MENTALBREAKER::Init()
  public int SK_NPC_MENTALBREAKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_MENTALBREAKER(const class SK_NPC_MENTALBREAKER &)
  public void SK_NPC_MENTALBREAKER()
  public void ~SK_NPC_MENTALBREAKER()
  public class SK_NPC_MENTALBREAKER & operator=(const class SK_NPC_MENTALBREAKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_METAMORPHOSIS {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_METAMORPHOSIS::Init()
  public void SK_NPC_METAMORPHOSIS(const class SK_NPC_METAMORPHOSIS &)
  public void SK_NPC_METAMORPHOSIS()
  public void ~SK_NPC_METAMORPHOSIS()
  public class SK_NPC_METAMORPHOSIS & operator=(const class SK_NPC_METAMORPHOSIS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_PETRIFYATTACK {
  SK_NPC_HANDICAPATTACK, offset = 0x0

  public void SK_NPC_PETRIFYATTACK::Init()
  public void SK_NPC_PETRIFYATTACK(const class SK_NPC_PETRIFYATTACK &)
  public void SK_NPC_PETRIFYATTACK()
  public void ~SK_NPC_PETRIFYATTACK()
  public class SK_NPC_PETRIFYATTACK & operator=(const class SK_NPC_PETRIFYATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_PIERCINGATT {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_PIERCINGATT::Init()
  public int SK_NPC_PIERCINGATT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_PIERCINGATT(const class SK_NPC_PIERCINGATT &)
  public void SK_NPC_PIERCINGATT()
  public void ~SK_NPC_PIERCINGATT()
  public class SK_NPC_PIERCINGATT & operator=(const class SK_NPC_PIERCINGATT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_POISON {
  SK_NPC_HANDICAPATTACK, offset = 0x0

  public void SK_NPC_POISON::Init()
  public void SK_NPC_POISON(const class SK_NPC_POISON &)
  public void SK_NPC_POISON()
  public void ~SK_NPC_POISON()
  public class SK_NPC_POISON & operator=(const class SK_NPC_POISON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_POISONATTACK {
  SK_NPC_PROPERTYATTACK, offset = 0x0

  public void SK_NPC_POISONATTACK::Init()
  public void SK_NPC_POISONATTACK(const class SK_NPC_POISONATTACK &)
  public void SK_NPC_POISONATTACK()
  public void ~SK_NPC_POISONATTACK()
  public class SK_NPC_POISONATTACK & operator=(const class SK_NPC_POISONATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_POWERUP {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_POWERUP::Init()
  public void SK_NPC_POWERUP(const class SK_NPC_POWERUP &)
  public void SK_NPC_POWERUP::SK_NPC_POWERUP()
  public void ~SK_NPC_POWERUP()
  public class SK_NPC_POWERUP & operator=(const class SK_NPC_POWERUP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_PROPERTYATTACK {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public int SK_NPC_PROPERTYATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_PROPERTYATTACK(const class SK_NPC_PROPERTYATTACK &)
  public void SK_NPC_PROPERTYATTACK::SK_NPC_PROPERTYATTACK()
  public void SK_NPC_PROPERTYATTACK::~SK_NPC_PROPERTYATTACK()
  public class SK_NPC_PROPERTYATTACK & operator=(const class SK_NPC_PROPERTYATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_PROVOCATION {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_PROVOCATION::Init()
  public void SK_NPC_PROVOCATION(const class SK_NPC_PROVOCATION &)
  public void SK_NPC_PROVOCATION()
  public void ~SK_NPC_PROVOCATION()
  public class SK_NPC_PROVOCATION & operator=(const class SK_NPC_PROVOCATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_PULSESTRIKE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_PULSESTRIKE(const class SK_NPC_PULSESTRIKE &)
  public void SK_NPC_PULSESTRIKE::SK_NPC_PULSESTRIKE()
  public void ~SK_NPC_PULSESTRIKE()
  public class SK_NPC_PULSESTRIKE & operator=(const class SK_NPC_PULSESTRIKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_RANDOMATTACK {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_RANDOMATTACK::Init()
  public int SK_NPC_RANDOMATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_RANDOMATTACK(const class SK_NPC_RANDOMATTACK &)
  public void SK_NPC_RANDOMATTACK()
  public void ~SK_NPC_RANDOMATTACK()
  public class SK_NPC_RANDOMATTACK & operator=(const class SK_NPC_RANDOMATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_RANDOMMOVE {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_RANDOMMOVE::Init()
  public void SK_NPC_RANDOMMOVE(const class SK_NPC_RANDOMMOVE &)
  public void SK_NPC_RANDOMMOVE()
  public void ~SK_NPC_RANDOMMOVE()
  public class SK_NPC_RANDOMMOVE & operator=(const class SK_NPC_RANDOMMOVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_RANGEATTACK {
  SK_NPC_CHARACTERSKILL, offset = 0x0

  public void SK_NPC_RANGEATTACK::Init()
  public void SK_NPC_RANGEATTACK(const class SK_NPC_RANGEATTACK &)
  public void SK_NPC_RANGEATTACK()
  public void ~SK_NPC_RANGEATTACK()
  public class SK_NPC_RANGEATTACK & operator=(const class SK_NPC_RANGEATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_REBIRTH {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_REBIRTH::Init()
  public int SK_NPC_REBIRTH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_REBIRTH(const class SK_NPC_REBIRTH &)
  public void SK_NPC_REBIRTH()
  public void ~SK_NPC_REBIRTH()
  public class SK_NPC_REBIRTH & operator=(const class SK_NPC_REBIRTH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_REVENGE {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_REVENGE::Init()
  public void SK_NPC_REVENGE(const class SK_NPC_REVENGE &)
  public void SK_NPC_REVENGE()
  public void ~SK_NPC_REVENGE()
  public class SK_NPC_REVENGE & operator=(const class SK_NPC_REVENGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_RUN {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_RUN::Init()
  public void SK_NPC_RUN(const class SK_NPC_RUN &)
  public void SK_NPC_RUN::SK_NPC_RUN()
  public void ~SK_NPC_RUN()
  public class SK_NPC_RUN & operator=(const class SK_NPC_RUN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SELFDESTRUCTION {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_SELFDESTRUCTION::Init()
  public bool SK_NPC_SELFDESTRUCTION::IsEnableIgnoreMagicImmune(int)
  public void SK_NPC_SELFDESTRUCTION(const class SK_NPC_SELFDESTRUCTION &)
  public void SK_NPC_SELFDESTRUCTION()
  public void ~SK_NPC_SELFDESTRUCTION()
  public class SK_NPC_SELFDESTRUCTION & operator=(const class SK_NPC_SELFDESTRUCTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SELFSKILL {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public int SK_NPC_SELFSKILL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_SELFSKILL(const class SK_NPC_SELFSKILL &)
  public void SK_NPC_SELFSKILL::SK_NPC_SELFSKILL()
  public void SK_NPC_SELFSKILL::~SK_NPC_SELFSKILL()
  public class SK_NPC_SELFSKILL & operator=(const class SK_NPC_SELFSKILL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SHIELDBRAKE {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_SHIELDBRAKE::Init()
  public int SK_NPC_SHIELDBRAKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_SHIELDBRAKE(const class SK_NPC_SHIELDBRAKE &)
  public void SK_NPC_SHIELDBRAKE()
  public void ~SK_NPC_SHIELDBRAKE()
  public class SK_NPC_SHIELDBRAKE & operator=(const class SK_NPC_SHIELDBRAKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SIEGEMODE {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_SIEGEMODE::Init()
  public void SK_NPC_SIEGEMODE(const class SK_NPC_SIEGEMODE &)
  public void SK_NPC_SIEGEMODE::SK_NPC_SIEGEMODE()
  public void ~SK_NPC_SIEGEMODE()
  public class SK_NPC_SIEGEMODE & operator=(const class SK_NPC_SIEGEMODE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SILENCEATTACK {
  SK_NPC_HANDICAPATTACK, offset = 0x0

  public void SK_NPC_SILENCEATTACK::Init()
  public void SK_NPC_SILENCEATTACK(const class SK_NPC_SILENCEATTACK &)
  public void SK_NPC_SILENCEATTACK()
  public void ~SK_NPC_SILENCEATTACK()
  public class SK_NPC_SILENCEATTACK & operator=(const class SK_NPC_SILENCEATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SLEEPATTACK {
  SK_NPC_HANDICAPATTACK, offset = 0x0

  public void SK_NPC_SLEEPATTACK::Init()
  public void SK_NPC_SLEEPATTACK(const class SK_NPC_SLEEPATTACK &)
  public void SK_NPC_SLEEPATTACK()
  public void ~SK_NPC_SLEEPATTACK()
  public class SK_NPC_SLEEPATTACK & operator=(const class SK_NPC_SLEEPATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SLOWCAST {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_SLOWCAST(const class SK_NPC_SLOWCAST &)
  public void SK_NPC_SLOWCAST::SK_NPC_SLOWCAST()
  public void ~SK_NPC_SLOWCAST()
  public class SK_NPC_SLOWCAST & operator=(const class SK_NPC_SLOWCAST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SMOKING {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_SMOKING::Init()
  public void SK_NPC_SMOKING(const class SK_NPC_SMOKING &)
  public void SK_NPC_SMOKING()
  public void ~SK_NPC_SMOKING()
  public class SK_NPC_SMOKING & operator=(const class SK_NPC_SMOKING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SPEEDUP {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_SPEEDUP::Init()
  public void SK_NPC_SPEEDUP(const class SK_NPC_SPEEDUP &)
  public void SK_NPC_SPEEDUP()
  public void ~SK_NPC_SPEEDUP()
  public class SK_NPC_SPEEDUP & operator=(const class SK_NPC_SPEEDUP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SPLASHATTACK {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_SPLASHATTACK::Init()
  public int SK_NPC_SPLASHATTACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_SPLASHATTACK(const class SK_NPC_SPLASHATTACK &)
  public void SK_NPC_SPLASHATTACK()
  public void ~SK_NPC_SPLASHATTACK()
  public class SK_NPC_SPLASHATTACK & operator=(const class SK_NPC_SPLASHATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_STONESKIN {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_STONESKIN(const class SK_NPC_STONESKIN &)
  public void SK_NPC_STONESKIN::SK_NPC_STONESKIN()
  public void ~SK_NPC_STONESKIN()
  public class SK_NPC_STONESKIN & operator=(const class SK_NPC_STONESKIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_STOP {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_STOP::Init()
  public int SK_NPC_STOP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_STOP(const class SK_NPC_STOP &)
  public void SK_NPC_STOP()
  public void ~SK_NPC_STOP()
  public class SK_NPC_STOP & operator=(const class SK_NPC_STOP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_STUNATTACK {
  SK_NPC_HANDICAPATTACK, offset = 0x0

  public void SK_NPC_STUNATTACK::Init()
  public void SK_NPC_STUNATTACK(const class SK_NPC_STUNATTACK &)
  public void SK_NPC_STUNATTACK()
  public void ~SK_NPC_STUNATTACK()
  public class SK_NPC_STUNATTACK & operator=(const class SK_NPC_STUNATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SUICIDE {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_SUICIDE::Init()
  public short SK_NPC_SUICIDE::GetMaxLevel()
  public void SK_NPC_SUICIDE(const class SK_NPC_SUICIDE &)
  public void SK_NPC_SUICIDE()
  public void ~SK_NPC_SUICIDE()
  public class SK_NPC_SUICIDE & operator=(const class SK_NPC_SUICIDE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SUMMONMONSTER {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_SUMMONMONSTER::Init()
  public void SK_NPC_SUMMONMONSTER(const class SK_NPC_SUMMONMONSTER &)
  public void SK_NPC_SUMMONMONSTER()
  public void ~SK_NPC_SUMMONMONSTER()
  public class SK_NPC_SUMMONMONSTER & operator=(const class SK_NPC_SUMMONMONSTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_SUMMONSLAVE {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_SUMMONSLAVE::Init()
  public void SK_NPC_SUMMONSLAVE(const class SK_NPC_SUMMONSLAVE &)
  public void SK_NPC_SUMMONSLAVE()
  public void ~SK_NPC_SUMMONSLAVE()
  public class SK_NPC_SUMMONSLAVE & operator=(const class SK_NPC_SUMMONSLAVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_TALK {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_TALK::Init()
  public void SK_NPC_TALK(const class SK_NPC_TALK &)
  public void SK_NPC_TALK::SK_NPC_TALK()
  public void ~SK_NPC_TALK()
  public class SK_NPC_TALK & operator=(const class SK_NPC_TALK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_TELEKINESISATTACK {
  SK_NPC_PROPERTYATTACK, offset = 0x0

  public void SK_NPC_TELEKINESISATTACK::Init()
  public void SK_NPC_TELEKINESISATTACK(const class SK_NPC_TELEKINESISATTACK &)
  public void SK_NPC_TELEKINESISATTACK()
  public void ~SK_NPC_TELEKINESISATTACK()
  public class SK_NPC_TELEKINESISATTACK & operator=(const class SK_NPC_TELEKINESISATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_THUNDERBREATH {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_THUNDERBREATH(const class SK_NPC_THUNDERBREATH &)
  public void SK_NPC_THUNDERBREATH::SK_NPC_THUNDERBREATH()
  public void ~SK_NPC_THUNDERBREATH()
  public class SK_NPC_THUNDERBREATH & operator=(const class SK_NPC_THUNDERBREATH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_TRANSFORMATION {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_TRANSFORMATION::Init()
  public void SK_NPC_TRANSFORMATION(const class SK_NPC_TRANSFORMATION &)
  public void SK_NPC_TRANSFORMATION()
  public void ~SK_NPC_TRANSFORMATION()
  public class SK_NPC_TRANSFORMATION & operator=(const class SK_NPC_TRANSFORMATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_UGLYDANCE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_NPC_UGLYDANCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NPC_UGLYDANCE::GetDamage(const int)
  public void SK_NPC_UGLYDANCE(const class SK_NPC_UGLYDANCE &)
  public void SK_NPC_UGLYDANCE::SK_NPC_UGLYDANCE()
  public void ~SK_NPC_UGLYDANCE()
  public class SK_NPC_UGLYDANCE & operator=(const class SK_NPC_UGLYDANCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_UNDEADATTACK {
  SK_NPC_PROPERTYATTACK, offset = 0x0

  public void SK_NPC_UNDEADATTACK::Init()
  public void SK_NPC_UNDEADATTACK(const class SK_NPC_UNDEADATTACK &)
  public void SK_NPC_UNDEADATTACK::SK_NPC_UNDEADATTACK()
  public void ~SK_NPC_UNDEADATTACK()
  public class SK_NPC_UNDEADATTACK & operator=(const class SK_NPC_UNDEADATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_VAMPIRE_GIFT {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_VAMPIRE_GIFT(const class SK_NPC_VAMPIRE_GIFT &)
  public void SK_NPC_VAMPIRE_GIFT::SK_NPC_VAMPIRE_GIFT()
  public void ~SK_NPC_VAMPIRE_GIFT()
  public class SK_NPC_VAMPIRE_GIFT & operator=(const class SK_NPC_VAMPIRE_GIFT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WATERATTACK {
  SK_NPC_PROPERTYATTACK, offset = 0x0

  public void SK_NPC_WATERATTACK::Init()
  public void SK_NPC_WATERATTACK(const class SK_NPC_WATERATTACK &)
  public void SK_NPC_WATERATTACK()
  public void ~SK_NPC_WATERATTACK()
  public class SK_NPC_WATERATTACK & operator=(const class SK_NPC_WATERATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WEAPONBRAKER {
  CSkillTypeInfo, offset = 0x0

  public void SK_NPC_WEAPONBRAKER::Init()
  public int SK_NPC_WEAPONBRAKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_WEAPONBRAKER(const class SK_NPC_WEAPONBRAKER &)
  public void SK_NPC_WEAPONBRAKER()
  public void ~SK_NPC_WEAPONBRAKER()
  public class SK_NPC_WEAPONBRAKER & operator=(const class SK_NPC_WEAPONBRAKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDEBLEEDING {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDEBLEEDING(const class SK_NPC_WIDEBLEEDING &)
  public void SK_NPC_WIDEBLEEDING::SK_NPC_WIDEBLEEDING()
  public void ~SK_NPC_WIDEBLEEDING()
  public class SK_NPC_WIDEBLEEDING & operator=(const class SK_NPC_WIDEBLEEDING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDEBODYBURNNING {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDEBODYBURNNING::Init()
  public int SK_NPC_WIDEBODYBURNNING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_WIDEBODYBURNNING(const class SK_NPC_WIDEBODYBURNNING &)
  public void SK_NPC_WIDEBODYBURNNING()
  public void ~SK_NPC_WIDEBODYBURNNING()
  public class SK_NPC_WIDEBODYBURNNING & operator=(const class SK_NPC_WIDEBODYBURNNING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDECOLD {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDECOLD::Init()
  public int SK_NPC_WIDECOLD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NPC_WIDECOLD::GetLifeTM(const int)
  public void SK_NPC_WIDECOLD(const class SK_NPC_WIDECOLD &)
  public void SK_NPC_WIDECOLD()
  public void ~SK_NPC_WIDECOLD()
  public class SK_NPC_WIDECOLD & operator=(const class SK_NPC_WIDECOLD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDECONFUSE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDECONFUSE(const class SK_NPC_WIDECONFUSE &)
  public void SK_NPC_WIDECONFUSE::SK_NPC_WIDECONFUSE()
  public void ~SK_NPC_WIDECONFUSE()
  public class SK_NPC_WIDECONFUSE & operator=(const class SK_NPC_WIDECONFUSE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDECURSE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDECURSE(const class SK_NPC_WIDECURSE &)
  public void SK_NPC_WIDECURSE::SK_NPC_WIDECURSE()
  public void ~SK_NPC_WIDECURSE()
  public class SK_NPC_WIDECURSE & operator=(const class SK_NPC_WIDECURSE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDEFREEZE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDEFREEZE(const class SK_NPC_WIDEFREEZE &)
  public void SK_NPC_WIDEFREEZE::SK_NPC_WIDEFREEZE()
  public void ~SK_NPC_WIDEFREEZE()
  public class SK_NPC_WIDEFREEZE & operator=(const class SK_NPC_WIDEFREEZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDEFROSTMISTY {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDEFROSTMISTY::Init()
  public int SK_NPC_WIDEFROSTMISTY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_WIDEFROSTMISTY(const class SK_NPC_WIDEFROSTMISTY &)
  public void SK_NPC_WIDEFROSTMISTY()
  public void ~SK_NPC_WIDEFROSTMISTY()
  public class SK_NPC_WIDEFROSTMISTY & operator=(const class SK_NPC_WIDEFROSTMISTY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDEHEALTHFEAR {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDEHEALTHFEAR::Init()
  public int SK_NPC_WIDEHEALTHFEAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_NPC_WIDEHEALTHFEAR(const class SK_NPC_WIDEHEALTHFEAR &)
  public void SK_NPC_WIDEHEALTHFEAR()
  public void ~SK_NPC_WIDEHEALTHFEAR()
  public class SK_NPC_WIDEHEALTHFEAR & operator=(const class SK_NPC_WIDEHEALTHFEAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDEHELLDIGNITY {
  SK_NPC_SELFSKILL, offset = 0x0

  public void SK_NPC_WIDEHELLDIGNITY::Init()
  public short SK_NPC_WIDEHELLDIGNITY::GetMaxLevel()
  public void SK_NPC_WIDEHELLDIGNITY(const class SK_NPC_WIDEHELLDIGNITY &)
  public void SK_NPC_WIDEHELLDIGNITY::SK_NPC_WIDEHELLDIGNITY()
  public void ~SK_NPC_WIDEHELLDIGNITY()
  public class SK_NPC_WIDEHELLDIGNITY & operator=(const class SK_NPC_WIDEHELLDIGNITY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDESIGHT {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDESIGHT(const class SK_NPC_WIDESIGHT &)
  public void SK_NPC_WIDESIGHT::SK_NPC_WIDESIGHT()
  public void ~SK_NPC_WIDESIGHT()
  public class SK_NPC_WIDESIGHT & operator=(const class SK_NPC_WIDESIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDESILENCE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDESILENCE(const class SK_NPC_WIDESILENCE &)
  public void SK_NPC_WIDESILENCE::SK_NPC_WIDESILENCE()
  public void ~SK_NPC_WIDESILENCE()
  public class SK_NPC_WIDESILENCE & operator=(const class SK_NPC_WIDESILENCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDESIREN {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDESIREN::Init()
  public int SK_NPC_WIDESIREN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NPC_WIDESIREN::GetLifeTM(const int)
  public void SK_NPC_WIDESIREN(const class SK_NPC_WIDESIREN &)
  public void SK_NPC_WIDESIREN()
  public void ~SK_NPC_WIDESIREN()
  public class SK_NPC_WIDESIREN & operator=(const class SK_NPC_WIDESIREN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDESLEEP {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDESLEEP(const class SK_NPC_WIDESLEEP &)
  public void SK_NPC_WIDESLEEP::SK_NPC_WIDESLEEP()
  public void ~SK_NPC_WIDESLEEP()
  public class SK_NPC_WIDESLEEP & operator=(const class SK_NPC_WIDESLEEP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDESOULDRAIN {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDESOULDRAIN(const class SK_NPC_WIDESOULDRAIN &)
  public void SK_NPC_WIDESOULDRAIN::SK_NPC_WIDESOULDRAIN()
  public void ~SK_NPC_WIDESOULDRAIN()
  public class SK_NPC_WIDESOULDRAIN & operator=(const class SK_NPC_WIDESOULDRAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDESTONE {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDESTONE(const class SK_NPC_WIDESTONE &)
  public void SK_NPC_WIDESTONE::SK_NPC_WIDESTONE()
  public void ~SK_NPC_WIDESTONE()
  public class SK_NPC_WIDESTONE & operator=(const class SK_NPC_WIDESTONE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDESTUN {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDESTUN(const class SK_NPC_WIDESTUN &)
  public void SK_NPC_WIDESTUN::SK_NPC_WIDESTUN()
  public void ~SK_NPC_WIDESTUN()
  public class SK_NPC_WIDESTUN & operator=(const class SK_NPC_WIDESTUN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WIDE_DEEP_SLEEP {
  CSkillTypeInfo2, offset = 0x0

  public void SK_NPC_WIDE_DEEP_SLEEP::Init()
  public int SK_NPC_WIDE_DEEP_SLEEP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_NPC_WIDE_DEEP_SLEEP::GetLifeTM(const int)
  public void SK_NPC_WIDE_DEEP_SLEEP(const class SK_NPC_WIDE_DEEP_SLEEP &)
  public void SK_NPC_WIDE_DEEP_SLEEP()
  public void ~SK_NPC_WIDE_DEEP_SLEEP()
  public class SK_NPC_WIDE_DEEP_SLEEP & operator=(const class SK_NPC_WIDE_DEEP_SLEEP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NPC_WINDATTACK {
  SK_NPC_PROPERTYATTACK, offset = 0x0

  public void SK_NPC_WINDATTACK::Init()
  public void SK_NPC_WINDATTACK(const class SK_NPC_WINDATTACK &)
  public void SK_NPC_WINDATTACK()
  public void ~SK_NPC_WINDATTACK()
  public class SK_NPC_WINDATTACK & operator=(const class SK_NPC_WINDATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NV_BASIC {
  CSkillTypeInfo, offset = 0x0

  public void SK_NV_BASIC::Init()
  public int SK_NV_BASIC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NV_BASIC::GetMaxLevel()
  public int SK_NV_BASIC::IsAvailableJob(short)
  public void SK_NV_BASIC(const class SK_NV_BASIC &)
  public void SK_NV_BASIC()
  public void ~SK_NV_BASIC()
  public class SK_NV_BASIC & operator=(const class SK_NV_BASIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NV_FIRSTAID {
  CSkillTypeInfo, offset = 0x0

  public void SK_NV_FIRSTAID::Init()
  public int SK_NV_FIRSTAID::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NV_FIRSTAID::GetMaxLevel()
  public int SK_NV_FIRSTAID::IsAvailableJob(short)
  public short SK_NV_FIRSTAID::GetSPCost(short)
  public void SK_NV_FIRSTAID(const class SK_NV_FIRSTAID &)
  public void SK_NV_FIRSTAID()
  public void ~SK_NV_FIRSTAID()
  public class SK_NV_FIRSTAID & operator=(const class SK_NV_FIRSTAID &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_NV_TRICKDEAD {
  CSkillTypeInfo, offset = 0x0

  public void SK_NV_TRICKDEAD::Init()
  public int SK_NV_TRICKDEAD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_NV_TRICKDEAD::GetMaxLevel()
  public int SK_NV_TRICKDEAD::IsAvailableJob(short)
  public short SK_NV_TRICKDEAD::GetSPCost(short)
  public void SK_NV_TRICKDEAD(const class SK_NV_TRICKDEAD &)
  public void SK_NV_TRICKDEAD()
  public void ~SK_NV_TRICKDEAD()
  public class SK_NV_TRICKDEAD & operator=(const class SK_NV_TRICKDEAD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_OB_AKAITSUKI {
  CSkillTypeInfo2, offset = 0x0

  public int SK_OB_AKAITSUKI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_OB_AKAITSUKI::GetContinuousTM(const int)
  public int SK_OB_AKAITSUKI::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_OB_AKAITSUKI(const class SK_OB_AKAITSUKI &)
  public void SK_OB_AKAITSUKI::SK_OB_AKAITSUKI()
  public void ~SK_OB_AKAITSUKI()
  public class SK_OB_AKAITSUKI & operator=(const class SK_OB_AKAITSUKI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_OB_OBOROGENSOU {
  CSkillTypeInfo2, offset = 0x0

  public int SK_OB_OBOROGENSOU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_OB_OBOROGENSOU::GetContinuousTM(const int)
  public int SK_OB_OBOROGENSOU::GetApplyPercent(const int)
  public int SK_OB_OBOROGENSOU::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_OB_OBOROGENSOU(const class SK_OB_OBOROGENSOU &)
  public void SK_OB_OBOROGENSOU::SK_OB_OBOROGENSOU()
  public void ~SK_OB_OBOROGENSOU()
  public class SK_OB_OBOROGENSOU & operator=(const class SK_OB_OBOROGENSOU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_OB_OBOROGENSOU_TRANSITION_ATK {
  CSkillTypeInfo2, offset = 0x0

  public void SK_OB_OBOROGENSOU_TRANSITION_ATK(const class SK_OB_OBOROGENSOU_TRANSITION_ATK &)
  public void SK_OB_OBOROGENSOU_TRANSITION_ATK::SK_OB_OBOROGENSOU_TRANSITION_ATK()
  public void ~SK_OB_OBOROGENSOU_TRANSITION_ATK()
  public class SK_OB_OBOROGENSOU_TRANSITION_ATK & operator=(const class SK_OB_OBOROGENSOU_TRANSITION_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_OB_ZANGETSU {
  CSkillTypeInfo2, offset = 0x0

  public int SK_OB_ZANGETSU::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_OB_ZANGETSU::GetContinuousTM(const int)
  public int SK_OB_ZANGETSU::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_OB_ZANGETSU(const class SK_OB_ZANGETSU &)
  public void SK_OB_ZANGETSU::SK_OB_ZANGETSU()
  public void ~SK_OB_ZANGETSU()
  public class SK_OB_ZANGETSU & operator=(const class SK_OB_ZANGETSU &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PALADIN {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_PALADIN::GetMaxLevel()
  public int SK_PALADIN::IsAvailableJob(short)
  public short SK_PALADIN::GetSPCost(short)
  public short SK_PALADIN::GetPreDelayTime(short)
  public void SK_PALADIN(const class SK_PALADIN &)
  public void SK_PALADIN()
  public void SK_PALADIN::~SK_PALADIN()
  public class SK_PALADIN & operator=(const class SK_PALADIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PA_GOSPEL {
  SK_PALADIN, offset = 0x0

  public void SK_PA_GOSPEL::Init()
  public int SK_PA_GOSPEL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PA_GOSPEL::GetSPCost(short)
  public void SK_PA_GOSPEL(const class SK_PA_GOSPEL &)
  public void SK_PA_GOSPEL::SK_PA_GOSPEL()
  public void ~SK_PA_GOSPEL()
  public class SK_PA_GOSPEL & operator=(const class SK_PA_GOSPEL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PA_PRESSURE {
  SK_PALADIN, offset = 0x0

  public void SK_PA_PRESSURE::Init()
  public int SK_PA_PRESSURE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PA_PRESSURE::GetMaxLevel()
  public short SK_PA_PRESSURE::GetSPCost(short)
  public short SK_PA_PRESSURE::GetPreDelayTime(short)
  public void SK_PA_PRESSURE(const class SK_PA_PRESSURE &)
  public void SK_PA_PRESSURE::SK_PA_PRESSURE()
  public void ~SK_PA_PRESSURE()
  public class SK_PA_PRESSURE & operator=(const class SK_PA_PRESSURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PA_SACRIFICE {
  SK_PALADIN, offset = 0x0

  public void SK_PA_SACRIFICE::Init()
  public int SK_PA_SACRIFICE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PA_SACRIFICE::GetMaxLevel()
  public short SK_PA_SACRIFICE::GetSPCost(short)
  public void SK_PA_SACRIFICE(const class SK_PA_SACRIFICE &)
  public void SK_PA_SACRIFICE::SK_PA_SACRIFICE()
  public void ~SK_PA_SACRIFICE()
  public class SK_PA_SACRIFICE & operator=(const class SK_PA_SACRIFICE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PA_SHIELDCHAIN {
  SK_PALADIN, offset = 0x0

  public void SK_PA_SHIELDCHAIN::Init()
  public int SK_PA_SHIELDCHAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PA_SHIELDCHAIN::GetMaxLevel()
  public short SK_PA_SHIELDCHAIN::GetSPCost(short)
  public short SK_PA_SHIELDCHAIN::GetPreDelayTime(short)
  public void SK_PA_SHIELDCHAIN(const class SK_PA_SHIELDCHAIN &)
  public void SK_PA_SHIELDCHAIN::SK_PA_SHIELDCHAIN()
  public void ~SK_PA_SHIELDCHAIN()
  public class SK_PA_SHIELDCHAIN & operator=(const class SK_PA_SHIELDCHAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PF_DOUBLECASTING {
  SK_PROFESSOR, offset = 0x0

  public void SK_PF_DOUBLECASTING::Init()
  public int SK_PF_DOUBLECASTING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PF_DOUBLECASTING::GetMaxLevel()
  public short SK_PF_DOUBLECASTING::GetSPCost(short)
  public short SK_PF_DOUBLECASTING::GetPreDelayTime(short)
  public void SK_PF_DOUBLECASTING(const class SK_PF_DOUBLECASTING &)
  public void SK_PF_DOUBLECASTING::SK_PF_DOUBLECASTING()
  public void ~SK_PF_DOUBLECASTING()
  public class SK_PF_DOUBLECASTING & operator=(const class SK_PF_DOUBLECASTING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PF_FOGWALL {
  SK_PROFESSOR, offset = 0x0

  public void SK_PF_FOGWALL::Init()
  public int SK_PF_FOGWALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PF_FOGWALL::GetMaxLevel()
  public short SK_PF_FOGWALL::GetSPCost(short)
  public void SK_PF_FOGWALL(const class SK_PF_FOGWALL &)
  public void SK_PF_FOGWALL::SK_PF_FOGWALL()
  public void ~SK_PF_FOGWALL()
  public class SK_PF_FOGWALL & operator=(const class SK_PF_FOGWALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PF_HPCONVERSION {
  SK_PROFESSOR, offset = 0x0

  public void SK_PF_HPCONVERSION::Init()
  public int SK_PF_HPCONVERSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PF_HPCONVERSION::GetMaxLevel()
  public short SK_PF_HPCONVERSION::GetSPCost(short)
  public void SK_PF_HPCONVERSION(const class SK_PF_HPCONVERSION &)
  public void SK_PF_HPCONVERSION::SK_PF_HPCONVERSION()
  public void ~SK_PF_HPCONVERSION()
  public class SK_PF_HPCONVERSION & operator=(const class SK_PF_HPCONVERSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PF_MEMORIZE {
  SK_PROFESSOR, offset = 0x0

  public void SK_PF_MEMORIZE::Init()
  public int SK_PF_MEMORIZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PF_MEMORIZE::GetMaxLevel()
  public short SK_PF_MEMORIZE::GetSPCost(short)
  public short SK_PF_MEMORIZE::GetPreDelayTime(short)
  public void SK_PF_MEMORIZE(const class SK_PF_MEMORIZE &)
  public void SK_PF_MEMORIZE::SK_PF_MEMORIZE()
  public void ~SK_PF_MEMORIZE()
  public class SK_PF_MEMORIZE & operator=(const class SK_PF_MEMORIZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PF_MINDBREAKER {
  SK_PROFESSOR, offset = 0x0

  public void SK_PF_MINDBREAKER::Init()
  public int SK_PF_MINDBREAKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PF_MINDBREAKER::GetMaxLevel()
  public short SK_PF_MINDBREAKER::GetSPCost(short)
  public void SK_PF_MINDBREAKER(const class SK_PF_MINDBREAKER &)
  public void SK_PF_MINDBREAKER::SK_PF_MINDBREAKER()
  public void ~SK_PF_MINDBREAKER()
  public class SK_PF_MINDBREAKER & operator=(const class SK_PF_MINDBREAKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PF_SOULBURN {
  SK_PROFESSOR, offset = 0x0

  public void SK_PF_SOULBURN::Init()
  public int SK_PF_SOULBURN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PF_SOULBURN::GetMaxLevel()
  public short SK_PF_SOULBURN::GetSPCost(short)
  public void SK_PF_SOULBURN(const class SK_PF_SOULBURN &)
  public void SK_PF_SOULBURN::SK_PF_SOULBURN()
  public void ~SK_PF_SOULBURN()
  public class SK_PF_SOULBURN & operator=(const class SK_PF_SOULBURN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PF_SOULCHANGE {
  SK_PROFESSOR, offset = 0x0

  public void SK_PF_SOULCHANGE::Init()
  public int SK_PF_SOULCHANGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PF_SOULCHANGE::GetMaxLevel()
  public short SK_PF_SOULCHANGE::GetSPCost(short)
  public short SK_PF_SOULCHANGE::GetPreDelayTime(short)
  public void SK_PF_SOULCHANGE(const class SK_PF_SOULCHANGE &)
  public void SK_PF_SOULCHANGE::SK_PF_SOULCHANGE()
  public void ~SK_PF_SOULCHANGE()
  public class SK_PF_SOULCHANGE & operator=(const class SK_PF_SOULCHANGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PF_SPIDERWEB {
  SK_PROFESSOR, offset = 0x0

  public void SK_PF_SPIDERWEB::Init()
  public int SK_PF_SPIDERWEB::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PF_SPIDERWEB::GetMaxLevel()
  public short SK_PF_SPIDERWEB::GetSPCost(short)
  public void SK_PF_SPIDERWEB(const class SK_PF_SPIDERWEB &)
  public void SK_PF_SPIDERWEB::SK_PF_SPIDERWEB()
  public void ~SK_PF_SPIDERWEB()
  public class SK_PF_SPIDERWEB & operator=(const class SK_PF_SPIDERWEB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PRIEST {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_PRIEST::GetMaxLevel()
  public int SK_PRIEST::IsAvailableJob(short)
  public short SK_PRIEST::GetSPCost(short)
  public short SK_PRIEST::GetPreDelayTime(short)
  public void SK_PRIEST(const class SK_PRIEST &)
  public void SK_PRIEST::SK_PRIEST()
  public void SK_PRIEST::~SK_PRIEST()
  public class SK_PRIEST & operator=(const class SK_PRIEST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PROFESSOR {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_PROFESSOR::GetMaxLevel()
  public int SK_PROFESSOR::IsAvailableJob(short)
  public short SK_PROFESSOR::GetSPCost(short)
  public short SK_PROFESSOR::GetPreDelayTime(short)
  public void SK_PROFESSOR(const class SK_PROFESSOR &)
  public void SK_PROFESSOR::SK_PROFESSOR()
  public void SK_PROFESSOR::~SK_PROFESSOR()
  public class SK_PROFESSOR & operator=(const class SK_PROFESSOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_ASPERSIO {
  SK_PRIEST, offset = 0x0

  public void SK_PR_ASPERSIO::Init()
  public int SK_PR_ASPERSIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_ASPERSIO::GetMaxLevel()
  public short SK_PR_ASPERSIO::GetSPCost(short)
  public void SK_PR_ASPERSIO(const class SK_PR_ASPERSIO &)
  public void SK_PR_ASPERSIO()
  public void ~SK_PR_ASPERSIO()
  public class SK_PR_ASPERSIO & operator=(const class SK_PR_ASPERSIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_BENEDICTIO {
  SK_PRIEST, offset = 0x0

  public void SK_PR_BENEDICTIO::Init()
  public int SK_PR_BENEDICTIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_BENEDICTIO::GetMaxLevel()
  public short SK_PR_BENEDICTIO::GetSPCost(short)
  public void SK_PR_BENEDICTIO(const class SK_PR_BENEDICTIO &)
  public void SK_PR_BENEDICTIO()
  public void ~SK_PR_BENEDICTIO()
  public class SK_PR_BENEDICTIO & operator=(const class SK_PR_BENEDICTIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_GLORIA {
  SK_PRIEST, offset = 0x0

  public void SK_PR_GLORIA::Init()
  public int SK_PR_GLORIA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_GLORIA::GetMaxLevel()
  public short SK_PR_GLORIA::GetSPCost(short)
  public void SK_PR_GLORIA(const class SK_PR_GLORIA &)
  public void SK_PR_GLORIA()
  public void ~SK_PR_GLORIA()
  public class SK_PR_GLORIA & operator=(const class SK_PR_GLORIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_IMPOSITIO {
  SK_PRIEST, offset = 0x0

  public void SK_PR_IMPOSITIO::Init()
  public int SK_PR_IMPOSITIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_IMPOSITIO::GetMaxLevel()
  public short SK_PR_IMPOSITIO::GetSPCost(short)
  public void SK_PR_IMPOSITIO(const class SK_PR_IMPOSITIO &)
  public void SK_PR_IMPOSITIO()
  public void ~SK_PR_IMPOSITIO()
  public class SK_PR_IMPOSITIO & operator=(const class SK_PR_IMPOSITIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_KYRIE {
  SK_PRIEST, offset = 0x0

  public void SK_PR_KYRIE::Init()
  public int SK_PR_KYRIE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_KYRIE::GetSPCost(short)
  public short SK_PR_KYRIE::GetPreDelayTime(short)
  public void SK_PR_KYRIE(const class SK_PR_KYRIE &)
  public void SK_PR_KYRIE::SK_PR_KYRIE()
  public void SK_PR_KYRIE::~SK_PR_KYRIE()
  public class SK_PR_KYRIE & operator=(const class SK_PR_KYRIE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_LEXAETERNA {
  SK_PRIEST, offset = 0x0

  public void SK_PR_LEXAETERNA::Init()
  public int SK_PR_LEXAETERNA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_LEXAETERNA::GetMaxLevel()
  public short SK_PR_LEXAETERNA::GetSPCost(short)
  public void SK_PR_LEXAETERNA(const class SK_PR_LEXAETERNA &)
  public void SK_PR_LEXAETERNA()
  public void ~SK_PR_LEXAETERNA()
  public class SK_PR_LEXAETERNA & operator=(const class SK_PR_LEXAETERNA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_LEXDIVINA {
  SK_PRIEST, offset = 0x0

  public void SK_PR_LEXDIVINA::Init()
  public int SK_PR_LEXDIVINA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_LEXDIVINA::GetSPCost(short)
  public void SK_PR_LEXDIVINA(const class SK_PR_LEXDIVINA &)
  public void SK_PR_LEXDIVINA::SK_PR_LEXDIVINA()
  public void SK_PR_LEXDIVINA::~SK_PR_LEXDIVINA()
  public class SK_PR_LEXDIVINA & operator=(const class SK_PR_LEXDIVINA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_MACEMASTERY {
  SK_PRIEST, offset = 0x0

  public void SK_PR_MACEMASTERY::Init()
  public int SK_PR_MACEMASTERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_PR_MACEMASTERY(const class SK_PR_MACEMASTERY &)
  public void SK_PR_MACEMASTERY()
  public void ~SK_PR_MACEMASTERY()
  public class SK_PR_MACEMASTERY & operator=(const class SK_PR_MACEMASTERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_MAGNIFICAT {
  SK_PRIEST, offset = 0x0

  public void SK_PR_MAGNIFICAT::Init()
  public int SK_PR_MAGNIFICAT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_MAGNIFICAT::GetMaxLevel()
  public short SK_PR_MAGNIFICAT::GetSPCost(short)
  public short SK_PR_MAGNIFICAT::GetPreDelayTime(short)
  public void SK_PR_MAGNIFICAT(const class SK_PR_MAGNIFICAT &)
  public void SK_PR_MAGNIFICAT::SK_PR_MAGNIFICAT()
  public void SK_PR_MAGNIFICAT::~SK_PR_MAGNIFICAT()
  public class SK_PR_MAGNIFICAT & operator=(const class SK_PR_MAGNIFICAT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_MAGNUS {
  SK_PRIEST, offset = 0x0

  public void SK_PR_MAGNUS::Init()
  public int SK_PR_MAGNUS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_MAGNUS::GetSPCost(short)
  public short SK_PR_MAGNUS::GetPreDelayTime(short)
  public short SK_PR_MAGNUS::GetPostDelayTM(short)
  public void SK_PR_MAGNUS(const class SK_PR_MAGNUS &)
  public void SK_PR_MAGNUS()
  public void ~SK_PR_MAGNUS()
  public class SK_PR_MAGNUS & operator=(const class SK_PR_MAGNUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_REDEMPTIO {
  SK_PRIEST, offset = 0x0

  public void SK_PR_REDEMPTIO::Init()
  public int SK_PR_REDEMPTIO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_REDEMPTIO::GetMaxLevel()
  public short SK_PR_REDEMPTIO::GetSPCost(short)
  public short SK_PR_REDEMPTIO::GetPreDelayTime(short)
  public void SK_PR_REDEMPTIO(const class SK_PR_REDEMPTIO &)
  public void SK_PR_REDEMPTIO()
  public void ~SK_PR_REDEMPTIO()
  public class SK_PR_REDEMPTIO & operator=(const class SK_PR_REDEMPTIO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_SANCTUARY {
  SK_PRIEST, offset = 0x0

  public void SK_PR_SANCTUARY::Init()
  public int SK_PR_SANCTUARY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_SANCTUARY::GetSPCost(short)
  public short SK_PR_SANCTUARY::GetPreDelayTime(short)
  public void SK_PR_SANCTUARY(const class SK_PR_SANCTUARY &)
  public void SK_PR_SANCTUARY()
  public void ~SK_PR_SANCTUARY()
  public class SK_PR_SANCTUARY & operator=(const class SK_PR_SANCTUARY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_SLOWPOISON {
  SK_PRIEST, offset = 0x0

  public void SK_PR_SLOWPOISON::Init()
  public int SK_PR_SLOWPOISON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_SLOWPOISON::GetMaxLevel()
  public short SK_PR_SLOWPOISON::GetSPCost(short)
  public void SK_PR_SLOWPOISON(const class SK_PR_SLOWPOISON &)
  public void SK_PR_SLOWPOISON()
  public void ~SK_PR_SLOWPOISON()
  public class SK_PR_SLOWPOISON & operator=(const class SK_PR_SLOWPOISON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_STRECOVERY {
  SK_PRIEST, offset = 0x0

  public void SK_PR_STRECOVERY::Init()
  public int SK_PR_STRECOVERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_STRECOVERY::GetMaxLevel()
  public short SK_PR_STRECOVERY::GetSPCost(short)
  public void SK_PR_STRECOVERY(const class SK_PR_STRECOVERY &)
  public void SK_PR_STRECOVERY()
  public void ~SK_PR_STRECOVERY()
  public class SK_PR_STRECOVERY & operator=(const class SK_PR_STRECOVERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_SUFFRAGIUM {
  SK_PRIEST, offset = 0x0

  public void SK_PR_SUFFRAGIUM::Init()
  public int SK_PR_SUFFRAGIUM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_SUFFRAGIUM::GetMaxLevel()
  public short SK_PR_SUFFRAGIUM::GetSPCost(short)
  public void SK_PR_SUFFRAGIUM(const class SK_PR_SUFFRAGIUM &)
  public void SK_PR_SUFFRAGIUM()
  public void ~SK_PR_SUFFRAGIUM()
  public class SK_PR_SUFFRAGIUM & operator=(const class SK_PR_SUFFRAGIUM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_PR_TURNUNDEAD {
  SK_PRIEST, offset = 0x0

  public void SK_PR_TURNUNDEAD::Init()
  public int SK_PR_TURNUNDEAD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_PR_TURNUNDEAD::GetSPCost(short)
  public short SK_PR_TURNUNDEAD::GetPreDelayTime(short)
  public void SK_PR_TURNUNDEAD(const class SK_PR_TURNUNDEAD &)
  public void SK_PR_TURNUNDEAD()
  public void ~SK_PR_TURNUNDEAD()
  public class SK_PR_TURNUNDEAD & operator=(const class SK_PR_TURNUNDEAD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_AIMEDBOLT {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RA_AIMEDBOLT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_RA_AIMEDBOLT(const class SK_RA_AIMEDBOLT &)
  public void SK_RA_AIMEDBOLT::SK_RA_AIMEDBOLT()
  public void ~SK_RA_AIMEDBOLT()
  public class SK_RA_AIMEDBOLT & operator=(const class SK_RA_AIMEDBOLT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_ARROWSTORM {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RA_ARROWSTORM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_ARROWSTORM::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_RA_ARROWSTORM(const class SK_RA_ARROWSTORM &)
  public void SK_RA_ARROWSTORM::SK_RA_ARROWSTORM()
  public void ~SK_RA_ARROWSTORM()
  public class SK_RA_ARROWSTORM & operator=(const class SK_RA_ARROWSTORM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_CAMOUFLAGE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RA_CAMOUFLAGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_CAMOUFLAGE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_RA_CAMOUFLAGE(const class SK_RA_CAMOUFLAGE &)
  public void SK_RA_CAMOUFLAGE::SK_RA_CAMOUFLAGE()
  public void ~SK_RA_CAMOUFLAGE()
  public class SK_RA_CAMOUFLAGE & operator=(const class SK_RA_CAMOUFLAGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_CLUSTERBOMB {
  CSkillTypeInfo2, offset = 0x0

    public int SK_RA_CLUSTERBOMB::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_CLUSTERBOMB::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_RA_CLUSTERBOMB(const class SK_RA_CLUSTERBOMB &)
  public void SK_RA_CLUSTERBOMB::SK_RA_CLUSTERBOMB()
  public void ~SK_RA_CLUSTERBOMB()
  public class SK_RA_CLUSTERBOMB & operator=(const class SK_RA_CLUSTERBOMB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_COBALTTRAP {
  CSkillTypeInfo2, offset = 0x0

    public void SK_RA_COBALTTRAP::Init()
  public int SK_RA_COBALTTRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_COBALTTRAP::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetPropertyStoneItemID()
  public void SK_RA_COBALTTRAP(const class SK_RA_COBALTTRAP &)
  public void SK_RA_COBALTTRAP::SK_RA_COBALTTRAP()
  public void ~SK_RA_COBALTTRAP()
  public class SK_RA_COBALTTRAP & operator=(const class SK_RA_COBALTTRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_DETONATOR {
  CSkillTypeInfo_ThirdJob_Ground, offset = 0x0

  public void SK_RA_DETONATOR(const class SK_RA_DETONATOR &)
  public void SK_RA_DETONATOR::SK_RA_DETONATOR()
  public void ~SK_RA_DETONATOR()
  public class SK_RA_DETONATOR & operator=(const class SK_RA_DETONATOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_ELECTRICSHOCKER {
  CSkillTypeInfo2, offset = 0x0

    public void SK_RA_ELECTRICSHOCKER::Init()
  public int SK_RA_ELECTRICSHOCKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_ELECTRICSHOCKER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_RA_ELECTRICSHOCKER::GetLifeTM(const int)
  public int SK_RA_ELECTRICSHOCKER::GetReduceSPpercentPerSEC(const int)
  public void SK_RA_ELECTRICSHOCKER(const class SK_RA_ELECTRICSHOCKER &)
  public void SK_RA_ELECTRICSHOCKER::SK_RA_ELECTRICSHOCKER()
  public void ~SK_RA_ELECTRICSHOCKER()
  public class SK_RA_ELECTRICSHOCKER & operator=(const class SK_RA_ELECTRICSHOCKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_FEARBREEZE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RA_FEARBREEZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_FEARBREEZE::GetLifeTM(const int)
  public int SK_RA_FEARBREEZE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_RA_FEARBREEZE(const class SK_RA_FEARBREEZE &)
  public void SK_RA_FEARBREEZE::SK_RA_FEARBREEZE()
  public void ~SK_RA_FEARBREEZE()
  public class SK_RA_FEARBREEZE & operator=(const class SK_RA_FEARBREEZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_FIRINGTRAP {
  CSkillTypeInfo2, offset = 0x0

    public void SK_RA_FIRINGTRAP::Init()
  public int SK_RA_FIRINGTRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_FIRINGTRAP::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_RA_FIRINGTRAP::GetApplyEFSTPercent(const int)
  public void SK_RA_FIRINGTRAP(const class SK_RA_FIRINGTRAP &)
  public void SK_RA_FIRINGTRAP::SK_RA_FIRINGTRAP()
  public void ~SK_RA_FIRINGTRAP()
  public class SK_RA_FIRINGTRAP & operator=(const class SK_RA_FIRINGTRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_ICEBOUNDTRAP {
  CSkillTypeInfo2, offset = 0x0

    public void SK_RA_ICEBOUNDTRAP::Init()
  public int SK_RA_ICEBOUNDTRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_ICEBOUNDTRAP::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_RA_ICEBOUNDTRAP::GetApplyEFSTPercent(const int)
  public void SK_RA_ICEBOUNDTRAP(const class SK_RA_ICEBOUNDTRAP &)
  public void SK_RA_ICEBOUNDTRAP::SK_RA_ICEBOUNDTRAP()
  public void ~SK_RA_ICEBOUNDTRAP()
  public class SK_RA_ICEBOUNDTRAP & operator=(const class SK_RA_ICEBOUNDTRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_MAGENTATRAP {
  CSkillTypeInfo2, offset = 0x0

    public void SK_RA_MAGENTATRAP::Init()
  public int SK_RA_MAGENTATRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_MAGENTATRAP::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetPropertyStoneItemID()
  public void SK_RA_MAGENTATRAP(const class SK_RA_MAGENTATRAP &)
  public void SK_RA_MAGENTATRAP::SK_RA_MAGENTATRAP()
  public void ~SK_RA_MAGENTATRAP()
  public class SK_RA_MAGENTATRAP & operator=(const class SK_RA_MAGENTATRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_MAIZETRAP {
  CSkillTypeInfo2, offset = 0x0

    public void SK_RA_MAIZETRAP::Init()
  public int SK_RA_MAIZETRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_MAIZETRAP::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetPropertyStoneItemID()
  public void SK_RA_MAIZETRAP(const class SK_RA_MAIZETRAP &)
  public void SK_RA_MAIZETRAP::SK_RA_MAIZETRAP()
  public void ~SK_RA_MAIZETRAP()
  public class SK_RA_MAIZETRAP & operator=(const class SK_RA_MAIZETRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_RANGERMAIN {
  CSkillTypeInfo2, offset = 0x0

  public void SK_RA_RANGERMAIN(const class SK_RA_RANGERMAIN &)
  public void SK_RA_RANGERMAIN::SK_RA_RANGERMAIN()
  public void ~SK_RA_RANGERMAIN()
  public class SK_RA_RANGERMAIN & operator=(const class SK_RA_RANGERMAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_RESEARCHTRAP {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RA_RESEARCHTRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_RESEARCHTRAP::GetPlusATK(const int)
  public int SK_RA_RESEARCHTRAP::GetPlusINT(const int)
  public int SK_RA_RESEARCHTRAP::GetPlusMSP(const int)
  public static int SK_RA_RESEARCHTRAP::GetTrapPlusRange(const int)
  public void SK_RA_RESEARCHTRAP(const class SK_RA_RESEARCHTRAP &)
  public void SK_RA_RESEARCHTRAP::SK_RA_RESEARCHTRAP()
  public void ~SK_RA_RESEARCHTRAP()
  public class SK_RA_RESEARCHTRAP & operator=(const class SK_RA_RESEARCHTRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_SENSITIVEKEEN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RA_SENSITIVEKEEN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_SENSITIVEKEEN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_RA_SENSITIVEKEEN::GetRA_WUGBITEInvokePercent(const int)
  public int SK_RA_SENSITIVEKEEN::GetDetectRadiusRange(const int)
  public void SK_RA_SENSITIVEKEEN(const class SK_RA_SENSITIVEKEEN &)
  public void SK_RA_SENSITIVEKEEN::SK_RA_SENSITIVEKEEN()
  public void ~SK_RA_SENSITIVEKEEN()
  public class SK_RA_SENSITIVEKEEN & operator=(const class SK_RA_SENSITIVEKEEN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_TOOTHOFWUG {
  CSkillTypeInfo2, offset = 0x0

  public static int SK_RA_TOOTHOFWUG::GetPlusATKAmount(const int)
  public void SK_RA_TOOTHOFWUG(const class SK_RA_TOOTHOFWUG &)
  public void SK_RA_TOOTHOFWUG::SK_RA_TOOTHOFWUG()
  public void ~SK_RA_TOOTHOFWUG()
  public class SK_RA_TOOTHOFWUG & operator=(const class SK_RA_TOOTHOFWUG &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_VERDURETRAP {
  CSkillTypeInfo2, offset = 0x0

    public void SK_RA_VERDURETRAP::Init()
  public int SK_RA_VERDURETRAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_VERDURETRAP::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetPropertyStoneItemID()
  public void SK_RA_VERDURETRAP(const class SK_RA_VERDURETRAP &)
  public void SK_RA_VERDURETRAP::SK_RA_VERDURETRAP()
  public void ~SK_RA_VERDURETRAP()
  public class SK_RA_VERDURETRAP & operator=(const class SK_RA_VERDURETRAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_WUGBITE {
  CSkillTypeInfo_ThirdJob_Attack, offset = 0x0

  public int SK_RA_WUGBITE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_RA_WUGBITE(const class SK_RA_WUGBITE &)
  public void SK_RA_WUGBITE::SK_RA_WUGBITE()
  public void ~SK_RA_WUGBITE()
  public class SK_RA_WUGBITE & operator=(const class SK_RA_WUGBITE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_WUGDASH {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public int SK_RA_WUGDASH::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_RA_WUGDASH(const class SK_RA_WUGDASH &)
  public void SK_RA_WUGDASH::SK_RA_WUGDASH()
  public void ~SK_RA_WUGDASH()
  public class SK_RA_WUGDASH & operator=(const class SK_RA_WUGDASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_WUGMASTERY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RA_WUGMASTERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_WUGMASTERY::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_RA_WUGMASTERY(const class SK_RA_WUGMASTERY &)
  public void SK_RA_WUGMASTERY::SK_RA_WUGMASTERY()
  public void ~SK_RA_WUGMASTERY()
  public class SK_RA_WUGMASTERY & operator=(const class SK_RA_WUGMASTERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_WUGRIDER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RA_WUGRIDER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_WUGRIDER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public static bool SK_RA_WUGRIDER::IsSkillUseable(const int)
  public void SK_RA_WUGRIDER(const class SK_RA_WUGRIDER &)
  public void SK_RA_WUGRIDER::SK_RA_WUGRIDER()
  public void ~SK_RA_WUGRIDER()
  public class SK_RA_WUGRIDER & operator=(const class SK_RA_WUGRIDER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RA_WUGSTRIKE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RA_WUGSTRIKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RA_WUGSTRIKE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_RA_WUGSTRIKE(const class SK_RA_WUGSTRIKE &)
  public void SK_RA_WUGSTRIKE::SK_RA_WUGSTRIKE()
  public void ~SK_RA_WUGSTRIKE()
  public class SK_RA_WUGSTRIKE & operator=(const class SK_RA_WUGSTRIKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RETURN_TO_ELDICASTES {
  SK_ALL_MAPMOVE, offset = 0x0

  public const int SK_RETURN_TO_ELDICASTES::GetEfstID()
  public void SK_RETURN_TO_ELDICASTES(const class SK_RETURN_TO_ELDICASTES &)
  public void SK_RETURN_TO_ELDICASTES::SK_RETURN_TO_ELDICASTES()
  public void ~SK_RETURN_TO_ELDICASTES()
  public class SK_RETURN_TO_ELDICASTES & operator=(const class SK_RETURN_TO_ELDICASTES &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_BACKSTAP {
  SK_ROGUE, offset = 0x0

  public void SK_RG_BACKSTAP::Init()
  public int SK_RG_BACKSTAP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_BACKSTAP::GetMaxLevel()
  public short SK_RG_BACKSTAP::GetSPCost(short)
  public void SK_RG_BACKSTAP(const class SK_RG_BACKSTAP &)
  public void SK_RG_BACKSTAP()
  public void ~SK_RG_BACKSTAP()
  public class SK_RG_BACKSTAP & operator=(const class SK_RG_BACKSTAP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_CLEANER {
  SK_ROGUE, offset = 0x0

  public void SK_RG_CLEANER::Init()
  public int SK_RG_CLEANER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_CLEANER::GetMaxLevel()
  public short SK_RG_CLEANER::GetSPCost(short)
  public void SK_RG_CLEANER(const class SK_RG_CLEANER &)
  public void SK_RG_CLEANER::SK_RG_CLEANER()
  public void ~SK_RG_CLEANER()
  public class SK_RG_CLEANER & operator=(const class SK_RG_CLEANER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_CLOSECONFINE {
  SK_ROGUE, offset = 0x0

  public void SK_RG_CLOSECONFINE::Init()
  public int SK_RG_CLOSECONFINE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_CLOSECONFINE::GetMaxLevel()
  public short SK_RG_CLOSECONFINE::GetSPCost(short)
  public void SK_RG_CLOSECONFINE(const class SK_RG_CLOSECONFINE &)
  public void SK_RG_CLOSECONFINE::SK_RG_CLOSECONFINE()
  public void ~SK_RG_CLOSECONFINE()
  public class SK_RG_CLOSECONFINE & operator=(const class SK_RG_CLOSECONFINE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_COMPULSION {
  SK_ROGUE, offset = 0x0

  public void SK_RG_COMPULSION::Init()
  public int SK_RG_COMPULSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_RG_COMPULSION(const class SK_RG_COMPULSION &)
  public void SK_RG_COMPULSION::SK_RG_COMPULSION()
  public void ~SK_RG_COMPULSION()
  public class SK_RG_COMPULSION & operator=(const class SK_RG_COMPULSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_FLAGGRAFFITI {
  SK_ROGUE, offset = 0x0

  public void SK_RG_FLAGGRAFFITI::Init()
  public int SK_RG_FLAGGRAFFITI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_FLAGGRAFFITI::GetSPCost(short)
  public void SK_RG_FLAGGRAFFITI(const class SK_RG_FLAGGRAFFITI &)
  public void SK_RG_FLAGGRAFFITI::SK_RG_FLAGGRAFFITI()
  public void ~SK_RG_FLAGGRAFFITI()
  public class SK_RG_FLAGGRAFFITI & operator=(const class SK_RG_FLAGGRAFFITI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_GANGSTER {
  SK_ROGUE, offset = 0x0

  public void SK_RG_GANGSTER::Init()
  public int SK_RG_GANGSTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_GANGSTER::GetMaxLevel()
  public void SK_RG_GANGSTER(const class SK_RG_GANGSTER &)
  public void SK_RG_GANGSTER::SK_RG_GANGSTER()
  public void ~SK_RG_GANGSTER()
  public class SK_RG_GANGSTER & operator=(const class SK_RG_GANGSTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_GRAFFITI {
  SK_ROGUE, offset = 0x0

  public void SK_RG_GRAFFITI::Init()
  public int SK_RG_GRAFFITI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_GRAFFITI::GetMaxLevel()
  public short SK_RG_GRAFFITI::GetSPCost(short)
  public void SK_RG_GRAFFITI(const class SK_RG_GRAFFITI &)
  public void SK_RG_GRAFFITI::SK_RG_GRAFFITI()
  public void ~SK_RG_GRAFFITI()
  public class SK_RG_GRAFFITI & operator=(const class SK_RG_GRAFFITI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_INTIMIDATE {
  SK_ROGUE, offset = 0x0

  public void SK_RG_INTIMIDATE::Init()
  public int SK_RG_INTIMIDATE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_INTIMIDATE::GetSPCost(short)
  public void SK_RG_INTIMIDATE(const class SK_RG_INTIMIDATE &)
  public void SK_RG_INTIMIDATE::SK_RG_INTIMIDATE()
  public void ~SK_RG_INTIMIDATE()
  public class SK_RG_INTIMIDATE & operator=(const class SK_RG_INTIMIDATE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_PLAGIARISM {
  SK_ROGUE, offset = 0x0

    public void SK_RG_PLAGIARISM::Init()
  public int SK_RG_PLAGIARISM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_PLAGIARISM::GetMaxLevel()
  public void SK_RG_PLAGIARISM(const class SK_RG_PLAGIARISM &)
  public void SK_RG_PLAGIARISM::SK_RG_PLAGIARISM()
  public void ~SK_RG_PLAGIARISM()
  public class SK_RG_PLAGIARISM & operator=(const class SK_RG_PLAGIARISM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

union SK_RG_PLAGIARISM::DATA {
    /* this+0x0 */ struct SK_RG_PLAGIARISM::DATA::<unnamed-type-Imitation> Imitation

  /* this+0x0 */ int value
  public int operator int()
  public void DATA(const int, const int)
  public void DATA(const int)
}

struct SK_RG_PLAGIARISM::DATA::<unnamed-type-Imitation> {
  /* this(bf)+0x0:0x0 len(0x10) */ int SKID
  /* this(bf)+0x0:0x10 len(0x8) */ int SKLevel
  /* this(bf)+0x0:0x18 len(0x8) */ int unused
}

class SK_RG_RAID {
  SK_ROGUE, offset = 0x0

  public void SK_RG_RAID::Init()
  public int SK_RG_RAID::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_RAID::GetSPCost(short)
  public void SK_RG_RAID(const class SK_RG_RAID &)
  public void SK_RG_RAID()
  public void ~SK_RG_RAID()
  public class SK_RG_RAID & operator=(const class SK_RG_RAID &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_SNATCHER {
  SK_ROGUE, offset = 0x0

  public void SK_RG_SNATCHER::Init()
  public int SK_RG_SNATCHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_SNATCHER::GetMaxLevel()
  public void SK_RG_SNATCHER(const class SK_RG_SNATCHER &)
  public void SK_RG_SNATCHER()
  public void ~SK_RG_SNATCHER()
  public class SK_RG_SNATCHER & operator=(const class SK_RG_SNATCHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_STEALCOIN {
  SK_ROGUE, offset = 0x0

  public void SK_RG_STEALCOIN::Init()
  public int SK_RG_STEALCOIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_STEALCOIN::GetMaxLevel()
  public short SK_RG_STEALCOIN::GetSPCost(short)
  public void SK_RG_STEALCOIN(const class SK_RG_STEALCOIN &)
  public void SK_RG_STEALCOIN()
  public void ~SK_RG_STEALCOIN()
  public class SK_RG_STEALCOIN & operator=(const class SK_RG_STEALCOIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_STRIPARMOR {
  SK_ROGUE, offset = 0x0

  public void SK_RG_STRIPARMOR::Init()
  public int SK_RG_STRIPARMOR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_STRIPARMOR::GetSPCost(short)
  public short SK_RG_STRIPARMOR::GetPreDelayTime(short)
  public void SK_RG_STRIPARMOR(const class SK_RG_STRIPARMOR &)
  public void SK_RG_STRIPARMOR()
  public void ~SK_RG_STRIPARMOR()
  public class SK_RG_STRIPARMOR & operator=(const class SK_RG_STRIPARMOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_STRIPHELM {
  SK_ROGUE, offset = 0x0

  public void SK_RG_STRIPHELM::Init()
  public int SK_RG_STRIPHELM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_STRIPHELM::GetSPCost(short)
  public short SK_RG_STRIPHELM::GetPreDelayTime(short)
  public void SK_RG_STRIPHELM(const class SK_RG_STRIPHELM &)
  public void SK_RG_STRIPHELM::SK_RG_STRIPHELM()
  public void ~SK_RG_STRIPHELM()
  public class SK_RG_STRIPHELM & operator=(const class SK_RG_STRIPHELM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_STRIPSHIELD {
  SK_ROGUE, offset = 0x0

  public void SK_RG_STRIPSHIELD::Init()
  public int SK_RG_STRIPSHIELD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_STRIPSHIELD::GetSPCost(short)
  public short SK_RG_STRIPSHIELD::GetPreDelayTime(short)
  public void SK_RG_STRIPSHIELD(const class SK_RG_STRIPSHIELD &)
  public void SK_RG_STRIPSHIELD()
  public void ~SK_RG_STRIPSHIELD()
  public class SK_RG_STRIPSHIELD & operator=(const class SK_RG_STRIPSHIELD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_STRIPWEAPON {
  SK_ROGUE, offset = 0x0

  public void SK_RG_STRIPWEAPON::Init()
  public int SK_RG_STRIPWEAPON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_RG_STRIPWEAPON::GetSPCost(short)
  public short SK_RG_STRIPWEAPON::GetPreDelayTime(short)
  public void SK_RG_STRIPWEAPON(const class SK_RG_STRIPWEAPON &)
  public void SK_RG_STRIPWEAPON()
  public void ~SK_RG_STRIPWEAPON()
  public class SK_RG_STRIPWEAPON & operator=(const class SK_RG_STRIPWEAPON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RG_TUNNELDRIVE {
  SK_ROGUE, offset = 0x0

  public void SK_RG_TUNNELDRIVE::Init()
  public int SK_RG_TUNNELDRIVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_RG_TUNNELDRIVE(const class SK_RG_TUNNELDRIVE &)
  public void SK_RG_TUNNELDRIVE()
  public void ~SK_RG_TUNNELDRIVE()
  public class SK_RG_TUNNELDRIVE & operator=(const class SK_RG_TUNNELDRIVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_ABUNDANCE {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_ABUNDANCE(const class SK_RK_ABUNDANCE &)
  public void SK_RK_ABUNDANCE::SK_RK_ABUNDANCE()
  public void ~SK_RK_ABUNDANCE()
  public class SK_RK_ABUNDANCE & operator=(const class SK_RK_ABUNDANCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_CRUSHSTRIKE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RK_CRUSHSTRIKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_RK_CRUSHSTRIKE(const class SK_RK_CRUSHSTRIKE &)
  public void SK_RK_CRUSHSTRIKE::SK_RK_CRUSHSTRIKE()
  public void ~SK_RK_CRUSHSTRIKE()
  public class SK_RK_CRUSHSTRIKE & operator=(const class SK_RK_CRUSHSTRIKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_DEATHBOUND {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_DEATHBOUND(const class SK_RK_DEATHBOUND &)
  public void SK_RK_DEATHBOUND::SK_RK_DEATHBOUND()
  public void ~SK_RK_DEATHBOUND()
  public class SK_RK_DEATHBOUND & operator=(const class SK_RK_DEATHBOUND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_DRAGONBREATH {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RK_DRAGONBREATH::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_RK_DRAGONBREATH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_RK_DRAGONBREATH(const class SK_RK_DRAGONBREATH &)
  public void SK_RK_DRAGONBREATH::SK_RK_DRAGONBREATH()
  public void ~SK_RK_DRAGONBREATH()
  public class SK_RK_DRAGONBREATH & operator=(const class SK_RK_DRAGONBREATH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_DRAGONHOWLING {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public int SK_RK_DRAGONHOWLING::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_RK_DRAGONHOWLING(const class SK_RK_DRAGONHOWLING &)
  public void SK_RK_DRAGONHOWLING::SK_RK_DRAGONHOWLING()
  public void ~SK_RK_DRAGONHOWLING()
  public class SK_RK_DRAGONHOWLING & operator=(const class SK_RK_DRAGONHOWLING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_DRAGONTRAINING {
  CSkillTypeInfo2, offset = 0x0

  private int SK_RK_DRAGONTRAINING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_RK_DRAGONTRAINING(const class SK_RK_DRAGONTRAINING &)
  public void SK_RK_DRAGONTRAINING::SK_RK_DRAGONTRAINING()
  public void ~SK_RK_DRAGONTRAINING()
  public class SK_RK_DRAGONTRAINING & operator=(const class SK_RK_DRAGONTRAINING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_ENCHANTBLADE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RK_ENCHANTBLADE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RK_ENCHANTBLADE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetPlusMATKamount(const int)
  public int SK_RK_ENCHANTBLADE::GetLifeTM(const int)
  public void SK_RK_ENCHANTBLADE(const class SK_RK_ENCHANTBLADE &)
  public void SK_RK_ENCHANTBLADE::SK_RK_ENCHANTBLADE()
  public void ~SK_RK_ENCHANTBLADE()
  public class SK_RK_ENCHANTBLADE & operator=(const class SK_RK_ENCHANTBLADE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_FIGHTINGSPIRIT {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_FIGHTINGSPIRIT(const class SK_RK_FIGHTINGSPIRIT &)
  public void SK_RK_FIGHTINGSPIRIT::SK_RK_FIGHTINGSPIRIT()
  public void ~SK_RK_FIGHTINGSPIRIT()
  public class SK_RK_FIGHTINGSPIRIT & operator=(const class SK_RK_FIGHTINGSPIRIT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_GIANTGROWTH {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_GIANTGROWTH(const class SK_RK_GIANTGROWTH &)
  public void SK_RK_GIANTGROWTH::SK_RK_GIANTGROWTH()
  public void ~SK_RK_GIANTGROWTH()
  public class SK_RK_GIANTGROWTH & operator=(const class SK_RK_GIANTGROWTH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_HUNDREDSPEAR {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RK_HUNDREDSPEAR::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_RK_HUNDREDSPEAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_RK_HUNDREDSPEAR(const class SK_RK_HUNDREDSPEAR &)
  public void SK_RK_HUNDREDSPEAR::SK_RK_HUNDREDSPEAR()
  public void ~SK_RK_HUNDREDSPEAR()
  public class SK_RK_HUNDREDSPEAR & operator=(const class SK_RK_HUNDREDSPEAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_IGNITIONBREAK {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RK_IGNITIONBREAK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RK_IGNITIONBREAK::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int GetATKpercentINNER(const int)
  public int GetATKpercentMIDDLE(const int)
  public int GetATKpercentOUTER(const int)
  public void SK_RK_IGNITIONBREAK(const class SK_RK_IGNITIONBREAK &)
  public void SK_RK_IGNITIONBREAK::SK_RK_IGNITIONBREAK()
  public void ~SK_RK_IGNITIONBREAK()
  public class SK_RK_IGNITIONBREAK & operator=(const class SK_RK_IGNITIONBREAK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_MILLENNIUMSHIELD {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_MILLENNIUMSHIELD(const class SK_RK_MILLENNIUMSHIELD &)
  public void SK_RK_MILLENNIUMSHIELD::SK_RK_MILLENNIUMSHIELD()
  public void ~SK_RK_MILLENNIUMSHIELD()
  public class SK_RK_MILLENNIUMSHIELD & operator=(const class SK_RK_MILLENNIUMSHIELD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_PHANTOMTHRUST {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_PHANTOMTHRUST(const class SK_RK_PHANTOMTHRUST &)
  public void SK_RK_PHANTOMTHRUST::SK_RK_PHANTOMTHRUST()
  public void ~SK_RK_PHANTOMTHRUST()
  public class SK_RK_PHANTOMTHRUST & operator=(const class SK_RK_PHANTOMTHRUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_REFRESH {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_REFRESH(const class SK_RK_REFRESH &)
  public void SK_RK_REFRESH::SK_RK_REFRESH()
  public void ~SK_RK_REFRESH()
  public class SK_RK_REFRESH & operator=(const class SK_RK_REFRESH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_RUNEMASTERY {
  CSkillTypeInfo2, offset = 0x0

  public void SK_RK_RUNEMASTERY(const class SK_RK_RUNEMASTERY &)
  public void SK_RK_RUNEMASTERY::SK_RK_RUNEMASTERY()
  public void ~SK_RK_RUNEMASTERY()
  public class SK_RK_RUNEMASTERY & operator=(const class SK_RK_RUNEMASTERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_SONICWAVE {
  CSkillTypeInfo_ThirdJob_Attack, offset = 0x0

  public void SK_RK_SONICWAVE(const class SK_RK_SONICWAVE &)
  public void SK_RK_SONICWAVE::SK_RK_SONICWAVE()
  public void ~SK_RK_SONICWAVE()
  public class SK_RK_SONICWAVE & operator=(const class SK_RK_SONICWAVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_STONEHARDSKIN {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_STONEHARDSKIN(const class SK_RK_STONEHARDSKIN &)
  public void SK_RK_STONEHARDSKIN::SK_RK_STONEHARDSKIN()
  public void ~SK_RK_STONEHARDSKIN()
  public class SK_RK_STONEHARDSKIN & operator=(const class SK_RK_STONEHARDSKIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_STORMBLAST {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_STORMBLAST(const class SK_RK_STORMBLAST &)
  public void SK_RK_STORMBLAST::SK_RK_STORMBLAST()
  public void ~SK_RK_STORMBLAST()
  public class SK_RK_STORMBLAST & operator=(const class SK_RK_STORMBLAST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_VITALITYACTIVATION {
  CSkillTypeInfo_ThirdJob_Operate, offset = 0x0

  public void SK_RK_VITALITYACTIVATION(const class SK_RK_VITALITYACTIVATION &)
  public void SK_RK_VITALITYACTIVATION::SK_RK_VITALITYACTIVATION()
  public void ~SK_RK_VITALITYACTIVATION()
  public class SK_RK_VITALITYACTIVATION & operator=(const class SK_RK_VITALITYACTIVATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_RK_WINDCUTTER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_RK_WINDCUTTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_RK_WINDCUTTER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public static void SK_RK_WINDCUTTER::ApplyFEAR(class CActor *, class CCharacter *, const int)
  public void SK_RK_WINDCUTTER(const class SK_RK_WINDCUTTER &)
  public void SK_RK_WINDCUTTER::SK_RK_WINDCUTTER()
  public void ~SK_RK_WINDCUTTER()
  public class SK_RK_WINDCUTTER & operator=(const class SK_RK_WINDCUTTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ROGUE {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_ROGUE::GetMaxLevel()
  public int SK_ROGUE::IsAvailableJob(short)
  public short SK_ROGUE::GetSPCost(short)
  public short SK_ROGUE::GetPreDelayTime(short)
  public void SK_ROGUE(const class SK_ROGUE &)
  public void SK_ROGUE::SK_ROGUE()
  public void SK_ROGUE::~SK_ROGUE()
  public class SK_ROGUE & operator=(const class SK_ROGUE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SAGE {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_SAGE::GetMaxLevel()
  public int SK_SAGE::IsAvailableJob(short)
  public short SK_SAGE::GetSPCost(short)
  public short SK_SAGE::GetPreDelayTime(short)
  public void SK_SAGE(const class SK_SAGE &)
  public void SK_SAGE::SK_SAGE()
  public void SK_SAGE::~SK_SAGE()
  public class SK_SAGE & operator=(const class SK_SAGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_ABRACADABRA {
  SK_SAGE, offset = 0x0

  public void SK_SA_ABRACADABRA::Init()
  public int SK_SA_ABRACADABRA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_ABRACADABRA::GetSPCost(short)
  public void SK_SA_ABRACADABRA(const class SK_SA_ABRACADABRA &)
  public void SK_SA_ABRACADABRA::SK_SA_ABRACADABRA()
  public void ~SK_SA_ABRACADABRA()
  public class SK_SA_ABRACADABRA & operator=(const class SK_SA_ABRACADABRA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_ADVANCEDBOOK {
  SK_SAGE, offset = 0x0

  public void SK_SA_ADVANCEDBOOK::Init()
  public int SK_SA_ADVANCEDBOOK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_SA_ADVANCEDBOOK(const class SK_SA_ADVANCEDBOOK &)
  public void SK_SA_ADVANCEDBOOK::SK_SA_ADVANCEDBOOK()
  public void ~SK_SA_ADVANCEDBOOK()
  public class SK_SA_ADVANCEDBOOK & operator=(const class SK_SA_ADVANCEDBOOK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_AUTOSPELL {
  SK_SAGE, offset = 0x0

  public void SK_SA_AUTOSPELL::Init()
  public int SK_SA_AUTOSPELL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_AUTOSPELL::GetSPCost(short)
  public short SK_SA_AUTOSPELL::GetPreDelayTime(short)
  public void SK_SA_AUTOSPELL(const class SK_SA_AUTOSPELL &)
  public void SK_SA_AUTOSPELL::SK_SA_AUTOSPELL()
  public void ~SK_SA_AUTOSPELL()
  public class SK_SA_AUTOSPELL & operator=(const class SK_SA_AUTOSPELL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_CASTCANCEL {
  SK_SAGE, offset = 0x0

  public void SK_SA_CASTCANCEL::Init()
  public int SK_SA_CASTCANCEL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_CASTCANCEL::GetMaxLevel()
  public short SK_SA_CASTCANCEL::GetSPCost(short)
  public void SK_SA_CASTCANCEL(const class SK_SA_CASTCANCEL &)
  public void SK_SA_CASTCANCEL::SK_SA_CASTCANCEL()
  public void ~SK_SA_CASTCANCEL()
  public class SK_SA_CASTCANCEL & operator=(const class SK_SA_CASTCANCEL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_CLASSCHANGE {
  SK_SAGE, offset = 0x0

  public void SK_SA_CLASSCHANGE::Init()
  public int SK_SA_CLASSCHANGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_CLASSCHANGE::IsAvailableJob(short)
  public void SK_SA_CLASSCHANGE(const class SK_SA_CLASSCHANGE &)
  public void SK_SA_CLASSCHANGE::SK_SA_CLASSCHANGE()
  public void ~SK_SA_CLASSCHANGE()
  public class SK_SA_CLASSCHANGE & operator=(const class SK_SA_CLASSCHANGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_COMA {
  SK_SAGE, offset = 0x0

  public void SK_SA_COMA::Init()
  public int SK_SA_COMA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_COMA::IsAvailableJob(short)
  public void SK_SA_COMA(const class SK_SA_COMA &)
  public void SK_SA_COMA::SK_SA_COMA()
  public void ~SK_SA_COMA()
  public class SK_SA_COMA & operator=(const class SK_SA_COMA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_CREATECON {
  SK_SAGE, offset = 0x0

  public void SK_SA_CREATECON::Init()
  public int SK_SA_CREATECON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_CREATECON::GetMaxLevel()
  public short SK_SA_CREATECON::GetSPCost(short)
  public void SK_SA_CREATECON(const class SK_SA_CREATECON &)
  public void SK_SA_CREATECON::SK_SA_CREATECON()
  public void ~SK_SA_CREATECON()
  public class SK_SA_CREATECON & operator=(const class SK_SA_CREATECON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_DEATH {
  SK_SAGE, offset = 0x0

  public void SK_SA_DEATH::Init()
  public int SK_SA_DEATH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_DEATH::IsAvailableJob(short)
  public void SK_SA_DEATH(const class SK_SA_DEATH &)
  public void SK_SA_DEATH::SK_SA_DEATH()
  public void ~SK_SA_DEATH()
  public class SK_SA_DEATH & operator=(const class SK_SA_DEATH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_DELUGE {
  SK_SAGE, offset = 0x0

  public void SK_SA_DELUGE::Init()
  public int SK_SA_DELUGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_DELUGE::GetMaxLevel()
  public short SK_SA_DELUGE::GetSPCost(short)
  public short SK_SA_DELUGE::GetPreDelayTime(short)
  public void SK_SA_DELUGE(const class SK_SA_DELUGE &)
  public void SK_SA_DELUGE::SK_SA_DELUGE()
  public void ~SK_SA_DELUGE()
  public class SK_SA_DELUGE & operator=(const class SK_SA_DELUGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_DISPELL {
  SK_SAGE, offset = 0x0

  public void SK_SA_DISPELL::Init()
  public int SK_SA_DISPELL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_DISPELL::GetMaxLevel()
  public short SK_SA_DISPELL::GetSPCost(short)
  public short SK_SA_DISPELL::GetPreDelayTime(short)
  public void SK_SA_DISPELL(const class SK_SA_DISPELL &)
  public void SK_SA_DISPELL::SK_SA_DISPELL()
  public void ~SK_SA_DISPELL()
  public class SK_SA_DISPELL & operator=(const class SK_SA_DISPELL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_DRAGONOLOGY {
  SK_SAGE, offset = 0x0

  public void SK_SA_DRAGONOLOGY::Init()
  public int SK_SA_DRAGONOLOGY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_DRAGONOLOGY::GetMaxLevel()
  public void SK_SA_DRAGONOLOGY(const class SK_SA_DRAGONOLOGY &)
  public void SK_SA_DRAGONOLOGY::SK_SA_DRAGONOLOGY()
  public void ~SK_SA_DRAGONOLOGY()
  public class SK_SA_DRAGONOLOGY & operator=(const class SK_SA_DRAGONOLOGY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_ELEMENTFIRE {
  SK_SAGE, offset = 0x0

  public void SK_SA_ELEMENTFIRE::Init()
  public int SK_SA_ELEMENTFIRE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_ELEMENTFIRE::GetMaxLevel()
  public short SK_SA_ELEMENTFIRE::GetSPCost(short)
  public short SK_SA_ELEMENTFIRE::GetPreDelayTime(short)
  public short SK_SA_ELEMENTFIRE::GetPostDelayTM(short)
  public void SK_SA_ELEMENTFIRE(const class SK_SA_ELEMENTFIRE &)
  public void SK_SA_ELEMENTFIRE::SK_SA_ELEMENTFIRE()
  public void ~SK_SA_ELEMENTFIRE()
  public class SK_SA_ELEMENTFIRE & operator=(const class SK_SA_ELEMENTFIRE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_ELEMENTGROUND {
  SK_SAGE, offset = 0x0

  public void SK_SA_ELEMENTGROUND::Init()
  public int SK_SA_ELEMENTGROUND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_ELEMENTGROUND::GetMaxLevel()
  public short SK_SA_ELEMENTGROUND::GetSPCost(short)
  public short SK_SA_ELEMENTGROUND::GetPreDelayTime(short)
  public short SK_SA_ELEMENTGROUND::GetPostDelayTM(short)
  public void SK_SA_ELEMENTGROUND(const class SK_SA_ELEMENTGROUND &)
  public void SK_SA_ELEMENTGROUND::SK_SA_ELEMENTGROUND()
  public void ~SK_SA_ELEMENTGROUND()
  public class SK_SA_ELEMENTGROUND & operator=(const class SK_SA_ELEMENTGROUND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_ELEMENTWATER {
  SK_SAGE, offset = 0x0

  public void SK_SA_ELEMENTWATER::Init()
  public int SK_SA_ELEMENTWATER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_ELEMENTWATER::GetMaxLevel()
  public short SK_SA_ELEMENTWATER::GetSPCost(short)
  public short SK_SA_ELEMENTWATER::GetPreDelayTime(short)
  public short SK_SA_ELEMENTWATER::GetPostDelayTM(short)
  public void SK_SA_ELEMENTWATER(const class SK_SA_ELEMENTWATER &)
  public void SK_SA_ELEMENTWATER::SK_SA_ELEMENTWATER()
  public void ~SK_SA_ELEMENTWATER()
  public class SK_SA_ELEMENTWATER & operator=(const class SK_SA_ELEMENTWATER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_ELEMENTWIND {
  SK_SAGE, offset = 0x0

  public void SK_SA_ELEMENTWIND::Init()
  public int SK_SA_ELEMENTWIND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_ELEMENTWIND::GetMaxLevel()
  public short SK_SA_ELEMENTWIND::GetSPCost(short)
  public short SK_SA_ELEMENTWIND::GetPreDelayTime(short)
  public short SK_SA_ELEMENTWIND::GetPostDelayTM(short)
  public void SK_SA_ELEMENTWIND(const class SK_SA_ELEMENTWIND &)
  public void SK_SA_ELEMENTWIND::SK_SA_ELEMENTWIND()
  public void ~SK_SA_ELEMENTWIND()
  public class SK_SA_ELEMENTWIND & operator=(const class SK_SA_ELEMENTWIND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_FLAMELAUNCHER {
  SK_SAGE, offset = 0x0

  public void SK_SA_FLAMELAUNCHER::Init()
  public int SK_SA_FLAMELAUNCHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_FLAMELAUNCHER::GetMaxLevel()
  public short SK_SA_FLAMELAUNCHER::GetSPCost(short)
  public short SK_SA_FLAMELAUNCHER::GetPreDelayTime(short)
  public void SK_SA_FLAMELAUNCHER(const class SK_SA_FLAMELAUNCHER &)
  public void SK_SA_FLAMELAUNCHER::SK_SA_FLAMELAUNCHER()
  public void ~SK_SA_FLAMELAUNCHER()
  public class SK_SA_FLAMELAUNCHER & operator=(const class SK_SA_FLAMELAUNCHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_FORTUNE {
  SK_SAGE, offset = 0x0

  public void SK_SA_FORTUNE::Init()
  public int SK_SA_FORTUNE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_FORTUNE::IsAvailableJob(short)
  public void SK_SA_FORTUNE(const class SK_SA_FORTUNE &)
  public void SK_SA_FORTUNE::SK_SA_FORTUNE()
  public void ~SK_SA_FORTUNE()
  public class SK_SA_FORTUNE & operator=(const class SK_SA_FORTUNE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_FREECAST {
  SK_SAGE, offset = 0x0

  public void SK_SA_FREECAST::Init()
  public int SK_SA_FREECAST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_SA_FREECAST(const class SK_SA_FREECAST &)
  public void SK_SA_FREECAST::SK_SA_FREECAST()
  public void ~SK_SA_FREECAST()
  public class SK_SA_FREECAST & operator=(const class SK_SA_FREECAST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_FROSTWEAPON {
  SK_SAGE, offset = 0x0

  public void SK_SA_FROSTWEAPON::Init()
  public int SK_SA_FROSTWEAPON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_FROSTWEAPON::GetMaxLevel()
  public short SK_SA_FROSTWEAPON::GetSPCost(short)
  public short SK_SA_FROSTWEAPON::GetPreDelayTime(short)
  public void SK_SA_FROSTWEAPON(const class SK_SA_FROSTWEAPON &)
  public void SK_SA_FROSTWEAPON::SK_SA_FROSTWEAPON()
  public void ~SK_SA_FROSTWEAPON()
  public class SK_SA_FROSTWEAPON & operator=(const class SK_SA_FROSTWEAPON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_FULLRECOVERY {
  SK_SAGE, offset = 0x0

  public void SK_SA_FULLRECOVERY::Init()
  public int SK_SA_FULLRECOVERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_FULLRECOVERY::IsAvailableJob(short)
  public void SK_SA_FULLRECOVERY(const class SK_SA_FULLRECOVERY &)
  public void SK_SA_FULLRECOVERY::SK_SA_FULLRECOVERY()
  public void ~SK_SA_FULLRECOVERY()
  public class SK_SA_FULLRECOVERY & operator=(const class SK_SA_FULLRECOVERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_GRAVITY {
  SK_SAGE, offset = 0x0

  public void SK_SA_GRAVITY::Init()
  public int SK_SA_GRAVITY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_GRAVITY::IsAvailableJob(short)
  public void SK_SA_GRAVITY(const class SK_SA_GRAVITY &)
  public void SK_SA_GRAVITY::SK_SA_GRAVITY()
  public void ~SK_SA_GRAVITY()
  public class SK_SA_GRAVITY & operator=(const class SK_SA_GRAVITY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_INSTANTDEATH {
  SK_SAGE, offset = 0x0

  public void SK_SA_INSTANTDEATH::Init()
  public int SK_SA_INSTANTDEATH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_INSTANTDEATH::IsAvailableJob(short)
  public void SK_SA_INSTANTDEATH(const class SK_SA_INSTANTDEATH &)
  public void SK_SA_INSTANTDEATH::SK_SA_INSTANTDEATH()
  public void ~SK_SA_INSTANTDEATH()
  public class SK_SA_INSTANTDEATH & operator=(const class SK_SA_INSTANTDEATH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_LANDPROTECTOR {
  SK_SAGE, offset = 0x0

  public void SK_SA_LANDPROTECTOR::Init()
  public int SK_SA_LANDPROTECTOR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_LANDPROTECTOR::GetMaxLevel()
  public short SK_SA_LANDPROTECTOR::GetSPCost(short)
  public short SK_SA_LANDPROTECTOR::GetPreDelayTime(short)
  public void SK_SA_LANDPROTECTOR(const class SK_SA_LANDPROTECTOR &)
  public void SK_SA_LANDPROTECTOR::SK_SA_LANDPROTECTOR()
  public void ~SK_SA_LANDPROTECTOR()
  public class SK_SA_LANDPROTECTOR & operator=(const class SK_SA_LANDPROTECTOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_LEVELUP {
  SK_SAGE, offset = 0x0

  public void SK_SA_LEVELUP::Init()
  public int SK_SA_LEVELUP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_LEVELUP::IsAvailableJob(short)
  public void SK_SA_LEVELUP(const class SK_SA_LEVELUP &)
  public void SK_SA_LEVELUP::SK_SA_LEVELUP()
  public void ~SK_SA_LEVELUP()
  public class SK_SA_LEVELUP & operator=(const class SK_SA_LEVELUP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_LIGHTNINGLOADER {
  SK_SAGE, offset = 0x0

  public void SK_SA_LIGHTNINGLOADER::Init()
  public int SK_SA_LIGHTNINGLOADER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_LIGHTNINGLOADER::GetMaxLevel()
  public short SK_SA_LIGHTNINGLOADER::GetSPCost(short)
  public short SK_SA_LIGHTNINGLOADER::GetPreDelayTime(short)
  public void SK_SA_LIGHTNINGLOADER(const class SK_SA_LIGHTNINGLOADER &)
  public void SK_SA_LIGHTNINGLOADER::SK_SA_LIGHTNINGLOADER()
  public void ~SK_SA_LIGHTNINGLOADER()
  public class SK_SA_LIGHTNINGLOADER & operator=(const class SK_SA_LIGHTNINGLOADER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_MAGICROD {
  SK_SAGE, offset = 0x0

  public void SK_SA_MAGICROD::Init()
  public int SK_SA_MAGICROD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_MAGICROD::GetMaxLevel()
  public short SK_SA_MAGICROD::GetSPCost(short)
  public void SK_SA_MAGICROD(const class SK_SA_MAGICROD &)
  public void SK_SA_MAGICROD::SK_SA_MAGICROD()
  public void ~SK_SA_MAGICROD()
  public class SK_SA_MAGICROD & operator=(const class SK_SA_MAGICROD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_MONOCELL {
  SK_SAGE, offset = 0x0

  public void SK_SA_MONOCELL::Init()
  public int SK_SA_MONOCELL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_MONOCELL::IsAvailableJob(short)
  public void SK_SA_MONOCELL(const class SK_SA_MONOCELL &)
  public void SK_SA_MONOCELL::SK_SA_MONOCELL()
  public void ~SK_SA_MONOCELL()
  public class SK_SA_MONOCELL & operator=(const class SK_SA_MONOCELL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_QUESTION {
  SK_SAGE, offset = 0x0

  public void SK_SA_QUESTION::Init()
  public int SK_SA_QUESTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_QUESTION::IsAvailableJob(short)
  public void SK_SA_QUESTION(const class SK_SA_QUESTION &)
  public void SK_SA_QUESTION::SK_SA_QUESTION()
  public void ~SK_SA_QUESTION()
  public class SK_SA_QUESTION & operator=(const class SK_SA_QUESTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_REVERSEORCISH {
  SK_SAGE, offset = 0x0

  public void SK_SA_REVERSEORCISH::Init()
  public int SK_SA_REVERSEORCISH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_REVERSEORCISH::IsAvailableJob(short)
  public void SK_SA_REVERSEORCISH(const class SK_SA_REVERSEORCISH &)
  public void SK_SA_REVERSEORCISH::SK_SA_REVERSEORCISH()
  public void ~SK_SA_REVERSEORCISH()
  public class SK_SA_REVERSEORCISH & operator=(const class SK_SA_REVERSEORCISH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_SEISMICWEAPON {
  SK_SAGE, offset = 0x0

  public void SK_SA_SEISMICWEAPON::Init()
  public int SK_SA_SEISMICWEAPON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_SEISMICWEAPON::GetMaxLevel()
  public short SK_SA_SEISMICWEAPON::GetSPCost(short)
  public short SK_SA_SEISMICWEAPON::GetPreDelayTime(short)
  public void SK_SA_SEISMICWEAPON(const class SK_SA_SEISMICWEAPON &)
  public void SK_SA_SEISMICWEAPON::SK_SA_SEISMICWEAPON()
  public void ~SK_SA_SEISMICWEAPON()
  public class SK_SA_SEISMICWEAPON & operator=(const class SK_SA_SEISMICWEAPON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_SPELLBREAKER {
  SK_SAGE, offset = 0x0

  public void SK_SA_SPELLBREAKER::Init()
  public int SK_SA_SPELLBREAKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_SPELLBREAKER::GetMaxLevel()
  public short SK_SA_SPELLBREAKER::GetSPCost(short)
  public short SK_SA_SPELLBREAKER::GetPreDelayTime(short)
  public void SK_SA_SPELLBREAKER(const class SK_SA_SPELLBREAKER &)
  public void SK_SA_SPELLBREAKER::SK_SA_SPELLBREAKER()
  public void ~SK_SA_SPELLBREAKER()
  public class SK_SA_SPELLBREAKER & operator=(const class SK_SA_SPELLBREAKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_SUMMONMONSTER {
  SK_SAGE, offset = 0x0

  public void SK_SA_SUMMONMONSTER::Init()
  public int SK_SA_SUMMONMONSTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_SUMMONMONSTER::IsAvailableJob(short)
  public void SK_SA_SUMMONMONSTER(const class SK_SA_SUMMONMONSTER &)
  public void SK_SA_SUMMONMONSTER::SK_SA_SUMMONMONSTER()
  public void ~SK_SA_SUMMONMONSTER()
  public class SK_SA_SUMMONMONSTER & operator=(const class SK_SA_SUMMONMONSTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_TAMINGMONSTER {
  SK_SAGE, offset = 0x0

  public void SK_SA_TAMINGMONSTER::Init()
  public int SK_SA_TAMINGMONSTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SA_TAMINGMONSTER::IsAvailableJob(short)
  public void SK_SA_TAMINGMONSTER(const class SK_SA_TAMINGMONSTER &)
  public void SK_SA_TAMINGMONSTER::SK_SA_TAMINGMONSTER()
  public void ~SK_SA_TAMINGMONSTER()
  public class SK_SA_TAMINGMONSTER & operator=(const class SK_SA_TAMINGMONSTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_VIOLENTGALE {
  SK_SAGE, offset = 0x0

  public void SK_SA_VIOLENTGALE::Init()
  public int SK_SA_VIOLENTGALE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_VIOLENTGALE::GetMaxLevel()
  public short SK_SA_VIOLENTGALE::GetSPCost(short)
  public short SK_SA_VIOLENTGALE::GetPreDelayTime(short)
  public void SK_SA_VIOLENTGALE(const class SK_SA_VIOLENTGALE &)
  public void SK_SA_VIOLENTGALE::SK_SA_VIOLENTGALE()
  public void ~SK_SA_VIOLENTGALE()
  public class SK_SA_VIOLENTGALE & operator=(const class SK_SA_VIOLENTGALE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SA_VOLCANO {
  SK_SAGE, offset = 0x0

  public void SK_SA_VOLCANO::Init()
  public int SK_SA_VOLCANO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SA_VOLCANO::GetMaxLevel()
  public short SK_SA_VOLCANO::GetSPCost(short)
  public short SK_SA_VOLCANO::GetPreDelayTime(short)
  public void SK_SA_VOLCANO(const class SK_SA_VOLCANO &)
  public void SK_SA_VOLCANO::SK_SA_VOLCANO()
  public void ~SK_SA_VOLCANO()
  public class SK_SA_VOLCANO & operator=(const class SK_SA_VOLCANO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_AUTOSHADOWSPELL {
  CSkillTypeInfo2, offset = 0x0

    /* this+0xfc */ class std::vector<int,std::allocator<int> > m_SkillList

    public int SK_SC_AUTOSHADOWSPELL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public class std::vector<int,std::allocator<int> > SK_SC_AUTOSHADOWSPELL::GetImitationSKlist(class CPC *)
  public bool SK_SC_AUTOSHADOWSPELL::IsAllowSkill(class CPC *, const unsigned short)
  public int SK_SC_AUTOSHADOWSPELL::GetLifeTM(const int)
  public int SK_SC_AUTOSHADOWSPELL::GetAutoSpellMiliPercent(const int)
  public int SK_SC_AUTOSHADOWSPELL::GetAutoSpellLevel(const int, const int)
  public bool SK_SC_AUTOSHADOWSPELL::LoadAllowSkillListFile()
  public void SK_SC_AUTOSHADOWSPELL(const class SK_SC_AUTOSHADOWSPELL &)
  public void SK_SC_AUTOSHADOWSPELL::SK_SC_AUTOSHADOWSPELL()
  public void ~SK_SC_AUTOSHADOWSPELL()
  public class SK_SC_AUTOSHADOWSPELL & operator=(const class SK_SC_AUTOSHADOWSPELL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_BLOODYLUST {
  CSkillTypeInfo2, offset = 0x0

  public void SK_SC_BLOODYLUST::Init()
  public int SK_SC_BLOODYLUST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_BLOODYLUST::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SC_BLOODYLUST::GetLifeTime(const int)
  public void SK_SC_BLOODYLUST(const class SK_SC_BLOODYLUST &)
  public void SK_SC_BLOODYLUST::SK_SC_BLOODYLUST()
  public void ~SK_SC_BLOODYLUST()
  public class SK_SC_BLOODYLUST & operator=(const class SK_SC_BLOODYLUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_BODYPAINT {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_BODYPAINT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_BODYPAINT::GetDetectRadiusRange(const int)
  public int SK_SC_BODYPAINT::GetBLINDApplyPercent(const int)
  public int SK_SC_BODYPAINT::GetASPDdecApplyPercent(const int)
  public int SK_SC_BODYPAINT::GetASPDdecLifeTM(const int)
  public int GetASPDdecMOUNTpercent(const int)
  public int SK_SC_BODYPAINT::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SC_BODYPAINT(const class SK_SC_BODYPAINT &)
  public void SK_SC_BODYPAINT::SK_SC_BODYPAINT()
  public void ~SK_SC_BODYPAINT()
  public class SK_SC_BODYPAINT & operator=(const class SK_SC_BODYPAINT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_CHAOSPANIC {
  CSkillTypeInfo2, offset = 0x0

    public void SK_SC_CHAOSPANIC::Init()
  public int SK_SC_CHAOSPANIC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_CHAOSPANIC::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SC_CHAOSPANIC::GetLifeTime(const int)
  public int SK_SC_CHAOSPANIC::GetSuccessPercent(const int)
  public int GetConfusionLifeTM(const int)
  public void SK_SC_CHAOSPANIC(const class SK_SC_CHAOSPANIC &)
  public void SK_SC_CHAOSPANIC::SK_SC_CHAOSPANIC()
  public void ~SK_SC_CHAOSPANIC()
  public class SK_SC_CHAOSPANIC & operator=(const class SK_SC_CHAOSPANIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_DEADLYINFECT {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_DEADLYINFECT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_DEADLYINFECT::GetLifeTM(const int)
  public int SK_SC_DEADLYINFECT::GetSuccessPercent(const int)
  public void SK_SC_DEADLYINFECT(const class SK_SC_DEADLYINFECT &)
  public void SK_SC_DEADLYINFECT::SK_SC_DEADLYINFECT()
  public void ~SK_SC_DEADLYINFECT()
  public class SK_SC_DEADLYINFECT & operator=(const class SK_SC_DEADLYINFECT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_DIMENSIONDOOR {
  CSkillTypeInfo2, offset = 0x0

    public void SK_SC_DIMENSIONDOOR::Init()
  public int SK_SC_DIMENSIONDOOR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_DIMENSIONDOOR::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SC_DIMENSIONDOOR::GetLifeTime(const int)
  public void SK_SC_DIMENSIONDOOR(const class SK_SC_DIMENSIONDOOR &)
  public void SK_SC_DIMENSIONDOOR::SK_SC_DIMENSIONDOOR()
  public void ~SK_SC_DIMENSIONDOOR()
  public class SK_SC_DIMENSIONDOOR & operator=(const class SK_SC_DIMENSIONDOOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_ENERVATION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_ENERVATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_ENERVATION::GetLifeTM(const int)
  public int SK_SC_ENERVATION::GetAtkDecPercent(const int)
  public int SK_SC_ENERVATION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SC_ENERVATION(const class SK_SC_ENERVATION &)
  public void SK_SC_ENERVATION::SK_SC_ENERVATION()
  public void ~SK_SC_ENERVATION()
  public class SK_SC_ENERVATION & operator=(const class SK_SC_ENERVATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_FATALMENACE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_FATALMENACE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_FATALMENACE::GetHitPercent2(const int)
  public void SK_SC_FATALMENACE(const class SK_SC_FATALMENACE &)
  public void SK_SC_FATALMENACE::SK_SC_FATALMENACE()
  public void ~SK_SC_FATALMENACE()
  public class SK_SC_FATALMENACE & operator=(const class SK_SC_FATALMENACE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_FEINTBOMB {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_FEINTBOMB::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_FEINTBOMB::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SC_FEINTBOMB::GetSplashAtkRange(const int)
  public void SK_SC_FEINTBOMB(const class SK_SC_FEINTBOMB &)
  public void SK_SC_FEINTBOMB::SK_SC_FEINTBOMB()
  public void ~SK_SC_FEINTBOMB()
  public class SK_SC_FEINTBOMB & operator=(const class SK_SC_FEINTBOMB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_GROOMY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_GROOMY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_GROOMY::GetLifeTM(const int)
  public int SK_SC_GROOMY::GetASPDDecPercent(const int)
  public int SK_SC_GROOMY::GetHITDecPercent(const int)
  public int SK_SC_GROOMY::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SC_GROOMY(const class SK_SC_GROOMY &)
  public void SK_SC_GROOMY::SK_SC_GROOMY()
  public void ~SK_SC_GROOMY()
  public class SK_SC_GROOMY & operator=(const class SK_SC_GROOMY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_IGNORANCE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_IGNORANCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_IGNORANCE::GetLifeTM(const int)
  public int SK_SC_IGNORANCE::GetSpellerRecoverySPValue(const int)
  public int SK_SC_IGNORANCE::GetTargetReduceSPValue(const int)
  public int SK_SC_IGNORANCE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SC_IGNORANCE(const class SK_SC_IGNORANCE &)
  public void SK_SC_IGNORANCE::SK_SC_IGNORANCE()
  public void ~SK_SC_IGNORANCE()
  public class SK_SC_IGNORANCE & operator=(const class SK_SC_IGNORANCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_INVISIBILITY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_INVISIBILITY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public float SK_SC_INVISIBILITY::GetReduceSPPercent(const int)
  public int SK_SC_INVISIBILITY::GetCRIPercent(const int)
  public int SK_SC_INVISIBILITY::GetASPDdecApplyPercent(const int)
  public int SK_SC_INVISIBILITY::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SC_INVISIBILITY(const class SK_SC_INVISIBILITY &)
  public void SK_SC_INVISIBILITY::SK_SC_INVISIBILITY()
  public void ~SK_SC_INVISIBILITY()
  public class SK_SC_INVISIBILITY & operator=(const class SK_SC_INVISIBILITY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_LAZINESS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_LAZINESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_LAZINESS::GetLifeTM(const int)
  public int SK_SC_LAZINESS::GetIncPredelayPercent(const int)
  public int SK_SC_LAZINESS::GetAvoidanceDecPercent(const int)
  public int SK_SC_LAZINESS::GetPlusReduceSPAmout(const int)
  public int SK_SC_LAZINESS::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SC_LAZINESS(const class SK_SC_LAZINESS &)
  public void SK_SC_LAZINESS::SK_SC_LAZINESS()
  public void ~SK_SC_LAZINESS()
  public class SK_SC_LAZINESS & operator=(const class SK_SC_LAZINESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_MAELSTROM {
  CSkillTypeInfo2, offset = 0x0

    public void SK_SC_MAELSTROM::Init()
  public int SK_SC_MAELSTROM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_MAELSTROM::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SC_MAELSTROM::GetLifeTime(const int)
  public static bool SK_SC_MAELSTROM::Suction(class CSkill * const, const unsigned long, const unsigned int, const int, const int)
  public void SK_SC_MAELSTROM(const class SK_SC_MAELSTROM &)
  public void SK_SC_MAELSTROM::SK_SC_MAELSTROM()
  public void ~SK_SC_MAELSTROM()
  public class SK_SC_MAELSTROM & operator=(const class SK_SC_MAELSTROM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_MANHOLE {
  CSkillTypeInfo2, offset = 0x0

    public void SK_SC_MANHOLE::Init()
  public int SK_SC_MANHOLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_MANHOLE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SC_MANHOLE::GetLifeTime(const int)
  public static int SK_SC_MANHOLE::GetEFSTLifeTime(const int)
  public void SK_SC_MANHOLE(const class SK_SC_MANHOLE &)
  public void SK_SC_MANHOLE::SK_SC_MANHOLE()
  public void ~SK_SC_MANHOLE()
  public class SK_SC_MANHOLE & operator=(const class SK_SC_MANHOLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_REPRODUCE {
  CSkillTypeInfo2, offset = 0x0

    public int SK_SC_REPRODUCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_REPRODUCE::GetLifeSupportSpCost(const int)
  public void SK_SC_REPRODUCE(const class SK_SC_REPRODUCE &)
  public void SK_SC_REPRODUCE::SK_SC_REPRODUCE()
  public void ~SK_SC_REPRODUCE()
  public class SK_SC_REPRODUCE & operator=(const class SK_SC_REPRODUCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

union SK_SC_REPRODUCE::DATA {
    /* this+0x0 */ struct SK_SC_REPRODUCE::DATA::<unnamed-type-Imitation> Imitation

  /* this+0x0 */ int value
  public int operator int()
  public void DATA(const int, const int)
  public void DATA(const int)
}

struct SK_SC_REPRODUCE::DATA::<unnamed-type-Imitation> {
  /* this(bf)+0x0:0x0 len(0x10) */ int SKID
  /* this(bf)+0x0:0x10 len(0x8) */ int SKLevel
  /* this(bf)+0x0:0x18 len(0x8) */ int unused
}

class SK_SC_SHADOWFORM {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_SHADOWFORM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_SHADOWFORM::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SC_SHADOWFORM::GetReduceSPamount(const int)
  public int SK_SC_SHADOWFORM::GetLifeTM(const int)
  public int SK_SC_SHADOWFORM::GetRelayDMGCnt(const int)
  public void SK_SC_SHADOWFORM(const class SK_SC_SHADOWFORM &)
  public void SK_SC_SHADOWFORM::SK_SC_SHADOWFORM()
  public void ~SK_SC_SHADOWFORM()
  public class SK_SC_SHADOWFORM & operator=(const class SK_SC_SHADOWFORM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_STRIPACCESSARY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_STRIPACCESSARY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_STRIPACCESSARY::GetLifeTM(const int)
  public int SK_SC_STRIPACCESSARY::GetSuccessPercent(const int)
  public void SK_SC_STRIPACCESSARY(const class SK_SC_STRIPACCESSARY &)
  public void SK_SC_STRIPACCESSARY::SK_SC_STRIPACCESSARY()
  public void ~SK_SC_STRIPACCESSARY()
  public class SK_SC_STRIPACCESSARY & operator=(const class SK_SC_STRIPACCESSARY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_TRIANGLESHOT {
  CSkillTypeInfo2, offset = 0x0

    public int SK_SC_TRIANGLESHOT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_TRIANGLESHOT::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SC_TRIANGLESHOT::GetKnockBackDistance(const int)
  public int SK_SC_TRIANGLESHOT::GetKnockBackPercent(const int)
  public void SK_SC_TRIANGLESHOT(const class SK_SC_TRIANGLESHOT &)
  public void SK_SC_TRIANGLESHOT::SK_SC_TRIANGLESHOT()
  public void ~SK_SC_TRIANGLESHOT()
  public class SK_SC_TRIANGLESHOT & operator=(const class SK_SC_TRIANGLESHOT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_UNLUCKY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_UNLUCKY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_UNLUCKY::GetLifeTM(const int)
  public int SK_SC_UNLUCKY::GetCriticalDecPercent(const int)
  public int SK_SC_UNLUCKY::GetPlusAvoidSucessValueDecPercent(const int)
  public int SK_SC_UNLUCKY::GetDecZenyAmount(const int)
  public int SK_SC_UNLUCKY::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SC_UNLUCKY(const class SK_SC_UNLUCKY &)
  public void SK_SC_UNLUCKY::SK_SC_UNLUCKY()
  public void ~SK_SC_UNLUCKY()
  public class SK_SC_UNLUCKY & operator=(const class SK_SC_UNLUCKY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SC_WEAKNESS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SC_WEAKNESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SC_WEAKNESS::GetLifeTM(const int)
  public int SK_SC_WEAKNESS::GetMAXHPdecPercent(const int)
  public int SK_SC_WEAKNESS::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SC_WEAKNESS(const class SK_SC_WEAKNESS &)
  public void SK_SC_WEAKNESS::SK_SC_WEAKNESS()
  public void ~SK_SC_WEAKNESS()
  public class SK_SC_WEAKNESS & operator=(const class SK_SC_WEAKNESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_DEVIL {
  SK_STAR, offset = 0x0

  public void SK_SG_DEVIL::Init()
  public int SK_SG_DEVIL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_SG_DEVIL(const class SK_SG_DEVIL &)
  public void SK_SG_DEVIL::SK_SG_DEVIL()
  public void ~SK_SG_DEVIL()
  public class SK_SG_DEVIL & operator=(const class SK_SG_DEVIL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_FEEL {
  SK_STAR, offset = 0x0

  public void SK_SG_FEEL::Init()
  public int SK_SG_FEEL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_FEEL::GetMaxLevel()
  public short SK_SG_FEEL::GetSPCost(short)
  public short SK_SG_FEEL::GetPreDelayTime(short)
  public void SK_SG_FEEL(const class SK_SG_FEEL &)
  public void SK_SG_FEEL::SK_SG_FEEL()
  public void ~SK_SG_FEEL()
  public class SK_SG_FEEL & operator=(const class SK_SG_FEEL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_FRIEND {
  SK_STAR, offset = 0x0

  public void SK_SG_FRIEND::Init()
  public int SK_SG_FRIEND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_FRIEND::GetMaxLevel()
  public void SK_SG_FRIEND(const class SK_SG_FRIEND &)
  public void SK_SG_FRIEND::SK_SG_FRIEND()
  public void ~SK_SG_FRIEND()
  public class SK_SG_FRIEND & operator=(const class SK_SG_FRIEND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_FUSION {
  SK_STAR, offset = 0x0

  public void SK_SG_FUSION::Init()
  public int SK_SG_FUSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_FUSION::GetMaxLevel()
  public short SK_SG_FUSION::GetSPCost(short)
  public void SK_SG_FUSION(const class SK_SG_FUSION &)
  public void SK_SG_FUSION::SK_SG_FUSION()
  public void ~SK_SG_FUSION()
  public class SK_SG_FUSION & operator=(const class SK_SG_FUSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_HATE {
  SK_STAR, offset = 0x0

  public void SK_SG_HATE::Init()
  public int SK_SG_HATE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_HATE::GetMaxLevel()
  public short SK_SG_HATE::GetSPCost(short)
  public short SK_SG_HATE::GetPreDelayTime(short)
  public void SK_SG_HATE(const class SK_SG_HATE &)
  public void SK_SG_HATE::SK_SG_HATE()
  public void ~SK_SG_HATE()
  public class SK_SG_HATE & operator=(const class SK_SG_HATE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_KNOWLEDGE {
  SK_STAR, offset = 0x0

  public void SK_SG_KNOWLEDGE::Init()
  public int SK_SG_KNOWLEDGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_SG_KNOWLEDGE(const class SK_SG_KNOWLEDGE &)
  public void SK_SG_KNOWLEDGE::SK_SG_KNOWLEDGE()
  public void ~SK_SG_KNOWLEDGE()
  public class SK_SG_KNOWLEDGE & operator=(const class SK_SG_KNOWLEDGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_MOON_ANGER {
  SK_STAR, offset = 0x0

  public void SK_SG_MOON_ANGER::Init()
  public int SK_SG_MOON_ANGER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_MOON_ANGER::GetMaxLevel()
  public void SK_SG_MOON_ANGER(const class SK_SG_MOON_ANGER &)
  public void SK_SG_MOON_ANGER::SK_SG_MOON_ANGER()
  public void ~SK_SG_MOON_ANGER()
  public class SK_SG_MOON_ANGER & operator=(const class SK_SG_MOON_ANGER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_MOON_BLESS {
  SK_STAR, offset = 0x0

  public void SK_SG_MOON_BLESS::Init()
  public int SK_SG_MOON_BLESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_MOON_BLESS::GetMaxLevel()
  public void SK_SG_MOON_BLESS(const class SK_SG_MOON_BLESS &)
  public void SK_SG_MOON_BLESS::SK_SG_MOON_BLESS()
  public void ~SK_SG_MOON_BLESS()
  public class SK_SG_MOON_BLESS & operator=(const class SK_SG_MOON_BLESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_MOON_COMFORT {
  SK_STAR, offset = 0x0

  public void SK_SG_MOON_COMFORT::Init()
  public int SK_SG_MOON_COMFORT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_MOON_COMFORT::GetMaxLevel()
  public short SK_SG_MOON_COMFORT::GetSPCost(short)
  public void SK_SG_MOON_COMFORT(const class SK_SG_MOON_COMFORT &)
  public void SK_SG_MOON_COMFORT::SK_SG_MOON_COMFORT()
  public void ~SK_SG_MOON_COMFORT()
  public class SK_SG_MOON_COMFORT & operator=(const class SK_SG_MOON_COMFORT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_MOON_WARM {
  SK_STAR, offset = 0x0

  public void SK_SG_MOON_WARM::Init()
  public int SK_SG_MOON_WARM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_MOON_WARM::GetMaxLevel()
  public short SK_SG_MOON_WARM::GetSPCost(short)
  public void SK_SG_MOON_WARM(const class SK_SG_MOON_WARM &)
  public void SK_SG_MOON_WARM::SK_SG_MOON_WARM()
  public void ~SK_SG_MOON_WARM()
  public class SK_SG_MOON_WARM & operator=(const class SK_SG_MOON_WARM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_STAR_ANGER {
  SK_STAR, offset = 0x0

  public void SK_SG_STAR_ANGER::Init()
  public int SK_SG_STAR_ANGER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_STAR_ANGER::GetMaxLevel()
  public void SK_SG_STAR_ANGER(const class SK_SG_STAR_ANGER &)
  public void SK_SG_STAR_ANGER::SK_SG_STAR_ANGER()
  public void ~SK_SG_STAR_ANGER()
  public class SK_SG_STAR_ANGER & operator=(const class SK_SG_STAR_ANGER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_STAR_BLESS {
  SK_STAR, offset = 0x0

  public void SK_SG_STAR_BLESS::Init()
  public int SK_SG_STAR_BLESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_STAR_BLESS::GetMaxLevel()
  public void SK_SG_STAR_BLESS(const class SK_SG_STAR_BLESS &)
  public void SK_SG_STAR_BLESS::SK_SG_STAR_BLESS()
  public void ~SK_SG_STAR_BLESS()
  public class SK_SG_STAR_BLESS & operator=(const class SK_SG_STAR_BLESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_STAR_COMFORT {
  SK_STAR, offset = 0x0

  public void SK_SG_STAR_COMFORT::Init()
  public int SK_SG_STAR_COMFORT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_STAR_COMFORT::GetMaxLevel()
  public short SK_SG_STAR_COMFORT::GetSPCost(short)
  public void SK_SG_STAR_COMFORT(const class SK_SG_STAR_COMFORT &)
  public void SK_SG_STAR_COMFORT::SK_SG_STAR_COMFORT()
  public void ~SK_SG_STAR_COMFORT()
  public class SK_SG_STAR_COMFORT & operator=(const class SK_SG_STAR_COMFORT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_STAR_WARM {
  SK_STAR, offset = 0x0

  public void SK_SG_STAR_WARM::Init()
  public int SK_SG_STAR_WARM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_STAR_WARM::GetMaxLevel()
  public short SK_SG_STAR_WARM::GetSPCost(short)
  public void SK_SG_STAR_WARM(const class SK_SG_STAR_WARM &)
  public void SK_SG_STAR_WARM::SK_SG_STAR_WARM()
  public void ~SK_SG_STAR_WARM()
  public class SK_SG_STAR_WARM & operator=(const class SK_SG_STAR_WARM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_SUN_ANGER {
  SK_STAR, offset = 0x0

  public void SK_SG_SUN_ANGER::Init()
  public int SK_SG_SUN_ANGER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_SUN_ANGER::GetMaxLevel()
  public void SK_SG_SUN_ANGER(const class SK_SG_SUN_ANGER &)
  public void SK_SG_SUN_ANGER::SK_SG_SUN_ANGER()
  public void ~SK_SG_SUN_ANGER()
  public class SK_SG_SUN_ANGER & operator=(const class SK_SG_SUN_ANGER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_SUN_BLESS {
  SK_STAR, offset = 0x0

  public void SK_SG_SUN_BLESS::Init()
  public int SK_SG_SUN_BLESS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_SUN_BLESS::GetMaxLevel()
  public void SK_SG_SUN_BLESS(const class SK_SG_SUN_BLESS &)
  public void SK_SG_SUN_BLESS::SK_SG_SUN_BLESS()
  public void ~SK_SG_SUN_BLESS()
  public class SK_SG_SUN_BLESS & operator=(const class SK_SG_SUN_BLESS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_SUN_COMFORT {
  SK_STAR, offset = 0x0

  public void SK_SG_SUN_COMFORT::Init()
  public int SK_SG_SUN_COMFORT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_SUN_COMFORT::GetMaxLevel()
  public short SK_SG_SUN_COMFORT::GetSPCost(short)
  public void SK_SG_SUN_COMFORT(const class SK_SG_SUN_COMFORT &)
  public void SK_SG_SUN_COMFORT::SK_SG_SUN_COMFORT()
  public void ~SK_SG_SUN_COMFORT()
  public class SK_SG_SUN_COMFORT & operator=(const class SK_SG_SUN_COMFORT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SG_SUN_WARM {
  SK_STAR, offset = 0x0

  public void SK_SG_SUN_WARM::Init()
  public int SK_SG_SUN_WARM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SG_SUN_WARM::GetMaxLevel()
  public short SK_SG_SUN_WARM::GetSPCost(short)
  public void SK_SG_SUN_WARM(const class SK_SG_SUN_WARM &)
  public void SK_SG_SUN_WARM::SK_SG_SUN_WARM()
  public void ~SK_SG_SUN_WARM()
  public class SK_SG_SUN_WARM & operator=(const class SK_SG_SUN_WARM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_ALCHEMIST {
  SK_LINKER, offset = 0x0

  public void SK_SL_ALCHEMIST::Init()
  public int SK_SL_ALCHEMIST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_ALCHEMIST::GetMaxLevel()
  public short SK_SL_ALCHEMIST::GetSPCost(short)
  public short SK_SL_ALCHEMIST::GetPreDelayTime(short)
  public void SK_SL_ALCHEMIST(const class SK_SL_ALCHEMIST &)
  public void SK_SL_ALCHEMIST::SK_SL_ALCHEMIST()
  public void ~SK_SL_ALCHEMIST()
  public class SK_SL_ALCHEMIST & operator=(const class SK_SL_ALCHEMIST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_ASSASIN {
  SK_LINKER, offset = 0x0

  public void SK_SL_ASSASIN::Init()
  public int SK_SL_ASSASIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_ASSASIN::GetMaxLevel()
  public short SK_SL_ASSASIN::GetSPCost(short)
  public short SK_SL_ASSASIN::GetPreDelayTime(short)
  public void SK_SL_ASSASIN(const class SK_SL_ASSASIN &)
  public void SK_SL_ASSASIN::SK_SL_ASSASIN()
  public void ~SK_SL_ASSASIN()
  public class SK_SL_ASSASIN & operator=(const class SK_SL_ASSASIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_BARDDANCER {
  SK_LINKER, offset = 0x0

  public void SK_SL_BARDDANCER::Init()
  public int SK_SL_BARDDANCER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_BARDDANCER::GetMaxLevel()
  public short SK_SL_BARDDANCER::GetSPCost(short)
  public short SK_SL_BARDDANCER::GetPreDelayTime(short)
  public void SK_SL_BARDDANCER(const class SK_SL_BARDDANCER &)
  public void SK_SL_BARDDANCER::SK_SL_BARDDANCER()
  public void ~SK_SL_BARDDANCER()
  public class SK_SL_BARDDANCER & operator=(const class SK_SL_BARDDANCER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_BLACKSMITH {
  SK_LINKER, offset = 0x0

  public void SK_SL_BLACKSMITH::Init()
  public int SK_SL_BLACKSMITH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_BLACKSMITH::GetMaxLevel()
  public short SK_SL_BLACKSMITH::GetSPCost(short)
  public short SK_SL_BLACKSMITH::GetPreDelayTime(short)
  public void SK_SL_BLACKSMITH(const class SK_SL_BLACKSMITH &)
  public void SK_SL_BLACKSMITH::SK_SL_BLACKSMITH()
  public void ~SK_SL_BLACKSMITH()
  public class SK_SL_BLACKSMITH & operator=(const class SK_SL_BLACKSMITH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_COLLECTOR {
  SK_LINKER, offset = 0x0

  public void SK_SL_COLLECTOR::Init()
  public int SK_SL_COLLECTOR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_COLLECTOR::GetMaxLevel()
  public short SK_SL_COLLECTOR::GetSPCost(short)
  public short SK_SL_COLLECTOR::GetPreDelayTime(short)
  public void SK_SL_COLLECTOR(const class SK_SL_COLLECTOR &)
  public void SK_SL_COLLECTOR::SK_SL_COLLECTOR()
  public void ~SK_SL_COLLECTOR()
  public class SK_SL_COLLECTOR & operator=(const class SK_SL_COLLECTOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_CRUSADER {
  SK_LINKER, offset = 0x0

  public void SK_SL_CRUSADER::Init()
  public int SK_SL_CRUSADER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_CRUSADER::GetMaxLevel()
  public short SK_SL_CRUSADER::GetSPCost(short)
  public short SK_SL_CRUSADER::GetPreDelayTime(short)
  public void SK_SL_CRUSADER(const class SK_SL_CRUSADER &)
  public void SK_SL_CRUSADER::SK_SL_CRUSADER()
  public void ~SK_SL_CRUSADER()
  public class SK_SL_CRUSADER & operator=(const class SK_SL_CRUSADER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_DEATHKNIGHT {
  SK_LINKER, offset = 0x0

  public void SK_SL_DEATHKNIGHT::Init()
  public int SK_SL_DEATHKNIGHT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_DEATHKNIGHT::GetMaxLevel()
  public short SK_SL_DEATHKNIGHT::GetSPCost(short)
  public short SK_SL_DEATHKNIGHT::GetPreDelayTime(short)
  public void SK_SL_DEATHKNIGHT(const class SK_SL_DEATHKNIGHT &)
  public void SK_SL_DEATHKNIGHT::SK_SL_DEATHKNIGHT()
  public void ~SK_SL_DEATHKNIGHT()
  public class SK_SL_DEATHKNIGHT & operator=(const class SK_SL_DEATHKNIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_GUNNER {
  SK_LINKER, offset = 0x0

  public void SK_SL_GUNNER::Init()
  public int SK_SL_GUNNER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_GUNNER::GetMaxLevel()
  public short SK_SL_GUNNER::GetSPCost(short)
  public short SK_SL_GUNNER::GetPreDelayTime(short)
  public void SK_SL_GUNNER(const class SK_SL_GUNNER &)
  public void SK_SL_GUNNER::SK_SL_GUNNER()
  public void ~SK_SL_GUNNER()
  public class SK_SL_GUNNER & operator=(const class SK_SL_GUNNER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_HIGH {
  SK_LINKER, offset = 0x0

  public void SK_SL_HIGH::Init()
  public int SK_SL_HIGH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_HIGH::GetMaxLevel()
  public short SK_SL_HIGH::GetSPCost(short)
  public short SK_SL_HIGH::GetPreDelayTime(short)
  public void SK_SL_HIGH(const class SK_SL_HIGH &)
  public void SK_SL_HIGH::SK_SL_HIGH()
  public void ~SK_SL_HIGH()
  public class SK_SL_HIGH & operator=(const class SK_SL_HIGH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_HUNTER {
  SK_LINKER, offset = 0x0

  public void SK_SL_HUNTER::Init()
  public int SK_SL_HUNTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_HUNTER::GetMaxLevel()
  public short SK_SL_HUNTER::GetSPCost(short)
  public short SK_SL_HUNTER::GetPreDelayTime(short)
  public void SK_SL_HUNTER(const class SK_SL_HUNTER &)
  public void SK_SL_HUNTER::SK_SL_HUNTER()
  public void ~SK_SL_HUNTER()
  public class SK_SL_HUNTER & operator=(const class SK_SL_HUNTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_KAAHI {
  SK_LINKER, offset = 0x0

  public void SK_SL_KAAHI::Init()
  public int SK_SL_KAAHI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_KAAHI::GetMaxLevel()
  public short SK_SL_KAAHI::GetSPCost(short)
  public short SK_SL_KAAHI::GetPreDelayTime(short)
  public void SK_SL_KAAHI(const class SK_SL_KAAHI &)
  public void SK_SL_KAAHI::SK_SL_KAAHI()
  public void ~SK_SL_KAAHI()
  public class SK_SL_KAAHI & operator=(const class SK_SL_KAAHI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_KAINA {
  SK_LINKER, offset = 0x0

  public void SK_SL_KAINA::Init()
  public int SK_SL_KAINA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_KAINA::GetMaxLevel()
  public void SK_SL_KAINA(const class SK_SL_KAINA &)
  public void SK_SL_KAINA::SK_SL_KAINA()
  public void ~SK_SL_KAINA()
  public class SK_SL_KAINA & operator=(const class SK_SL_KAINA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_KAITE {
  SK_LINKER, offset = 0x0

  public void SK_SL_KAITE::Init()
  public int SK_SL_KAITE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_KAITE::GetMaxLevel()
  public short SK_SL_KAITE::GetSPCost(short)
  public short SK_SL_KAITE::GetPreDelayTime(short)
  public void SK_SL_KAITE(const class SK_SL_KAITE &)
  public void SK_SL_KAITE::SK_SL_KAITE()
  public void ~SK_SL_KAITE()
  public class SK_SL_KAITE & operator=(const class SK_SL_KAITE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_KAIZEL {
  SK_LINKER, offset = 0x0

  public void SK_SL_KAIZEL::Init()
  public int SK_SL_KAIZEL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_KAIZEL::GetMaxLevel()
  public short SK_SL_KAIZEL::GetSPCost(short)
  public short SK_SL_KAIZEL::GetPreDelayTime(short)
  public void SK_SL_KAIZEL(const class SK_SL_KAIZEL &)
  public void SK_SL_KAIZEL::SK_SL_KAIZEL()
  public void ~SK_SL_KAIZEL()
  public class SK_SL_KAIZEL & operator=(const class SK_SL_KAIZEL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_KAUPE {
  SK_LINKER, offset = 0x0

  public void SK_SL_KAUPE::Init()
  public int SK_SL_KAUPE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_KAUPE::GetMaxLevel()
  public short SK_SL_KAUPE::GetSPCost(short)
  public short SK_SL_KAUPE::GetPreDelayTime(short)
  public void SK_SL_KAUPE(const class SK_SL_KAUPE &)
  public void SK_SL_KAUPE::SK_SL_KAUPE()
  public void ~SK_SL_KAUPE()
  public class SK_SL_KAUPE & operator=(const class SK_SL_KAUPE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_KNIGHT {
  SK_LINKER, offset = 0x0

  public void SK_SL_KNIGHT::Init()
  public int SK_SL_KNIGHT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_KNIGHT::GetMaxLevel()
  public short SK_SL_KNIGHT::GetSPCost(short)
  public short SK_SL_KNIGHT::GetPreDelayTime(short)
  public void SK_SL_KNIGHT(const class SK_SL_KNIGHT &)
  public void SK_SL_KNIGHT::SK_SL_KNIGHT()
  public void ~SK_SL_KNIGHT()
  public class SK_SL_KNIGHT & operator=(const class SK_SL_KNIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_MONK {
  SK_LINKER, offset = 0x0

  public void SK_SL_MONK::Init()
  public int SK_SL_MONK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_MONK::GetMaxLevel()
  public short SK_SL_MONK::GetSPCost(short)
  public short SK_SL_MONK::GetPreDelayTime(short)
  public void SK_SL_MONK(const class SK_SL_MONK &)
  public void SK_SL_MONK::SK_SL_MONK()
  public void ~SK_SL_MONK()
  public class SK_SL_MONK & operator=(const class SK_SL_MONK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_NINJA {
  SK_LINKER, offset = 0x0

  public void SK_SL_NINJA::Init()
  public int SK_SL_NINJA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_NINJA::GetMaxLevel()
  public short SK_SL_NINJA::GetSPCost(short)
  public short SK_SL_NINJA::GetPreDelayTime(short)
  public void SK_SL_NINJA(const class SK_SL_NINJA &)
  public void SK_SL_NINJA::SK_SL_NINJA()
  public void ~SK_SL_NINJA()
  public class SK_SL_NINJA & operator=(const class SK_SL_NINJA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_PRIEST {
  SK_LINKER, offset = 0x0

  public void SK_SL_PRIEST::Init()
  public int SK_SL_PRIEST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_PRIEST::GetMaxLevel()
  public short SK_SL_PRIEST::GetSPCost(short)
  public short SK_SL_PRIEST::GetPreDelayTime(short)
  public void SK_SL_PRIEST(const class SK_SL_PRIEST &)
  public void SK_SL_PRIEST::SK_SL_PRIEST()
  public void ~SK_SL_PRIEST()
  public class SK_SL_PRIEST & operator=(const class SK_SL_PRIEST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_ROGUE {
  SK_LINKER, offset = 0x0

  public void SK_SL_ROGUE::Init()
  public int SK_SL_ROGUE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_ROGUE::GetMaxLevel()
  public short SK_SL_ROGUE::GetSPCost(short)
  public short SK_SL_ROGUE::GetPreDelayTime(short)
  public void SK_SL_ROGUE(const class SK_SL_ROGUE &)
  public void SK_SL_ROGUE::SK_SL_ROGUE()
  public void ~SK_SL_ROGUE()
  public class SK_SL_ROGUE & operator=(const class SK_SL_ROGUE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_SAGE {
  SK_LINKER, offset = 0x0

  public void SK_SL_SAGE::Init()
  public int SK_SL_SAGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_SAGE::GetMaxLevel()
  public short SK_SL_SAGE::GetSPCost(short)
  public short SK_SL_SAGE::GetPreDelayTime(short)
  public void SK_SL_SAGE(const class SK_SL_SAGE &)
  public void SK_SL_SAGE::SK_SL_SAGE()
  public void ~SK_SL_SAGE()
  public class SK_SL_SAGE & operator=(const class SK_SL_SAGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_SKA {
  SK_LINKER, offset = 0x0

  public void SK_SL_SKA::Init()
  public int SK_SL_SKA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_SKA::GetMaxLevel()
  public short SK_SL_SKA::GetSPCost(short)
  public short SK_SL_SKA::GetPreDelayTime(short)
  public void SK_SL_SKA(const class SK_SL_SKA &)
  public void SK_SL_SKA::SK_SL_SKA()
  public void ~SK_SL_SKA()
  public class SK_SL_SKA & operator=(const class SK_SL_SKA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_SKE {
  SK_LINKER, offset = 0x0

  public void SK_SL_SKE::Init()
  public int SK_SL_SKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_SKE::GetMaxLevel()
  public short SK_SL_SKE::GetSPCost(short)
  public short SK_SL_SKE::GetPreDelayTime(short)
  public void SK_SL_SKE(const class SK_SL_SKE &)
  public void SK_SL_SKE::SK_SL_SKE()
  public void ~SK_SL_SKE()
  public class SK_SL_SKE & operator=(const class SK_SL_SKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_SMA {
  SK_LINKER, offset = 0x0

  public void SK_SL_SMA::Init()
  public int SK_SL_SMA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_SMA::GetMaxLevel()
  public short SK_SL_SMA::GetSPCost(short)
  public short SK_SL_SMA::GetPreDelayTime(short)
  public void SK_SL_SMA(const class SK_SL_SMA &)
  public void SK_SL_SMA::SK_SL_SMA()
  public void ~SK_SL_SMA()
  public class SK_SL_SMA & operator=(const class SK_SL_SMA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_SOULLINKER {
  SK_LINKER, offset = 0x0

  public void SK_SL_SOULLINKER::Init()
  public int SK_SL_SOULLINKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_SOULLINKER::GetMaxLevel()
  public short SK_SL_SOULLINKER::GetSPCost(short)
  public short SK_SL_SOULLINKER::GetPreDelayTime(short)
  public void SK_SL_SOULLINKER(const class SK_SL_SOULLINKER &)
  public void SK_SL_SOULLINKER::SK_SL_SOULLINKER()
  public void ~SK_SL_SOULLINKER()
  public class SK_SL_SOULLINKER & operator=(const class SK_SL_SOULLINKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_STAR {
  SK_LINKER, offset = 0x0

  public void SK_SL_STAR::Init()
  public int SK_SL_STAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_STAR::GetMaxLevel()
  public short SK_SL_STAR::GetSPCost(short)
  public short SK_SL_STAR::GetPreDelayTime(short)
  public void SK_SL_STAR(const class SK_SL_STAR &)
  public void SK_SL_STAR::SK_SL_STAR()
  public void ~SK_SL_STAR()
  public class SK_SL_STAR & operator=(const class SK_SL_STAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_STIN {
  SK_LINKER, offset = 0x0

  public void SK_SL_STIN::Init()
  public int SK_SL_STIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_STIN::GetMaxLevel()
  public short SK_SL_STIN::GetSPCost(short)
  public short SK_SL_STIN::GetPreDelayTime(short)
  public void SK_SL_STIN(const class SK_SL_STIN &)
  public void SK_SL_STIN::SK_SL_STIN()
  public void ~SK_SL_STIN()
  public class SK_SL_STIN & operator=(const class SK_SL_STIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_STUN {
  SK_LINKER, offset = 0x0

  public void SK_SL_STUN::Init()
  public int SK_SL_STUN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_STUN::GetMaxLevel()
  public short SK_SL_STUN::GetSPCost(short)
  public short SK_SL_STUN::GetPreDelayTime(short)
  public void SK_SL_STUN(const class SK_SL_STUN &)
  public void SK_SL_STUN::SK_SL_STUN()
  public void ~SK_SL_STUN()
  public class SK_SL_STUN & operator=(const class SK_SL_STUN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_SUPERNOVICE {
  SK_LINKER, offset = 0x0

  public void SK_SL_SUPERNOVICE::Init()
  public int SK_SL_SUPERNOVICE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_SUPERNOVICE::GetMaxLevel()
  public short SK_SL_SUPERNOVICE::GetSPCost(short)
  public short SK_SL_SUPERNOVICE::GetPreDelayTime(short)
  public void SK_SL_SUPERNOVICE(const class SK_SL_SUPERNOVICE &)
  public void SK_SL_SUPERNOVICE::SK_SL_SUPERNOVICE()
  public void ~SK_SL_SUPERNOVICE()
  public class SK_SL_SUPERNOVICE & operator=(const class SK_SL_SUPERNOVICE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_SWOO {
  SK_LINKER, offset = 0x0

  public void SK_SL_SWOO::Init()
  public int SK_SL_SWOO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_SWOO::GetMaxLevel()
  public short SK_SL_SWOO::GetSPCost(short)
  public short SK_SL_SWOO::GetPreDelayTime(short)
  public void SK_SL_SWOO(const class SK_SL_SWOO &)
  public void SK_SL_SWOO::SK_SL_SWOO()
  public void ~SK_SL_SWOO()
  public class SK_SL_SWOO & operator=(const class SK_SL_SWOO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SL_WIZARD {
  SK_LINKER, offset = 0x0

  public void SK_SL_WIZARD::Init()
  public int SK_SL_WIZARD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SL_WIZARD::GetMaxLevel()
  public short SK_SL_WIZARD::GetSPCost(short)
  public short SK_SL_WIZARD::GetPreDelayTime(short)
  public void SK_SL_WIZARD(const class SK_SL_WIZARD &)
  public void SK_SL_WIZARD::SK_SL_WIZARD()
  public void ~SK_SL_WIZARD()
  public class SK_SL_WIZARD & operator=(const class SK_SL_WIZARD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_AUTOBERSERK {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_AUTOBERSERK::Init()
  public int SK_SM_AUTOBERSERK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SM_AUTOBERSERK::GetMaxLevel()
  public int SK_SM_AUTOBERSERK::IsAvailableJob(short)
  public short SK_SM_AUTOBERSERK::GetSPCost(short)
  public void SK_SM_AUTOBERSERK(const class SK_SM_AUTOBERSERK &)
  public void SK_SM_AUTOBERSERK::SK_SM_AUTOBERSERK()
  public void SK_SM_AUTOBERSERK::~SK_SM_AUTOBERSERK()
  public class SK_SM_AUTOBERSERK & operator=(const class SK_SM_AUTOBERSERK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_BASH {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_BASH::Init()
  public int SK_SM_BASH::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SM_BASH::GetSPCost(short)
  public void SK_SM_BASH(const class SK_SM_BASH &)
  public void SK_SM_BASH::SK_SM_BASH()
  public void SK_SM_BASH::~SK_SM_BASH()
  public class SK_SM_BASH & operator=(const class SK_SM_BASH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_ENDURE {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_ENDURE::Init()
  public int SK_SM_ENDURE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SM_ENDURE::GetSPCost(short)
  public int SK_SM_ENDURE::IsAvailableJob(short)
  public void SK_SM_ENDURE(const class SK_SM_ENDURE &)
  public void SK_SM_ENDURE()
  public void ~SK_SM_ENDURE()
  public class SK_SM_ENDURE & operator=(const class SK_SM_ENDURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_FATALBLOW {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_FATALBLOW::Init()
  public int SK_SM_FATALBLOW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SM_FATALBLOW::GetMaxLevel()
  public int SK_SM_FATALBLOW::IsAvailableJob(short)
  public void SK_SM_FATALBLOW(const class SK_SM_FATALBLOW &)
  public void SK_SM_FATALBLOW()
  public void ~SK_SM_FATALBLOW()
  public class SK_SM_FATALBLOW & operator=(const class SK_SM_FATALBLOW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_MAGNUM {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_MAGNUM::Init()
  public int SK_SM_MAGNUM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SM_MAGNUM::GetSPCost(short)
  public void SK_SM_MAGNUM(const class SK_SM_MAGNUM &)
  public void SK_SM_MAGNUM::SK_SM_MAGNUM()
  public void SK_SM_MAGNUM::~SK_SM_MAGNUM()
  public class SK_SM_MAGNUM & operator=(const class SK_SM_MAGNUM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_MOVINGRECOVERY {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_MOVINGRECOVERY::Init()
  public int SK_SM_MOVINGRECOVERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SM_MOVINGRECOVERY::GetMaxLevel()
  public int SK_SM_MOVINGRECOVERY::IsAvailableJob(short)
  public void SK_SM_MOVINGRECOVERY(const class SK_SM_MOVINGRECOVERY &)
  public void SK_SM_MOVINGRECOVERY()
  public void ~SK_SM_MOVINGRECOVERY()
  public class SK_SM_MOVINGRECOVERY & operator=(const class SK_SM_MOVINGRECOVERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_PROVOKE {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_PROVOKE::Init()
  public int SK_SM_PROVOKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SM_PROVOKE::GetSPCost(short)
  public void SK_SM_PROVOKE(const class SK_SM_PROVOKE &)
  public void SK_SM_PROVOKE::SK_SM_PROVOKE()
  public void SK_SM_PROVOKE::~SK_SM_PROVOKE()
  public class SK_SM_PROVOKE & operator=(const class SK_SM_PROVOKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_RECOVERY {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_RECOVERY::Init()
  public int SK_SM_RECOVERY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_SM_RECOVERY(const class SK_SM_RECOVERY &)
  public void SK_SM_RECOVERY()
  public void ~SK_SM_RECOVERY()
  public class SK_SM_RECOVERY & operator=(const class SK_SM_RECOVERY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_SELFPROVOKE {
  CSkillTypeInfo, offset = 0x0

  public void SK_SM_SELFPROVOKE::Init()
  public int SK_SM_SELFPROVOKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SM_SELFPROVOKE::GetMaxLevel()
  public int SK_SM_SELFPROVOKE::IsAvailableJob(short)
  public short SK_SM_SELFPROVOKE::GetSPCost(short)
  public void SK_SM_SELFPROVOKE(const class SK_SM_SELFPROVOKE &)
  public void SK_SM_SELFPROVOKE()
  public void ~SK_SM_SELFPROVOKE()
  public class SK_SM_SELFPROVOKE & operator=(const class SK_SM_SELFPROVOKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_SWORD {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_SWORD::Init()
  public int SK_SM_SWORD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SM_SWORD::IsAvailableJob(short)
  public void SK_SM_SWORD(const class SK_SM_SWORD &)
  public void SK_SM_SWORD()
  public void ~SK_SM_SWORD()
  public class SK_SM_SWORD & operator=(const class SK_SM_SWORD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SM_TWOHAND {
  SK_SWORDMAN, offset = 0x0

  public void SK_SM_TWOHAND::Init()
  public int SK_SM_TWOHAND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SM_TWOHAND::IsAvailableJob(short)
  public void SK_SM_TWOHAND(const class SK_SM_TWOHAND &)
  public void SK_SM_TWOHAND()
  public void ~SK_SM_TWOHAND()
  public class SK_SM_TWOHAND & operator=(const class SK_SM_TWOHAND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SNIPER {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_SNIPER::GetMaxLevel()
  public int SK_SNIPER::IsAvailableJob(short)
  public short SK_SNIPER::GetSPCost(short)
  public short SK_SNIPER::GetPreDelayTime(short)
  public void SK_SNIPER(const class SK_SNIPER &)
  public void SK_SNIPER()
  public void SK_SNIPER::~SK_SNIPER()
  public class SK_SNIPER & operator=(const class SK_SNIPER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SN_FALCONASSAULT {
  SK_SNIPER, offset = 0x0

  public void SK_SN_FALCONASSAULT::Init()
  public int SK_SN_FALCONASSAULT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SN_FALCONASSAULT::GetMaxLevel()
  public short SK_SN_FALCONASSAULT::GetSPCost(short)
  public short SK_SN_FALCONASSAULT::GetPreDelayTime(short)
  public void SK_SN_FALCONASSAULT(const class SK_SN_FALCONASSAULT &)
  public void SK_SN_FALCONASSAULT::SK_SN_FALCONASSAULT()
  public void ~SK_SN_FALCONASSAULT()
  public class SK_SN_FALCONASSAULT & operator=(const class SK_SN_FALCONASSAULT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SN_SHARPSHOOTING {
  SK_SNIPER, offset = 0x0

  public void SK_SN_SHARPSHOOTING::Init()
  public int SK_SN_SHARPSHOOTING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SN_SHARPSHOOTING::GetMaxLevel()
  public short SK_SN_SHARPSHOOTING::GetSPCost(short)
  public short SK_SN_SHARPSHOOTING::GetPreDelayTime(short)
  public void SK_SN_SHARPSHOOTING(const class SK_SN_SHARPSHOOTING &)
  public void SK_SN_SHARPSHOOTING::SK_SN_SHARPSHOOTING()
  public void SK_SN_SHARPSHOOTING::~SK_SN_SHARPSHOOTING()
  public class SK_SN_SHARPSHOOTING & operator=(const class SK_SN_SHARPSHOOTING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SN_SIGHT {
  SK_SNIPER, offset = 0x0

  public void SK_SN_SIGHT::Init()
  public int SK_SN_SIGHT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SN_SIGHT::GetSPCost(short)
  public void SK_SN_SIGHT(const class SK_SN_SIGHT &)
  public void SK_SN_SIGHT::SK_SN_SIGHT()
  public void ~SK_SN_SIGHT()
  public class SK_SN_SIGHT & operator=(const class SK_SN_SIGHT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SN_WINDWALK {
  SK_SNIPER, offset = 0x0

  public void SK_SN_WINDWALK::Init()
  public int SK_SN_WINDWALK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_SN_WINDWALK::GetSPCost(short)
  public short SK_SN_WINDWALK::GetPreDelayTime(short)
  public void SK_SN_WINDWALK(const class SK_SN_WINDWALK &)
  public void SK_SN_WINDWALK::SK_SN_WINDWALK()
  public void ~SK_SN_WINDWALK()
  public class SK_SN_WINDWALK & operator=(const class SK_SN_WINDWALK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_ARRULLO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_ARRULLO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_ARRULLO::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_ARRULLO::GetApplyRadiusRange(const int)
  public int SK_SO_ARRULLO::GetDeepSleepPercent(const int)
  public int SK_SO_ARRULLO::GetDeepSleepDelayTM(const int)
  public void SK_SO_ARRULLO(const class SK_SO_ARRULLO &)
  public void SK_SO_ARRULLO::SK_SO_ARRULLO()
  public void ~SK_SO_ARRULLO()
  public class SK_SO_ARRULLO & operator=(const class SK_SO_ARRULLO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_CLOUD_KILL {
  CSkillTypeInfo2, offset = 0x0

    public int SK_SO_CLOUD_KILL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_CLOUD_KILL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_CLOUD_KILL::GetGNDRange(short)
  public int SK_SO_CLOUD_KILL::GetLifeTM(const int)
  public int GetEFSTLifeTM(const int)
  public void SK_SO_CLOUD_KILL(const class SK_SO_CLOUD_KILL &)
  public void SK_SO_CLOUD_KILL::SK_SO_CLOUD_KILL()
  public void ~SK_SO_CLOUD_KILL()
  public class SK_SO_CLOUD_KILL & operator=(const class SK_SO_CLOUD_KILL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_DIAMONDDUST {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_DIAMONDDUST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_DIAMONDDUST::GetApplyRadiusRange(const int)
  public int SK_SO_DIAMONDDUST::GetColdPercent(const int)
  public int GetATKPercent(const int, class CPC *)
  public void SK_SO_DIAMONDDUST(const class SK_SO_DIAMONDDUST &)
  public void SK_SO_DIAMONDDUST::SK_SO_DIAMONDDUST()
  public void ~SK_SO_DIAMONDDUST()
  public class SK_SO_DIAMONDDUST & operator=(const class SK_SO_DIAMONDDUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_EARTHGRAVE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_EARTHGRAVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_EARTHGRAVE::GetApplyRadiusRange(const int)
  public int SK_SO_EARTHGRAVE::GetBloodingPercent(const int)
  public int GetATKPercent(const int, class CPC *)
  public void SK_SO_EARTHGRAVE(const class SK_SO_EARTHGRAVE &)
  public void SK_SO_EARTHGRAVE::SK_SO_EARTHGRAVE()
  public void ~SK_SO_EARTHGRAVE()
  public class SK_SO_EARTHGRAVE & operator=(const class SK_SO_EARTHGRAVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_EARTH_INSIGNIA {
  CSkillTypeInfo2, offset = 0x0

  public void SK_SO_EARTH_INSIGNIA::Init()
  public int SK_SO_EARTH_INSIGNIA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_EARTH_INSIGNIA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SO_EARTH_INSIGNIA(const class SK_SO_EARTH_INSIGNIA &)
  public void SK_SO_EARTH_INSIGNIA::SK_SO_EARTH_INSIGNIA()
  public void ~SK_SO_EARTH_INSIGNIA()
  public class SK_SO_EARTH_INSIGNIA & operator=(const class SK_SO_EARTH_INSIGNIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_ELECTRICWALK {
  CSkillTypeInfo2, offset = 0x0

    public int SK_SO_ELECTRICWALK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_ELECTRICWALK::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_ELECTRICWALK::GetMaxInstallCellNum(const int)
  public void SK_SO_ELECTRICWALK(const class SK_SO_ELECTRICWALK &)
  public void SK_SO_ELECTRICWALK::SK_SO_ELECTRICWALK()
  public void ~SK_SO_ELECTRICWALK()
  public class SK_SO_ELECTRICWALK & operator=(const class SK_SO_ELECTRICWALK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_EL_ACTION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_EL_ACTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_EL_ACTION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SO_EL_ACTION(const class SK_SO_EL_ACTION &)
  public void SK_SO_EL_ACTION::SK_SO_EL_ACTION()
  public void ~SK_SO_EL_ACTION()
  public class SK_SO_EL_ACTION & operator=(const class SK_SO_EL_ACTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_EL_ANALYSIS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_EL_ANALYSIS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_EL_ANALYSIS::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SO_EL_ANALYSIS(const class SK_SO_EL_ANALYSIS &)
  public void SK_SO_EL_ANALYSIS::SK_SO_EL_ANALYSIS()
  public void ~SK_SO_EL_ANALYSIS()
  public class SK_SO_EL_ANALYSIS & operator=(const class SK_SO_EL_ANALYSIS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_EL_CONTROL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_EL_CONTROL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_EL_CONTROL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SO_EL_CONTROL(const class SK_SO_EL_CONTROL &)
  public void SK_SO_EL_CONTROL::SK_SO_EL_CONTROL()
  public void ~SK_SO_EL_CONTROL()
  public class SK_SO_EL_CONTROL & operator=(const class SK_SO_EL_CONTROL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_EL_CURE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_EL_CURE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_EL_CURE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SO_EL_CURE(const class SK_SO_EL_CURE &)
  public void SK_SO_EL_CURE::SK_SO_EL_CURE()
  public void ~SK_SO_EL_CURE()
  public class SK_SO_EL_CURE & operator=(const class SK_SO_EL_CURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_EL_SYMPATHY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_EL_SYMPATHY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_EL_SYMPATHY::GetIncMaxHPPercent(const int)
  public int SK_SO_EL_SYMPATHY::GetIncMaxSPPercent(const int)
  public int SK_SO_EL_SYMPATHY::GetIncATKMATKAmount(const int)
  public int SK_SO_EL_SYMPATHY::GetELSummonDecReduceSPPercent(const int)
  public void SK_SO_EL_SYMPATHY(const class SK_SO_EL_SYMPATHY &)
  public void SK_SO_EL_SYMPATHY::SK_SO_EL_SYMPATHY()
  public void ~SK_SO_EL_SYMPATHY()
  public class SK_SO_EL_SYMPATHY & operator=(const class SK_SO_EL_SYMPATHY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_FIREWALK {
  CSkillTypeInfo2, offset = 0x0

    public int SK_SO_FIREWALK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_FIREWALK::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_FIREWALK::GetMaxInstallCellNum(const int)
  public void SK_SO_FIREWALK(const class SK_SO_FIREWALK &)
  public void SK_SO_FIREWALK::SK_SO_FIREWALK()
  public void ~SK_SO_FIREWALK()
  public class SK_SO_FIREWALK & operator=(const class SK_SO_FIREWALK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_FIRE_INSIGNIA {
  CSkillTypeInfo2, offset = 0x0

  public void SK_SO_FIRE_INSIGNIA::Init()
  public int SK_SO_FIRE_INSIGNIA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_FIRE_INSIGNIA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SO_FIRE_INSIGNIA(const class SK_SO_FIRE_INSIGNIA &)
  public void SK_SO_FIRE_INSIGNIA::SK_SO_FIRE_INSIGNIA()
  public void ~SK_SO_FIRE_INSIGNIA()
  public class SK_SO_FIRE_INSIGNIA & operator=(const class SK_SO_FIRE_INSIGNIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_POISON_BUSTER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_POISON_BUSTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_POISON_BUSTER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_POISON_BUSTER::GetApplyRadiusRange(const int)
  public void SK_SO_POISON_BUSTER(const class SK_SO_POISON_BUSTER &)
  public void SK_SO_POISON_BUSTER::SK_SO_POISON_BUSTER()
  public void ~SK_SO_POISON_BUSTER()
  public class SK_SO_POISON_BUSTER & operator=(const class SK_SO_POISON_BUSTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_PSYCHIC_WAVE {
  CSkillTypeInfo2, offset = 0x0

    public int SK_SO_PSYCHIC_WAVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_PSYCHIC_WAVE::GetGNDRange(short)
  public int SK_SO_PSYCHIC_WAVE::GetRepeatAtkCnt(const int)
  public void SK_SO_PSYCHIC_WAVE(const class SK_SO_PSYCHIC_WAVE &)
  public void SK_SO_PSYCHIC_WAVE::SK_SO_PSYCHIC_WAVE()
  public void ~SK_SO_PSYCHIC_WAVE()
  public class SK_SO_PSYCHIC_WAVE & operator=(const class SK_SO_PSYCHIC_WAVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_SM_ELEMENTAL {
  CSkillTypeInfo2, offset = 0x0

  public int OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public const int GetItemID(const int)
  public const int GetItemCount(const int)
  public const int GetElementalType(const int)
  public const int GetDelayTime(const int)
  public const int GetReduceSPValue(const int)
  public void SK_SO_SM_ELEMENTAL(const class SK_SO_SM_ELEMENTAL &)
  public void SK_SO_SM_ELEMENTAL()
  public void ~SK_SO_SM_ELEMENTAL()
  public class SK_SO_SM_ELEMENTAL & operator=(const class SK_SO_SM_ELEMENTAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_SPELLFIST {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_SPELLFIST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_SPELLFIST::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_SPELLFIST::GetLifeTM(const int)
  public int SK_SO_SPELLFIST::GetAtkCnt(const int)
  public void SK_SO_SPELLFIST(const class SK_SO_SPELLFIST &)
  public void SK_SO_SPELLFIST::SK_SO_SPELLFIST()
  public void ~SK_SO_SPELLFIST()
  public class SK_SO_SPELLFIST & operator=(const class SK_SO_SPELLFIST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_STRIKING {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_STRIKING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int GetPlusWeaponATKamount(const int)
  public int SK_SO_STRIKING::GetPlusCRIpercent(const int)
  public int SK_SO_STRIKING::GetLifeTM(const int)
  public int SK_SO_STRIKING::GetReduceSPValue(const int)
  public void SK_SO_STRIKING(const class SK_SO_STRIKING &)
  public void SK_SO_STRIKING::SK_SO_STRIKING()
  public void ~SK_SO_STRIKING()
  public class SK_SO_STRIKING & operator=(const class SK_SO_STRIKING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_SUMMON_AGNI {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_SUMMON_AGNI::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_SUMMON_AGNI::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_SUMMON_AGNI::GetLifeTM(const int)
  public int SK_SO_SUMMON_AGNI::GetReduceSPAmount(const int)
  public int SK_SO_SUMMON_AGNI::GetItemID(const int)
  public int SK_SO_SUMMON_AGNI::GetItemCnt(const int)
  public void SK_SO_SUMMON_AGNI(const class SK_SO_SUMMON_AGNI &)
  public void SK_SO_SUMMON_AGNI::SK_SO_SUMMON_AGNI()
  public void ~SK_SO_SUMMON_AGNI()
  public class SK_SO_SUMMON_AGNI & operator=(const class SK_SO_SUMMON_AGNI &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_SUMMON_AQUA {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_SUMMON_AQUA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_SUMMON_AQUA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_SUMMON_AQUA::GetLifeTM(const int)
  public int SK_SO_SUMMON_AQUA::GetReduceSPAmount(const int)
  public int SK_SO_SUMMON_AQUA::GetItemID(const int)
  public int SK_SO_SUMMON_AQUA::GetItemCnt(const int)
  public void SK_SO_SUMMON_AQUA(const class SK_SO_SUMMON_AQUA &)
  public void SK_SO_SUMMON_AQUA::SK_SO_SUMMON_AQUA()
  public void ~SK_SO_SUMMON_AQUA()
  public class SK_SO_SUMMON_AQUA & operator=(const class SK_SO_SUMMON_AQUA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_SUMMON_TERA {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_SUMMON_TERA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_SUMMON_TERA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_SUMMON_TERA::GetLifeTM(const int)
  public int SK_SO_SUMMON_TERA::GetReduceSPAmount(const int)
  public int SK_SO_SUMMON_TERA::GetItemID(const int)
  public int SK_SO_SUMMON_TERA::GetItemCnt(const int)
  public void SK_SO_SUMMON_TERA(const class SK_SO_SUMMON_TERA &)
  public void SK_SO_SUMMON_TERA::SK_SO_SUMMON_TERA()
  public void ~SK_SO_SUMMON_TERA()
  public class SK_SO_SUMMON_TERA & operator=(const class SK_SO_SUMMON_TERA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_SUMMON_VENTUS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_SUMMON_VENTUS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_SUMMON_VENTUS::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SO_SUMMON_VENTUS::GetLifeTM(const int)
  public int SK_SO_SUMMON_VENTUS::GetReduceSPAmount(const int)
  public int SK_SO_SUMMON_VENTUS::GetItemID(const int)
  public int SK_SO_SUMMON_VENTUS::GetItemCnt(const int)
  public void SK_SO_SUMMON_VENTUS(const class SK_SO_SUMMON_VENTUS &)
  public void SK_SO_SUMMON_VENTUS::SK_SO_SUMMON_VENTUS()
  public void ~SK_SO_SUMMON_VENTUS()
  public class SK_SO_SUMMON_VENTUS & operator=(const class SK_SO_SUMMON_VENTUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_VACUUM_EXTREME {
  CSkillTypeInfo2, offset = 0x0

    public int SK_SO_VACUUM_EXTREME::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_VACUUM_EXTREME::GetGNDRange(short)
  public int SK_SO_VACUUM_EXTREME::GetLifeTM(const int)
  public void SK_SO_VACUUM_EXTREME(const class SK_SO_VACUUM_EXTREME &)
  public void SK_SO_VACUUM_EXTREME::SK_SO_VACUUM_EXTREME()
  public void ~SK_SO_VACUUM_EXTREME()
  public class SK_SO_VACUUM_EXTREME & operator=(const class SK_SO_VACUUM_EXTREME &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_VARETYR_SPEAR {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_VARETYR_SPEAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_VARETYR_SPEAR::GetApplyRadiusRange(const int)
  public int SK_SO_VARETYR_SPEAR::GetStunPercent(const int)
  public int GetStunDelayTM(const int)
  public void SK_SO_VARETYR_SPEAR(const class SK_SO_VARETYR_SPEAR &)
  public void SK_SO_VARETYR_SPEAR::SK_SO_VARETYR_SPEAR()
  public void ~SK_SO_VARETYR_SPEAR()
  public class SK_SO_VARETYR_SPEAR & operator=(const class SK_SO_VARETYR_SPEAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_WARMER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SO_WARMER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_WARMER::GetGNDRange(short)
  public int SK_SO_WARMER::GetLifeTM(const int)
  public void SK_SO_WARMER(const class SK_SO_WARMER &)
  public void SK_SO_WARMER::SK_SO_WARMER()
  public void ~SK_SO_WARMER()
  public class SK_SO_WARMER & operator=(const class SK_SO_WARMER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_WATER_INSIGNIA {
  CSkillTypeInfo2, offset = 0x0

  public void SK_SO_WATER_INSIGNIA::Init()
  public int SK_SO_WATER_INSIGNIA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_WATER_INSIGNIA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SO_WATER_INSIGNIA(const class SK_SO_WATER_INSIGNIA &)
  public void SK_SO_WATER_INSIGNIA::SK_SO_WATER_INSIGNIA()
  public void ~SK_SO_WATER_INSIGNIA()
  public class SK_SO_WATER_INSIGNIA & operator=(const class SK_SO_WATER_INSIGNIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SO_WIND_INSIGNIA {
  CSkillTypeInfo2, offset = 0x0

  public void SK_SO_WIND_INSIGNIA::Init()
  public int SK_SO_WIND_INSIGNIA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SO_WIND_INSIGNIA::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SO_WIND_INSIGNIA(const class SK_SO_WIND_INSIGNIA &)
  public void SK_SO_WIND_INSIGNIA::SK_SO_WIND_INSIGNIA()
  public void ~SK_SO_WIND_INSIGNIA()
  public class SK_SO_WIND_INSIGNIA & operator=(const class SK_SO_WIND_INSIGNIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_ASSIMILATEPOWER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_ASSIMILATEPOWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_ASSIMILATEPOWER::GetIncSPpercentPerSprits(const int)
  public int SK_SR_ASSIMILATEPOWER::GetRadiusRange(const int)
  public void SK_SR_ASSIMILATEPOWER(const class SK_SR_ASSIMILATEPOWER &)
  public void SK_SR_ASSIMILATEPOWER::SK_SR_ASSIMILATEPOWER()
  public void ~SK_SR_ASSIMILATEPOWER()
  public class SK_SR_ASSIMILATEPOWER & operator=(const class SK_SR_ASSIMILATEPOWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_CRESCENTELBOW {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_CRESCENTELBOW::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_CRESCENTELBOW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_CRESCENTELBOW::GetLifeTM(const int)
  public int SK_SR_CRESCENTELBOW::GetApplyPercent(const int)
  public void SK_SR_CRESCENTELBOW(const class SK_SR_CRESCENTELBOW &)
  public void SK_SR_CRESCENTELBOW::SK_SR_CRESCENTELBOW()
  public void ~SK_SR_CRESCENTELBOW()
  public class SK_SR_CRESCENTELBOW & operator=(const class SK_SR_CRESCENTELBOW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_CRESCENTELBOW_AUTOSPELL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_CRESCENTELBOW_AUTOSPELL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_CRESCENTELBOW_AUTOSPELL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_CRESCENTELBOW_AUTOSPELL::GetKnockbackAddDamagePercent(const int)
  public void SK_SR_CRESCENTELBOW_AUTOSPELL(const class SK_SR_CRESCENTELBOW_AUTOSPELL &)
  public void SK_SR_CRESCENTELBOW_AUTOSPELL::SK_SR_CRESCENTELBOW_AUTOSPELL()
  public void ~SK_SR_CRESCENTELBOW_AUTOSPELL()
  public class SK_SR_CRESCENTELBOW_AUTOSPELL & operator=(const class SK_SR_CRESCENTELBOW_AUTOSPELL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_CURSEDCIRCLE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_CURSEDCIRCLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_CURSEDCIRCLE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_CURSEDCIRCLE::GetReduceHPpercent(const int)
  public int SK_SR_CURSEDCIRCLE::GetRadiusRange(const int)
  public int SK_SR_CURSEDCIRCLE::GetLifeTM(const int)
  public void SK_SR_CURSEDCIRCLE(const class SK_SR_CURSEDCIRCLE &)
  public void SK_SR_CURSEDCIRCLE::SK_SR_CURSEDCIRCLE()
  public void ~SK_SR_CURSEDCIRCLE()
  public class SK_SR_CURSEDCIRCLE & operator=(const class SK_SR_CURSEDCIRCLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_DRAGONCOMBO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_DRAGONCOMBO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_DRAGONCOMBO::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_DRAGONCOMBO::GetStunPercent(const int)
  public void SK_SR_DRAGONCOMBO(const class SK_SR_DRAGONCOMBO &)
  public void SK_SR_DRAGONCOMBO::SK_SR_DRAGONCOMBO()
  public void ~SK_SR_DRAGONCOMBO()
  public class SK_SR_DRAGONCOMBO & operator=(const class SK_SR_DRAGONCOMBO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_EARTHSHAKER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_EARTHSHAKER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_EARTHSHAKER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_EARTHSHAKER::GetRadisRange(const int)
  public int SK_SR_EARTHSHAKER::GetStunDelayTime(const int)
  public int SK_SR_EARTHSHAKER::GetStunPercent(const int)
  public void SK_SR_EARTHSHAKER(const class SK_SR_EARTHSHAKER &)
  public void SK_SR_EARTHSHAKER::SK_SR_EARTHSHAKER()
  public void ~SK_SR_EARTHSHAKER()
  public class SK_SR_EARTHSHAKER & operator=(const class SK_SR_EARTHSHAKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_FALLENEMPIRE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_FALLENEMPIRE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_FALLENEMPIRE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_FALLENEMPIRE::GetRigidityTM(const int)
  public void SK_SR_FALLENEMPIRE(const class SK_SR_FALLENEMPIRE &)
  public void SK_SR_FALLENEMPIRE::SK_SR_FALLENEMPIRE()
  public void ~SK_SR_FALLENEMPIRE()
  public class SK_SR_FALLENEMPIRE & operator=(const class SK_SR_FALLENEMPIRE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_GATEOFHELL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_GATEOFHELL::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_GATEOFHELL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_GATEOFHELL::GetDamageAmplifyFactor(const int)
  public void SK_SR_GATEOFHELL(const class SK_SR_GATEOFHELL &)
  public void SK_SR_GATEOFHELL::SK_SR_GATEOFHELL()
  public void ~SK_SR_GATEOFHELL()
  public class SK_SR_GATEOFHELL & operator=(const class SK_SR_GATEOFHELL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_GENTLETOUCH_CHANGE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_GENTLETOUCH_CHANGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_GENTLETOUCH_CHANGE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_GENTLETOUCH_CHANGE::GetReduceHPpercent(const int)
  public int SK_SR_GENTLETOUCH_CHANGE::GetLifeTM(const int)
  public void SK_SR_GENTLETOUCH_CHANGE(const class SK_SR_GENTLETOUCH_CHANGE &)
  public void SK_SR_GENTLETOUCH_CHANGE::SK_SR_GENTLETOUCH_CHANGE()
  public void ~SK_SR_GENTLETOUCH_CHANGE()
  public class SK_SR_GENTLETOUCH_CHANGE & operator=(const class SK_SR_GENTLETOUCH_CHANGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_GENTLETOUCH_CURE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_GENTLETOUCH_CURE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_GENTLETOUCH_CURE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SR_GENTLETOUCH_CURE(const class SK_SR_GENTLETOUCH_CURE &)
  public void SK_SR_GENTLETOUCH_CURE::SK_SR_GENTLETOUCH_CURE()
  public void ~SK_SR_GENTLETOUCH_CURE()
  public class SK_SR_GENTLETOUCH_CURE & operator=(const class SK_SR_GENTLETOUCH_CURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_GENTLETOUCH_ENERGYGAIN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_GENTLETOUCH_ENERGYGAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_GENTLETOUCH_ENERGYGAIN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_GENTLETOUCH_ENERGYGAIN::GetReduceHPpercent(const int)
  public int SK_SR_GENTLETOUCH_ENERGYGAIN::GetGainPercent(const int)
  public int SK_SR_GENTLETOUCH_ENERGYGAIN::GetLifeTM(const int)
  public void SK_SR_GENTLETOUCH_ENERGYGAIN(const class SK_SR_GENTLETOUCH_ENERGYGAIN &)
  public void SK_SR_GENTLETOUCH_ENERGYGAIN::SK_SR_GENTLETOUCH_ENERGYGAIN()
  public void ~SK_SR_GENTLETOUCH_ENERGYGAIN()
  public class SK_SR_GENTLETOUCH_ENERGYGAIN & operator=(const class SK_SR_GENTLETOUCH_ENERGYGAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_GENTLETOUCH_QUIET {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_GENTLETOUCH_QUIET::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_GENTLETOUCH_QUIET::GetSilenceTM(const int)
  public void SK_SR_GENTLETOUCH_QUIET(const class SK_SR_GENTLETOUCH_QUIET &)
  public void SK_SR_GENTLETOUCH_QUIET::SK_SR_GENTLETOUCH_QUIET()
  public void ~SK_SR_GENTLETOUCH_QUIET()
  public class SK_SR_GENTLETOUCH_QUIET & operator=(const class SK_SR_GENTLETOUCH_QUIET &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_GENTLETOUCH_REVITALIZE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_GENTLETOUCH_REVITALIZE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_GENTLETOUCH_REVITALIZE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_GENTLETOUCH_REVITALIZE::GetLifeTM(const int)
  public void SK_SR_GENTLETOUCH_REVITALIZE(const class SK_SR_GENTLETOUCH_REVITALIZE &)
  public void SK_SR_GENTLETOUCH_REVITALIZE::SK_SR_GENTLETOUCH_REVITALIZE()
  public void ~SK_SR_GENTLETOUCH_REVITALIZE()
  public class SK_SR_GENTLETOUCH_REVITALIZE & operator=(const class SK_SR_GENTLETOUCH_REVITALIZE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_HOWLINGOFLION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_HOWLINGOFLION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_HOWLINGOFLION::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_HOWLINGOFLION::GetRadiusRange(const int)
  public int SK_SR_HOWLINGOFLION::GetApplyFEARpercent(const int)
  public void SK_SR_HOWLINGOFLION(const class SK_SR_HOWLINGOFLION &)
  public void SK_SR_HOWLINGOFLION::SK_SR_HOWLINGOFLION()
  public void ~SK_SR_HOWLINGOFLION()
  public class SK_SR_HOWLINGOFLION & operator=(const class SK_SR_HOWLINGOFLION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_KNUCKLEARROW {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_KNUCKLEARROW::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_KNUCKLEARROW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_KNUCKLEARROW::GetKnockbackDistance(const int)
  public void SK_SR_KNUCKLEARROW(const class SK_SR_KNUCKLEARROW &)
  public void SK_SR_KNUCKLEARROW::SK_SR_KNUCKLEARROW()
  public void ~SK_SR_KNUCKLEARROW()
  public class SK_SR_KNUCKLEARROW & operator=(const class SK_SR_KNUCKLEARROW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_LIGHTNINGWALK {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_LIGHTNINGWALK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_LIGHTNINGWALK::GetLifeTM(const int)
  public int SK_SR_LIGHTNINGWALK::GetApplyPercent(const int)
  public void SK_SR_LIGHTNINGWALK(const class SK_SR_LIGHTNINGWALK &)
  public void SK_SR_LIGHTNINGWALK::SK_SR_LIGHTNINGWALK()
  public void ~SK_SR_LIGHTNINGWALK()
  public class SK_SR_LIGHTNINGWALK & operator=(const class SK_SR_LIGHTNINGWALK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_POWERVELOCITY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_POWERVELOCITY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_POWERVELOCITY::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_SR_POWERVELOCITY(const class SK_SR_POWERVELOCITY &)
  public void SK_SR_POWERVELOCITY::SK_SR_POWERVELOCITY()
  public void ~SK_SR_POWERVELOCITY()
  public class SK_SR_POWERVELOCITY & operator=(const class SK_SR_POWERVELOCITY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_RAISINGDRAGON {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_RAISINGDRAGON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_RAISINGDRAGON::GetLifeTM(const int)
  public int SK_SR_RAISINGDRAGON::GetMaxSpiritsNum(const int)
  public int SK_SR_RAISINGDRAGON::GetIncMHPandMSPpercent(const int)
  public void SK_SR_RAISINGDRAGON(const class SK_SR_RAISINGDRAGON &)
  public void SK_SR_RAISINGDRAGON::SK_SR_RAISINGDRAGON()
  public void ~SK_SR_RAISINGDRAGON()
  public class SK_SR_RAISINGDRAGON & operator=(const class SK_SR_RAISINGDRAGON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_RAMPAGEBLASTER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_RAMPAGEBLASTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_RAMPAGEBLASTER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_RAMPAGEBLASTER::GetRadisRange(const int)
  public void SK_SR_RAMPAGEBLASTER(const class SK_SR_RAMPAGEBLASTER &)
  public void SK_SR_RAMPAGEBLASTER::SK_SR_RAMPAGEBLASTER()
  public void ~SK_SR_RAMPAGEBLASTER()
  public class SK_SR_RAMPAGEBLASTER & operator=(const class SK_SR_RAMPAGEBLASTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_RIDEINLIGHTNING {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_RIDEINLIGHTNING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_RIDEINLIGHTNING::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_RIDEINLIGHTNING::GetRadiusRange(const int)
  public int SK_SR_RIDEINLIGHTNING::GetReduceSpiritsCnt(const int)
  public int SK_SR_RIDEINLIGHTNING::GetIncATKpercentWhenWINDpropertyWeapon(const int)
  public void SK_SR_RIDEINLIGHTNING(const class SK_SR_RIDEINLIGHTNING &)
  public void SK_SR_RIDEINLIGHTNING::SK_SR_RIDEINLIGHTNING()
  public void ~SK_SR_RIDEINLIGHTNING()
  public class SK_SR_RIDEINLIGHTNING & operator=(const class SK_SR_RIDEINLIGHTNING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_SKYNETBLOW {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_SKYNETBLOW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_SKYNETBLOW::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_SKYNETBLOW::GetAtkCount(const int)
  public int SK_SR_SKYNETBLOW::GetRadisRange(const int)
  public void SK_SR_SKYNETBLOW(const class SK_SR_SKYNETBLOW &)
  public void SK_SR_SKYNETBLOW::SK_SR_SKYNETBLOW()
  public void ~SK_SR_SKYNETBLOW()
  public class SK_SR_SKYNETBLOW & operator=(const class SK_SR_SKYNETBLOW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_TIGERCANNON {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_TIGERCANNON::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_SR_TIGERCANNON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_TIGERCANNON::GetReduceHPpercent(const int)
  public int SK_SR_TIGERCANNON::GetReduceSPpercent(const int)
  public int SK_SR_TIGERCANNON::GetRadisRange(const int)
  public void SK_SR_TIGERCANNON(const class SK_SR_TIGERCANNON &)
  public void SK_SR_TIGERCANNON::SK_SR_TIGERCANNON()
  public void ~SK_SR_TIGERCANNON()
  public class SK_SR_TIGERCANNON & operator=(const class SK_SR_TIGERCANNON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SR_WINDMILL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_SR_WINDMILL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_SR_WINDMILL::GetRadiusRange(const int)
  public void SK_SR_WINDMILL(const class SK_SR_WINDMILL &)
  public void SK_SR_WINDMILL::SK_SR_WINDMILL()
  public void ~SK_SR_WINDMILL()
  public class SK_SR_WINDMILL & operator=(const class SK_SR_WINDMILL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_STALKER {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_STALKER::GetMaxLevel()
  public int SK_STALKER::IsAvailableJob(short)
  public short SK_STALKER::GetSPCost(short)
  public short SK_STALKER::GetPreDelayTime(short)
  public void SK_STALKER(const class SK_STALKER &)
  public void SK_STALKER()
  public void SK_STALKER::~SK_STALKER()
  public class SK_STALKER & operator=(const class SK_STALKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_STAR {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_STAR::GetMaxLevel()
  public int SK_STAR::IsAvailableJob(short)
  public short SK_STAR::GetSPCost(short)
  public short SK_STAR::GetPreDelayTime(short)
  public void SK_STAR(const class SK_STAR &)
  public void SK_STAR::SK_STAR()
  public void SK_STAR::~SK_STAR()
  public class SK_STAR & operator=(const class SK_STAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ST_CHASEWALK {
  SK_STALKER, offset = 0x0

  public void SK_ST_CHASEWALK::Init()
  public int SK_ST_CHASEWALK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ST_CHASEWALK::GetSPCost(short)
  public short SK_ST_CHASEWALK::GetPreDelayTime(short)
  public void SK_ST_CHASEWALK(const class SK_ST_CHASEWALK &)
  public void SK_ST_CHASEWALK::SK_ST_CHASEWALK()
  public void ~SK_ST_CHASEWALK()
  public class SK_ST_CHASEWALK & operator=(const class SK_ST_CHASEWALK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ST_FULLSTRIP {
  SK_STALKER, offset = 0x0

  public void SK_ST_FULLSTRIP::Init()
  public int SK_ST_FULLSTRIP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ST_FULLSTRIP::GetMaxLevel()
  public short SK_ST_FULLSTRIP::GetSPCost(short)
  public void SK_ST_FULLSTRIP(const class SK_ST_FULLSTRIP &)
  public void SK_ST_FULLSTRIP::SK_ST_FULLSTRIP()
  public void ~SK_ST_FULLSTRIP()
  public class SK_ST_FULLSTRIP & operator=(const class SK_ST_FULLSTRIP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ST_PRESERVE {
  SK_STALKER, offset = 0x0

  public void SK_ST_PRESERVE::Init()
  public int SK_ST_PRESERVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ST_PRESERVE::GetMaxLevel()
  public short SK_ST_PRESERVE::GetSPCost(short)
  public short SK_ST_PRESERVE::GetPreDelayTime(short)
  public void SK_ST_PRESERVE(const class SK_ST_PRESERVE &)
  public void SK_ST_PRESERVE::SK_ST_PRESERVE()
  public void ~SK_ST_PRESERVE()
  public class SK_ST_PRESERVE & operator=(const class SK_ST_PRESERVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ST_REJECTSWORD {
  SK_STALKER, offset = 0x0

  public void SK_ST_REJECTSWORD::Init()
  public int SK_ST_REJECTSWORD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ST_REJECTSWORD::GetSPCost(short)
  public void SK_ST_REJECTSWORD(const class SK_ST_REJECTSWORD &)
  public void SK_ST_REJECTSWORD::SK_ST_REJECTSWORD()
  public void ~SK_ST_REJECTSWORD()
  public class SK_ST_REJECTSWORD & operator=(const class SK_ST_REJECTSWORD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_ST_STEALBACKPACK {
  SK_STALKER, offset = 0x0

  public void SK_ST_STEALBACKPACK::Init()
  public int SK_ST_STEALBACKPACK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_ST_STEALBACKPACK::GetSPCost(short)
  public void SK_ST_STEALBACKPACK(const class SK_ST_STEALBACKPACK &)
  public void SK_ST_STEALBACKPACK::SK_ST_STEALBACKPACK()
  public void ~SK_ST_STEALBACKPACK()
  public class SK_ST_STEALBACKPACK & operator=(const class SK_ST_STEALBACKPACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SWORDMAN {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_SWORDMAN::GetMaxLevel()
  public int SK_SWORDMAN::IsAvailableJob(short)
  public short SK_SWORDMAN::GetSPCost(short)
  public short SK_SWORDMAN::GetPreDelayTime(short)
  public void SK_SWORDMAN(const class SK_SWORDMAN &)
  public void SK_SWORDMAN::SK_SWORDMAN()
  public void SK_SWORDMAN::~SK_SWORDMAN()
  public class SK_SWORDMAN & operator=(const class SK_SWORDMAN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SYS_FIRSTJOBLV {
  CSkillTypeInfo2, offset = 0x0

  public void SK_SYS_FIRSTJOBLV(const class SK_SYS_FIRSTJOBLV &)
  public void SK_SYS_FIRSTJOBLV::SK_SYS_FIRSTJOBLV()
  public void ~SK_SYS_FIRSTJOBLV()
  public class SK_SYS_FIRSTJOBLV & operator=(const class SK_SYS_FIRSTJOBLV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_SYS_SECONDJOBLV {
  CSkillTypeInfo2, offset = 0x0

  public void SK_SYS_SECONDJOBLV(const class SK_SYS_SECONDJOBLV &)
  public void SK_SYS_SECONDJOBLV::SK_SYS_SECONDJOBLV()
  public void ~SK_SYS_SECONDJOBLV()
  public class SK_SYS_SECONDJOBLV & operator=(const class SK_SYS_SECONDJOBLV &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TAEKWON {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_TAEKWON::GetMaxLevel()
  public int SK_TAEKWON::IsAvailableJob(short)
  public short SK_TAEKWON::GetSPCost(short)
  public short SK_TAEKWON::GetPreDelayTime(short)
  public void SK_TAEKWON(const class SK_TAEKWON &)
  public void SK_TAEKWON::SK_TAEKWON()
  public void SK_TAEKWON::~SK_TAEKWON()
  public class SK_TAEKWON & operator=(const class SK_TAEKWON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_BACKSLIDING {
  SK_THIEF, offset = 0x0

  public void SK_TF_BACKSLIDING::Init()
  public int SK_TF_BACKSLIDING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TF_BACKSLIDING::GetMaxLevel()
  public short SK_TF_BACKSLIDING::GetSPCost(short)
  public int SK_TF_BACKSLIDING::IsAvailableJob(short)
  public void SK_TF_BACKSLIDING(const class SK_TF_BACKSLIDING &)
  public void SK_TF_BACKSLIDING()
  public void ~SK_TF_BACKSLIDING()
  public class SK_TF_BACKSLIDING & operator=(const class SK_TF_BACKSLIDING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_DETOXIFY {
  SK_THIEF, offset = 0x0

  public void SK_TF_DETOXIFY::Init()
  public int SK_TF_DETOXIFY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TF_DETOXIFY::GetMaxLevel()
  public short SK_TF_DETOXIFY::GetSPCost(short)
  public void SK_TF_DETOXIFY(const class SK_TF_DETOXIFY &)
  public void SK_TF_DETOXIFY()
  public void ~SK_TF_DETOXIFY()
  public class SK_TF_DETOXIFY & operator=(const class SK_TF_DETOXIFY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_DOUBLE {
  SK_THIEF, offset = 0x0

  public void SK_TF_DOUBLE::Init()
  public int SK_TF_DOUBLE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_TF_DOUBLE(const class SK_TF_DOUBLE &)
  public void SK_TF_DOUBLE()
  public void ~SK_TF_DOUBLE()
  public class SK_TF_DOUBLE & operator=(const class SK_TF_DOUBLE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_HIDING {
  SK_THIEF, offset = 0x0

  public void SK_TF_HIDING::Init()
  public int SK_TF_HIDING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TF_HIDING::GetSPCost(short)
  public void SK_TF_HIDING(const class SK_TF_HIDING &)
  public void SK_TF_HIDING()
  public void ~SK_TF_HIDING()
  public class SK_TF_HIDING & operator=(const class SK_TF_HIDING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_MISS {
  SK_THIEF, offset = 0x0

  public void SK_TF_MISS::Init()
  public int SK_TF_MISS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_TF_MISS(const class SK_TF_MISS &)
  public void SK_TF_MISS()
  public void ~SK_TF_MISS()
  public class SK_TF_MISS & operator=(const class SK_TF_MISS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_PICKSTONE {
  SK_THIEF, offset = 0x0

  public void SK_TF_PICKSTONE::Init()
  public int SK_TF_PICKSTONE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TF_PICKSTONE::GetMaxLevel()
  public short SK_TF_PICKSTONE::GetSPCost(short)
  public short SK_TF_PICKSTONE::GetPreDelayTime(short)
  public int SK_TF_PICKSTONE::IsAvailableJob(short)
  public void SK_TF_PICKSTONE(const class SK_TF_PICKSTONE &)
  public void SK_TF_PICKSTONE()
  public void ~SK_TF_PICKSTONE()
  public class SK_TF_PICKSTONE & operator=(const class SK_TF_PICKSTONE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_POISON {
  SK_THIEF, offset = 0x0

  public void SK_TF_POISON::Init()
  public int SK_TF_POISON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TF_POISON::GetSPCost(short)
  public void SK_TF_POISON(const class SK_TF_POISON &)
  public void SK_TF_POISON()
  public void ~SK_TF_POISON()
  public class SK_TF_POISON & operator=(const class SK_TF_POISON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_SPRINKLESAND {
  SK_THIEF, offset = 0x0

  public void SK_TF_SPRINKLESAND::Init()
  public int SK_TF_SPRINKLESAND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TF_SPRINKLESAND::GetMaxLevel()
  public short SK_TF_SPRINKLESAND::GetSPCost(short)
  public int SK_TF_SPRINKLESAND::IsAvailableJob(short)
  public void SK_TF_SPRINKLESAND(const class SK_TF_SPRINKLESAND &)
  public void SK_TF_SPRINKLESAND()
  public void ~SK_TF_SPRINKLESAND()
  public class SK_TF_SPRINKLESAND & operator=(const class SK_TF_SPRINKLESAND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_STEAL {
  SK_THIEF, offset = 0x0

  public void SK_TF_STEAL::Init()
  public int SK_TF_STEAL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TF_STEAL::GetSPCost(short)
  public void SK_TF_STEAL(const class SK_TF_STEAL &)
  public void SK_TF_STEAL()
  public void ~SK_TF_STEAL()
  public class SK_TF_STEAL & operator=(const class SK_TF_STEAL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TF_THROWSTONE {
  SK_THIEF, offset = 0x0

  public void SK_TF_THROWSTONE::Init()
  public int SK_TF_THROWSTONE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TF_THROWSTONE::GetMaxLevel()
  public short SK_TF_THROWSTONE::GetSPCost(short)
  public int SK_TF_THROWSTONE::IsAvailableJob(short)
  public short SK_TF_THROWSTONE::GetPostDelayTM(short)
  public void SK_TF_THROWSTONE(const class SK_TF_THROWSTONE &)
  public void SK_TF_THROWSTONE()
  public void ~SK_TF_THROWSTONE()
  public class SK_TF_THROWSTONE & operator=(const class SK_TF_THROWSTONE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_THIEF {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_THIEF::GetMaxLevel()
  public int SK_THIEF::IsAvailableJob(short)
  public short SK_THIEF::GetSPCost(short)
  public short SK_THIEF::GetPreDelayTime(short)
  public void SK_THIEF(const class SK_THIEF &)
  public void SK_THIEF::SK_THIEF()
  public void SK_THIEF::~SK_THIEF()
  public class SK_THIEF & operator=(const class SK_THIEF &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_COUNTER {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_COUNTER::Init()
  public int SK_TK_COUNTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_COUNTER::GetMaxLevel()
  public short SK_TK_COUNTER::GetSPCost(short)
  public void SK_TK_COUNTER(const class SK_TK_COUNTER &)
  public void SK_TK_COUNTER::SK_TK_COUNTER()
  public void ~SK_TK_COUNTER()
  public class SK_TK_COUNTER & operator=(const class SK_TK_COUNTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_DODGE {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_DODGE::Init()
  public int SK_TK_DODGE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_DODGE::GetMaxLevel()
  public short SK_TK_DODGE::GetSPCost(short)
  public void SK_TK_DODGE(const class SK_TK_DODGE &)
  public void SK_TK_DODGE::SK_TK_DODGE()
  public void ~SK_TK_DODGE()
  public class SK_TK_DODGE & operator=(const class SK_TK_DODGE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_DOWNKICK {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_DOWNKICK::Init()
  public int SK_TK_DOWNKICK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_DOWNKICK::GetMaxLevel()
  public short SK_TK_DOWNKICK::GetSPCost(short)
  public void SK_TK_DOWNKICK(const class SK_TK_DOWNKICK &)
  public void SK_TK_DOWNKICK::SK_TK_DOWNKICK()
  public void ~SK_TK_DOWNKICK()
  public class SK_TK_DOWNKICK & operator=(const class SK_TK_DOWNKICK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_HIGHJUMP {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_HIGHJUMP::Init()
  public int SK_TK_HIGHJUMP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_HIGHJUMP::GetMaxLevel()
  public short SK_TK_HIGHJUMP::GetSPCost(short)
  public short SK_TK_HIGHJUMP::GetPreDelayTime(short)
  public short SK_TK_HIGHJUMP::GetAttackRange(int)
  public void SK_TK_HIGHJUMP(const class SK_TK_HIGHJUMP &)
  public void SK_TK_HIGHJUMP::SK_TK_HIGHJUMP()
  public void ~SK_TK_HIGHJUMP()
  public class SK_TK_HIGHJUMP & operator=(const class SK_TK_HIGHJUMP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_HPTIME {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_HPTIME::Init()
  public int SK_TK_HPTIME::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_TK_HPTIME(const class SK_TK_HPTIME &)
  public void SK_TK_HPTIME::SK_TK_HPTIME()
  public void ~SK_TK_HPTIME()
  public class SK_TK_HPTIME & operator=(const class SK_TK_HPTIME &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_JUMPKICK {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_JUMPKICK::Init()
  public int SK_TK_JUMPKICK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_JUMPKICK::GetMaxLevel()
  public short SK_TK_JUMPKICK::GetSPCost(short)
  public void SK_TK_JUMPKICK(const class SK_TK_JUMPKICK &)
  public void SK_TK_JUMPKICK::SK_TK_JUMPKICK()
  public void ~SK_TK_JUMPKICK()
  public class SK_TK_JUMPKICK & operator=(const class SK_TK_JUMPKICK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_MISSION {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_MISSION::Init()
  public int SK_TK_MISSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_MISSION::GetMaxLevel()
  public short SK_TK_MISSION::GetSPCost(short)
  public short SK_TK_MISSION::GetPreDelayTime(short)
  public void SK_TK_MISSION(const class SK_TK_MISSION &)
  public void SK_TK_MISSION::SK_TK_MISSION()
  public void ~SK_TK_MISSION()
  public class SK_TK_MISSION & operator=(const class SK_TK_MISSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_POWER {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_POWER::Init()
  public int SK_TK_POWER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_POWER::GetMaxLevel()
  public void SK_TK_POWER(const class SK_TK_POWER &)
  public void SK_TK_POWER::SK_TK_POWER()
  public void ~SK_TK_POWER()
  public class SK_TK_POWER & operator=(const class SK_TK_POWER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_READYCOUNTER {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_READYCOUNTER::Init()
  public int SK_TK_READYCOUNTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_READYCOUNTER::GetMaxLevel()
  public short SK_TK_READYCOUNTER::GetSPCost(short)
  public void SK_TK_READYCOUNTER(const class SK_TK_READYCOUNTER &)
  public void SK_TK_READYCOUNTER::SK_TK_READYCOUNTER()
  public void ~SK_TK_READYCOUNTER()
  public class SK_TK_READYCOUNTER & operator=(const class SK_TK_READYCOUNTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_READYDOWN {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_READYDOWN::Init()
  public int SK_TK_READYDOWN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_READYDOWN::GetMaxLevel()
  public short SK_TK_READYDOWN::GetSPCost(short)
  public void SK_TK_READYDOWN(const class SK_TK_READYDOWN &)
  public void SK_TK_READYDOWN::SK_TK_READYDOWN()
  public void ~SK_TK_READYDOWN()
  public class SK_TK_READYDOWN & operator=(const class SK_TK_READYDOWN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_READYSTORM {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_READYSTORM::Init()
  public int SK_TK_READYSTORM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_READYSTORM::GetMaxLevel()
  public short SK_TK_READYSTORM::GetSPCost(short)
  public void SK_TK_READYSTORM(const class SK_TK_READYSTORM &)
  public void SK_TK_READYSTORM::SK_TK_READYSTORM()
  public void ~SK_TK_READYSTORM()
  public class SK_TK_READYSTORM & operator=(const class SK_TK_READYSTORM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_READYTURN {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_READYTURN::Init()
  public int SK_TK_READYTURN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_READYTURN::GetMaxLevel()
  public short SK_TK_READYTURN::GetSPCost(short)
  public void SK_TK_READYTURN(const class SK_TK_READYTURN &)
  public void SK_TK_READYTURN::SK_TK_READYTURN()
  public void ~SK_TK_READYTURN()
  public class SK_TK_READYTURN & operator=(const class SK_TK_READYTURN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_RUN {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_RUN::Init()
  public int SK_TK_RUN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_RUN::GetSPCost(short)
  public short SK_TK_RUN::GetPreDelayTime(short)
  public void SK_TK_RUN(const class SK_TK_RUN &)
  public void SK_TK_RUN::SK_TK_RUN()
  public void ~SK_TK_RUN()
  public class SK_TK_RUN & operator=(const class SK_TK_RUN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_SEVENWIND {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_SEVENWIND::Init()
  public int SK_TK_SEVENWIND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_SEVENWIND::GetMaxLevel()
  public short SK_TK_SEVENWIND::GetSPCost(short)
  public void SK_TK_SEVENWIND(const class SK_TK_SEVENWIND &)
  public void SK_TK_SEVENWIND::SK_TK_SEVENWIND()
  public void ~SK_TK_SEVENWIND()
  public class SK_TK_SEVENWIND & operator=(const class SK_TK_SEVENWIND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_SPTIME {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_SPTIME::Init()
  public int SK_TK_SPTIME::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_TK_SPTIME(const class SK_TK_SPTIME &)
  public void SK_TK_SPTIME::SK_TK_SPTIME()
  public void ~SK_TK_SPTIME()
  public class SK_TK_SPTIME & operator=(const class SK_TK_SPTIME &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_STORMKICK {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_STORMKICK::Init()
  public int SK_TK_STORMKICK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_STORMKICK::GetMaxLevel()
  public short SK_TK_STORMKICK::GetSPCost(short)
  public void SK_TK_STORMKICK(const class SK_TK_STORMKICK &)
  public void SK_TK_STORMKICK::SK_TK_STORMKICK()
  public void ~SK_TK_STORMKICK()
  public class SK_TK_STORMKICK & operator=(const class SK_TK_STORMKICK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_TK_TURNKICK {
  SK_TAEKWON, offset = 0x0

  public void SK_TK_TURNKICK::Init()
  public int SK_TK_TURNKICK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_TK_TURNKICK::GetMaxLevel()
  public short SK_TK_TURNKICK::GetSPCost(short)
  public void SK_TK_TURNKICK(const class SK_TK_TURNKICK &)
  public void SK_TK_TURNKICK::SK_TK_TURNKICK()
  public void ~SK_TK_TURNKICK()
  public class SK_TK_TURNKICK & operator=(const class SK_TK_TURNKICK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WA_MOONLIT_SERENADE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WA_MOONLIT_SERENADE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WA_MOONLIT_SERENADE::GetEFSTLifeTM(const int)
  public int SK_WA_MOONLIT_SERENADE::GetApplyRadiusRange(const int)
  public int SK_WA_MOONLIT_SERENADE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WA_MOONLIT_SERENADE(const class SK_WA_MOONLIT_SERENADE &)
  public void SK_WA_MOONLIT_SERENADE::SK_WA_MOONLIT_SERENADE()
  public void ~SK_WA_MOONLIT_SERENADE()
  public class SK_WA_MOONLIT_SERENADE & operator=(const class SK_WA_MOONLIT_SERENADE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WA_SWING_DANCE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WA_SWING_DANCE::GetLifeTM(const int)
  public int SK_WA_SWING_DANCE::GetApplyRadiusRange(const int)
  public int SK_WA_SWING_DANCE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WA_SWING_DANCE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WA_SWING_DANCE(const class SK_WA_SWING_DANCE &)
  public void SK_WA_SWING_DANCE::SK_WA_SWING_DANCE()
  public void ~SK_WA_SWING_DANCE()
  public class SK_WA_SWING_DANCE & operator=(const class SK_WA_SWING_DANCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WA_SYMPHONY_OF_LOVER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WA_SYMPHONY_OF_LOVER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WA_SYMPHONY_OF_LOVER::GetLifeTM(const int)
  public int SK_WA_SYMPHONY_OF_LOVER::GetApplyRadiusRange(const int)
  public int SK_WA_SYMPHONY_OF_LOVER::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WA_SYMPHONY_OF_LOVER(const class SK_WA_SYMPHONY_OF_LOVER &)
  public void SK_WA_SYMPHONY_OF_LOVER::SK_WA_SYMPHONY_OF_LOVER()
  public void ~SK_WA_SYMPHONY_OF_LOVER()
  public class SK_WA_SYMPHONY_OF_LOVER & operator=(const class SK_WA_SYMPHONY_OF_LOVER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WE_BABY {
  CSkillTypeInfo, offset = 0x0

  public void SK_WE_BABY::Init()
  public int SK_WE_BABY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WE_BABY::GetMaxLevel()
  public int SK_WE_BABY::IsAvailableJob(short)
  public short SK_WE_BABY::GetSPCost(short)
  public short SK_WE_BABY::GetPreDelayTime(short)
  public void SK_WE_BABY(const class SK_WE_BABY &)
  public void SK_WE_BABY()
  public void ~SK_WE_BABY()
  public class SK_WE_BABY & operator=(const class SK_WE_BABY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WE_CALLBABY {
  CSkillTypeInfo, offset = 0x0

  public void SK_WE_CALLBABY::Init()
  public int SK_WE_CALLBABY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WE_CALLBABY::GetMaxLevel()
  public int SK_WE_CALLBABY::IsAvailableJob(short)
  public short SK_WE_CALLBABY::GetSPCost(short)
  public short SK_WE_CALLBABY::GetPreDelayTime(short)
  public void SK_WE_CALLBABY(const class SK_WE_CALLBABY &)
  public void SK_WE_CALLBABY()
  public void ~SK_WE_CALLBABY()
  public class SK_WE_CALLBABY & operator=(const class SK_WE_CALLBABY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WE_CALLPARENT {
  CSkillTypeInfo, offset = 0x0

  public void SK_WE_CALLPARENT::Init()
  public int SK_WE_CALLPARENT::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WE_CALLPARENT::GetMaxLevel()
  public int SK_WE_CALLPARENT::IsAvailableJob(short)
  public short SK_WE_CALLPARENT::GetSPCost(short)
  public short SK_WE_CALLPARENT::GetPreDelayTime(short)
  public void SK_WE_CALLPARENT(const class SK_WE_CALLPARENT &)
  public void SK_WE_CALLPARENT()
  public void ~SK_WE_CALLPARENT()
  public class SK_WE_CALLPARENT & operator=(const class SK_WE_CALLPARENT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WE_CALLPARTNER {
  CSkillTypeInfo, offset = 0x0

  public void SK_WE_CALLPARTNER::Init()
  public int SK_WE_CALLPARTNER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WE_CALLPARTNER::GetMaxLevel()
  public int SK_WE_CALLPARTNER::IsAvailableJob(short)
  public short SK_WE_CALLPARTNER::GetSPCost(short)
  public short SK_WE_CALLPARTNER::GetPreDelayTime(short)
  public void SK_WE_CALLPARTNER(const class SK_WE_CALLPARTNER &)
  public void SK_WE_CALLPARTNER()
  public void ~SK_WE_CALLPARTNER()
  public class SK_WE_CALLPARTNER & operator=(const class SK_WE_CALLPARTNER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WE_FEMALE {
  CSkillTypeInfo, offset = 0x0

  public void SK_WE_FEMALE::Init()
  public int SK_WE_FEMALE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WE_FEMALE::GetMaxLevel()
  public int SK_WE_FEMALE::IsAvailableJob(short)
  public short SK_WE_FEMALE::GetSPCost(short)
  public short SK_WE_FEMALE::GetPreDelayTime(short)
  public void SK_WE_FEMALE(const class SK_WE_FEMALE &)
  public void SK_WE_FEMALE()
  public void ~SK_WE_FEMALE()
  public class SK_WE_FEMALE & operator=(const class SK_WE_FEMALE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WE_MALE {
  CSkillTypeInfo, offset = 0x0

  public void SK_WE_MALE::Init()
  public int SK_WE_MALE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WE_MALE::GetMaxLevel()
  public int SK_WE_MALE::IsAvailableJob(short)
  public short SK_WE_MALE::GetSPCost(short)
  public short SK_WE_MALE::GetPreDelayTime(short)
  public void SK_WE_MALE(const class SK_WE_MALE &)
  public void SK_WE_MALE()
  public void ~SK_WE_MALE()
  public class SK_WE_MALE & operator=(const class SK_WE_MALE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WHITESMITH {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short GetMaxLevel()
  public int SK_WHITESMITH::IsAvailableJob(short)
  public short SK_WHITESMITH::GetSPCost(short)
  public short SK_WHITESMITH::GetPreDelayTime(short)
  public void SK_WHITESMITH(const class SK_WHITESMITH &)
  public void SK_WHITESMITH::SK_WHITESMITH()
  public void SK_WHITESMITH::~SK_WHITESMITH()
  public class SK_WHITESMITH & operator=(const class SK_WHITESMITH &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WIZARD {
  CSkillTypeInfo, offset = 0x0

  public void Init()
  public short SK_WIZARD::GetMaxLevel()
  public int SK_WIZARD::IsAvailableJob(short)
  public short SK_WIZARD::GetSPCost(short)
  public short SK_WIZARD::GetPreDelayTime(short)
  public void SK_WIZARD(const class SK_WIZARD &)
  public void SK_WIZARD::SK_WIZARD()
  public void SK_WIZARD::~SK_WIZARD()
  public class SK_WIZARD & operator=(const class SK_WIZARD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_CHAINLIGHTNING {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_CHAINLIGHTNING::GetTransitionATKNum(const int)
  public int SK_WL_CHAINLIGHTNING::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_CHAINLIGHTNING(const class SK_WL_CHAINLIGHTNING &)
  public void SK_WL_CHAINLIGHTNING::SK_WL_CHAINLIGHTNING()
  public void ~SK_WL_CHAINLIGHTNING()
  public class SK_WL_CHAINLIGHTNING & operator=(const class SK_WL_CHAINLIGHTNING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_CHAINLIGHTNING_ATK {
  CSkillTypeInfo2, offset = 0x0

  public class CCharacter * SK_WL_CHAINLIGHTNING_ATK::SelectTarget(class CPC *, class CCharacter *)
  public int SK_WL_CHAINLIGHTNING_ATK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_CHAINLIGHTNING_ATK(const class SK_WL_CHAINLIGHTNING_ATK &)
  public void SK_WL_CHAINLIGHTNING_ATK::SK_WL_CHAINLIGHTNING_ATK()
  public void ~SK_WL_CHAINLIGHTNING_ATK()
  public class SK_WL_CHAINLIGHTNING_ATK & operator=(const class SK_WL_CHAINLIGHTNING_ATK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_COMET {
  CSkillTypeInfo2, offset = 0x0

  private int SK_WL_COMET::GetMATKPercentArea1(const int)
  private int SK_WL_COMET::GetMATKPercentArea2(const int)
  private int SK_WL_COMET::GetMATKPercentArea3(const int)
  private int SK_WL_COMET::GetMATKPercentArea4(const int)
  public int SK_WL_COMET::GetMATKPercent(const int, const int)
  public int SK_WL_COMET::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public class CPC * SK_WL_COMET::GetHelper(class CPC *, const int)
  public int SK_WL_COMET::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_COMET(const class SK_WL_COMET &)
  public void SK_WL_COMET::SK_WL_COMET()
  public void ~SK_WL_COMET()
  public class SK_WL_COMET & operator=(const class SK_WL_COMET &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_CRIMSONROCK {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_CRIMSONROCK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_CRIMSONROCK(const class SK_WL_CRIMSONROCK &)
  public void SK_WL_CRIMSONROCK::SK_WL_CRIMSONROCK()
  public void ~SK_WL_CRIMSONROCK()
  public class SK_WL_CRIMSONROCK & operator=(const class SK_WL_CRIMSONROCK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_DRAINLIFE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_DRAINLIFE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_DRAINLIFE(const class SK_WL_DRAINLIFE &)
  public void SK_WL_DRAINLIFE::SK_WL_DRAINLIFE()
  public void ~SK_WL_DRAINLIFE()
  public class SK_WL_DRAINLIFE & operator=(const class SK_WL_DRAINLIFE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_EARTHSTRAIN {
  CSkillTypeInfo2, offset = 0x0

    public void SK_WL_EARTHSTRAIN::Init()
  public int GetRatioSTRIPWEAPONorSTRIPHELM(const int)
  public int SK_WL_EARTHSTRAIN::GetMaxMoveCellCnt(const int)
  public int SK_WL_EARTHSTRAIN::GetContinueAtkCnt(const int)
  public int SK_WL_EARTHSTRAIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WL_EARTHSTRAIN::GetDirection(const class CMyPoint &, const class CMyPoint &)
  public void SK_WL_EARTHSTRAIN(const class SK_WL_EARTHSTRAIN &)
  public void SK_WL_EARTHSTRAIN::SK_WL_EARTHSTRAIN()
  public void ~SK_WL_EARTHSTRAIN()
  public class SK_WL_EARTHSTRAIN & operator=(const class SK_WL_EARTHSTRAIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_FREEZE_SP {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_FREEZE_SP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WL_FREEZE_SP::GetReduceSPper10sec(const int)
  public int SK_WL_FREEZE_SP::GetMaxPreservationPoint(class CPC *, const int)
  public void SK_WL_FREEZE_SP(const class SK_WL_FREEZE_SP &)
  public void SK_WL_FREEZE_SP::SK_WL_FREEZE_SP()
  public void ~SK_WL_FREEZE_SP()
  public class SK_WL_FREEZE_SP & operator=(const class SK_WL_FREEZE_SP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_FROSTMISTY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_FROSTMISTY::GetDamageRange(const int)
  public int SK_WL_FROSTMISTY::GetContinueAtkCnt(const int)
  public static bool SK_WL_FROSTMISTY::OperationSplashAttack(const int, class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG &)
  public int SK_WL_FROSTMISTY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_FROSTMISTY(const class SK_WL_FROSTMISTY &)
  public void SK_WL_FROSTMISTY::SK_WL_FROSTMISTY()
  public void ~SK_WL_FROSTMISTY()
  public class SK_WL_FROSTMISTY & operator=(const class SK_WL_FROSTMISTY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_HELLINFERNO {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_HELLINFERNO::GetBURNNINGSuccessPermil(const int)
  public int SK_WL_HELLINFERNO::GetBURNNINGLifeTM(const int)
  public int SK_WL_HELLINFERNO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_HELLINFERNO(const class SK_WL_HELLINFERNO &)
  public void SK_WL_HELLINFERNO::SK_WL_HELLINFERNO()
  public void ~SK_WL_HELLINFERNO()
  public class SK_WL_HELLINFERNO & operator=(const class SK_WL_HELLINFERNO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_JACKFROST {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_JACKFROST::GetFREEZINGtime(const int)
  public int SK_WL_JACKFROST::GetDamageRange(const int)
  public static bool SK_WL_JACKFROST::OperationSplashAttackCheckup(class CCharacter *, class CCharacter *, struct SKILLATTACK_MSG &, int &)
  public static void SK_WL_JACKFROST::OperationSplashAttackComplete(const int, class CCharacter *, class CCharacter *)
  public int SK_WL_JACKFROST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_JACKFROST(const class SK_WL_JACKFROST &)
  public void SK_WL_JACKFROST::SK_WL_JACKFROST()
  public void ~SK_WL_JACKFROST()
  public class SK_WL_JACKFROST & operator=(const class SK_WL_JACKFROST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_MARSHOFABYSS {
  CSkillTypeInfo2, offset = 0x0

  public static int SK_WL_MARSHOFABYSS::GetMoveSlowPercent(const int)
  public int SK_WL_MARSHOFABYSS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_MARSHOFABYSS(const class SK_WL_MARSHOFABYSS &)
  public void SK_WL_MARSHOFABYSS::SK_WL_MARSHOFABYSS()
  public void ~SK_WL_MARSHOFABYSS()
  public class SK_WL_MARSHOFABYSS & operator=(const class SK_WL_MARSHOFABYSS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_RADIUS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_RADIUS::GetReduceSpellFixedCastingPercent(const int)
  public int SK_WL_RADIUS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WL_RADIUS::GetAddSkillRange(const int)
  public void SK_WL_RADIUS(const class SK_WL_RADIUS &)
  public void SK_WL_RADIUS::SK_WL_RADIUS()
  public void ~SK_WL_RADIUS()
  public class SK_WL_RADIUS & operator=(const class SK_WL_RADIUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_READING_SB {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_READING_SB::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
    public const class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > & GetSpellBookList()
  public bool SK_WL_READING_SB::GetSKIDandPOINT(const int, int &, int &)
  /* this+0xfc */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_SpellBooks

  public void SK_WL_READING_SB(const class SK_WL_READING_SB &)
  public void SK_WL_READING_SB::SK_WL_READING_SB()
  public void ~SK_WL_READING_SB()
  public class SK_WL_READING_SB & operator=(const class SK_WL_READING_SB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_RECOGNIZEDSPELL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_RECOGNIZEDSPELL::GetLiveTime(const int)
  public int SK_WL_RECOGNIZEDSPELL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_RECOGNIZEDSPELL(const class SK_WL_RECOGNIZEDSPELL &)
  public void SK_WL_RECOGNIZEDSPELL::SK_WL_RECOGNIZEDSPELL()
  public void ~SK_WL_RECOGNIZEDSPELL()
  public class SK_WL_RECOGNIZEDSPELL & operator=(const class SK_WL_RECOGNIZEDSPELL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_RELEASE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_RELEASE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_WL_RELEASE::GetEFST(class CCharacter *)
  public int SK_WL_RELEASE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_RELEASE(const class SK_WL_RELEASE &)
  public void SK_WL_RELEASE::SK_WL_RELEASE()
  public void ~SK_WL_RELEASE()
  public class SK_WL_RELEASE & operator=(const class SK_WL_RELEASE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SIENNAEXECRATE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_SIENNAEXECRATE::GetApplyEFSTrange(const int)
  public int SK_WL_SIENNAEXECRATE::GetSTONECURSElifeTM(const int)
  public int SK_WL_SIENNAEXECRATE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WL_SIENNAEXECRATE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WL_SIENNAEXECRATE(const class SK_WL_SIENNAEXECRATE &)
  public void SK_WL_SIENNAEXECRATE::SK_WL_SIENNAEXECRATE()
  public void ~SK_WL_SIENNAEXECRATE()
  public class SK_WL_SIENNAEXECRATE & operator=(const class SK_WL_SIENNAEXECRATE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SOULEXPANSION {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_SOULEXPANSION::GetDamageRange(const int)
  public int SK_WL_SOULEXPANSION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_SOULEXPANSION(const class SK_WL_SOULEXPANSION &)
  public void SK_WL_SOULEXPANSION::SK_WL_SOULEXPANSION()
  public void ~SK_WL_SOULEXPANSION()
  public class SK_WL_SOULEXPANSION & operator=(const class SK_WL_SOULEXPANSION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_STASIS {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_STASIS::GetStaticLifeTimeByLevel(const int)
  public int SK_WL_STASIS::GetApplyRange(const int)
  public int SK_WL_STASIS::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_STASIS(const class SK_WL_STASIS &)
  public void SK_WL_STASIS::SK_WL_STASIS()
  public void ~SK_WL_STASIS()
  public class SK_WL_STASIS & operator=(const class SK_WL_STASIS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SUMMON {
  CSkillTypeInfo2, offset = 0x0

        /* [0x0003:0x000099d8] */ static  int[0x5] m_EFSTList
  public int GetLifeSupportSPCost(const int)
  public int GetLifeTM(const int)
  public static int SK_WL_SUMMON::GetEmptyEFST(class CCharacter *, const int)
  public static int SK_WL_SUMMON::GetMaxSummonNum(const int)
  public int SK_WL_SUMMON::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_WL_SUMMON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_SUMMON(const class SK_WL_SUMMON &)
  public void SK_WL_SUMMON()
  public void SK_WL_SUMMON::~SK_WL_SUMMON()
  public class SK_WL_SUMMON & operator=(const class SK_WL_SUMMON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

union SK_WL_SUMMON::unionEFSTVALUE {
    /* this+0x0 */ struct SK_WL_SUMMON::unionEFSTVALUE::<unnamed-type-element> element

  /* this+0x0 */ int all
    public int GetINT()
  public int GetLevel()
  public int GetATKSkillID()
  public int GetLifeSupportSpCost()
  public int GetProperty()
  public void unionEFSTVALUE(const int)
  public void unionEFSTVALUE(const enum SK_WL_SUMMON::unionEFSTVALUE::Property, const int, const int)
  public int operator int()
}

struct SK_WL_SUMMON::unionEFSTVALUE::<unnamed-type-element> {
  /* this(bf)+0x0:0x0 len(0x2) */ unsigned int Property
  /* this(bf)+0x0:0x2 len(0x4) */ unsigned int Level
  /* this(bf)+0x0:0x6 len(0x4) */ unsigned int LifeSupportSpCost
  /* this(bf)+0x0:0xa len(0x16) */ unsigned int unused
}

class SK_WL_SUMMONBL {
  SK_WL_SUMMON, offset = 0x0

  public int SK_WL_SUMMONBL::GetLifeSupportSPCost(const int)
  public int SK_WL_SUMMONBL::GetLifeTM(const int)
  public void SK_WL_SUMMONBL(const class SK_WL_SUMMONBL &)
  public void SK_WL_SUMMONBL::SK_WL_SUMMONBL()
  public void ~SK_WL_SUMMONBL()
  public class SK_WL_SUMMONBL & operator=(const class SK_WL_SUMMONBL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SUMMONFB {
  SK_WL_SUMMON, offset = 0x0

  public int SK_WL_SUMMONFB::GetLifeSupportSPCost(const int)
  public int SK_WL_SUMMONFB::GetLifeTM(const int)
  public void SK_WL_SUMMONFB(const class SK_WL_SUMMONFB &)
  public void SK_WL_SUMMONFB::SK_WL_SUMMONFB()
  public void ~SK_WL_SUMMONFB()
  public class SK_WL_SUMMONFB & operator=(const class SK_WL_SUMMONFB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SUMMONSTONE {
  SK_WL_SUMMON, offset = 0x0

  public int SK_WL_SUMMONSTONE::GetLifeSupportSPCost(const int)
  public int SK_WL_SUMMONSTONE::GetLifeTM(const int)
  public void SK_WL_SUMMONSTONE(const class SK_WL_SUMMONSTONE &)
  public void SK_WL_SUMMONSTONE::SK_WL_SUMMONSTONE()
  public void ~SK_WL_SUMMONSTONE()
  public class SK_WL_SUMMONSTONE & operator=(const class SK_WL_SUMMONSTONE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SUMMONWB {
  SK_WL_SUMMON, offset = 0x0

  public int SK_WL_SUMMONWB::GetLifeSupportSPCost(const int)
  public int SK_WL_SUMMONWB::GetLifeTM(const int)
  public void SK_WL_SUMMONWB(const class SK_WL_SUMMONWB &)
  public void SK_WL_SUMMONWB::SK_WL_SUMMONWB()
  public void ~SK_WL_SUMMONWB()
  public class SK_WL_SUMMONWB & operator=(const class SK_WL_SUMMONWB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SUMMON_ATK_FIRE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_SUMMON_ATK_FIRE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_SUMMON_ATK_FIRE(const class SK_WL_SUMMON_ATK_FIRE &)
  public void SK_WL_SUMMON_ATK_FIRE::SK_WL_SUMMON_ATK_FIRE()
  public void ~SK_WL_SUMMON_ATK_FIRE()
  public class SK_WL_SUMMON_ATK_FIRE & operator=(const class SK_WL_SUMMON_ATK_FIRE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SUMMON_ATK_GROUND {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_SUMMON_ATK_GROUND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_SUMMON_ATK_GROUND(const class SK_WL_SUMMON_ATK_GROUND &)
  public void SK_WL_SUMMON_ATK_GROUND::SK_WL_SUMMON_ATK_GROUND()
  public void ~SK_WL_SUMMON_ATK_GROUND()
  public class SK_WL_SUMMON_ATK_GROUND & operator=(const class SK_WL_SUMMON_ATK_GROUND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SUMMON_ATK_WATER {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_SUMMON_ATK_WATER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_SUMMON_ATK_WATER(const class SK_WL_SUMMON_ATK_WATER &)
  public void SK_WL_SUMMON_ATK_WATER::SK_WL_SUMMON_ATK_WATER()
  public void ~SK_WL_SUMMON_ATK_WATER()
  public class SK_WL_SUMMON_ATK_WATER & operator=(const class SK_WL_SUMMON_ATK_WATER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_SUMMON_ATK_WIND {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_SUMMON_ATK_WIND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WL_SUMMON_ATK_WIND(const class SK_WL_SUMMON_ATK_WIND &)
  public void SK_WL_SUMMON_ATK_WIND::SK_WL_SUMMON_ATK_WIND()
  public void ~SK_WL_SUMMON_ATK_WIND()
  public class SK_WL_SUMMON_ATK_WIND & operator=(const class SK_WL_SUMMON_ATK_WIND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_TETRAVORTEX {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WL_TETRAVORTEX::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WL_TETRAVORTEX::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WL_TETRAVORTEX(const class SK_WL_TETRAVORTEX &)
  public void SK_WL_TETRAVORTEX::SK_WL_TETRAVORTEX()
  public void ~SK_WL_TETRAVORTEX()
  public class SK_WL_TETRAVORTEX & operator=(const class SK_WL_TETRAVORTEX &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WL_WHITEIMPRISON {
  CSkillTypeInfo2, offset = 0x0

  public int GetSpellPercent(const int)
  public int SK_WL_WHITEIMPRISON::GetLifeTM_when_targetISplayer_and_exclusionOneself(const int)
  public int SK_WL_WHITEIMPRISON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public static int SK_WL_WHITEIMPRISON::ModifyDamageATKED(class CCharacter *, class CCharacter *, int &, const int)
  public static void SK_WL_WHITEIMPRISON::TimeOutProc_BODYSTATE_IMPRISON(class CCharacter *, class CCharacter *)
  public int SK_WL_WHITEIMPRISON::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WL_WHITEIMPRISON(const class SK_WL_WHITEIMPRISON &)
  public void SK_WL_WHITEIMPRISON::SK_WL_WHITEIMPRISON()
  public void ~SK_WL_WHITEIMPRISON()
  public class SK_WL_WHITEIMPRISON & operator=(const class SK_WL_WHITEIMPRISON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_BEYOND_OF_WARCRY {
  SK_WM_CHORUS, offset = 0x0

  public int SK_WM_BEYOND_OF_WARCRY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public struct std::pair<bool,int> SK_WM_BEYOND_OF_WARCRY::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public int SK_WM_BEYOND_OF_WARCRY::GetLifeTM(const int)
  public int SK_WM_BEYOND_OF_WARCRY::GetApplyRadiusRange(const int)
  public int SK_WM_BEYOND_OF_WARCRY::GetSuccessPercent(const int)
  public void SK_WM_BEYOND_OF_WARCRY(const class SK_WM_BEYOND_OF_WARCRY &)
  public void SK_WM_BEYOND_OF_WARCRY::SK_WM_BEYOND_OF_WARCRY()
  public void ~SK_WM_BEYOND_OF_WARCRY()
  public class SK_WM_BEYOND_OF_WARCRY & operator=(const class SK_WM_BEYOND_OF_WARCRY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_CHORUS {
  CSkillTypeInfo2, offset = 0x0

    public int SK_WM_CHORUS::GetChorusMember(class CPC *, class std::vector<CPC *,std::allocator<CPC *> > &)
  public void SK_WM_CHORUS::ReduceSPamount(const int, const class std::vector<CPC *,std::allocator<CPC *> > &)
  protected struct std::pair<bool,int> SK_WM_CHORUS::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public void SK_WM_CHORUS(const class SK_WM_CHORUS &)
  public void SK_WM_CHORUS::SK_WM_CHORUS()
  public void SK_WM_CHORUS::~SK_WM_CHORUS()
  public class SK_WM_CHORUS & operator=(const class SK_WM_CHORUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_DANCE_WITH_WUG {
  SK_WM_CHORUS, offset = 0x0

  public int SK_WM_DANCE_WITH_WUG::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public struct std::pair<bool,int> SK_WM_DANCE_WITH_WUG::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public int SK_WM_DANCE_WITH_WUG::GetEFSTLifeTM(const int)
  public int SK_WM_DANCE_WITH_WUG::GetApplyRadiusRange(const int)
  public void SK_WM_DANCE_WITH_WUG(const class SK_WM_DANCE_WITH_WUG &)
  public void SK_WM_DANCE_WITH_WUG::SK_WM_DANCE_WITH_WUG()
  public void ~SK_WM_DANCE_WITH_WUG()
  public class SK_WM_DANCE_WITH_WUG & operator=(const class SK_WM_DANCE_WITH_WUG &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_DEADHILLHERE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_DEADHILLHERE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_DEADHILLHERE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_WM_DEADHILLHERE::GetSuccessPercent(const int)
  public int SK_WM_DEADHILLHERE::GetTargetReduceSPpercent(const int)
  public void SK_WM_DEADHILLHERE(const class SK_WM_DEADHILLHERE &)
  public void SK_WM_DEADHILLHERE::SK_WM_DEADHILLHERE()
  public void ~SK_WM_DEADHILLHERE()
  public class SK_WM_DEADHILLHERE & operator=(const class SK_WM_DEADHILLHERE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_DOMINION_IMPULSE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_DOMINION_IMPULSE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_DOMINION_IMPULSE::GetApplyRange(const int)
  public void SK_WM_DOMINION_IMPULSE(const class SK_WM_DOMINION_IMPULSE &)
  public void SK_WM_DOMINION_IMPULSE::SK_WM_DOMINION_IMPULSE()
  public void ~SK_WM_DOMINION_IMPULSE()
  public class SK_WM_DOMINION_IMPULSE & operator=(const class SK_WM_DOMINION_IMPULSE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_GLOOMYDAY {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_GLOOMYDAY::GetReduceAvoidanceAmount(const int)
  public int SK_WM_GLOOMYDAY::GetReduceASPDpercent(const int)
  public int SK_WM_GLOOMYDAY::GetEFSTLifeTM(const int)
  public int SK_WM_GLOOMYDAY::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_GLOOMYDAY::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WM_GLOOMYDAY(const class SK_WM_GLOOMYDAY &)
  public void SK_WM_GLOOMYDAY::SK_WM_GLOOMYDAY()
  public void ~SK_WM_GLOOMYDAY()
  public class SK_WM_GLOOMYDAY & operator=(const class SK_WM_GLOOMYDAY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_GREAT_ECHO {
  SK_WM_CHORUS, offset = 0x0

  public void SK_WM_GREAT_ECHO::Init()
  public int SK_WM_GREAT_ECHO::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public struct std::pair<bool,int> SK_WM_GREAT_ECHO::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public int SK_WM_GREAT_ECHO::GetApplyRadiusRange(const int)
  public void SK_WM_GREAT_ECHO(const class SK_WM_GREAT_ECHO &)
  public void SK_WM_GREAT_ECHO::SK_WM_GREAT_ECHO()
  public void ~SK_WM_GREAT_ECHO()
  public class SK_WM_GREAT_ECHO & operator=(const class SK_WM_GREAT_ECHO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_LERADS_DEW {
  SK_WM_CHORUS, offset = 0x0

  public int SK_WM_LERADS_DEW::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public struct std::pair<bool,int> SK_WM_LERADS_DEW::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public int SK_WM_LERADS_DEW::GetLifeTM(const int)
  public int SK_WM_LERADS_DEW::GetApplyRadiusRange(const int)
  public int SK_WM_LERADS_DEW::GetPlusMHPamount(const int)
  public void SK_WM_LERADS_DEW(const class SK_WM_LERADS_DEW &)
  public void SK_WM_LERADS_DEW::SK_WM_LERADS_DEW()
  public void ~SK_WM_LERADS_DEW()
  public class SK_WM_LERADS_DEW & operator=(const class SK_WM_LERADS_DEW &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_LESSON {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_LESSON::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_LESSON::GetIncMSPamount(const int)
  public void SK_WM_LESSON(const class SK_WM_LESSON &)
  public void SK_WM_LESSON::SK_WM_LESSON()
  public void ~SK_WM_LESSON()
  public class SK_WM_LESSON & operator=(const class SK_WM_LESSON &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_LULLABY_DEEPSLEEP {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_LULLABY_DEEPSLEEP::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_LULLABY_DEEPSLEEP::GetApplyEFSTRadiusRange(const int)
  public int SK_WM_LULLABY_DEEPSLEEP::GetEFSTLifeTM(const int)
  public int SK_WM_LULLABY_DEEPSLEEP::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WM_LULLABY_DEEPSLEEP(const class SK_WM_LULLABY_DEEPSLEEP &)
  public void SK_WM_LULLABY_DEEPSLEEP::SK_WM_LULLABY_DEEPSLEEP()
  public void ~SK_WM_LULLABY_DEEPSLEEP()
  public class SK_WM_LULLABY_DEEPSLEEP & operator=(const class SK_WM_LULLABY_DEEPSLEEP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_MELODYOFSINK {
  SK_WM_CHORUS, offset = 0x0

  public int SK_WM_MELODYOFSINK::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public struct std::pair<bool,int> SK_WM_MELODYOFSINK::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public int SK_WM_MELODYOFSINK::GetLifeTM(const int)
  public int SK_WM_MELODYOFSINK::GetApplyRadiusRange(const int)
  public int SK_WM_MELODYOFSINK::GetSuccessPercent(const int)
  public void SK_WM_MELODYOFSINK(const class SK_WM_MELODYOFSINK &)
  public void SK_WM_MELODYOFSINK::SK_WM_MELODYOFSINK()
  public void ~SK_WM_MELODYOFSINK()
  public class SK_WM_MELODYOFSINK & operator=(const class SK_WM_MELODYOFSINK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_METALICSOUND {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_METALICSOUND::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_METALICSOUND::GetATKCnt(const int)
  public void SK_WM_METALICSOUND(const class SK_WM_METALICSOUND &)
  public void SK_WM_METALICSOUND::SK_WM_METALICSOUND()
  public void ~SK_WM_METALICSOUND()
  public class SK_WM_METALICSOUND & operator=(const class SK_WM_METALICSOUND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_POEMOFNETHERWORLD {
  CSkillTypeInfo2, offset = 0x0

    public void SK_WM_POEMOFNETHERWORLD::Init()
  public int SK_WM_POEMOFNETHERWORLD::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_POEMOFNETHERWORLD::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public int SK_WM_POEMOFNETHERWORLD::GetLifeTime(const int)
  public int SK_WM_POEMOFNETHERWORLD::GetEFSTLifeTime(const int)
  public void SK_WM_POEMOFNETHERWORLD(const class SK_WM_POEMOFNETHERWORLD &)
  public void SK_WM_POEMOFNETHERWORLD::SK_WM_POEMOFNETHERWORLD()
  public void ~SK_WM_POEMOFNETHERWORLD()
  public class SK_WM_POEMOFNETHERWORLD & operator=(const class SK_WM_POEMOFNETHERWORLD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_RANDOMIZESPELL {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_RANDOMIZESPELL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_RANDOMIZESPELL::GetRandomSKID()
  public int SK_WM_RANDOMIZESPELL::GetRandomSKspellLevel(const int)
  public void SK_WM_RANDOMIZESPELL(const class SK_WM_RANDOMIZESPELL &)
  public void SK_WM_RANDOMIZESPELL::SK_WM_RANDOMIZESPELL()
  public void ~SK_WM_RANDOMIZESPELL()
  public class SK_WM_RANDOMIZESPELL & operator=(const class SK_WM_RANDOMIZESPELL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_REVERBERATION {
  CSkillTypeInfo2, offset = 0x0

  public void SK_WM_REVERBERATION::Init()
  public int SK_WM_REVERBERATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public static void SK_WM_REVERBERATION::OperationWM_REVERBERATION(class CPC *, const unsigned int)
  public int SK_WM_REVERBERATION::GetLifeTime(const int)
  public int GetMeleeAtkPercent(const int)
  public int GetMagicAtkPercent(const int)
  public void SK_WM_REVERBERATION(const class SK_WM_REVERBERATION &)
  public void SK_WM_REVERBERATION::SK_WM_REVERBERATION()
  public void ~SK_WM_REVERBERATION()
  public class SK_WM_REVERBERATION & operator=(const class SK_WM_REVERBERATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_REVERBERATION_MAGIC {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_REVERBERATION_MAGIC::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WM_REVERBERATION_MAGIC(const class SK_WM_REVERBERATION_MAGIC &)
  public void SK_WM_REVERBERATION_MAGIC::SK_WM_REVERBERATION_MAGIC()
  public void ~SK_WM_REVERBERATION_MAGIC()
  public class SK_WM_REVERBERATION_MAGIC & operator=(const class SK_WM_REVERBERATION_MAGIC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_REVERBERATION_MELEE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_REVERBERATION_MELEE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WM_REVERBERATION_MELEE(const class SK_WM_REVERBERATION_MELEE &)
  public void SK_WM_REVERBERATION_MELEE::SK_WM_REVERBERATION_MELEE()
  public void ~SK_WM_REVERBERATION_MELEE()
  public class SK_WM_REVERBERATION_MELEE & operator=(const class SK_WM_REVERBERATION_MELEE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_SATURDAY_NIGHT_FEVER {
  SK_WM_CHORUS, offset = 0x0

  public int SK_WM_SATURDAY_NIGHT_FEVER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public struct std::pair<bool,int> SK_WM_SATURDAY_NIGHT_FEVER::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public int SK_WM_SATURDAY_NIGHT_FEVER::GetEFSTLifeTM(const int)
  public int SK_WM_SATURDAY_NIGHT_FEVER::GetApplyRadiusRange(const int)
  public void SK_WM_SATURDAY_NIGHT_FEVER(const class SK_WM_SATURDAY_NIGHT_FEVER &)
  public void SK_WM_SATURDAY_NIGHT_FEVER::SK_WM_SATURDAY_NIGHT_FEVER()
  public void ~SK_WM_SATURDAY_NIGHT_FEVER()
  public class SK_WM_SATURDAY_NIGHT_FEVER & operator=(const class SK_WM_SATURDAY_NIGHT_FEVER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_SEVERE_RAINSTORM {
  CSkillTypeInfo2, offset = 0x0

    public void SK_WM_SEVERE_RAINSTORM::Init()
  public int SK_WM_SEVERE_RAINSTORM::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_SEVERE_RAINSTORM::GetTotalAtkCnt(const int)
  public int SK_WM_SEVERE_RAINSTORM::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WM_SEVERE_RAINSTORM(const class SK_WM_SEVERE_RAINSTORM &)
  public void SK_WM_SEVERE_RAINSTORM::SK_WM_SEVERE_RAINSTORM()
  public void ~SK_WM_SEVERE_RAINSTORM()
  public class SK_WM_SEVERE_RAINSTORM & operator=(const class SK_WM_SEVERE_RAINSTORM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_SEVERE_RAINSTORM_MELEE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_SEVERE_RAINSTORM_MELEE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public void SK_WM_SEVERE_RAINSTORM_MELEE(const class SK_WM_SEVERE_RAINSTORM_MELEE &)
  public void SK_WM_SEVERE_RAINSTORM_MELEE::SK_WM_SEVERE_RAINSTORM_MELEE()
  public void ~SK_WM_SEVERE_RAINSTORM_MELEE()
  public class SK_WM_SEVERE_RAINSTORM_MELEE & operator=(const class SK_WM_SEVERE_RAINSTORM_MELEE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_SIRCLEOFNATURE {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_SIRCLEOFNATURE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_SIRCLEOFNATURE::GetEFSTLifeTM(const int)
  public int SK_WM_SIRCLEOFNATURE::GetReduceSPamountPerSecond(const int)
  public int SK_WM_SIRCLEOFNATURE::GetRecoveryHPamountPerSecond(const int)
  public int SK_WM_SIRCLEOFNATURE::GetApplyRadiusRange(const int)
  public int SK_WM_SIRCLEOFNATURE::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WM_SIRCLEOFNATURE(const class SK_WM_SIRCLEOFNATURE &)
  public void SK_WM_SIRCLEOFNATURE::SK_WM_SIRCLEOFNATURE()
  public void ~SK_WM_SIRCLEOFNATURE()
  public class SK_WM_SIRCLEOFNATURE & operator=(const class SK_WM_SIRCLEOFNATURE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_SONG_OF_MANA {
  SK_WM_CHORUS, offset = 0x0

  public int SK_WM_SONG_OF_MANA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public struct std::pair<bool,int> SK_WM_SONG_OF_MANA::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public int SK_WM_SONG_OF_MANA::GetEFSTLifeTM(const int)
  public int SK_WM_SONG_OF_MANA::GetApplyRadiusRange(const int)
  public void SK_WM_SONG_OF_MANA(const class SK_WM_SONG_OF_MANA &)
  public void SK_WM_SONG_OF_MANA::SK_WM_SONG_OF_MANA()
  public void ~SK_WM_SONG_OF_MANA()
  public class SK_WM_SONG_OF_MANA & operator=(const class SK_WM_SONG_OF_MANA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_SOUND_OF_DESTRUCTION {
  SK_WM_CHORUS, offset = 0x0

  public void SK_WM_SOUND_OF_DESTRUCTION::Init()
  public int SK_WM_SOUND_OF_DESTRUCTION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public struct std::pair<bool,int> SK_WM_SOUND_OF_DESTRUCTION::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public int SK_WM_SOUND_OF_DESTRUCTION::GetApplyRadiusRange(const int)
  public void SK_WM_SOUND_OF_DESTRUCTION(const class SK_WM_SOUND_OF_DESTRUCTION &)
  public void SK_WM_SOUND_OF_DESTRUCTION::SK_WM_SOUND_OF_DESTRUCTION()
  public void ~SK_WM_SOUND_OF_DESTRUCTION()
  public class SK_WM_SOUND_OF_DESTRUCTION & operator=(const class SK_WM_SOUND_OF_DESTRUCTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_UNLIMITED_HUMMING_VOICE {
  SK_WM_CHORUS, offset = 0x0

  public int SK_WM_UNLIMITED_HUMMING_VOICE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public struct std::pair<bool,int> SK_WM_UNLIMITED_HUMMING_VOICE::IsSpellConditionGratify2nd(class CCharacter *, class CCharacter *, const int, const int)
  public int SK_WM_UNLIMITED_HUMMING_VOICE::GetLifeTM(const int)
  public int SK_WM_UNLIMITED_HUMMING_VOICE::GetApplyRadiusRange(const int)
  public void SK_WM_UNLIMITED_HUMMING_VOICE(const class SK_WM_UNLIMITED_HUMMING_VOICE &)
  public void SK_WM_UNLIMITED_HUMMING_VOICE::SK_WM_UNLIMITED_HUMMING_VOICE()
  public void ~SK_WM_UNLIMITED_HUMMING_VOICE()
  public class SK_WM_UNLIMITED_HUMMING_VOICE & operator=(const class SK_WM_UNLIMITED_HUMMING_VOICE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WM_VOICEOFSIREN {
  CSkillTypeInfo2, offset = 0x0

  public int SK_WM_VOICEOFSIREN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public int SK_WM_VOICEOFSIREN::GetApplyEFSTRadiusRange(const int)
  public int SK_WM_VOICEOFSIREN::GetEFSTLifeTM(const int)
  public int SK_WM_VOICEOFSIREN::IsSpellConditionGratify(class CCharacter *, class CCharacter *, const int, int &)
  public void SK_WM_VOICEOFSIREN(const class SK_WM_VOICEOFSIREN &)
  public void SK_WM_VOICEOFSIREN::SK_WM_VOICEOFSIREN()
  public void ~SK_WM_VOICEOFSIREN()
  public class SK_WM_VOICEOFSIREN & operator=(const class SK_WM_VOICEOFSIREN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WS_CARTBOOST {
  SK_WHITESMITH, offset = 0x0

  public void SK_WS_CARTBOOST::Init()
  public int SK_WS_CARTBOOST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WS_CARTBOOST::GetMaxLevel()
  public short SK_WS_CARTBOOST::GetSPCost(short)
  public void SK_WS_CARTBOOST(const class SK_WS_CARTBOOST &)
  public void SK_WS_CARTBOOST::SK_WS_CARTBOOST()
  public void ~SK_WS_CARTBOOST()
  public class SK_WS_CARTBOOST & operator=(const class SK_WS_CARTBOOST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WS_CARTTERMINATION {
  SK_WHITESMITH, offset = 0x0

  public void SK_WS_CARTTERMINATION::Init()
  public int SK_WS_CARTTERMINATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WS_CARTTERMINATION::GetMaxLevel()
  public short SK_WS_CARTTERMINATION::GetSPCost(short)
  public void SK_WS_CARTTERMINATION(const class SK_WS_CARTTERMINATION &)
  public void SK_WS_CARTTERMINATION::SK_WS_CARTTERMINATION()
  public void ~SK_WS_CARTTERMINATION()
  public class SK_WS_CARTTERMINATION & operator=(const class SK_WS_CARTTERMINATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WS_CREATECOIN {
  SK_WHITESMITH, offset = 0x0

  public void SK_WS_CREATECOIN::Init()
  public int SK_WS_CREATECOIN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WS_CREATECOIN::GetMaxLevel()
  public short SK_WS_CREATECOIN::GetSPCost(short)
  public short SK_WS_CREATECOIN::GetPreDelayTime(short)
  public void SK_WS_CREATECOIN(const class SK_WS_CREATECOIN &)
  public void SK_WS_CREATECOIN::SK_WS_CREATECOIN()
  public void ~SK_WS_CREATECOIN()
  public class SK_WS_CREATECOIN & operator=(const class SK_WS_CREATECOIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WS_CREATENUGGET {
  SK_WHITESMITH, offset = 0x0

  public void SK_WS_CREATENUGGET::Init()
  public int SK_WS_CREATENUGGET::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WS_CREATENUGGET::GetMaxLevel()
  public short SK_WS_CREATENUGGET::GetSPCost(short)
  public short SK_WS_CREATENUGGET::GetPreDelayTime(short)
  public void SK_WS_CREATENUGGET(const class SK_WS_CREATENUGGET &)
  public void SK_WS_CREATENUGGET::SK_WS_CREATENUGGET()
  public void ~SK_WS_CREATENUGGET()
  public class SK_WS_CREATENUGGET & operator=(const class SK_WS_CREATENUGGET &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WS_MELTDOWN {
  SK_WHITESMITH, offset = 0x0

  public void SK_WS_MELTDOWN::Init()
  public int SK_WS_MELTDOWN::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WS_MELTDOWN::GetMaxLevel()
  public short SK_WS_MELTDOWN::GetSPCost(short)
  public short SK_WS_MELTDOWN::GetPreDelayTime(short)
  public void SK_WS_MELTDOWN(const class SK_WS_MELTDOWN &)
  public void SK_WS_MELTDOWN::SK_WS_MELTDOWN()
  public void ~SK_WS_MELTDOWN()
  public class SK_WS_MELTDOWN & operator=(const class SK_WS_MELTDOWN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WS_OVERTHRUSTMAX {
  SK_WHITESMITH, offset = 0x0

  public void SK_WS_OVERTHRUSTMAX::Init()
  public int SK_WS_OVERTHRUSTMAX::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WS_OVERTHRUSTMAX::GetMaxLevel()
  public short SK_WS_OVERTHRUSTMAX::GetSPCost(short)
  public void SK_WS_OVERTHRUSTMAX(const class SK_WS_OVERTHRUSTMAX &)
  public void SK_WS_OVERTHRUSTMAX::SK_WS_OVERTHRUSTMAX()
  public void ~SK_WS_OVERTHRUSTMAX()
  public class SK_WS_OVERTHRUSTMAX & operator=(const class SK_WS_OVERTHRUSTMAX &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WS_SYSTEMCREATE {
  SK_WHITESMITH, offset = 0x0

  public void SK_WS_SYSTEMCREATE::Init()
  public int SK_WS_SYSTEMCREATE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WS_SYSTEMCREATE::GetMaxLevel()
  public short SK_WS_SYSTEMCREATE::GetSPCost(short)
  public void SK_WS_SYSTEMCREATE(const class SK_WS_SYSTEMCREATE &)
  public void SK_WS_SYSTEMCREATE::SK_WS_SYSTEMCREATE()
  public void ~SK_WS_SYSTEMCREATE()
  public class SK_WS_SYSTEMCREATE & operator=(const class SK_WS_SYSTEMCREATE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WS_WEAPONREFINE {
  SK_WHITESMITH, offset = 0x0

  public void SK_WS_WEAPONREFINE::Init()
  public int SK_WS_WEAPONREFINE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WS_WEAPONREFINE::GetMaxLevel()
  public short SK_WS_WEAPONREFINE::GetSPCost(short)
  public void SK_WS_WEAPONREFINE(const class SK_WS_WEAPONREFINE &)
  public void SK_WS_WEAPONREFINE::SK_WS_WEAPONREFINE()
  public void ~SK_WS_WEAPONREFINE()
  public class SK_WS_WEAPONREFINE & operator=(const class SK_WS_WEAPONREFINE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_EARTHSPIKE {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_EARTHSPIKE::Init()
  public int SK_WZ_EARTHSPIKE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_EARTHSPIKE::GetMaxLevel()
  public int SK_WZ_EARTHSPIKE::IsAvailableJob(short)
  public short SK_WZ_EARTHSPIKE::GetSPCost(short)
  public short SK_WZ_EARTHSPIKE::GetPreDelayTime(short)
  public void SK_WZ_EARTHSPIKE(const class SK_WZ_EARTHSPIKE &)
  public void SK_WZ_EARTHSPIKE()
  public void ~SK_WZ_EARTHSPIKE()
  public class SK_WZ_EARTHSPIKE & operator=(const class SK_WZ_EARTHSPIKE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_ESTIMATION {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_ESTIMATION::Init()
  public int SK_WZ_ESTIMATION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_ESTIMATION::GetMaxLevel()
  public int SK_WZ_ESTIMATION::IsAvailableJob(short)
  public short SK_WZ_ESTIMATION::GetSPCost(short)
  public void SK_WZ_ESTIMATION(const class SK_WZ_ESTIMATION &)
  public void SK_WZ_ESTIMATION::SK_WZ_ESTIMATION()
  public void SK_WZ_ESTIMATION::~SK_WZ_ESTIMATION()
  public class SK_WZ_ESTIMATION & operator=(const class SK_WZ_ESTIMATION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_FIREPILLAR {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_FIREPILLAR::Init()
  public int SK_WZ_FIREPILLAR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_FIREPILLAR::GetSPCost(short)
  public short SK_WZ_FIREPILLAR::GetPostDelayTM(short)
  public short SK_WZ_FIREPILLAR::GetPreDelayTime(short)
  public void SK_WZ_FIREPILLAR(const class SK_WZ_FIREPILLAR &)
  public void SK_WZ_FIREPILLAR()
  public void ~SK_WZ_FIREPILLAR()
  public class SK_WZ_FIREPILLAR & operator=(const class SK_WZ_FIREPILLAR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_FROSTNOVA {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_FROSTNOVA::Init()
  public int SK_WZ_FROSTNOVA::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_FROSTNOVA::GetSPCost(short)
  public short SK_WZ_FROSTNOVA::GetPreDelayTime(short)
  public void SK_WZ_FROSTNOVA(const class SK_WZ_FROSTNOVA &)
  public void SK_WZ_FROSTNOVA()
  public void ~SK_WZ_FROSTNOVA()
  public class SK_WZ_FROSTNOVA & operator=(const class SK_WZ_FROSTNOVA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_HEAVENDRIVE {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_HEAVENDRIVE::Init()
  public int SK_WZ_HEAVENDRIVE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_HEAVENDRIVE::GetMaxLevel()
  public int SK_WZ_HEAVENDRIVE::IsAvailableJob(short)
  public short SK_WZ_HEAVENDRIVE::GetSPCost(short)
  public short SK_WZ_HEAVENDRIVE::GetPreDelayTime(short)
  public short SK_WZ_HEAVENDRIVE::GetPostDelayTM(short)
  public void SK_WZ_HEAVENDRIVE(const class SK_WZ_HEAVENDRIVE &)
  public void SK_WZ_HEAVENDRIVE()
  public void ~SK_WZ_HEAVENDRIVE()
  public class SK_WZ_HEAVENDRIVE & operator=(const class SK_WZ_HEAVENDRIVE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_ICEWALL {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_ICEWALL::Init()
  public int SK_WZ_ICEWALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_ICEWALL::GetSPCost(short)
  public void SK_WZ_ICEWALL(const class SK_WZ_ICEWALL &)
  public void SK_WZ_ICEWALL()
  public void ~SK_WZ_ICEWALL()
  public class SK_WZ_ICEWALL & operator=(const class SK_WZ_ICEWALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_JUPITEL {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_JUPITEL::Init()
  public int SK_WZ_JUPITEL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_JUPITEL::GetSPCost(short)
  public short SK_WZ_JUPITEL::GetPreDelayTime(short)
  public void SK_WZ_JUPITEL(const class SK_WZ_JUPITEL &)
  public void SK_WZ_JUPITEL()
  public void ~SK_WZ_JUPITEL()
  public class SK_WZ_JUPITEL & operator=(const class SK_WZ_JUPITEL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_METEOR {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_METEOR::Init()
  public int SK_WZ_METEOR::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_METEOR::GetSPCost(short)
  public short SK_WZ_METEOR::GetPreDelayTime(short)
  public short SK_WZ_METEOR::GetPostDelayTM(short)
  public void SK_WZ_METEOR(const class SK_WZ_METEOR &)
  public void SK_WZ_METEOR()
  public void ~SK_WZ_METEOR()
  public class SK_WZ_METEOR & operator=(const class SK_WZ_METEOR &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_QUAGMIRE {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_QUAGMIRE::Init()
  public int SK_WZ_QUAGMIRE::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_QUAGMIRE::GetMaxLevel()
  public short SK_WZ_QUAGMIRE::GetSPCost(short)
  public short SK_WZ_QUAGMIRE::GetPostDelayTM(short)
  public void SK_WZ_QUAGMIRE(const class SK_WZ_QUAGMIRE &)
  public void SK_WZ_QUAGMIRE()
  public void ~SK_WZ_QUAGMIRE()
  public class SK_WZ_QUAGMIRE & operator=(const class SK_WZ_QUAGMIRE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_SIGHTBLASTER {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_SIGHTBLASTER::Init()
  public int SK_WZ_SIGHTBLASTER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_SIGHTBLASTER::GetMaxLevel()
  public short SK_WZ_SIGHTBLASTER::GetSPCost(short)
  public short SK_WZ_SIGHTBLASTER::GetPreDelayTime(short)
  public void SK_WZ_SIGHTBLASTER(const class SK_WZ_SIGHTBLASTER &)
  public void SK_WZ_SIGHTBLASTER()
  public void ~SK_WZ_SIGHTBLASTER()
  public class SK_WZ_SIGHTBLASTER & operator=(const class SK_WZ_SIGHTBLASTER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_SIGHTRASHER {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_SIGHTRASHER::Init()
  public int SK_WZ_SIGHTRASHER::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_SIGHTRASHER::GetSPCost(short)
  public short SK_WZ_SIGHTRASHER::GetPreDelayTime(short)
  public void SK_WZ_SIGHTRASHER(const class SK_WZ_SIGHTRASHER &)
  public void SK_WZ_SIGHTRASHER()
  public void ~SK_WZ_SIGHTRASHER()
  public class SK_WZ_SIGHTRASHER & operator=(const class SK_WZ_SIGHTRASHER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_STORMGUST {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_STORMGUST::Init()
  public int SK_WZ_STORMGUST::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_STORMGUST::GetSPCost(short)
  public short SK_WZ_STORMGUST::GetPreDelayTime(short)
  public short SK_WZ_STORMGUST::GetPostDelayTM(short)
  public void SK_WZ_STORMGUST(const class SK_WZ_STORMGUST &)
  public void SK_WZ_STORMGUST()
  public void ~SK_WZ_STORMGUST()
  public class SK_WZ_STORMGUST & operator=(const class SK_WZ_STORMGUST &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_VERMILION {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_VERMILION::Init()
  public int SK_WZ_VERMILION::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_VERMILION::GetSPCost(short)
  public short SK_WZ_VERMILION::GetPreDelayTime(short)
  public short SK_WZ_VERMILION::GetPostDelayTM(short)
  public void SK_WZ_VERMILION(const class SK_WZ_VERMILION &)
  public void SK_WZ_VERMILION()
  public void ~SK_WZ_VERMILION()
  public class SK_WZ_VERMILION & operator=(const class SK_WZ_VERMILION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SK_WZ_WATERBALL {
  SK_WIZARD, offset = 0x0

  public void SK_WZ_WATERBALL::Init()
  public int SK_WZ_WATERBALL::OnMsg(class CCharacter *, unsigned short, int, int, int, int, class MSGpar::CVar)
  public short SK_WZ_WATERBALL::GetMaxLevel()
  public short SK_WZ_WATERBALL::GetSPCost(short)
  public short SK_WZ_WATERBALL::GetPreDelayTime(short)
  public void SK_WZ_WATERBALL(const class SK_WZ_WATERBALL &)
  public void SK_WZ_WATERBALL()
  public void ~SK_WZ_WATERBALL()
  public class SK_WZ_WATERBALL & operator=(const class SK_WZ_WATERBALL &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SKcastingTMvarStuff::CAmount {
    *
  public int SKcastingTMvarStuff::CAmount::Get(const int)
  public void SKcastingTMvarStuff::CAmount::Add(const class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void SKcastingTMvarStuff::CAmount::Remove(const class SKcastingTMvarStuff::CIdentity &)
  public void SKcastingTMvarStuff::CAmount::Init()
    /* this+0x4 */ class std::vector<std::tr1::shared_ptr<SKcastingTMvarStuff::CItem>,std::allocator<std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> > > m_Amounts

  public void CAmount(const class SKcastingTMvarStuff::CAmount &)
  public void CAmount()
  public void SKcastingTMvarStuff::CAmount::~CAmount()
  public class SKcastingTMvarStuff::CAmount & operator=(const class SKcastingTMvarStuff::CAmount &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SKcastingTMvarStuff::CApply {
    *
  public bool operator()(const int)
  public void CApply(const class SKcastingTMvarStuff::CApply &)
  public void CApply()
  public void SKcastingTMvarStuff::CApply::~CApply()
  public class SKcastingTMvarStuff::CApply & operator=(const class SKcastingTMvarStuff::CApply &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class SKcastingTMvarStuff::CIdentity {
    *
  public bool operator==(const class SKcastingTMvarStuff::CIdentity &)
  public enum SKcastingTMvarStuff::enumIDENTITY GetKind()
  public int GetID()
  public void CIdentity(const class SKcastingTMvarStuff::CIdentity &)
  public void CIdentity(const enum SKcastingTMvarStuff::enumIDENTITY, const int)
  public void SKcastingTMvarStuff::CIdentity::~CIdentity()
  /* this+0x4 */ const enum SKcastingTMvarStuff::enumIDENTITY m_Kind
  /* this+0x8 */ const int m_ID
  public void * __vecDelDtor(unsigned int)
}

class SKcastingTMvarStuff::CItem {
    *
  public void CItem(const class SKcastingTMvarStuff::CItem &)
  public void SKcastingTMvarStuff::CItem::CItem(const class SKcastingTMvarStuff::CIdentity, const class SKcastingTMvarStuff::CApply *, const int)
  public void ~CItem()
  public class SKcastingTMvarStuff::CItem & operator=(const class SKcastingTMvarStuff::CItem &)
  /* this+0x4 */ const class SKcastingTMvarStuff::CIdentity m_Identity

  /* this+0x10 */ const class SKcastingTMvarStuff::CApply * m_cpApply
  /* this+0x14 */ int m_Value
  public void * __vecDelDtor(unsigned int)
}

class SKcastingTMvarStuff::CPermill {
  SKcastingTMvarStuff::CAmount, offset = 0x0

  public void SKcastingTMvarStuff::CPermill::Add(const class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public int SKcastingTMvarStuff::CPermill::Get(const int)
  public void CPermill(const class SKcastingTMvarStuff::CPermill &)
  public void CPermill()
  public void SKcastingTMvarStuff::CPermill::~CPermill()
  public class SKcastingTMvarStuff::CPermill & operator=(const class SKcastingTMvarStuff::CPermill &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct SKcastingTMvarStuff::`anonymous-namespace'::APPLYfunctor {
  public void operator()(const class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &)
  public void APPLYfunctor(const int, class std::vector<int,std::allocator<int> > &)
  /* this+0x0 */ class std::vector<int,std::allocator<int> > & m_ActiveDatas
  /* this+0x4 */ const int m_SKID
}

class SKcastingTMvarStuff::`anonymous-namespace'::ItemCompareFunctor {
  std::binary_function<std::tr1::shared_ptr<SKcastingTMvarStuff::CItem>,SKcastingTMvarStuff::CIdentity,bool>, offset = 0x0

  public bool operator()(const class std::tr1::shared_ptr<SKcastingTMvarStuff::CItem> &, const class SKcastingTMvarStuff::CIdentity &)
}

struct SLEVELLOG {
  /* this+0x0 */ int accountID
  /* this+0x4 */ int characterID
  /* this+0x8 */ char[0x18] characterName
  /* this+0x20 */ int characterLevel
  /* this+0x24 */ int characterJobLevel
}

struct SLOTINFO {
  /* this+0x0 */ unsigned short[0x8] slot
}

struct SMAKINGLOG {
  SDATABASELOG, offset = 0x0

  /* this+0x60 */ unsigned char m_bySuccess
  /* this+0x64 */ unsigned long m_dwItemID
  /* this+0x68 */ unsigned long m_dwMaterial1
  /* this+0x6c */ unsigned long m_dwMaterial2
  /* this+0x70 */ unsigned long m_dwMaterial3
}

struct SODBCPARAM {
  /* this+0x0 */ long m_cdValue
  /* this+0x4 */ int m_nParam
  /* this+0x8 */ char[0x100] m_szParam
}

struct SORTED_PCLIST {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned int limitTime
  /* this+0x8 */ unsigned int val
}

struct SPACKETLOG {
  /* this+0x0 */ unsigned long m_dwAccountID
  /* this+0x4 */ char[0x1a] m_szAccountName
  /* this+0x20 */ unsigned long m_dwCharacterID
  /* this+0x24 */ char[0x1a] m_szCharacterName
  /* this+0x3e */ char[0x19] m_szMapName
  /* this+0x57 */ char[0x19] m_szIpAddr
  /* this+0x70 */ unsigned long m_dwType
}

struct SPETLOG {
  /* this+0x0 */ unsigned long characterID
  /* this+0x4 */ struct PET_PROPERTY property

  /* this+0x38 */ char[0x10] mapName
  /* this+0x48 */ int logType
  public void SPETLOG::SPETLOG(const unsigned long, const struct PET_PROPERTY, const char *, const int)
}

struct SPRESENTLOG {
  SDATABASELOG, offset = 0x0

  /* this+0x60 */ unsigned long m_dwItemID
}

struct SParser {
  /* this+0x0 */ struct Zio * z
  /* this+0x4 */ struct Mbuffer buff

  /* this+0x10 */ const char * name
}

struct SREFININGLOG {
  SDATABASELOG, offset = 0x0

  /* this+0x60 */ unsigned char m_bySuccess
  /* this+0x64 */ unsigned long m_dwItemID
  /* this+0x68 */ unsigned long m_dwItemLevel
  /* this+0x70 */ __int64 m_NP_ItemSerialNum
}

struct SSIListInfo {
  /* this+0x0 */ unsigned int SSI_ID
  /* this+0x4 */ unsigned int AID
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > StoreName

  /* this+0x24 */ short x
  /* this+0x26 */ short y
  /* this+0x28 */ int price
  /* this+0x2c */ unsigned short ITID
  /* this+0x2e */ unsigned char ItemType
  /* this+0x30 */ unsigned short count
  /* this+0x32 */ unsigned char refiningLevel
  /* this+0x33 */ struct EQUIPSLOTINFO CardSlot

  public struct ResultItemInfo operator struct ResultItemInfo()
  public void SSIListInfo(const struct SSIListInfo &)
  public void SSIListInfo()
  public void SSIListInfo::Clear()
  public void ~SSIListInfo()
  public struct SSIListInfo & operator=(const struct SSIListInfo &)
  public void * __vecDelDtor(unsigned int)
}

struct SSIRequest {
    /* this+0x0 */ class std::vector<unsigned short,std::allocator<unsigned short> > ITIDList

  /* this+0x10 */ class std::vector<unsigned short,std::allocator<unsigned short> > CardInItemList

  /* this+0x20 */ unsigned int MaxPrice
  /* this+0x24 */ unsigned int MinPrice
  /* this+0x28 */ int SearchType
  /* this+0x2c */ unsigned int ReqAID
  /* this+0x30 */ unsigned char StoreType
  /* this+0x34 */ unsigned int MapID
  public void AddSearchType(const int)
  public void SetRequestAID(const unsigned int)
  public void SSIRequest::SSIRequest(const struct SSIRequest &)
  public void SSIRequest::SSIRequest(unsigned int, unsigned int, unsigned int, unsigned char, unsigned int, const unsigned short *, const unsigned char, const unsigned short *, const unsigned char)
  public void SSIRequest()
  public void InsertITID(const unsigned short *, const int)
  public void InsertCardITID(const unsigned short *, const int)
  public void SSIRequest::Clear()
  public void SSIRequest::~SSIRequest()
  public struct SSIRequest & operator=(const struct SSIRequest &)
  public void * __vecDelDtor(unsigned int)
}

struct SSKILLLOG {
  SDATABASELOG, offset = 0x0

  /* this+0x60 */ unsigned long m_dwSkillID
  /* this+0x64 */ unsigned long m_dwSkillLevel
  /* this+0x68 */ unsigned long m_dwExtraSkillPoint
}

struct SSTATUSLOG {
  SDATABASELOG, offset = 0x0

  /* this+0x60 */ unsigned long m_dwStr
  /* this+0x64 */ unsigned long m_dwAgi
  /* this+0x68 */ unsigned long m_dwVit
  /* this+0x6c */ unsigned long m_dwInt
  /* this+0x70 */ unsigned long m_dwDex
  /* this+0x74 */ unsigned long m_dwLuk
  /* this+0x78 */ unsigned long m_dwJobPoint
}

struct STATUS {
  /* this+0x0 */ int Str
  /* this+0x4 */ int Agi
  /* this+0x8 */ int Vit
  /* this+0xc */ int Int
  /* this+0x10 */ int Dex
  /* this+0x14 */ int Luk
}

struct STAT_PLUSTABLE {
  /* this+0x0 */ struct MIN_MAX maxHP

  /* this+0x4 */ struct MIN_MAX maxSP

  /* this+0x8 */ struct MIN_MAX Str

  /* this+0xc */ struct MIN_MAX Int

  /* this+0x10 */ struct MIN_MAX Vit

  /* this+0x14 */ struct MIN_MAX Dex

  /* this+0x18 */ struct MIN_MAX Agi

  /* this+0x1c */ struct MIN_MAX Luk

}

struct STRUCT_SK_EVENT {
  /* this+0x0 */ class std::map<unsigned long,void *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,void *> > > infoMap

  public void STRUCT_SK_EVENT(const struct STRUCT_SK_EVENT &)
  public void STRUCT_SK_EVENT()
  public void ~STRUCT_SK_EVENT()
  public struct STRUCT_SK_EVENT & operator=(const struct STRUCT_SK_EVENT &)
  public void * __vecDelDtor(unsigned int)
}

struct STRUCT_SK_HANDICAP {
  /* this+0x0 */ unsigned char handicapType
  /* this+0x4 */ int[0xa] percent
  /* this+0x2c */ int[0xa] time
}

struct STRUCT_SK_INTVALUE {
  /* this+0x0 */ int[0xa] value
}

struct STRUCT_SK_SPLASH {
  /* this+0x0 */ unsigned char shape
  /* this+0x4 */ int[0x14] range
}

struct STRUCT_SK_STRINGVALUE {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> >[0xa] value
  public void STRUCT_SK_STRINGVALUE(const struct STRUCT_SK_STRINGVALUE &)
  public void STRUCT_SK_STRINGVALUE()
  public void ~STRUCT_SK_STRINGVALUE()
  public struct STRUCT_SK_STRINGVALUE & operator=(const struct STRUCT_SK_STRINGVALUE &)
  public void * __vecDelDtor(unsigned int)
}

struct SYSTEM_BATTERY_STATE {
  /* this+0x0 */ unsigned char AcOnLine
  /* this+0x1 */ unsigned char BatteryPresent
  /* this+0x2 */ unsigned char Charging
  /* this+0x3 */ unsigned char Discharging
  /* this+0x4 */ unsigned char[0x4] Spare1
  /* this+0x8 */ unsigned long MaxCapacity
  /* this+0xc */ unsigned long RemainingCapacity
  /* this+0x10 */ unsigned long Rate
  /* this+0x14 */ unsigned long EstimatedTime
  /* this+0x18 */ unsigned long DefaultAlert1
  /* this+0x1c */ unsigned long DefaultAlert2
}

struct SYSTEM_POWER_CAPABILITIES {
  /* this+0x0 */ unsigned char PowerButtonPresent
  /* this+0x1 */ unsigned char SleepButtonPresent
  /* this+0x2 */ unsigned char LidPresent
  /* this+0x3 */ unsigned char SystemS1
  /* this+0x4 */ unsigned char SystemS2
  /* this+0x5 */ unsigned char SystemS3
  /* this+0x6 */ unsigned char SystemS4
  /* this+0x7 */ unsigned char SystemS5
  /* this+0x8 */ unsigned char HiberFilePresent
  /* this+0x9 */ unsigned char FullWake
  /* this+0xa */ unsigned char VideoDimPresent
  /* this+0xb */ unsigned char ApmPresent
  /* this+0xc */ unsigned char UpsPresent
  /* this+0xd */ unsigned char ThermalControl
  /* this+0xe */ unsigned char ProcessorThrottle
  /* this+0xf */ unsigned char ProcessorMinThrottle
  /* this+0x10 */ unsigned char ProcessorMaxThrottle
  /* this+0x11 */ unsigned char FastSystemS4
  /* this+0x12 */ unsigned char[0x3] spare2
  /* this+0x15 */ unsigned char DiskSpinDown
  /* this+0x16 */ unsigned char[0x8] spare3
  /* this+0x1e */ unsigned char SystemBatteriesPresent
  /* this+0x1f */ unsigned char BatteriesAreShortTerm
  /* this+0x20 */ struct BATTERY_REPORTING_SCALE[0x3] BatteryScale
  /* this+0x38 */ enum _SYSTEM_POWER_STATE AcOnLineWake
  /* this+0x3c */ enum _SYSTEM_POWER_STATE SoftLidWake
  /* this+0x40 */ enum _SYSTEM_POWER_STATE RtcWake
  /* this+0x44 */ enum _SYSTEM_POWER_STATE MinDeviceWakeState
  /* this+0x48 */ enum _SYSTEM_POWER_STATE DefaultLowLatencyWake
}

struct SYSTEM_POWER_LEVEL {
  /* this+0x0 */ unsigned char Enable
  /* this+0x1 */ unsigned char[0x3] Spare
  /* this+0x4 */ unsigned long BatteryLevel
  /* this+0x8 */ struct POWER_ACTION_POLICY PowerPolicy

  /* this+0x14 */ enum _SYSTEM_POWER_STATE MinSystemState
}

struct ScopeTable {
  /* this+0x0 */ unsigned long GSCookieOffset
  /* this+0x4 */ unsigned long GSCookieXOROffset
  /* this+0x8 */ unsigned long EHCookieOffset
  /* this+0xc */ unsigned long EHCookieXOROffset
  /* this+0x10 */ unsigned long ScopeRecord
}

struct ScopeTableRecord {
  /* this+0x0 */ unsigned long EnclosingLevel
  /* this+0x4 */ unsigned long FilterFunc
  /* this+0x8 */ unsigned long HandlerAddress
  /* this+0x8 */ unsigned long FinallyFunc
}

struct SearchingInfo {
  /* this+0x0 */ unsigned char StoreType
  /* this+0x4 */ unsigned int Time
}

union SemInfo {
  /* this+0x0 */ double r
  /* this+0x0 */ union TString * ts
}

struct SkillStuff::Operation_BT {
    *
  public void operator()(class CActor *)
  public void Operation_BT(const struct SkillStuff::Operation_BT &)
  public void Operation_BT()
  public struct SkillStuff::Operation_BT & operator=(const struct SkillStuff::Operation_BT &)
}

struct SpecialItemEvent {
  /* this+0x0 */ int beginPos
  /* this+0x4 */ class std::list<int,std::allocator<int> > varList

  public void SpecialItemEvent(const struct SpecialItemEvent &)
  public void SpecialItemEvent()
  public void ~SpecialItemEvent()
  public struct SpecialItemEvent & operator=(const struct SpecialItemEvent &)
  public void * __vecDelDtor(unsigned int)
}

struct SummonMobList {
  /* this+0x0 */ int num
  /* this+0x4 */ class std::list<unsigned long,std::allocator<unsigned long> > summonMob

  public void SummonMobList(const struct SummonMobList &)
  public void SummonMobList()
  public void SummonMobList::~SummonMobList()
  public struct SummonMobList & operator=(const struct SummonMobList &)
  public void * __vecDelDtor(unsigned int)
}

struct SystemAIDgenerator_T {
  public unsigned int operator unsigned int()
  /* this+0x0 */ unsigned int m_AID
  private void SystemAIDgenerator_T(const struct SystemAIDgenerator_T &)
  public void SystemAIDgenerator_T()
  private struct SystemAIDgenerator_T & operator=(const struct SystemAIDgenerator_T &)
}

struct TAG_CHARACTER_BLOCK_INFO {
  /* this+0x0 */ unsigned long GID
  /* this+0x4 */ char[0x14] szExpireDate
}

struct TARGET_ATTACKED_BUFF {
  /* this+0x0 */ unsigned long percent
  /* this+0x4 */ short who
  /* this+0x6 */ unsigned short buffType
  /* this+0x8 */ unsigned long time
  /* this+0xc */ unsigned long value
}

struct TDATA_HUNT {
  /* this+0x0 */ int huntIdent
  /* this+0x4 */ unsigned long mobIdent
  /* this+0x8 */ char[0x18] mobName
  /* this+0x20 */ int max_huntCount
}

struct TEMP_MONITEMINFO {
  /* this+0x0 */ struct MONITEMINFO[0x8] item
}

class TItemRoutingPriority {
  /* this+0x0 */ unsigned long m_AID
  /* this+0x4 */ int m_damage
  public bool operator==(const class TItemRoutingPriority &)
  public class TItemRoutingPriority & operator=(const class TItemRoutingPriority &)
  public void TItemRoutingPriority(const unsigned long, const int)
  public void ~TItemRoutingPriority()
  public void * __vecDelDtor(unsigned int)
}

struct TK {
  /* this+0x0 */ int n
  /* this+0x4 */ int[0x4] rr
  /* this+0x14 */ unsigned char[0x100][0x40] sbox
}

union TKey {
  /* this+0x0 */ struct <unnamed-tag> nk

  /* this+0x0 */ struct lua_TValue tvk

}

struct TQUEST_MISSION {
  /* this+0x0 */ unsigned long questID
  /* this+0x4 */ char[0x40] questName
  /* this+0x44 */ int hunt_count
  /* this+0x48 */ struct TDATA_HUNT[0x3] hunt
  /* this+0xb4 */ unsigned long time
}

struct TRADE_ITEM_BUYING_STORE {
  /* this+0x0 */ unsigned short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ short count
}

union TString {
  /* this+0x0 */ union L_Umaxalign dummy

  /* this+0x0 */ struct <unnamed-tag> tsv

}

struct Table {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x6 */ unsigned char flags
  /* this+0x7 */ unsigned char lsizenode
  /* this+0x8 */ struct Table * metatable
  /* this+0xc */ struct lua_TValue * array
  /* this+0x10 */ struct Node * node
  /* this+0x14 */ struct Node * lastfree
  /* this+0x18 */ union GCObject * gclist
  /* this+0x1c */ int sizearray
}

struct Token {
  /* this+0x0 */ int token
  /* this+0x8 */ union SemInfo seminfo

}

struct TokenData {
    /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > str

  /* this+0x1c */ int num
  /* this+0x20 */ char type
  public void TokenData::TokenData(const struct TokenData &)
  public void TokenData::TokenData()
  public void TokenData::SetType(int)
  public void TokenData::Set(const double)
  public void TokenData::Set(const float)
  public void TokenData::Set(const int)
  public void TokenData::Set(const char *)
  public char * TokenData::GetStr()
  public int TokenData::GetNum()
  public float TokenData::GetFloat()
  public double TokenData::GetDouble()
  public bool IsNum()
  public bool TokenData::IsStr()
  public bool IsFloat()
  public char * operator char *()
  public const char * operator const char *()
  public int operator int()
  public float operator float()
  public double operator double()
  public struct TokenData & TokenData::operator+(struct TokenData &)
  public struct TokenData & TokenData::operator-(struct TokenData &)
  public struct TokenData & TokenData::operator*(struct TokenData &)
  public struct TokenData & TokenData::operator/(struct TokenData &)
  public struct TokenData & TokenData::operator%(struct TokenData &)
  public struct TokenData & operator++()
  public struct TokenData & TokenData::operator++(int)
  public struct TokenData & operator--()
  public struct TokenData & TokenData::operator--(int)
  public void TokenData::operator=(const struct TokenData &)
  public void TokenData::operator=(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public void operator=(const double)
  public void operator=(const float)
  public void TokenData::operator=(const char *)
  public void TokenData::operator=(const int)
  public void TokenData::operator+=(struct TokenData &)
  public void TokenData::operator-=(struct TokenData &)
  public void TokenData::operator*=(struct TokenData &)
  public void TokenData::operator/=(struct TokenData &)
  public void TokenData::operator%=(struct TokenData &)
  public bool TokenData::operator==(struct TokenData &)
  public bool TokenData::operator>=(struct TokenData &)
  public bool TokenData::operator<=(struct TokenData &)
  public bool TokenData::operator!=(struct TokenData &)
  public bool TokenData::operator>(struct TokenData &)
  public bool TokenData::operator<(struct TokenData &)
  public bool TokenData::operator&&(struct TokenData &)
  public bool TokenData::operator||(struct TokenData &)
  public void TokenData::~TokenData()
  public void * __vecDelDtor(unsigned int)
}

struct TokenInfo {
  /* this+0x0 */ long num
  /* this+0x4 */ unsigned long type
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > str

  public void TokenInfo::Set(char, long, char *)
  public char * TokenInfo::GetStr()
  public void TokenInfo(const struct TokenInfo &)
  public void TokenInfo()
  public void TokenInfo::~TokenInfo()
  public struct TokenInfo & operator=(const struct TokenInfo &)
  public void * __vecDelDtor(unsigned int)
}

struct TranslatorGuardRN {
  /* this+0x0 */ struct EHRegistrationNode * pNext
  /* this+0x4 */ void * pFrameHandler
  /* this+0x8 */ unsigned int RandomCookie
  /* this+0xc */ const struct _s_FuncInfo * pFuncInfo
  /* this+0x10 */ struct EHRegistrationNode * pRN
  /* this+0x14 */ int CatchDepth
  /* this+0x18 */ struct EHRegistrationNode * pMarkerRN
  /* this+0x1c */ void * ESP
  /* this+0x20 */ void * EBP
  /* this+0x24 */ int DidUnwind
}

struct TypeDescriptor {
  /* this+0x0 */ unsigned long hash
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x0] name
}

struct USER_TARGET_INFO {
  /* this+0x0 */ int destroySPProbability
  /* this+0x4 */ int destroySPPercent
  /* this+0x8 */ int[0x3] plusDamageByClass
  /* this+0x14 */ int SPAmount_Action
}

union Udata {
  /* this+0x0 */ union L_Umaxalign dummy

  /* this+0x0 */ struct <unnamed-tag> uv

}

class UnDecorator {
  private void operator=(const class UnDecorator &)
  /* this+0x0 */ class Replicator ArgList

  /* [0x0003:0x00029458] */ static  class Replicator * pArgList
  /* this+0x2c */ class Replicator ZNameList

  /* [0x0003:0x0002945c] */ static  class Replicator * pZNameList
  /* [0x0003:0x00029460] */ static  class Replicator * pTemplateArgList
  /* [0x0003:0x00029464] */ static  const char * gName
  /* [0x0003:0x00029468] */ static  const char * name
  /* [0x0003:0x0002946c] */ static  char * outputString
  /* [0x0003:0x00029470] */ static  int maxStringLength
  /* [0x0003:0x00029474] */ static  unsigned long disableFlags
  /* [0x0003:0x0002947c] */ static  bool fExplicitTemplateParams
  /* [0x0003:0x0002947d] */ static  bool fGetTemplateArgumentList
  private static class DName getDecoratedName()
  private static class DName getSymbolName()
  private static class DName getZName(bool, bool)
  private static class DName getOperatorName(bool, bool *)
  private static class DName getScope()
  private static class DName getScopedName()
  private static class DName getSignedDimension()
  private static class DName getDimension(bool)
  private static int getNumberOfDimensions()
  private static class DName getTemplateName(bool)
  private static class DName getTemplateArgumentList()
  private static class DName getTemplateConstant()
  private static class DName composeDeclaration(const class DName &)
  private static int getTypeEncoding()
  private static class DName getBasedType()
  private static class DName getECSUName()
  private static class DName getEnumType()
  private static class DName getCallingConvention()
  private static class DName getReturnType(class DName *)
  private static class DName getDataType(class DName *)
  private static class DName getPrimaryDataType(const class DName &)
  private static class DName getDataIndirectType()
  private static class DName getDataIndirectType(const class DName &, const char *, const class DName &, int)
  private static class DName getExtendedDataIndirectType(const char * &, bool &, int)
  private static class DName getBasicDataType(const class DName &)
  private static class DName getECSUDataType()
  private static class DName getPtrRefType(const class DName &, const class DName &, const char *)
  private static class DName getPtrRefDataType(const class DName &, int)
  private static class DName getArrayType(const class DName &)
  private static class DName getFunctionIndirectType(const class DName &)
  private static class DName getArgumentTypes()
  private static class DName getArgumentList()
  private static class DName getThrowTypes()
  private static class DName getLexicalFrame()
  private static class DName getStorageConvention()
  private static class DName getThisType()
  private static class DName getPointerType(const class DName &, const class DName &)
  private static class DName getPointerTypeArray(const class DName &, const class DName &)
  private static class DName getReferenceType(const class DName &, const class DName &, const char *)
  private static class DName getExternalDataType(const class DName &)
  private static class DName getSegmentName()
  private static class DName getDisplacement()
  private static class DName getCallIndex()
  private static class DName getGuardNumber()
  private static class DName getVfTableType(const class DName &)
  private static class DName getVbTableType(const class DName &)
  private static class DName getVdispMapType(const class DName &)
  private static class DName getVCallThunkType()
  private static class DName getStringEncoding(char *, int)
  /* [0x0003:0x00029478] */ static  function  * m_pGetParameter
  public void UnDecorator(char *, const char *, int, function  *, unsigned long)
  public static int doUnderScore()
  public static int doMSKeywords()
  public static int doPtr64()
  public static int doFunctionReturns()
  public static int doAllocationModel()
  public static int doAllocationLanguage()
  public static int doThisTypes()
  public static int doAccessSpecifiers()
  public static int doThrowTypes()
  public static int doMemberTypes()
  public static int doReturnUDTModel()
  public static int do32BitNear()
  public static int doNameOnly()
  public static int doTypeOnly()
  public static int haveTemplateParameters()
  public static int doEcsu()
  public static int doNoIdentCharCheck()
  public static int doEllipsis()
  public static const char * UScore(enum Tokens)
  public char * operator char *()
}

struct UnPackItemInfo {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ unsigned int BoxID
  public void UnPackItemInfo(const unsigned short, const unsigned int)
}

struct UnwindGuardNode {
  /* this+0x0 */ unsigned long Next
  /* this+0x4 */ unsigned long Handler
  /* this+0x8 */ unsigned long SecurityCookie
  /* this+0xc */ unsigned long OrigTargetLevel
  /* this+0x10 */ unsigned long OrigEstablisher
  /* this+0x14 */ unsigned long OrigCookiePointer
  /* this+0x18 */ unsigned long FramePointer
}

struct UpVal {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x8 */ struct lua_TValue * v
  /* this+0x10 */ union <unnamed-tag> u

}

union Value {
  /* this+0x0 */ union GCObject * gc
  /* this+0x0 */ void * p
  /* this+0x0 */ double n
  /* this+0x0 */ int b
}

struct VarMap {
  /* this+0x0 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,TokenData,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,TokenData> > > data

  public void VarMap(const struct VarMap &)
  public void VarMap()
  public bool IsEmpty()
  public void VarMap::Clear()
  public void VarMap::Set(const char *, const struct TokenData &)
  public bool VarMap::Get(const char *, struct TokenData &)
  public bool IsExist(const char *)
  public void VarMap::~VarMap()
  public struct VarMap & operator=(const struct VarMap &)
  public void * __vecDelDtor(unsigned int)
}

struct WARPPORTAL_INFO {
  /* this+0x0 */ char[0x10][0x3] mapName
  /* this+0x30 */ short[0x3] xPos
  /* this+0x36 */ short[0x3] yPos
}

struct WARP_POSITION {
  public void WARP_POSITION::WARP_POSITION(const struct WARP_POSITION &)
  public void WARP_POSITION()
  /* this+0x0 */ short xPos
  /* this+0x2 */ short yPos
  /* this+0x4 */ char[0x10] mapName
}

struct WINPOINT {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ int winpoint
}

struct WSAData {
  /* this+0x0 */ unsigned short wVersion
  /* this+0x2 */ unsigned short wHighVersion
  /* this+0x4 */ char[0x101] szDescription
  /* this+0x105 */ char[0x81] szSystemStatus
  /* this+0x186 */ unsigned short iMaxSockets
  /* this+0x188 */ unsigned short iMaxUdpDg
  /* this+0x18c */ char * lpVendorInfo
}

struct ZSERVER_ADDR {
  /* this+0x0 */ unsigned long ip
  /* this+0x4 */ short port
}

struct Zio {
  /* this+0x0 */ unsigned int n
  /* this+0x4 */ const char * p
  /* this+0x8 */ function  * reader
  /* this+0xc */ void * data
  /* this+0x10 */ struct lua_State * L
}

struct _ABC {
  /* this+0x0 */ int abcA
  /* this+0x4 */ unsigned int abcB
  /* this+0x8 */ int abcC
}

struct _ABCFLOAT {
  /* this+0x0 */ float abcfA
  /* this+0x4 */ float abcfB
  /* this+0x8 */ float abcfC
}

struct _ACCEPT_PARM {
  /* this+0x0 */ unsigned long ip
  /* this+0x4 */ short port
  /* this+0x8 */ int backlog
  /* this+0xc */ unsigned int ipLog
  /* this+0x10 */ class CAcceptHandler * handler
}

struct _ACCESS_ALLOWED_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _ACCESS_ALLOWED_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _ACCESS_ALLOWED_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _ACCESS_DENIED_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _ACCESS_DENIED_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _ACCESS_DENIED_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _ACCESS_REASONS {
  /* this+0x0 */ unsigned long[0x20] Data
}

struct _ACE_HEADER {
  /* this+0x0 */ unsigned char AceType
  /* this+0x1 */ unsigned char AceFlags
  /* this+0x2 */ unsigned short AceSize
}

struct _ACL {
  /* this+0x0 */ unsigned char AclRevision
  /* this+0x1 */ unsigned char Sbz1
  /* this+0x2 */ unsigned short AclSize
  /* this+0x4 */ unsigned short AceCount
  /* this+0x6 */ unsigned short Sbz2
}

struct _ACL_REVISION_INFORMATION {
  /* this+0x0 */ unsigned long AclRevision
}

struct _ACL_SIZE_INFORMATION {
  /* this+0x0 */ unsigned long AceCount
  /* this+0x4 */ unsigned long AclBytesInUse
  /* this+0x8 */ unsigned long AclBytesFree
}

struct _ACTIVATION_CONTEXT {
}

struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
  /* this+0x0 */ unsigned long ulFlags
  /* this+0x4 */ unsigned long ulEncodedAssemblyIdentityLength
  /* this+0x8 */ unsigned long ulManifestPathType
  /* this+0xc */ unsigned long ulManifestPathLength
  /* this+0x10 */ union _LARGE_INTEGER liManifestLastWriteTime

  /* this+0x18 */ unsigned long ulPolicyPathType
  /* this+0x1c */ unsigned long ulPolicyPathLength
  /* this+0x20 */ union _LARGE_INTEGER liPolicyLastWriteTime

  /* this+0x28 */ unsigned long ulMetadataSatelliteRosterIndex
  /* this+0x2c */ unsigned long ulManifestVersionMajor
  /* this+0x30 */ unsigned long ulManifestVersionMinor
  /* this+0x34 */ unsigned long ulPolicyVersionMajor
  /* this+0x38 */ unsigned long ulPolicyVersionMinor
  /* this+0x3c */ unsigned long ulAssemblyDirectoryNameLength
  /* this+0x40 */ const wchar_t * lpAssemblyEncodedAssemblyIdentity
  /* this+0x44 */ const wchar_t * lpAssemblyManifestPath
  /* this+0x48 */ const wchar_t * lpAssemblyPolicyPath
  /* this+0x4c */ const wchar_t * lpAssemblyDirectoryName
  /* this+0x50 */ unsigned long ulFileCount
}

struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
  /* this+0x0 */ void * hActCtx
  /* this+0x4 */ unsigned long dwFlags
}

struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
  /* this+0x0 */ unsigned long ElementCount
  /* this+0x4 */ struct _COMPATIBILITY_CONTEXT_ELEMENT[0x0] Elements
}

struct _ACTIVATION_CONTEXT_DATA {
}

struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
  /* this+0x0 */ unsigned long dwFlags
  /* this+0x4 */ unsigned long ulFormatVersion
  /* this+0x8 */ unsigned long ulAssemblyCount
  /* this+0xc */ unsigned long ulRootManifestPathType
  /* this+0x10 */ unsigned long ulRootManifestPathChars
  /* this+0x14 */ unsigned long ulRootConfigurationPathType
  /* this+0x18 */ unsigned long ulRootConfigurationPathChars
  /* this+0x1c */ unsigned long ulAppDirPathType
  /* this+0x20 */ unsigned long ulAppDirPathChars
  /* this+0x24 */ const wchar_t * lpRootManifestPath
  /* this+0x28 */ const wchar_t * lpRootConfigurationPath
  /* this+0x2c */ const wchar_t * lpAppDirPath
}

struct _ACTIVATION_CONTEXT_QUERY_INDEX {
  /* this+0x0 */ unsigned long ulAssemblyIndex
  /* this+0x4 */ unsigned long ulFileIndexInAssembly
}

struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
  /* this+0x0 */ unsigned long ulFlags
  /* this+0x4 */ enum ACTCTX_REQUESTED_RUN_LEVEL RunLevel
  /* this+0x8 */ unsigned long UiAccess
}

struct _ACTIVATION_CONTEXT_STACK {
  /* this+0x0 */ unsigned long Flags
  /* this+0x4 */ unsigned long NextCookieSequenceNumber
  /* this+0x8 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME * ActiveFrame
  /* this+0xc */ struct _LIST_ENTRY FrameListCache

}

struct _ADMINISTRATOR_POWER_POLICY {
  /* this+0x0 */ enum _SYSTEM_POWER_STATE MinSleep
  /* this+0x4 */ enum _SYSTEM_POWER_STATE MaxSleep
  /* this+0x8 */ unsigned long MinVideoTimeout
  /* this+0xc */ unsigned long MaxVideoTimeout
  /* this+0x10 */ unsigned long MinSpindownTimeout
  /* this+0x14 */ unsigned long MaxSpindownTimeout
}

struct _AFPROTOCOLS {
  /* this+0x0 */ int iAddressFamily
  /* this+0x4 */ int iProtocol
}

struct _APPLICATIONLAUNCH_SETTING_VALUE {
  /* this+0x0 */ union _LARGE_INTEGER ActivationTime

  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ unsigned long ButtonInstanceID
}

struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
  /* this+0x0 */ unsigned long ulFlags
  /* this+0x4 */ unsigned long ulFilenameLength
  /* this+0x8 */ unsigned long ulPathLength
  /* this+0xc */ const wchar_t * lpFileName
  /* this+0x10 */ const wchar_t * lpFilePath
}

struct _ASSEMBLY_STORAGE_MAP {
}

struct _BCD80 {
  /* this+0x0 */ unsigned short[0x5] W
}

struct _BLENDFUNCTION {
  /* this+0x0 */ unsigned char BlendOp
  /* this+0x1 */ unsigned char BlendFlags
  /* this+0x2 */ unsigned char SourceConstantAlpha
  /* this+0x3 */ unsigned char AlphaFormat
}

struct _BLOB {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned char * pBlobData
}

struct _BOTDATA {
  /* this+0x0 */ short penalty
  /* this+0x4 */ unsigned long penaltyTime
  /* this+0x8 */ short warning
  public void _BOTDATA()
  public void ~_BOTDATA()
  public void Init()
  public void * __vecDelDtor(unsigned int)
}

struct _BY_HANDLE_FILE_INFORMATION {
  /* this+0x0 */ unsigned long dwFileAttributes
  /* this+0x4 */ struct _FILETIME ftCreationTime

  /* this+0xc */ struct _FILETIME ftLastAccessTime

  /* this+0x14 */ struct _FILETIME ftLastWriteTime

  /* this+0x1c */ unsigned long dwVolumeSerialNumber
  /* this+0x20 */ unsigned long nFileSizeHigh
  /* this+0x24 */ unsigned long nFileSizeLow
  /* this+0x28 */ unsigned long nNumberOfLinks
  /* this+0x2c */ unsigned long nFileIndexHigh
  /* this+0x30 */ unsigned long nFileIndexLow
}

struct _CACHE_DESCRIPTOR {
  /* this+0x0 */ unsigned char Level
  /* this+0x1 */ unsigned char Associativity
  /* this+0x2 */ unsigned short LineSize
  /* this+0x4 */ unsigned long Size
  /* this+0x8 */ enum _PROCESSOR_CACHE_TYPE Type
}

struct _CACHE_RELATIONSHIP {
  /* this+0x0 */ unsigned char Level
  /* this+0x1 */ unsigned char Associativity
  /* this+0x2 */ unsigned short LineSize
  /* this+0x4 */ unsigned long CacheSize
  /* this+0x8 */ enum _PROCESSOR_CACHE_TYPE Type
  /* this+0xc */ unsigned char[0x14] Reserved
  /* this+0x20 */ struct _GROUP_AFFINITY GroupMask

}

struct _CASHSHOP_PASSWORD_INFO {
  /* this+0x0 */ int Password
  /* this+0x4 */ int ErrorCount
  /* this+0x8 */ unsigned long PanaltyTime
  /* this+0xc */ int MapID
  /* this+0x10 */ int X
  /* this+0x14 */ int Y
  /* this+0x18 */ bool bIsAuth
  public void _CASHSHOP_PASSWORD_INFO()
  public void Init()
  public void InitPosition()
  public void SetAuth(const bool)
  public bool IsAuth()
}

struct _CHAR_INFO {
    /* this+0x0 */ union _CHAR_INFO::<unnamed-type-Char> Char

  /* this+0x2 */ unsigned short Attributes
}

union _CHAR_INFO::<unnamed-type-Char> {
  /* this+0x0 */ wchar_t UnicodeChar
  /* this+0x0 */ char AsciiChar
}

struct _CLIENT_ID {
  /* this+0x0 */ void * UniqueProcess
  /* this+0x4 */ void * UniqueThread
}

struct _COMMCONFIG {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned short wVersion
  /* this+0x6 */ unsigned short wReserved
  /* this+0x8 */ struct _DCB dcb

  /* this+0x24 */ unsigned long dwProviderSubType
  /* this+0x28 */ unsigned long dwProviderOffset
  /* this+0x2c */ unsigned long dwProviderSize
  /* this+0x30 */ wchar_t[0x1] wcProviderData
}

struct _COMMPROP {
  /* this+0x0 */ unsigned short wPacketLength
  /* this+0x2 */ unsigned short wPacketVersion
  /* this+0x4 */ unsigned long dwServiceMask
  /* this+0x8 */ unsigned long dwReserved1
  /* this+0xc */ unsigned long dwMaxTxQueue
  /* this+0x10 */ unsigned long dwMaxRxQueue
  /* this+0x14 */ unsigned long dwMaxBaud
  /* this+0x18 */ unsigned long dwProvSubType
  /* this+0x1c */ unsigned long dwProvCapabilities
  /* this+0x20 */ unsigned long dwSettableParams
  /* this+0x24 */ unsigned long dwSettableBaud
  /* this+0x28 */ unsigned short wSettableData
  /* this+0x2a */ unsigned short wSettableStopParity
  /* this+0x2c */ unsigned long dwCurrentTxQueue
  /* this+0x30 */ unsigned long dwCurrentRxQueue
  /* this+0x34 */ unsigned long dwProvSpec1
  /* this+0x38 */ unsigned long dwProvSpec2
  /* this+0x3c */ wchar_t[0x1] wcProvChar
}

struct _COMMTIMEOUTS {
  /* this+0x0 */ unsigned long ReadIntervalTimeout
  /* this+0x4 */ unsigned long ReadTotalTimeoutMultiplier
  /* this+0x8 */ unsigned long ReadTotalTimeoutConstant
  /* this+0xc */ unsigned long WriteTotalTimeoutMultiplier
  /* this+0x10 */ unsigned long WriteTotalTimeoutConstant
}

struct _COMPATIBILITY_CONTEXT_ELEMENT {
  /* this+0x0 */ struct _GUID Id

  /* this+0x10 */ enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type
}

struct _COMSTAT {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned long fCtsHold
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned long fDsrHold
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned long fRlsdHold
  /* this(bf)+0x0:0x3 len(0x1) */ unsigned long fXoffHold
  /* this(bf)+0x0:0x4 len(0x1) */ unsigned long fXoffSent
  /* this(bf)+0x0:0x5 len(0x1) */ unsigned long fEof
  /* this(bf)+0x0:0x6 len(0x1) */ unsigned long fTxim
  /* this(bf)+0x0:0x7 len(0x19) */ unsigned long fReserved
  /* this+0x4 */ unsigned long cbInQue
  /* this+0x8 */ unsigned long cbOutQue
}

struct _CONNECTDLGSTRUCTA {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ struct _NETRESOURCEA * lpConnRes
  /* this+0xc */ unsigned long dwFlags
  /* this+0x10 */ unsigned long dwDevNum
}

struct _CONNECTDLGSTRUCTW {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ struct _NETRESOURCEW * lpConnRes
  /* this+0xc */ unsigned long dwFlags
  /* this+0x10 */ unsigned long dwDevNum
}

struct _CONSOLE_CURSOR_INFO {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ int bVisible
}

struct _CONSOLE_FONT_INFO {
  /* this+0x0 */ unsigned long nFont
  /* this+0x4 */ struct _COORD dwFontSize

}

struct _CONSOLE_FONT_INFOEX {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long nFont
  /* this+0x8 */ struct _COORD dwFontSize

  /* this+0xc */ unsigned int FontFamily
  /* this+0x10 */ unsigned int FontWeight
  /* this+0x14 */ wchar_t[0x20] FaceName
}

struct _CONSOLE_HISTORY_INFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int HistoryBufferSize
  /* this+0x8 */ unsigned int NumberOfHistoryBuffers
  /* this+0xc */ unsigned long dwFlags
}

struct _CONSOLE_READCONSOLE_CONTROL {
  /* this+0x0 */ unsigned long nLength
  /* this+0x4 */ unsigned long nInitialChars
  /* this+0x8 */ unsigned long dwCtrlWakeupMask
  /* this+0xc */ unsigned long dwControlKeyState
}

struct _CONSOLE_SCREEN_BUFFER_INFO {
  /* this+0x0 */ struct _COORD dwSize

  /* this+0x4 */ struct _COORD dwCursorPosition

  /* this+0x8 */ unsigned short wAttributes
  /* this+0xa */ struct _SMALL_RECT srWindow

  /* this+0x12 */ struct _COORD dwMaximumWindowSize

}

struct _CONSOLE_SCREEN_BUFFER_INFOEX {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct _COORD dwSize

  /* this+0x8 */ struct _COORD dwCursorPosition

  /* this+0xc */ unsigned short wAttributes
  /* this+0xe */ struct _SMALL_RECT srWindow

  /* this+0x16 */ struct _COORD dwMaximumWindowSize

  /* this+0x1a */ unsigned short wPopupAttributes
  /* this+0x1c */ int bFullscreenSupported
  /* this+0x20 */ unsigned long[0x10] ColorTable
}

struct _CONSOLE_SELECTION_INFO {
  /* this+0x0 */ unsigned long dwFlags
  /* this+0x4 */ struct _COORD dwSelectionAnchor

  /* this+0x8 */ struct _SMALL_RECT srSelection

}

struct _CONTEXT {
  /* this+0x0 */ unsigned long ContextFlags
  /* this+0x4 */ unsigned long Dr0
  /* this+0x8 */ unsigned long Dr1
  /* this+0xc */ unsigned long Dr2
  /* this+0x10 */ unsigned long Dr3
  /* this+0x14 */ unsigned long Dr6
  /* this+0x18 */ unsigned long Dr7
  /* this+0x1c */ struct _FLOATING_SAVE_AREA FloatSave

  /* this+0x8c */ unsigned long SegGs
  /* this+0x90 */ unsigned long SegFs
  /* this+0x94 */ unsigned long SegEs
  /* this+0x98 */ unsigned long SegDs
  /* this+0x9c */ unsigned long Edi
  /* this+0xa0 */ unsigned long Esi
  /* this+0xa4 */ unsigned long Ebx
  /* this+0xa8 */ unsigned long Edx
  /* this+0xac */ unsigned long Ecx
  /* this+0xb0 */ unsigned long Eax
  /* this+0xb4 */ unsigned long Ebp
  /* this+0xb8 */ unsigned long Eip
  /* this+0xbc */ unsigned long SegCs
  /* this+0xc0 */ unsigned long EFlags
  /* this+0xc4 */ unsigned long Esp
  /* this+0xc8 */ unsigned long SegSs
  /* this+0xcc */ unsigned char[0x200] ExtendedRegisters
}

struct _CONTEXT_CHUNK {
  /* this+0x0 */ long Offset
  /* this+0x4 */ unsigned long Length
}

struct _CONTEXT_EX {
  /* this+0x0 */ struct _CONTEXT_CHUNK All

  /* this+0x8 */ struct _CONTEXT_CHUNK Legacy

  /* this+0x10 */ struct _CONTEXT_CHUNK XState

}

struct _COORD {
  /* this+0x0 */ short X
  /* this+0x2 */ short Y
}

struct _CREATE_PROCESS_DEBUG_INFO {
  /* this+0x0 */ void * hFile
  /* this+0x4 */ void * hProcess
  /* this+0x8 */ void * hThread
  /* this+0xc */ void * lpBaseOfImage
  /* this+0x10 */ unsigned long dwDebugInfoFileOffset
  /* this+0x14 */ unsigned long nDebugInfoSize
  /* this+0x18 */ void * lpThreadLocalBase
  /* this+0x1c */ function  * lpStartAddress
  /* this+0x20 */ void * lpImageName
  /* this+0x24 */ unsigned short fUnicode
}

struct _CREATE_THREAD_DEBUG_INFO {
  /* this+0x0 */ void * hThread
  /* this+0x4 */ void * lpThreadLocalBase
  /* this+0x8 */ function  * lpStartAddress
}

struct _CRT_DOUBLE {
  /* this+0x0 */ double x
}

union _CRT_DOUBLE_COMPONENTS {
  /* this+0x0 */ double d
  /* this(bf)+0x0:0x0 len(0x34) */ unsigned __int64 mantissa
  /* this(bf)+0x0:0x34 len(0xb) */ unsigned __int64 exponent
  /* this(bf)+0x0:0x3f len(0x1) */ unsigned __int64 sign
}

struct _CRT_FLOAT {
  /* this+0x0 */ float f
}

struct _CSADDR_INFO {
  /* this+0x0 */ struct _SOCKET_ADDRESS LocalAddr

  /* this+0x8 */ struct _SOCKET_ADDRESS RemoteAddr

  /* this+0x10 */ int iSocketType
  /* this+0x14 */ int iProtocol
}

struct _Collvec {
  /* this+0x0 */ unsigned long _Hand
  /* this+0x4 */ unsigned int _Page
}

struct _CrtMemBlockHeader {
}

struct _CrtMemState {
  /* this+0x0 */ struct _CrtMemBlockHeader * pBlockHeader
  /* this+0x4 */ unsigned int[0x5] lCounts
  /* this+0x18 */ unsigned int[0x5] lSizes
  /* this+0x2c */ unsigned int lHighWaterCount
  /* this+0x30 */ unsigned int lTotalCount
}

struct _Ctypevec {
  /* this+0x0 */ unsigned long _Hand
  /* this+0x4 */ unsigned int _Page
  /* this+0x8 */ const short * _Table
  /* this+0xc */ int _Delfl
}

struct _Cvtvec {
  /* this+0x0 */ unsigned long _Hand
  /* this+0x4 */ unsigned int _Page
}

struct _DCB {
  /* this+0x0 */ unsigned long DCBlength
  /* this+0x4 */ unsigned long BaudRate
  /* this(bf)+0x8:0x0 len(0x1) */ unsigned long fBinary
  /* this(bf)+0x8:0x1 len(0x1) */ unsigned long fParity
  /* this(bf)+0x8:0x2 len(0x1) */ unsigned long fOutxCtsFlow
  /* this(bf)+0x8:0x3 len(0x1) */ unsigned long fOutxDsrFlow
  /* this(bf)+0x8:0x4 len(0x2) */ unsigned long fDtrControl
  /* this(bf)+0x8:0x6 len(0x1) */ unsigned long fDsrSensitivity
  /* this(bf)+0x8:0x7 len(0x1) */ unsigned long fTXContinueOnXoff
  /* this(bf)+0x8:0x8 len(0x1) */ unsigned long fOutX
  /* this(bf)+0x8:0x9 len(0x1) */ unsigned long fInX
  /* this(bf)+0x8:0xa len(0x1) */ unsigned long fErrorChar
  /* this(bf)+0x8:0xb len(0x1) */ unsigned long fNull
  /* this(bf)+0x8:0xc len(0x2) */ unsigned long fRtsControl
  /* this(bf)+0x8:0xe len(0x1) */ unsigned long fAbortOnError
  /* this(bf)+0x8:0xf len(0x11) */ unsigned long fDummy2
  /* this+0xc */ unsigned short wReserved
  /* this+0xe */ unsigned short XonLim
  /* this+0x10 */ unsigned short XoffLim
  /* this+0x12 */ unsigned char ByteSize
  /* this+0x13 */ unsigned char Parity
  /* this+0x14 */ unsigned char StopBits
  /* this+0x15 */ char XonChar
  /* this+0x16 */ char XoffChar
  /* this+0x17 */ char ErrorChar
  /* this+0x18 */ char EofChar
  /* this+0x19 */ char EvtChar
  /* this+0x1a */ unsigned short wReserved1
}

struct _DEBUG_EVENT {
  /* this+0x0 */ unsigned long dwDebugEventCode
  /* this+0x4 */ unsigned long dwProcessId
  /* this+0x8 */ unsigned long dwThreadId
    /* this+0xc */ union _DEBUG_EVENT::<unnamed-type-u> u

}

union _DEBUG_EVENT::<unnamed-type-u> {
  /* this+0x0 */ struct _EXCEPTION_DEBUG_INFO Exception

  /* this+0x0 */ struct _CREATE_THREAD_DEBUG_INFO CreateThread

  /* this+0x0 */ struct _CREATE_PROCESS_DEBUG_INFO CreateProcessInfo

  /* this+0x0 */ struct _EXIT_THREAD_DEBUG_INFO ExitThread

  /* this+0x0 */ struct _EXIT_PROCESS_DEBUG_INFO ExitProcess

  /* this+0x0 */ struct _LOAD_DLL_DEBUG_INFO LoadDll

  /* this+0x0 */ struct _UNLOAD_DLL_DEBUG_INFO UnloadDll

  /* this+0x0 */ struct _OUTPUT_DEBUG_STRING_INFO DebugString

  /* this+0x0 */ struct _RIP_INFO RipInfo

}

struct _DISCDLGSTRUCTA {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ char * lpLocalName
  /* this+0xc */ char * lpRemoteName
  /* this+0x10 */ unsigned long dwFlags
}

struct _DISCDLGSTRUCTW {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ wchar_t * lpLocalName
  /* this+0xc */ wchar_t * lpRemoteName
  /* this+0x10 */ unsigned long dwFlags
}

struct _DISPLAY_DEVICEA {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ char[0x20] DeviceName
  /* this+0x24 */ char[0x80] DeviceString
  /* this+0xa4 */ unsigned long StateFlags
  /* this+0xa8 */ char[0x80] DeviceID
  /* this+0x128 */ char[0x80] DeviceKey
}

struct _DISPLAY_DEVICEW {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ wchar_t[0x20] DeviceName
  /* this+0x44 */ wchar_t[0x80] DeviceString
  /* this+0x144 */ unsigned long StateFlags
  /* this+0x148 */ wchar_t[0x80] DeviceID
  /* this+0x248 */ wchar_t[0x80] DeviceKey
}

struct _DOCINFOA {
  /* this+0x0 */ int cbSize
  /* this+0x4 */ const char * lpszDocName
  /* this+0x8 */ const char * lpszOutput
  /* this+0xc */ const char * lpszDatatype
  /* this+0x10 */ unsigned long fwType
}

struct _DOCINFOW {
  /* this+0x0 */ int cbSize
  /* this+0x4 */ const wchar_t * lpszDocName
  /* this+0x8 */ const wchar_t * lpszOutput
  /* this+0xc */ const wchar_t * lpszDatatype
  /* this+0x10 */ unsigned long fwType
}

struct _DRAWPATRECT {
  /* this+0x0 */ struct tagPOINT ptPosition

  /* this+0x8 */ struct tagPOINT ptSize

  /* this+0x10 */ unsigned short wStyle
  /* this+0x12 */ unsigned short wPattern
}

union _Dconst {
  /* this+0x0 */ unsigned short[0x8] _Word
  /* this+0x0 */ float _Float
  /* this+0x0 */ double _Double
  /* this+0x0 */ double _Long_double
}

struct _EH4_EXCEPTION_REGISTRATION_RECORD {
  /* this+0x0 */ void * SavedESP
  /* this+0x4 */ struct _EXCEPTION_POINTERS * ExceptionPointers
  /* this+0x8 */ struct _EXCEPTION_REGISTRATION_RECORD SubRecord

  /* this+0x10 */ unsigned int EncodedScopeTable
  /* this+0x14 */ unsigned long TryLevel
}

struct _EH4_SCOPETABLE {
  /* this+0x0 */ unsigned long GSCookieOffset
  /* this+0x4 */ unsigned long GSCookieXOROffset
  /* this+0x8 */ unsigned long EHCookieOffset
  /* this+0xc */ unsigned long EHCookieXOROffset
  /* this+0x10 */ struct _EH4_SCOPETABLE_RECORD[0x1] ScopeRecord
}

struct _EH4_SCOPETABLE_RECORD {
  /* this+0x0 */ unsigned long EnclosingLevel
  /* this+0x4 */ function  * FilterFunc
  /* this+0x8 */ union <unnamed-tag> u

}

struct _ENLISTMENT_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID EnlistmentId

  /* this+0x10 */ struct _GUID TransactionId

  /* this+0x20 */ struct _GUID ResourceManagerId

}

struct _ENLISTMENT_CRM_INFORMATION {
  /* this+0x0 */ struct _GUID CrmTransactionManagerId

  /* this+0x10 */ struct _GUID CrmResourceManagerId

  /* this+0x20 */ struct _GUID CrmEnlistmentId

}

struct _ENUM_SERVICE_STATUSA {
  /* this+0x0 */ char * lpServiceName
  /* this+0x4 */ char * lpDisplayName
  /* this+0x8 */ struct _SERVICE_STATUS ServiceStatus

}

struct _ENUM_SERVICE_STATUSW {
  /* this+0x0 */ wchar_t * lpServiceName
  /* this+0x4 */ wchar_t * lpDisplayName
  /* this+0x8 */ struct _SERVICE_STATUS ServiceStatus

}

struct _ENUM_SERVICE_STATUS_PROCESSA {
  /* this+0x0 */ char * lpServiceName
  /* this+0x4 */ char * lpDisplayName
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatusProcess

}

struct _ENUM_SERVICE_STATUS_PROCESSW {
  /* this+0x0 */ wchar_t * lpServiceName
  /* this+0x4 */ wchar_t * lpDisplayName
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatusProcess

}

struct _EVENTLOGRECORD {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ unsigned long Reserved
  /* this+0x8 */ unsigned long RecordNumber
  /* this+0xc */ unsigned long TimeGenerated
  /* this+0x10 */ unsigned long TimeWritten
  /* this+0x14 */ unsigned long EventID
  /* this+0x18 */ unsigned short EventType
  /* this+0x1a */ unsigned short NumStrings
  /* this+0x1c */ unsigned short EventCategory
  /* this+0x1e */ unsigned short ReservedFlags
  /* this+0x20 */ unsigned long ClosingRecordNumber
  /* this+0x24 */ unsigned long StringOffset
  /* this+0x28 */ unsigned long UserSidLength
  /* this+0x2c */ unsigned long UserSidOffset
  /* this+0x30 */ unsigned long DataLength
  /* this+0x34 */ unsigned long DataOffset
}

struct _EVENTLOG_FULL_INFORMATION {
  /* this+0x0 */ unsigned long dwFull
}

struct _EVENTSFORLOGFILE {
  /* this+0x0 */ unsigned long ulSize
  /* this+0x4 */ wchar_t[0x100] szLogicalLogFile
  /* this+0x204 */ unsigned long ulNumRecords
  /* this+0x208 */ struct _EVENTLOGRECORD[0x0] pEventLogRecords
}

struct _EXCEPTION_DEBUG_INFO {
  /* this+0x0 */ struct _EXCEPTION_RECORD ExceptionRecord

  /* this+0x50 */ unsigned long dwFirstChance
}

struct _EXCEPTION_POINTERS {
  /* this+0x0 */ struct _EXCEPTION_RECORD * ExceptionRecord
  /* this+0x4 */ struct _CONTEXT * ContextRecord
}

struct _EXCEPTION_RECORD {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ struct _EXCEPTION_RECORD * ExceptionRecord
  /* this+0xc */ void * ExceptionAddress
  /* this+0x10 */ unsigned long NumberParameters
  /* this+0x14 */ unsigned long[0xf] ExceptionInformation
}

struct _EXCEPTION_RECORD32 {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ unsigned long ExceptionRecord
  /* this+0xc */ unsigned long ExceptionAddress
  /* this+0x10 */ unsigned long NumberParameters
  /* this+0x14 */ unsigned long[0xf] ExceptionInformation
}

struct _EXCEPTION_RECORD64 {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ unsigned __int64 ExceptionRecord
  /* this+0x10 */ unsigned __int64 ExceptionAddress
  /* this+0x18 */ unsigned long NumberParameters
  /* this+0x1c */ unsigned long __unusedAlignment
  /* this+0x20 */ unsigned __int64[0xf] ExceptionInformation
}

struct _EXCEPTION_RECORD_CRT {
  /* this+0x0 */ unsigned long exception_number
  /* this+0x4 */ unsigned long exception_flags
  /* this+0x8 */ unsigned long exception_record
  /* this+0xc */ unsigned long exception_address
  /* this+0x10 */ unsigned long number_parameters
  /* this+0x14 */ unsigned long exception_information
}

struct _EXCEPTION_REGISTRATION {
  /* this+0x0 */ unsigned long prev
  /* this+0x4 */ unsigned long handler
}

struct _EXCEPTION_REGISTRATION_COMMON {
  /* this+0x8 */ unsigned long scopetable
  /* this+0xc */ unsigned long trylevel
}

struct _EXCEPTION_REGISTRATION_RECORD {
  /* this+0x0 */ struct _EXCEPTION_REGISTRATION_RECORD * Next
  /* this+0x4 */ function  * Handler
}

struct _EXIT_PROCESS_DEBUG_INFO {
  /* this+0x0 */ unsigned long dwExitCode
}

struct _EXIT_THREAD_DEBUG_INFO {
  /* this+0x0 */ unsigned long dwExitCode
}

struct _FILEMUIINFO {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwVersion
  /* this+0x8 */ unsigned long dwFileType
  /* this+0xc */ unsigned char[0x10] pChecksum
  /* this+0x1c */ unsigned char[0x10] pServiceChecksum
  /* this+0x2c */ unsigned long dwLanguageNameOffset
  /* this+0x30 */ unsigned long dwTypeIDMainSize
  /* this+0x34 */ unsigned long dwTypeIDMainOffset
  /* this+0x38 */ unsigned long dwTypeNameMainOffset
  /* this+0x3c */ unsigned long dwTypeIDMUISize
  /* this+0x40 */ unsigned long dwTypeIDMUIOffset
  /* this+0x44 */ unsigned long dwTypeNameMUIOffset
  /* this+0x48 */ unsigned char[0x8] abBuffer
}

struct _FILETIME {
  /* this+0x0 */ unsigned long dwLowDateTime
  /* this+0x4 */ unsigned long dwHighDateTime
}

struct _FILEX {
  /* this+0x0 */ struct _iobuf f

  /* this+0x20 */ struct _RTL_CRITICAL_SECTION lock

}

struct _FILE_ALLOCATION_INFO {
  /* this+0x0 */ union _LARGE_INTEGER AllocationSize

}

struct _FILE_ATTRIBUTE_TAG_INFO {
  /* this+0x0 */ unsigned long FileAttributes
  /* this+0x4 */ unsigned long ReparseTag
}

struct _FILE_BASIC_INFO {
  /* this+0x0 */ union _LARGE_INTEGER CreationTime

  /* this+0x8 */ union _LARGE_INTEGER LastAccessTime

  /* this+0x10 */ union _LARGE_INTEGER LastWriteTime

  /* this+0x18 */ union _LARGE_INTEGER ChangeTime

  /* this+0x20 */ unsigned long FileAttributes
}

struct _FILE_COMPRESSION_INFO {
  /* this+0x0 */ union _LARGE_INTEGER CompressedFileSize

  /* this+0x8 */ unsigned short CompressionFormat
  /* this+0xa */ unsigned char CompressionUnitShift
  /* this+0xb */ unsigned char ChunkShift
  /* this+0xc */ unsigned char ClusterShift
  /* this+0xd */ unsigned char[0x3] Reserved
}

struct _FILE_DISPOSITION_INFO {
  /* this+0x0 */ unsigned char DeleteFileA
}

struct _FILE_END_OF_FILE_INFO {
  /* this+0x0 */ union _LARGE_INTEGER EndOfFile

}

struct _FILE_ID_BOTH_DIR_INFO {
  /* this+0x0 */ unsigned long NextEntryOffset
  /* this+0x4 */ unsigned long FileIndex
  /* this+0x8 */ union _LARGE_INTEGER CreationTime

  /* this+0x10 */ union _LARGE_INTEGER LastAccessTime

  /* this+0x18 */ union _LARGE_INTEGER LastWriteTime

  /* this+0x20 */ union _LARGE_INTEGER ChangeTime

  /* this+0x28 */ union _LARGE_INTEGER EndOfFile

  /* this+0x30 */ union _LARGE_INTEGER AllocationSize

  /* this+0x38 */ unsigned long FileAttributes
  /* this+0x3c */ unsigned long FileNameLength
  /* this+0x40 */ unsigned long EaSize
  /* this+0x44 */ char ShortNameLength
  /* this+0x46 */ wchar_t[0xc] ShortName
  /* this+0x60 */ union _LARGE_INTEGER FileId

  /* this+0x68 */ wchar_t[0x1] FileName
}

struct _FILE_IO_PRIORITY_HINT_INFO {
  /* this+0x0 */ enum _PRIORITY_HINT PriorityHint
}

struct _FILE_NAME_INFO {
  /* this+0x0 */ unsigned long FileNameLength
  /* this+0x4 */ wchar_t[0x1] FileName
}

struct _FILE_NOTIFY_INFORMATION {
  /* this+0x0 */ unsigned long NextEntryOffset
  /* this+0x4 */ unsigned long Action
  /* this+0x8 */ unsigned long FileNameLength
  /* this+0xc */ wchar_t[0x1] FileName
}

struct _FILE_REMOTE_PROTOCOL_INFO {
  /* this+0x0 */ unsigned short StructureVersion
  /* this+0x2 */ unsigned short StructureSize
  /* this+0x4 */ unsigned long Protocol
  /* this+0x8 */ unsigned short ProtocolMajorVersion
  /* this+0xa */ unsigned short ProtocolMinorVersion
  /* this+0xc */ unsigned short ProtocolRevision
  /* this+0xe */ unsigned short Reserved
  /* this+0x10 */ unsigned long Flags
    /* this+0x14 */ struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-GenericReserved> GenericReserved

    /* this+0x34 */ struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-ProtocolSpecificReserved> ProtocolSpecificReserved

}

struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-GenericReserved> {
  /* this+0x0 */ unsigned long[0x8] Reserved
}

struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-ProtocolSpecificReserved> {
  /* this+0x0 */ unsigned long[0x10] Reserved
}

struct _FILE_RENAME_INFO {
  /* this+0x0 */ unsigned char ReplaceIfExists
  /* this+0x4 */ void * RootDirectory
  /* this+0x8 */ unsigned long FileNameLength
  /* this+0xc */ wchar_t[0x1] FileName
}

union _FILE_SEGMENT_ELEMENT {
  /* this+0x0 */ void * Buffer
  /* this+0x0 */ unsigned __int64 Alignment
}

struct _FILE_STANDARD_INFO {
  /* this+0x0 */ union _LARGE_INTEGER AllocationSize

  /* this+0x8 */ union _LARGE_INTEGER EndOfFile

  /* this+0x10 */ unsigned long NumberOfLinks
  /* this+0x14 */ unsigned char DeletePending
  /* this+0x15 */ unsigned char Directory
}

struct _FILE_STREAM_INFO {
  /* this+0x0 */ unsigned long NextEntryOffset
  /* this+0x4 */ unsigned long StreamNameLength
  /* this+0x8 */ union _LARGE_INTEGER StreamSize

  /* this+0x10 */ union _LARGE_INTEGER StreamAllocationSize

  /* this+0x18 */ wchar_t[0x1] StreamName
}

struct _FIXED {
  /* this+0x0 */ unsigned short fract
  /* this+0x2 */ short value
}

struct _FLOAT128 {
  /* this+0x0 */ __int64 LowPart
  /* this+0x8 */ __int64 HighPart
}

struct _FLOATING_SAVE_AREA {
  /* this+0x0 */ unsigned long ControlWord
  /* this+0x4 */ unsigned long StatusWord
  /* this+0x8 */ unsigned long TagWord
  /* this+0xc */ unsigned long ErrorOffset
  /* this+0x10 */ unsigned long ErrorSelector
  /* this+0x14 */ unsigned long DataOffset
  /* this+0x18 */ unsigned long DataSelector
  /* this+0x1c */ unsigned char[0x50] RegisterArea
  /* this+0x6c */ unsigned long Cr0NpxState
}

struct _FOCUS_EVENT_RECORD {
  /* this+0x0 */ int bSetFocus
}

struct _FP128 {
  /* this+0x0 */ unsigned long[0x4] W
}

struct _FP80 {
  /* this+0x0 */ unsigned short[0x5] W
}

struct _FPIEEE_EXCEPTION_FLAGS {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned int Inexact
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned int Underflow
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned int Overflow
  /* this(bf)+0x0:0x3 len(0x1) */ unsigned int ZeroDivide
  /* this(bf)+0x0:0x4 len(0x1) */ unsigned int InvalidOperation
}

struct _FPIEEE_RECORD {
  /* this(bf)+0x0:0x0 len(0x2) */ unsigned int RoundingMode
  /* this(bf)+0x0:0x2 len(0x3) */ unsigned int Precision
  /* this(bf)+0x0:0x5 len(0xc) */ unsigned int Operation
  /* this+0x4 */ struct _FPIEEE_EXCEPTION_FLAGS Cause

  /* this+0x8 */ struct _FPIEEE_EXCEPTION_FLAGS Enable

  /* this+0xc */ struct _FPIEEE_EXCEPTION_FLAGS Status

  /* this+0x10 */ struct _FPIEEE_VALUE Operand1

  /* this+0x30 */ struct _FPIEEE_VALUE Operand2

  /* this+0x50 */ struct _FPIEEE_VALUE Result

}

struct _FPIEEE_VALUE {
  /* this+0x0 */ union <unnamed-tag> Value

  /* this(bf)+0x10:0x0 len(0x1) */ unsigned int OperandValid
  /* this(bf)+0x10:0x1 len(0x4) */ unsigned int Format
}

struct _FPO_DATA {
  /* this+0x0 */ unsigned long ulOffStart
  /* this+0x4 */ unsigned long cbProcSize
  /* this+0x8 */ unsigned long cdwLocals
  /* this+0xc */ unsigned short cdwParams
  /* this(bf)+0xe:0x0 len(0x8) */ unsigned short cbProlog
  /* this(bf)+0xe:0x8 len(0x3) */ unsigned short cbRegs
  /* this(bf)+0xe:0xb len(0x1) */ unsigned short fHasSEH
  /* this(bf)+0xe:0xc len(0x1) */ unsigned short fUseBP
  /* this(bf)+0xe:0xd len(0x1) */ unsigned short reserved
  /* this(bf)+0xe:0xe len(0x2) */ unsigned short cbFrame
}

struct _FPQ64 {
  /* this+0x0 */ __int64[0x2] W
}

struct _FloatOutStruct {
  /* this+0x0 */ short exp
  /* this+0x2 */ char sign
  /* this+0x3 */ char ManLen
  /* this+0x4 */ char[0x16] man
}

struct _GDI_TEB_BATCH {
  /* this+0x0 */ unsigned long Offset
  /* this+0x4 */ unsigned long HDC
  /* this+0x8 */ unsigned long[0x136] Buffer
}

struct _GENERIC_MAPPING {
  /* this+0x0 */ unsigned long GenericRead
  /* this+0x4 */ unsigned long GenericWrite
  /* this+0x8 */ unsigned long GenericExecute
  /* this+0xc */ unsigned long GenericAll
}

struct _GG_AUTH_DATA {
  /* this+0x0 */ unsigned long dwIndex
  /* this+0x4 */ unsigned long dwValue1
  /* this+0x8 */ unsigned long dwValue2
  /* this+0xc */ unsigned long dwValue3
}

struct _GG_AUTH_PROTOCOL {
}

struct _GLYPHMETRICS {
  /* this+0x0 */ unsigned int gmBlackBoxX
  /* this+0x4 */ unsigned int gmBlackBoxY
  /* this+0x8 */ struct tagPOINT gmptGlyphOrigin

  /* this+0x10 */ short gmCellIncX
  /* this+0x12 */ short gmCellIncY
}

struct _GLYPHMETRICSFLOAT {
  /* this+0x0 */ float gmfBlackBoxX
  /* this+0x4 */ float gmfBlackBoxY
  /* this+0x8 */ struct _POINTFLOAT gmfptGlyphOrigin

  /* this+0x10 */ float gmfCellIncX
  /* this+0x14 */ float gmfCellIncY
}

struct _GRADIENT_RECT {
  /* this+0x0 */ unsigned long UpperLeft
  /* this+0x4 */ unsigned long LowerRight
}

struct _GRADIENT_TRIANGLE {
  /* this+0x0 */ unsigned long Vertex1
  /* this+0x4 */ unsigned long Vertex2
  /* this+0x8 */ unsigned long Vertex3
}

struct _GROUP_AFFINITY {
  /* this+0x0 */ unsigned long Mask
  /* this+0x4 */ unsigned short Group
  /* this+0x6 */ unsigned short[0x3] Reserved
}

struct _GROUP_RELATIONSHIP {
  /* this+0x0 */ unsigned short MaximumGroupCount
  /* this+0x2 */ unsigned short ActiveGroupCount
  /* this+0x4 */ unsigned char[0x14] Reserved
  /* this+0x18 */ struct _PROCESSOR_GROUP_INFO[0x1] GroupInfo
}

struct _GUID {
  /* this+0x0 */ unsigned long Data1
  /* this+0x4 */ unsigned short Data2
  /* this+0x6 */ unsigned short Data3
  /* this+0x8 */ unsigned char[0x8] Data4
}

struct _HARDWARE_COUNTER_DATA {
  /* this+0x0 */ enum _HARDWARE_COUNTER_TYPE Type
  /* this+0x4 */ unsigned long Reserved
  /* this+0x8 */ unsigned __int64 Value
}

class _HeapManager {
  /* this+0x0 */ function  * pOpNew
  /* this+0x4 */ function  * pOpDelete
    /* this+0x8 */ struct _HeapManager::Block * head
  /* this+0xc */ struct _HeapManager::Block * tail
  /* this+0x10 */ unsigned int blockLeft
  public void Constructor(function  *, function  *)
  public void * getMemory(unsigned int, int)
  public void Destructor()
}

struct _HeapManager::Block {
  /* this+0x0 */ struct _HeapManager::Block * next
  /* this+0x4 */ char[0x1000] memBlock
  public void Block()
}

struct _I64 {
  /* this+0x0 */ unsigned long[0x2] W
}

struct _ICONINFO {
  /* this+0x0 */ int fIcon
  /* this+0x4 */ unsigned long xHotspot
  /* this+0x8 */ unsigned long yHotspot
  /* this+0xc */ struct HBITMAP__ * hbmMask
  /* this+0x10 */ struct HBITMAP__ * hbmColor
}

struct _ICONINFOEXA {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ int fIcon
  /* this+0x8 */ unsigned long xHotspot
  /* this+0xc */ unsigned long yHotspot
  /* this+0x10 */ struct HBITMAP__ * hbmMask
  /* this+0x14 */ struct HBITMAP__ * hbmColor
  /* this+0x18 */ unsigned short wResID
  /* this+0x1a */ char[0x104] szModName
  /* this+0x11e */ char[0x104] szResName
}

struct _ICONINFOEXW {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ int fIcon
  /* this+0x8 */ unsigned long xHotspot
  /* this+0xc */ unsigned long yHotspot
  /* this+0x10 */ struct HBITMAP__ * hbmMask
  /* this+0x14 */ struct HBITMAP__ * hbmColor
  /* this+0x18 */ unsigned short wResID
  /* this+0x1a */ wchar_t[0x104] szModName
  /* this+0x222 */ wchar_t[0x104] szResName
}

struct _IMAGEHLP_LINE {
  /* this+0x0 */ unsigned long SizeOfStruct
  /* this+0x4 */ void * Key
  /* this+0x8 */ unsigned long LineNumber
  /* this+0xc */ char * FileName
  /* this+0x10 */ unsigned long Address
}

struct _IMAGEHLP_MODULE {
  /* this+0x0 */ unsigned long SizeOfStruct
  /* this+0x4 */ unsigned long BaseOfImage
  /* this+0x8 */ unsigned long ImageSize
  /* this+0xc */ unsigned long TimeDateStamp
  /* this+0x10 */ unsigned long CheckSum
  /* this+0x14 */ unsigned long NumSyms
  /* this+0x18 */ enum SYM_TYPE SymType
  /* this+0x1c */ char[0x20] ModuleName
  /* this+0x3c */ char[0x100] ImageName
  /* this+0x13c */ char[0x100] LoadedImageName
}

struct _IMAGEHLP_SYMBOL {
  /* this+0x0 */ unsigned long SizeOfStruct
  /* this+0x4 */ unsigned long Address
  /* this+0x8 */ unsigned long Size
  /* this+0xc */ unsigned long Flags
  /* this+0x10 */ unsigned long MaxNameLength
  /* this+0x14 */ char[0x1] Name
}

struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned __int64 BeginAddress
  /* this+0x8 */ unsigned __int64 EndAddress
  /* this+0x10 */ unsigned __int64 ExceptionHandler
  /* this+0x18 */ unsigned __int64 HandlerData
  /* this+0x20 */ unsigned __int64 PrologEndAddress
}

struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long BeginAddress
  /* this+0x4 */ unsigned long EndAddress
  /* this+0x8 */ unsigned long ExceptionHandler
  /* this+0xc */ unsigned long HandlerData
  /* this+0x10 */ unsigned long PrologEndAddress
}

struct _IMAGE_ARCHIVE_MEMBER_HEADER {
  /* this+0x0 */ unsigned char[0x10] Name
  /* this+0x10 */ unsigned char[0xc] Date
  /* this+0x1c */ unsigned char[0x6] UserID
  /* this+0x22 */ unsigned char[0x6] GroupID
  /* this+0x28 */ unsigned char[0x8] Mode
  /* this+0x30 */ unsigned char[0xa] Size
  /* this+0x3a */ unsigned char[0x2] EndHeader
}

union _IMAGE_AUX_SYMBOL {
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym> Sym

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-File> File

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Section> Section

  /* this+0x0 */ struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-CRC> CRC

}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-CRC> {
  /* this+0x0 */ unsigned long crc
  /* this+0x4 */ unsigned char[0xe] rgbReserved
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-File> {
  /* this+0x0 */ unsigned char[0x12] Name
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Section> {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ unsigned short NumberOfRelocations
  /* this+0x6 */ unsigned short NumberOfLinenumbers
  /* this+0x8 */ unsigned long CheckSum
  /* this+0xc */ short Number
  /* this+0xe */ unsigned char Selection
  /* this+0xf */ unsigned char bReserved
  /* this+0x10 */ short HighNumber
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym> {
  /* this+0x0 */ unsigned long TagIndex
    /* this+0x4 */ union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc> Misc

    /* this+0x8 */ union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry> FcnAry

  /* this+0x10 */ unsigned short TvIndex
}

union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry> {
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function> Function

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array> Array

}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array> {
  /* this+0x0 */ unsigned short[0x4] Dimension
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function> {
  /* this+0x0 */ unsigned long PointerToLinenumber
  /* this+0x4 */ unsigned long PointerToNextFunction
}

union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc> {
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz> LnSz

  /* this+0x0 */ unsigned long TotalSize
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz> {
  /* this+0x0 */ unsigned short Linenumber
  /* this+0x2 */ unsigned short Size
}

union _IMAGE_AUX_SYMBOL_EX {
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Sym> Sym

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-File> File

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Section> Section

  /* this+0x0 */ struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef

  /* this+0x12 */ unsigned char[0x2] rgbReserved
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-CRC> CRC

}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-CRC> {
  /* this+0x0 */ unsigned long crc
  /* this+0x4 */ unsigned char[0x10] rgbReserved
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-File> {
  /* this+0x0 */ unsigned char[0x14] Name
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Section> {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ unsigned short NumberOfRelocations
  /* this+0x6 */ unsigned short NumberOfLinenumbers
  /* this+0x8 */ unsigned long CheckSum
  /* this+0xc */ short Number
  /* this+0xe */ unsigned char Selection
  /* this+0xf */ unsigned char bReserved
  /* this+0x10 */ short HighNumber
  /* this+0x12 */ unsigned char[0x2] rgbReserved
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Sym> {
  /* this+0x0 */ unsigned long WeakDefaultSymIndex
  /* this+0x4 */ unsigned long WeakSearchType
  /* this+0x8 */ unsigned char[0xc] rgbReserved
}

struct _IMAGE_BASE_RELOCATION {
  /* this+0x0 */ unsigned long VirtualAddress
  /* this+0x4 */ unsigned long SizeOfBlock
}

struct _IMAGE_BOUND_FORWARDER_REF {
  /* this+0x0 */ unsigned long TimeDateStamp
  /* this+0x4 */ unsigned short OffsetModuleName
  /* this+0x6 */ unsigned short Reserved
}

struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
  /* this+0x0 */ unsigned long TimeDateStamp
  /* this+0x4 */ unsigned short OffsetModuleName
  /* this+0x6 */ unsigned short NumberOfModuleForwarderRefs
}

struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long FuncStart
  /* this(bf)+0x4:0x0 len(0x8) */ unsigned long PrologLen
  /* this(bf)+0x4:0x8 len(0x16) */ unsigned long FuncLen
  /* this(bf)+0x4:0x1e len(0x1) */ unsigned long ThirtyTwoBit
  /* this(bf)+0x4:0x1f len(0x1) */ unsigned long ExceptionFlag
}

struct _IMAGE_COFF_SYMBOLS_HEADER {
  /* this+0x0 */ unsigned long NumberOfSymbols
  /* this+0x4 */ unsigned long LvaToFirstSymbol
  /* this+0x8 */ unsigned long NumberOfLinenumbers
  /* this+0xc */ unsigned long LvaToFirstLinenumber
  /* this+0x10 */ unsigned long RvaToFirstByteOfCode
  /* this+0x14 */ unsigned long RvaToLastByteOfCode
  /* this+0x18 */ unsigned long RvaToFirstByteOfData
  /* this+0x1c */ unsigned long RvaToLastByteOfData
}

struct _IMAGE_DATA_DIRECTORY {
  /* this+0x0 */ unsigned long VirtualAddress
  /* this+0x4 */ unsigned long Size
}

struct _IMAGE_DEBUG_DIRECTORY {
  /* this+0x0 */ unsigned long Characteristics
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned long Type
  /* this+0x10 */ unsigned long SizeOfData
  /* this+0x14 */ unsigned long AddressOfRawData
  /* this+0x18 */ unsigned long PointerToRawData
}

struct _IMAGE_DEBUG_MISC {
  /* this+0x0 */ unsigned long DataType
  /* this+0x4 */ unsigned long Length
  /* this+0x8 */ unsigned char Unicode
  /* this+0x9 */ unsigned char[0x3] Reserved
  /* this+0xc */ unsigned char[0x1] Data
}

struct _IMAGE_DOS_HEADER {
  /* this+0x0 */ unsigned short e_magic
  /* this+0x2 */ unsigned short e_cblp
  /* this+0x4 */ unsigned short e_cp
  /* this+0x6 */ unsigned short e_crlc
  /* this+0x8 */ unsigned short e_cparhdr
  /* this+0xa */ unsigned short e_minalloc
  /* this+0xc */ unsigned short e_maxalloc
  /* this+0xe */ unsigned short e_ss
  /* this+0x10 */ unsigned short e_sp
  /* this+0x12 */ unsigned short e_csum
  /* this+0x14 */ unsigned short e_ip
  /* this+0x16 */ unsigned short e_cs
  /* this+0x18 */ unsigned short e_lfarlc
  /* this+0x1a */ unsigned short e_ovno
  /* this+0x1c */ unsigned short[0x4] e_res
  /* this+0x24 */ unsigned short e_oemid
  /* this+0x26 */ unsigned short e_oeminfo
  /* this+0x28 */ unsigned short[0xa] e_res2
  /* this+0x3c */ long e_lfanew
}

struct _IMAGE_EXPORT_DIRECTORY {
  /* this+0x0 */ unsigned long Characteristics
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned long Name
  /* this+0x10 */ unsigned long Base
  /* this+0x14 */ unsigned long NumberOfFunctions
  /* this+0x18 */ unsigned long NumberOfNames
  /* this+0x1c */ unsigned long AddressOfFunctions
  /* this+0x20 */ unsigned long AddressOfNames
  /* this+0x24 */ unsigned long AddressOfNameOrdinals
}

struct _IMAGE_FILE_HEADER {
  /* this+0x0 */ unsigned short Machine
  /* this+0x2 */ unsigned short NumberOfSections
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned long PointerToSymbolTable
  /* this+0xc */ unsigned long NumberOfSymbols
  /* this+0x10 */ unsigned short SizeOfOptionalHeader
  /* this+0x12 */ unsigned short Characteristics
}

struct _IMAGE_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long StartingAddress
  /* this+0x4 */ unsigned long EndingAddress
  /* this+0x8 */ unsigned long EndOfPrologue
}

struct _IMAGE_FUNCTION_ENTRY64 {
  /* this+0x0 */ unsigned __int64 StartingAddress
  /* this+0x8 */ unsigned __int64 EndingAddress
  /* this+0x10 */ unsigned __int64 EndOfPrologue
  /* this+0x10 */ unsigned __int64 UnwindInfoAddress
}

struct _IMAGE_IMPORT_BY_NAME {
  /* this+0x0 */ unsigned short Hint
  /* this+0x2 */ unsigned char[0x1] Name
}

struct _IMAGE_IMPORT_DESCRIPTOR {
  /* this+0x0 */ unsigned long Characteristics
  /* this+0x0 */ unsigned long OriginalFirstThunk
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned long ForwarderChain
  /* this+0xc */ unsigned long Name
  /* this+0x10 */ unsigned long FirstThunk
}

struct _IMAGE_LINENUMBER {
    /* this+0x0 */ union _IMAGE_LINENUMBER::<unnamed-type-Type> Type

  /* this+0x4 */ unsigned short Linenumber
}

union _IMAGE_LINENUMBER::<unnamed-type-Type> {
  /* this+0x0 */ unsigned long SymbolTableIndex
  /* this+0x0 */ unsigned long VirtualAddress
}

struct _IMAGE_NT_HEADERS {
  /* this+0x0 */ unsigned long Signature
  /* this+0x4 */ struct _IMAGE_FILE_HEADER FileHeader

  /* this+0x18 */ struct _IMAGE_OPTIONAL_HEADER OptionalHeader

}

struct _IMAGE_NT_HEADERS64 {
  /* this+0x0 */ unsigned long Signature
  /* this+0x4 */ struct _IMAGE_FILE_HEADER FileHeader

  /* this+0x18 */ struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader

}

struct _IMAGE_OPTIONAL_HEADER {
  /* this+0x0 */ unsigned short Magic
  /* this+0x2 */ unsigned char MajorLinkerVersion
  /* this+0x3 */ unsigned char MinorLinkerVersion
  /* this+0x4 */ unsigned long SizeOfCode
  /* this+0x8 */ unsigned long SizeOfInitializedData
  /* this+0xc */ unsigned long SizeOfUninitializedData
  /* this+0x10 */ unsigned long AddressOfEntryPoint
  /* this+0x14 */ unsigned long BaseOfCode
  /* this+0x18 */ unsigned long BaseOfData
  /* this+0x1c */ unsigned long ImageBase
  /* this+0x20 */ unsigned long SectionAlignment
  /* this+0x24 */ unsigned long FileAlignment
  /* this+0x28 */ unsigned short MajorOperatingSystemVersion
  /* this+0x2a */ unsigned short MinorOperatingSystemVersion
  /* this+0x2c */ unsigned short MajorImageVersion
  /* this+0x2e */ unsigned short MinorImageVersion
  /* this+0x30 */ unsigned short MajorSubsystemVersion
  /* this+0x32 */ unsigned short MinorSubsystemVersion
  /* this+0x34 */ unsigned long Win32VersionValue
  /* this+0x38 */ unsigned long SizeOfImage
  /* this+0x3c */ unsigned long SizeOfHeaders
  /* this+0x40 */ unsigned long CheckSum
  /* this+0x44 */ unsigned short Subsystem
  /* this+0x46 */ unsigned short DllCharacteristics
  /* this+0x48 */ unsigned long SizeOfStackReserve
  /* this+0x4c */ unsigned long SizeOfStackCommit
  /* this+0x50 */ unsigned long SizeOfHeapReserve
  /* this+0x54 */ unsigned long SizeOfHeapCommit
  /* this+0x58 */ unsigned long LoaderFlags
  /* this+0x5c */ unsigned long NumberOfRvaAndSizes
  /* this+0x60 */ struct _IMAGE_DATA_DIRECTORY[0x10] DataDirectory
}

struct _IMAGE_OPTIONAL_HEADER64 {
  /* this+0x0 */ unsigned short Magic
  /* this+0x2 */ unsigned char MajorLinkerVersion
  /* this+0x3 */ unsigned char MinorLinkerVersion
  /* this+0x4 */ unsigned long SizeOfCode
  /* this+0x8 */ unsigned long SizeOfInitializedData
  /* this+0xc */ unsigned long SizeOfUninitializedData
  /* this+0x10 */ unsigned long AddressOfEntryPoint
  /* this+0x14 */ unsigned long BaseOfCode
  /* this+0x18 */ unsigned __int64 ImageBase
  /* this+0x20 */ unsigned long SectionAlignment
  /* this+0x24 */ unsigned long FileAlignment
  /* this+0x28 */ unsigned short MajorOperatingSystemVersion
  /* this+0x2a */ unsigned short MinorOperatingSystemVersion
  /* this+0x2c */ unsigned short MajorImageVersion
  /* this+0x2e */ unsigned short MinorImageVersion
  /* this+0x30 */ unsigned short MajorSubsystemVersion
  /* this+0x32 */ unsigned short MinorSubsystemVersion
  /* this+0x34 */ unsigned long Win32VersionValue
  /* this+0x38 */ unsigned long SizeOfImage
  /* this+0x3c */ unsigned long SizeOfHeaders
  /* this+0x40 */ unsigned long CheckSum
  /* this+0x44 */ unsigned short Subsystem
  /* this+0x46 */ unsigned short DllCharacteristics
  /* this+0x48 */ unsigned __int64 SizeOfStackReserve
  /* this+0x50 */ unsigned __int64 SizeOfStackCommit
  /* this+0x58 */ unsigned __int64 SizeOfHeapReserve
  /* this+0x60 */ unsigned __int64 SizeOfHeapCommit
  /* this+0x68 */ unsigned long LoaderFlags
  /* this+0x6c */ unsigned long NumberOfRvaAndSizes
  /* this+0x70 */ struct _IMAGE_DATA_DIRECTORY[0x10] DataDirectory
}

struct _IMAGE_OS2_HEADER {
  /* this+0x0 */ unsigned short ne_magic
  /* this+0x2 */ char ne_ver
  /* this+0x3 */ char ne_rev
  /* this+0x4 */ unsigned short ne_enttab
  /* this+0x6 */ unsigned short ne_cbenttab
  /* this+0x8 */ long ne_crc
  /* this+0xc */ unsigned short ne_flags
  /* this+0xe */ unsigned short ne_autodata
  /* this+0x10 */ unsigned short ne_heap
  /* this+0x12 */ unsigned short ne_stack
  /* this+0x14 */ long ne_csip
  /* this+0x18 */ long ne_sssp
  /* this+0x1c */ unsigned short ne_cseg
  /* this+0x1e */ unsigned short ne_cmod
  /* this+0x20 */ unsigned short ne_cbnrestab
  /* this+0x22 */ unsigned short ne_segtab
  /* this+0x24 */ unsigned short ne_rsrctab
  /* this+0x26 */ unsigned short ne_restab
  /* this+0x28 */ unsigned short ne_modtab
  /* this+0x2a */ unsigned short ne_imptab
  /* this+0x2c */ long ne_nrestab
  /* this+0x30 */ unsigned short ne_cmovent
  /* this+0x32 */ unsigned short ne_align
  /* this+0x34 */ unsigned short ne_cres
  /* this+0x36 */ unsigned char ne_exetyp
  /* this+0x37 */ unsigned char ne_flagsothers
  /* this+0x38 */ unsigned short ne_pretthunks
  /* this+0x3a */ unsigned short ne_psegrefbytes
  /* this+0x3c */ unsigned short ne_swaparea
  /* this+0x3e */ unsigned short ne_expver
}

struct _IMAGE_RELOCATION {
  /* this+0x0 */ unsigned long VirtualAddress
  /* this+0x0 */ unsigned long RelocCount
  /* this+0x4 */ unsigned long SymbolTableIndex
  /* this+0x8 */ unsigned short Type
}

struct _IMAGE_RESOURCE_DATA_ENTRY {
  /* this+0x0 */ unsigned long OffsetToData
  /* this+0x4 */ unsigned long Size
  /* this+0x8 */ unsigned long CodePage
  /* this+0xc */ unsigned long Reserved
}

struct _IMAGE_RESOURCE_DIRECTORY {
  /* this+0x0 */ unsigned long Characteristics
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned short NumberOfNamedEntries
  /* this+0xe */ unsigned short NumberOfIdEntries
}

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
  /* this(bf)+0x0:0x0 len(0x1f) */ unsigned long NameOffset
  /* this(bf)+0x0:0x1f len(0x1) */ unsigned long NameIsString
  /* this+0x0 */ unsigned long Name
  /* this+0x0 */ unsigned short Id
  /* this+0x4 */ unsigned long OffsetToData
  /* this(bf)+0x4:0x0 len(0x1f) */ unsigned long OffsetToDirectory
  /* this(bf)+0x4:0x1f len(0x1) */ unsigned long DataIsDirectory
}

struct _IMAGE_RESOURCE_DIRECTORY_STRING {
  /* this+0x0 */ unsigned short Length
  /* this+0x2 */ char[0x1] NameString
}

struct _IMAGE_RESOURCE_DIR_STRING_U {
  /* this+0x0 */ unsigned short Length
  /* this+0x2 */ wchar_t[0x1] NameString
}

struct _IMAGE_ROM_HEADERS {
  /* this+0x0 */ struct _IMAGE_FILE_HEADER FileHeader

  /* this+0x14 */ struct _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader

}

struct _IMAGE_ROM_OPTIONAL_HEADER {
  /* this+0x0 */ unsigned short Magic
  /* this+0x2 */ unsigned char MajorLinkerVersion
  /* this+0x3 */ unsigned char MinorLinkerVersion
  /* this+0x4 */ unsigned long SizeOfCode
  /* this+0x8 */ unsigned long SizeOfInitializedData
  /* this+0xc */ unsigned long SizeOfUninitializedData
  /* this+0x10 */ unsigned long AddressOfEntryPoint
  /* this+0x14 */ unsigned long BaseOfCode
  /* this+0x18 */ unsigned long BaseOfData
  /* this+0x1c */ unsigned long BaseOfBss
  /* this+0x20 */ unsigned long GprMask
  /* this+0x24 */ unsigned long[0x4] CprMask
  /* this+0x34 */ unsigned long GpValue
}

struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long BeginAddress
  /* this+0x4 */ unsigned long EndAddress
  /* this+0x8 */ unsigned long UnwindInfoAddress
}

struct _IMAGE_SECTION_HEADER {
  /* this+0x0 */ unsigned char[0x8] Name
  /* this+0x8 */ union <unnamed-tag> Misc

  /* this+0xc */ unsigned long VirtualAddress
  /* this+0x10 */ unsigned long SizeOfRawData
  /* this+0x14 */ unsigned long PointerToRawData
  /* this+0x18 */ unsigned long PointerToRelocations
  /* this+0x1c */ unsigned long PointerToLinenumbers
  /* this+0x20 */ unsigned short NumberOfRelocations
  /* this+0x22 */ unsigned short NumberOfLinenumbers
  /* this+0x24 */ unsigned long Characteristics
}

union _IMAGE_SECTION_HEADER::<unnamed-type-Misc> {
  /* this+0x0 */ unsigned long PhysicalAddress
  /* this+0x0 */ unsigned long VirtualSize
}

struct _IMAGE_SEPARATE_DEBUG_HEADER {
  /* this+0x0 */ unsigned short Signature
  /* this+0x2 */ unsigned short Flags
  /* this+0x4 */ unsigned short Machine
  /* this+0x6 */ unsigned short Characteristics
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ unsigned long CheckSum
  /* this+0x10 */ unsigned long ImageBase
  /* this+0x14 */ unsigned long SizeOfImage
  /* this+0x18 */ unsigned long NumberOfSections
  /* this+0x1c */ unsigned long ExportedNamesSize
  /* this+0x20 */ unsigned long DebugDirectorySize
  /* this+0x24 */ unsigned long SectionAlignment
  /* this+0x28 */ unsigned long[0x2] Reserved
}

struct _IMAGE_SYMBOL {
    /* this+0x0 */ union _IMAGE_SYMBOL::<unnamed-type-N> N

  /* this+0x8 */ unsigned long Value
  /* this+0xc */ short SectionNumber
  /* this+0xe */ unsigned short Type
  /* this+0x10 */ unsigned char StorageClass
  /* this+0x11 */ unsigned char NumberOfAuxSymbols
}

union _IMAGE_SYMBOL::<unnamed-type-N> {
  /* this+0x0 */ unsigned char[0x8] ShortName
    /* this+0x0 */ struct _IMAGE_SYMBOL::<unnamed-type-N>::<unnamed-type-Name> Name

  /* this+0x0 */ unsigned long[0x2] LongName
}

struct _IMAGE_SYMBOL::<unnamed-type-N>::<unnamed-type-Name> {
  /* this+0x0 */ unsigned long Short
  /* this+0x4 */ unsigned long Long
}

struct _IMAGE_SYMBOL_EX {
    /* this+0x0 */ union _IMAGE_SYMBOL_EX::<unnamed-type-N> N

  /* this+0x8 */ unsigned long Value
  /* this+0xc */ long SectionNumber
  /* this+0x10 */ unsigned short Type
  /* this+0x12 */ unsigned char StorageClass
  /* this+0x13 */ unsigned char NumberOfAuxSymbols
}

union _IMAGE_SYMBOL_EX::<unnamed-type-N> {
  /* this+0x0 */ unsigned char[0x8] ShortName
    /* this+0x0 */ struct _IMAGE_SYMBOL_EX::<unnamed-type-N>::<unnamed-type-Name> Name

  /* this+0x0 */ unsigned long[0x2] LongName
}

struct _IMAGE_SYMBOL_EX::<unnamed-type-N>::<unnamed-type-Name> {
  /* this+0x0 */ unsigned long Short
  /* this+0x4 */ unsigned long Long
}

struct _IMAGE_THUNK_DATA32 {
    /* this+0x0 */ union _IMAGE_THUNK_DATA32::<unnamed-type-u1> u1

}

union _IMAGE_THUNK_DATA32::<unnamed-type-u1> {
  /* this+0x0 */ unsigned long ForwarderString
  /* this+0x0 */ unsigned long Function
  /* this+0x0 */ unsigned long Ordinal
  /* this+0x0 */ unsigned long AddressOfData
}

struct _IMAGE_THUNK_DATA64 {
    /* this+0x0 */ union _IMAGE_THUNK_DATA64::<unnamed-type-u1> u1

}

union _IMAGE_THUNK_DATA64::<unnamed-type-u1> {
  /* this+0x0 */ unsigned __int64 ForwarderString
  /* this+0x0 */ unsigned __int64 Function
  /* this+0x0 */ unsigned __int64 Ordinal
  /* this+0x0 */ unsigned __int64 AddressOfData
}

struct _IMAGE_TLS_DIRECTORY32 {
  /* this+0x0 */ unsigned long StartAddressOfRawData
  /* this+0x4 */ unsigned long EndAddressOfRawData
  /* this+0x8 */ unsigned long AddressOfIndex
  /* this+0xc */ unsigned long AddressOfCallBacks
  /* this+0x10 */ unsigned long SizeOfZeroFill
  /* this+0x14 */ unsigned long Characteristics
}

struct _IMAGE_TLS_DIRECTORY64 {
  /* this+0x0 */ unsigned __int64 StartAddressOfRawData
  /* this+0x8 */ unsigned __int64 EndAddressOfRawData
  /* this+0x10 */ unsigned __int64 AddressOfIndex
  /* this+0x18 */ unsigned __int64 AddressOfCallBacks
  /* this+0x20 */ unsigned long SizeOfZeroFill
  /* this+0x24 */ unsigned long Characteristics
}

struct _IMAGE_VXD_HEADER {
  /* this+0x0 */ unsigned short e32_magic
  /* this+0x2 */ unsigned char e32_border
  /* this+0x3 */ unsigned char e32_worder
  /* this+0x4 */ unsigned long e32_level
  /* this+0x8 */ unsigned short e32_cpu
  /* this+0xa */ unsigned short e32_os
  /* this+0xc */ unsigned long e32_ver
  /* this+0x10 */ unsigned long e32_mflags
  /* this+0x14 */ unsigned long e32_mpages
  /* this+0x18 */ unsigned long e32_startobj
  /* this+0x1c */ unsigned long e32_eip
  /* this+0x20 */ unsigned long e32_stackobj
  /* this+0x24 */ unsigned long e32_esp
  /* this+0x28 */ unsigned long e32_pagesize
  /* this+0x2c */ unsigned long e32_lastpagesize
  /* this+0x30 */ unsigned long e32_fixupsize
  /* this+0x34 */ unsigned long e32_fixupsum
  /* this+0x38 */ unsigned long e32_ldrsize
  /* this+0x3c */ unsigned long e32_ldrsum
  /* this+0x40 */ unsigned long e32_objtab
  /* this+0x44 */ unsigned long e32_objcnt
  /* this+0x48 */ unsigned long e32_objmap
  /* this+0x4c */ unsigned long e32_itermap
  /* this+0x50 */ unsigned long e32_rsrctab
  /* this+0x54 */ unsigned long e32_rsrccnt
  /* this+0x58 */ unsigned long e32_restab
  /* this+0x5c */ unsigned long e32_enttab
  /* this+0x60 */ unsigned long e32_dirtab
  /* this+0x64 */ unsigned long e32_dircnt
  /* this+0x68 */ unsigned long e32_fpagetab
  /* this+0x6c */ unsigned long e32_frectab
  /* this+0x70 */ unsigned long e32_impmod
  /* this+0x74 */ unsigned long e32_impmodcnt
  /* this+0x78 */ unsigned long e32_impproc
  /* this+0x7c */ unsigned long e32_pagesum
  /* this+0x80 */ unsigned long e32_datapage
  /* this+0x84 */ unsigned long e32_preload
  /* this+0x88 */ unsigned long e32_nrestab
  /* this+0x8c */ unsigned long e32_cbnrestab
  /* this+0x90 */ unsigned long e32_nressum
  /* this+0x94 */ unsigned long e32_autodata
  /* this+0x98 */ unsigned long e32_debuginfo
  /* this+0x9c */ unsigned long e32_debuglen
  /* this+0xa0 */ unsigned long e32_instpreload
  /* this+0xa4 */ unsigned long e32_instdemand
  /* this+0xa8 */ unsigned long e32_heapsize
  /* this+0xac */ unsigned char[0xc] e32_res3
  /* this+0xb8 */ unsigned long e32_winresoff
  /* this+0xbc */ unsigned long e32_winreslen
  /* this+0xc0 */ unsigned short e32_devid
  /* this+0xc2 */ unsigned short e32_ddkver
}

struct _INPUT_RECORD {
  /* this+0x0 */ unsigned short EventType
    /* this+0x4 */ union _INPUT_RECORD::<unnamed-type-Event> Event

}

union _INPUT_RECORD::<unnamed-type-Event> {
  /* this+0x0 */ struct _KEY_EVENT_RECORD KeyEvent

  /* this+0x0 */ struct _MOUSE_EVENT_RECORD MouseEvent

  /* this+0x0 */ struct _WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent

  /* this+0x0 */ struct _MENU_EVENT_RECORD MenuEvent

  /* this+0x0 */ struct _FOCUS_EVENT_RECORD FocusEvent

}

struct _IO_COUNTERS {
  /* this+0x0 */ unsigned __int64 ReadOperationCount
  /* this+0x8 */ unsigned __int64 WriteOperationCount
  /* this+0x10 */ unsigned __int64 OtherOperationCount
  /* this+0x18 */ unsigned __int64 ReadTransferCount
  /* this+0x20 */ unsigned __int64 WriteTransferCount
  /* this+0x28 */ unsigned __int64 OtherTransferCount
}

struct _ImageArchitectureEntry {
  /* this+0x0 */ unsigned long FixupInstRVA
  /* this+0x4 */ unsigned long NewInst
}

struct _ImageArchitectureHeader {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned int AmaskValue
  /* this(bf)+0x0:0x8 len(0x8) */ unsigned int AmaskShift
  /* this+0x4 */ unsigned long FirstEntryRVA
}

struct _JIT_DEBUG_INFO {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwProcessorArchitecture
  /* this+0x8 */ unsigned long dwThreadID
  /* this+0xc */ unsigned long dwReserved0
  /* this+0x10 */ unsigned __int64 lpExceptionAddress
  /* this+0x18 */ unsigned __int64 lpExceptionRecord
  /* this+0x20 */ unsigned __int64 lpContextRecord
}

struct _JMP_BUF {
  /* this+0x0 */ unsigned long saved_ebp
  /* this+0x4 */ unsigned long saved_ebx
  /* this+0x8 */ unsigned long saved_edi
  /* this+0xc */ unsigned long saved_esi
  /* this+0x10 */ unsigned long saved_esp
  /* this+0x14 */ unsigned long saved_return
  /* this+0x18 */ unsigned long saved_xregistration
  /* this+0x1c */ unsigned long saved_trylevel
  /* this+0x20 */ unsigned long version_cookie
  /* this+0x24 */ unsigned long unwind_func
  /* this+0x28 */ unsigned long unwind_data
}

struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
  /* this+0x0 */ void * CompletionKey
  /* this+0x4 */ void * CompletionPort
}

struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
  /* this+0x0 */ union _LARGE_INTEGER TotalUserTime

  /* this+0x8 */ union _LARGE_INTEGER TotalKernelTime

  /* this+0x10 */ union _LARGE_INTEGER ThisPeriodTotalUserTime

  /* this+0x18 */ union _LARGE_INTEGER ThisPeriodTotalKernelTime

  /* this+0x20 */ unsigned long TotalPageFaultCount
  /* this+0x24 */ unsigned long TotalProcesses
  /* this+0x28 */ unsigned long ActiveProcesses
  /* this+0x2c */ unsigned long TotalTerminatedProcesses
}

struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
  /* this+0x0 */ struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo

  /* this+0x30 */ struct _IO_COUNTERS IoInfo

}

struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
  /* this+0x0 */ union _LARGE_INTEGER PerProcessUserTimeLimit

  /* this+0x8 */ union _LARGE_INTEGER PerJobUserTimeLimit

  /* this+0x10 */ unsigned long LimitFlags
  /* this+0x14 */ unsigned long MinimumWorkingSetSize
  /* this+0x18 */ unsigned long MaximumWorkingSetSize
  /* this+0x1c */ unsigned long ActiveProcessLimit
  /* this+0x20 */ unsigned long Affinity
  /* this+0x24 */ unsigned long PriorityClass
  /* this+0x28 */ unsigned long SchedulingClass
}

struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
  /* this+0x0 */ unsigned long NumberOfAssignedProcesses
  /* this+0x4 */ unsigned long NumberOfProcessIdsInList
  /* this+0x8 */ unsigned long[0x1] ProcessIdList
}

struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
  /* this+0x0 */ unsigned long UIRestrictionsClass
}

struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
  /* this+0x0 */ unsigned long EndOfJobTimeAction
}

struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
  /* this+0x0 */ struct _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation

  /* this+0x30 */ struct _IO_COUNTERS IoInfo

  /* this+0x60 */ unsigned long ProcessMemoryLimit
  /* this+0x64 */ unsigned long JobMemoryLimit
  /* this+0x68 */ unsigned long PeakProcessMemoryUsed
  /* this+0x6c */ unsigned long PeakJobMemoryUsed
}

struct _JOBOBJECT_JOBSET_INFORMATION {
  /* this+0x0 */ unsigned long MemberLevel
}

struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
  /* this+0x0 */ unsigned long SecurityLimitFlags
  /* this+0x4 */ void * JobToken
  /* this+0x8 */ struct _TOKEN_GROUPS * SidsToDisable
  /* this+0xc */ struct _TOKEN_PRIVILEGES * PrivilegesToDelete
  /* this+0x10 */ struct _TOKEN_GROUPS * RestrictedSids
}

struct _JOB_SET_ARRAY {
  /* this+0x0 */ void * JobHandle
  /* this+0x4 */ unsigned long MemberLevel
  /* this+0x8 */ unsigned long Flags
}

struct _KCRM_MARSHAL_HEADER {
  /* this+0x0 */ unsigned long VersionMajor
  /* this+0x4 */ unsigned long VersionMinor
  /* this+0x8 */ unsigned long NumProtocols
  /* this+0xc */ unsigned long Unused
}

struct _KCRM_PROTOCOL_BLOB {
  /* this+0x0 */ struct _GUID ProtocolId

  /* this+0x10 */ unsigned long StaticInfoLength
  /* this+0x14 */ unsigned long TransactionIdInfoLength
  /* this+0x18 */ unsigned long Unused1
  /* this+0x1c */ unsigned long Unused2
}

struct _KCRM_TRANSACTION_BLOB {
  /* this+0x0 */ struct _GUID UOW

  /* this+0x10 */ struct _GUID TmIdentity

  /* this+0x20 */ unsigned long IsolationLevel
  /* this+0x24 */ unsigned long IsolationFlags
  /* this+0x28 */ unsigned long Timeout
  /* this+0x2c */ wchar_t[0x40] Description
}

struct _KDHELP {
  /* this+0x0 */ unsigned long Thread
  /* this+0x4 */ unsigned long ThCallbackStack
  /* this+0x8 */ unsigned long NextCallback
  /* this+0xc */ unsigned long FramePointer
  /* this+0x10 */ unsigned long KiCallUserMode
  /* this+0x14 */ unsigned long KeUserCallbackDispatcher
  /* this+0x18 */ unsigned long SystemRangeStart
  /* this+0x1c */ unsigned long ThCallbackBStore
  /* this+0x20 */ unsigned long KiUserExceptionDispatcher
  /* this+0x24 */ unsigned long StackBase
  /* this+0x28 */ unsigned long StackLimit
  /* this+0x2c */ unsigned long[0x5] Reserved
}

struct _KDHELP64 {
  /* this+0x0 */ unsigned __int64 Thread
  /* this+0x8 */ unsigned long ThCallbackStack
  /* this+0xc */ unsigned long ThCallbackBStore
  /* this+0x10 */ unsigned long NextCallback
  /* this+0x14 */ unsigned long FramePointer
  /* this+0x18 */ unsigned __int64 KiCallUserMode
  /* this+0x20 */ unsigned __int64 KeUserCallbackDispatcher
  /* this+0x28 */ unsigned __int64 SystemRangeStart
  /* this+0x30 */ unsigned __int64 KiUserExceptionDispatcher
  /* this+0x38 */ unsigned __int64 StackBase
  /* this+0x40 */ unsigned __int64 StackLimit
  /* this+0x48 */ unsigned __int64[0x5] Reserved
}

struct _KEY_EVENT_RECORD {
  /* this+0x0 */ int bKeyDown
  /* this+0x4 */ unsigned short wRepeatCount
  /* this+0x6 */ unsigned short wVirtualKeyCode
  /* this+0x8 */ unsigned short wVirtualScanCode
    /* this+0xa */ union _KEY_EVENT_RECORD::<unnamed-type-uChar> uChar

  /* this+0xc */ unsigned long dwControlKeyState
}

union _KEY_EVENT_RECORD::<unnamed-type-uChar> {
  /* this+0x0 */ wchar_t UnicodeChar
  /* this+0x0 */ char AsciiChar
}

struct _KSYSTEM_TIME {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ long High1Time
  /* this+0x8 */ long High2Time
}

struct _KTMOBJECT_CURSOR {
  /* this+0x0 */ struct _GUID LastQuery

  /* this+0x10 */ unsigned long ObjectIdCount
  /* this+0x14 */ struct _GUID[0x1] ObjectIds
}

struct _KUSER_SHARED_DATA {
  /* this+0x0 */ unsigned long TickCountLowDeprecated
  /* this+0x4 */ unsigned long TickCountMultiplier
  /* this+0x8 */ volatile struct _KSYSTEM_TIME InterruptTime

  /* this+0x14 */ volatile struct _KSYSTEM_TIME SystemTime

  /* this+0x20 */ volatile struct _KSYSTEM_TIME TimeZoneBias

  /* this+0x2c */ unsigned short ImageNumberLow
  /* this+0x2e */ unsigned short ImageNumberHigh
  /* this+0x30 */ wchar_t[0x104] NtSystemRoot
  /* this+0x238 */ unsigned long MaxStackTraceDepth
  /* this+0x23c */ unsigned long CryptoExponent
  /* this+0x240 */ unsigned long TimeZoneId
  /* this+0x244 */ unsigned long LargePageMinimum
  /* this+0x248 */ unsigned long[0x7] Reserved2
  /* this+0x264 */ enum _NT_PRODUCT_TYPE NtProductType
  /* this+0x268 */ unsigned char ProductTypeIsValid
  /* this+0x26c */ unsigned long NtMajorVersion
  /* this+0x270 */ unsigned long NtMinorVersion
  /* this+0x274 */ unsigned char[0x40] ProcessorFeatures
  /* this+0x2b4 */ unsigned long Reserved1
  /* this+0x2b8 */ unsigned long Reserved3
  /* this+0x2bc */ volatile unsigned long TimeSlip
  /* this+0x2c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture
  /* this+0x2c8 */ union _LARGE_INTEGER SystemExpirationDate

  /* this+0x2d0 */ unsigned long SuiteMask
  /* this+0x2d4 */ unsigned char KdDebuggerEnabled
  /* this+0x2d8 */ volatile unsigned long ActiveConsoleId
  /* this+0x2dc */ volatile unsigned long DismountCount
  /* this+0x2e0 */ unsigned long ComPlusPackage
  /* this+0x2e4 */ unsigned long LastSystemRITEventTickCount
  /* this+0x2e8 */ unsigned long NumberOfPhysicalPages
  /* this+0x2ec */ unsigned char SafeBootMode
  /* this+0x2f0 */ unsigned long TraceLogging
  /* this+0x2f8 */ unsigned __int64 Fill0
  /* this+0x300 */ unsigned __int64[0x4] SystemCall
  /* this+0x320 */ volatile struct _KSYSTEM_TIME TickCount

  /* this+0x320 */ volatile unsigned __int64 TickCountQuad
}

union _LARGE_INTEGER {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ long HighPart
  /* this+0x0 */ struct <unnamed-tag> u

  /* this+0x0 */ __int64 QuadPart
}

struct _LARGE_INTEGER::<unnamed-type-u> {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ long HighPart
}

struct _LDBL12 {
  /* this+0x0 */ unsigned char[0xc] ld12
}

struct _LDOUBLE {
  /* this+0x0 */ unsigned char[0xa] ld
}

struct _LDT_ENTRY {
  /* this+0x0 */ unsigned short LimitLow
  /* this+0x2 */ unsigned short BaseLow
    /* this+0x4 */ union _LDT_ENTRY::<unnamed-type-HighWord> HighWord

}

union _LDT_ENTRY::<unnamed-type-HighWord> {
    /* this+0x0 */ struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> Bytes

    /* this+0x0 */ struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> Bits

}

struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> {
  /* this(bf)+0x0:0x0 len(0x8) */ unsigned long BaseMid
  /* this(bf)+0x0:0x8 len(0x5) */ unsigned long Type
  /* this(bf)+0x0:0xd len(0x2) */ unsigned long Dpl
  /* this(bf)+0x0:0xf len(0x1) */ unsigned long Pres
  /* this(bf)+0x0:0x10 len(0x4) */ unsigned long LimitHi
  /* this(bf)+0x0:0x14 len(0x1) */ unsigned long Sys
  /* this(bf)+0x0:0x15 len(0x1) */ unsigned long Reserved_0
  /* this(bf)+0x0:0x16 len(0x1) */ unsigned long Default_Big
  /* this(bf)+0x0:0x17 len(0x1) */ unsigned long Granularity
  /* this(bf)+0x0:0x18 len(0x8) */ unsigned long BaseHi
}

struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> {
  /* this+0x0 */ unsigned char BaseMid
  /* this+0x1 */ unsigned char Flags1
  /* this+0x2 */ unsigned char Flags2
  /* this+0x3 */ unsigned char BaseHi
}

struct _LIST_ENTRY {
  /* this+0x0 */ struct _LIST_ENTRY * Flink
  /* this+0x4 */ struct _LIST_ENTRY * Blink
}

struct _LOAD_DLL_DEBUG_INFO {
  /* this+0x0 */ void * hFile
  /* this+0x4 */ void * lpBaseOfDll
  /* this+0x8 */ unsigned long dwDebugInfoFileOffset
  /* this+0xc */ unsigned long nDebugInfoSize
  /* this+0x10 */ void * lpImageName
  /* this+0x14 */ unsigned short fUnicode
}

struct _LONGDOUBLE {
  /* this+0x0 */ double x
}

struct _LOTTO_NUMBERS {
  /* this+0x0 */ bool isLoadedFromDB
  /* this+0x4 */ int[0x6] numbers
  public void Init()
}

struct _LUID {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ long HighPart
}

struct _LUID_AND_ATTRIBUTES {
  /* this+0x0 */ struct _LUID Luid

  /* this+0x8 */ unsigned long Attributes
}

class _LocaleUpdate {
  /* this+0x0 */ struct localeinfo_struct localeinfo

  /* this+0x8 */ struct _tiddata * ptd
  /* this+0xc */ bool updated
  public void _LocaleUpdate::_LocaleUpdate(struct localeinfo_struct *)
  public void ~_LocaleUpdate()
  public struct localeinfo_struct * GetLocaleT()
  public void * __vecDelDtor(unsigned int)
}

struct _M128A {
  /* this+0x0 */ unsigned __int64 Low
  /* this+0x8 */ __int64 High
}

struct _MAT2 {
  /* this+0x0 */ struct _FIXED eM11

  /* this+0x4 */ struct _FIXED eM12

  /* this+0x8 */ struct _FIXED eM21

  /* this+0xc */ struct _FIXED eM22

}

struct _MEMORYSTATUS {
  /* this+0x0 */ unsigned long dwLength
  /* this+0x4 */ unsigned long dwMemoryLoad
  /* this+0x8 */ unsigned long dwTotalPhys
  /* this+0xc */ unsigned long dwAvailPhys
  /* this+0x10 */ unsigned long dwTotalPageFile
  /* this+0x14 */ unsigned long dwAvailPageFile
  /* this+0x18 */ unsigned long dwTotalVirtual
  /* this+0x1c */ unsigned long dwAvailVirtual
}

struct _MEMORYSTATUSEX {
  /* this+0x0 */ unsigned long dwLength
  /* this+0x4 */ unsigned long dwMemoryLoad
  /* this+0x8 */ unsigned __int64 ullTotalPhys
  /* this+0x10 */ unsigned __int64 ullAvailPhys
  /* this+0x18 */ unsigned __int64 ullTotalPageFile
  /* this+0x20 */ unsigned __int64 ullAvailPageFile
  /* this+0x28 */ unsigned __int64 ullTotalVirtual
  /* this+0x30 */ unsigned __int64 ullAvailVirtual
  /* this+0x38 */ unsigned __int64 ullAvailExtendedVirtual
}

struct _MEMORY_BASIC_INFORMATION {
  /* this+0x0 */ void * BaseAddress
  /* this+0x4 */ void * AllocationBase
  /* this+0x8 */ unsigned long AllocationProtect
  /* this+0xc */ unsigned long RegionSize
  /* this+0x10 */ unsigned long State
  /* this+0x14 */ unsigned long Protect
  /* this+0x18 */ unsigned long Type
}

struct _MEMORY_BASIC_INFORMATION32 {
  /* this+0x0 */ unsigned long BaseAddress
  /* this+0x4 */ unsigned long AllocationBase
  /* this+0x8 */ unsigned long AllocationProtect
  /* this+0xc */ unsigned long RegionSize
  /* this+0x10 */ unsigned long State
  /* this+0x14 */ unsigned long Protect
  /* this+0x18 */ unsigned long Type
}

struct _MEMORY_BASIC_INFORMATION64 {
  /* this+0x0 */ unsigned __int64 BaseAddress
  /* this+0x8 */ unsigned __int64 AllocationBase
  /* this+0x10 */ unsigned long AllocationProtect
  /* this+0x14 */ unsigned long __alignment1
  /* this+0x18 */ unsigned __int64 RegionSize
  /* this+0x20 */ unsigned long State
  /* this+0x24 */ unsigned long Protect
  /* this+0x28 */ unsigned long Type
  /* this+0x2c */ unsigned long __alignment2
}

struct _MENU_EVENT_RECORD {
  /* this+0x0 */ unsigned int dwCommandId
}

struct _MESSAGE_RESOURCE_BLOCK {
  /* this+0x0 */ unsigned long LowId
  /* this+0x4 */ unsigned long HighId
  /* this+0x8 */ unsigned long OffsetToEntries
}

struct _MESSAGE_RESOURCE_DATA {
  /* this+0x0 */ unsigned long NumberOfBlocks
  /* this+0x4 */ struct _MESSAGE_RESOURCE_BLOCK[0x1] Blocks
}

struct _MESSAGE_RESOURCE_ENTRY {
  /* this+0x0 */ unsigned short Length
  /* this+0x2 */ unsigned short Flags
  /* this+0x4 */ unsigned char[0x1] Text
}

struct _MEventItemInfo {
  /* this+0x0 */ int MNum
  /* this+0x4 */ int AID
  /* this+0x8 */ int money
  /* this+0xc */ int ItemID
  /* this+0x10 */ short ItemCount
  /* this+0x14 */ int couponNum
  /* this+0x18 */ int remark
  /* this+0x1c */ struct _SYSTEMTIME expireTime

  /* this+0x2c */ int hireTime
}

struct _MINIDUMP_CALLBACK_INFORMATION {
  /* this+0x0 */ function  * CallbackRoutine
  /* this+0x4 */ void * CallbackParam
}

struct _MINIDUMP_CALLBACK_INPUT {
  /* this+0x0 */ unsigned long ProcessId
  /* this+0x4 */ void * ProcessHandle
  /* this+0x8 */ unsigned long CallbackType
  /* this+0xc */ HRESULT Status
  /* this+0xc */ struct _MINIDUMP_THREAD_CALLBACK Thread

  /* this+0xc */ struct _MINIDUMP_THREAD_EX_CALLBACK ThreadEx

  /* this+0xc */ struct _MINIDUMP_MODULE_CALLBACK Module

  /* this+0xc */ struct _MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread

  /* this+0xc */ struct _MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule

  /* this+0xc */ struct _MINIDUMP_IO_CALLBACK Io

  /* this+0xc */ struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure

  /* this+0xc */ unsigned long SecondaryFlags
}

struct _MINIDUMP_CALLBACK_OUTPUT {
  /* this+0x0 */ unsigned long ModuleWriteFlags
  /* this+0x0 */ unsigned long ThreadWriteFlags
  /* this+0x0 */ unsigned long SecondaryFlags
  /* this+0x0 */ unsigned __int64 MemoryBase
  /* this+0x8 */ unsigned long MemorySize
  /* this+0x0 */ int CheckCancel
  /* this+0x4 */ int Cancel
  /* this+0x0 */ void * Handle
  /* this+0x0 */ struct _MINIDUMP_MEMORY_INFO VmRegion

  /* this+0x30 */ int Continue
  /* this+0x0 */ HRESULT Status
}

struct _MINIDUMP_EXCEPTION_INFORMATION {
  /* this+0x0 */ unsigned long ThreadId
  /* this+0x4 */ struct _EXCEPTION_POINTERS * ExceptionPointers
  /* this+0x8 */ int ClientPointers
}

struct _MINIDUMP_INCLUDE_MODULE_CALLBACK {
  /* this+0x0 */ unsigned __int64 BaseOfImage
}

struct _MINIDUMP_INCLUDE_THREAD_CALLBACK {
  /* this+0x0 */ unsigned long ThreadId
}

struct _MINIDUMP_IO_CALLBACK {
  /* this+0x0 */ void * Handle
  /* this+0x4 */ unsigned __int64 Offset
  /* this+0xc */ void * Buffer
  /* this+0x10 */ unsigned long BufferBytes
}

struct _MINIDUMP_MEMORY_INFO {
  /* this+0x0 */ unsigned __int64 BaseAddress
  /* this+0x8 */ unsigned __int64 AllocationBase
  /* this+0x10 */ unsigned int AllocationProtect
  /* this+0x14 */ unsigned int __alignment1
  /* this+0x18 */ unsigned __int64 RegionSize
  /* this+0x20 */ unsigned int State
  /* this+0x24 */ unsigned int Protect
  /* this+0x28 */ unsigned int Type
  /* this+0x2c */ unsigned int __alignment2
}

struct _MINIDUMP_MODULE_CALLBACK {
  /* this+0x0 */ wchar_t * FullPath
  /* this+0x4 */ unsigned __int64 BaseOfImage
  /* this+0xc */ unsigned long SizeOfImage
  /* this+0x10 */ unsigned long CheckSum
  /* this+0x14 */ unsigned long TimeDateStamp
  /* this+0x18 */ struct tagVS_FIXEDFILEINFO VersionInfo

  /* this+0x4c */ void * CvRecord
  /* this+0x50 */ unsigned long SizeOfCvRecord
  /* this+0x54 */ void * MiscRecord
  /* this+0x58 */ unsigned long SizeOfMiscRecord
}

struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {
  /* this+0x0 */ unsigned __int64 Offset
  /* this+0x8 */ unsigned long Bytes
  /* this+0xc */ HRESULT FailureStatus
}

struct _MINIDUMP_THREAD_CALLBACK {
  /* this+0x0 */ unsigned long ThreadId
  /* this+0x4 */ void * ThreadHandle
  /* this+0x8 */ struct _CONTEXT Context

  /* this+0x2d4 */ unsigned long SizeOfContext
  /* this+0x2d8 */ unsigned __int64 StackBase
  /* this+0x2e0 */ unsigned __int64 StackEnd
}

struct _MINIDUMP_THREAD_EX_CALLBACK {
  /* this+0x0 */ unsigned long ThreadId
  /* this+0x4 */ void * ThreadHandle
  /* this+0x8 */ struct _CONTEXT Context

  /* this+0x2d4 */ unsigned long SizeOfContext
  /* this+0x2d8 */ unsigned __int64 StackBase
  /* this+0x2e0 */ unsigned __int64 StackEnd
  /* this+0x2e8 */ unsigned __int64 BackingStoreBase
  /* this+0x2f0 */ unsigned __int64 BackingStoreEnd
}

struct _MINIDUMP_USER_STREAM {
  /* this+0x0 */ unsigned int Type
  /* this+0x4 */ unsigned long BufferSize
  /* this+0x8 */ void * Buffer
}

struct _MINIDUMP_USER_STREAM_INFORMATION {
  /* this+0x0 */ unsigned long UserStreamCount
  /* this+0x4 */ struct _MINIDUMP_USER_STREAM * UserStreamArray
}

struct _MMCKINFO {
  /* this+0x0 */ unsigned long ckid
  /* this+0x4 */ unsigned long cksize
  /* this+0x8 */ unsigned long fccType
  /* this+0xc */ unsigned long dwDataOffset
  /* this+0x10 */ unsigned long dwFlags
}

struct _MMIOINFO {
  /* this+0x0 */ unsigned long dwFlags
  /* this+0x4 */ unsigned long fccIOProc
  /* this+0x8 */ function  * pIOProc
  /* this+0xc */ unsigned int wErrorRet
  /* this+0x10 */ struct HTASK__ * htask
  /* this+0x14 */ long cchBuffer
  /* this+0x18 */ char * pchBuffer
  /* this+0x1c */ char * pchNext
  /* this+0x20 */ char * pchEndRead
  /* this+0x24 */ char * pchEndWrite
  /* this+0x28 */ long lBufOffset
  /* this+0x2c */ long lDiskOffset
  /* this+0x30 */ unsigned long[0x3] adwInfo
  /* this+0x3c */ unsigned long dwReserved1
  /* this+0x40 */ unsigned long dwReserved2
  /* this+0x44 */ struct HMMIO__ * hmmio
}

struct _MODEMDEVCAPS {
  /* this+0x0 */ unsigned long dwActualSize
  /* this+0x4 */ unsigned long dwRequiredSize
  /* this+0x8 */ unsigned long dwDevSpecificOffset
  /* this+0xc */ unsigned long dwDevSpecificSize
  /* this+0x10 */ unsigned long dwModemProviderVersion
  /* this+0x14 */ unsigned long dwModemManufacturerOffset
  /* this+0x18 */ unsigned long dwModemManufacturerSize
  /* this+0x1c */ unsigned long dwModemModelOffset
  /* this+0x20 */ unsigned long dwModemModelSize
  /* this+0x24 */ unsigned long dwModemVersionOffset
  /* this+0x28 */ unsigned long dwModemVersionSize
  /* this+0x2c */ unsigned long dwDialOptions
  /* this+0x30 */ unsigned long dwCallSetupFailTimer
  /* this+0x34 */ unsigned long dwInactivityTimeout
  /* this+0x38 */ unsigned long dwSpeakerVolume
  /* this+0x3c */ unsigned long dwSpeakerMode
  /* this+0x40 */ unsigned long dwModemOptions
  /* this+0x44 */ unsigned long dwMaxDTERate
  /* this+0x48 */ unsigned long dwMaxDCERate
  /* this+0x4c */ unsigned char[0x1] abVariablePortion
}

struct _MODEMSETTINGS {
  /* this+0x0 */ unsigned long dwActualSize
  /* this+0x4 */ unsigned long dwRequiredSize
  /* this+0x8 */ unsigned long dwDevSpecificOffset
  /* this+0xc */ unsigned long dwDevSpecificSize
  /* this+0x10 */ unsigned long dwCallSetupFailTimer
  /* this+0x14 */ unsigned long dwInactivityTimeout
  /* this+0x18 */ unsigned long dwSpeakerVolume
  /* this+0x1c */ unsigned long dwSpeakerMode
  /* this+0x20 */ unsigned long dwPreferredModemOptions
  /* this+0x24 */ unsigned long dwNegotiatedModemOptions
  /* this+0x28 */ unsigned long dwNegotiatedDCERate
  /* this+0x2c */ unsigned char[0x1] abVariablePortion
}

struct _MOUSE_EVENT_RECORD {
  /* this+0x0 */ struct _COORD dwMousePosition

  /* this+0x4 */ unsigned long dwButtonState
  /* this+0x8 */ unsigned long dwControlKeyState
  /* this+0xc */ unsigned long dwEventFlags
}

struct _NETCONNECTINFOSTRUCT {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long dwSpeed
  /* this+0xc */ unsigned long dwDelay
  /* this+0x10 */ unsigned long dwOptDataSize
}

struct _NETINFOSTRUCT {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ unsigned long dwProviderVersion
  /* this+0x8 */ unsigned long dwStatus
  /* this+0xc */ unsigned long dwCharacteristics
  /* this+0x10 */ unsigned long dwHandle
  /* this+0x14 */ unsigned short wNetType
  /* this+0x18 */ unsigned long dwPrinters
  /* this+0x1c */ unsigned long dwDrives
}

struct _NETRESOURCEA {
  /* this+0x0 */ unsigned long dwScope
  /* this+0x4 */ unsigned long dwType
  /* this+0x8 */ unsigned long dwDisplayType
  /* this+0xc */ unsigned long dwUsage
  /* this+0x10 */ char * lpLocalName
  /* this+0x14 */ char * lpRemoteName
  /* this+0x18 */ char * lpComment
  /* this+0x1c */ char * lpProvider
}

struct _NETRESOURCEW {
  /* this+0x0 */ unsigned long dwScope
  /* this+0x4 */ unsigned long dwType
  /* this+0x8 */ unsigned long dwDisplayType
  /* this+0xc */ unsigned long dwUsage
  /* this+0x10 */ wchar_t * lpLocalName
  /* this+0x14 */ wchar_t * lpRemoteName
  /* this+0x18 */ wchar_t * lpComment
  /* this+0x1c */ wchar_t * lpProvider
}

struct _NLG_INFO {
  /* this+0x0 */ unsigned long dwSig
  /* this+0x4 */ unsigned long uoffDestination
  /* this+0x8 */ unsigned long dwCode
  /* this+0xc */ unsigned long uoffFramePointer
}

struct _NON_PAGED_DEBUG_INFO {
  /* this+0x0 */ unsigned short Signature
  /* this+0x2 */ unsigned short Flags
  /* this+0x4 */ unsigned long Size
  /* this+0x8 */ unsigned short Machine
  /* this+0xa */ unsigned short Characteristics
  /* this+0xc */ unsigned long TimeDateStamp
  /* this+0x10 */ unsigned long CheckSum
  /* this+0x14 */ unsigned long SizeOfImage
  /* this+0x18 */ unsigned __int64 ImageBase
}

struct _NT_TIB {
  /* this+0x0 */ struct _EXCEPTION_REGISTRATION_RECORD * ExceptionList
  /* this+0x4 */ void * StackBase
  /* this+0x8 */ void * StackLimit
  /* this+0xc */ void * SubSystemTib
  /* this+0x10 */ void * FiberData
  /* this+0x10 */ unsigned long Version
  /* this+0x14 */ void * ArbitraryUserPointer
  /* this+0x18 */ struct _NT_TIB * Self
}

struct _NT_TIB32 {
  /* this+0x0 */ unsigned long ExceptionList
  /* this+0x4 */ unsigned long StackBase
  /* this+0x8 */ unsigned long StackLimit
  /* this+0xc */ unsigned long SubSystemTib
  /* this+0x10 */ unsigned long FiberData
  /* this+0x10 */ unsigned long Version
  /* this+0x14 */ unsigned long ArbitraryUserPointer
  /* this+0x18 */ unsigned long Self
}

struct _NT_TIB64 {
  /* this+0x0 */ unsigned __int64 ExceptionList
  /* this+0x8 */ unsigned __int64 StackBase
  /* this+0x10 */ unsigned __int64 StackLimit
  /* this+0x18 */ unsigned __int64 SubSystemTib
  /* this+0x20 */ unsigned __int64 FiberData
  /* this+0x20 */ unsigned long Version
  /* this+0x28 */ unsigned __int64 ArbitraryUserPointer
  /* this+0x30 */ unsigned __int64 Self
}

struct _NUMA_NODE_RELATIONSHIP {
  /* this+0x0 */ unsigned long NodeNumber
  /* this+0x4 */ unsigned char[0x14] Reserved
  /* this+0x18 */ struct _GROUP_AFFINITY GroupMask

}

struct _OBJECTID {
  /* this+0x0 */ struct _GUID Lineage

  /* this+0x10 */ unsigned long Uniquifier
}

struct _OBJECT_TYPE_LIST {
  /* this+0x0 */ unsigned short Level
  /* this+0x2 */ unsigned short Sbz
  /* this+0x4 */ struct _GUID * ObjectType
}

struct _OFSTRUCT {
  /* this+0x0 */ unsigned char cBytes
  /* this+0x1 */ unsigned char fFixedDisk
  /* this+0x2 */ unsigned short nErrCode
  /* this+0x4 */ unsigned short Reserved1
  /* this+0x6 */ unsigned short Reserved2
  /* this+0x8 */ char[0x80] szPathName
}

struct _OSVERSIONINFOA {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize
  /* this+0x4 */ unsigned long dwMajorVersion
  /* this+0x8 */ unsigned long dwMinorVersion
  /* this+0xc */ unsigned long dwBuildNumber
  /* this+0x10 */ unsigned long dwPlatformId
  /* this+0x14 */ char[0x80] szCSDVersion
}

struct _OSVERSIONINFOEXA {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize
  /* this+0x4 */ unsigned long dwMajorVersion
  /* this+0x8 */ unsigned long dwMinorVersion
  /* this+0xc */ unsigned long dwBuildNumber
  /* this+0x10 */ unsigned long dwPlatformId
  /* this+0x14 */ char[0x80] szCSDVersion
  /* this+0x94 */ unsigned short wServicePackMajor
  /* this+0x96 */ unsigned short wServicePackMinor
  /* this+0x98 */ unsigned short wSuiteMask
  /* this+0x9a */ unsigned char wProductType
  /* this+0x9b */ unsigned char wReserved
}

struct _OSVERSIONINFOEXW {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize
  /* this+0x4 */ unsigned long dwMajorVersion
  /* this+0x8 */ unsigned long dwMinorVersion
  /* this+0xc */ unsigned long dwBuildNumber
  /* this+0x10 */ unsigned long dwPlatformId
  /* this+0x14 */ wchar_t[0x80] szCSDVersion
  /* this+0x114 */ unsigned short wServicePackMajor
  /* this+0x116 */ unsigned short wServicePackMinor
  /* this+0x118 */ unsigned short wSuiteMask
  /* this+0x11a */ unsigned char wProductType
  /* this+0x11b */ unsigned char wReserved
}

struct _OSVERSIONINFOW {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize
  /* this+0x4 */ unsigned long dwMajorVersion
  /* this+0x8 */ unsigned long dwMinorVersion
  /* this+0xc */ unsigned long dwBuildNumber
  /* this+0x10 */ unsigned long dwPlatformId
  /* this+0x14 */ wchar_t[0x80] szCSDVersion
}

struct _OUTLINETEXTMETRICA {
  /* this+0x0 */ unsigned int otmSize
  /* this+0x4 */ struct tagTEXTMETRICA otmTextMetrics

  /* this+0x3c */ unsigned char otmFiller
  /* this+0x3d */ struct tagPANOSE otmPanoseNumber

  /* this+0x48 */ unsigned int otmfsSelection
  /* this+0x4c */ unsigned int otmfsType
  /* this+0x50 */ int otmsCharSlopeRise
  /* this+0x54 */ int otmsCharSlopeRun
  /* this+0x58 */ int otmItalicAngle
  /* this+0x5c */ unsigned int otmEMSquare
  /* this+0x60 */ int otmAscent
  /* this+0x64 */ int otmDescent
  /* this+0x68 */ unsigned int otmLineGap
  /* this+0x6c */ unsigned int otmsCapEmHeight
  /* this+0x70 */ unsigned int otmsXHeight
  /* this+0x74 */ struct tagRECT otmrcFontBox

  /* this+0x84 */ int otmMacAscent
  /* this+0x88 */ int otmMacDescent
  /* this+0x8c */ unsigned int otmMacLineGap
  /* this+0x90 */ unsigned int otmusMinimumPPEM
  /* this+0x94 */ struct tagPOINT otmptSubscriptSize

  /* this+0x9c */ struct tagPOINT otmptSubscriptOffset

  /* this+0xa4 */ struct tagPOINT otmptSuperscriptSize

  /* this+0xac */ struct tagPOINT otmptSuperscriptOffset

  /* this+0xb4 */ unsigned int otmsStrikeoutSize
  /* this+0xb8 */ int otmsStrikeoutPosition
  /* this+0xbc */ int otmsUnderscoreSize
  /* this+0xc0 */ int otmsUnderscorePosition
  /* this+0xc4 */ char * otmpFamilyName
  /* this+0xc8 */ char * otmpFaceName
  /* this+0xcc */ char * otmpStyleName
  /* this+0xd0 */ char * otmpFullName
}

struct _OUTLINETEXTMETRICW {
  /* this+0x0 */ unsigned int otmSize
  /* this+0x4 */ struct tagTEXTMETRICW otmTextMetrics

  /* this+0x40 */ unsigned char otmFiller
  /* this+0x41 */ struct tagPANOSE otmPanoseNumber

  /* this+0x4c */ unsigned int otmfsSelection
  /* this+0x50 */ unsigned int otmfsType
  /* this+0x54 */ int otmsCharSlopeRise
  /* this+0x58 */ int otmsCharSlopeRun
  /* this+0x5c */ int otmItalicAngle
  /* this+0x60 */ unsigned int otmEMSquare
  /* this+0x64 */ int otmAscent
  /* this+0x68 */ int otmDescent
  /* this+0x6c */ unsigned int otmLineGap
  /* this+0x70 */ unsigned int otmsCapEmHeight
  /* this+0x74 */ unsigned int otmsXHeight
  /* this+0x78 */ struct tagRECT otmrcFontBox

  /* this+0x88 */ int otmMacAscent
  /* this+0x8c */ int otmMacDescent
  /* this+0x90 */ unsigned int otmMacLineGap
  /* this+0x94 */ unsigned int otmusMinimumPPEM
  /* this+0x98 */ struct tagPOINT otmptSubscriptSize

  /* this+0xa0 */ struct tagPOINT otmptSubscriptOffset

  /* this+0xa8 */ struct tagPOINT otmptSuperscriptSize

  /* this+0xb0 */ struct tagPOINT otmptSuperscriptOffset

  /* this+0xb8 */ unsigned int otmsStrikeoutSize
  /* this+0xbc */ int otmsStrikeoutPosition
  /* this+0xc0 */ int otmsUnderscoreSize
  /* this+0xc4 */ int otmsUnderscorePosition
  /* this+0xc8 */ char * otmpFamilyName
  /* this+0xcc */ char * otmpFaceName
  /* this+0xd0 */ char * otmpStyleName
  /* this+0xd4 */ char * otmpFullName
}

struct _OUTPUT_DEBUG_STRING_INFO {
  /* this+0x0 */ char * lpDebugStringData
  /* this+0x4 */ unsigned short fUnicode
  /* this+0x6 */ unsigned short nDebugStringLength
}

struct _OVERLAPPED {
  /* this+0x0 */ unsigned long Internal
  /* this+0x4 */ unsigned long InternalHigh
  /* this+0x8 */ unsigned long Offset
  /* this+0xc */ unsigned long OffsetHigh
  /* this+0x8 */ void * Pointer
  /* this+0x10 */ void * hEvent
}

struct _OVERLAPPED_ENTRY {
  /* this+0x0 */ unsigned long lpCompletionKey
  /* this+0x4 */ struct _OVERLAPPED * lpOverlapped
  /* this+0x8 */ unsigned long Internal
  /* this+0xc */ unsigned long dwNumberOfBytesTransferred
}

struct _PACKEDEVENTINFO {
  /* this+0x0 */ unsigned long ulSize
  /* this+0x4 */ unsigned long ulNumEventsForLogFile
  /* this+0x8 */ unsigned long[0x0] ulOffsets
}

struct _PEB {
  /* this+0x0 */ unsigned char InheritedAddressSpace
  /* this+0x1 */ unsigned char ReadImageFileExecOptions
  /* this+0x2 */ unsigned char BeingDebugged
  /* this+0x3 */ unsigned char SpareBool
  /* this+0x4 */ void * Mutant
  /* this+0x8 */ void * ImageBaseAddress
  /* this+0xc */ struct _PEB_LDR_DATA * Ldr
  /* this+0x10 */ struct _RTL_USER_PROCESS_PARAMETERS * ProcessParameters
  /* this+0x14 */ void * SubSystemData
  /* this+0x18 */ void * ProcessHeap
  /* this+0x1c */ struct _RTL_CRITICAL_SECTION * FastPebLock
  /* this+0x20 */ void * SparePtr1
  /* this+0x24 */ void * SparePtr2
  /* this+0x28 */ unsigned long EnvironmentUpdateCount
  /* this+0x2c */ void * KernelCallbackTable
  /* this+0x30 */ unsigned long[0x1] SystemReserved
  /* this(bf)+0x34:0x0 len(0x2) */ unsigned long ExecuteOptions
  /* this(bf)+0x34:0x2 len(0x1e) */ unsigned long SpareBits
  /* this+0x38 */ struct _PEB_FREE_BLOCK * FreeList
  /* this+0x3c */ unsigned long TlsExpansionCounter
  /* this+0x40 */ void * TlsBitmap
  /* this+0x44 */ unsigned long[0x2] TlsBitmapBits
  /* this+0x4c */ void * ReadOnlySharedMemoryBase
  /* this+0x50 */ void * ReadOnlySharedMemoryHeap
  /* this+0x54 */ void * * ReadOnlyStaticServerData
  /* this+0x58 */ void * AnsiCodePageData
  /* this+0x5c */ void * OemCodePageData
  /* this+0x60 */ void * UnicodeCaseTableData
  /* this+0x64 */ unsigned long NumberOfProcessors
  /* this+0x68 */ unsigned long NtGlobalFlag
  /* this+0x70 */ union _LARGE_INTEGER CriticalSectionTimeout

  /* this+0x78 */ unsigned long HeapSegmentReserve
  /* this+0x7c */ unsigned long HeapSegmentCommit
  /* this+0x80 */ unsigned long HeapDeCommitTotalFreeThreshold
  /* this+0x84 */ unsigned long HeapDeCommitFreeBlockThreshold
  /* this+0x88 */ unsigned long NumberOfHeaps
  /* this+0x8c */ unsigned long MaximumNumberOfHeaps
  /* this+0x90 */ void * * ProcessHeaps
  /* this+0x94 */ void * GdiSharedHandleTable
  /* this+0x98 */ void * ProcessStarterHelper
  /* this+0x9c */ unsigned long GdiDCAttributeList
  /* this+0xa0 */ struct _RTL_CRITICAL_SECTION * LoaderLock
  /* this+0xa4 */ unsigned long OSMajorVersion
  /* this+0xa8 */ unsigned long OSMinorVersion
  /* this+0xac */ unsigned short OSBuildNumber
  /* this+0xae */ unsigned short OSCSDVersion
  /* this+0xb0 */ unsigned long OSPlatformId
  /* this+0xb4 */ unsigned long ImageSubsystem
  /* this+0xb8 */ unsigned long ImageSubsystemMajorVersion
  /* this+0xbc */ unsigned long ImageSubsystemMinorVersion
  /* this+0xc0 */ unsigned long ImageProcessAffinityMask
  /* this+0xc4 */ unsigned long[0x22] GdiHandleBuffer
  /* this+0x14c */ function  * PostProcessInitRoutine
  /* this+0x150 */ void * TlsExpansionBitmap
  /* this+0x154 */ unsigned long[0x20] TlsExpansionBitmapBits
  /* this+0x1d4 */ unsigned long SessionId
  /* this+0x1d8 */ union _ULARGE_INTEGER AppCompatFlags

  /* this+0x1e0 */ union _ULARGE_INTEGER AppCompatFlagsUser

  /* this+0x1e8 */ void * pShimData
  /* this+0x1ec */ void * AppCompatInfo
  /* this+0x1f0 */ struct _UNICODE_STRING CSDVersion

  /* this+0x1f8 */ const struct _ACTIVATION_CONTEXT_DATA * ActivationContextData
  /* this+0x1fc */ struct _ASSEMBLY_STORAGE_MAP * ProcessAssemblyStorageMap
  /* this+0x200 */ const struct _ACTIVATION_CONTEXT_DATA * SystemDefaultActivationContextData
  /* this+0x204 */ struct _ASSEMBLY_STORAGE_MAP * SystemAssemblyStorageMap
  /* this+0x208 */ unsigned long MinimumStackCommit
  /* this+0x20c */ void * * FlsCallback
  /* this+0x210 */ struct _LIST_ENTRY FlsListHead

  /* this+0x218 */ void * FlsBitmap
  /* this+0x21c */ unsigned long[0x4] FlsBitmapBits
  /* this+0x22c */ unsigned long FlsHighIndex
}

struct _PEB_FREE_BLOCK {
  /* this+0x0 */ struct _PEB_FREE_BLOCK * Next
  /* this+0x4 */ unsigned long Size
}

struct _PEB_LDR_DATA {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ unsigned char Initialized
  /* this+0x8 */ void * SsHandle
  /* this+0xc */ struct _LIST_ENTRY InLoadOrderModuleList

  /* this+0x14 */ struct _LIST_ENTRY InMemoryOrderModuleList

  /* this+0x1c */ struct _LIST_ENTRY InInitializationOrderModuleList

  /* this+0x24 */ void * EntryInProgress
}

struct _PERFORMANCE_DATA {
  /* this+0x0 */ unsigned short Size
  /* this+0x2 */ unsigned char Version
  /* this+0x3 */ unsigned char HwCountersCount
  /* this+0x4 */ unsigned long ContextSwitchCount
  /* this+0x8 */ unsigned __int64 WaitReasonBitMap
  /* this+0x10 */ unsigned __int64 CycleTime
  /* this+0x18 */ unsigned long RetryCount
  /* this+0x1c */ unsigned long Reserved
  /* this+0x20 */ struct _HARDWARE_COUNTER_DATA[0x10] HwCounters
}

struct _PMD {
  /* this+0x0 */ int mdisp
  /* this+0x4 */ int pdisp
  /* this+0x8 */ int vdisp
}

struct _POINTFLOAT {
  /* this+0x0 */ float x
  /* this+0x4 */ float y
}

struct _POINTL {
  /* this+0x0 */ long x
  /* this+0x4 */ long y
}

struct _PRIVILEGE_SET {
  /* this+0x0 */ unsigned long PrivilegeCount
  /* this+0x4 */ unsigned long Control
  /* this+0x8 */ struct _LUID_AND_ATTRIBUTES[0x1] Privilege
}

struct _PROCESSOR_GROUP_INFO {
  /* this+0x0 */ unsigned char MaximumProcessorCount
  /* this+0x1 */ unsigned char ActiveProcessorCount
  /* this+0x2 */ unsigned char[0x26] Reserved
  /* this+0x28 */ unsigned long ActiveProcessorMask
}

struct _PROCESSOR_NUMBER {
  /* this+0x0 */ unsigned short Group
  /* this+0x2 */ unsigned char Number
  /* this+0x3 */ unsigned char Reserved
}

struct _PROCESSOR_POWER_POLICY {
  /* this+0x0 */ unsigned long Revision
  /* this+0x4 */ unsigned char DynamicThrottle
  /* this+0x5 */ unsigned char[0x3] Spare
  /* this(bf)+0x8:0x0 len(0x1) */ unsigned long DisableCStates
  /* this(bf)+0x8:0x1 len(0x1f) */ unsigned long Reserved
  /* this+0xc */ unsigned long PolicyCount
  /* this+0x10 */ struct _PROCESSOR_POWER_POLICY_INFO[0x3] Policy
}

struct _PROCESSOR_POWER_POLICY_INFO {
  /* this+0x0 */ unsigned long TimeCheck
  /* this+0x4 */ unsigned long DemoteLimit
  /* this+0x8 */ unsigned long PromoteLimit
  /* this+0xc */ unsigned char DemotePercent
  /* this+0xd */ unsigned char PromotePercent
  /* this+0xe */ unsigned char[0x2] Spare
  /* this(bf)+0x10:0x0 len(0x1) */ unsigned long AllowDemotion
  /* this(bf)+0x10:0x1 len(0x1) */ unsigned long AllowPromotion
  /* this(bf)+0x10:0x2 len(0x1e) */ unsigned long Reserved
}

struct _PROCESSOR_RELATIONSHIP {
  /* this+0x0 */ unsigned char Flags
  /* this+0x1 */ unsigned char[0x15] Reserved
  /* this+0x16 */ unsigned short GroupCount
  /* this+0x18 */ struct _GROUP_AFFINITY[0x1] GroupMask
}

struct _PROCESS_HEAP_ENTRY {
  /* this+0x0 */ void * lpData
  /* this+0x4 */ unsigned long cbData
  /* this+0x8 */ unsigned char cbOverhead
  /* this+0x9 */ unsigned char iRegionIndex
  /* this+0xa */ unsigned short wFlags
  /* this+0xc */ struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Block> Block

  /* this+0xc */ struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Region> Region

}

struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Block> {
  /* this+0x0 */ void * hMem
  /* this+0x4 */ unsigned long[0x3] dwReserved
}

struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Region> {
  /* this+0x0 */ unsigned long dwCommittedSize
  /* this+0x4 */ unsigned long dwUnCommittedSize
  /* this+0x8 */ void * lpFirstBlock
  /* this+0xc */ void * lpLastBlock
}

struct _PROCESS_INFORMATION {
  /* this+0x0 */ void * hProcess
  /* this+0x4 */ void * hThread
  /* this+0x8 */ unsigned long dwProcessId
  /* this+0xc */ unsigned long dwThreadId
}

struct _PROCESS_MEMORY_COUNTERS {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ unsigned long PageFaultCount
  /* this+0x8 */ unsigned long PeakWorkingSetSize
  /* this+0xc */ unsigned long WorkingSetSize
  /* this+0x10 */ unsigned long QuotaPeakPagedPoolUsage
  /* this+0x14 */ unsigned long QuotaPagedPoolUsage
  /* this+0x18 */ unsigned long QuotaPeakNonPagedPoolUsage
  /* this+0x1c */ unsigned long QuotaNonPagedPoolUsage
  /* this+0x20 */ unsigned long PagefileUsage
  /* this+0x24 */ unsigned long PeakPagefileUsage
}

struct _PROC_THREAD_ATTRIBUTE_LIST {
}

struct _PSFEATURE_CUSTPAPER {
  /* this+0x0 */ long lOrientation
  /* this+0x4 */ long lWidth
  /* this+0x8 */ long lHeight
  /* this+0xc */ long lWidthOffset
  /* this+0x10 */ long lHeightOffset
}

struct _PSFEATURE_OUTPUT {
  /* this+0x0 */ int bPageIndependent
  /* this+0x4 */ int bSetPageDevice
}

struct _PSINJECTDATA {
  /* this+0x0 */ unsigned long DataBytes
  /* this+0x4 */ unsigned short InjectionPoint
  /* this+0x6 */ unsigned short PageNumber
}

struct _QOS_SD_MODE {
  /* this+0x0 */ struct QOS_OBJECT_HDR ObjectHdr

  /* this+0x8 */ unsigned long ShapeDiscardMode
}

struct _QOS_SHAPING_RATE {
  /* this+0x0 */ struct QOS_OBJECT_HDR ObjectHdr

  /* this+0x8 */ unsigned long ShapingRate
}

struct _QUERY_SERVICE_CONFIGA {
  /* this+0x0 */ unsigned long dwServiceType
  /* this+0x4 */ unsigned long dwStartType
  /* this+0x8 */ unsigned long dwErrorControl
  /* this+0xc */ char * lpBinaryPathName
  /* this+0x10 */ char * lpLoadOrderGroup
  /* this+0x14 */ unsigned long dwTagId
  /* this+0x18 */ char * lpDependencies
  /* this+0x1c */ char * lpServiceStartName
  /* this+0x20 */ char * lpDisplayName
}

struct _QUERY_SERVICE_CONFIGW {
  /* this+0x0 */ unsigned long dwServiceType
  /* this+0x4 */ unsigned long dwStartType
  /* this+0x8 */ unsigned long dwErrorControl
  /* this+0xc */ wchar_t * lpBinaryPathName
  /* this+0x10 */ wchar_t * lpLoadOrderGroup
  /* this+0x14 */ unsigned long dwTagId
  /* this+0x18 */ wchar_t * lpDependencies
  /* this+0x1c */ wchar_t * lpServiceStartName
  /* this+0x20 */ wchar_t * lpDisplayName
}

struct _QUERY_SERVICE_LOCK_STATUSA {
  /* this+0x0 */ unsigned long fIsLocked
  /* this+0x4 */ char * lpLockOwner
  /* this+0x8 */ unsigned long dwLockDuration
}

struct _QUERY_SERVICE_LOCK_STATUSW {
  /* this+0x0 */ unsigned long fIsLocked
  /* this+0x4 */ wchar_t * lpLockOwner
  /* this+0x8 */ unsigned long dwLockDuration
}

struct _QUOTA_LIMITS {
  /* this+0x0 */ unsigned long PagedPoolLimit
  /* this+0x4 */ unsigned long NonPagedPoolLimit
  /* this+0x8 */ unsigned long MinimumWorkingSetSize
  /* this+0xc */ unsigned long MaximumWorkingSetSize
  /* this+0x10 */ unsigned long PagefileLimit
  /* this+0x18 */ union _LARGE_INTEGER TimeLimit

}

struct _QUOTA_LIMITS_EX {
  /* this+0x0 */ unsigned long PagedPoolLimit
  /* this+0x4 */ unsigned long NonPagedPoolLimit
  /* this+0x8 */ unsigned long MinimumWorkingSetSize
  /* this+0xc */ unsigned long MaximumWorkingSetSize
  /* this+0x10 */ unsigned long PagefileLimit
  /* this+0x18 */ union _LARGE_INTEGER TimeLimit

  /* this+0x20 */ unsigned long WorkingSetLimit
  /* this+0x24 */ unsigned long Reserved2
  /* this+0x28 */ unsigned long Reserved3
  /* this+0x2c */ unsigned long Reserved4
  /* this+0x30 */ unsigned long Flags
  /* this+0x34 */ union _RATE_QUOTA_LIMIT CpuRateLimit

}

struct _QualityOfService {
  /* this+0x0 */ struct _flowspec SendingFlowspec

  /* this+0x20 */ struct _flowspec ReceivingFlowspec

  /* this+0x40 */ struct _WSABUF ProviderSpecific

}

struct _RASTERIZER_STATUS {
  /* this+0x0 */ short nSize
  /* this+0x2 */ short wFlags
  /* this+0x4 */ short nLanguageID
}

union _RATE_QUOTA_LIMIT {
  /* this+0x0 */ unsigned long RateData
  /* this(bf)+0x0:0x0 len(0x7) */ unsigned long RatePercent
  /* this(bf)+0x0:0x7 len(0x19) */ unsigned long Reserved0
}

struct _REASON_CONTEXT {
  /* this+0x0 */ unsigned long Version
  /* this+0x4 */ unsigned long Flags
    /* this+0x8 */ union _REASON_CONTEXT::<unnamed-type-Reason> Reason

}

union _REASON_CONTEXT::<unnamed-type-Reason> {
    /* this+0x0 */ struct _REASON_CONTEXT::<unnamed-type-Reason>::<unnamed-type-Detailed> Detailed

  /* this+0x0 */ wchar_t * SimpleReasonString
}

struct _REASON_CONTEXT::<unnamed-type-Reason>::<unnamed-type-Detailed> {
  /* this+0x0 */ struct HINSTANCE__ * LocalizedReasonModule
  /* this+0x4 */ unsigned long LocalizedReasonId
  /* this+0x8 */ unsigned long ReasonStringCount
  /* this+0xc */ wchar_t * * ReasonStrings
}

struct _RECTL {
  /* this+0x0 */ long left
  /* this+0x4 */ long top
  /* this+0x8 */ long right
  /* this+0xc */ long bottom
}

struct _REMOTE_NAME_INFOA {
  /* this+0x0 */ char * lpUniversalName
  /* this+0x4 */ char * lpConnectionName
  /* this+0x8 */ char * lpRemainingPath
}

struct _REMOTE_NAME_INFOW {
  /* this+0x0 */ wchar_t * lpUniversalName
  /* this+0x4 */ wchar_t * lpConnectionName
  /* this+0x8 */ wchar_t * lpRemainingPath
}

struct _REPARSE_GUID_DATA_BUFFER {
  /* this+0x0 */ unsigned long ReparseTag
  /* this+0x4 */ unsigned short ReparseDataLength
  /* this+0x6 */ unsigned short Reserved
  /* this+0x8 */ struct _GUID ReparseGuid

    /* this+0x18 */ struct _REPARSE_GUID_DATA_BUFFER::<unnamed-type-GenericReparseBuffer> GenericReparseBuffer

}

struct _REPARSE_GUID_DATA_BUFFER::<unnamed-type-GenericReparseBuffer> {
  /* this+0x0 */ unsigned char[0x1] DataBuffer
}

struct _RESOURCEMANAGER_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID ResourceManagerId

  /* this+0x10 */ unsigned long DescriptionLength
  /* this+0x14 */ wchar_t[0x1] Description
}

struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
  /* this+0x0 */ void * IoCompletionPortHandle
  /* this+0x4 */ unsigned long CompletionKey
}

struct _RGNDATA {
  /* this+0x0 */ struct _RGNDATAHEADER rdh

  /* this+0x20 */ char[0x1] Buffer
}

struct _RGNDATAHEADER {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long iType
  /* this+0x8 */ unsigned long nCount
  /* this+0xc */ unsigned long nRgnSize
  /* this+0x10 */ struct tagRECT rcBound

}

struct _RIP_INFO {
  /* this+0x0 */ unsigned long dwError
  /* this+0x4 */ unsigned long dwType
}

struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
}

struct _RTL_CONDITION_VARIABLE {
  /* this+0x0 */ void * Ptr
}

struct _RTL_CRITICAL_SECTION {
  /* this+0x0 */ struct _RTL_CRITICAL_SECTION_DEBUG * DebugInfo
  /* this+0x4 */ long LockCount
  /* this+0x8 */ long RecursionCount
  /* this+0xc */ void * OwningThread
  /* this+0x10 */ void * LockSemaphore
  /* this+0x14 */ unsigned long SpinCount
}

struct _RTL_CRITICAL_SECTION_DEBUG {
  /* this+0x0 */ unsigned short Type
  /* this+0x2 */ unsigned short CreatorBackTraceIndex
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION * CriticalSection
  /* this+0x8 */ struct _LIST_ENTRY ProcessLocksList

  /* this+0x10 */ unsigned long EntryCount
  /* this+0x14 */ unsigned long ContentionCount
  /* this+0x18 */ unsigned long Flags
  /* this+0x1c */ unsigned short CreatorBackTraceIndexHigh
  /* this+0x1e */ unsigned short SpareWORD
}

union _RTL_RUN_ONCE {
  /* this+0x0 */ void * Ptr
}

struct _RTL_SRWLOCK {
  /* this+0x0 */ void * Ptr
}

struct _RTL_USER_PROCESS_PARAMETERS {
}

struct _SCOPETABLE_ENTRY {
  /* this+0x0 */ unsigned long enclosing_level
  /* this+0x4 */ unsigned long filter
  /* this+0x8 */ unsigned long specific_handler
}

struct _SC_ACTION {
  /* this+0x0 */ enum _SC_ACTION_TYPE Type
  /* this+0x4 */ unsigned long Delay
}

struct _SECURITY_ATTRIBUTES {
  /* this+0x0 */ unsigned long nLength
  /* this+0x4 */ void * lpSecurityDescriptor
  /* this+0x8 */ int bInheritHandle
}

struct _SECURITY_DESCRIPTOR {
  /* this+0x0 */ unsigned char Revision
  /* this+0x1 */ unsigned char Sbz1
  /* this+0x2 */ unsigned short Control
  /* this+0x4 */ void * Owner
  /* this+0x8 */ void * Group
  /* this+0xc */ struct _ACL * Sacl
  /* this+0x10 */ struct _ACL * Dacl
}

struct _SECURITY_DESCRIPTOR_RELATIVE {
  /* this+0x0 */ unsigned char Revision
  /* this+0x1 */ unsigned char Sbz1
  /* this+0x2 */ unsigned short Control
  /* this+0x4 */ unsigned long Owner
  /* this+0x8 */ unsigned long Group
  /* this+0xc */ unsigned long Sacl
  /* this+0x10 */ unsigned long Dacl
}

struct _SECURITY_QUALITY_OF_SERVICE {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
  /* this+0x8 */ unsigned char ContextTrackingMode
  /* this+0x9 */ unsigned char EffectiveOnly
}

struct _SERVERINFO {
  /* this+0x0 */ int SID
  /* this+0x4 */ int Type
  /* this+0x8 */ unsigned long ip
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > IPstr

  /* this+0x28 */ int Port
  /* this+0x2c */ int DestinationOneSID
  /* this+0x30 */ int DestinationTwoSID
  /* this+0x34 */ char[0x14] Name
  /* this+0x48 */ unsigned long PrivateIP
  /* this+0x4c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > PrivateIPstr

  /* this+0x68 */ int PrivatePort
  /* this+0x6c */ bool bReady
  /* this+0x6d */ bool bOverpopulation
  public void _SERVERINFO(const struct _SERVERINFO &)
  public void _SERVERINFO::_SERVERINFO()
  public void _SERVERINFO::~_SERVERINFO()
  public struct _SERVERINFO & operator=(const struct _SERVERINFO &)
  public void * __vecDelDtor(unsigned int)
}

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
  /* this+0x0 */ unsigned long dwReason
  /* this+0x4 */ char * pszComment
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

}

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
  /* this+0x0 */ unsigned long dwReason
  /* this+0x4 */ wchar_t * pszComment
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

}

struct _SERVICE_DELAYED_AUTO_START_INFO {
  /* this+0x0 */ int fDelayedAutostart
}

struct _SERVICE_DESCRIPTIONA {
  /* this+0x0 */ char * lpDescription
}

struct _SERVICE_DESCRIPTIONW {
  /* this+0x0 */ wchar_t * lpDescription
}

struct _SERVICE_FAILURE_ACTIONSA {
  /* this+0x0 */ unsigned long dwResetPeriod
  /* this+0x4 */ char * lpRebootMsg
  /* this+0x8 */ char * lpCommand
  /* this+0xc */ unsigned long cActions
  /* this+0x10 */ struct _SC_ACTION * lpsaActions
}

struct _SERVICE_FAILURE_ACTIONSW {
  /* this+0x0 */ unsigned long dwResetPeriod
  /* this+0x4 */ wchar_t * lpRebootMsg
  /* this+0x8 */ wchar_t * lpCommand
  /* this+0xc */ unsigned long cActions
  /* this+0x10 */ struct _SC_ACTION * lpsaActions
}

struct _SERVICE_FAILURE_ACTIONS_FLAG {
  /* this+0x0 */ int fFailureActionsOnNonCrashFailures
}

struct _SERVICE_NOTIFY_1 {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ function  * pfnNotifyCallback
  /* this+0x8 */ void * pContext
  /* this+0xc */ unsigned long dwNotificationStatus
  /* this+0x10 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

}

struct _SERVICE_NOTIFY_2A {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ function  * pfnNotifyCallback
  /* this+0x8 */ void * pContext
  /* this+0xc */ unsigned long dwNotificationStatus
  /* this+0x10 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

  /* this+0x34 */ unsigned long dwNotificationTriggered
  /* this+0x38 */ char * pszServiceNames
}

struct _SERVICE_NOTIFY_2W {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ function  * pfnNotifyCallback
  /* this+0x8 */ void * pContext
  /* this+0xc */ unsigned long dwNotificationStatus
  /* this+0x10 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

  /* this+0x34 */ unsigned long dwNotificationTriggered
  /* this+0x38 */ wchar_t * pszServiceNames
}

struct _SERVICE_PREFERRED_NODE_INFO {
  /* this+0x0 */ unsigned short usPreferredNode
  /* this+0x2 */ unsigned char fDelete
}

struct _SERVICE_PRESHUTDOWN_INFO {
  /* this+0x0 */ unsigned long dwPreshutdownTimeout
}

struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
  /* this+0x0 */ char * pmszRequiredPrivileges
}

struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
  /* this+0x0 */ wchar_t * pmszRequiredPrivileges
}

struct _SERVICE_SID_INFO {
  /* this+0x0 */ unsigned long dwServiceSidType
}

struct _SERVICE_STATUS {
  /* this+0x0 */ unsigned long dwServiceType
  /* this+0x4 */ unsigned long dwCurrentState
  /* this+0x8 */ unsigned long dwControlsAccepted
  /* this+0xc */ unsigned long dwWin32ExitCode
  /* this+0x10 */ unsigned long dwServiceSpecificExitCode
  /* this+0x14 */ unsigned long dwCheckPoint
  /* this+0x18 */ unsigned long dwWaitHint
}

struct _SERVICE_STATUS_PROCESS {
  /* this+0x0 */ unsigned long dwServiceType
  /* this+0x4 */ unsigned long dwCurrentState
  /* this+0x8 */ unsigned long dwControlsAccepted
  /* this+0xc */ unsigned long dwWin32ExitCode
  /* this+0x10 */ unsigned long dwServiceSpecificExitCode
  /* this+0x14 */ unsigned long dwCheckPoint
  /* this+0x18 */ unsigned long dwWaitHint
  /* this+0x1c */ unsigned long dwProcessId
  /* this+0x20 */ unsigned long dwServiceFlags
}

struct _SERVICE_TABLE_ENTRYA {
  /* this+0x0 */ char * lpServiceName
  /* this+0x4 */ function  * lpServiceProc
}

struct _SERVICE_TABLE_ENTRYW {
  /* this+0x0 */ wchar_t * lpServiceName
  /* this+0x4 */ function  * lpServiceProc
}

struct _SERVICE_TIMECHANGE_INFO {
  /* this+0x0 */ union _LARGE_INTEGER liNewTime

  /* this+0x8 */ union _LARGE_INTEGER liOldTime

}

struct _SERVICE_TRIGGER {
  /* this+0x0 */ unsigned long dwTriggerType
  /* this+0x4 */ unsigned long dwAction
  /* this+0x8 */ struct _GUID * pTriggerSubtype
  /* this+0xc */ unsigned long cDataItems
  /* this+0x10 */ struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM * pDataItems
}

struct _SERVICE_TRIGGER_INFO {
  /* this+0x0 */ unsigned long cTriggers
  /* this+0x4 */ struct _SERVICE_TRIGGER * pTriggers
  /* this+0x8 */ unsigned char * pReserved
}

struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
  /* this+0x0 */ unsigned long dwDataType
  /* this+0x4 */ unsigned long cbData
  /* this+0x8 */ unsigned char * pData
}

struct _SE_ACCESS_REPLY {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ unsigned long ResultListCount
  /* this+0x8 */ unsigned long * GrantedAccess
  /* this+0xc */ unsigned long * AccessStatus
  /* this+0x10 */ struct _ACCESS_REASONS * AccessReason
  /* this+0x14 */ struct _PRIVILEGE_SET * * Privileges
}

struct _SE_ACCESS_REQUEST {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ struct _SE_SECURITY_DESCRIPTOR * SeSecurityDescriptor
  /* this+0x8 */ unsigned long DesiredAccess
  /* this+0xc */ unsigned long PreviouslyGrantedAccess
  /* this+0x10 */ void * PrincipalSelfSid
  /* this+0x14 */ struct _GENERIC_MAPPING * GenericMapping
  /* this+0x18 */ unsigned long ObjectTypeListCount
  /* this+0x1c */ struct _OBJECT_TYPE_LIST * ObjectTypeList
}

struct _SE_IMPERSONATION_STATE {
  /* this+0x0 */ void * Token
  /* this+0x4 */ unsigned char CopyOnOpen
  /* this+0x5 */ unsigned char EffectiveOnly
  /* this+0x8 */ enum _SECURITY_IMPERSONATION_LEVEL Level
}

struct _SE_SECURITY_DESCRIPTOR {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ unsigned long Flags
  /* this+0x8 */ void * SecurityDescriptor
}

struct _SID {
  /* this+0x0 */ unsigned char Revision
  /* this+0x1 */ unsigned char SubAuthorityCount
  /* this+0x2 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority

  /* this+0x8 */ unsigned long[0x1] SubAuthority
}

struct _SID_AND_ATTRIBUTES {
  /* this+0x0 */ void * Sid
  /* this+0x4 */ unsigned long Attributes
}

struct _SID_AND_ATTRIBUTES_HASH {
  /* this+0x0 */ unsigned long SidCount
  /* this+0x4 */ struct _SID_AND_ATTRIBUTES * SidAttr
  /* this+0x8 */ unsigned long[0x20] Hash
}

struct _SID_IDENTIFIER_AUTHORITY {
  /* this+0x0 */ unsigned char[0x6] Value
}

struct _SINGLE_LIST_ENTRY {
  /* this+0x0 */ struct _SINGLE_LIST_ENTRY * Next
}

struct _SKILL_ACTIVE_INFO {
  /* this+0x0 */ class std::map<unsigned long,std::list<SKILL_ACTIVE,std::allocator<SKILL_ACTIVE> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::list<SKILL_ACTIVE,std::allocator<SKILL_ACTIVE> > > > > skillActiveList

  /* this+0x10 */ class std::list<SKILL_ACTIVE_OPTION,std::allocator<SKILL_ACTIVE_OPTION> > skillDeactiveList

  /* this+0x1c */ unsigned long lastActivatedSkill
  /* this+0x20 */ unsigned long lastDeactivatedSkill
  public void _SKILL_ACTIVE_INFO(const struct _SKILL_ACTIVE_INFO &)
  public void _SKILL_ACTIVE_INFO()
  public void _SKILL_ACTIVE_INFO::~_SKILL_ACTIVE_INFO()
  public struct _SKILL_ACTIVE_INFO & operator=(const struct _SKILL_ACTIVE_INFO &)
  public void * __vecDelDtor(unsigned int)
}

union _SLIST_HEADER {
  /* this+0x0 */ unsigned __int64 Alignment
  /* this+0x0 */ struct _SINGLE_LIST_ENTRY Next

  /* this+0x4 */ unsigned short Depth
  /* this+0x6 */ unsigned short Sequence
}

struct _SMALL_RECT {
  /* this+0x0 */ short Left
  /* this+0x2 */ short Top
  /* this+0x4 */ short Right
  /* this+0x6 */ short Bottom
}

struct _SOCKET_ADDRESS {
  /* this+0x0 */ struct sockaddr * lpSockaddr
  /* this+0x4 */ int iSockaddrLength
}

struct _SOCKET_ADDRESS_LIST {
  /* this+0x0 */ int iAddressCount
  /* this+0x4 */ struct _SOCKET_ADDRESS[0x1] Address
}

struct _STARTUPINFOA {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ char * lpReserved
  /* this+0x8 */ char * lpDesktop
  /* this+0xc */ char * lpTitle
  /* this+0x10 */ unsigned long dwX
  /* this+0x14 */ unsigned long dwY
  /* this+0x18 */ unsigned long dwXSize
  /* this+0x1c */ unsigned long dwYSize
  /* this+0x20 */ unsigned long dwXCountChars
  /* this+0x24 */ unsigned long dwYCountChars
  /* this+0x28 */ unsigned long dwFillAttribute
  /* this+0x2c */ unsigned long dwFlags
  /* this+0x30 */ unsigned short wShowWindow
  /* this+0x32 */ unsigned short cbReserved2
  /* this+0x34 */ unsigned char * lpReserved2
  /* this+0x38 */ void * hStdInput
  /* this+0x3c */ void * hStdOutput
  /* this+0x40 */ void * hStdError
}

struct _STARTUPINFOEXA {
  /* this+0x0 */ struct _STARTUPINFOA StartupInfo

  /* this+0x44 */ struct _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList
}

struct _STARTUPINFOEXW {
  /* this+0x0 */ struct _STARTUPINFOW StartupInfo

  /* this+0x44 */ struct _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList
}

struct _STARTUPINFOW {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ unsigned short * lpReserved
  /* this+0x8 */ unsigned short * lpDesktop
  /* this+0xc */ unsigned short * lpTitle
  /* this+0x10 */ unsigned long dwX
  /* this+0x14 */ unsigned long dwY
  /* this+0x18 */ unsigned long dwXSize
  /* this+0x1c */ unsigned long dwYSize
  /* this+0x20 */ unsigned long dwXCountChars
  /* this+0x24 */ unsigned long dwYCountChars
  /* this+0x28 */ unsigned long dwFillAttribute
  /* this+0x2c */ unsigned long dwFlags
  /* this+0x30 */ unsigned short wShowWindow
  /* this+0x32 */ unsigned short cbReserved2
  /* this+0x34 */ unsigned char * lpReserved2
  /* this+0x38 */ void * hStdInput
  /* this+0x3c */ void * hStdOutput
  /* this+0x40 */ void * hStdError
}

struct _STORE_PASSWORD_INFO {
  /* this+0x0 */ int Password
  /* this+0x4 */ int ErrorCount
  /* this+0x8 */ unsigned long PanaltyTime
  /* this+0xc */ int MapID
  /* this+0x10 */ int X
  /* this+0x14 */ int Y
  public void _STORE_PASSWORD_INFO()
  public void Init()
  public void InitPosition()
}

struct _SUPPORTED_OS_INFO {
  /* this+0x0 */ unsigned short OsCount
  /* this+0x2 */ unsigned short MitigationExist
  /* this+0x4 */ unsigned short[0x4] OsList
}

struct _SYSTEMTIME {
  /* this+0x0 */ unsigned short wYear
  /* this+0x2 */ unsigned short wMonth
  /* this+0x4 */ unsigned short wDayOfWeek
  /* this+0x6 */ unsigned short wDay
  /* this+0x8 */ unsigned short wHour
  /* this+0xa */ unsigned short wMinute
  /* this+0xc */ unsigned short wSecond
  /* this+0xe */ unsigned short wMilliseconds
}

struct _SYSTEM_ALARM_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_ALARM_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _SYSTEM_ALARM_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _SYSTEM_AUDIT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_AUDIT_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _SYSTEM_AUDIT_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _SYSTEM_INFO {
  /* this+0x0 */ unsigned long dwOemId
  /* this+0x0 */ unsigned short wProcessorArchitecture
  /* this+0x2 */ unsigned short wReserved
  /* this+0x4 */ unsigned long dwPageSize
  /* this+0x8 */ void * lpMinimumApplicationAddress
  /* this+0xc */ void * lpMaximumApplicationAddress
  /* this+0x10 */ unsigned long dwActiveProcessorMask
  /* this+0x14 */ unsigned long dwNumberOfProcessors
  /* this+0x18 */ unsigned long dwProcessorType
  /* this+0x1c */ unsigned long dwAllocationGranularity
  /* this+0x20 */ unsigned short wProcessorLevel
  /* this+0x22 */ unsigned short wProcessorRevision
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
  /* this+0x0 */ unsigned long ProcessorMask
  /* this+0x4 */ enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship
  /* this+0x8 */ struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-ProcessorCore> ProcessorCore

  /* this+0x8 */ struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-NumaNode> NumaNode

  /* this+0x8 */ struct _CACHE_DESCRIPTOR Cache

  /* this+0x8 */ unsigned __int64[0x2] Reserved
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-NumaNode> {
  /* this+0x0 */ unsigned long NodeNumber
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-ProcessorCore> {
  /* this+0x0 */ unsigned char Flags
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
  /* this+0x0 */ enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship
  /* this+0x4 */ unsigned long Size
  /* this+0x8 */ struct _PROCESSOR_RELATIONSHIP Processor

  /* this+0x8 */ struct _NUMA_NODE_RELATIONSHIP NumaNode

  /* this+0x8 */ struct _CACHE_RELATIONSHIP Cache

  /* this+0x8 */ struct _GROUP_RELATIONSHIP Group

}

struct _SYSTEM_MANDATORY_LABEL_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_POWER_POLICY {
  /* this+0x0 */ unsigned long Revision
  /* this+0x4 */ struct POWER_ACTION_POLICY PowerButton

  /* this+0x10 */ struct POWER_ACTION_POLICY SleepButton

  /* this+0x1c */ struct POWER_ACTION_POLICY LidClose

  /* this+0x28 */ enum _SYSTEM_POWER_STATE LidOpenWake
  /* this+0x2c */ unsigned long Reserved
  /* this+0x30 */ struct POWER_ACTION_POLICY Idle

  /* this+0x3c */ unsigned long IdleTimeout
  /* this+0x40 */ unsigned char IdleSensitivity
  /* this+0x41 */ unsigned char DynamicThrottle
  /* this+0x42 */ unsigned char[0x2] Spare2
  /* this+0x44 */ enum _SYSTEM_POWER_STATE MinSleep
  /* this+0x48 */ enum _SYSTEM_POWER_STATE MaxSleep
  /* this+0x4c */ enum _SYSTEM_POWER_STATE ReducedLatencySleep
  /* this+0x50 */ unsigned long WinLogonFlags
  /* this+0x54 */ unsigned long Spare3
  /* this+0x58 */ unsigned long DozeS4Timeout
  /* this+0x5c */ unsigned long BroadcastCapacityResolution
  /* this+0x60 */ struct SYSTEM_POWER_LEVEL[0x4] DischargePolicy
  /* this+0xc0 */ unsigned long VideoTimeout
  /* this+0xc4 */ unsigned char VideoDimDisplay
  /* this+0xc8 */ unsigned long[0x3] VideoReserved
  /* this+0xd4 */ unsigned long SpindownTimeout
  /* this+0xd8 */ unsigned char OptimizeForPower
  /* this+0xd9 */ unsigned char FanThrottleTolerance
  /* this+0xda */ unsigned char ForcedThrottle
  /* this+0xdb */ unsigned char MinThrottle
  /* this+0xdc */ struct POWER_ACTION_POLICY OverThrottled

}

struct _SYSTEM_POWER_STATUS {
  /* this+0x0 */ unsigned char ACLineStatus
  /* this+0x1 */ unsigned char BatteryFlag
  /* this+0x2 */ unsigned char BatteryLifePercent
  /* this+0x3 */ unsigned char Reserved1
  /* this+0x4 */ unsigned long BatteryLifeTime
  /* this+0x8 */ unsigned long BatteryFullLifeTime
}

struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
  /* this+0x0 */ unsigned __int64 CycleTime
}

struct _TAPE_CREATE_PARTITION {
  /* this+0x0 */ unsigned long Method
  /* this+0x4 */ unsigned long Count
  /* this+0x8 */ unsigned long Size
}

struct _TAPE_ERASE {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned char Immediate
}

struct _TAPE_GET_DRIVE_PARAMETERS {
  /* this+0x0 */ unsigned char ECC
  /* this+0x1 */ unsigned char Compression
  /* this+0x2 */ unsigned char DataPadding
  /* this+0x3 */ unsigned char ReportSetmarks
  /* this+0x4 */ unsigned long DefaultBlockSize
  /* this+0x8 */ unsigned long MaximumBlockSize
  /* this+0xc */ unsigned long MinimumBlockSize
  /* this+0x10 */ unsigned long MaximumPartitionCount
  /* this+0x14 */ unsigned long FeaturesLow
  /* this+0x18 */ unsigned long FeaturesHigh
  /* this+0x1c */ unsigned long EOTWarningZoneSize
}

struct _TAPE_GET_MEDIA_PARAMETERS {
  /* this+0x0 */ union _LARGE_INTEGER Capacity

  /* this+0x8 */ union _LARGE_INTEGER Remaining

  /* this+0x10 */ unsigned long BlockSize
  /* this+0x14 */ unsigned long PartitionCount
  /* this+0x18 */ unsigned char WriteProtected
}

struct _TAPE_GET_POSITION {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned long Partition
  /* this+0x8 */ union _LARGE_INTEGER Offset

}

struct _TAPE_PREPARE {
  /* this+0x0 */ unsigned long Operation
  /* this+0x4 */ unsigned char Immediate
}

struct _TAPE_SET_DRIVE_PARAMETERS {
  /* this+0x0 */ unsigned char ECC
  /* this+0x1 */ unsigned char Compression
  /* this+0x2 */ unsigned char DataPadding
  /* this+0x3 */ unsigned char ReportSetmarks
  /* this+0x4 */ unsigned long EOTWarningZoneSize
}

struct _TAPE_SET_MEDIA_PARAMETERS {
  /* this+0x0 */ unsigned long BlockSize
}

struct _TAPE_SET_POSITION {
  /* this+0x0 */ unsigned long Method
  /* this+0x4 */ unsigned long Partition
  /* this+0x8 */ union _LARGE_INTEGER Offset

  /* this+0x10 */ unsigned char Immediate
}

struct _TAPE_WMI_OPERATIONS {
  /* this+0x0 */ unsigned long Method
  /* this+0x4 */ unsigned long DataBufferSize
  /* this+0x8 */ void * DataBuffer
}

struct _TAPE_WRITE_MARKS {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned long Count
  /* this+0x8 */ unsigned char Immediate
}

struct _TEB {
  /* this+0x0 */ struct _NT_TIB NtTib

  /* this+0x1c */ void * EnvironmentPointer
  /* this+0x20 */ struct _CLIENT_ID ClientId

  /* this+0x28 */ void * ActiveRpcHandle
  /* this+0x2c */ void * ThreadLocalStoragePointer
  /* this+0x30 */ struct _PEB * ProcessEnvironmentBlock
  /* this+0x34 */ unsigned long LastErrorValue
  /* this+0x38 */ unsigned long CountOfOwnedCriticalSections
  /* this+0x3c */ void * CsrClientThread
  /* this+0x40 */ void * Win32ThreadInfo
  /* this+0x44 */ unsigned long[0x1a] User32Reserved
  /* this+0xac */ unsigned long[0x5] UserReserved
  /* this+0xc0 */ void * WOW32Reserved
  /* this+0xc4 */ unsigned long CurrentLocale
  /* this+0xc8 */ unsigned long FpSoftwareStatusRegister
  /* this+0xcc */ void *[0x36] SystemReserved1
  /* this+0x1a4 */ long ExceptionCode
  /* this+0x1a8 */ struct _ACTIVATION_CONTEXT_STACK ActivationContextStack

  /* this+0x1bc */ unsigned char[0x18] SpareBytes1
  /* this+0x1d4 */ struct _GDI_TEB_BATCH GdiTebBatch

  /* this+0x6b4 */ struct _CLIENT_ID RealClientId

  /* this+0x6bc */ void * GdiCachedProcessHandle
  /* this+0x6c0 */ unsigned long GdiClientPID
  /* this+0x6c4 */ unsigned long GdiClientTID
  /* this+0x6c8 */ void * GdiThreadLocalInfo
  /* this+0x6cc */ unsigned long[0x3e] Win32ClientInfo
  /* this+0x7c4 */ void *[0xe9] glDispatchTable
  /* this+0xb68 */ unsigned long[0x1d] glReserved1
  /* this+0xbdc */ void * glReserved2
  /* this+0xbe0 */ void * glSectionInfo
  /* this+0xbe4 */ void * glSection
  /* this+0xbe8 */ void * glTable
  /* this+0xbec */ void * glCurrentRC
  /* this+0xbf0 */ void * glContext
  /* this+0xbf4 */ unsigned long LastStatusValue
  /* this+0xbf8 */ struct _UNICODE_STRING StaticUnicodeString

  /* this+0xc00 */ wchar_t[0x105] StaticUnicodeBuffer
  /* this+0xe0c */ void * DeallocationStack
  /* this+0xe10 */ void *[0x40] TlsSlots
  /* this+0xf10 */ struct _LIST_ENTRY TlsLinks

  /* this+0xf18 */ void * Vdm
  /* this+0xf1c */ void * ReservedForNtRpc
  /* this+0xf20 */ void *[0x2] DbgSsReserved
  /* this+0xf28 */ unsigned long HardErrorMode
  /* this+0xf2c */ void *[0x10] Instrumentation
  /* this+0xf6c */ void * WinSockData
  /* this+0xf70 */ unsigned long GdiBatchCount
  /* this+0xf74 */ unsigned char InDbgPrint
  /* this+0xf75 */ unsigned char FreeStackOnTermination
  /* this+0xf76 */ unsigned char HasFiberData
  /* this+0xf77 */ unsigned char IdealProcessor
  /* this+0xf78 */ unsigned long Spare3
  /* this+0xf7c */ void * ReservedForPerf
  /* this+0xf80 */ void * ReservedForOle
  /* this+0xf84 */ unsigned long WaitingOnLoaderLock
  /* this+0xf88 */ struct _Wx86ThreadState Wx86Thread

  /* this+0xf94 */ void * * TlsExpansionSlots
  /* this+0xf98 */ unsigned long ImpersonationLocale
  /* this+0xf9c */ unsigned long IsImpersonating
  /* this+0xfa0 */ void * NlsCache
  /* this+0xfa4 */ void * pShimData
  /* this+0xfa8 */ unsigned long HeapVirtualAffinity
  /* this+0xfac */ void * CurrentTransactionHandle
  /* this+0xfb0 */ struct _TEB_ACTIVE_FRAME * ActiveFrame
  /* this+0xfb4 */ void * FlsData
}

struct _TEB_ACTIVE_FRAME {
  /* this+0x0 */ unsigned long Flags
  /* this+0x4 */ struct _TEB_ACTIVE_FRAME * Previous
  /* this+0x8 */ const struct _TEB_ACTIVE_FRAME_CONTEXT * Context
}

struct _TEB_ACTIVE_FRAME_CONTEXT {
  /* this+0x0 */ unsigned long Flags
  /* this+0x4 */ const char * FrameName
}

struct _TIME_DYNAMIC_ZONE_INFORMATION {
  /* this+0x0 */ long Bias
  /* this+0x4 */ wchar_t[0x20] StandardName
  /* this+0x44 */ struct _SYSTEMTIME StandardDate

  /* this+0x54 */ long StandardBias
  /* this+0x58 */ wchar_t[0x20] DaylightName
  /* this+0x98 */ struct _SYSTEMTIME DaylightDate

  /* this+0xa8 */ long DaylightBias
  /* this+0xac */ wchar_t[0x80] TimeZoneKeyName
  /* this+0x1ac */ unsigned char DynamicDaylightTimeDisabled
}

struct _TIME_ZONE_INFORMATION {
  /* this+0x0 */ long Bias
  /* this+0x4 */ wchar_t[0x20] StandardName
  /* this+0x44 */ struct _SYSTEMTIME StandardDate

  /* this+0x54 */ long StandardBias
  /* this+0x58 */ wchar_t[0x20] DaylightName
  /* this+0x98 */ struct _SYSTEMTIME DaylightDate

  /* this+0xa8 */ long DaylightBias
}

struct _TOKEN_ACCESS_INFORMATION {
  /* this+0x0 */ struct _SID_AND_ATTRIBUTES_HASH * SidHash
  /* this+0x4 */ struct _SID_AND_ATTRIBUTES_HASH * RestrictedSidHash
  /* this+0x8 */ struct _TOKEN_PRIVILEGES * Privileges
  /* this+0xc */ struct _LUID AuthenticationId

  /* this+0x14 */ enum _TOKEN_TYPE TokenType
  /* this+0x18 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
  /* this+0x1c */ struct _TOKEN_MANDATORY_POLICY MandatoryPolicy

  /* this+0x20 */ unsigned long Flags
}

struct _TOKEN_AUDIT_POLICY {
  /* this+0x0 */ unsigned char[0x1b] PerUserPolicy
}

struct _TOKEN_CONTROL {
  /* this+0x0 */ struct _LUID TokenId

  /* this+0x8 */ struct _LUID AuthenticationId

  /* this+0x10 */ struct _LUID ModifiedId

  /* this+0x18 */ struct _TOKEN_SOURCE TokenSource

}

struct _TOKEN_DEFAULT_DACL {
  /* this+0x0 */ struct _ACL * DefaultDacl
}

struct _TOKEN_ELEVATION {
  /* this+0x0 */ unsigned long TokenIsElevated
}

struct _TOKEN_GROUPS {
  /* this+0x0 */ unsigned long GroupCount
  /* this+0x4 */ struct _SID_AND_ATTRIBUTES[0x1] Groups
}

struct _TOKEN_GROUPS_AND_PRIVILEGES {
  /* this+0x0 */ unsigned long SidCount
  /* this+0x4 */ unsigned long SidLength
  /* this+0x8 */ struct _SID_AND_ATTRIBUTES * Sids
  /* this+0xc */ unsigned long RestrictedSidCount
  /* this+0x10 */ unsigned long RestrictedSidLength
  /* this+0x14 */ struct _SID_AND_ATTRIBUTES * RestrictedSids
  /* this+0x18 */ unsigned long PrivilegeCount
  /* this+0x1c */ unsigned long PrivilegeLength
  /* this+0x20 */ struct _LUID_AND_ATTRIBUTES * Privileges
  /* this+0x24 */ struct _LUID AuthenticationId

}

struct _TOKEN_LINKED_TOKEN {
  /* this+0x0 */ void * LinkedToken
}

struct _TOKEN_MANDATORY_LABEL {
  /* this+0x0 */ struct _SID_AND_ATTRIBUTES Label

}

struct _TOKEN_MANDATORY_POLICY {
  /* this+0x0 */ unsigned long Policy
}

struct _TOKEN_ORIGIN {
  /* this+0x0 */ struct _LUID OriginatingLogonSession

}

struct _TOKEN_OWNER {
  /* this+0x0 */ void * Owner
}

struct _TOKEN_PRIMARY_GROUP {
  /* this+0x0 */ void * PrimaryGroup
}

struct _TOKEN_PRIVILEGES {
  /* this+0x0 */ unsigned long PrivilegeCount
  /* this+0x4 */ struct _LUID_AND_ATTRIBUTES[0x1] Privileges
}

struct _TOKEN_SOURCE {
  /* this+0x0 */ char[0x8] SourceName
  /* this+0x8 */ struct _LUID SourceIdentifier

}

struct _TOKEN_STATISTICS {
  /* this+0x0 */ struct _LUID TokenId

  /* this+0x8 */ struct _LUID AuthenticationId

  /* this+0x10 */ union _LARGE_INTEGER ExpirationTime

  /* this+0x18 */ enum _TOKEN_TYPE TokenType
  /* this+0x1c */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
  /* this+0x20 */ unsigned long DynamicCharged
  /* this+0x24 */ unsigned long DynamicAvailable
  /* this+0x28 */ unsigned long GroupCount
  /* this+0x2c */ unsigned long PrivilegeCount
  /* this+0x30 */ struct _LUID ModifiedId

}

struct _TOKEN_USER {
  /* this+0x0 */ struct _SID_AND_ATTRIBUTES User

}

struct _TP_CALLBACK_ENVIRON_V1 {
  /* this+0x0 */ unsigned long Version
  /* this+0x4 */ struct _TP_POOL * Pool
  /* this+0x8 */ struct _TP_CLEANUP_GROUP * CleanupGroup
  /* this+0xc */ function  * CleanupGroupCancelCallback
  /* this+0x10 */ void * RaceDll
  /* this+0x14 */ struct _ACTIVATION_CONTEXT * ActivationContext
  /* this+0x18 */ function  * FinalizationCallback
  /* this+0x1c */ union <unnamed-tag> u

}

union _TP_CALLBACK_ENVIRON_V1::<unnamed-type-u> {
  /* this+0x0 */ unsigned long Flags
    /* this+0x0 */ struct _TP_CALLBACK_ENVIRON_V1::<unnamed-type-u>::<unnamed-type-s> s

}

struct _TP_CALLBACK_ENVIRON_V1::<unnamed-type-u>::<unnamed-type-s> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned long LongFunction
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned long Persistent
  /* this(bf)+0x0:0x2 len(0x1e) */ unsigned long Private
}

struct _TP_CALLBACK_ENVIRON_V3 {
  /* this+0x0 */ unsigned long Version
  /* this+0x4 */ struct _TP_POOL * Pool
  /* this+0x8 */ struct _TP_CLEANUP_GROUP * CleanupGroup
  /* this+0xc */ function  * CleanupGroupCancelCallback
  /* this+0x10 */ void * RaceDll
  /* this+0x14 */ struct _ACTIVATION_CONTEXT * ActivationContext
  /* this+0x18 */ function  * FinalizationCallback
    /* this+0x1c */ union _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u> u

  /* this+0x20 */ enum _TP_CALLBACK_PRIORITY CallbackPriority
  /* this+0x24 */ unsigned long Size
}

union _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u> {
  /* this+0x0 */ unsigned long Flags
    /* this+0x0 */ struct _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u>::<unnamed-type-s> s

}

struct _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u>::<unnamed-type-s> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned long LongFunction
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned long Persistent
  /* this(bf)+0x0:0x2 len(0x1e) */ unsigned long Private
}

struct _TP_CALLBACK_INSTANCE {
}

struct _TP_CLEANUP_GROUP {
}

struct _TP_IO {
}

struct _TP_POOL {
}

struct _TP_POOL_STACK_INFORMATION {
  /* this+0x0 */ unsigned long StackReserve
  /* this+0x4 */ unsigned long StackCommit
}

struct _TP_TIMER {
}

struct _TP_WAIT {
}

struct _TP_WORK {
}

struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID TmIdentity

  /* this+0x10 */ union _LARGE_INTEGER VirtualClock

}

struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
  /* this+0x0 */ unsigned long LogPathLength
  /* this+0x4 */ wchar_t[0x1] LogPath
}

struct _TRANSACTIONMANAGER_LOG_INFORMATION {
  /* this+0x0 */ struct _GUID LogIdentity

}

struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
  /* this+0x0 */ struct _GUID OldestTransactionGuid

}

struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
  /* this+0x0 */ unsigned __int64 LastRecoveredLsn
}

struct _TRANSACTION_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID TransactionId

  /* this+0x10 */ unsigned long State
  /* this+0x14 */ unsigned long Outcome
}

struct _TRANSACTION_BIND_INFORMATION {
  /* this+0x0 */ void * TmHandle
}

struct _TRANSACTION_ENLISTMENTS_INFORMATION {
  /* this+0x0 */ unsigned long NumberOfEnlistments
  /* this+0x4 */ struct _TRANSACTION_ENLISTMENT_PAIR[0x1] EnlistmentPair
}

struct _TRANSACTION_ENLISTMENT_PAIR {
  /* this+0x0 */ struct _GUID EnlistmentId

  /* this+0x10 */ struct _GUID ResourceManagerId

}

struct _TRANSACTION_LIST_ENTRY {
  /* this+0x0 */ struct _GUID UOW

}

struct _TRANSACTION_LIST_INFORMATION {
  /* this+0x0 */ unsigned long NumberOfTransactions
  /* this+0x4 */ struct _TRANSACTION_LIST_ENTRY[0x1] TransactionInformation
}

struct _TRANSACTION_NOTIFICATION {
  /* this+0x0 */ void * TransactionKey
  /* this+0x4 */ unsigned long TransactionNotification
  /* this+0x8 */ union _LARGE_INTEGER TmVirtualClock

  /* this+0x10 */ unsigned long ArgumentLength
}

struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
  /* this+0x0 */ unsigned long MarshalCookie
  /* this+0x4 */ struct _GUID UOW

}

struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
  /* this+0x0 */ unsigned long PropagationCookie
  /* this+0x4 */ struct _GUID UOW

  /* this+0x14 */ struct _GUID TmIdentity

  /* this+0x24 */ unsigned long BufferLength
}

struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
  /* this+0x0 */ struct _GUID EnlistmentId

  /* this+0x10 */ struct _GUID UOW

}

struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
  /* this+0x0 */ unsigned long SavepointId
}

struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
  /* this+0x0 */ struct _GUID TmIdentity

  /* this+0x10 */ unsigned long Flags
}

struct _TRANSACTION_PROPERTIES_INFORMATION {
  /* this+0x0 */ unsigned long IsolationLevel
  /* this+0x4 */ unsigned long IsolationFlags
  /* this+0x8 */ union _LARGE_INTEGER Timeout

  /* this+0x10 */ unsigned long Outcome
  /* this+0x14 */ unsigned long DescriptionLength
  /* this+0x18 */ wchar_t[0x1] Description
}

struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
  /* this+0x0 */ struct _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair

}

struct _TRIVERTEX {
  /* this+0x0 */ long x
  /* this+0x4 */ long y
  /* this+0x8 */ unsigned short Red
  /* this+0xa */ unsigned short Green
  /* this+0xc */ unsigned short Blue
  /* this+0xe */ unsigned short Alpha
}

struct _TypeDescriptor {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x0] name
}

struct _U32ARRAY {
  /* this+0x0 */ unsigned long[0x4] W
}

struct _U64 {
  /* this+0x0 */ unsigned long[0x2] W
}

union _ULARGE_INTEGER {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ unsigned long HighPart
    /* this+0x0 */ struct _ULARGE_INTEGER::<unnamed-type-u> u

  /* this+0x0 */ unsigned __int64 QuadPart
}

struct _ULARGE_INTEGER::<unnamed-type-u> {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ unsigned long HighPart
}

struct _UMS_CREATE_THREAD_ATTRIBUTES {
  /* this+0x0 */ unsigned long UmsVersion
  /* this+0x4 */ void * UmsContext
  /* this+0x8 */ void * UmsCompletionList
}

struct _UMS_SCHEDULER_STARTUP_INFO {
  /* this+0x0 */ unsigned long UmsVersion
  /* this+0x4 */ void * CompletionList
  /* this+0x8 */ function  * SchedulerProc
  /* this+0xc */ void * SchedulerParam
}

struct _UNICODE_STRING {
  /* this+0x0 */ unsigned short Length
  /* this+0x2 */ unsigned short MaximumLength
  /* this+0x4 */ unsigned short * Buffer
}

struct _UNIVERSAL_NAME_INFOA {
  /* this+0x0 */ char * lpUniversalName
}

struct _UNIVERSAL_NAME_INFOW {
  /* this+0x0 */ wchar_t * lpUniversalName
}

struct _UNLOAD_DLL_DEBUG_INFO {
  /* this+0x0 */ void * lpBaseOfDll
}

struct _VIDEOPARAMETERS {
  /* this+0x0 */ struct _GUID Guid

  /* this+0x10 */ unsigned long dwOffset
  /* this+0x14 */ unsigned long dwCommand
  /* this+0x18 */ unsigned long dwFlags
  /* this+0x1c */ unsigned long dwMode
  /* this+0x20 */ unsigned long dwTVStandard
  /* this+0x24 */ unsigned long dwAvailableModes
  /* this+0x28 */ unsigned long dwAvailableTVStandard
  /* this+0x2c */ unsigned long dwFlickerFilter
  /* this+0x30 */ unsigned long dwOverScanX
  /* this+0x34 */ unsigned long dwOverScanY
  /* this+0x38 */ unsigned long dwMaxUnscaledX
  /* this+0x3c */ unsigned long dwMaxUnscaledY
  /* this+0x40 */ unsigned long dwPositionX
  /* this+0x44 */ unsigned long dwPositionY
  /* this+0x48 */ unsigned long dwBrightness
  /* this+0x4c */ unsigned long dwContrast
  /* this+0x50 */ unsigned long dwCPType
  /* this+0x54 */ unsigned long dwCPCommand
  /* this+0x58 */ unsigned long dwCPStandard
  /* this+0x5c */ unsigned long dwCPKey
  /* this+0x60 */ unsigned long bCP_APSTriggerBits
  /* this+0x64 */ unsigned char[0x100] bOEMCopyProtection
}

struct _WGLSWAP {
  /* this+0x0 */ struct HDC__ * hdc
  /* this+0x4 */ unsigned int uiFlags
}

struct _WIN32_FILE_ATTRIBUTE_DATA {
  /* this+0x0 */ unsigned long dwFileAttributes
  /* this+0x4 */ struct _FILETIME ftCreationTime

  /* this+0xc */ struct _FILETIME ftLastAccessTime

  /* this+0x14 */ struct _FILETIME ftLastWriteTime

  /* this+0x1c */ unsigned long nFileSizeHigh
  /* this+0x20 */ unsigned long nFileSizeLow
}

struct _WIN32_FIND_DATAA {
  /* this+0x0 */ unsigned long dwFileAttributes
  /* this+0x4 */ struct _FILETIME ftCreationTime

  /* this+0xc */ struct _FILETIME ftLastAccessTime

  /* this+0x14 */ struct _FILETIME ftLastWriteTime

  /* this+0x1c */ unsigned long nFileSizeHigh
  /* this+0x20 */ unsigned long nFileSizeLow
  /* this+0x24 */ unsigned long dwReserved0
  /* this+0x28 */ unsigned long dwReserved1
  /* this+0x2c */ char[0x104] cFileName
  /* this+0x130 */ char[0xe] cAlternateFileName
}

struct _WIN32_FIND_DATAW {
  /* this+0x0 */ unsigned long dwFileAttributes
  /* this+0x4 */ struct _FILETIME ftCreationTime

  /* this+0xc */ struct _FILETIME ftLastAccessTime

  /* this+0x14 */ struct _FILETIME ftLastWriteTime

  /* this+0x1c */ unsigned long nFileSizeHigh
  /* this+0x20 */ unsigned long nFileSizeLow
  /* this+0x24 */ unsigned long dwReserved0
  /* this+0x28 */ unsigned long dwReserved1
  /* this+0x2c */ wchar_t[0x104] cFileName
  /* this+0x234 */ wchar_t[0xe] cAlternateFileName
}

struct _WIN32_FIND_STREAM_DATA {
  /* this+0x0 */ union _LARGE_INTEGER StreamSize

  /* this+0x8 */ wchar_t[0x128] cStreamName
}

struct _WIN32_STREAM_ID {
  /* this+0x0 */ unsigned long dwStreamId
  /* this+0x4 */ unsigned long dwStreamAttributes
  /* this+0x8 */ union _LARGE_INTEGER Size

  /* this+0x10 */ unsigned long dwStreamNameSize
  /* this+0x14 */ wchar_t[0x1] cStreamName
}

struct _WINDOW_BUFFER_SIZE_RECORD {
  /* this+0x0 */ struct _COORD dwSize

}

struct _WOW64_CONTEXT {
  /* this+0x0 */ unsigned long ContextFlags
  /* this+0x4 */ unsigned long Dr0
  /* this+0x8 */ unsigned long Dr1
  /* this+0xc */ unsigned long Dr2
  /* this+0x10 */ unsigned long Dr3
  /* this+0x14 */ unsigned long Dr6
  /* this+0x18 */ unsigned long Dr7
  /* this+0x1c */ struct _WOW64_FLOATING_SAVE_AREA FloatSave

  /* this+0x8c */ unsigned long SegGs
  /* this+0x90 */ unsigned long SegFs
  /* this+0x94 */ unsigned long SegEs
  /* this+0x98 */ unsigned long SegDs
  /* this+0x9c */ unsigned long Edi
  /* this+0xa0 */ unsigned long Esi
  /* this+0xa4 */ unsigned long Ebx
  /* this+0xa8 */ unsigned long Edx
  /* this+0xac */ unsigned long Ecx
  /* this+0xb0 */ unsigned long Eax
  /* this+0xb4 */ unsigned long Ebp
  /* this+0xb8 */ unsigned long Eip
  /* this+0xbc */ unsigned long SegCs
  /* this+0xc0 */ unsigned long EFlags
  /* this+0xc4 */ unsigned long Esp
  /* this+0xc8 */ unsigned long SegSs
  /* this+0xcc */ unsigned char[0x200] ExtendedRegisters
}

struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
  /* this+0x0 */ unsigned long Selector
  /* this+0x4 */ struct _WOW64_LDT_ENTRY Descriptor

}

struct _WOW64_FLOATING_SAVE_AREA {
  /* this+0x0 */ unsigned long ControlWord
  /* this+0x4 */ unsigned long StatusWord
  /* this+0x8 */ unsigned long TagWord
  /* this+0xc */ unsigned long ErrorOffset
  /* this+0x10 */ unsigned long ErrorSelector
  /* this+0x14 */ unsigned long DataOffset
  /* this+0x18 */ unsigned long DataSelector
  /* this+0x1c */ unsigned char[0x50] RegisterArea
  /* this+0x6c */ unsigned long Cr0NpxState
}

struct _WOW64_LDT_ENTRY {
  /* this+0x0 */ unsigned short LimitLow
  /* this+0x2 */ unsigned short BaseLow
    /* this+0x4 */ union _WOW64_LDT_ENTRY::<unnamed-type-HighWord> HighWord

}

union _WOW64_LDT_ENTRY::<unnamed-type-HighWord> {
    /* this+0x0 */ struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> Bytes

    /* this+0x0 */ struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> Bits

}

struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> {
  /* this(bf)+0x0:0x0 len(0x8) */ unsigned long BaseMid
  /* this(bf)+0x0:0x8 len(0x5) */ unsigned long Type
  /* this(bf)+0x0:0xd len(0x2) */ unsigned long Dpl
  /* this(bf)+0x0:0xf len(0x1) */ unsigned long Pres
  /* this(bf)+0x0:0x10 len(0x4) */ unsigned long LimitHi
  /* this(bf)+0x0:0x14 len(0x1) */ unsigned long Sys
  /* this(bf)+0x0:0x15 len(0x1) */ unsigned long Reserved_0
  /* this(bf)+0x0:0x16 len(0x1) */ unsigned long Default_Big
  /* this(bf)+0x0:0x17 len(0x1) */ unsigned long Granularity
  /* this(bf)+0x0:0x18 len(0x8) */ unsigned long BaseHi
}

struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> {
  /* this+0x0 */ unsigned char BaseMid
  /* this+0x1 */ unsigned char Flags1
  /* this+0x2 */ unsigned char Flags2
  /* this+0x3 */ unsigned char BaseHi
}

struct _WSABUF {
  /* this+0x0 */ unsigned long len
  /* this+0x4 */ char * buf
}

struct _WSACOMPLETION {
  /* this+0x0 */ enum _WSACOMPLETIONTYPE Type
    /* this+0x4 */ union _WSACOMPLETION::<unnamed-type-Parameters> Parameters

}

union _WSACOMPLETION::<unnamed-type-Parameters> {
    /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-WindowMessage> WindowMessage

    /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Event> Event

    /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Apc> Apc

    /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Port> Port

}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Apc> {
  /* this+0x0 */ struct _OVERLAPPED * lpOverlapped
  /* this+0x4 */ function  * lpfnCompletionProc
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Event> {
  /* this+0x0 */ struct _OVERLAPPED * lpOverlapped
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Port> {
  /* this+0x0 */ struct _OVERLAPPED * lpOverlapped
  /* this+0x4 */ void * hPort
  /* this+0x8 */ unsigned long Key
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-WindowMessage> {
  /* this+0x0 */ struct HWND__ * hWnd
  /* this+0x4 */ unsigned int uMsg
  /* this+0x8 */ unsigned int context
}

struct _WSAMSG {
  /* this+0x0 */ struct sockaddr * name
  /* this+0x4 */ int namelen
  /* this+0x8 */ struct _WSABUF * lpBuffers
  /* this+0xc */ unsigned long dwBufferCount
  /* this+0x10 */ struct _WSABUF Control

  /* this+0x18 */ unsigned long dwFlags
}

struct _WSANAMESPACE_INFOA {
  /* this+0x0 */ struct _GUID NSProviderId

  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ int fActive
  /* this+0x18 */ unsigned long dwVersion
  /* this+0x1c */ char * lpszIdentifier
}

struct _WSANAMESPACE_INFOEXA {
  /* this+0x0 */ struct _GUID NSProviderId

  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ int fActive
  /* this+0x18 */ unsigned long dwVersion
  /* this+0x1c */ char * lpszIdentifier
  /* this+0x20 */ struct _BLOB ProviderSpecific

}

struct _WSANAMESPACE_INFOEXW {
  /* this+0x0 */ struct _GUID NSProviderId

  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ int fActive
  /* this+0x18 */ unsigned long dwVersion
  /* this+0x1c */ wchar_t * lpszIdentifier
  /* this+0x20 */ struct _BLOB ProviderSpecific

}

struct _WSANAMESPACE_INFOW {
  /* this+0x0 */ struct _GUID NSProviderId

  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ int fActive
  /* this+0x18 */ unsigned long dwVersion
  /* this+0x1c */ wchar_t * lpszIdentifier
}

struct _WSANETWORKEVENTS {
  /* this+0x0 */ long lNetworkEvents
  /* this+0x4 */ int[0xa] iErrorCode
}

struct _WSANSClassInfoA {
  /* this+0x0 */ char * lpszName
  /* this+0x4 */ unsigned long dwNameSpace
  /* this+0x8 */ unsigned long dwValueType
  /* this+0xc */ unsigned long dwValueSize
  /* this+0x10 */ void * lpValue
}

struct _WSANSClassInfoW {
  /* this+0x0 */ wchar_t * lpszName
  /* this+0x4 */ unsigned long dwNameSpace
  /* this+0x8 */ unsigned long dwValueType
  /* this+0xc */ unsigned long dwValueSize
  /* this+0x10 */ void * lpValue
}

struct _WSAPROTOCOLCHAIN {
  /* this+0x0 */ int ChainLen
  /* this+0x4 */ unsigned long[0x7] ChainEntries
}

struct _WSAPROTOCOL_INFOA {
  /* this+0x0 */ unsigned long dwServiceFlags1
  /* this+0x4 */ unsigned long dwServiceFlags2
  /* this+0x8 */ unsigned long dwServiceFlags3
  /* this+0xc */ unsigned long dwServiceFlags4
  /* this+0x10 */ unsigned long dwProviderFlags
  /* this+0x14 */ struct _GUID ProviderId

  /* this+0x24 */ unsigned long dwCatalogEntryId
  /* this+0x28 */ struct _WSAPROTOCOLCHAIN ProtocolChain

  /* this+0x48 */ int iVersion
  /* this+0x4c */ int iAddressFamily
  /* this+0x50 */ int iMaxSockAddr
  /* this+0x54 */ int iMinSockAddr
  /* this+0x58 */ int iSocketType
  /* this+0x5c */ int iProtocol
  /* this+0x60 */ int iProtocolMaxOffset
  /* this+0x64 */ int iNetworkByteOrder
  /* this+0x68 */ int iSecurityScheme
  /* this+0x6c */ unsigned long dwMessageSize
  /* this+0x70 */ unsigned long dwProviderReserved
  /* this+0x74 */ char[0x100] szProtocol
}

struct _WSAPROTOCOL_INFOW {
  /* this+0x0 */ unsigned long dwServiceFlags1
  /* this+0x4 */ unsigned long dwServiceFlags2
  /* this+0x8 */ unsigned long dwServiceFlags3
  /* this+0xc */ unsigned long dwServiceFlags4
  /* this+0x10 */ unsigned long dwProviderFlags
  /* this+0x14 */ struct _GUID ProviderId

  /* this+0x24 */ unsigned long dwCatalogEntryId
  /* this+0x28 */ struct _WSAPROTOCOLCHAIN ProtocolChain

  /* this+0x48 */ int iVersion
  /* this+0x4c */ int iAddressFamily
  /* this+0x50 */ int iMaxSockAddr
  /* this+0x54 */ int iMinSockAddr
  /* this+0x58 */ int iSocketType
  /* this+0x5c */ int iProtocol
  /* this+0x60 */ int iProtocolMaxOffset
  /* this+0x64 */ int iNetworkByteOrder
  /* this+0x68 */ int iSecurityScheme
  /* this+0x6c */ unsigned long dwMessageSize
  /* this+0x70 */ unsigned long dwProviderReserved
  /* this+0x74 */ wchar_t[0x100] szProtocol
}

struct _WSAQuerySet2A {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ char * lpszServiceInstanceName
  /* this+0x8 */ struct _WSAVersion * lpVersion
  /* this+0xc */ char * lpszComment
  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ struct _GUID * lpNSProviderId
  /* this+0x18 */ char * lpszContext
  /* this+0x1c */ unsigned long dwNumberOfProtocols
  /* this+0x20 */ struct _AFPROTOCOLS * lpafpProtocols
  /* this+0x24 */ char * lpszQueryString
  /* this+0x28 */ unsigned long dwNumberOfCsAddrs
  /* this+0x2c */ struct _CSADDR_INFO * lpcsaBuffer
  /* this+0x30 */ unsigned long dwOutputFlags
  /* this+0x34 */ struct _BLOB * lpBlob
}

struct _WSAQuerySet2W {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ wchar_t * lpszServiceInstanceName
  /* this+0x8 */ struct _WSAVersion * lpVersion
  /* this+0xc */ wchar_t * lpszComment
  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ struct _GUID * lpNSProviderId
  /* this+0x18 */ wchar_t * lpszContext
  /* this+0x1c */ unsigned long dwNumberOfProtocols
  /* this+0x20 */ struct _AFPROTOCOLS * lpafpProtocols
  /* this+0x24 */ wchar_t * lpszQueryString
  /* this+0x28 */ unsigned long dwNumberOfCsAddrs
  /* this+0x2c */ struct _CSADDR_INFO * lpcsaBuffer
  /* this+0x30 */ unsigned long dwOutputFlags
  /* this+0x34 */ struct _BLOB * lpBlob
}

struct _WSAQuerySetA {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ char * lpszServiceInstanceName
  /* this+0x8 */ struct _GUID * lpServiceClassId
  /* this+0xc */ struct _WSAVersion * lpVersion
  /* this+0x10 */ char * lpszComment
  /* this+0x14 */ unsigned long dwNameSpace
  /* this+0x18 */ struct _GUID * lpNSProviderId
  /* this+0x1c */ char * lpszContext
  /* this+0x20 */ unsigned long dwNumberOfProtocols
  /* this+0x24 */ struct _AFPROTOCOLS * lpafpProtocols
  /* this+0x28 */ char * lpszQueryString
  /* this+0x2c */ unsigned long dwNumberOfCsAddrs
  /* this+0x30 */ struct _CSADDR_INFO * lpcsaBuffer
  /* this+0x34 */ unsigned long dwOutputFlags
  /* this+0x38 */ struct _BLOB * lpBlob
}

struct _WSAQuerySetW {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ wchar_t * lpszServiceInstanceName
  /* this+0x8 */ struct _GUID * lpServiceClassId
  /* this+0xc */ struct _WSAVersion * lpVersion
  /* this+0x10 */ wchar_t * lpszComment
  /* this+0x14 */ unsigned long dwNameSpace
  /* this+0x18 */ struct _GUID * lpNSProviderId
  /* this+0x1c */ wchar_t * lpszContext
  /* this+0x20 */ unsigned long dwNumberOfProtocols
  /* this+0x24 */ struct _AFPROTOCOLS * lpafpProtocols
  /* this+0x28 */ wchar_t * lpszQueryString
  /* this+0x2c */ unsigned long dwNumberOfCsAddrs
  /* this+0x30 */ struct _CSADDR_INFO * lpcsaBuffer
  /* this+0x34 */ unsigned long dwOutputFlags
  /* this+0x38 */ struct _BLOB * lpBlob
}

struct _WSAServiceClassInfoA {
  /* this+0x0 */ struct _GUID * lpServiceClassId
  /* this+0x4 */ char * lpszServiceClassName
  /* this+0x8 */ unsigned long dwCount
  /* this+0xc */ struct _WSANSClassInfoA * lpClassInfos
}

struct _WSAServiceClassInfoW {
  /* this+0x0 */ struct _GUID * lpServiceClassId
  /* this+0x4 */ wchar_t * lpszServiceClassName
  /* this+0x8 */ unsigned long dwCount
  /* this+0xc */ struct _WSANSClassInfoW * lpClassInfos
}

struct _WSAVersion {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ enum _WSAEcomparator ecHow
}

struct _Wx86ThreadState {
  /* this+0x0 */ unsigned long * CallBx86Eip
  /* this+0x4 */ void * DeallocationCpu
  /* this+0x8 */ unsigned char UseKnownWx86Dll
  /* this+0x9 */ char OleStubInvoked
}

struct _XCPT_ACTION {
  /* this+0x0 */ unsigned long XcptNum
  /* this+0x4 */ int SigNum
  /* this+0x8 */ function  * XcptAction
}

struct _XSAVE_AREA {
  /* this+0x0 */ struct _XSAVE_FORMAT LegacyState

  /* this+0x200 */ struct _XSAVE_AREA_HEADER Header

}

struct _XSAVE_AREA_HEADER {
  /* this+0x0 */ unsigned __int64 Mask
  /* this+0x8 */ unsigned __int64[0x7] Reserved
}

struct _XSAVE_FORMAT {
  /* this+0x0 */ unsigned short ControlWord
  /* this+0x2 */ unsigned short StatusWord
  /* this+0x4 */ unsigned char TagWord
  /* this+0x5 */ unsigned char Reserved1
  /* this+0x6 */ unsigned short ErrorOpcode
  /* this+0x8 */ unsigned long ErrorOffset
  /* this+0xc */ unsigned short ErrorSelector
  /* this+0xe */ unsigned short Reserved2
  /* this+0x10 */ unsigned long DataOffset
  /* this+0x14 */ unsigned short DataSelector
  /* this+0x16 */ unsigned short Reserved3
  /* this+0x18 */ unsigned long MxCsr
  /* this+0x1c */ unsigned long MxCsr_Mask
  /* this+0x20 */ struct _M128A[0x8] FloatRegisters
  /* this+0xa0 */ struct _M128A[0x8] XmmRegisters
  /* this+0x120 */ unsigned char[0xc0] Reserved4
  /* this+0x1e0 */ unsigned long[0x7] StackControl
  /* this+0x1fc */ unsigned long Cr0NpxState
}

struct _XSTATE_CONFIGURATION {
  /* this+0x0 */ unsigned __int64 EnabledFeatures
  /* this+0x8 */ unsigned long Size
  /* this(bf)+0xc:0x0 len(0x1) */ unsigned long OptimizedSave
  /* this+0x10 */ struct _XSTATE_FEATURE[0x40] Features
}

struct _XSTATE_CONTEXT {
  /* this+0x0 */ unsigned __int64 Mask
  /* this+0x8 */ unsigned long Length
  /* this+0xc */ unsigned long Reserved1
  /* this+0x10 */ struct _XSAVE_AREA * Area
  /* this+0x14 */ unsigned long Reserved2
  /* this+0x18 */ void * Buffer
  /* this+0x1c */ unsigned long Reserved3
}

struct _XSTATE_FEATURE {
  /* this+0x0 */ unsigned long Offset
  /* this+0x4 */ unsigned long Size
}

struct __JUMP_BUFFER {
  /* this+0x0 */ unsigned long Ebp
  /* this+0x4 */ unsigned long Ebx
  /* this+0x8 */ unsigned long Edi
  /* this+0xc */ unsigned long Esi
  /* this+0x10 */ unsigned long Esp
  /* this+0x14 */ unsigned long Eip
  /* this+0x18 */ unsigned long Registration
  /* this+0x1c */ unsigned long TryLevel
  /* this+0x20 */ unsigned long Cookie
  /* this+0x24 */ unsigned long UnwindFunc
  /* this+0x28 */ unsigned long[0x6] UnwindData
}

struct __lc_time_data {
  /* this+0x0 */ char *[0x7] wday_abbr
  /* this+0x1c */ char *[0x7] wday
  /* this+0x38 */ char *[0xc] month_abbr
  /* this+0x68 */ char *[0xc] month
  /* this+0x98 */ char *[0x2] ampm
  /* this+0xa0 */ char * ww_sdatefmt
  /* this+0xa4 */ char * ww_ldatefmt
  /* this+0xa8 */ char * ww_timefmt
  /* this+0xac */ unsigned long ww_lcid
  /* this+0xb0 */ int ww_caltype
  /* this+0xb4 */ int refcount
  /* this+0xb8 */ wchar_t *[0x7] _W_wday_abbr
  /* this+0xd4 */ wchar_t *[0x7] _W_wday
  /* this+0xf0 */ wchar_t *[0xc] _W_month_abbr
  /* this+0x120 */ wchar_t *[0xc] _W_month
  /* this+0x150 */ wchar_t *[0x2] _W_ampm
  /* this+0x158 */ wchar_t * _W_ww_sdatefmt
  /* this+0x15c */ wchar_t * _W_ww_ldatefmt
  /* this+0x160 */ wchar_t * _W_ww_timefmt
}

union __m128 {
  /* this+0x0 */ float[0x4] m128_f32
  /* this+0x0 */ unsigned __int64[0x2] m128_u64
  /* this+0x0 */ char[0x10] m128_i8
  /* this+0x0 */ short[0x8] m128_i16
  /* this+0x0 */ int[0x4] m128_i32
  /* this+0x0 */ __int64[0x2] m128_i64
  /* this+0x0 */ unsigned char[0x10] m128_u8
  /* this+0x0 */ unsigned short[0x8] m128_u16
  /* this+0x0 */ unsigned int[0x4] m128_u32
}

struct __m128d {
  /* this+0x0 */ double[0x2] m128d_f64
}

union __m128i {
  /* this+0x0 */ char[0x10] m128i_i8
  /* this+0x0 */ short[0x8] m128i_i16
  /* this+0x0 */ int[0x4] m128i_i32
  /* this+0x0 */ __int64[0x2] m128i_i64
  /* this+0x0 */ unsigned char[0x10] m128i_u8
  /* this+0x0 */ unsigned short[0x8] m128i_u16
  /* this+0x0 */ unsigned int[0x4] m128i_u32
  /* this+0x0 */ unsigned __int64[0x2] m128i_u64
}

union __m256 {
  /* this+0x0 */ float[0x8] m256_f32
}

struct __m256d {
  /* this+0x0 */ double[0x4] m256d_f64
}

union __m256i {
  /* this+0x0 */ char[0x20] m256i_i8
  /* this+0x0 */ short[0x10] m256i_i16
  /* this+0x0 */ int[0x8] m256i_i32
  /* this+0x0 */ __int64[0x4] m256i_i64
  /* this+0x0 */ unsigned char[0x20] m256i_u8
  /* this+0x0 */ unsigned short[0x10] m256i_u16
  /* this+0x0 */ unsigned int[0x8] m256i_u32
  /* this+0x0 */ unsigned __int64[0x4] m256i_u64
}

union __m64 {
  /* this+0x0 */ unsigned __int64 m64_u64
  /* this+0x0 */ float[0x2] m64_f32
  /* this+0x0 */ char[0x8] m64_i8
  /* this+0x0 */ short[0x4] m64_i16
  /* this+0x0 */ int[0x2] m64_i32
  /* this+0x0 */ __int64 m64_i64
  /* this+0x0 */ unsigned char[0x8] m64_u8
  /* this+0x0 */ unsigned short[0x4] m64_u16
  /* this+0x0 */ unsigned int[0x2] m64_u32
}

struct __s_GUID {
  /* this+0x0 */ unsigned long Data1
  /* this+0x4 */ unsigned short Data2
  /* this+0x6 */ unsigned short Data3
  /* this+0x8 */ unsigned char[0x8] Data4
}

struct __timeb64 {
  /* this+0x0 */ __int64 time
  /* this+0x8 */ unsigned short millitm
  /* this+0xa */ short timezone
  /* this+0xc */ short dstflag
}

struct __type_info_node {
  /* this+0x0 */ void * _MemPtr
  /* this+0x4 */ struct __type_info_node * _Next
}

struct __vc_attributes::aggregatableAttribute {
    public void aggregatableAttribute(enum __vc_attributes::aggregatableAttribute::type_e)
  public void aggregatableAttribute()
  /* this+0x0 */ enum __vc_attributes::aggregatableAttribute::type_e type
}

struct __vc_attributes::appobjectAttribute {
  public void appobjectAttribute()
}

struct __vc_attributes::async_uuidAttribute {
  public void async_uuidAttribute(const char *)
  /* this+0x0 */ const char * uuid
}

struct __vc_attributes::atl::aggregatesAttribute {
  public void aggregatesAttribute(const char *)
  public void aggregatesAttribute()
  /* this+0x0 */ const char * clsid
}

struct __vc_attributes::atl::com_interface_entryAttribute {
  public void com_interface_entryAttribute(const char *)
  public void com_interface_entryAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::atl::db_accessorAttribute {
  public void db_accessorAttribute(int, bool)
  public void db_accessorAttribute()
  /* this+0x0 */ int id
  /* this+0x4 */ bool auto_
}

struct __vc_attributes::atl::db_columnAttribute {
  public void db_columnAttribute(const char *, const char *, const char *, const char *, const char *, const char *)
  public void db_columnAttribute(const char *)
  public void db_columnAttribute()
  /* this+0x0 */ const char * ordinal
  /* this+0x4 */ const char * dbtype
  /* this+0x8 */ const char * precision
  /* this+0xc */ const char * scale
  /* this+0x10 */ const char * status
  /* this+0x14 */ const char * length
}

struct __vc_attributes::atl::db_commandAttribute {
  public void db_commandAttribute(const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)
  public void db_commandAttribute(const wchar_t *)
  public void db_commandAttribute(const char *, const char *, const char *, const char *, const char *, const char *)
  public void db_commandAttribute(const char *)
  public void db_commandAttribute()
  /* this+0x0 */ const char * command
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * source_name
  /* this+0xc */ const char * hresult
  /* this+0x10 */ const char * bindings
  /* this+0x14 */ const char * bulk_fetch
}

struct __vc_attributes::atl::db_paramAttribute {
  public void db_paramAttribute(const char *, const char *, const char *, const char *, const char *, const char *, const char *)
  public void db_paramAttribute(const char *)
  public void db_paramAttribute()
  /* this+0x0 */ const char * ordinal
  /* this+0x4 */ const char * paramtype
  /* this+0x8 */ const char * dbtype
  /* this+0xc */ const char * precision
  /* this+0x10 */ const char * scale
  /* this+0x14 */ const char * status
  /* this+0x18 */ const char * length
}

struct __vc_attributes::atl::db_sourceAttribute {
  public void db_sourceAttribute(const wchar_t *, const wchar_t *, const wchar_t *)
  public void db_sourceAttribute(const wchar_t *)
  public void db_sourceAttribute(const char *, const char *, const char *)
  public void db_sourceAttribute(const char *)
  public void db_sourceAttribute()
  /* this+0x0 */ const char * source
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * hresult
}

struct __vc_attributes::atl::db_tableAttribute {
  public void db_tableAttribute(const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)
  public void db_tableAttribute(const wchar_t *)
  public void db_tableAttribute(const char *, const char *, const char *, const char *, const char *)
  public void db_tableAttribute(const char *)
  public void db_tableAttribute()
  /* this+0x0 */ const char * table
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * source_name
  /* this+0xc */ const char * hresult
  /* this+0x10 */ const char * bulk_fetch
}

struct __vc_attributes::atl::implements_categoryAttribute {
  public void implements_categoryAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::atl::perf_counterAttribute {
  public void perf_counterAttribute(const char *, const char *, int, int, int, int, bool, int, int, const char *)
  public void perf_counterAttribute()
  /* this+0x0 */ const char * namestring
  /* this+0x4 */ const char * helpstring
  /* this+0x8 */ int name_res
  /* this+0xc */ int help_res
  /* this+0x10 */ int countertype
  /* this+0x14 */ int defscale
  /* this+0x18 */ bool default_counter
  /* this+0x1c */ int detail
  /* this+0x20 */ int max_counter_size
  /* this+0x24 */ const char * countertype_string
}

struct __vc_attributes::atl::perf_objectAttribute {
  public void perf_objectAttribute(int, int, const char *, const char *, int, bool, const char *, int)
  public void perf_objectAttribute()
  /* this+0x0 */ int name_res
  /* this+0x4 */ int help_res
  /* this+0x8 */ const char * namestring
  /* this+0xc */ const char * helpstring
  /* this+0x10 */ int detail
  /* this+0x14 */ bool no_instances
  /* this+0x18 */ const char * class_
  /* this+0x1c */ int maxinstnamelen
}

struct __vc_attributes::atl::perfmonAttribute {
  public void perfmonAttribute(const char *, bool)
  public void perfmonAttribute(const char *)
  public void perfmonAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ bool register
}

struct __vc_attributes::atl::rdxAttribute {
  public void rdxAttribute(const char *, const char *, const char *)
  public void rdxAttribute(const char *, const char *)
  public void rdxAttribute()
  /* this+0x0 */ const char * key
  /* this+0x4 */ const char * valuename
  /* this+0x8 */ const char * regtype
}

struct __vc_attributes::atl::registration_scriptAttribute {
  public void registration_scriptAttribute(const char *)
  public void registration_scriptAttribute()
  /* this+0x0 */ const char * script
}

struct __vc_attributes::atl::request_handlerAttribute {
  public void request_handlerAttribute(const char *, const char *)
  public void request_handlerAttribute(const char *)
  public void request_handlerAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * sdl
}

struct __vc_attributes::atl::requires_categoryAttribute {
  public void requires_categoryAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::atl::soap_handlerAttribute {
  public void soap_handlerAttribute(const char *, const char *, const char *, const char *, const char *)
  public void soap_handlerAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * namespace
  /* this+0x8 */ const char * protocol
  /* this+0xc */ const char * style
  /* this+0x10 */ const char * use
}

struct __vc_attributes::atl::soap_headerAttribute {
  public void soap_headerAttribute(const char *, bool, bool, bool)
  public void soap_headerAttribute(const char *)
  public void soap_headerAttribute()
  /* this+0x0 */ const char * value
  /* this+0x4 */ bool required
  /* this+0x5 */ bool in
  /* this+0x6 */ bool out
}

struct __vc_attributes::atl::soap_methodAttribute {
  public void soap_methodAttribute(const char *)
  public void soap_methodAttribute()
  /* this+0x0 */ const char * name
}

struct __vc_attributes::atl::soap_namespaceAttribute {
  public void soap_namespaceAttribute(const char *)
  public void soap_namespaceAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::atl::support_error_infoAttribute {
  public void support_error_infoAttribute(const char *)
  /* this+0x0 */ const char * error_interface
}

struct __vc_attributes::atl::synchronizeAttribute {
  public void synchronizeAttribute()
}

struct __vc_attributes::atl::tag_nameAttribute {
  public void tag_nameAttribute(const char *, const char *)
  public void tag_nameAttribute(const char *)
  public void tag_nameAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * parse_func
}

struct __vc_attributes::bindableAttribute {
  public void bindableAttribute()
}

struct __vc_attributes::call_asAttribute {
  public void call_asAttribute(void *)
  /* this+0x0 */ void * local_proc
}

struct __vc_attributes::caseAttribute {
  public void caseAttribute(int)
  /* this+0x0 */ int value
}

struct __vc_attributes::coclassAttribute {
  public void coclassAttribute()
}

struct __vc_attributes::controlAttribute {
  public void controlAttribute()
}

struct __vc_attributes::cpp_quoteAttribute {
  public void cpp_quoteAttribute(const char *)
  /* this+0x0 */ const char * string
}

struct __vc_attributes::customAttribute {
  public void customAttribute(const char *)
  /* this+0x0 */ char * value
}

struct __vc_attributes::defaultAttribute {
  public void defaultAttribute(const char *)
  public void defaultAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::defaultbindAttribute {
  public void defaultbindAttribute()
}

struct __vc_attributes::defaultcollelemAttribute {
  public void defaultcollelemAttribute()
}

struct __vc_attributes::defaultvalueAttribute {
  public void defaultvalueAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::defaultvtableAttribute {
  public void defaultvtableAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::dispinterfaceAttribute {
  public void dispinterfaceAttribute()
}

struct __vc_attributes::displaybindAttribute {
  public void displaybindAttribute()
}

struct __vc_attributes::dualAttribute {
  public void dualAttribute()
}

struct __vc_attributes::emitidlAttribute {
  /* [0x0000:0x00000000] */ static  const int restricted
  /* [0x0000:0x00000000] */ static  const int forced
  /* [0x0000:0x00000000] */ static  const int push
  /* [0x0000:0x00000000] */ static  const int pop
  public void emitidlAttribute(int, bool)
  public void emitidlAttribute(int)
  public void emitidlAttribute()
  /* this+0x0 */ int value
  /* this+0x4 */ bool defaultimports
}

struct __vc_attributes::entryAttribute {
  public void entryAttribute(const char *)
  /* this+0x0 */ const char * entry_id
}

struct __vc_attributes::event_receiverAttribute {
    public void event_receiverAttribute(enum __vc_attributes::event_receiverAttribute::type_e, bool)
  public void event_receiverAttribute(enum __vc_attributes::event_receiverAttribute::type_e)
  public void event_receiverAttribute()
  /* this+0x0 */ enum __vc_attributes::event_receiverAttribute::type_e type
  /* this+0x4 */ bool layout_dependent
}

struct __vc_attributes::event_sourceAttribute {
      public void event_sourceAttribute(enum __vc_attributes::event_sourceAttribute::type_e)
  public void event_sourceAttribute()
  /* this+0x0 */ enum __vc_attributes::event_sourceAttribute::type_e type
  /* this+0x4 */ enum __vc_attributes::event_sourceAttribute::optimize_e optimize
  /* this+0x8 */ bool decorate
}

struct __vc_attributes::exportAttribute {
  public void exportAttribute()
}

struct __vc_attributes::first_isAttribute {
  public void first_isAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::helpcontextAttribute {
  public void helpcontextAttribute(const char *)
  /* this+0x0 */ const char * helpcontext_value
}

struct __vc_attributes::helper_attributes::as_stringAttribute {
  public void as_stringAttribute()
}

struct __vc_attributes::helper_attributes::attributeAttribute {
  /* [0x0000:0x00000000] */ static  const int All
  /* [0x0000:0x00000000] */ static  const int Assembly
  /* [0x0000:0x00000000] */ static  const int Class
  /* [0x0000:0x00000000] */ static  const int Constructor
  /* [0x0000:0x00000000] */ static  const int Delegate
  /* [0x0000:0x00000000] */ static  const int Enum
  /* [0x0000:0x00000000] */ static  const int Event
  /* [0x0000:0x00000000] */ static  const int Field
  /* [0x0000:0x00000000] */ static  const int GenericParameter
  /* [0x0000:0x00000000] */ static  const int Interface
  /* [0x0000:0x00000000] */ static  const int Method
  /* [0x0000:0x00000000] */ static  const int Module
  /* [0x0000:0x00000000] */ static  const int Parameter
  /* [0x0000:0x00000000] */ static  const int Property
  /* [0x0000:0x00000000] */ static  const int ReturnValue
  /* [0x0000:0x00000000] */ static  const int Struct
  public void attributeAttribute(int)
  public void attributeAttribute()
  /* this+0x0 */ int ValidOn
  /* this+0x4 */ bool AllowMultiple
  /* this+0x5 */ bool Inherited
}

struct __vc_attributes::helper_attributes::default_valueAttribute {
  public void default_valueAttribute(<NoType>)
  /* this+0x0 */ void * value
}

struct __vc_attributes::helper_attributes::help_stringAttribute {
  public void help_stringAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::helper_attributes::multi_valueAttribute {
  public void multi_valueAttribute()
}

struct __vc_attributes::helper_attributes::notify_atlprovAttribute {
  public void notify_atlprovAttribute()
}

struct __vc_attributes::helper_attributes::process_earlyAttribute {
  public void process_earlyAttribute()
}

struct __vc_attributes::helper_attributes::repeatableAttribute {
  public void repeatableAttribute()
}

struct __vc_attributes::helper_attributes::requires_valueAttribute {
  public void requires_valueAttribute()
}

struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute {
  /* [0x0000:0x00000000] */ static  const int All
  /* [0x0000:0x00000000] */ static  const int Assembly
  /* [0x0000:0x00000000] */ static  const int Class
  /* [0x0000:0x00000000] */ static  const int Constructor
  /* [0x0000:0x00000000] */ static  const int Delegate
  /* [0x0000:0x00000000] */ static  const int Enum
  /* [0x0000:0x00000000] */ static  const int Event
  /* [0x0000:0x00000000] */ static  const int Field
  /* [0x0000:0x00000000] */ static  const int GenericParameter
  /* [0x0000:0x00000000] */ static  const int Interface
  /* [0x0000:0x00000000] */ static  const int Method
  /* [0x0000:0x00000000] */ static  const int Module
  /* [0x0000:0x00000000] */ static  const int Parameter
  /* [0x0000:0x00000000] */ static  const int Property
  /* [0x0000:0x00000000] */ static  const int ReturnValue
  /* [0x0000:0x00000000] */ static  const int Struct
  public void source_annotation_attributeAttribute(int)
  public void source_annotation_attributeAttribute()
  /* this+0x0 */ int ValidOn
  /* this+0x4 */ bool AllowMultiple
}

struct __vc_attributes::helper_attributes::usageAttribute {
    public void usageAttribute(unsigned int)
  /* this+0x0 */ unsigned int value
}

struct __vc_attributes::helper_attributes::v1_alttypeAttribute {
    public void v1_alttypeAttribute(enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e)
  /* this+0x0 */ enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type
}

struct __vc_attributes::helper_attributes::v1_earlyAttribute {
  public void v1_earlyAttribute()
}

struct __vc_attributes::helper_attributes::v1_nameAttribute {
  public void v1_nameAttribute(const char *)
  /* this+0x0 */ const char * name
}

struct __vc_attributes::helpfileAttribute {
  public void helpfileAttribute(const char *)
  /* this+0x0 */ const char * filename
}

struct __vc_attributes::helpstringAttribute {
  public void helpstringAttribute(const char *)
  /* this+0x0 */ const char * help_text_string
}

struct __vc_attributes::helpstringcontextAttribute {
  public void helpstringcontextAttribute(int)
  /* this+0x0 */ int contextid
}

struct __vc_attributes::helpstringdllAttribute {
  public void helpstringdllAttribute(const char *)
  /* this+0x0 */ const char * dllname
}

struct __vc_attributes::hiddenAttribute {
  public void hiddenAttribute()
}

struct __vc_attributes::hookAttribute {
  public void hookAttribute(const char *, const char *, const char *, const char *)
  public void hookAttribute(const char *, const char *, const char *)
  public void hookAttribute(const char *, const char *)
  public void hookAttribute()
  /* this+0x0 */ const char * event
  /* this+0x4 */ const char * source
  /* this+0x8 */ const char * handler
  /* this+0xc */ const char * receiver
}

struct __vc_attributes::idAttribute {
  public void idAttribute(int)
  /* this+0x0 */ int id_num
}

struct __vc_attributes::idl_moduleAttribute {
  public void idl_moduleAttribute(const char *, const char *, const char *, const char *, const char *, int, int, bool, bool)
  public void idl_moduleAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * dllname
  /* this+0x8 */ const char * version
  /* this+0xc */ const char * uuid
  /* this+0x10 */ const char * helpstring
  /* this+0x14 */ int helpstringcontext
  /* this+0x18 */ int helpcontext
  /* this+0x1c */ bool hidden
  /* this+0x1d */ bool restricted
}

struct __vc_attributes::idl_quoteAttribute {
  public void idl_quoteAttribute(const char *)
  public void idl_quoteAttribute()
  /* this+0x0 */ const char * text
}

struct __vc_attributes::iid_isAttribute {
  public void iid_isAttribute(const char *)
  /* this+0x0 */ const char * limited_expression
}

struct __vc_attributes::immediatebindAttribute {
  public void immediatebindAttribute()
}

struct __vc_attributes::implementsAttribute {
  public void implementsAttribute(const char *)
  public void implementsAttribute()
  /* this+0x0 */ const char * interfaces
  /* this+0x4 */ const char * dispinterfaces
}

struct __vc_attributes::importAttribute {
  public void importAttribute(const char *)
  /* this+0x0 */ const char * idl_file
}

struct __vc_attributes::importidlAttribute {
  public void importidlAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::importlibAttribute {
  public void importlibAttribute(const char *)
  /* this+0x0 */ const char * tlb_file
}

struct __vc_attributes::inAttribute {
  public void inAttribute()
}

struct __vc_attributes::includeAttribute {
  public void includeAttribute(const char *)
  /* this+0x0 */ const char * include_file
}

struct __vc_attributes::includelibAttribute {
  public void includelibAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::last_isAttribute {
  public void last_isAttribute(const char *)
  /* this+0x0 */ const char * expression
}

struct __vc_attributes::lcidAttribute {
  public void lcidAttribute()
}

struct __vc_attributes::length_isAttribute {
  public void length_isAttribute(const char *)
  /* this+0x0 */ const char * expression
}

struct __vc_attributes::library_blockAttribute {
  public void library_blockAttribute()
}

struct __vc_attributes::licensedAttribute {
  public void licensedAttribute()
}

struct __vc_attributes::localAttribute {
  public void localAttribute()
}

struct __vc_attributes::max_isAttribute {
  public void max_isAttribute(const char *)
  /* this+0x0 */ const char * expression
}

struct __vc_attributes::moduleAttribute {
    public void moduleAttribute(enum __vc_attributes::moduleAttribute::type_e, const char *, const char *, const char *, int, bool, const char *, int, const char *, const char *, int, bool, bool, const char *, const char *)
  public void moduleAttribute(enum __vc_attributes::moduleAttribute::type_e)
  public void moduleAttribute()
  /* this+0x0 */ enum __vc_attributes::moduleAttribute::type_e type
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * version
  /* this+0xc */ const char * uuid
  /* this+0x10 */ int lcid
  /* this+0x14 */ bool control
  /* this+0x18 */ const char * helpstring
  /* this+0x1c */ int helpstringcontext
  /* this+0x20 */ const char * helpstringdll
  /* this+0x24 */ const char * helpfile
  /* this+0x28 */ int helpcontext
  /* this+0x2c */ bool hidden
  /* this+0x2d */ bool restricted
  /* this+0x30 */ const char * custom
  /* this+0x34 */ const char * resource_name
}

struct __vc_attributes::ms_unionAttribute {
  public void ms_unionAttribute()
}

struct __vc_attributes::no_injected_textAttribute {
  public void no_injected_textAttribute(bool)
  public void no_injected_textAttribute()
  /* this+0x0 */ bool value
}

struct __vc_attributes::nonbrowsableAttribute {
  public void nonbrowsableAttribute()
}

struct __vc_attributes::noncreatableAttribute {
  public void noncreatableAttribute()
}

struct __vc_attributes::nonextensibleAttribute {
  public void nonextensibleAttribute()
}

struct __vc_attributes::objectAttribute {
  public void objectAttribute()
}

struct __vc_attributes::odlAttribute {
  public void odlAttribute()
}

struct __vc_attributes::oleautomationAttribute {
  public void oleautomationAttribute()
}

struct __vc_attributes::optionalAttribute {
  public void optionalAttribute()
}

struct __vc_attributes::outAttribute {
  public void outAttribute()
}

struct __vc_attributes::pointer_defaultAttribute {
    public void pointer_defaultAttribute(enum __vc_attributes::pointer_defaultAttribute::type_e)
  /* this+0x0 */ enum __vc_attributes::pointer_defaultAttribute::type_e type
}

struct __vc_attributes::pragmaAttribute {
  public void pragmaAttribute(const char *)
  /* this+0x0 */ const char * token_sequence
}

struct __vc_attributes::progidAttribute {
  public void progidAttribute(const char *)
  /* this+0x0 */ const char * name
}

struct __vc_attributes::propgetAttribute {
  public void propgetAttribute()
}

struct __vc_attributes::propputAttribute {
  public void propputAttribute()
}

struct __vc_attributes::propputrefAttribute {
  public void propputrefAttribute()
}

struct __vc_attributes::providerAttribute {
  public void providerAttribute(const char *, const char *, int)
  public void providerAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * uuid
  /* this+0x8 */ int cookies
}

struct __vc_attributes::ptrAttribute {
  public void ptrAttribute()
}

struct __vc_attributes::publicAttribute {
  public void publicAttribute()
}

struct __vc_attributes::rangeAttribute {
  public void rangeAttribute(int, int)
  /* this+0x0 */ int low_val
  /* this+0x4 */ int high_val
}

struct __vc_attributes::readonlyAttribute {
  public void readonlyAttribute()
}

struct __vc_attributes::refAttribute {
  public void refAttribute()
}

struct __vc_attributes::requesteditAttribute {
  public void requesteditAttribute()
}

struct __vc_attributes::restrictedAttribute {
  public void restrictedAttribute(const char *)
  public void restrictedAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::retvalAttribute {
  public void retvalAttribute()
}

struct __vc_attributes::satypeAttribute {
  public void satypeAttribute(const char *)
  public void satypeAttribute()
  /* this+0x0 */ const char * type
}

struct __vc_attributes::size_isAttribute {
  public void size_isAttribute(const char *)
  /* this+0x0 */ const char * expression
}

struct __vc_attributes::sourceAttribute {
  public void sourceAttribute(const char *)
  public void sourceAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::stringAttribute {
  public void stringAttribute()
}

struct __vc_attributes::switch_isAttribute {
  public void switch_isAttribute(const char *)
  /* this+0x0 */ const char * limited_expression
}

struct __vc_attributes::switch_typeAttribute {
  public void switch_typeAttribute(const char *)
  /* this+0x0 */ const char * switch_type_specifier
}

struct __vc_attributes::threadingAttribute {
    public void threadingAttribute(enum __vc_attributes::threadingAttribute::threading_e)
  public void threadingAttribute()
  /* this+0x0 */ enum __vc_attributes::threadingAttribute::threading_e value
}

struct __vc_attributes::transmit_asAttribute {
  public void transmit_asAttribute(const char *)
  /* this+0x0 */ const char * xmit_type
}

struct __vc_attributes::uidefaultAttribute {
  public void uidefaultAttribute()
}

struct __vc_attributes::unhookAttribute {
  public void unhookAttribute(const char *, const char *, const char *, const char *)
  public void unhookAttribute(const char *, const char *, const char *)
  public void unhookAttribute(const char *, const char *)
  public void unhookAttribute()
  /* this+0x0 */ const char * event
  /* this+0x4 */ const char * source
  /* this+0x8 */ const char * handler
  /* this+0xc */ const char * receiver
}

struct __vc_attributes::uniqueAttribute {
  public void uniqueAttribute()
}

struct __vc_attributes::usesgetlasterrorAttribute {
  public void usesgetlasterrorAttribute()
}

struct __vc_attributes::uuidAttribute {
  public void uuidAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::v1_enumAttribute {
  public void v1_enumAttribute()
}

struct __vc_attributes::varargAttribute {
  public void varargAttribute()
}

struct __vc_attributes::versionAttribute {
  public void versionAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::vi_progidAttribute {
  public void vi_progidAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::wire_marshalAttribute {
  public void wire_marshalAttribute(const char *)
  /* this+0x0 */ const char * wire_type
}

struct _complex {
  /* this+0x0 */ double x
  /* this+0x8 */ double y
}

struct _cpinfo {
  /* this+0x0 */ unsigned int MaxCharSize
  /* this+0x4 */ unsigned char[0x2] DefaultChar
  /* this+0x6 */ unsigned char[0xc] LeadByte
}

struct _cpinfoexA {
  /* this+0x0 */ unsigned int MaxCharSize
  /* this+0x4 */ unsigned char[0x2] DefaultChar
  /* this+0x6 */ unsigned char[0xc] LeadByte
  /* this+0x12 */ wchar_t UnicodeDefaultChar
  /* this+0x14 */ unsigned int CodePage
  /* this+0x18 */ char[0x104] CodePageName
}

struct _cpinfoexW {
  /* this+0x0 */ unsigned int MaxCharSize
  /* this+0x4 */ unsigned char[0x2] DefaultChar
  /* this+0x6 */ unsigned char[0xc] LeadByte
  /* this+0x12 */ wchar_t UnicodeDefaultChar
  /* this+0x14 */ unsigned int CodePage
  /* this+0x18 */ wchar_t[0x104] CodePageName
}

struct _currencyfmtA {
  /* this+0x0 */ unsigned int NumDigits
  /* this+0x4 */ unsigned int LeadingZero
  /* this+0x8 */ unsigned int Grouping
  /* this+0xc */ char * lpDecimalSep
  /* this+0x10 */ char * lpThousandSep
  /* this+0x14 */ unsigned int NegativeOrder
  /* this+0x18 */ unsigned int PositiveOrder
  /* this+0x1c */ char * lpCurrencySymbol
}

struct _currencyfmtW {
  /* this+0x0 */ unsigned int NumDigits
  /* this+0x4 */ unsigned int LeadingZero
  /* this+0x8 */ unsigned int Grouping
  /* this+0xc */ wchar_t * lpDecimalSep
  /* this+0x10 */ wchar_t * lpThousandSep
  /* this+0x14 */ unsigned int NegativeOrder
  /* this+0x18 */ unsigned int PositiveOrder
  /* this+0x1c */ wchar_t * lpCurrencySymbol
}

union _dbl {
  /* this+0x0 */ long[0x2] lng
  /* this+0x0 */ double dbl
}

struct _devicemodeA {
  /* this+0x0 */ unsigned char[0x20] dmDeviceName
  /* this+0x20 */ unsigned short dmSpecVersion
  /* this+0x22 */ unsigned short dmDriverVersion
  /* this+0x24 */ unsigned short dmSize
  /* this+0x26 */ unsigned short dmDriverExtra
  /* this+0x28 */ unsigned long dmFields
  /* this+0x2c */ short dmOrientation
  /* this+0x2e */ short dmPaperSize
  /* this+0x30 */ short dmPaperLength
  /* this+0x32 */ short dmPaperWidth
  /* this+0x34 */ short dmScale
  /* this+0x36 */ short dmCopies
  /* this+0x38 */ short dmDefaultSource
  /* this+0x3a */ short dmPrintQuality
  /* this+0x2c */ struct _POINTL dmPosition

  /* this+0x34 */ unsigned long dmDisplayOrientation
  /* this+0x38 */ unsigned long dmDisplayFixedOutput
  /* this+0x3c */ short dmColor
  /* this+0x3e */ short dmDuplex
  /* this+0x40 */ short dmYResolution
  /* this+0x42 */ short dmTTOption
  /* this+0x44 */ short dmCollate
  /* this+0x46 */ unsigned char[0x20] dmFormName
  /* this+0x66 */ unsigned short dmLogPixels
  /* this+0x68 */ unsigned long dmBitsPerPel
  /* this+0x6c */ unsigned long dmPelsWidth
  /* this+0x70 */ unsigned long dmPelsHeight
  /* this+0x74 */ unsigned long dmDisplayFlags
  /* this+0x74 */ unsigned long dmNup
  /* this+0x78 */ unsigned long dmDisplayFrequency
  /* this+0x7c */ unsigned long dmICMMethod
  /* this+0x80 */ unsigned long dmICMIntent
  /* this+0x84 */ unsigned long dmMediaType
  /* this+0x88 */ unsigned long dmDitherType
  /* this+0x8c */ unsigned long dmReserved1
  /* this+0x90 */ unsigned long dmReserved2
  /* this+0x94 */ unsigned long dmPanningWidth
  /* this+0x98 */ unsigned long dmPanningHeight
}

struct _devicemodeW {
  /* this+0x0 */ wchar_t[0x20] dmDeviceName
  /* this+0x40 */ unsigned short dmSpecVersion
  /* this+0x42 */ unsigned short dmDriverVersion
  /* this+0x44 */ unsigned short dmSize
  /* this+0x46 */ unsigned short dmDriverExtra
  /* this+0x48 */ unsigned long dmFields
  /* this+0x4c */ short dmOrientation
  /* this+0x4e */ short dmPaperSize
  /* this+0x50 */ short dmPaperLength
  /* this+0x52 */ short dmPaperWidth
  /* this+0x54 */ short dmScale
  /* this+0x56 */ short dmCopies
  /* this+0x58 */ short dmDefaultSource
  /* this+0x5a */ short dmPrintQuality
  /* this+0x4c */ struct _POINTL dmPosition

  /* this+0x54 */ unsigned long dmDisplayOrientation
  /* this+0x58 */ unsigned long dmDisplayFixedOutput
  /* this+0x5c */ short dmColor
  /* this+0x5e */ short dmDuplex
  /* this+0x60 */ short dmYResolution
  /* this+0x62 */ short dmTTOption
  /* this+0x64 */ short dmCollate
  /* this+0x66 */ wchar_t[0x20] dmFormName
  /* this+0xa6 */ unsigned short dmLogPixels
  /* this+0xa8 */ unsigned long dmBitsPerPel
  /* this+0xac */ unsigned long dmPelsWidth
  /* this+0xb0 */ unsigned long dmPelsHeight
  /* this+0xb4 */ unsigned long dmDisplayFlags
  /* this+0xb4 */ unsigned long dmNup
  /* this+0xb8 */ unsigned long dmDisplayFrequency
  /* this+0xbc */ unsigned long dmICMMethod
  /* this+0xc0 */ unsigned long dmICMIntent
  /* this+0xc4 */ unsigned long dmMediaType
  /* this+0xc8 */ unsigned long dmDitherType
  /* this+0xcc */ unsigned long dmReserved1
  /* this+0xd0 */ unsigned long dmReserved2
  /* this+0xd4 */ unsigned long dmPanningWidth
  /* this+0xd8 */ unsigned long dmPanningHeight
}

struct _div_t {
  /* this+0x0 */ int quot
  /* this+0x4 */ int rem
}

struct _exception {
  /* this+0x0 */ int type
  /* this+0x4 */ char * name
  /* this+0x8 */ double arg1
  /* this+0x10 */ double arg2
  /* this+0x18 */ double retval
}

struct _flowspec {
  /* this+0x0 */ unsigned long TokenRate
  /* this+0x4 */ unsigned long TokenBucketSize
  /* this+0x8 */ unsigned long PeakBandwidth
  /* this+0xc */ unsigned long Latency
  /* this+0x10 */ unsigned long DelayVariation
  /* this+0x14 */ unsigned long ServiceType
  /* this+0x18 */ unsigned long MaxSduSize
  /* this+0x1c */ unsigned long MinimumPolicedSize
}

struct _flt {
  /* this+0x0 */ int flags
  /* this+0x4 */ int nbytes
  /* this+0x8 */ long lval
  /* this+0x10 */ double dval
}

struct _heapinfo {
  /* this+0x0 */ int * _pentry
  /* this+0x4 */ unsigned int _size
  /* this+0x8 */ int _useflag
}

struct _iobuf {
  /* this+0x0 */ char * _ptr
  /* this+0x4 */ int _cnt
  /* this+0x8 */ char * _base
  /* this+0xc */ int _flag
  /* this+0x10 */ int _file
  /* this+0x14 */ int _charbuf
  /* this+0x18 */ int _bufsiz
  /* this+0x1c */ char * _tmpfname
}

struct _is_ctype_compatible {
  /* this+0x0 */ unsigned long id
  /* this+0x4 */ int is_clike
}

struct _ldiv_t {
  /* this+0x0 */ long quot
  /* this+0x4 */ long rem
}

struct _lldiv_t {
  /* this+0x0 */ __int64 quot
  /* this+0x8 */ __int64 rem
}

struct _nlsversioninfo {
  /* this+0x0 */ unsigned long dwNLSVersionInfoSize
  /* this+0x4 */ unsigned long dwNLSVersion
  /* this+0x8 */ unsigned long dwDefinedVersion
}

struct _nlsversioninfoex {
  /* this+0x0 */ unsigned long dwNLSVersionInfoSize
  /* this+0x4 */ unsigned long dwNLSVersion
  /* this+0x8 */ unsigned long dwDefinedVersion
  /* this+0xc */ unsigned long dwEffectiveId
  /* this+0x10 */ struct _GUID guidCustomVersion

}

struct _numberfmtA {
  /* this+0x0 */ unsigned int NumDigits
  /* this+0x4 */ unsigned int LeadingZero
  /* this+0x8 */ unsigned int Grouping
  /* this+0xc */ char * lpDecimalSep
  /* this+0x10 */ char * lpThousandSep
  /* this+0x14 */ unsigned int NegativeOrder
}

struct _numberfmtW {
  /* this+0x0 */ unsigned int NumDigits
  /* this+0x4 */ unsigned int LeadingZero
  /* this+0x8 */ unsigned int Grouping
  /* this+0xc */ wchar_t * lpDecimalSep
  /* this+0x10 */ wchar_t * lpThousandSep
  /* this+0x14 */ unsigned int NegativeOrder
}

union _output_l::__l2::<unnamed-type-buffer> {
  /* this+0x0 */ char[0x200] sz
}

union _output_l::__l2::<unnamed-type-text> {
  /* this+0x0 */ char * sz
  /* this+0x0 */ wchar_t * wz
}

struct _output_l::__l77::_count_string {
}

union _output_s_l::__l2::<unnamed-type-buffer> {
  /* this+0x0 */ char[0x200] sz
}

union _output_s_l::__l2::<unnamed-type-text> {
  /* this+0x0 */ char * sz
  /* this+0x0 */ wchar_t * wz
}

struct _output_s_l::__l83::_count_string {
}

struct _s_CatchableType {
  /* this+0x0 */ unsigned int properties
  /* this+0x4 */ struct TypeDescriptor * pType
  /* this+0x8 */ struct PMD thisDisplacement

  /* this+0x14 */ int sizeOrOffset
  /* this+0x18 */ function  * copyFunction
}

struct _s_CatchableTypeArray {
  /* this+0x0 */ int nCatchableTypes
  /* this+0x4 */ const struct _s_CatchableType *[0x0] arrayOfCatchableTypes
}

struct _s_ESTypeList {
  /* this+0x0 */ int nCount
  /* this+0x4 */ const struct _s_HandlerType * pTypeArray
}

struct _s_FuncInfo {
  /* this(bf)+0x0:0x0 len(0x1d) */ unsigned int magicNumber
  /* this(bf)+0x0:0x1d len(0x3) */ unsigned int bbtFlags
  /* this+0x4 */ int maxState
  /* this+0x8 */ const struct _s_UnwindMapEntry * pUnwindMap
  /* this+0xc */ unsigned int nTryBlocks
  /* this+0x10 */ const struct _s_TryBlockMapEntry * pTryBlockMap
  /* this+0x14 */ unsigned int nIPMapEntries
  /* this+0x18 */ void * pIPtoStateMap
  /* this+0x1c */ const struct _s_ESTypeList * pESTypeList
  /* this+0x20 */ int EHFlags
}

struct _s_HandlerType {
  /* this+0x0 */ unsigned int adjectives
  /* this+0x4 */ struct TypeDescriptor * pType
  /* this+0x8 */ int dispCatchObj
  /* this+0xc */ void * addressOfHandler
}

struct _s_RTTIBaseClassArray {
  /* this+0x0 */ const struct _s_RTTIBaseClassDescriptor *[0x0] arrayOfBaseClassDescriptors
}

struct _s_RTTIBaseClassDescriptor {
  /* this+0x0 */ struct TypeDescriptor * pTypeDescriptor
  /* this+0x4 */ unsigned long numContainedBases
  /* this+0x8 */ struct PMD where

  /* this+0x14 */ unsigned long attributes
  /* this+0x18 */ const struct _s_RTTIClassHierarchyDescriptor * pClassDescriptor
}

struct _s_RTTIClassHierarchyDescriptor {
  /* this+0x0 */ unsigned long signature
  /* this+0x4 */ unsigned long attributes
  /* this+0x8 */ unsigned long numBaseClasses
  /* this+0xc */ const struct _s_RTTIBaseClassArray * pBaseClassArray
}

struct _s_RTTICompleteObjectLocator {
  /* this+0x0 */ unsigned long signature
  /* this+0x4 */ unsigned long offset
  /* this+0x8 */ unsigned long cdOffset
  /* this+0xc */ struct TypeDescriptor * pTypeDescriptor
  /* this+0x10 */ const struct _s_RTTIClassHierarchyDescriptor * pClassDescriptor
}

struct _s_ThrowInfo {
  /* this+0x0 */ unsigned int attributes
  /* this+0x4 */ function  * pmfnUnwind
  /* this+0x8 */ function  * pForwardCompat
  /* this+0xc */ const struct _s_CatchableTypeArray * pCatchableTypeArray
}

struct _s_TryBlockMapEntry {
  /* this+0x0 */ int tryLow
  /* this+0x4 */ int tryHigh
  /* this+0x8 */ int catchHigh
  /* this+0xc */ int nCatches
  /* this+0x10 */ const struct _s_HandlerType * pHandlerArray
}

struct _s_UnwindMapEntry {
  /* this+0x0 */ int toState
  /* this+0x4 */ function  * action
}

struct _s__CatchableType {
  /* this+0x0 */ unsigned int properties
  /* this+0x4 */ struct _TypeDescriptor * pType
  /* this+0x8 */ struct _PMD thisDisplacement

  /* this+0x14 */ int sizeOrOffset
  /* this+0x18 */ function  * copyFunction
}

struct _s__CatchableTypeArray {
  /* this+0x0 */ int nCatchableTypes
  /* this+0x4 */ const struct _s__CatchableType *[0x0] arrayOfCatchableTypes
}

struct _s__RTTIBaseClassArray {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x0] arrayOfBaseClassDescriptors
}

struct _s__RTTIBaseClassDescriptor2 {
  /* this+0x0 */ struct _TypeDescriptor * pTypeDescriptor
  /* this+0x4 */ unsigned long numContainedBases
  /* this+0x8 */ struct _PMD where

  /* this+0x14 */ unsigned long attributes
  /* this+0x18 */ const struct _s__RTTIClassHierarchyDescriptor * pClassDescriptor
}

struct _s__RTTIClassHierarchyDescriptor {
  /* this+0x0 */ unsigned long signature
  /* this+0x4 */ unsigned long attributes
  /* this+0x8 */ unsigned long numBaseClasses
  /* this+0xc */ const struct _s__RTTIBaseClassArray * pBaseClassArray
}

struct _s__RTTICompleteObjectLocator {
  /* this+0x0 */ unsigned long signature
  /* this+0x4 */ unsigned long offset
  /* this+0x8 */ unsigned long cdOffset
  /* this+0xc */ struct _TypeDescriptor * pTypeDescriptor
  /* this+0x10 */ const struct _s__RTTIClassHierarchyDescriptor * pClassDescriptor
}

struct _s__ThrowInfo {
  /* this+0x0 */ unsigned int attributes
  /* this+0x4 */ function  * pmfnUnwind
  /* this+0x8 */ function  * pForwardCompat
  /* this+0xc */ const struct _s__CatchableTypeArray * pCatchableTypeArray
}

struct _stat32 {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x14 */ long st_size
  /* this+0x18 */ long st_atime
  /* this+0x1c */ long st_mtime
  /* this+0x20 */ long st_ctime
}

struct _stat32i64 {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x18 */ __int64 st_size
  /* this+0x20 */ long st_atime
  /* this+0x24 */ long st_mtime
  /* this+0x28 */ long st_ctime
}

struct _stat64 {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x18 */ __int64 st_size
  /* this+0x20 */ __int64 st_atime
  /* this+0x28 */ __int64 st_mtime
  /* this+0x30 */ __int64 st_ctime
}

struct _stat64i32 {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x14 */ long st_size
  /* this+0x18 */ __int64 st_atime
  /* this+0x20 */ __int64 st_mtime
  /* this+0x28 */ __int64 st_ctime
}

struct _strflt {
  /* this+0x0 */ int sign
  /* this+0x4 */ int decpt
  /* this+0x8 */ int flag
  /* this+0xc */ char * mantissa
}

struct _tagADDRESS {
  /* this+0x0 */ unsigned long Offset
  /* this+0x4 */ unsigned short Segment
  /* this+0x8 */ enum ADDRESS_MODE Mode
}

struct _tagADDRESS64 {
  /* this+0x0 */ unsigned __int64 Offset
  /* this+0x8 */ unsigned short Segment
  /* this+0xc */ enum ADDRESS_MODE Mode
}

struct _tagSTACKFRAME {
  /* this+0x0 */ struct _tagADDRESS AddrPC

  /* this+0xc */ struct _tagADDRESS AddrReturn

  /* this+0x18 */ struct _tagADDRESS AddrFrame

  /* this+0x24 */ struct _tagADDRESS AddrStack

  /* this+0x30 */ void * FuncTableEntry
  /* this+0x34 */ unsigned long[0x4] Params
  /* this+0x44 */ int Far
  /* this+0x48 */ int Virtual
  /* this+0x4c */ unsigned long[0x3] Reserved
  /* this+0x58 */ struct _KDHELP KdHelp

  /* this+0x98 */ struct _tagADDRESS AddrBStore

}

struct _tiddata {
  /* this+0x0 */ unsigned long _tid
  /* this+0x4 */ unsigned int _thandle
  /* this+0x8 */ int _terrno
  /* this+0xc */ unsigned long _tdoserrno
  /* this+0x10 */ unsigned int _fpds
  /* this+0x14 */ unsigned long _holdrand
  /* this+0x18 */ char * _token
  /* this+0x1c */ wchar_t * _wtoken
  /* this+0x20 */ unsigned char * _mtoken
  /* this+0x24 */ char * _errmsg
  /* this+0x28 */ wchar_t * _werrmsg
  /* this+0x2c */ char * _namebuf0
  /* this+0x30 */ wchar_t * _wnamebuf0
  /* this+0x34 */ char * _namebuf1
  /* this+0x38 */ wchar_t * _wnamebuf1
  /* this+0x3c */ char * _asctimebuf
  /* this+0x40 */ wchar_t * _wasctimebuf
  /* this+0x44 */ void * _gmtimebuf
  /* this+0x48 */ char * _cvtbuf
  /* this+0x4c */ unsigned char[0x5] _con_ch_buf
  /* this+0x52 */ unsigned short _ch_buf_used
  /* this+0x54 */ void * _initaddr
  /* this+0x58 */ void * _initarg
  /* this+0x5c */ void * _pxcptacttab
  /* this+0x60 */ void * _tpxcptinfoptrs
  /* this+0x64 */ int _tfpecode
  /* this+0x68 */ struct threadmbcinfostruct * ptmbcinfo
  /* this+0x6c */ struct threadlocaleinfostruct * ptlocinfo
  /* this+0x70 */ int _ownlocale
  /* this+0x74 */ unsigned long _NLG_dwCode
  /* this+0x78 */ void * _terminate
  /* this+0x7c */ void * _unexpected
  /* this+0x80 */ void * _translator
  /* this+0x84 */ void * _purecall
  /* this+0x88 */ void * _curexception
  /* this+0x8c */ void * _curcontext
  /* this+0x90 */ int _ProcessingThrow
  /* this+0x94 */ void * _curexcspec
  /* this+0x98 */ void * _pFrameInfoChain
  /* this+0x9c */ struct setloc_struct _setloc_data

  /* this+0x1f8 */ void * _reserved1
  /* this+0x1fc */ void * _reserved2
  /* this+0x200 */ void * _reserved3
  /* this+0x204 */ void * _reserved4
  /* this+0x208 */ void * _reserved5
  /* this+0x20c */ int _cxxReThrow
  /* this+0x210 */ unsigned long __initDomain
}

struct _wfinddata32_t {
  /* this+0x0 */ unsigned int attrib
  /* this+0x4 */ long time_create
  /* this+0x8 */ long time_access
  /* this+0xc */ long time_write
  /* this+0x10 */ unsigned long size
  /* this+0x14 */ wchar_t[0x104] name
}

struct _wfinddata32i64_t {
  /* this+0x0 */ unsigned int attrib
  /* this+0x4 */ long time_create
  /* this+0x8 */ long time_access
  /* this+0xc */ long time_write
  /* this+0x10 */ __int64 size
  /* this+0x18 */ wchar_t[0x104] name
}

struct _wfinddata64_t {
  /* this+0x0 */ unsigned int attrib
  /* this+0x8 */ __int64 time_create
  /* this+0x10 */ __int64 time_access
  /* this+0x18 */ __int64 time_write
  /* this+0x20 */ __int64 size
  /* this+0x28 */ wchar_t[0x104] name
}

struct _wfinddata64i32_t {
  /* this+0x0 */ unsigned int attrib
  /* this+0x8 */ __int64 time_create
  /* this+0x10 */ __int64 time_access
  /* this+0x18 */ __int64 time_write
  /* this+0x20 */ unsigned long size
  /* this+0x24 */ wchar_t[0x104] name
}

struct `anonymous-namespace'::AB_CANTOoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void AB_CANTOoperation(const struct `anonymous-namespace'::AB_CANTOoperation &)
  public void AB_CANTOoperation(const class CPC *, const int, const int, const int)
  /* this+0x4 */ const class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SKLevel
  /* this+0xc */ const int m_LifeTM
  /* this+0x10 */ const int m_IncrementAGIvalue
}

struct `anonymous-namespace'::AB_CHEALoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void operation(class CPC *, const int)
  public void AB_CHEALoperation(const struct `anonymous-namespace'::AB_CHEALoperation &)
  public void AB_CHEALoperation()
  /* this+0x4 */ class std::vector<CPC *,std::allocator<CPC *> > m_TargetPCList

  public void ~AB_CHEALoperation()
  public struct `anonymous-namespace'::AB_CHEALoperation & operator=(const struct `anonymous-namespace'::AB_CHEALoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::AB_CLEMENTIAoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void AB_CLEMENTIAoperation(const struct `anonymous-namespace'::AB_CLEMENTIAoperation &)
  public void AB_CLEMENTIAoperation(const class CPC *, const int, const int, const int)
  /* this+0x4 */ const class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_skLevel
  /* this+0xc */ const int m_LifeTM
  /* this+0x10 */ const int m_IncreaseSTRINTDEXvalue
}

struct `anonymous-namespace'::AB_LAUDAAGNUSoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void AB_LAUDAAGNUSoperation(const struct `anonymous-namespace'::AB_LAUDAAGNUSoperation &)
  public void AB_LAUDAAGNUSoperation(const class CPC *, const int, const int, const int, const int)
  /* this+0x4 */ const class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SKLevel
  /* this+0xc */ const int m_DeBuffApplyPercent
  /* this+0x10 */ const int m_VITplusTime
  /* this+0x14 */ const int m_VITplusAmount
}

struct `anonymous-namespace'::AB_LAUDARAMUSoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void AB_LAUDARAMUSoperation(const struct `anonymous-namespace'::AB_LAUDARAMUSoperation &)
  public void AB_LAUDARAMUSoperation(const class CPC *, const int, const int, const int, const int)
  /* this+0x4 */ const class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SKLevel
  /* this+0xc */ const int m_DeBuffApplyPercent
  /* this+0x10 */ const int m_LUKplusTime
  /* this+0x14 */ const int m_LUKplusAmount
}

struct `anonymous-namespace'::AB_PRAEFATIOoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void operation(const class CPC *, const int, const int, const int, const int)
  public void AB_PRAEFATIOoperation(const struct `anonymous-namespace'::AB_PRAEFATIOoperation &)
  public void AB_PRAEFATIOoperation()
  /* this+0x4 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActorList

  public void ~AB_PRAEFATIOoperation()
  public struct `anonymous-namespace'::AB_PRAEFATIOoperation & operator=(const struct `anonymous-namespace'::AB_PRAEFATIOoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::ApplyVaues {
  public void ApplyVaues(const int, const int, const int)
  /* this+0x0 */ int m_Ratio
  /* this+0x4 */ int m_Values1
  /* this+0x8 */ int m_Values2
}

class `anonymous-namespace'::CAnytingApply {
  SKcastingTMvarStuff::CApply, offset = 0x0

  public bool operator()(const int)
  public void CAnytingApply(const class `anonymous-namespace'::CAnytingApply &)
  public void CAnytingApply()
  public void ~CAnytingApply()
  public class `anonymous-namespace'::CAnytingApply & operator=(const class `anonymous-namespace'::CAnytingApply &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CAutoLuaClose {
  public void CAutoLuaClose(struct lua_State *)
  public void ~CAutoLuaClose()
  /* this+0x0 */ struct lua_State * m_L
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CBoxIDGernator {
  public void CBoxIDGernator()
  public void ~CBoxIDGernator()
  public unsigned int operator()()
  /* this+0x0 */ unsigned int m_BoxID
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::CIRCLE_OF_FIRE_OPTIONoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void final(const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpOwnerPlayer
  /* this+0x8 */ class CNpcElemental * m_cpNpcElemental
  /* this+0xc */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void CIRCLE_OF_FIRE_OPTIONoperation(const struct `anonymous-namespace'::CIRCLE_OF_FIRE_OPTIONoperation &)
  public void CIRCLE_OF_FIRE_OPTIONoperation(class CPC *, class CNpcElemental *)
  public void ~CIRCLE_OF_FIRE_OPTIONoperation()
  public struct `anonymous-namespace'::CIRCLE_OF_FIRE_OPTIONoperation & operator=(const struct `anonymous-namespace'::CIRCLE_OF_FIRE_OPTIONoperation &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CIdentityGenerator {
  public unsigned long operator()()
  /* this+0x0 */ unsigned long m_IdentityCnt
  public void CIdentityGenerator()
  public void ~CIdentityGenerator()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CMyFile {
  public void CMyFile(void *)
  public void ~CMyFile()
  public void * operator void *()
  public int Write(const char *, <NoType>)
  /* this+0x0 */ void * m_hFile
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CNAsyncDBWorkIdentityGenerator {
  public int operator()()
  /* this+0x0 */ int m_IdentityCnt
    public void CNAsyncDBWorkIdentityGenerator()
  public void ~CNAsyncDBWorkIdentityGenerator()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CRK_DEATHBOUNDApply {
  SKcastingTMvarStuff::CApply, offset = 0x0

  public bool operator()(const int)
  public void CRK_DEATHBOUNDApply(const class `anonymous-namespace'::CRK_DEATHBOUNDApply &)
  public void CRK_DEATHBOUNDApply()
  public void ~CRK_DEATHBOUNDApply()
  public class `anonymous-namespace'::CRK_DEATHBOUNDApply & operator=(const class `anonymous-namespace'::CRK_DEATHBOUNDApply &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CSimpleCashSopSEOpenIDGenerator {
  public unsigned long operator()()
  /* this+0x0 */ unsigned long m_Identity
  public void CSimpleCashSopSEOpenIDGenerator()
  public void ~CSimpleCashSopSEOpenIDGenerator()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CSpecializeApply {
  SKcastingTMvarStuff::CApply, offset = 0x0

  public bool operator()(const int)
  private void CSpecializeApply(const class `anonymous-namespace'::CSpecializeApply &)
  public void CSpecializeApply(class std::vector<int,std::allocator<int> > &)
  public void ~CSpecializeApply()
  private class `anonymous-namespace'::CSpecializeApply & operator=(const class `anonymous-namespace'::CSpecializeApply &)
  /* this+0x4 */ class std::vector<int,std::allocator<int> > m_SKIDs

  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_AB_RENOVATIO {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_AB_RENOVATIO(const class `anonymous-namespace'::CTask_AB_RENOVATIO &)
  public void CTask_AB_RENOVATIO(const unsigned long, const int, const int)
  public void ~CTask_AB_RENOVATIO()
  /* this+0xc */ const unsigned long m_SpellPlayerAID
  /* this+0x10 */ const int m_HPRecoveryPercent
  /* this+0x14 */ const int m_DamageAtUNDEAD
    public class `anonymous-namespace'::CTask_AB_RENOVATIO & operator=(class `anonymous-namespace'::CTask_AB_RENOVATIO &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_ANGRIFFS_MODUS {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_ANGRIFFS_MODUS(const class `anonymous-namespace'::CTask_ANGRIFFS_MODUS &)
  public void CTask_ANGRIFFS_MODUS()
  public void ~CTask_ANGRIFFS_MODUS()
  public class `anonymous-namespace'::CTask_ANGRIFFS_MODUS & operator=(class `anonymous-namespace'::CTask_ANGRIFFS_MODUS &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_BANDING_PLUS_ATK_DEF {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_BANDING_PLUS_ATK_DEF(const class `anonymous-namespace'::CTask_BANDING_PLUS_ATK_DEF &)
  public void CTask_BANDING_PLUS_ATK_DEF(const int, const int, const int)
  public void ~CTask_BANDING_PLUS_ATK_DEF()
  /* this+0xc */ int m_LoopTime
  /* this+0x10 */ int m_PlusATK
  /* this+0x14 */ int m_PlusDEF
  public class `anonymous-namespace'::CTask_BANDING_PLUS_ATK_DEF & operator=(class `anonymous-namespace'::CTask_BANDING_PLUS_ATK_DEF &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_BANDING_REDUCESP {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_BANDING_REDUCESP(const class `anonymous-namespace'::CTask_BANDING_REDUCESP &)
  public void CTask_BANDING_REDUCESP(const int, const int)
  public void ~CTask_BANDING_REDUCESP()
  /* this+0xc */ int m_LoopTime
  /* this+0x10 */ int m_SPAmount
  public class `anonymous-namespace'::CTask_BANDING_REDUCESP & operator=(class `anonymous-namespace'::CTask_BANDING_REDUCESP &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_BODYSTATE_BURNNING {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_BODYSTATE_BURNNING(const class `anonymous-namespace'::CTask_BODYSTATE_BURNNING &)
  public void CTask_BODYSTATE_BURNNING()
  public void ~CTask_BODYSTATE_BURNNING()
    public class `anonymous-namespace'::CTask_BODYSTATE_BURNNING & operator=(class `anonymous-namespace'::CTask_BODYSTATE_BURNNING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_CBC_HP {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_CBC_HP(const class `anonymous-namespace'::CTask_CBC_HP &)
  public void CTask_CBC_HP(const int, const int)
  public void ~CTask_CBC_HP()
  /* this+0xc */ const int m_HPdamage
  /* this+0x10 */ const int m_LoopTime
  public class `anonymous-namespace'::CTask_CBC_HP & operator=(class `anonymous-namespace'::CTask_CBC_HP &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_CBC_SP {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_CBC_SP(const class `anonymous-namespace'::CTask_CBC_SP &)
  public void CTask_CBC_SP(const int)
  public void ~CTask_CBC_SP()
  /* this+0xc */ const int m_SPdamage
  public class `anonymous-namespace'::CTask_CBC_SP & operator=(class `anonymous-namespace'::CTask_CBC_SP &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_COLD {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_COLD(const class `anonymous-namespace'::CTask_COLD &)
  public void CTask_COLD(const int)
  public void ~CTask_COLD()
  /* this+0xc */ int m_LoopTime
  public class `anonymous-namespace'::CTask_COLD & operator=(class `anonymous-namespace'::CTask_COLD &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_CheckMobRespawn {
  MapResScheduler::CTask, offset = 0x0

  public bool operator()(class CMapRes *)
  public void CTask_CheckMobRespawn(const class `anonymous-namespace'::CTask_CheckMobRespawn &)
  public void CTask_CheckMobRespawn(const unsigned int, const unsigned int)
  public void ~CTask_CheckMobRespawn()
  private bool RemoveTomb(class CMapRes *)
  /* this+0xc */ const unsigned int m_MOB_AID
  /* this+0x10 */ const unsigned int m_NPC_AID
  /* this+0x14 */ const unsigned long m_OldTime
  /* this+0x18 */ class CNPC * m_cpMob
  /* this+0x1c */ int m_bRegen
    public class `anonymous-namespace'::CTask_CheckMobRespawn & operator=(class `anonymous-namespace'::CTask_CheckMobRespawn &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_CreateMobTomb {
  MapResScheduler::CTask, offset = 0x0

  public bool operator()(class CMapRes *)
  public void CTask_CreateMobTomb(const class `anonymous-namespace'::CTask_CreateMobTomb &)
  public void CTask_CreateMobTomb(const short, const short, const short, const short, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const unsigned int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void ~CTask_CreateMobTomb()
  /* this+0xc */ const short m_posX
  /* this+0xe */ const short m_posY
  /* this+0x10 */ const short m_DeadHour
  /* this+0x12 */ const short m_DeadMin
  /* this+0x14 */ const unsigned int m_MOB_AID
  /* this+0x18 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_MVPNAME

  /* this+0x34 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_MOB_NAME

    public class `anonymous-namespace'::CTask_CreateMobTomb & operator=(class `anonymous-namespace'::CTask_CreateMobTomb &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_AQUAPLAY {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_AQUAPLAY(const class `anonymous-namespace'::CTask_EL_AQUAPLAY &)
  public void CTask_EL_AQUAPLAY(const int)
  public void ~CTask_EL_AQUAPLAY()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_AQUAPLAY & operator=(class `anonymous-namespace'::CTask_EL_AQUAPLAY &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_BLAST {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_BLAST(const class `anonymous-namespace'::CTask_EL_BLAST &)
  public void CTask_EL_BLAST(const int)
  public void ~CTask_EL_BLAST()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_BLAST & operator=(class `anonymous-namespace'::CTask_EL_BLAST &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_CHILLY_AIR {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_CHILLY_AIR(const class `anonymous-namespace'::CTask_EL_CHILLY_AIR &)
  public void CTask_EL_CHILLY_AIR(const int)
  public void ~CTask_EL_CHILLY_AIR()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_CHILLY_AIR & operator=(class `anonymous-namespace'::CTask_EL_CHILLY_AIR &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_CIRCLE_OF_FIRE {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_CIRCLE_OF_FIRE(const class `anonymous-namespace'::CTask_EL_CIRCLE_OF_FIRE &)
  public void CTask_EL_CIRCLE_OF_FIRE(const int)
  public void ~CTask_EL_CIRCLE_OF_FIRE()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_CIRCLE_OF_FIRE & operator=(class `anonymous-namespace'::CTask_EL_CIRCLE_OF_FIRE &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_COOLER {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_COOLER(const class `anonymous-namespace'::CTask_EL_COOLER &)
  public void CTask_EL_COOLER(const int)
  public void ~CTask_EL_COOLER()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_COOLER & operator=(class `anonymous-namespace'::CTask_EL_COOLER &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_COST {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_COST(const class `anonymous-namespace'::CTask_EL_COST &)
  public void CTask_EL_COST(const int)
  public void ~CTask_EL_COST()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_COST & operator=(class `anonymous-namespace'::CTask_EL_COST &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_CURSED_SOIL {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_CURSED_SOIL(const class `anonymous-namespace'::CTask_EL_CURSED_SOIL &)
  public void CTask_EL_CURSED_SOIL(const int)
  public void ~CTask_EL_CURSED_SOIL()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_CURSED_SOIL & operator=(class `anonymous-namespace'::CTask_EL_CURSED_SOIL &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_FIRE_CLOAK {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_FIRE_CLOAK(const class `anonymous-namespace'::CTask_EL_FIRE_CLOAK &)
  public void CTask_EL_FIRE_CLOAK(const int)
  public void ~CTask_EL_FIRE_CLOAK()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_FIRE_CLOAK & operator=(class `anonymous-namespace'::CTask_EL_FIRE_CLOAK &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_GUST {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_GUST(const class `anonymous-namespace'::CTask_EL_GUST &)
  public void CTask_EL_GUST(const int)
  public void ~CTask_EL_GUST()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_GUST & operator=(class `anonymous-namespace'::CTask_EL_GUST &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_HEATER {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_HEATER(const class `anonymous-namespace'::CTask_EL_HEATER &)
  public void CTask_EL_HEATER(const int)
  public void ~CTask_EL_HEATER()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_HEATER & operator=(class `anonymous-namespace'::CTask_EL_HEATER &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_PETROLOGY {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_PETROLOGY(const class `anonymous-namespace'::CTask_EL_PETROLOGY &)
  public void CTask_EL_PETROLOGY(const int)
  public void ~CTask_EL_PETROLOGY()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_PETROLOGY & operator=(class `anonymous-namespace'::CTask_EL_PETROLOGY &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_PYROTECHNIC {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_PYROTECHNIC(const class `anonymous-namespace'::CTask_EL_PYROTECHNIC &)
  public void CTask_EL_PYROTECHNIC(const int)
  public void ~CTask_EL_PYROTECHNIC()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_PYROTECHNIC & operator=(class `anonymous-namespace'::CTask_EL_PYROTECHNIC &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_SOLID_SKIN {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_SOLID_SKIN(const class `anonymous-namespace'::CTask_EL_SOLID_SKIN &)
  public void CTask_EL_SOLID_SKIN(const int)
  public void ~CTask_EL_SOLID_SKIN()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_SOLID_SKIN & operator=(class `anonymous-namespace'::CTask_EL_SOLID_SKIN &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_STONE_SHIELD {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_STONE_SHIELD(const class `anonymous-namespace'::CTask_EL_STONE_SHIELD &)
  public void CTask_EL_STONE_SHIELD(const int)
  public void ~CTask_EL_STONE_SHIELD()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_STONE_SHIELD & operator=(class `anonymous-namespace'::CTask_EL_STONE_SHIELD &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_TROPIC {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_TROPIC(const class `anonymous-namespace'::CTask_EL_TROPIC &)
  public void CTask_EL_TROPIC(const int)
  public void ~CTask_EL_TROPIC()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_TROPIC & operator=(class `anonymous-namespace'::CTask_EL_TROPIC &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_UPHEAVAL {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_UPHEAVAL(const class `anonymous-namespace'::CTask_EL_UPHEAVAL &)
  public void CTask_EL_UPHEAVAL(const int)
  public void ~CTask_EL_UPHEAVAL()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_UPHEAVAL & operator=(class `anonymous-namespace'::CTask_EL_UPHEAVAL &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_WAIT {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_WAIT(const class `anonymous-namespace'::CTask_EL_WAIT &)
  public void CTask_EL_WAIT()
  public void ~CTask_EL_WAIT()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* [0x0000:0x00000000] */ static  const int m_Percent
  public class `anonymous-namespace'::CTask_EL_WAIT & operator=(class `anonymous-namespace'::CTask_EL_WAIT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_WATER_DROP {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_WATER_DROP(const class `anonymous-namespace'::CTask_EL_WATER_DROP &)
  public void CTask_EL_WATER_DROP(const int)
  public void ~CTask_EL_WATER_DROP()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_WATER_DROP & operator=(class `anonymous-namespace'::CTask_EL_WATER_DROP &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_WATER_SCREEN {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_WATER_SCREEN(const class `anonymous-namespace'::CTask_EL_WATER_SCREEN &)
  public void CTask_EL_WATER_SCREEN(const int)
  public void ~CTask_EL_WATER_SCREEN()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_WATER_SCREEN & operator=(class `anonymous-namespace'::CTask_EL_WATER_SCREEN &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_WILD_STORM {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_WILD_STORM(const class `anonymous-namespace'::CTask_EL_WILD_STORM &)
  public void CTask_EL_WILD_STORM(const int)
  public void ~CTask_EL_WILD_STORM()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_WILD_STORM & operator=(class `anonymous-namespace'::CTask_EL_WILD_STORM &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_WIND_CURTAIN {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_WIND_CURTAIN(const class `anonymous-namespace'::CTask_EL_WIND_CURTAIN &)
  public void CTask_EL_WIND_CURTAIN(const int)
  public void ~CTask_EL_WIND_CURTAIN()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_WIND_CURTAIN & operator=(class `anonymous-namespace'::CTask_EL_WIND_CURTAIN &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_EL_WIND_STEP {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_EL_WIND_STEP(const class `anonymous-namespace'::CTask_EL_WIND_STEP &)
  public void CTask_EL_WIND_STEP(const int)
  public void ~CTask_EL_WIND_STEP()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_EL_WIND_STEP & operator=(class `anonymous-namespace'::CTask_EL_WIND_STEP &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_FORCEOFVANGUARD {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_FORCEOFVANGUARD(const class `anonymous-namespace'::CTask_FORCEOFVANGUARD &)
  public void CTask_FORCEOFVANGUARD(const int, const int)
  public void ~CTask_FORCEOFVANGUARD()
  /* this+0xc */ int m_LoopTime
  /* this+0x10 */ int m_ReduceSPValue
  public class `anonymous-namespace'::CTask_FORCEOFVANGUARD & operator=(class `anonymous-namespace'::CTask_FORCEOFVANGUARD &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_FREEZE_SP {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_FREEZE_SP(const class `anonymous-namespace'::CTask_FREEZE_SP &)
  public void CTask_FREEZE_SP()
  public void ~CTask_FREEZE_SP()
  public class `anonymous-namespace'::CTask_FREEZE_SP & operator=(class `anonymous-namespace'::CTask_FREEZE_SP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_GN_BLOOD_SUCKER {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_GN_BLOOD_SUCKER(const class `anonymous-namespace'::CTask_GN_BLOOD_SUCKER &)
  public void CTask_GN_BLOOD_SUCKER(const unsigned long, const int, const int)
  public void ~CTask_GN_BLOOD_SUCKER()
  /* this+0xc */ int m_Damage
  /* this+0x10 */ const int m_HPSuckerPercent
  /* this+0x14 */ const unsigned long m_SpellPlayerAID
  public class `anonymous-namespace'::CTask_GN_BLOOD_SUCKER & operator=(class `anonymous-namespace'::CTask_GN_BLOOD_SUCKER &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_GN_CRAZYWEED {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_GN_CRAZYWEED(const class `anonymous-namespace'::CTask_GN_CRAZYWEED &)
  public void CTask_GN_CRAZYWEED(const int, const int, const int, const int, const int)
  public void ~CTask_GN_CRAZYWEED()
  /* this+0xc */ const int m_originXpos
  /* this+0x10 */ const int m_originYpos
  /* this+0x14 */ const int m_dropRadius
  /* this+0x18 */ int m_DropCnt
  /* this+0x1c */ const int m_level
  public class `anonymous-namespace'::CTask_GN_CRAZYWEED & operator=(class `anonymous-namespace'::CTask_GN_CRAZYWEED &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_GN_DEMONIC_FIRE {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_GN_DEMONIC_FIRE(const class `anonymous-namespace'::CTask_GN_DEMONIC_FIRE &)
  public void CTask_GN_DEMONIC_FIRE(const unsigned long, const int, const int, const int)
  public void ~CTask_GN_DEMONIC_FIRE()
  /* this+0xc */ const int m_MATKpercent
  /* this+0x10 */ const int m_BURNNINGpercent
  /* this+0x14 */ const int m_BURNNINGLifeTM
  /* this+0x18 */ const int m_SKAID
  public class `anonymous-namespace'::CTask_GN_DEMONIC_FIRE & operator=(class `anonymous-namespace'::CTask_GN_DEMONIC_FIRE &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT1 {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT1(const class `anonymous-namespace'::CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT1 &)
  public void CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT1()
  public void ~CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT1()
  public class `anonymous-namespace'::CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT1 & operator=(class `anonymous-namespace'::CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT1 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT2 {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT2(const class `anonymous-namespace'::CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT2 &)
  public void CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT2()
  public void ~CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT2()
  public class `anonymous-namespace'::CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT2 & operator=(class `anonymous-namespace'::CTask_GN_FIRE_EXPANSION_TEAR_GAS_EFFECT2 &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_GN_THORNS_TRAP {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_GN_THORNS_TRAP(const class `anonymous-namespace'::CTask_GN_THORNS_TRAP &)
  public void CTask_GN_THORNS_TRAP(const unsigned long, const unsigned long, const int)
  public void ~CTask_GN_THORNS_TRAP()
  /* this+0xc */ const unsigned long m_SKAID
  /* this+0x10 */ int m_Damage
  /* this+0x14 */ const unsigned long m_SpellPlayerAID
  public class `anonymous-namespace'::CTask_GN_THORNS_TRAP & operator=(class `anonymous-namespace'::CTask_GN_THORNS_TRAP &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_GN_WALLOFTHORN {
  ActorScheduler::CTask, offset = 0x0

  public int GetIdx(const int, const int)
  public bool operator()(class CActor *)
    public void CTask_GN_WALLOFTHORN(const class `anonymous-namespace'::CTask_GN_WALLOFTHORN &)
  public void CTask_GN_WALLOFTHORN(const unsigned long, const unsigned long)
  public void ~CTask_GN_WALLOFTHORN()
  /* this+0xc */ const unsigned long m_CreateorPlayerAID
  /* this+0x10 */ const unsigned long m_SkillAID
  /* this+0x14 */ int m_originXpos
  /* this+0x18 */ int m_originYpos
  /* this+0x1c */ unsigned int m_SKGroupUniqueID
  /* this+0x20 */ int m_originTblIdx
  /* this+0x24 */ int m_ForwardOffsetTblIdx
  /* this+0x28 */ int m_BackwardOffsetTblIdx
  /* this+0x2c */ int m_LoopCnt
    /* this+0x30 */ struct `anonymous-namespace'::CTask_GN_WALLOFTHORN::<unnamed-type-m_FireWall> m_FireWall

  public class `anonymous-namespace'::CTask_GN_WALLOFTHORN & operator=(class `anonymous-namespace'::CTask_GN_WALLOFTHORN &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::CTask_GN_WALLOFTHORN::<unnamed-type-m_FireWall> {
  /* this+0x0 */ int LifeTM
  /* this+0x4 */ int Level
  /* this+0x8 */ int Index
  /* this+0xc */ unsigned int GroupUniqueID
}

class `anonymous-namespace'::CTask_HANDICAPSTATE_DEEP_SLEEP {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_HANDICAPSTATE_DEEP_SLEEP(const class `anonymous-namespace'::CTask_HANDICAPSTATE_DEEP_SLEEP &)
  public void CTask_HANDICAPSTATE_DEEP_SLEEP()
  public void ~CTask_HANDICAPSTATE_DEEP_SLEEP()
  public class `anonymous-namespace'::CTask_HANDICAPSTATE_DEEP_SLEEP & operator=(class `anonymous-namespace'::CTask_HANDICAPSTATE_DEEP_SLEEP &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_HomunWarpOwner {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_HomunWarpOwner(const class `anonymous-namespace'::CTask_HomunWarpOwner &)
  public void CTask_HomunWarpOwner()
  public void ~CTask_HomunWarpOwner()
  public class `anonymous-namespace'::CTask_HomunWarpOwner & operator=(class `anonymous-namespace'::CTask_HomunWarpOwner &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_INSPIRATION {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_INSPIRATION(const class `anonymous-namespace'::CTask_INSPIRATION &)
  public void CTask_INSPIRATION(const int, const int, const int)
  public void ~CTask_INSPIRATION()
  /* this+0xc */ int m_LoopTime
  /* this+0x10 */ int m_HPAmount
  /* this+0x14 */ int m_SPAmount
  public class `anonymous-namespace'::CTask_INSPIRATION & operator=(class `anonymous-namespace'::CTask_INSPIRATION &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_KAGEMUSYA {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_KAGEMUSYA(const class `anonymous-namespace'::CTask_KAGEMUSYA &)
  public void CTask_KAGEMUSYA()
  public void ~CTask_KAGEMUSYA()
  public class `anonymous-namespace'::CTask_KAGEMUSYA & operator=(class `anonymous-namespace'::CTask_KAGEMUSYA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_KO_YAMIKUMO {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_KO_YAMIKUMO(const class `anonymous-namespace'::CTask_KO_YAMIKUMO &)
  public void CTask_KO_YAMIKUMO()
  public void ~CTask_KO_YAMIKUMO()
  public class `anonymous-namespace'::CTask_KO_YAMIKUMO & operator=(class `anonymous-namespace'::CTask_KO_YAMIKUMO &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_LEECHESEND {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_LEECHESEND(const class `anonymous-namespace'::CTask_LEECHESEND &)
  public void CTask_LEECHESEND()
  public void ~CTask_LEECHESEND()
  public class `anonymous-namespace'::CTask_LEECHESEND & operator=(class `anonymous-namespace'::CTask_LEECHESEND &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_LG_REFLECTDAMAGE {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_LG_REFLECTDAMAGE(const class `anonymous-namespace'::CTask_LG_REFLECTDAMAGE &)
  public void CTask_LG_REFLECTDAMAGE(const int, const int)
  public void ~CTask_LG_REFLECTDAMAGE()
  /* this+0xc */ int m_LoopTime
  /* this+0x10 */ int m_ReduceSPValue
  public class `anonymous-namespace'::CTask_LG_REFLECTDAMAGE & operator=(class `anonymous-namespace'::CTask_LG_REFLECTDAMAGE &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_MACRO_PLAY {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_MACRO_PLAY(const class `anonymous-namespace'::CTask_MACRO_PLAY &)
  public void CTask_MACRO_PLAY()
  public void ~CTask_MACRO_PLAY()
    public class `anonymous-namespace'::CTask_MACRO_PLAY & operator=(class `anonymous-namespace'::CTask_MACRO_PLAY &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_MAGICMUSHROOM {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_MAGICMUSHROOM(const class `anonymous-namespace'::CTask_MAGICMUSHROOM &)
  public void CTask_MAGICMUSHROOM()
  public void ~CTask_MAGICMUSHROOM()
  public class `anonymous-namespace'::CTask_MAGICMUSHROOM & operator=(class `anonymous-namespace'::CTask_MAGICMUSHROOM &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_MAGNETICFIELD {
  ActorScheduler::CTask, offset = 0x0

    /* this+0xc */ const int m_ReduceSPamount
  public bool operator()(class CActor *)
  public void CTask_MAGNETICFIELD(const class `anonymous-namespace'::CTask_MAGNETICFIELD &)
  public void CTask_MAGNETICFIELD(const int)
  public void ~CTask_MAGNETICFIELD()
  public class `anonymous-namespace'::CTask_MAGNETICFIELD & operator=(class `anonymous-namespace'::CTask_MAGNETICFIELD &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_MEIKYOUSISUI {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_MEIKYOUSISUI(const class `anonymous-namespace'::CTask_MEIKYOUSISUI &)
  public void CTask_MEIKYOUSISUI(const int, const int)
  public void ~CTask_MEIKYOUSISUI()
  /* this+0xc */ const int m_RecoveryHPpercent
  /* this+0x10 */ const int m_RecoverySPpercent
  public class `anonymous-namespace'::CTask_MEIKYOUSISUI & operator=(class `anonymous-namespace'::CTask_MEIKYOUSISUI &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_MELODYOFSINK {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_MELODYOFSINK(const class `anonymous-namespace'::CTask_MELODYOFSINK &)
  public void CTask_MELODYOFSINK(const int)
  public void ~CTask_MELODYOFSINK()
  /* this+0xc */ const int m_ReduceSPPercent
  public class `anonymous-namespace'::CTask_MELODYOFSINK & operator=(class `anonymous-namespace'::CTask_MELODYOFSINK &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_MH_SUMMON_LEGION {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_MH_SUMMON_LEGION(const class `anonymous-namespace'::CTask_MH_SUMMON_LEGION &)
  public void CTask_MH_SUMMON_LEGION(const int)
  public void ~CTask_MH_SUMMON_LEGION()
  public class `anonymous-namespace'::CTask_MH_SUMMON_LEGION & operator=(class `anonymous-namespace'::CTask_MH_SUMMON_LEGION &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_OVERHEAT {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_OVERHEAT(const class `anonymous-namespace'::CTask_OVERHEAT &)
  public void CTask_OVERHEAT()
  public void ~CTask_OVERHEAT()
  public class `anonymous-namespace'::CTask_OVERHEAT & operator=(class `anonymous-namespace'::CTask_OVERHEAT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_OVERHEAT_LIMITPOINT {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_OVERHEAT_LIMITPOINT(const class `anonymous-namespace'::CTask_OVERHEAT_LIMITPOINT &)
  public void CTask_OVERHEAT_LIMITPOINT()
  public void ~CTask_OVERHEAT_LIMITPOINT()
  public class `anonymous-namespace'::CTask_OVERHEAT_LIMITPOINT & operator=(class `anonymous-namespace'::CTask_OVERHEAT_LIMITPOINT &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_PYREXIA {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_PYREXIA(const class `anonymous-namespace'::CTask_PYREXIA &)
  public void CTask_PYREXIA()
  public void ~CTask_PYREXIA()
  public class `anonymous-namespace'::CTask_PYREXIA & operator=(class `anonymous-namespace'::CTask_PYREXIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_RAISINGDRAGON {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_RAISINGDRAGON(const class `anonymous-namespace'::CTask_RAISINGDRAGON &)
  public void CTask_RAISINGDRAGON(const int)
  public void ~CTask_RAISINGDRAGON()
  /* this+0xc */ const int m_LoopTime
  public class `anonymous-namespace'::CTask_RAISINGDRAGON & operator=(class `anonymous-namespace'::CTask_RAISINGDRAGON &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_RA_CAMOUFLAGE {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_RA_CAMOUFLAGE(const class `anonymous-namespace'::CTask_RA_CAMOUFLAGE &)
  public void CTask_RA_CAMOUFLAGE(const int)
  public void ~CTask_RA_CAMOUFLAGE()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  /* this+0xc */ const int m_ReduceSPAmount
  public class `anonymous-namespace'::CTask_RA_CAMOUFLAGE & operator=(class `anonymous-namespace'::CTask_RA_CAMOUFLAGE &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SATURDAY_NIGHT_FEVER {
  ActorScheduler::CTask, offset = 0x0

  /* this+0xc */ const int m_LoopTime
  public bool operator()(class CActor *)
  public void CTask_SATURDAY_NIGHT_FEVER(const class `anonymous-namespace'::CTask_SATURDAY_NIGHT_FEVER &)
  public void CTask_SATURDAY_NIGHT_FEVER(const int)
  public void ~CTask_SATURDAY_NIGHT_FEVER()
  public class `anonymous-namespace'::CTask_SATURDAY_NIGHT_FEVER & operator=(class `anonymous-namespace'::CTask_SATURDAY_NIGHT_FEVER &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SC_INVISIBILITY {
  ActorScheduler::CTask, offset = 0x0

    /* this+0xc */ const int m_ReduceSPPercent
  public bool operator()(class CActor *)
  public void CTask_SC_INVISIBILITY(const class `anonymous-namespace'::CTask_SC_INVISIBILITY &)
  public void CTask_SC_INVISIBILITY(const int)
  public void ~CTask_SC_INVISIBILITY()
  public class `anonymous-namespace'::CTask_SC_INVISIBILITY & operator=(class `anonymous-namespace'::CTask_SC_INVISIBILITY &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SC_REPRODUCE {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_SC_REPRODUCE(const class `anonymous-namespace'::CTask_SC_REPRODUCE &)
  public void CTask_SC_REPRODUCE(const int)
  public void ~CTask_SC_REPRODUCE()
  /* this+0xc */ const int m_ReduceSPamount
  public class `anonymous-namespace'::CTask_SC_REPRODUCE & operator=(class `anonymous-namespace'::CTask_SC_REPRODUCE &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SHADOWFORM {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_SHADOWFORM(const class `anonymous-namespace'::CTask_SHADOWFORM &)
  public void CTask_SHADOWFORM(const int)
  public void ~CTask_SHADOWFORM()
  /* this+0xc */ const int m_ReduceSPamount
  public class `anonymous-namespace'::CTask_SHADOWFORM & operator=(class `anonymous-namespace'::CTask_SHADOWFORM &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SIRCLEOFNATURE {
  ActorScheduler::CTask, offset = 0x0

    /* this+0xc */ const int m_ReduceSPamount
  /* this+0x10 */ const int m_RecoveryHPamount
  public bool operator()(class CActor *)
  public void CTask_SIRCLEOFNATURE(const class `anonymous-namespace'::CTask_SIRCLEOFNATURE &)
  public void CTask_SIRCLEOFNATURE(const int, const int)
  public void ~CTask_SIRCLEOFNATURE()
  public class `anonymous-namespace'::CTask_SIRCLEOFNATURE & operator=(class `anonymous-namespace'::CTask_SIRCLEOFNATURE &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SONG_OF_MANA {
  ActorScheduler::CTask, offset = 0x0

    /* this+0xc */ const int m_RecoverySPamount
  public bool operator()(class CActor *)
  public void CTask_SONG_OF_MANA(const class `anonymous-namespace'::CTask_SONG_OF_MANA &)
  public void CTask_SONG_OF_MANA(const int)
  public void ~CTask_SONG_OF_MANA()
  public class `anonymous-namespace'::CTask_SONG_OF_MANA & operator=(class `anonymous-namespace'::CTask_SONG_OF_MANA &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SO_EARTH_INSIGNIA {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_SO_EARTH_INSIGNIA(const class `anonymous-namespace'::CTask_SO_EARTH_INSIGNIA &)
  public void CTask_SO_EARTH_INSIGNIA()
  public void ~CTask_SO_EARTH_INSIGNIA()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  public class `anonymous-namespace'::CTask_SO_EARTH_INSIGNIA & operator=(class `anonymous-namespace'::CTask_SO_EARTH_INSIGNIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SO_FIRE_INSIGNIA {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_SO_FIRE_INSIGNIA(const class `anonymous-namespace'::CTask_SO_FIRE_INSIGNIA &)
  public void CTask_SO_FIRE_INSIGNIA()
  public void ~CTask_SO_FIRE_INSIGNIA()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  public class `anonymous-namespace'::CTask_SO_FIRE_INSIGNIA & operator=(class `anonymous-namespace'::CTask_SO_FIRE_INSIGNIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SO_WATER_INSIGNIA {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_SO_WATER_INSIGNIA(const class `anonymous-namespace'::CTask_SO_WATER_INSIGNIA &)
  public void CTask_SO_WATER_INSIGNIA()
  public void ~CTask_SO_WATER_INSIGNIA()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  public class `anonymous-namespace'::CTask_SO_WATER_INSIGNIA & operator=(class `anonymous-namespace'::CTask_SO_WATER_INSIGNIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SO_WIND_INSIGNIA {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_SO_WIND_INSIGNIA(const class `anonymous-namespace'::CTask_SO_WIND_INSIGNIA &)
  public void CTask_SO_WIND_INSIGNIA()
  public void ~CTask_SO_WIND_INSIGNIA()
  /* [0x0000:0x00000000] */ static  const int m_LoopTime
  public class `anonymous-namespace'::CTask_SO_WIND_INSIGNIA & operator=(class `anonymous-namespace'::CTask_SO_WIND_INSIGNIA &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_STEALTHFIELD_MASTER {
  ActorScheduler::CTask, offset = 0x0

  /* this+0xc */ const int m_LoopTime
  public bool operator()(class CActor *)
  public void CTask_STEALTHFIELD_MASTER(const class `anonymous-namespace'::CTask_STEALTHFIELD_MASTER &)
  public void CTask_STEALTHFIELD_MASTER(const int)
  public void ~CTask_STEALTHFIELD_MASTER()
  public class `anonymous-namespace'::CTask_STEALTHFIELD_MASTER & operator=(class `anonymous-namespace'::CTask_STEALTHFIELD_MASTER &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_STOMACHACHE {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_STOMACHACHE(const class `anonymous-namespace'::CTask_STOMACHACHE &)
  public void CTask_STOMACHACHE()
  public void ~CTask_STOMACHACHE()
  public class `anonymous-namespace'::CTask_STOMACHACHE & operator=(class `anonymous-namespace'::CTask_STOMACHACHE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_STRIKING {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_STRIKING(const class `anonymous-namespace'::CTask_STRIKING &)
  public void CTask_STRIKING(const int, const int)
  public void ~CTask_STRIKING()
  /* this+0xc */ int m_LoopTime
  /* this+0x10 */ int m_SPValue
  public class `anonymous-namespace'::CTask_STRIKING & operator=(class `anonymous-namespace'::CTask_STRIKING &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SchedulerSendAllQuest {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
      /* this+0xc */ class std::vector<`anonymous namespace'::lcMyQuestData,std::allocator<`anonymous namespace'::lcMyQuestData> > m_AllQuestDataList

  /* this+0x1c */ int m_SendCompleteCnt
  public void CTask_SchedulerSendAllQuest(const class `anonymous-namespace'::CTask_SchedulerSendAllQuest &)
  public void CTask_SchedulerSendAllQuest(class std::vector<`anonymous namespace'::lcMyQuestData,std::allocator<`anonymous namespace'::lcMyQuestData> > &)
  public void ~CTask_SchedulerSendAllQuest()
  public class `anonymous-namespace'::CTask_SchedulerSendAllQuest & operator=(class `anonymous-namespace'::CTask_SchedulerSendAllQuest &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_SendSimpleCashShopItemList {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_SendSimpleCashShopItemList(const class `anonymous-namespace'::CTask_SendSimpleCashShopItemList &)
  public void CTask_SendSimpleCashShopItemList(const unsigned long, const class std::vector<CASH_ITEM_LIST2,std::allocator<CASH_ITEM_LIST2> > &)
  public void ~CTask_SendSimpleCashShopItemList()
  /* this+0xc */ const unsigned long m_OpenID
  /* this+0x10 */ const class std::vector<CASH_ITEM_LIST2,std::allocator<CASH_ITEM_LIST2> > & m_rShopItemList
  /* this+0x14 */ int m_Sent_ItemCnt
  /* this+0x18 */ const int m_Total_ItemCnt
  /* this+0x1c */ const unsigned long m_OldTime
      public class `anonymous-namespace'::CTask_SendSimpleCashShopItemList & operator=(class `anonymous-namespace'::CTask_SendSimpleCashShopItemList &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_TINDER_BREAKER {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_TINDER_BREAKER(const class `anonymous-namespace'::CTask_TINDER_BREAKER &)
  public void CTask_TINDER_BREAKER()
  public void ~CTask_TINDER_BREAKER()
  public class `anonymous-namespace'::CTask_TINDER_BREAKER & operator=(class `anonymous-namespace'::CTask_TINDER_BREAKER &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_TOXIN {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_TOXIN(const class `anonymous-namespace'::CTask_TOXIN &)
  public void CTask_TOXIN()
  public void ~CTask_TOXIN()
  public class `anonymous-namespace'::CTask_TOXIN & operator=(class `anonymous-namespace'::CTask_TOXIN &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WARMER {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_WARMER(const class `anonymous-namespace'::CTask_WARMER &)
  public void CTask_WARMER(const float)
  /* this+0xc */ float m_IncHPpercent
  public void ~CTask_WARMER()
  public class `anonymous-namespace'::CTask_WARMER & operator=(class `anonymous-namespace'::CTask_WARMER &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WATER_SCREEN_OPTION {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_WATER_SCREEN_OPTION(const class `anonymous-namespace'::CTask_WATER_SCREEN_OPTION &)
  public void CTask_WATER_SCREEN_OPTION()
    public void ~CTask_WATER_SCREEN_OPTION()
  public class `anonymous-namespace'::CTask_WATER_SCREEN_OPTION & operator=(class `anonymous-namespace'::CTask_WATER_SCREEN_OPTION &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WEAPONBLOCKING {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_WEAPONBLOCKING(const class `anonymous-namespace'::CTask_WEAPONBLOCKING &)
  public void CTask_WEAPONBLOCKING()
  public void ~CTask_WEAPONBLOCKING()
  public class `anonymous-namespace'::CTask_WEAPONBLOCKING & operator=(class `anonymous-namespace'::CTask_WEAPONBLOCKING &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WL_HELLINFERNO {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_WL_HELLINFERNO(const class `anonymous-namespace'::CTask_WL_HELLINFERNO &)
  public void CTask_WL_HELLINFERNO(const struct SKILLATTACK_MSG &, const int)
  public void ~CTask_WL_HELLINFERNO()
  /* this+0xc */ struct SKILLATTACK_MSG m_SKAtkMsg

  /* this+0x3c */ const int m_DarknessAtkPercent
  public class `anonymous-namespace'::CTask_WL_HELLINFERNO & operator=(class `anonymous-namespace'::CTask_WL_HELLINFERNO &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WL_SUMMON {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
    public void CTask_WL_SUMMON(const class `anonymous-namespace'::CTask_WL_SUMMON &)
  public void CTask_WL_SUMMON(const int, const int, const int)
  public void ~CTask_WL_SUMMON()
  /* this+0xc */ const int m_LifeSuportSPCost
  /* this+0x10 */ const int m_EfstID
  public class `anonymous-namespace'::CTask_WL_SUMMON & operator=(class `anonymous-namespace'::CTask_WL_SUMMON &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WL_SUMMON1 {
  `anonymous-namespace'::CTask_WL_SUMMON, offset = 0x0

  public void CTask_WL_SUMMON1(const class `anonymous-namespace'::CTask_WL_SUMMON1 &)
  public void CTask_WL_SUMMON1(const int)
  public void ~CTask_WL_SUMMON1()
  public class `anonymous-namespace'::CTask_WL_SUMMON1 & operator=(class `anonymous-namespace'::CTask_WL_SUMMON1 &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WL_SUMMON2 {
  `anonymous-namespace'::CTask_WL_SUMMON, offset = 0x0

  public void CTask_WL_SUMMON2(const class `anonymous-namespace'::CTask_WL_SUMMON2 &)
  public void CTask_WL_SUMMON2(const int)
  public void ~CTask_WL_SUMMON2()
  public class `anonymous-namespace'::CTask_WL_SUMMON2 & operator=(class `anonymous-namespace'::CTask_WL_SUMMON2 &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WL_SUMMON3 {
  `anonymous-namespace'::CTask_WL_SUMMON, offset = 0x0

  public void CTask_WL_SUMMON3(const class `anonymous-namespace'::CTask_WL_SUMMON3 &)
  public void CTask_WL_SUMMON3(const int)
  public void ~CTask_WL_SUMMON3()
  public class `anonymous-namespace'::CTask_WL_SUMMON3 & operator=(class `anonymous-namespace'::CTask_WL_SUMMON3 &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WL_SUMMON4 {
  `anonymous-namespace'::CTask_WL_SUMMON, offset = 0x0

  public void CTask_WL_SUMMON4(const class `anonymous-namespace'::CTask_WL_SUMMON4 &)
  public void CTask_WL_SUMMON4(const int)
  public void ~CTask_WL_SUMMON4()
  public class `anonymous-namespace'::CTask_WL_SUMMON4 & operator=(class `anonymous-namespace'::CTask_WL_SUMMON4 &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WL_SUMMON5 {
  `anonymous-namespace'::CTask_WL_SUMMON, offset = 0x0

  public void CTask_WL_SUMMON5(const class `anonymous-namespace'::CTask_WL_SUMMON5 &)
  public void CTask_WL_SUMMON5(const int)
  public void ~CTask_WL_SUMMON5()
  public class `anonymous-namespace'::CTask_WL_SUMMON5 & operator=(class `anonymous-namespace'::CTask_WL_SUMMON5 &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_WL_TETRAVORTEX {
  ActorScheduler::CTask, offset = 0x0

  public bool operator()(class CActor *)
  public void CTask_WL_TETRAVORTEX(const class `anonymous-namespace'::CTask_WL_TETRAVORTEX &)
  public void CTask_WL_TETRAVORTEX(const struct SKILLATTACK_MSG &, const int, const class std::vector<int,std::allocator<int> >)
  public void ~CTask_WL_TETRAVORTEX()
  /* this+0xc */ const class std::vector<int,std::allocator<int> > m_PropertyList

  /* this+0x1c */ int m_PropertyListIdx
  /* this+0x20 */ const int m_ATKpercent
  /* this+0x24 */ struct SKILLATTACK_MSG m_skMsg

  public class `anonymous-namespace'::CTask_WL_TETRAVORTEX & operator=(class `anonymous-namespace'::CTask_WL_TETRAVORTEX &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CTask_ZENKAI {
  ActorScheduler::CTask, offset = 0x0

    public bool operator()(class CActor *)
  public void CTask_ZENKAI(const class `anonymous-namespace'::CTask_ZENKAI &)
  public void CTask_ZENKAI(const unsigned long)
  public void ~CTask_ZENKAI()
  /* this+0xc */ const unsigned long m_SK_AID
  public class `anonymous-namespace'::CTask_ZENKAI & operator=(class `anonymous-namespace'::CTask_ZENKAI &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CWL_RADIUSApply {
  SKcastingTMvarStuff::CApply, offset = 0x0

  public bool operator()(const int)
  public void CWL_RADIUSApply(const class `anonymous-namespace'::CWL_RADIUSApply &)
  public void CWL_RADIUSApply()
  public void ~CWL_RADIUSApply()
  public class `anonymous-namespace'::CWL_RADIUSApply & operator=(const class `anonymous-namespace'::CWL_RADIUSApply &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CompletionKeyGenerator {
    *
  public int operator()()
  public void CompletionKeyGenerator(class `anonymous-namespace'::CompletionKeyGenerator &)
  public void CompletionKeyGenerator()
  public void ~CompletionKeyGenerator()
  public class `anonymous-namespace'::CompletionKeyGenerator & operator=(class `anonymous-namespace'::CompletionKeyGenerator &)
  /* this+0x4 */ unsigned int m_Key
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::DeleteSkillInfo {
  public void DeleteSkillInfo(const int, const int)
  public void DeleteSkillInfo()
  /* this+0x0 */ int SKID
  /* this+0x4 */ int Level
}

class `anonymous-namespace'::ELNoactionObject {
  public void ELNoactionObject(class CPC *, const int)
  public void ~ELNoactionObject()
  /* this+0x0 */ class CPC * m_cpPlayer
  /* this+0x4 */ const int m_Identity
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::ELStateObject {
  public void operator()(const enum CPCElemental::enumState)
  public void ELStateObject(class CPCElemental *, const enum CPCElemental::enumState)
  public void ~ELStateObject()
  /* this+0x0 */ enum CPCElemental::enumState m_State
  /* this+0x4 */ class CPCElemental * m_cpPCElemental
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::GD_EMERGENCYCALLPos {
  public void operator()(int &, int &)
  public void GD_EMERGENCYCALLPos(const class `anonymous-namespace'::GD_EMERGENCYCALLPos &)
  public void GD_EMERGENCYCALLPos(class CMapRes *, const int, const int)
  /* this+0x0 */ class std::vector<std::pair<int,int>,std::allocator<std::pair<int,int> > > m_Tbl

  /* this+0x10 */ const int m_originXpos
  /* this+0x14 */ const int m_originYpos
  /* this+0x18 */ unsigned int m_Cnt
  public void ~GD_EMERGENCYCALLPos()
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::GN_CARTCANNONoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void GN_CARTCANNONoperation(const struct `anonymous-namespace'::GN_CARTCANNONoperation &)
  public void GN_CARTCANNONoperation(class CPC *)
  public void final(const int, const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~GN_CARTCANNONoperation()
  public struct `anonymous-namespace'::GN_CARTCANNONoperation & operator=(const struct `anonymous-namespace'::GN_CARTCANNONoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::GN_CART_TORNADOoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void GN_CART_TORNADOoperation(const struct `anonymous-namespace'::GN_CART_TORNADOoperation &)
  public void GN_CART_TORNADOoperation(class CPC *)
  public void final(const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~GN_CART_TORNADOoperation()
  public struct `anonymous-namespace'::GN_CART_TORNADOoperation & operator=(const struct `anonymous-namespace'::GN_CART_TORNADOoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::GN_CRAZYWEED_ATKoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void GN_CRAZYWEED_ATKoperation(const struct `anonymous-namespace'::GN_CRAZYWEED_ATKoperation &)
  public void GN_CRAZYWEED_ATKoperation(class CPC *)
  public void final(const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~GN_CRAZYWEED_ATKoperation()
  public struct `anonymous-namespace'::GN_CRAZYWEED_ATKoperation & operator=(const struct `anonymous-namespace'::GN_CRAZYWEED_ATKoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::GN_FIRE_EXPANSION_LEVEL2operation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void GN_FIRE_EXPANSION_LEVEL2operation(const struct `anonymous-namespace'::GN_FIRE_EXPANSION_LEVEL2operation &)
  public void GN_FIRE_EXPANSION_LEVEL2operation(class CPC *, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_MATKpercent
}

struct `anonymous-namespace'::GN_FIRE_EXPANSION_LEVEL5operation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void GN_FIRE_EXPANSION_LEVEL5operation(const struct `anonymous-namespace'::GN_FIRE_EXPANSION_LEVEL5operation &)
  public void GN_FIRE_EXPANSION_LEVEL5operation(class CPC *, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SpellLevel
}

struct `anonymous-namespace'::GN_MANDRAGORAoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void GN_MANDRAGORAoperation(const struct `anonymous-namespace'::GN_MANDRAGORAoperation &)
  public void GN_MANDRAGORAoperation(class CPC *, const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_skLevel
  /* this+0xc */ const int m_LifeTM
  /* this+0x10 */ const int m_ApplySucessPercent
  /* this+0x14 */ const int m_ReduceINTAmount
  /* this+0x18 */ const int m_ReduceSPPercent
}

class `anonymous-namespace'::HOMUNFOOD {
  public void HOMUNFOOD(const class `anonymous-namespace'::HOMUNFOOD &)
  public void HOMUNFOOD()
  public unsigned short GetFoodItemID(const short)
  /* this+0x0 */ class std::map<short,unsigned short,std::less<short>,std::allocator<std::pair<short const ,unsigned short> > > m_tbl

  public void ~HOMUNFOOD()
  public class `anonymous-namespace'::HOMUNFOOD & operator=(const class `anonymous-namespace'::HOMUNFOOD &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::HT_TRAPSPLASHoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void HT_TRAPSPLASHoperation(const struct `anonymous-namespace'::HT_TRAPSPLASHoperation &)
  public void HT_TRAPSPLASHoperation(class CPC *, const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SKID
  /* this+0xc */ const int m_SKLevel
  /* this+0x10 */ const int m_Damage
  /* this+0x14 */ const int m_xPos
  /* this+0x18 */ const int m_yPos
}

struct `anonymous-namespace'::HandicapStateToleranceData {
  /* this+0x0 */ int RelatedStatus
  /* this+0x4 */ int DefaultKeepMS
  /* this+0x8 */ int AddKeepMSAmount
  public void HandicapStateToleranceData(const int, const int, const int)
}

struct `anonymous-namespace'::KG_KAGEHUMIoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public bool IsApplyTarget(class CActor *)
  public void final(const int)
  public void KG_KAGEHUMIoperation(const struct `anonymous-namespace'::KG_KAGEHUMIoperation &)
  public void KG_KAGEHUMIoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~KG_KAGEHUMIoperation()
  public struct `anonymous-namespace'::KG_KAGEHUMIoperation & operator=(const struct `anonymous-namespace'::KG_KAGEHUMIoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::KO_BAKURETSUoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void final(const int, const int, const int, const int, const int)
  public void KO_BAKURETSUoperation(const struct `anonymous-namespace'::KO_BAKURETSUoperation &)
  public void KO_BAKURETSUoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~KO_BAKURETSUoperation()
  public struct `anonymous-namespace'::KO_BAKURETSUoperation & operator=(const struct `anonymous-namespace'::KO_BAKURETSUoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::KO_HAPPOKUNAIoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void final(const int, const int, const int, const int, const int)
  public void KO_HAPPOKUNAIoperation(const struct `anonymous-namespace'::KO_HAPPOKUNAIoperation &)
  public void KO_HAPPOKUNAIoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~KO_HAPPOKUNAIoperation()
  public struct `anonymous-namespace'::KO_HAPPOKUNAIoperation & operator=(const struct `anonymous-namespace'::KO_HAPPOKUNAIoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::KO_HUUMARANKAoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void final(const int, const int, const int, const int, const int)
  public void KO_HUUMARANKAoperation(const struct `anonymous-namespace'::KO_HUUMARANKAoperation &)
  public void KO_HUUMARANKAoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~KO_HUUMARANKAoperation()
  public struct `anonymous-namespace'::KO_HUUMARANKAoperation & operator=(const struct `anonymous-namespace'::KO_HUUMARANKAoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::KO_MUCHANAGEoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void final(const int, const int, const int, const int, const int)
  public void KO_MUCHANAGEoperation(const struct `anonymous-namespace'::KO_MUCHANAGEoperation &)
  public void KO_MUCHANAGEoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~KO_MUCHANAGEoperation()
  public struct `anonymous-namespace'::KO_MUCHANAGEoperation & operator=(const struct `anonymous-namespace'::KO_MUCHANAGEoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::KO_ZANZOUoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void KO_ZANZOUoperation(const struct `anonymous-namespace'::KO_ZANZOUoperation &)
  public void KO_ZANZOUoperation(const unsigned long, const unsigned long)
  /* this+0x4 */ const unsigned long m_CurrentTaretAID
  /* this+0x8 */ const unsigned long m_NewTargetAID
}

struct `anonymous-namespace'::MCStoreUniqueIDGenerator {
  public unsigned long operator()()
  private void MCStoreUniqueIDGenerator()
  /* this+0x0 */ unsigned long m_ID
}

struct `anonymous-namespace'::MH_MAGMA_FLOWSplashOperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void MH_MAGMA_FLOWSplashOperation(const struct `anonymous-namespace'::MH_MAGMA_FLOWSplashOperation &)
  public void MH_MAGMA_FLOWSplashOperation(class CNpcHomun *, const int, const int, const int, const int)
  /* this+0x4 */ class CNpcHomun * m_Homun
  /* this+0x8 */ const int m_SKLevel
  /* this+0xc */ const int m_Xpos
  /* this+0x10 */ const int m_Ypos
  /* this+0x14 */ const int m_ATKPercent
}

struct `anonymous-namespace'::MH_XENO_SLASHEROperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void MH_XENO_SLASHEROperation(const struct `anonymous-namespace'::MH_XENO_SLASHEROperation &)
  public void MH_XENO_SLASHEROperation(class CNpcHomun *, const int, const int, const int, const int, const int)
  /* this+0x4 */ class CNpcHomun * m_Homun
  /* this+0x8 */ const int m_SKLevel
  /* this+0xc */ const int m_Xpos
  /* this+0x10 */ const int m_Ypos
  /* this+0x14 */ const int m_SKProperty
  /* this+0x18 */ const int m_MATKPercent
}

struct `anonymous-namespace'::MI_ECHOSONGoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void MI_ECHOSONGoperation(const struct `anonymous-namespace'::MI_ECHOSONGoperation &)
  public void MI_ECHOSONGoperation(const int, const int, const int)
  /* this+0x4 */ const int m_skLevel
  /* this+0x8 */ const int m_LifeTM
  /* this+0xc */ const int m_PlusDEFpercent
}

struct `anonymous-namespace'::MI_RUSH_WINDMILLoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void MI_RUSH_WINDMILLoperation(const struct `anonymous-namespace'::MI_RUSH_WINDMILLoperation &)
  public void MI_RUSH_WINDMILLoperation(const int, const int, const int)
  /* this+0x4 */ const int m_SKLevel
  /* this+0x8 */ const int m_LifeTM
  /* this+0xc */ const int m_AddItemATKAmount
}

class `anonymous-namespace'::MySTMTHandler {
  public const bool isOK()
  public void MySTMTHandler(void *)
  public void ~MySTMTHandler()
  public void * operator void *()
  public short ExecDirect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public short BindCol(unsigned short, short, void *, long, long *)
  public short Fetch()
  /* this+0x0 */ void * m_hSTMT
  /* this+0x4 */ bool m_bOK
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::N3ObjectIDGenerator {
    *
  public unsigned int operator()()
  public void N3ObjectIDGenerator(const class `anonymous-namespace'::N3ObjectIDGenerator &)
  public void N3ObjectIDGenerator()
  public void ~N3ObjectIDGenerator()
  /* this+0x4 */ unsigned int m_Num
  public class `anonymous-namespace'::N3ObjectIDGenerator & operator=(const class `anonymous-namespace'::N3ObjectIDGenerator &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::NC_ARMSCANNONoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void NC_ARMSCANNONoperation(const struct `anonymous-namespace'::NC_ARMSCANNONoperation &)
  public void NC_ARMSCANNONoperation(class CPC *)
  public void final(const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~NC_ARMSCANNONoperation()
  public struct `anonymous-namespace'::NC_ARMSCANNONoperation & operator=(const struct `anonymous-namespace'::NC_ARMSCANNONoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::NC_MAGNETICFIELDoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void NC_MAGNETICFIELDoperation(const struct `anonymous-namespace'::NC_MAGNETICFIELDoperation &)
  public void NC_MAGNETICFIELDoperation(class CPC *, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_EFSTLifeTM
  /* this+0xc */ const int m_SKLevel
  /* this+0x10 */ const int m_ReduceSPAmountPerSecond
}

struct `anonymous-namespace'::NPC_WIDEBODYBURNNINGoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void NPC_WIDEBODYBURNNINGoperation(const struct `anonymous-namespace'::NPC_WIDEBODYBURNNINGoperation &)
  public void NPC_WIDEBODYBURNNINGoperation(class CNPC *)
  /* this+0x4 */ class CNPC * m_cpSpellNPC
  public struct `anonymous-namespace'::NPC_WIDEBODYBURNNINGoperation & operator=(const struct `anonymous-namespace'::NPC_WIDEBODYBURNNINGoperation &)
}

struct `anonymous-namespace'::NPC_WIDEFROSTMISTYoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void NPC_WIDEFROSTMISTYoperation(const struct `anonymous-namespace'::NPC_WIDEFROSTMISTYoperation &)
  public void NPC_WIDEFROSTMISTYoperation(class CNPC *)
  /* this+0x4 */ class CNPC * m_cpSpellNPC
  public struct `anonymous-namespace'::NPC_WIDEFROSTMISTYoperation & operator=(const struct `anonymous-namespace'::NPC_WIDEFROSTMISTYoperation &)
}

struct `anonymous-namespace'::NPC_WIDEHEALTHFEARoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void NPC_WIDEHEALTHFEARoperation(const struct `anonymous-namespace'::NPC_WIDEHEALTHFEARoperation &)
  public void NPC_WIDEHEALTHFEARoperation(class CNPC *)
  /* this+0x4 */ class CNPC * m_cpSpellNPC
  public struct `anonymous-namespace'::NPC_WIDEHEALTHFEARoperation & operator=(const struct `anonymous-namespace'::NPC_WIDEHEALTHFEARoperation &)
}

struct `anonymous-namespace'::NPC_WIDESIRENoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void NPC_WIDESIRENoperation(const struct `anonymous-namespace'::NPC_WIDESIRENoperation &)
  public void NPC_WIDESIRENoperation(class CNPC *, const int, const int)
  /* this+0x4 */ class CNPC * m_cpSpellNPC
  /* this+0x8 */ const int m_SkillLevel
  /* this+0xc */ const int m_LifeTM
}

struct `anonymous-namespace'::NPC_WIDE_COLDoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void NPC_WIDE_COLDoperation(const struct `anonymous-namespace'::NPC_WIDE_COLDoperation &)
  public void NPC_WIDE_COLDoperation(class CNPC *, const int)
  /* this+0x4 */ class CNPC * m_cpSpellNPC
  /* this+0x8 */ const int m_LifeTM
}

struct `anonymous-namespace'::NPC_WIDE_DEEP_SLEEPoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void NPC_WIDE_DEEP_SLEEPoperation(const struct `anonymous-namespace'::NPC_WIDE_DEEP_SLEEPoperation &)
  public void NPC_WIDE_DEEP_SLEEPoperation(class CNPC *, const int)
  /* this+0x4 */ class CNPC * m_cpSpellNPC
  /* this+0x8 */ const int m_LifeTM
}

struct `anonymous-namespace'::OB_OBOROGENSOU_TRANSITION_ATKoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public bool final(const int)
  public void OB_OBOROGENSOU_TRANSITION_ATKoperation(const struct `anonymous-namespace'::OB_OBOROGENSOU_TRANSITION_ATKoperation &)
  public void OB_OBOROGENSOU_TRANSITION_ATKoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~OB_OBOROGENSOU_TRANSITION_ATKoperation()
  public struct `anonymous-namespace'::OB_OBOROGENSOU_TRANSITION_ATKoperation & operator=(const struct `anonymous-namespace'::OB_OBOROGENSOU_TRANSITION_ATKoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::RA_ARROWSTORMoperation {
  SkillStuff::Operation_BT, offset = 0x0

    public void operator()(class CActor *)
  public void RA_ARROWSTORMoperation(const struct `anonymous-namespace'::RA_ARROWSTORMoperation &)
  public void RA_ARROWSTORMoperation(class CPC *, const int, const int, const short, const short)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SKLEVEL
  /* this+0xc */ const int m_ATKPERCENT
  /* this+0x10 */ const short m_xPos
  /* this+0x12 */ const short m_yPos
}

struct `anonymous-namespace'::RA_CLUSTERBOMBoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void RA_CLUSTERBOMBoperation(const struct `anonymous-namespace'::RA_CLUSTERBOMBoperation &)
  public void RA_CLUSTERBOMBoperation(class CPC *)
  public void final(const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~RA_CLUSTERBOMBoperation()
  public struct `anonymous-namespace'::RA_CLUSTERBOMBoperation & operator=(const struct `anonymous-namespace'::RA_CLUSTERBOMBoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::RA_COBALTTRAPoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void RA_COBALTTRAPoperation(const struct `anonymous-namespace'::RA_COBALTTRAPoperation &)
  public void RA_COBALTTRAPoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  public struct `anonymous-namespace'::RA_COBALTTRAPoperation & operator=(const struct `anonymous-namespace'::RA_COBALTTRAPoperation &)
}

struct `anonymous-namespace'::RA_ELECTRICSHOCKERoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void RA_ELECTRICSHOCKERoperation(const struct `anonymous-namespace'::RA_ELECTRICSHOCKERoperation &)
  public void RA_ELECTRICSHOCKERoperation(class CPC *, const int, const int, const struct PACKET_ZC_NOTIFY_SKILL2)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_DefaultLifeTM
  /* this+0xc */ const int m_ReduceSPpercentPerSEC
  /* this+0x10 */ struct PACKET_ZC_NOTIFY_SKILL2 m_PACKET_ZC_NOTIFY_SKILL2

}

struct `anonymous-namespace'::RA_MAGENTATRAPoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void RA_MAGENTATRAPoperation(const struct `anonymous-namespace'::RA_MAGENTATRAPoperation &)
  public void RA_MAGENTATRAPoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  public struct `anonymous-namespace'::RA_MAGENTATRAPoperation & operator=(const struct `anonymous-namespace'::RA_MAGENTATRAPoperation &)
}

struct `anonymous-namespace'::RA_MAIZETRAPoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void RA_MAIZETRAPoperation(const struct `anonymous-namespace'::RA_MAIZETRAPoperation &)
  public void RA_MAIZETRAPoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  public struct `anonymous-namespace'::RA_MAIZETRAPoperation & operator=(const struct `anonymous-namespace'::RA_MAIZETRAPoperation &)
}

struct `anonymous-namespace'::RA_VERDURETRAPoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void RA_VERDURETRAPoperation(const struct `anonymous-namespace'::RA_VERDURETRAPoperation &)
  public void RA_VERDURETRAPoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  public struct `anonymous-namespace'::RA_VERDURETRAPoperation & operator=(const struct `anonymous-namespace'::RA_VERDURETRAPoperation &)
}

struct `anonymous-namespace'::RK_IGNITIONBREAKoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void RK_IGNITIONBREAKoperation(const struct `anonymous-namespace'::RK_IGNITIONBREAKoperation &)
  public void RK_IGNITIONBREAKoperation(class CActor *, const int, const int, const int, const int, const int, const int, const int)
  /* this+0x4 */ class CActor * m_cpSpellPlayer
  /* this+0x8 */ const int m_originXpos
  /* this+0xc */ const int m_originYpos
  /* this+0x10 */ const int m_SKlevel
  /* this+0x14 */ const int m_innerAtkPercent
  /* this+0x18 */ const int m_middleAtkPercent
  /* this+0x1c */ const int m_outerAtkPercent
  /* this+0x20 */ const int m_weaponPropertyAtkPercent
}

struct `anonymous-namespace'::SC_BODYPAINToperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SC_BODYPAINToperation(const struct `anonymous-namespace'::SC_BODYPAINToperation &)
  public void SC_BODYPAINToperation(class CPC *)
  public void final(const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~SC_BODYPAINToperation()
  public struct `anonymous-namespace'::SC_BODYPAINToperation & operator=(const struct `anonymous-namespace'::SC_BODYPAINToperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::SC_FATALMENACEoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SC_FATALMENACEoperation(const struct `anonymous-namespace'::SC_FATALMENACEoperation &)
  public void SC_FATALMENACEoperation(class CPC *)
  public void final(const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~SC_FATALMENACEoperation()
  public struct `anonymous-namespace'::SC_FATALMENACEoperation & operator=(const struct `anonymous-namespace'::SC_FATALMENACEoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::SO_ARRULLOoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SO_ARRULLOoperation(const struct `anonymous-namespace'::SO_ARRULLOoperation &)
  public void SO_ARRULLOoperation(class CPC *)
  public void final(const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~SO_ARRULLOoperation()
  public struct `anonymous-namespace'::SO_ARRULLOoperation & operator=(const struct `anonymous-namespace'::SO_ARRULLOoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::SO_CLOUD_KILLoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SO_CLOUD_KILLoperation(const struct `anonymous-namespace'::SO_CLOUD_KILLoperation &)
  public void SO_CLOUD_KILLoperation(class CPC *)
  public void final(const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~SO_CLOUD_KILLoperation()
  public struct `anonymous-namespace'::SO_CLOUD_KILLoperation & operator=(const struct `anonymous-namespace'::SO_CLOUD_KILLoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::SO_DIAMONDDUSToperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SO_DIAMONDDUSToperation(const struct `anonymous-namespace'::SO_DIAMONDDUSToperation &)
  public void SO_DIAMONDDUSToperation(class CPC *)
  public void final(const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~SO_DIAMONDDUSToperation()
  public struct `anonymous-namespace'::SO_DIAMONDDUSToperation & operator=(const struct `anonymous-namespace'::SO_DIAMONDDUSToperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::SO_EARTHGRAVEoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SO_EARTHGRAVEoperation(const struct `anonymous-namespace'::SO_EARTHGRAVEoperation &)
  public void SO_EARTHGRAVEoperation(class CPC *)
  public void final(const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~SO_EARTHGRAVEoperation()
  public struct `anonymous-namespace'::SO_EARTHGRAVEoperation & operator=(const struct `anonymous-namespace'::SO_EARTHGRAVEoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::SO_POISON_BUSTERoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void final(const int, const int, const int, const int)
  public void SO_POISON_BUSTERoperation(const struct `anonymous-namespace'::SO_POISON_BUSTERoperation &)
  public void SO_POISON_BUSTERoperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~SO_POISON_BUSTERoperation()
  public struct `anonymous-namespace'::SO_POISON_BUSTERoperation & operator=(const struct `anonymous-namespace'::SO_POISON_BUSTERoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::SO_VARETYR_SPEARoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SO_VARETYR_SPEARoperation(const struct `anonymous-namespace'::SO_VARETYR_SPEARoperation &)
  public void SO_VARETYR_SPEARoperation(class CPC *)
  public int final(const int, const int, const int, const unsigned long, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~SO_VARETYR_SPEARoperation()
  public struct `anonymous-namespace'::SO_VARETYR_SPEARoperation & operator=(const struct `anonymous-namespace'::SO_VARETYR_SPEARoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::SPORE_EXPLOSIONoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SPORE_EXPLOSIONoperation(const struct `anonymous-namespace'::SPORE_EXPLOSIONoperation &)
  public void SPORE_EXPLOSIONoperation(class CActor *, class CPC *, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class CActor * m_cpOriginActor
  /* this+0xc */ const int m_SpellLevel
  /* this+0x10 */ const int m_AtkPercent
}

struct `anonymous-namespace'::SR_HOWLINGOFLIONoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SR_HOWLINGOFLIONoperation(const struct `anonymous-namespace'::SR_HOWLINGOFLIONoperation &)
  public void SR_HOWLINGOFLIONoperation(class CPC *, const int, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SpellPlayerXpos
  /* this+0xc */ const int m_SpellPlayerYpos
  /* this+0x10 */ const int m_SkillLevel
  /* this+0x14 */ const int m_ATKpercent
  /* this+0x18 */ const int m_ApplyFEARpermill
}

struct `anonymous-namespace'::SR_RIDEINLIGHTNINGoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void SR_RIDEINLIGHTNINGoperation(const struct `anonymous-namespace'::SR_RIDEINLIGHTNINGoperation &)
  public void SR_RIDEINLIGHTNINGoperation(class CPC *)
  public void final(const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~SR_RIDEINLIGHTNINGoperation()
  public struct `anonymous-namespace'::SR_RIDEINLIGHTNINGoperation & operator=(const struct `anonymous-namespace'::SR_RIDEINLIGHTNINGoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::WA_MOONLIT_SERENADEoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WA_MOONLIT_SERENADEoperation(const struct `anonymous-namespace'::WA_MOONLIT_SERENADEoperation &)
  public void WA_MOONLIT_SERENADEoperation(const int, const int, const int)
  /* this+0x4 */ const int m_skLevel
  /* this+0x8 */ const int m_LifeTM
  /* this+0xc */ const int m_ItemMATKAmount
}

struct `anonymous-namespace'::WL_COMEToperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void process(const int, const int, const int, const int, const int, const int, const int)
  public void WL_COMEToperation(const struct `anonymous-namespace'::WL_COMEToperation &)
  public void WL_COMEToperation(class CPC *)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetList

  public void ~WL_COMEToperation()
  public struct `anonymous-namespace'::WL_COMEToperation & operator=(const struct `anonymous-namespace'::WL_COMEToperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::WL_CRIMSONROCKoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WL_CRIMSONROCKoperation(const struct `anonymous-namespace'::WL_CRIMSONROCKoperation &)
  public void WL_CRIMSONROCKoperation(class CPC *, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SkillLevel
  /* this+0xc */ const int m_plusATTPowerPercent
  /* this+0x10 */ const int m_originXpos
  /* this+0x14 */ const int m_originYpos
}

struct `anonymous-namespace'::WM_BEYOND_OF_WARCRYoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_BEYOND_OF_WARCRYoperation(const struct `anonymous-namespace'::WM_BEYOND_OF_WARCRYoperation &)
  public void WM_BEYOND_OF_WARCRYoperation(class CPC *, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SKLevel
  /* this+0xc */ const int m_LifeTM
  /* this+0x10 */ const int m_ReduceMHPpercent
  /* this+0x14 */ const int m_memberWANDERERorMINSTRELcnt
}

struct `anonymous-namespace'::WM_DANCE_WITH_WUGoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_DANCE_WITH_WUGoperation(const struct `anonymous-namespace'::WM_DANCE_WITH_WUGoperation &)
  public void WM_DANCE_WITH_WUGoperation(const int, const int, const int, const int, const int)
  /* this+0x4 */ const int m_skLevel
  /* this+0x8 */ const int m_LifeTM
  /* this+0xc */ const int m_SkillFixedCastingReducePercent
  /* this+0x10 */ const int m_ASPDHastePercent
  /* this+0x14 */ const int m_chorusMemberNum
}

struct `anonymous-namespace'::WM_GREAT_ECHOoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_GREAT_ECHOoperation(const struct `anonymous-namespace'::WM_GREAT_ECHOoperation &)
  public void WM_GREAT_ECHOoperation(class CPC *)
  public void final(const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~WM_GREAT_ECHOoperation()
  public struct `anonymous-namespace'::WM_GREAT_ECHOoperation & operator=(const struct `anonymous-namespace'::WM_GREAT_ECHOoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::WM_LERADS_DEWoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_LERADS_DEWoperation(const struct `anonymous-namespace'::WM_LERADS_DEWoperation &)
  public void WM_LERADS_DEWoperation()
  public void final(const int, const int, const int)
  /* this+0x4 */ class std::vector<CPC *,std::allocator<CPC *> > m_TargetPlayers

  public void ~WM_LERADS_DEWoperation()
  public struct `anonymous-namespace'::WM_LERADS_DEWoperation & operator=(const struct `anonymous-namespace'::WM_LERADS_DEWoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::WM_LULLABY_DEEPSLEEPoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_LULLABY_DEEPSLEEPoperation(const struct `anonymous-namespace'::WM_LULLABY_DEEPSLEEPoperation &)
  public void WM_LULLABY_DEEPSLEEPoperation(class CPC *, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SuccessPercent
  /* this+0xc */ const int m_skLevel
  /* this+0x10 */ const int m_LifeTM
}

struct `anonymous-namespace'::WM_MELODYOFSINKoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_MELODYOFSINKoperation(const struct `anonymous-namespace'::WM_MELODYOFSINKoperation &)
  public void WM_MELODYOFSINKoperation(class CPC *, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_SKLevel
  /* this+0xc */ const int m_LifeTM
  /* this+0x10 */ const int m_ReduceSPPercent
  /* this+0x14 */ const int m_ReduceINTAmount
}

struct `anonymous-namespace'::WM_SATURDAY_NIGHT_FEVERoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_SATURDAY_NIGHT_FEVERoperation(const struct `anonymous-namespace'::WM_SATURDAY_NIGHT_FEVERoperation &)
  public void WM_SATURDAY_NIGHT_FEVERoperation(const int, const int)
  public void final(class CPC *)
  /* this+0x4 */ const int m_LifeTM
  /* this+0x8 */ const int m_Level
  /* this+0xc */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~WM_SATURDAY_NIGHT_FEVERoperation()
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::WM_SIRCLEOFNATUREoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_SIRCLEOFNATUREoperation(const struct `anonymous-namespace'::WM_SIRCLEOFNATUREoperation &)
  public void WM_SIRCLEOFNATUREoperation(class CPC *, const int, const int, const int, const int)
  /* this+0x4 */ class CPC * m_cpSpellPlayer
  /* this+0x8 */ const int m_skLevel
  /* this+0xc */ const int m_LifeTM
  /* this+0x10 */ const int m_ReduceSPamount
  /* this+0x14 */ const int m_RecoveryHPamount
}

struct `anonymous-namespace'::WM_SONG_OF_MANAoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_SONG_OF_MANAoperation(const struct `anonymous-namespace'::WM_SONG_OF_MANAoperation &)
  public void WM_SONG_OF_MANAoperation()
  public void final(const int, const int, const int)
  /* this+0x4 */ class std::vector<CPC *,std::allocator<CPC *> > m_TargetMemberPlayers

  public void ~WM_SONG_OF_MANAoperation()
  public struct `anonymous-namespace'::WM_SONG_OF_MANAoperation & operator=(const struct `anonymous-namespace'::WM_SONG_OF_MANAoperation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::WM_UNLIMITED_HUMMING_VOICEoperation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void WM_UNLIMITED_HUMMING_VOICEoperation(const struct `anonymous-namespace'::WM_UNLIMITED_HUMMING_VOICEoperation &)
  public void WM_UNLIMITED_HUMMING_VOICEoperation()
  public void final(const int, const int, int)
  /* this+0x4 */ class std::vector<CPC *,std::allocator<CPC *> > m_TargetPlayers

  public void ~WM_UNLIMITED_HUMMING_VOICEoperation()
  public struct `anonymous-namespace'::WM_UNLIMITED_HUMMING_VOICEoperation & operator=(const struct `anonymous-namespace'::WM_UNLIMITED_HUMMING_VOICEoperation &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcApp {
    *
  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > Startup()
  public void Cleanup()
  public void lcApp(const class `anonymous-namespace'::lcApp &)
  public void lcApp()
  public void ~lcApp()
  /* this+0x4 */ void * m_hMutex
  /* this+0x8 */ unsigned int m_wTimerRes
  public class `anonymous-namespace'::lcApp & operator=(const class `anonymous-namespace'::lcApp &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcBroadCastEDD {
  CBroadCastFunc, offset = 0x0

  public void operator()(class CPC *)
  public void lcBroadCastEDD(const class `anonymous-namespace'::lcBroadCastEDD &)
  public void lcBroadCastEDD()
  public void ~lcBroadCastEDD()
  public class `anonymous-namespace'::lcBroadCastEDD & operator=(const class `anonymous-namespace'::lcBroadCastEDD &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcC2CharacterServerClientAuthTimeOut {
  N3SchedulerTask<C2CharacterServerClient>, offset = 0x0

  public bool operator()(class C2CharacterServerClient *)
  public void lcC2CharacterServerClientAuthTimeOut(const class `anonymous-namespace'::lcC2CharacterServerClientAuthTimeOut &)
  public void lcC2CharacterServerClientAuthTimeOut()
  public void ~lcC2CharacterServerClientAuthTimeOut()
  public class `anonymous-namespace'::lcC2CharacterServerClientAuthTimeOut & operator=(class `anonymous-namespace'::lcC2CharacterServerClientAuthTimeOut &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcC2CharacterServerClientLivePing {
  N3SchedulerTask<C2CharacterServerClient>, offset = 0x0

  public bool operator()(class C2CharacterServerClient *)
  public void lcC2CharacterServerClientLivePing(const class `anonymous-namespace'::lcC2CharacterServerClientLivePing &)
  public void lcC2CharacterServerClientLivePing()
  public void ~lcC2CharacterServerClientLivePing()
    public class `anonymous-namespace'::lcC2CharacterServerClientLivePing & operator=(class `anonymous-namespace'::lcC2CharacterServerClientLivePing &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcC2ClientConnect {
  N3SchedulerTask<C2ClientMgr>, offset = 0x0

  public bool operator()(class C2ClientMgr *)
  public void lcC2ClientConnect(const class `anonymous-namespace'::lcC2ClientConnect &)
  public void lcC2ClientConnect(class C2Client *, const int)
  public void ~lcC2ClientConnect()
  /* this+0xc */ class C2Client * m_cpClient
  public class `anonymous-namespace'::lcC2ClientConnect & operator=(class `anonymous-namespace'::lcC2ClientConnect &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcC2InterServerClientAuthTimeOut {
  N3SchedulerTask<C2InterServerClient>, offset = 0x0

  public bool operator()(class C2InterServerClient *)
  public void lcC2InterServerClientAuthTimeOut(const class `anonymous-namespace'::lcC2InterServerClientAuthTimeOut &)
  public void lcC2InterServerClientAuthTimeOut()
  public void ~lcC2InterServerClientAuthTimeOut()
  public class `anonymous-namespace'::lcC2InterServerClientAuthTimeOut & operator=(class `anonymous-namespace'::lcC2InterServerClientAuthTimeOut &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcC2InterServerClientLivePing {
  N3SchedulerTask<C2InterServerClient>, offset = 0x0

  public bool operator()(class C2InterServerClient *)
  public void lcC2InterServerClientLivePing(const class `anonymous-namespace'::lcC2InterServerClientLivePing &)
  public void lcC2InterServerClientLivePing()
  public void ~lcC2InterServerClientLivePing()
    public class `anonymous-namespace'::lcC2InterServerClientLivePing & operator=(class `anonymous-namespace'::lcC2InterServerClientLivePing &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcC2InterServerClientState {
  N3SchedulerTask<C2InterServerClient>, offset = 0x0

  public bool operator()(class C2InterServerClient *)
  public void lcC2InterServerClientState(const class `anonymous-namespace'::lcC2InterServerClientState &)
  public void lcC2InterServerClientState()
  public void ~lcC2InterServerClientState()
    public class `anonymous-namespace'::lcC2InterServerClientState & operator=(class `anonymous-namespace'::lcC2InterServerClientState &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcDBHandler {
  public void lcDBHandler(void * const)
  public void ~lcDBHandler()
  public void * operator void *()
  public bool isOK()
  /* this+0x0 */ void * m_hstmt
  /* this+0x4 */ bool m_bOK
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcDataTransferKeyGenerator {
    *
  public void lcDataTransferKeyGenerator(const class `anonymous-namespace'::lcDataTransferKeyGenerator &)
  public void lcDataTransferKeyGenerator()
  public void ~lcDataTransferKeyGenerator()
  public unsigned int operator()()
  /* this+0x4 */ unsigned int m_Cnt
  public class `anonymous-namespace'::lcDataTransferKeyGenerator & operator=(const class `anonymous-namespace'::lcDataTransferKeyGenerator &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcLogonPermitADBWorkPtr {
  public void Reset()
  public void lcLogonPermitADBWorkPtr(class CLogonPermitADBWork *)
  public void ~lcLogonPermitADBWorkPtr()
  /* this+0x0 */ class CLogonPermitADBWork * m_cpLogonPermitDBWork
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcMyQuestData {
    *
  /* this+0x4 */ struct ALL_QUEST_LIST2_INFO info

  /* this+0x14 */ class std::vector<MISSION_HUNT_INFO,std::allocator<MISSION_HUNT_INFO> > huntingInfo

  public void lcMyQuestData(const class `anonymous-namespace'::lcMyQuestData &)
  public void lcMyQuestData()
  public void ~lcMyQuestData()
  public class `anonymous-namespace'::lcMyQuestData & operator=(const class `anonymous-namespace'::lcMyQuestData &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcMySplashCH {
    *
  public void lcMySplashCH(const class `anonymous-namespace'::lcMySplashCH &)
  public void lcMySplashCH(class CCharacter *, int)
  public void ~lcMySplashCH()
  /* this+0x4 */ class CCharacter * m_cpCH
  /* this+0x8 */ int m_CellIndex
  public class `anonymous-namespace'::lcMySplashCH & operator=(const class `anonymous-namespace'::lcMySplashCH &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcMySplashCell {
    *
  public bool operator==(const class `anonymous-namespace'::lcMySplashCell &)
  public void lcMySplashCell(const class `anonymous-namespace'::lcMySplashCell &)
  public void lcMySplashCell(const int, const int, const int)
  public void ~lcMySplashCell()
  /* this+0x4 */ int m_cellXpos
  /* this+0x8 */ int m_cellYpos
  /* this+0xc */ int m_Index
  public class `anonymous-namespace'::lcMySplashCell & operator=(const class `anonymous-namespace'::lcMySplashCell &)
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier {
    *
  public struct std::pair<int,bool> operator()(class CPC *, class CCharacter *, const int, const int)
  public void lcPhysicsBaseATKPowerModifier(const class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier &)
  public void lcPhysicsBaseATKPowerModifier()
  public void ~lcPhysicsBaseATKPowerModifier()
  public class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier & operator=(const class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier_LK_SPIRALPIERCE {
  `anonymous-namespace'::lcPhysicsBaseATKPowerModifier, offset = 0x0

  public struct std::pair<int,bool> operator()(class CPC *, class CCharacter *, const int, const int)
  public void lcPhysicsBaseATKPowerModifier_LK_SPIRALPIERCE(const class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier_LK_SPIRALPIERCE &)
  public void lcPhysicsBaseATKPowerModifier_LK_SPIRALPIERCE()
  public void ~lcPhysicsBaseATKPowerModifier_LK_SPIRALPIERCE()
  public class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier_LK_SPIRALPIERCE & operator=(const class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier_LK_SPIRALPIERCE &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier_WUGATTACK {
  `anonymous-namespace'::lcPhysicsBaseATKPowerModifier, offset = 0x0

  public struct std::pair<int,bool> operator()(class CPC *, class CCharacter *, const int, const int)
  public void lcPhysicsBaseATKPowerModifier_WUGATTACK(const class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier_WUGATTACK &)
  public void lcPhysicsBaseATKPowerModifier_WUGATTACK()
  public void ~lcPhysicsBaseATKPowerModifier_WUGATTACK()
  public class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier_WUGATTACK & operator=(const class `anonymous-namespace'::lcPhysicsBaseATKPowerModifier_WUGATTACK &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::square_area_atk_operation {
  SkillStuff::Operation_BT, offset = 0x0

  public void operator()(class CActor *)
  public void square_area_atk_operation(const struct `anonymous-namespace'::square_area_atk_operation &)
  public void square_area_atk_operation(class CNpcElemental *)
  public void final(struct SKILLATTACK_MSG &, const int)
  /* this+0x4 */ class CNpcElemental * m_cpSpellElemental
  /* this+0x8 */ class std::vector<CActor *,std::allocator<CActor *> > m_TargetActors

  public void ~square_area_atk_operation()
  public struct `anonymous-namespace'::square_area_atk_operation & operator=(const struct `anonymous-namespace'::square_area_atk_operation &)
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::stMergItemList {
  /* this+0x0 */ unsigned short wITID
  /* this+0x2 */ short sIndex
  public int operator==(const struct `anonymous-namespace'::stMergItemList &)
  public void stMergItemList(const unsigned short, const short)
}

struct `anonymous-namespace'::stUnlockCashPoint {
  public void stUnlockCashPoint(class CPCPacketHandler *)
  public void ~stUnlockCashPoint()
  /* this+0x0 */ class CPCPacketHandler * m_pPC
  /* this+0x4 */ bool m_bIsModified
  public void SetNotModified()
  public void * __vecDelDtor(unsigned int)
}

struct `anonymous-namespace'::tagDispatchPacketHistory {
  /* this+0x0 */ struct _SYSTEMTIME Date

  /* this+0x10 */ unsigned int AID
  /* this+0x14 */ unsigned int GID
  /* this+0x18 */ int Header
}

struct `anonymous-namespace'::tagEL_ACTION {
  /* this+0x0 */ enum ElementalStuff::enumKind Kind
  /* this+0x4 */ enum ElementalStuff::enumScale Scale
  /* this+0x8 */ int SKID
  /* this+0xc */ int Level
  /* this+0x10 */ int spCost
  public void tagEL_ACTION(const enum ElementalStuff::enumKind, const enum ElementalStuff::enumScale, const int, const int, const int)
  public bool operator==(const struct `anonymous-namespace'::tagEL_ACTION &)
}

struct `anonymous-namespace'::tagNAsyncDBMgrHistory {
  /* this+0x0 */ struct _SYSTEMTIME Date

  /* this+0x10 */ int Type
  /* this+0x14 */ unsigned int AID
  /* this+0x18 */ unsigned int GID
}

class addrCompare {
  public bool operator()(const struct Addr &, const struct Addr &)
}

struct addrinfo {
  /* this+0x0 */ int ai_flags
  /* this+0x4 */ int ai_family
  /* this+0x8 */ int ai_socktype
  /* this+0xc */ int ai_protocol
  /* this+0x10 */ unsigned int ai_addrlen
  /* this+0x14 */ char * ai_canonname
  /* this+0x18 */ struct sockaddr * ai_addr
  /* this+0x1c */ struct addrinfo * ai_next
}

struct addrinfoW {
  /* this+0x0 */ int ai_flags
  /* this+0x4 */ int ai_family
  /* this+0x8 */ int ai_socktype
  /* this+0xc */ int ai_protocol
  /* this+0x10 */ unsigned int ai_addrlen
  /* this+0x14 */ wchar_t * ai_canonname
  /* this+0x18 */ struct sockaddr * ai_addr
  /* this+0x1c */ struct addrinfoW * ai_next
}

struct addrinfoexA {
  /* this+0x0 */ int ai_flags
  /* this+0x4 */ int ai_family
  /* this+0x8 */ int ai_socktype
  /* this+0xc */ int ai_protocol
  /* this+0x10 */ unsigned int ai_addrlen
  /* this+0x14 */ char * ai_canonname
  /* this+0x18 */ struct sockaddr * ai_addr
  /* this+0x1c */ void * ai_blob
  /* this+0x20 */ unsigned int ai_bloblen
  /* this+0x24 */ struct _GUID * ai_provider
  /* this+0x28 */ struct addrinfoexA * ai_next
}

struct addrinfoexW {
  /* this+0x0 */ int ai_flags
  /* this+0x4 */ int ai_family
  /* this+0x8 */ int ai_socktype
  /* this+0xc */ int ai_protocol
  /* this+0x10 */ unsigned int ai_addrlen
  /* this+0x14 */ wchar_t * ai_canonname
  /* this+0x18 */ struct sockaddr * ai_addr
  /* this+0x1c */ void * ai_blob
  /* this+0x20 */ unsigned int ai_bloblen
  /* this+0x24 */ struct _GUID * ai_provider
  /* this+0x28 */ struct addrinfoexW * ai_next
}

struct cast_key {
  /* this+0x0 */ unsigned long[0x20] xkey
  /* this+0x80 */ int rounds
}

class charNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ char me
  public void charNode(const class charNode &)
  public void charNode(char)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class charNode & operator=(const class charNode &)
}

struct cmsghdr {
  /* this+0x0 */ unsigned long cmsg_len
  /* this+0x4 */ int cmsg_level
  /* this+0x8 */ int cmsg_type
}

struct code {
  /* this+0x0 */ unsigned char op
  /* this+0x1 */ unsigned char bits
  /* this+0x2 */ unsigned short val
}

struct code_page_info {
  /* this+0x0 */ int code_page
  /* this+0x4 */ unsigned short[0x6] mbulinfo
  /* this+0x10 */ unsigned char[0x8][0x4] rgrange
}

struct config_s {
  /* this+0x0 */ unsigned short good_length
  /* this+0x2 */ unsigned short max_lazy
  /* this+0x4 */ unsigned short nice_length
  /* this+0x6 */ unsigned short max_chain
  /* this+0x8 */ function  * func
}

struct ct_data_s {
  /* this+0x0 */ union <unnamed-tag> fc

  /* this+0x2 */ union <unnamed-tag> dl

}

union doubleint {
  /* this+0x0 */ __int64 bigint
  /* this+0x0 */ struct <unnamed-tag> twoints

}

struct errentry {
  /* this+0x0 */ unsigned long oscode
  /* this+0x4 */ int errnocode
}

struct expdesc {
  /* this+0x0 */ enum expkind k
  /* this+0x8 */ union <unnamed-tag> u

  /* this+0x10 */ int t
  /* this+0x14 */ int f
}

struct extraITMInfo {
  /* this+0x0 */ unsigned short id
  /* this+0x2 */ unsigned short num
}

class fatsovector<int> {
  std::vector<int,std::allocator<int> >, offset = 0x0

  public void fatsovector<int>(const class fatsovector<int> &)
  public void fatsovector<int>(const int, const int &, const int &, const int &)
  public void fatsovector<int>(const int, const int &, const int &)
  public void fatsovector<int>(const int, const int &)
  public void fatsovector<int>::fatsovector<int>(const int)
  public class fatsovector<int> & operator=(const class fatsovector<int> &)
  public void fatsovector<int>::~fatsovector<int>()
  public void * __vecDelDtor(unsigned int)
}

struct fd_set {
  /* this+0x0 */ unsigned int fd_count
  /* this+0x4 */ unsigned int[0x40] fd_array
}

struct funtab {
  /* this+0x0 */ unsigned char fnamlen
  /* this+0x1 */ unsigned char fnam
  /* this+0x7 */ unsigned char fuseval
  /* this+0xd */ unsigned char fnumarg
  /* this+0xe */ unsigned char fnumber
}

struct global_State {
  /* this+0x0 */ struct stringtable strt

  /* this+0xc */ function  * frealloc
  /* this+0x10 */ void * ud
  /* this+0x14 */ unsigned char currentwhite
  /* this+0x15 */ unsigned char gcstate
  /* this+0x18 */ int sweepstrgc
  /* this+0x1c */ union GCObject * rootgc
  /* this+0x20 */ union GCObject * * sweepgc
  /* this+0x24 */ union GCObject * gray
  /* this+0x28 */ union GCObject * grayagain
  /* this+0x2c */ union GCObject * weak
  /* this+0x30 */ union GCObject * tmudata
  /* this+0x34 */ struct Mbuffer buff

  /* this+0x40 */ unsigned int GCthreshold
  /* this+0x44 */ unsigned int totalbytes
  /* this+0x48 */ unsigned int estimate
  /* this+0x4c */ unsigned int gcdept
  /* this+0x50 */ int gcpause
  /* this+0x54 */ int gcstepmul
  /* this+0x58 */ function  * panic
  /* this+0x60 */ struct lua_TValue l_registry

  /* this+0x70 */ struct lua_State * mainthread
  /* this+0x78 */ struct UpVal uvhead

  /* this+0x98 */ struct Table *[0x9] mt
  /* this+0xbc */ union TString *[0x11] tmname
}

struct gz_header_s {
  /* this+0x0 */ int text
  /* this+0x4 */ unsigned long time
  /* this+0x8 */ int xflags
  /* this+0xc */ int os
  /* this+0x10 */ unsigned char * extra
  /* this+0x14 */ unsigned int extra_len
  /* this+0x18 */ unsigned int extra_max
  /* this+0x1c */ unsigned char * name
  /* this+0x20 */ unsigned int name_max
  /* this+0x24 */ unsigned char * comment
  /* this+0x28 */ unsigned int comm_max
  /* this+0x2c */ int hcrc
  /* this+0x30 */ int done
}

struct hostent {
  /* this+0x0 */ char * h_name
  /* this+0x4 */ char * * h_aliases
  /* this+0x8 */ short h_addrtype
  /* this+0xa */ short h_length
  /* this+0xc */ char * * h_addr_list
}

struct in_addr {
    /* this+0x0 */ union in_addr::<unnamed-type-S_un> S_un

}

union in_addr::<unnamed-type-S_un> {
    /* this+0x0 */ struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b> S_un_b

    /* this+0x0 */ struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w> S_un_w

  /* this+0x0 */ unsigned long S_addr
}

struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b> {
  /* this+0x0 */ unsigned char s_b1
  /* this+0x1 */ unsigned char s_b2
  /* this+0x2 */ unsigned char s_b3
  /* this+0x3 */ unsigned char s_b4
}

struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w> {
  /* this+0x0 */ unsigned short s_w1
  /* this+0x2 */ unsigned short s_w2
}

struct inflate_state {
  /* this+0x0 */ enum inflate_mode mode
  /* this+0x4 */ int last
  /* this+0x8 */ int wrap
  /* this+0xc */ int havedict
  /* this+0x10 */ int flags
  /* this+0x14 */ unsigned int dmax
  /* this+0x18 */ unsigned long check
  /* this+0x1c */ unsigned long total
  /* this+0x20 */ struct gz_header_s * head
  /* this+0x24 */ unsigned int wbits
  /* this+0x28 */ unsigned int wsize
  /* this+0x2c */ unsigned int whave
  /* this+0x30 */ unsigned int write
  /* this+0x34 */ unsigned char * window
  /* this+0x38 */ unsigned long hold
  /* this+0x3c */ unsigned int bits
  /* this+0x40 */ unsigned int length
  /* this+0x44 */ unsigned int offset
  /* this+0x48 */ unsigned int extra
  /* this+0x4c */ const struct code * lencode
  /* this+0x50 */ const struct code * distcode
  /* this+0x54 */ unsigned int lenbits
  /* this+0x58 */ unsigned int distbits
  /* this+0x5c */ unsigned int ncode
  /* this+0x60 */ unsigned int nlen
  /* this+0x64 */ unsigned int ndist
  /* this+0x68 */ unsigned int have
  /* this+0x6c */ struct code * next
  /* this+0x70 */ unsigned short[0x140] lens
  /* this+0x2f0 */ unsigned short[0x120] work
  /* this+0x530 */ struct code[0x800] codes
}

struct internal_state {
  /* this+0x0 */ struct z_stream_s * strm
  /* this+0x4 */ int status
  /* this+0x8 */ unsigned char * pending_buf
  /* this+0xc */ unsigned long pending_buf_size
  /* this+0x10 */ unsigned char * pending_out
  /* this+0x14 */ unsigned int pending
  /* this+0x18 */ int wrap
  /* this+0x1c */ struct gz_header_s * gzhead
  /* this+0x20 */ unsigned int gzindex
  /* this+0x24 */ unsigned char method
  /* this+0x28 */ int last_flush
  /* this+0x2c */ unsigned int w_size
  /* this+0x30 */ unsigned int w_bits
  /* this+0x34 */ unsigned int w_mask
  /* this+0x38 */ unsigned char * window
  /* this+0x3c */ unsigned long window_size
  /* this+0x40 */ unsigned short * prev
  /* this+0x44 */ unsigned short * head
  /* this+0x48 */ unsigned int ins_h
  /* this+0x4c */ unsigned int hash_size
  /* this+0x50 */ unsigned int hash_bits
  /* this+0x54 */ unsigned int hash_mask
  /* this+0x58 */ unsigned int hash_shift
  /* this+0x5c */ long block_start
  /* this+0x60 */ unsigned int match_length
  /* this+0x64 */ unsigned int prev_match
  /* this+0x68 */ int match_available
  /* this+0x6c */ unsigned int strstart
  /* this+0x70 */ unsigned int match_start
  /* this+0x74 */ unsigned int lookahead
  /* this+0x78 */ unsigned int prev_length
  /* this+0x7c */ unsigned int max_chain_length
  /* this+0x80 */ unsigned int max_lazy_match
  /* this+0x84 */ int level
  /* this+0x88 */ int strategy
  /* this+0x8c */ unsigned int good_match
  /* this+0x90 */ int nice_match
  /* this+0x94 */ struct ct_data_s[0x23d] dyn_ltree
  /* this+0x988 */ struct ct_data_s[0x3d] dyn_dtree
  /* this+0xa7c */ struct ct_data_s[0x27] bl_tree
  /* this+0xb18 */ struct tree_desc_s l_desc

  /* this+0xb24 */ struct tree_desc_s d_desc

  /* this+0xb30 */ struct tree_desc_s bl_desc

  /* this+0xb3c */ unsigned short[0x10] bl_count
  /* this+0xb5c */ int[0x23d] heap
  /* this+0x1450 */ int heap_len
  /* this+0x1454 */ int heap_max
  /* this+0x1458 */ unsigned char[0x23d] depth
  /* this+0x1698 */ unsigned char * l_buf
  /* this+0x169c */ unsigned int lit_bufsize
  /* this+0x16a0 */ unsigned int last_lit
  /* this+0x16a4 */ unsigned short * d_buf
  /* this+0x16a8 */ unsigned long opt_len
  /* this+0x16ac */ unsigned long static_len
  /* this+0x16b0 */ unsigned int matches
  /* this+0x16b4 */ int last_eob_len
  /* this+0x16b8 */ unsigned short bi_buf
  /* this+0x16bc */ int bi_valid
}

struct ioinfo {
  /* this+0x0 */ int osfhnd
  /* this+0x4 */ char osfile
  /* this+0x5 */ char pipech
  /* this+0x8 */ int lockinitflag
  /* this+0xc */ struct _RTL_CRITICAL_SECTION lock

  /* this(bf)+0x24:0x0 len(0x7) */ char textmode
  /* this(bf)+0x24:0x7 len(0x1) */ char unicode
  /* this+0x25 */ char[0x2] pipech2
  /* this+0x28 */ __int64 startpos
  /* this+0x30 */ int utf8translations
  /* this+0x34 */ char dbcsBuffer
  /* this+0x38 */ int dbcsBufferUsed
}

struct joyinfo_tag {
  /* this+0x0 */ unsigned int wXpos
  /* this+0x4 */ unsigned int wYpos
  /* this+0x8 */ unsigned int wZpos
  /* this+0xc */ unsigned int wButtons
}

struct joyinfoex_tag {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long dwXpos
  /* this+0xc */ unsigned long dwYpos
  /* this+0x10 */ unsigned long dwZpos
  /* this+0x14 */ unsigned long dwRpos
  /* this+0x18 */ unsigned long dwUpos
  /* this+0x1c */ unsigned long dwVpos
  /* this+0x20 */ unsigned long dwButtons
  /* this+0x24 */ unsigned long dwButtonNumber
  /* this+0x28 */ unsigned long dwPOV
  /* this+0x2c */ unsigned long dwReserved1
  /* this+0x30 */ unsigned long dwReserved2
}

struct lconv {
  /* this+0x0 */ char * decimal_point
  /* this+0x4 */ char * thousands_sep
  /* this+0x8 */ char * grouping
  /* this+0xc */ char * int_curr_symbol
  /* this+0x10 */ char * currency_symbol
  /* this+0x14 */ char * mon_decimal_point
  /* this+0x18 */ char * mon_thousands_sep
  /* this+0x1c */ char * mon_grouping
  /* this+0x20 */ char * positive_sign
  /* this+0x24 */ char * negative_sign
  /* this+0x28 */ char int_frac_digits
  /* this+0x29 */ char frac_digits
  /* this+0x2a */ char p_cs_precedes
  /* this+0x2b */ char p_sep_by_space
  /* this+0x2c */ char n_cs_precedes
  /* this+0x2d */ char n_sep_by_space
  /* this+0x2e */ char p_sign_posn
  /* this+0x2f */ char n_sign_posn
  /* this+0x30 */ wchar_t * _W_decimal_point
  /* this+0x34 */ wchar_t * _W_thousands_sep
  /* this+0x38 */ wchar_t * _W_int_curr_symbol
  /* this+0x3c */ wchar_t * _W_currency_symbol
  /* this+0x40 */ wchar_t * _W_mon_decimal_point
  /* this+0x44 */ wchar_t * _W_mon_thousands_sep
  /* this+0x48 */ wchar_t * _W_positive_sign
  /* this+0x4c */ wchar_t * _W_negative_sign
}

struct linger {
  /* this+0x0 */ unsigned short l_onoff
  /* this+0x2 */ unsigned short l_linger
}

struct localeinfo_struct {
  /* this+0x0 */ struct threadlocaleinfostruct * locinfo
  /* this+0x4 */ struct threadmbcinfostruct * mbcinfo
}

class fatsovector<unsigned long> {
  std::vector<unsigned long,std::allocator<unsigned long> >, offset = 0x0

  public void fatsovector<unsigned long>::fatsovector<unsigned long>(const class fatsovector<unsigned long> &)
  public void fatsovector<unsigned long>(const int, const unsigned long &, const unsigned long &, const unsigned long &)
  public void fatsovector<unsigned long>(const int, const unsigned long &, const unsigned long &)
  public void fatsovector<unsigned long>::fatsovector<unsigned long>(const int, const unsigned long &)
  public void fatsovector<unsigned long>(const int)
  public class fatsovector<unsigned long> & operator=(const class fatsovector<unsigned long> &)
  public void fatsovector<unsigned long>::~fatsovector<unsigned long>()
  public void * __vecDelDtor(unsigned int)
}

struct luaL_Buffer {
  /* this+0x0 */ char * p
  /* this+0x4 */ int lvl
  /* this+0x8 */ struct lua_State * L
  /* this+0xc */ char[0x200] buffer
}

struct luaL_Reg {
  /* this+0x0 */ const char * name
  /* this+0x4 */ function  * func
}

struct lua_Debug {
  /* this+0x0 */ int event
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * namewhat
  /* this+0xc */ const char * what
  /* this+0x10 */ const char * source
  /* this+0x14 */ int currentline
  /* this+0x18 */ int nups
  /* this+0x1c */ int linedefined
  /* this+0x20 */ int lastlinedefined
  /* this+0x24 */ char[0x3c] short_src
  /* this+0x60 */ int i_ci
}

struct lua_State {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x6 */ unsigned char status
  /* this+0x8 */ struct lua_TValue * top
  /* this+0xc */ struct lua_TValue * base
  /* this+0x10 */ struct global_State * l_G
  /* this+0x14 */ struct CallInfo * ci
  /* this+0x18 */ const unsigned int * savedpc
  /* this+0x1c */ struct lua_TValue * stack_last
  /* this+0x20 */ struct lua_TValue * stack
  /* this+0x24 */ struct CallInfo * end_ci
  /* this+0x28 */ struct CallInfo * base_ci
  /* this+0x2c */ int stacksize
  /* this+0x30 */ int size_ci
  /* this+0x34 */ unsigned short nCcalls
  /* this+0x36 */ unsigned short baseCcalls
  /* this+0x38 */ unsigned char hookmask
  /* this+0x39 */ unsigned char allowhook
  /* this+0x3c */ int basehookcount
  /* this+0x40 */ int hookcount
  /* this+0x44 */ function  * hook
  /* this+0x48 */ struct lua_TValue l_gt

  /* this+0x58 */ struct lua_TValue env

  /* this+0x68 */ union GCObject * openupval
  /* this+0x6c */ union GCObject * gclist
  /* this+0x70 */ struct lua_longjmp * errorJmp
  /* this+0x74 */ int errfunc
}

struct lua_TValue {
  /* this+0x0 */ union Value value

  /* this+0x8 */ int tt
}

struct lua_longjmp {
  /* this+0x0 */ struct lua_longjmp * previous
  /* this+0x4 */ int[0x10] b
  /* this+0x44 */ volatile int status
}

struct mcg_key {
  /* this+0x0 */ unsigned short[0x60] val
}

struct midievent_tag {
  /* this+0x0 */ unsigned long dwDeltaTime
  /* this+0x4 */ unsigned long dwStreamID
  /* this+0x8 */ unsigned long dwEvent
  /* this+0xc */ unsigned long[0x1] dwParms
}

struct midihdr_tag {
  /* this+0x0 */ char * lpData
  /* this+0x4 */ unsigned long dwBufferLength
  /* this+0x8 */ unsigned long dwBytesRecorded
  /* this+0xc */ unsigned long dwUser
  /* this+0x10 */ unsigned long dwFlags
  /* this+0x14 */ struct midihdr_tag * lpNext
  /* this+0x18 */ unsigned long reserved
  /* this+0x1c */ unsigned long dwOffset
  /* this+0x20 */ unsigned long[0x8] dwReserved
}

struct midiproptempo_tag {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwTempo
}

struct midiproptimediv_tag {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwTimeDiv
}

struct midistrmbuffver_tag {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ unsigned long dwMid
  /* this+0x8 */ unsigned long dwOEMVersion
}

struct mmtime_tag {
  /* this+0x0 */ unsigned int wType
    /* this+0x4 */ union mmtime_tag::<unnamed-type-u> u

}

union mmtime_tag::<unnamed-type-u> {
  /* this+0x0 */ unsigned long ms
  /* this+0x0 */ unsigned long sample
  /* this+0x0 */ unsigned long cb
  /* this+0x0 */ unsigned long ticks
    /* this+0x0 */ struct mmtime_tag::<unnamed-type-u>::<unnamed-type-smpte> smpte

    /* this+0x0 */ struct mmtime_tag::<unnamed-type-u>::<unnamed-type-midi> midi

}

struct mmtime_tag::<unnamed-type-u>::<unnamed-type-midi> {
  /* this+0x0 */ unsigned long songptrpos
}

struct mmtime_tag::<unnamed-type-u>::<unnamed-type-smpte> {
  /* this+0x0 */ unsigned char hour
  /* this+0x1 */ unsigned char min
  /* this+0x2 */ unsigned char sec
  /* this+0x3 */ unsigned char frame
  /* this+0x4 */ unsigned char fps
  /* this+0x5 */ unsigned char dummy
  /* this+0x6 */ unsigned char[0x2] pad
}

struct myKnockback::__l2::<unnamed-type-backDirTbl> {
  /* this+0x0 */ int dir
  /* this+0x4 */ int dx
  /* this+0x8 */ int dy
}

struct netent {
  /* this+0x0 */ char * n_name
  /* this+0x4 */ char * * n_aliases
  /* this+0x8 */ short n_addrtype
  /* this+0xc */ unsigned long n_net
}

class pDNameNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ class DName * me
  public void pDNameNode(const class pDNameNode &)
  public void pDNameNode(class DName *)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class pDNameNode & operator=(const class pDNameNode &)
}

class pairNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ class DNameNode * left
  /* this+0x8 */ class DNameNode * right
  /* this+0xc */ int myLen
  public void pairNode(const class pairNode &)
  public void pairNode(class DNameNode *, class DNameNode *)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class pairNode & operator=(const class pairNode &)
}

class pcharNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ char * me
  /* this+0x8 */ int myLen
  public void pcharNode(const class pcharNode &)
  public void pcharNode(const char *, int)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class pcharNode & operator=(const class pcharNode &)
}

struct pcmwaveformat_tag {
  /* this+0x0 */ struct waveformat_tag wf

  /* this+0xe */ unsigned short wBitsPerSample
}

struct pollfd {
  /* this+0x0 */ unsigned int fd
  /* this+0x4 */ short events
  /* this+0x6 */ short revents
}

class pool<CNpcEvent> {
  public void pool<CNpcEvent>(const class pool<CNpcEvent> &)
  public void pool<CNpcEvent>()
  public void pool<CNpcEvent>::~pool<CNpcEvent>()
  public class CNpcEvent * pool<CNpcEvent>::Alloc()
  public void pool<CNpcEvent>::Free(class CNpcEvent *)
  public void clear()
  /* this+0x0 */ class std::map<CNpcEvent *,bool,std::less<CNpcEvent *>,std::allocator<std::pair<CNpcEvent * const,bool> > > m_TMap

  public class pool<CNpcEvent> & operator=(const class pool<CNpcEvent> &)
  public void * __vecDelDtor(unsigned int)
}

struct positional_param {
  /* this+0x0 */ enum ARG_TYPE arg_type
  /* this+0x4 */ char * arg_ptr
  /* this+0x8 */ char type
  /* this+0xc */ int flags
}

struct protoent {
  /* this+0x0 */ char * p_name
  /* this+0x4 */ char * * p_aliases
  /* this+0x8 */ short p_proto
}

struct provider_info {
  /* this+0x0 */ function  * pi_R0_1val
  /* this+0x4 */ function  * pi_R0_allvals
  /* this+0x8 */ function  * pi_R3_1val
  /* this+0xc */ function  * pi_R3_allvals
  /* this+0x10 */ unsigned long pi_flags
  /* this+0x14 */ void * pi_key_context
}

struct pvalueA {
  /* this+0x0 */ char * pv_valuename
  /* this+0x4 */ int pv_valuelen
  /* this+0x8 */ void * pv_value_context
  /* this+0xc */ unsigned long pv_type
}

struct pvalueW {
  /* this+0x0 */ wchar_t * pv_valuename
  /* this+0x4 */ int pv_valuelen
  /* this+0x8 */ void * pv_value_context
  /* this+0xc */ unsigned long pv_type
}

struct rterrmsgs {
  /* this+0x0 */ int rterrno
  /* this+0x4 */ const wchar_t * rterrtxt
}

struct seal_ctx {
  /* this+0x0 */ unsigned long[0x208] t
  /* this+0x820 */ unsigned long[0x109] s
  /* this+0xc44 */ unsigned long[0x14] r
  /* this+0xc94 */ unsigned long counter
  /* this+0xc98 */ unsigned long[0x400] ks_buf
  /* this+0x1c98 */ int ks_pos
}

struct servent {
  /* this+0x0 */ char * s_name
  /* this+0x4 */ char * * s_aliases
  /* this+0x8 */ short s_port
  /* this+0xc */ char * s_proto
}

struct setloc_struct {
  /* this+0x0 */ char * pchLanguage
  /* this+0x4 */ char * pchCountry
  /* this+0x8 */ int iLcidState
  /* this+0xc */ int iPrimaryLen
  /* this+0x10 */ int bAbbrevLanguage
  /* this+0x14 */ int bAbbrevCountry
  /* this+0x18 */ unsigned long lcidLanguage
  /* this+0x1c */ unsigned long lcidCountry
  /* this+0x20 */ struct tagLC_ID _cacheid

  /* this+0x28 */ unsigned int _cachecp
  /* this+0x2c */ char[0x83] _cachein
  /* this+0xaf */ char[0x83] _cacheout
  /* this+0x134 */ struct _is_ctype_compatible[0x5] _Lcid_c
}

struct sockaddr {
  /* this+0x0 */ unsigned short sa_family
  /* this+0x2 */ char[0xe] sa_data
}

struct sockaddr_dl {
  /* this+0x0 */ unsigned short sdl_family
  /* this+0x2 */ unsigned char[0x8] sdl_data
  /* this+0xa */ unsigned char[0x4] sdl_zero
}

struct sockaddr_in {
  /* this+0x0 */ unsigned short sin_family
  /* this+0x2 */ unsigned short sin_port
  /* this+0x4 */ struct in_addr sin_addr

  /* this+0x8 */ char[0x8] sin_zero
}

struct sockaddr_storage {
  /* this+0x0 */ unsigned short ss_family
  /* this+0x2 */ char[0x6] __ss_pad1
  /* this+0x8 */ __int64 __ss_align
  /* this+0x10 */ char[0x70] __ss_pad2
}

struct sockaddr_storage_xp {
  /* this+0x0 */ short ss_family
  /* this+0x2 */ char[0x6] __ss_pad1
  /* this+0x8 */ __int64 __ss_align
  /* this+0x10 */ char[0x70] __ss_pad2
}

struct sockproto {
  /* this+0x0 */ unsigned short sp_family
  /* this+0x2 */ unsigned short sp_protocol
}

struct stMobTombInfo {
  public void stMobTombInfo::stMobTombInfo(const struct stMobTombInfo &)
  public void stMobTombInfo(const short, const short, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public void stMobTombInfo::stMobTombInfo()
  /* this+0x0 */ short Dead_hour
  /* this+0x2 */ short Dead_min
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > MPV_Name

  /* this+0x20 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > Mob_Name

  public void stMobTombInfo::~stMobTombInfo()
  public struct stMobTombInfo & operator=(const struct stMobTombInfo &)
  public void * __vecDelDtor(unsigned int)
}

struct stat {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x14 */ long st_size
  /* this+0x18 */ long st_atime
  /* this+0x1c */ long st_mtime
  /* this+0x20 */ long st_ctime
}

struct static_tree_desc_s {
  /* this+0x0 */ int dummy
}

struct stringtable {
  /* this+0x0 */ union GCObject * * hash
  /* this+0x4 */ unsigned int nuse
  /* this+0x8 */ int size
}

struct tMIXERCONTROLDETAILS {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long cChannels
  /* this+0xc */ struct HWND__ * hwndOwner
  /* this+0xc */ unsigned long cMultipleItems
  /* this+0x10 */ unsigned long cbDetails
  /* this+0x14 */ void * paDetails
}

struct tMIXERCONTROLDETAILS_BOOLEAN {
  /* this+0x0 */ long fValue
}

struct tMIXERCONTROLDETAILS_SIGNED {
  /* this+0x0 */ long lValue
}

struct tMIXERCONTROLDETAILS_UNSIGNED {
  /* this+0x0 */ unsigned long dwValue
}

struct tWAVEFORMATEX {
  /* this+0x0 */ unsigned short wFormatTag
  /* this+0x2 */ unsigned short nChannels
  /* this+0x4 */ unsigned long nSamplesPerSec
  /* this+0x8 */ unsigned long nAvgBytesPerSec
  /* this+0xc */ unsigned short nBlockAlign
  /* this+0xe */ unsigned short wBitsPerSample
  /* this+0x10 */ unsigned short cbSize
}

struct tagABORTPATH {
  /* this+0x0 */ struct tagEMR emr

}

struct tagACCEL {
  /* this+0x0 */ unsigned char fVirt
  /* this+0x2 */ unsigned short key
  /* this+0x4 */ unsigned short cmd
}

struct tagACCESSTIMEOUT {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iTimeOutMSec
}

struct tagACTCTXA {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ const char * lpSource
  /* this+0xc */ unsigned short wProcessorArchitecture
  /* this+0xe */ unsigned short wLangId
  /* this+0x10 */ const char * lpAssemblyDirectory
  /* this+0x14 */ const char * lpResourceName
  /* this+0x18 */ const char * lpApplicationName
  /* this+0x1c */ struct HINSTANCE__ * hModule
}

struct tagACTCTXW {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ const wchar_t * lpSource
  /* this+0xc */ unsigned short wProcessorArchitecture
  /* this+0xe */ unsigned short wLangId
  /* this+0x10 */ const wchar_t * lpAssemblyDirectory
  /* this+0x14 */ const wchar_t * lpResourceName
  /* this+0x18 */ const wchar_t * lpApplicationName
  /* this+0x1c */ struct HINSTANCE__ * hModule
}

struct tagACTCTX_SECTION_KEYED_DATA {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long ulDataFormatVersion
  /* this+0x8 */ void * lpData
  /* this+0xc */ unsigned long ulLength
  /* this+0x10 */ void * lpSectionGlobalData
  /* this+0x14 */ unsigned long ulSectionGlobalDataLength
  /* this+0x18 */ void * lpSectionBase
  /* this+0x1c */ unsigned long ulSectionTotalLength
  /* this+0x20 */ void * hActCtx
  /* this+0x24 */ unsigned long ulAssemblyRosterIndex
  /* this+0x28 */ unsigned long ulFlags
  /* this+0x2c */ struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata

}

struct tagACTCTX_SECTION_KEYED_DATA_2600 {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long ulDataFormatVersion
  /* this+0x8 */ void * lpData
  /* this+0xc */ unsigned long ulLength
  /* this+0x10 */ void * lpSectionGlobalData
  /* this+0x14 */ unsigned long ulSectionGlobalDataLength
  /* this+0x18 */ void * lpSectionBase
  /* this+0x1c */ unsigned long ulSectionTotalLength
  /* this+0x20 */ void * hActCtx
  /* this+0x24 */ unsigned long ulAssemblyRosterIndex
}

struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
  /* this+0x0 */ void * lpInformation
  /* this+0x4 */ void * lpSectionBase
  /* this+0x8 */ unsigned long ulSectionLength
  /* this+0xc */ void * lpSectionGlobalDataBase
  /* this+0x10 */ unsigned long ulSectionGlobalDataLength
}

struct tagALTTABINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ int cItems
  /* this+0x8 */ int cColumns
  /* this+0xc */ int cRows
  /* this+0x10 */ int iColFocus
  /* this+0x14 */ int iRowFocus
  /* this+0x18 */ int cxItem
  /* this+0x1c */ int cyItem
  /* this+0x20 */ struct tagPOINT ptStart

}

struct tagANIMATIONINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iMinAnimate
}

struct tagARRAYDESC {
  /* this+0x0 */ struct tagTYPEDESC tdescElem

  /* this+0x8 */ unsigned short cDims
  /* this+0xc */ struct tagSAFEARRAYBOUND[0x1] rgbounds
}

struct tagAUDIODESCRIPTION {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int Enabled
  /* this+0x8 */ unsigned long Locale
}

struct tagAUXCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned short wTechnology
  /* this+0x2a */ unsigned short wReserved1
  /* this+0x2c */ unsigned long dwSupport
  /* this+0x30 */ struct _GUID ManufacturerGuid

  /* this+0x40 */ struct _GUID ProductGuid

  /* this+0x50 */ struct _GUID NameGuid

}

struct tagAUXCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned short wTechnology
  /* this+0x4a */ unsigned short wReserved1
  /* this+0x4c */ unsigned long dwSupport
  /* this+0x50 */ struct _GUID ManufacturerGuid

  /* this+0x60 */ struct _GUID ProductGuid

  /* this+0x70 */ struct _GUID NameGuid

}

struct tagAUXCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned short wTechnology
  /* this+0x2a */ unsigned short wReserved1
  /* this+0x2c */ unsigned long dwSupport
}

struct tagAUXCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned short wTechnology
  /* this+0x4a */ unsigned short wReserved1
  /* this+0x4c */ unsigned long dwSupport
}

struct tagAXESLISTA {
  /* this+0x0 */ unsigned long axlReserved
  /* this+0x4 */ unsigned long axlNumAxes
  /* this+0x8 */ struct tagAXISINFOA[0x10] axlAxisInfo
}

struct tagAXESLISTW {
  /* this+0x0 */ unsigned long axlReserved
  /* this+0x4 */ unsigned long axlNumAxes
  /* this+0x8 */ struct tagAXISINFOW[0x10] axlAxisInfo
}

struct tagAXISINFOA {
  /* this+0x0 */ long axMinValue
  /* this+0x4 */ long axMaxValue
  /* this+0x8 */ unsigned char[0x10] axAxisName
}

struct tagAXISINFOW {
  /* this+0x0 */ long axMinValue
  /* this+0x4 */ long axMaxValue
  /* this+0x8 */ wchar_t[0x10] axAxisName
}

union tagBINDPTR {
  /* this+0x0 */ struct tagFUNCDESC * lpfuncdesc
  /* this+0x0 */ struct tagVARDESC * lpvardesc
  /* this+0x0 */ struct ITypeComp * lptcomp
}

struct tagBITMAP {
  /* this+0x0 */ long bmType
  /* this+0x4 */ long bmWidth
  /* this+0x8 */ long bmHeight
  /* this+0xc */ long bmWidthBytes
  /* this+0x10 */ unsigned short bmPlanes
  /* this+0x12 */ unsigned short bmBitsPixel
  /* this+0x14 */ void * bmBits
}

struct tagBITMAPCOREHEADER {
  /* this+0x0 */ unsigned long bcSize
  /* this+0x4 */ unsigned short bcWidth
  /* this+0x6 */ unsigned short bcHeight
  /* this+0x8 */ unsigned short bcPlanes
  /* this+0xa */ unsigned short bcBitCount
}

struct tagBITMAPCOREINFO {
  /* this+0x0 */ struct tagBITMAPCOREHEADER bmciHeader

  /* this+0xc */ struct tagRGBTRIPLE[0x1] bmciColors
}

struct tagBITMAPFILEHEADER {
  /* this+0x0 */ unsigned short bfType
  /* this+0x2 */ unsigned long bfSize
  /* this+0x6 */ unsigned short bfReserved1
  /* this+0x8 */ unsigned short bfReserved2
  /* this+0xa */ unsigned long bfOffBits
}

struct tagBITMAPINFO {
  /* this+0x0 */ struct tagBITMAPINFOHEADER bmiHeader

  /* this+0x28 */ struct tagRGBQUAD[0x1] bmiColors
}

struct tagBITMAPINFOHEADER {
  /* this+0x0 */ unsigned long biSize
  /* this+0x4 */ long biWidth
  /* this+0x8 */ long biHeight
  /* this+0xc */ unsigned short biPlanes
  /* this+0xe */ unsigned short biBitCount
  /* this+0x10 */ unsigned long biCompression
  /* this+0x14 */ unsigned long biSizeImage
  /* this+0x18 */ long biXPelsPerMeter
  /* this+0x1c */ long biYPelsPerMeter
  /* this+0x20 */ unsigned long biClrUsed
  /* this+0x24 */ unsigned long biClrImportant
}

struct tagBLOB {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned char * pBlobData
}

struct tagBSTRBLOB {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned char * pData
}

struct tagCABOOL {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ short * pElems
}

struct tagCABSTR {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ wchar_t * * pElems
}

struct tagCABSTRBLOB {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ struct tagBSTRBLOB * pElems
}

struct tagCAC {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ char * pElems
}

struct tagCACLIPDATA {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ struct tagCLIPDATA * pElems
}

struct tagCACLSID {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ struct _GUID * pElems
}

struct tagCACY {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ union tagCY * pElems
}

struct tagCADATE {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ double * pElems
}

struct tagCADBL {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ double * pElems
}

struct tagCAFILETIME {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ struct _FILETIME * pElems
}

struct tagCAFLT {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ float * pElems
}

struct tagCAH {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ union _LARGE_INTEGER * pElems
}

struct tagCAI {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ short * pElems
}

struct tagCAL {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ long * pElems
}

struct tagCALPSTR {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ char * * pElems
}

struct tagCALPWSTR {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ wchar_t * * pElems
}

struct tagCANDIDATEFORM {
  /* this+0x0 */ unsigned long dwIndex
  /* this+0x4 */ unsigned long dwStyle
  /* this+0x8 */ struct tagPOINT ptCurrentPos

  /* this+0x10 */ struct tagRECT rcArea

}

struct tagCANDIDATELIST {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwStyle
  /* this+0x8 */ unsigned long dwCount
  /* this+0xc */ unsigned long dwSelection
  /* this+0x10 */ unsigned long dwPageStart
  /* this+0x14 */ unsigned long dwPageSize
  /* this+0x18 */ unsigned long[0x1] dwOffset
}

struct tagCAPROPVARIANT {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ struct tagPROPVARIANT * pElems
}

struct tagCASCODE {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ long * pElems
}

struct tagCAUB {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ unsigned char * pElems
}

struct tagCAUH {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ union _ULARGE_INTEGER * pElems
}

struct tagCAUI {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ unsigned short * pElems
}

struct tagCAUL {
  /* this+0x0 */ unsigned long cElems
  /* this+0x4 */ unsigned long * pElems
}

struct tagCBTACTIVATESTRUCT {
  /* this+0x0 */ int fMouse
  /* this+0x4 */ struct HWND__ * hWndActive
}

struct tagCBT_CREATEWNDA {
  /* this+0x0 */ struct tagCREATESTRUCTA * lpcs
  /* this+0x4 */ struct HWND__ * hwndInsertAfter
}

struct tagCBT_CREATEWNDW {
  /* this+0x0 */ struct tagCREATESTRUCTW * lpcs
  /* this+0x4 */ struct HWND__ * hwndInsertAfter
}

struct tagCHANGEFILTERSTRUCT {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long ExtStatus
}

struct tagCHARSETINFO {
  /* this+0x0 */ unsigned int ciCharset
  /* this+0x4 */ unsigned int ciACP
  /* this+0x8 */ struct tagFONTSIGNATURE fs

}

struct tagCIEXYZ {
  /* this+0x0 */ long ciexyzX
  /* this+0x4 */ long ciexyzY
  /* this+0x8 */ long ciexyzZ
}

struct tagCLIENTCREATESTRUCT {
  /* this+0x0 */ void * hWindowMenu
  /* this+0x4 */ unsigned int idFirstChild
}

struct tagCLIPDATA {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ long ulClipFmt
  /* this+0x8 */ unsigned char * pClipData
}

struct tagCOLORADJUSTMENT {
  /* this+0x0 */ unsigned short caSize
  /* this+0x2 */ unsigned short caFlags
  /* this+0x4 */ unsigned short caIlluminantIndex
  /* this+0x6 */ unsigned short caRedGamma
  /* this+0x8 */ unsigned short caGreenGamma
  /* this+0xa */ unsigned short caBlueGamma
  /* this+0xc */ unsigned short caReferenceBlack
  /* this+0xe */ unsigned short caReferenceWhite
  /* this+0x10 */ short caContrast
  /* this+0x12 */ short caBrightness
  /* this+0x14 */ short caColorfulness
  /* this+0x16 */ short caRedGreenTint
}

struct tagCOLORCORRECTPALETTE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPalette
  /* this+0xc */ unsigned long nFirstEntry
  /* this+0x10 */ unsigned long nPalEntries
  /* this+0x14 */ unsigned long nReserved
}

struct tagCOLORMATCHTOTARGET {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long dwAction
  /* this+0xc */ unsigned long dwFlags
  /* this+0x10 */ unsigned long cbName
  /* this+0x14 */ unsigned long cbData
  /* this+0x18 */ unsigned char[0x1] Data
}

struct tagCOMBOBOXINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcItem

  /* this+0x14 */ struct tagRECT rcButton

  /* this+0x24 */ unsigned long stateButton
  /* this+0x28 */ struct HWND__ * hwndCombo
  /* this+0x2c */ struct HWND__ * hwndItem
  /* this+0x30 */ struct HWND__ * hwndList
}

struct tagCOMPAREITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType
  /* this+0x4 */ unsigned int CtlID
  /* this+0x8 */ struct HWND__ * hwndItem
  /* this+0xc */ unsigned int itemID1
  /* this+0x10 */ unsigned long itemData1
  /* this+0x14 */ unsigned int itemID2
  /* this+0x18 */ unsigned long itemData2
  /* this+0x1c */ unsigned long dwLocaleId
}

struct tagCOMPOSITIONFORM {
  /* this+0x0 */ unsigned long dwStyle
  /* this+0x4 */ struct tagPOINT ptCurrentPos

  /* this+0xc */ struct tagRECT rcArea

}

struct tagCOPYDATASTRUCT {
  /* this+0x0 */ unsigned long dwData
  /* this+0x4 */ unsigned long cbData
  /* this+0x8 */ void * lpData
}

struct tagCREATESTRUCTA {
  /* this+0x0 */ void * lpCreateParams
  /* this+0x4 */ struct HINSTANCE__ * hInstance
  /* this+0x8 */ struct HMENU__ * hMenu
  /* this+0xc */ struct HWND__ * hwndParent
  /* this+0x10 */ int cy
  /* this+0x14 */ int cx
  /* this+0x18 */ int y
  /* this+0x1c */ int x
  /* this+0x20 */ long style
  /* this+0x24 */ const char * lpszName
  /* this+0x28 */ const char * lpszClass
  /* this+0x2c */ unsigned long dwExStyle
}

struct tagCREATESTRUCTW {
  /* this+0x0 */ void * lpCreateParams
  /* this+0x4 */ struct HINSTANCE__ * hInstance
  /* this+0x8 */ struct HMENU__ * hMenu
  /* this+0xc */ struct HWND__ * hwndParent
  /* this+0x10 */ int cy
  /* this+0x14 */ int cx
  /* this+0x18 */ int y
  /* this+0x1c */ int x
  /* this+0x20 */ long style
  /* this+0x24 */ const wchar_t * lpszName
  /* this+0x28 */ const wchar_t * lpszClass
  /* this+0x2c */ unsigned long dwExStyle
}

struct tagCURSORINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long flags
  /* this+0x8 */ struct HICON__ * hCursor
  /* this+0xc */ struct tagPOINT ptScreenPos

}

struct tagCURSORSHAPE {
  /* this+0x0 */ int xHotSpot
  /* this+0x4 */ int yHotSpot
  /* this+0x8 */ int cx
  /* this+0xc */ int cy
  /* this+0x10 */ int cbWidth
  /* this+0x14 */ unsigned char Planes
  /* this+0x15 */ unsigned char BitsPixel
}

struct tagCWPRETSTRUCT {
  /* this+0x0 */ long lResult
  /* this+0x4 */ long lParam
  /* this+0x8 */ unsigned int wParam
  /* this+0xc */ unsigned int message
  /* this+0x10 */ struct HWND__ * hwnd
}

struct tagCWPSTRUCT {
  /* this+0x0 */ long lParam
  /* this+0x4 */ unsigned int wParam
  /* this+0x8 */ unsigned int message
  /* this+0xc */ struct HWND__ * hwnd
}

union tagCY {
  /* this+0x0 */ unsigned long Lo
  /* this+0x4 */ long Hi
  /* this+0x0 */ __int64 int64
}

struct tagDATE_STRUCT {
  /* this+0x0 */ short year
  /* this+0x2 */ unsigned short month
  /* this+0x4 */ unsigned short day
}

struct tagDEBUGHOOKINFO {
  /* this+0x0 */ unsigned long idThread
  /* this+0x4 */ unsigned long idThreadInstaller
  /* this+0x8 */ long lParam
  /* this+0xc */ unsigned int wParam
  /* this+0x10 */ int code
}

struct tagDEC {
  /* this+0x0 */ unsigned short wReserved
  /* this+0x2 */ unsigned char scale
  /* this+0x3 */ unsigned char sign
  /* this+0x2 */ unsigned short signscale
  /* this+0x4 */ unsigned long Hi32
  /* this+0x8 */ unsigned long Lo32
  /* this+0xc */ unsigned long Mid32
  /* this+0x8 */ unsigned __int64 Lo64
}

struct tagDELETEITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType
  /* this+0x4 */ unsigned int CtlID
  /* this+0x8 */ unsigned int itemID
  /* this+0xc */ struct HWND__ * hwndItem
  /* this+0x10 */ unsigned long itemData
}

struct tagDESIGNVECTOR {
  /* this+0x0 */ unsigned long dvReserved
  /* this+0x4 */ unsigned long dvNumAxes
  /* this+0x8 */ long[0x10] dvValues
}

struct tagDIBSECTION {
  /* this+0x0 */ struct tagBITMAP dsBm

  /* this+0x18 */ struct tagBITMAPINFOHEADER dsBmih

  /* this+0x40 */ unsigned long[0x3] dsBitfields
  /* this+0x4c */ void * dshSection
  /* this+0x50 */ unsigned long dsOffset
}

struct tagDISPPARAMS {
  /* this+0x0 */ struct tagVARIANT * rgvarg
  /* this+0x4 */ long * rgdispidNamedArgs
  /* this+0x8 */ unsigned int cArgs
  /* this+0xc */ unsigned int cNamedArgs
}

struct tagDRAWITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType
  /* this+0x4 */ unsigned int CtlID
  /* this+0x8 */ unsigned int itemID
  /* this+0xc */ unsigned int itemAction
  /* this+0x10 */ unsigned int itemState
  /* this+0x14 */ struct HWND__ * hwndItem
  /* this+0x18 */ struct HDC__ * hDC
  /* this+0x1c */ struct tagRECT rcItem

  /* this+0x2c */ unsigned long itemData
}

struct tagDRAWTEXTPARAMS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iTabLength
  /* this+0x8 */ int iLeftMargin
  /* this+0xc */ int iRightMargin
  /* this+0x10 */ unsigned int uiLengthDrawn
}

struct tagDROPSTRUCT {
  /* this+0x0 */ struct HWND__ * hwndSource
  /* this+0x4 */ struct HWND__ * hwndSink
  /* this+0x8 */ unsigned long wFmt
  /* this+0xc */ unsigned long dwData
  /* this+0x10 */ struct tagPOINT ptDrop

  /* this+0x18 */ unsigned long dwControlData
}

struct tagDRVCONFIGINFO {
  /* this+0x0 */ unsigned long dwDCISize
  /* this+0x4 */ const wchar_t * lpszDCISectionName
  /* this+0x8 */ const wchar_t * lpszDCIAliasName
}

struct tagELEMDESC {
  /* this+0x0 */ struct tagTYPEDESC tdesc

  /* this+0x8 */ struct tagIDLDESC idldesc

  /* this+0x8 */ struct tagPARAMDESC paramdesc

}

struct tagEMR {
  /* this+0x0 */ unsigned long iType
  /* this+0x4 */ unsigned long nSize
}

struct tagEMRALPHABLEND {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
  /* this+0x64 */ long cxSrc
  /* this+0x68 */ long cySrc
}

struct tagEMRANGLEARC {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlCenter

  /* this+0x10 */ unsigned long nRadius
  /* this+0x14 */ float eStartAngle
  /* this+0x18 */ float eSweepAngle
}

struct tagEMRARC {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBox

  /* this+0x18 */ struct _POINTL ptlStart

  /* this+0x20 */ struct _POINTL ptlEnd

}

struct tagEMRBITBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
}

struct tagEMRCREATEBRUSHINDIRECT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihBrush
  /* this+0xc */ struct tagLOGBRUSH32 lb

}

struct tagEMRCREATECOLORSPACE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihCS
  /* this+0xc */ struct tagLOGCOLORSPACEA lcs

}

struct tagEMRCREATECOLORSPACEW {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihCS
  /* this+0xc */ struct tagLOGCOLORSPACEW lcs

  /* this+0x258 */ unsigned long dwFlags
  /* this+0x25c */ unsigned long cbData
  /* this+0x260 */ unsigned char[0x1] Data
}

struct tagEMRCREATEDIBPATTERNBRUSHPT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihBrush
  /* this+0xc */ unsigned long iUsage
  /* this+0x10 */ unsigned long offBmi
  /* this+0x14 */ unsigned long cbBmi
  /* this+0x18 */ unsigned long offBits
  /* this+0x1c */ unsigned long cbBits
}

struct tagEMRCREATEMONOBRUSH {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihBrush
  /* this+0xc */ unsigned long iUsage
  /* this+0x10 */ unsigned long offBmi
  /* this+0x14 */ unsigned long cbBmi
  /* this+0x18 */ unsigned long offBits
  /* this+0x1c */ unsigned long cbBits
}

struct tagEMRCREATEPALETTE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPal
  /* this+0xc */ struct tagLOGPALETTE lgpl

}

struct tagEMRCREATEPEN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPen
  /* this+0xc */ struct tagLOGPEN lopn

}

struct tagEMRELLIPSE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBox

}

struct tagEMREOF {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long nPalEntries
  /* this+0xc */ unsigned long offPalEntries
  /* this+0x10 */ unsigned long nSizeLast
}

struct tagEMREXCLUDECLIPRECT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclClip

}

struct tagEMREXTCREATEFONTINDIRECTW {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihFont
  /* this+0xc */ struct tagEXTLOGFONTW elfw

}

struct tagEMREXTCREATEPEN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPen
  /* this+0xc */ unsigned long offBmi
  /* this+0x10 */ unsigned long cbBmi
  /* this+0x14 */ unsigned long offBits
  /* this+0x18 */ unsigned long cbBits
  /* this+0x1c */ struct tagEXTLOGPEN32 elp

}

struct tagEMREXTESCAPE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ int iEscape
  /* this+0xc */ int cbEscData
  /* this+0x10 */ unsigned char[0x1] EscData
}

struct tagEMREXTFLOODFILL {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlStart

  /* this+0x10 */ unsigned long crColor
  /* this+0x14 */ unsigned long iMode
}

struct tagEMREXTSELECTCLIPRGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long cbRgnData
  /* this+0xc */ unsigned long iMode
  /* this+0x10 */ unsigned char[0x1] RgnData
}

struct tagEMREXTTEXTOUTA {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long iGraphicsMode
  /* this+0x1c */ float exScale
  /* this+0x20 */ float eyScale
  /* this+0x24 */ struct tagEMRTEXT emrtext

}

struct tagEMRFILLPATH {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

}

struct tagEMRFILLRGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cbRgnData
  /* this+0x1c */ unsigned long ihBrush
  /* this+0x20 */ unsigned char[0x1] RgnData
}

struct tagEMRFORMAT {
  /* this+0x0 */ unsigned long dSignature
  /* this+0x4 */ unsigned long nVersion
  /* this+0x8 */ unsigned long cbData
  /* this+0xc */ unsigned long offData
}

struct tagEMRFRAMERGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cbRgnData
  /* this+0x1c */ unsigned long ihBrush
  /* this+0x20 */ struct tagSIZE szlStroke

  /* this+0x28 */ unsigned char[0x1] RgnData
}

struct tagEMRGDICOMMENT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long cbData
  /* this+0xc */ unsigned char[0x1] Data
}

struct tagEMRGLSBOUNDEDRECORD {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cbData
  /* this+0x1c */ unsigned char[0x1] Data
}

struct tagEMRGLSRECORD {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long cbData
  /* this+0xc */ unsigned char[0x1] Data
}

struct tagEMRGRADIENTFILL {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long nVer
  /* this+0x1c */ unsigned long nTri
  /* this+0x20 */ unsigned long ulMode
  /* this+0x24 */ struct _TRIVERTEX[0x1] Ver
}

struct tagEMRINVERTRGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cbRgnData
  /* this+0x1c */ unsigned char[0x1] RgnData
}

struct tagEMRLINETO {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptl

}

struct tagEMRMASKBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
  /* this+0x64 */ long xMask
  /* this+0x68 */ long yMask
  /* this+0x6c */ unsigned long iUsageMask
  /* this+0x70 */ unsigned long offBmiMask
  /* this+0x74 */ unsigned long cbBmiMask
  /* this+0x78 */ unsigned long offBitsMask
  /* this+0x7c */ unsigned long cbBitsMask
}

struct tagEMRMODIFYWORLDTRANSFORM {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagXFORM xform

  /* this+0x20 */ unsigned long iMode
}

struct tagEMRNAMEDESCAPE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ int iEscape
  /* this+0xc */ int cbDriver
  /* this+0x10 */ int cbEscData
  /* this+0x14 */ unsigned char[0x1] EscData
}

struct tagEMROFFSETCLIPRGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlOffset

}

struct tagEMRPIXELFORMAT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagPIXELFORMATDESCRIPTOR pfd

}

struct tagEMRPLGBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ struct _POINTL[0x3] aptlDest
  /* this+0x30 */ long xSrc
  /* this+0x34 */ long ySrc
  /* this+0x38 */ long cxSrc
  /* this+0x3c */ long cySrc
  /* this+0x40 */ struct tagXFORM xformSrc

  /* this+0x58 */ unsigned long crBkColorSrc
  /* this+0x5c */ unsigned long iUsageSrc
  /* this+0x60 */ unsigned long offBmiSrc
  /* this+0x64 */ unsigned long cbBmiSrc
  /* this+0x68 */ unsigned long offBitsSrc
  /* this+0x6c */ unsigned long cbBitsSrc
  /* this+0x70 */ long xMask
  /* this+0x74 */ long yMask
  /* this+0x78 */ unsigned long iUsageMask
  /* this+0x7c */ unsigned long offBmiMask
  /* this+0x80 */ unsigned long cbBmiMask
  /* this+0x84 */ unsigned long offBitsMask
  /* this+0x88 */ unsigned long cbBitsMask
}

struct tagEMRPOLYDRAW {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cptl
  /* this+0x1c */ struct _POINTL[0x1] aptl
  /* this+0x24 */ unsigned char[0x1] abTypes
}

struct tagEMRPOLYDRAW16 {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cpts
  /* this+0x1c */ struct tagPOINTS[0x1] apts
  /* this+0x20 */ unsigned char[0x1] abTypes
}

struct tagEMRPOLYLINE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cptl
  /* this+0x1c */ struct _POINTL[0x1] aptl
}

struct tagEMRPOLYLINE16 {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cpts
  /* this+0x1c */ struct tagPOINTS[0x1] apts
}

struct tagEMRPOLYPOLYLINE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long nPolys
  /* this+0x1c */ unsigned long cptl
  /* this+0x20 */ unsigned long[0x1] aPolyCounts
  /* this+0x24 */ struct _POINTL[0x1] aptl
}

struct tagEMRPOLYPOLYLINE16 {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long nPolys
  /* this+0x1c */ unsigned long cpts
  /* this+0x20 */ unsigned long[0x1] aPolyCounts
  /* this+0x24 */ struct tagPOINTS[0x1] apts
}

struct tagEMRPOLYTEXTOUTA {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long iGraphicsMode
  /* this+0x1c */ float exScale
  /* this+0x20 */ float eyScale
  /* this+0x24 */ long cStrings
  /* this+0x28 */ struct tagEMRTEXT[0x1] aemrtext
}

struct tagEMRRESIZEPALETTE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPal
  /* this+0xc */ unsigned long cEntries
}

struct tagEMRRESTOREDC {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ long iRelative
}

struct tagEMRROUNDRECT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBox

  /* this+0x18 */ struct tagSIZE szlCorner

}

struct tagEMRSCALEVIEWPORTEXTEX {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ long xNum
  /* this+0xc */ long xDenom
  /* this+0x10 */ long yNum
  /* this+0x14 */ long yDenom
}

struct tagEMRSELECTCLIPPATH {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long iMode
}

struct tagEMRSELECTOBJECT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihObject
}

struct tagEMRSELECTPALETTE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPal
}

struct tagEMRSETARCDIRECTION {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long iArcDirection
}

struct tagEMRSETCOLORADJUSTMENT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagCOLORADJUSTMENT ColorAdjustment

}

struct tagEMRSETCOLORSPACE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihCS
}

struct tagEMRSETDIBITSTODEVICE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long xSrc
  /* this+0x24 */ long ySrc
  /* this+0x28 */ long cxSrc
  /* this+0x2c */ long cySrc
  /* this+0x30 */ unsigned long offBmiSrc
  /* this+0x34 */ unsigned long cbBmiSrc
  /* this+0x38 */ unsigned long offBitsSrc
  /* this+0x3c */ unsigned long cbBitsSrc
  /* this+0x40 */ unsigned long iUsageSrc
  /* this+0x44 */ unsigned long iStartScan
  /* this+0x48 */ unsigned long cScans
}

struct tagEMRSETICMPROFILE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long dwFlags
  /* this+0xc */ unsigned long cbName
  /* this+0x10 */ unsigned long cbData
  /* this+0x14 */ unsigned char[0x1] Data
}

struct tagEMRSETMAPPERFLAGS {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long dwFlags
}

struct tagEMRSETMITERLIMIT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ float eMiterLimit
}

struct tagEMRSETPALETTEENTRIES {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPal
  /* this+0xc */ unsigned long iStart
  /* this+0x10 */ unsigned long cEntries
  /* this+0x14 */ struct tagPALETTEENTRY[0x1] aPalEntries
}

struct tagEMRSETPIXELV {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlPixel

  /* this+0x10 */ unsigned long crColor
}

struct tagEMRSETTEXTCOLOR {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long crColor
}

struct tagEMRSETVIEWPORTEXTEX {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagSIZE szlExtent

}

struct tagEMRSETVIEWPORTORGEX {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlOrigin

}

struct tagEMRSETWORLDTRANSFORM {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagXFORM xform

}

struct tagEMRSTRETCHBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
  /* this+0x64 */ long cxSrc
  /* this+0x68 */ long cySrc
}

struct tagEMRSTRETCHDIBITS {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long xSrc
  /* this+0x24 */ long ySrc
  /* this+0x28 */ long cxSrc
  /* this+0x2c */ long cySrc
  /* this+0x30 */ unsigned long offBmiSrc
  /* this+0x34 */ unsigned long cbBmiSrc
  /* this+0x38 */ unsigned long offBitsSrc
  /* this+0x3c */ unsigned long cbBitsSrc
  /* this+0x40 */ unsigned long iUsageSrc
  /* this+0x44 */ unsigned long dwRop
  /* this+0x48 */ long cxDest
  /* this+0x4c */ long cyDest
}

struct tagEMRTEXT {
  /* this+0x0 */ struct _POINTL ptlReference

  /* this+0x8 */ unsigned long nChars
  /* this+0xc */ unsigned long offString
  /* this+0x10 */ unsigned long fOptions
  /* this+0x14 */ struct _RECTL rcl

  /* this+0x24 */ unsigned long offDx
}

struct tagEMRTRANSPARENTBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
  /* this+0x64 */ long cxSrc
  /* this+0x68 */ long cySrc
}

struct tagENHMETAHEADER {
  /* this+0x0 */ unsigned long iType
  /* this+0x4 */ unsigned long nSize
  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ struct _RECTL rclFrame

  /* this+0x28 */ unsigned long dSignature
  /* this+0x2c */ unsigned long nVersion
  /* this+0x30 */ unsigned long nBytes
  /* this+0x34 */ unsigned long nRecords
  /* this+0x38 */ unsigned short nHandles
  /* this+0x3a */ unsigned short sReserved
  /* this+0x3c */ unsigned long nDescription
  /* this+0x40 */ unsigned long offDescription
  /* this+0x44 */ unsigned long nPalEntries
  /* this+0x48 */ struct tagSIZE szlDevice

  /* this+0x50 */ struct tagSIZE szlMillimeters

  /* this+0x58 */ unsigned long cbPixelFormat
  /* this+0x5c */ unsigned long offPixelFormat
  /* this+0x60 */ unsigned long bOpenGL
  /* this+0x64 */ struct tagSIZE szlMicrometers

}

struct tagENHMETARECORD {
  /* this+0x0 */ unsigned long iType
  /* this+0x4 */ unsigned long nSize
  /* this+0x8 */ unsigned long[0x1] dParm
}

struct tagENUMLOGFONTA {
  /* this+0x0 */ struct tagLOGFONTA elfLogFont

  /* this+0x3c */ unsigned char[0x40] elfFullName
  /* this+0x7c */ unsigned char[0x20] elfStyle
}

struct tagENUMLOGFONTEXA {
  /* this+0x0 */ struct tagLOGFONTA elfLogFont

  /* this+0x3c */ unsigned char[0x40] elfFullName
  /* this+0x7c */ unsigned char[0x20] elfStyle
  /* this+0x9c */ unsigned char[0x20] elfScript
}

struct tagENUMLOGFONTEXDVA {
  /* this+0x0 */ struct tagENUMLOGFONTEXA elfEnumLogfontEx

  /* this+0xbc */ struct tagDESIGNVECTOR elfDesignVector

}

struct tagENUMLOGFONTEXDVW {
  /* this+0x0 */ struct tagENUMLOGFONTEXW elfEnumLogfontEx

  /* this+0x15c */ struct tagDESIGNVECTOR elfDesignVector

}

struct tagENUMLOGFONTEXW {
  /* this+0x0 */ struct tagLOGFONTW elfLogFont

  /* this+0x5c */ wchar_t[0x40] elfFullName
  /* this+0xdc */ wchar_t[0x20] elfStyle
  /* this+0x11c */ wchar_t[0x20] elfScript
}

struct tagENUMLOGFONTW {
  /* this+0x0 */ struct tagLOGFONTW elfLogFont

  /* this+0x5c */ wchar_t[0x40] elfFullName
  /* this+0xdc */ wchar_t[0x20] elfStyle
}

struct tagENUMTEXTMETRICA {
  /* this+0x0 */ struct tagNEWTEXTMETRICEXA etmNewTextMetricEx

  /* this+0x60 */ struct tagAXESLISTA etmAxesList

}

struct tagENUMTEXTMETRICW {
  /* this+0x0 */ struct tagNEWTEXTMETRICEXW etmNewTextMetricEx

  /* this+0x64 */ struct tagAXESLISTW etmAxesList

}

struct tagEVENTMSG {
  /* this+0x0 */ unsigned int message
  /* this+0x4 */ unsigned int paramL
  /* this+0x8 */ unsigned int paramH
  /* this+0xc */ unsigned long time
  /* this+0x10 */ struct HWND__ * hwnd
}

struct tagEXCEPINFO {
  /* this+0x0 */ unsigned short wCode
  /* this+0x2 */ unsigned short wReserved
  /* this+0x4 */ wchar_t * bstrSource
  /* this+0x8 */ wchar_t * bstrDescription
  /* this+0xc */ wchar_t * bstrHelpFile
  /* this+0x10 */ unsigned long dwHelpContext
  /* this+0x14 */ void * pvReserved
  /* this+0x18 */ function  * pfnDeferredFillIn
  /* this+0x1c */ long scode
}

struct tagEXTLOGFONTA {
  /* this+0x0 */ struct tagLOGFONTA elfLogFont

  /* this+0x3c */ unsigned char[0x40] elfFullName
  /* this+0x7c */ unsigned char[0x20] elfStyle
  /* this+0x9c */ unsigned long elfVersion
  /* this+0xa0 */ unsigned long elfStyleSize
  /* this+0xa4 */ unsigned long elfMatch
  /* this+0xa8 */ unsigned long elfReserved
  /* this+0xac */ unsigned char[0x4] elfVendorId
  /* this+0xb0 */ unsigned long elfCulture
  /* this+0xb4 */ struct tagPANOSE elfPanose

}

struct tagEXTLOGFONTW {
  /* this+0x0 */ struct tagLOGFONTW elfLogFont

  /* this+0x5c */ wchar_t[0x40] elfFullName
  /* this+0xdc */ wchar_t[0x20] elfStyle
  /* this+0x11c */ unsigned long elfVersion
  /* this+0x120 */ unsigned long elfStyleSize
  /* this+0x124 */ unsigned long elfMatch
  /* this+0x128 */ unsigned long elfReserved
  /* this+0x12c */ unsigned char[0x4] elfVendorId
  /* this+0x130 */ unsigned long elfCulture
  /* this+0x134 */ struct tagPANOSE elfPanose

}

struct tagEXTLOGPEN {
  /* this+0x0 */ unsigned long elpPenStyle
  /* this+0x4 */ unsigned long elpWidth
  /* this+0x8 */ unsigned int elpBrushStyle
  /* this+0xc */ unsigned long elpColor
  /* this+0x10 */ unsigned long elpHatch
  /* this+0x14 */ unsigned long elpNumEntries
  /* this+0x18 */ unsigned long[0x1] elpStyleEntry
}

struct tagEXTLOGPEN32 {
  /* this+0x0 */ unsigned long elpPenStyle
  /* this+0x4 */ unsigned long elpWidth
  /* this+0x8 */ unsigned int elpBrushStyle
  /* this+0xc */ unsigned long elpColor
  /* this+0x10 */ unsigned long elpHatch
  /* this+0x14 */ unsigned long elpNumEntries
  /* this+0x18 */ unsigned long[0x1] elpStyleEntry
}

struct tagFILTERKEYS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iWaitMSec
  /* this+0xc */ unsigned long iDelayMSec
  /* this+0x10 */ unsigned long iRepeatMSec
  /* this+0x14 */ unsigned long iBounceMSec
}

struct tagFONTSIGNATURE {
  /* this+0x0 */ unsigned long[0x4] fsUsb
  /* this+0x10 */ unsigned long[0x2] fsCsb
}

struct tagFUNCDESC {
  /* this+0x0 */ long memid
  /* this+0x4 */ long * lprgscode
  /* this+0x8 */ struct tagELEMDESC * lprgelemdescParam
  /* this+0xc */ enum tagFUNCKIND funckind
  /* this+0x10 */ enum tagINVOKEKIND invkind
  /* this+0x14 */ enum tagCALLCONV callconv
  /* this+0x18 */ short cParams
  /* this+0x1a */ short cParamsOpt
  /* this+0x1c */ short oVft
  /* this+0x1e */ short cScodes
  /* this+0x20 */ struct tagELEMDESC elemdescFunc

  /* this+0x30 */ unsigned short wFuncFlags
}

struct tagGCP_RESULTSA {
  /* this+0x0 */ unsigned long lStructSize
  /* this+0x4 */ char * lpOutString
  /* this+0x8 */ unsigned int * lpOrder
  /* this+0xc */ int * lpDx
  /* this+0x10 */ int * lpCaretPos
  /* this+0x14 */ char * lpClass
  /* this+0x18 */ wchar_t * lpGlyphs
  /* this+0x1c */ unsigned int nGlyphs
  /* this+0x20 */ int nMaxFit
}

struct tagGCP_RESULTSW {
  /* this+0x0 */ unsigned long lStructSize
  /* this+0x4 */ wchar_t * lpOutString
  /* this+0x8 */ unsigned int * lpOrder
  /* this+0xc */ int * lpDx
  /* this+0x10 */ int * lpCaretPos
  /* this+0x14 */ char * lpClass
  /* this+0x18 */ wchar_t * lpGlyphs
  /* this+0x1c */ unsigned int nGlyphs
  /* this+0x20 */ int nMaxFit
}

struct tagGESTURECONFIG {
  /* this+0x0 */ unsigned long dwID
  /* this+0x4 */ unsigned long dwWant
  /* this+0x8 */ unsigned long dwBlock
}

struct tagGESTUREINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long dwID
  /* this+0xc */ struct HWND__ * hwndTarget
  /* this+0x10 */ struct tagPOINTS ptsLocation

  /* this+0x14 */ unsigned long dwInstanceID
  /* this+0x18 */ unsigned long dwSequenceID
  /* this+0x20 */ unsigned __int64 ullArguments
  /* this+0x28 */ unsigned int cbExtraArgs
}

struct tagGESTURENOTIFYSTRUCT {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ struct HWND__ * hwndTarget
  /* this+0xc */ struct tagPOINTS ptsLocation

  /* this+0x10 */ unsigned long dwInstanceID
}

struct tagGLYPHSET {
  /* this+0x0 */ unsigned long cbThis
  /* this+0x4 */ unsigned long flAccel
  /* this+0x8 */ unsigned long cGlyphsSupported
  /* this+0xc */ unsigned long cRanges
  /* this+0x10 */ struct tagWCRANGE[0x1] ranges
}

struct tagGUITHREADINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long flags
  /* this+0x8 */ struct HWND__ * hwndActive
  /* this+0xc */ struct HWND__ * hwndFocus
  /* this+0x10 */ struct HWND__ * hwndCapture
  /* this+0x14 */ struct HWND__ * hwndMenuOwner
  /* this+0x18 */ struct HWND__ * hwndMoveSize
  /* this+0x1c */ struct HWND__ * hwndCaret
  /* this+0x20 */ struct tagRECT rcCaret

}

struct tagHANDLETABLE {
  /* this+0x0 */ void *[0x1] objectHandle
}

struct tagHARDWAREHOOKSTRUCT {
  /* this+0x0 */ struct HWND__ * hwnd
  /* this+0x4 */ unsigned int message
  /* this+0x8 */ unsigned int wParam
  /* this+0xc */ long lParam
}

struct tagHARDWAREINPUT {
  /* this+0x0 */ unsigned long uMsg
  /* this+0x4 */ unsigned short wParamL
  /* this+0x6 */ unsigned short wParamH
}

struct tagHELPINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iContextType
  /* this+0x8 */ int iCtrlId
  /* this+0xc */ void * hItemHandle
  /* this+0x10 */ unsigned long dwContextId
  /* this+0x14 */ struct tagPOINT MousePos

}

struct tagHELPWININFOA {
  /* this+0x0 */ int wStructSize
  /* this+0x4 */ int x
  /* this+0x8 */ int y
  /* this+0xc */ int dx
  /* this+0x10 */ int dy
  /* this+0x14 */ int wMax
  /* this+0x18 */ char[0x2] rgchMember
}

struct tagHELPWININFOW {
  /* this+0x0 */ int wStructSize
  /* this+0x4 */ int x
  /* this+0x8 */ int y
  /* this+0xc */ int dx
  /* this+0x10 */ int dy
  /* this+0x14 */ int wMax
  /* this+0x18 */ wchar_t[0x2] rgchMember
}

struct tagHIGHCONTRASTA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ char * lpszDefaultScheme
}

struct tagHIGHCONTRASTW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ wchar_t * lpszDefaultScheme
}

struct tagHW_PROFILE_INFOA {
  /* this+0x0 */ unsigned long dwDockInfo
  /* this+0x4 */ char[0x27] szHwProfileGuid
  /* this+0x2b */ char[0x50] szHwProfileName
}

struct tagHW_PROFILE_INFOW {
  /* this+0x0 */ unsigned long dwDockInfo
  /* this+0x4 */ wchar_t[0x27] szHwProfileGuid
  /* this+0x52 */ wchar_t[0x50] szHwProfileName
}

struct tagICEXYZTRIPLE {
  /* this+0x0 */ struct tagCIEXYZ ciexyzRed

  /* this+0xc */ struct tagCIEXYZ ciexyzGreen

  /* this+0x18 */ struct tagCIEXYZ ciexyzBlue

}

struct tagICONMETRICSA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iHorzSpacing
  /* this+0x8 */ int iVertSpacing
  /* this+0xc */ int iTitleWrap
  /* this+0x10 */ struct tagLOGFONTA lfFont

}

struct tagICONMETRICSW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iHorzSpacing
  /* this+0x8 */ int iVertSpacing
  /* this+0xc */ int iTitleWrap
  /* this+0x10 */ struct tagLOGFONTW lfFont

}

struct tagIDLDESC {
  /* this+0x0 */ unsigned long dwReserved
  /* this+0x4 */ unsigned short wIDLFlags
}

struct tagIMECHARPOSITION {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwCharPos
  /* this+0x8 */ struct tagPOINT pt

  /* this+0x10 */ unsigned int cLineHeight
  /* this+0x14 */ struct tagRECT rcDocument

}

struct tagIMEMENUITEMINFOA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fType
  /* this+0x8 */ unsigned int fState
  /* this+0xc */ unsigned int wID
  /* this+0x10 */ struct HBITMAP__ * hbmpChecked
  /* this+0x14 */ struct HBITMAP__ * hbmpUnchecked
  /* this+0x18 */ unsigned long dwItemData
  /* this+0x1c */ char[0x50] szString
  /* this+0x6c */ struct HBITMAP__ * hbmpItem
}

struct tagIMEMENUITEMINFOW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fType
  /* this+0x8 */ unsigned int fState
  /* this+0xc */ unsigned int wID
  /* this+0x10 */ struct HBITMAP__ * hbmpChecked
  /* this+0x14 */ struct HBITMAP__ * hbmpUnchecked
  /* this+0x18 */ unsigned long dwItemData
  /* this+0x1c */ wchar_t[0x50] szString
  /* this+0xbc */ struct HBITMAP__ * hbmpItem
}

struct tagINPUT {
  /* this+0x0 */ unsigned long type
  /* this+0x4 */ struct tagMOUSEINPUT mi

  /* this+0x4 */ struct tagKEYBDINPUT ki

  /* this+0x4 */ struct tagHARDWAREINPUT hi

}

struct tagJOYCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ char[0x20] szPname
  /* this+0x24 */ unsigned int wXmin
  /* this+0x28 */ unsigned int wXmax
  /* this+0x2c */ unsigned int wYmin
  /* this+0x30 */ unsigned int wYmax
  /* this+0x34 */ unsigned int wZmin
  /* this+0x38 */ unsigned int wZmax
  /* this+0x3c */ unsigned int wNumButtons
  /* this+0x40 */ unsigned int wPeriodMin
  /* this+0x44 */ unsigned int wPeriodMax
  /* this+0x48 */ unsigned int wRmin
  /* this+0x4c */ unsigned int wRmax
  /* this+0x50 */ unsigned int wUmin
  /* this+0x54 */ unsigned int wUmax
  /* this+0x58 */ unsigned int wVmin
  /* this+0x5c */ unsigned int wVmax
  /* this+0x60 */ unsigned int wCaps
  /* this+0x64 */ unsigned int wMaxAxes
  /* this+0x68 */ unsigned int wNumAxes
  /* this+0x6c */ unsigned int wMaxButtons
  /* this+0x70 */ char[0x20] szRegKey
  /* this+0x90 */ char[0x104] szOEMVxD
  /* this+0x194 */ struct _GUID ManufacturerGuid

  /* this+0x1a4 */ struct _GUID ProductGuid

  /* this+0x1b4 */ struct _GUID NameGuid

}

struct tagJOYCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ wchar_t[0x20] szPname
  /* this+0x44 */ unsigned int wXmin
  /* this+0x48 */ unsigned int wXmax
  /* this+0x4c */ unsigned int wYmin
  /* this+0x50 */ unsigned int wYmax
  /* this+0x54 */ unsigned int wZmin
  /* this+0x58 */ unsigned int wZmax
  /* this+0x5c */ unsigned int wNumButtons
  /* this+0x60 */ unsigned int wPeriodMin
  /* this+0x64 */ unsigned int wPeriodMax
  /* this+0x68 */ unsigned int wRmin
  /* this+0x6c */ unsigned int wRmax
  /* this+0x70 */ unsigned int wUmin
  /* this+0x74 */ unsigned int wUmax
  /* this+0x78 */ unsigned int wVmin
  /* this+0x7c */ unsigned int wVmax
  /* this+0x80 */ unsigned int wCaps
  /* this+0x84 */ unsigned int wMaxAxes
  /* this+0x88 */ unsigned int wNumAxes
  /* this+0x8c */ unsigned int wMaxButtons
  /* this+0x90 */ wchar_t[0x20] szRegKey
  /* this+0xd0 */ wchar_t[0x104] szOEMVxD
  /* this+0x2d8 */ struct _GUID ManufacturerGuid

  /* this+0x2e8 */ struct _GUID ProductGuid

  /* this+0x2f8 */ struct _GUID NameGuid

}

struct tagJOYCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ char[0x20] szPname
  /* this+0x24 */ unsigned int wXmin
  /* this+0x28 */ unsigned int wXmax
  /* this+0x2c */ unsigned int wYmin
  /* this+0x30 */ unsigned int wYmax
  /* this+0x34 */ unsigned int wZmin
  /* this+0x38 */ unsigned int wZmax
  /* this+0x3c */ unsigned int wNumButtons
  /* this+0x40 */ unsigned int wPeriodMin
  /* this+0x44 */ unsigned int wPeriodMax
  /* this+0x48 */ unsigned int wRmin
  /* this+0x4c */ unsigned int wRmax
  /* this+0x50 */ unsigned int wUmin
  /* this+0x54 */ unsigned int wUmax
  /* this+0x58 */ unsigned int wVmin
  /* this+0x5c */ unsigned int wVmax
  /* this+0x60 */ unsigned int wCaps
  /* this+0x64 */ unsigned int wMaxAxes
  /* this+0x68 */ unsigned int wNumAxes
  /* this+0x6c */ unsigned int wMaxButtons
  /* this+0x70 */ char[0x20] szRegKey
  /* this+0x90 */ char[0x104] szOEMVxD
}

struct tagJOYCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ wchar_t[0x20] szPname
  /* this+0x44 */ unsigned int wXmin
  /* this+0x48 */ unsigned int wXmax
  /* this+0x4c */ unsigned int wYmin
  /* this+0x50 */ unsigned int wYmax
  /* this+0x54 */ unsigned int wZmin
  /* this+0x58 */ unsigned int wZmax
  /* this+0x5c */ unsigned int wNumButtons
  /* this+0x60 */ unsigned int wPeriodMin
  /* this+0x64 */ unsigned int wPeriodMax
  /* this+0x68 */ unsigned int wRmin
  /* this+0x6c */ unsigned int wRmax
  /* this+0x70 */ unsigned int wUmin
  /* this+0x74 */ unsigned int wUmax
  /* this+0x78 */ unsigned int wVmin
  /* this+0x7c */ unsigned int wVmax
  /* this+0x80 */ unsigned int wCaps
  /* this+0x84 */ unsigned int wMaxAxes
  /* this+0x88 */ unsigned int wNumAxes
  /* this+0x8c */ unsigned int wMaxButtons
  /* this+0x90 */ wchar_t[0x20] szRegKey
  /* this+0xd0 */ wchar_t[0x104] szOEMVxD
}

struct tagKBDLLHOOKSTRUCT {
  /* this+0x0 */ unsigned long vkCode
  /* this+0x4 */ unsigned long scanCode
  /* this+0x8 */ unsigned long flags
  /* this+0xc */ unsigned long time
  /* this+0x10 */ unsigned long dwExtraInfo
}

struct tagKERNINGPAIR {
  /* this+0x0 */ unsigned short wFirst
  /* this+0x2 */ unsigned short wSecond
  /* this+0x4 */ int iKernAmount
}

struct tagKEYBDINPUT {
  /* this+0x0 */ unsigned short wVk
  /* this+0x2 */ unsigned short wScan
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long time
  /* this+0xc */ unsigned long dwExtraInfo
}

struct tagLASTINPUTINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwTime
}

struct tagLAYERPLANEDESCRIPTOR {
  /* this+0x0 */ unsigned short nSize
  /* this+0x2 */ unsigned short nVersion
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned char iPixelType
  /* this+0x9 */ unsigned char cColorBits
  /* this+0xa */ unsigned char cRedBits
  /* this+0xb */ unsigned char cRedShift
  /* this+0xc */ unsigned char cGreenBits
  /* this+0xd */ unsigned char cGreenShift
  /* this+0xe */ unsigned char cBlueBits
  /* this+0xf */ unsigned char cBlueShift
  /* this+0x10 */ unsigned char cAlphaBits
  /* this+0x11 */ unsigned char cAlphaShift
  /* this+0x12 */ unsigned char cAccumBits
  /* this+0x13 */ unsigned char cAccumRedBits
  /* this+0x14 */ unsigned char cAccumGreenBits
  /* this+0x15 */ unsigned char cAccumBlueBits
  /* this+0x16 */ unsigned char cAccumAlphaBits
  /* this+0x17 */ unsigned char cDepthBits
  /* this+0x18 */ unsigned char cStencilBits
  /* this+0x19 */ unsigned char cAuxBuffers
  /* this+0x1a */ unsigned char iLayerPlane
  /* this+0x1b */ unsigned char bReserved
  /* this+0x1c */ unsigned long crTransparent
}

struct tagLC_ID {
  /* this+0x0 */ unsigned short wLanguage
  /* this+0x2 */ unsigned short wCountry
  /* this+0x4 */ unsigned short wCodePage
}

struct tagLC_STRINGS {
  /* this+0x0 */ char[0x40] szLanguage
  /* this+0x40 */ char[0x40] szCountry
  /* this+0x80 */ char[0x10] szCodePage
}

struct tagLOCALESIGNATURE {
  /* this+0x0 */ unsigned long[0x4] lsUsb
  /* this+0x10 */ unsigned long[0x2] lsCsbDefault
  /* this+0x18 */ unsigned long[0x2] lsCsbSupported
}

struct tagLOCALETAB {
  /* this+0x0 */ char * szName
  /* this+0x4 */ char[0x4] chAbbrev
}

struct tagLOGBRUSH {
  /* this+0x0 */ unsigned int lbStyle
  /* this+0x4 */ unsigned long lbColor
  /* this+0x8 */ unsigned long lbHatch
}

struct tagLOGBRUSH32 {
  /* this+0x0 */ unsigned int lbStyle
  /* this+0x4 */ unsigned long lbColor
  /* this+0x8 */ unsigned long lbHatch
}

struct tagLOGCOLORSPACEA {
  /* this+0x0 */ unsigned long lcsSignature
  /* this+0x4 */ unsigned long lcsVersion
  /* this+0x8 */ unsigned long lcsSize
  /* this+0xc */ long lcsCSType
  /* this+0x10 */ long lcsIntent
  /* this+0x14 */ struct tagICEXYZTRIPLE lcsEndpoints

  /* this+0x38 */ unsigned long lcsGammaRed
  /* this+0x3c */ unsigned long lcsGammaGreen
  /* this+0x40 */ unsigned long lcsGammaBlue
  /* this+0x44 */ char[0x104] lcsFilename
}

struct tagLOGCOLORSPACEW {
  /* this+0x0 */ unsigned long lcsSignature
  /* this+0x4 */ unsigned long lcsVersion
  /* this+0x8 */ unsigned long lcsSize
  /* this+0xc */ long lcsCSType
  /* this+0x10 */ long lcsIntent
  /* this+0x14 */ struct tagICEXYZTRIPLE lcsEndpoints

  /* this+0x38 */ unsigned long lcsGammaRed
  /* this+0x3c */ unsigned long lcsGammaGreen
  /* this+0x40 */ unsigned long lcsGammaBlue
  /* this+0x44 */ wchar_t[0x104] lcsFilename
}

struct tagLOGFONTA {
  /* this+0x0 */ long lfHeight
  /* this+0x4 */ long lfWidth
  /* this+0x8 */ long lfEscapement
  /* this+0xc */ long lfOrientation
  /* this+0x10 */ long lfWeight
  /* this+0x14 */ unsigned char lfItalic
  /* this+0x15 */ unsigned char lfUnderline
  /* this+0x16 */ unsigned char lfStrikeOut
  /* this+0x17 */ unsigned char lfCharSet
  /* this+0x18 */ unsigned char lfOutPrecision
  /* this+0x19 */ unsigned char lfClipPrecision
  /* this+0x1a */ unsigned char lfQuality
  /* this+0x1b */ unsigned char lfPitchAndFamily
  /* this+0x1c */ char[0x20] lfFaceName
}

struct tagLOGFONTW {
  /* this+0x0 */ long lfHeight
  /* this+0x4 */ long lfWidth
  /* this+0x8 */ long lfEscapement
  /* this+0xc */ long lfOrientation
  /* this+0x10 */ long lfWeight
  /* this+0x14 */ unsigned char lfItalic
  /* this+0x15 */ unsigned char lfUnderline
  /* this+0x16 */ unsigned char lfStrikeOut
  /* this+0x17 */ unsigned char lfCharSet
  /* this+0x18 */ unsigned char lfOutPrecision
  /* this+0x19 */ unsigned char lfClipPrecision
  /* this+0x1a */ unsigned char lfQuality
  /* this+0x1b */ unsigned char lfPitchAndFamily
  /* this+0x1c */ wchar_t[0x20] lfFaceName
}

struct tagLOGPALETTE {
  /* this+0x0 */ unsigned short palVersion
  /* this+0x2 */ unsigned short palNumEntries
  /* this+0x4 */ struct tagPALETTEENTRY[0x1] palPalEntry
}

struct tagLOGPEN {
  /* this+0x0 */ unsigned int lopnStyle
  /* this+0x4 */ struct tagPOINT lopnWidth

  /* this+0xc */ unsigned long lopnColor
}

struct tagMCI_ANIM_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const char * lpstrDeviceType
  /* this+0xc */ const char * lpstrElementName
  /* this+0x10 */ const char * lpstrAlias
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ struct HWND__ * hWndParent
}

struct tagMCI_ANIM_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const wchar_t * lpstrDeviceType
  /* this+0xc */ const wchar_t * lpstrElementName
  /* this+0x10 */ const wchar_t * lpstrAlias
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ struct HWND__ * hWndParent
}

struct tagMCI_ANIM_PLAY_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
  /* this+0xc */ unsigned long dwSpeed
}

struct tagMCI_ANIM_RECT_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct tagRECT rc

}

struct tagMCI_ANIM_STEP_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrames
}

struct tagMCI_ANIM_UPDATE_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct tagRECT rc

  /* this+0x14 */ struct HDC__ * hDC
}

struct tagMCI_ANIM_WINDOW_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct HWND__ * hWnd
  /* this+0x8 */ unsigned int nCmdShow
  /* this+0xc */ const char * lpstrText
}

struct tagMCI_ANIM_WINDOW_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct HWND__ * hWnd
  /* this+0x8 */ unsigned int nCmdShow
  /* this+0xc */ const wchar_t * lpstrText
}

struct tagMCI_BREAK_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ int nVirtKey
  /* this+0x8 */ struct HWND__ * hwndBreak
}

struct tagMCI_GENERIC_PARMS {
  /* this+0x0 */ unsigned long dwCallback
}

struct tagMCI_GETDEVCAPS_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwReturn
  /* this+0x8 */ unsigned long dwItem
}

struct tagMCI_INFO_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ char * lpstrReturn
  /* this+0x8 */ unsigned long dwRetSize
}

struct tagMCI_INFO_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ wchar_t * lpstrReturn
  /* this+0x8 */ unsigned long dwRetSize
}

struct tagMCI_LOAD_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpfilename
}

struct tagMCI_LOAD_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpfilename
}

struct tagMCI_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const char * lpstrDeviceType
  /* this+0xc */ const char * lpstrElementName
  /* this+0x10 */ const char * lpstrAlias
}

struct tagMCI_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const wchar_t * lpstrDeviceType
  /* this+0xc */ const wchar_t * lpstrElementName
  /* this+0x10 */ const wchar_t * lpstrAlias
}

struct tagMCI_OVLY_LOAD_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpfilename
  /* this+0x8 */ struct tagRECT rc

}

struct tagMCI_OVLY_LOAD_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpfilename
  /* this+0x8 */ struct tagRECT rc

}

struct tagMCI_OVLY_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const char * lpstrDeviceType
  /* this+0xc */ const char * lpstrElementName
  /* this+0x10 */ const char * lpstrAlias
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ struct HWND__ * hWndParent
}

struct tagMCI_OVLY_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const wchar_t * lpstrDeviceType
  /* this+0xc */ const wchar_t * lpstrElementName
  /* this+0x10 */ const wchar_t * lpstrAlias
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ struct HWND__ * hWndParent
}

struct tagMCI_OVLY_RECT_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct tagRECT rc

}

struct tagMCI_OVLY_SAVE_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpfilename
  /* this+0x8 */ struct tagRECT rc

}

struct tagMCI_OVLY_SAVE_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpfilename
  /* this+0x8 */ struct tagRECT rc

}

struct tagMCI_OVLY_WINDOW_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct HWND__ * hWnd
  /* this+0x8 */ unsigned int nCmdShow
  /* this+0xc */ const char * lpstrText
}

struct tagMCI_OVLY_WINDOW_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct HWND__ * hWnd
  /* this+0x8 */ unsigned int nCmdShow
  /* this+0xc */ const wchar_t * lpstrText
}

struct tagMCI_PLAY_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
}

struct tagMCI_RECORD_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
}

struct tagMCI_SAVE_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpfilename
}

struct tagMCI_SAVE_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpfilename
}

struct tagMCI_SEEK_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwTo
}

struct tagMCI_SEQ_SET_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwTimeFormat
  /* this+0x8 */ unsigned long dwAudio
  /* this+0xc */ unsigned long dwTempo
  /* this+0x10 */ unsigned long dwPort
  /* this+0x14 */ unsigned long dwSlave
  /* this+0x18 */ unsigned long dwMaster
  /* this+0x1c */ unsigned long dwOffset
}

struct tagMCI_SET_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwTimeFormat
  /* this+0x8 */ unsigned long dwAudio
}

struct tagMCI_STATUS_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwReturn
  /* this+0x8 */ unsigned long dwItem
  /* this+0xc */ unsigned long dwTrack
}

struct tagMCI_SYSINFO_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ char * lpstrReturn
  /* this+0x8 */ unsigned long dwRetSize
  /* this+0xc */ unsigned long dwNumber
  /* this+0x10 */ unsigned int wDeviceType
}

struct tagMCI_SYSINFO_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ wchar_t * lpstrReturn
  /* this+0x8 */ unsigned long dwRetSize
  /* this+0xc */ unsigned long dwNumber
  /* this+0x10 */ unsigned int wDeviceType
}

struct tagMCI_VD_ESCAPE_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpstrCommand
}

struct tagMCI_VD_ESCAPE_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpstrCommand
}

struct tagMCI_VD_PLAY_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
  /* this+0xc */ unsigned long dwSpeed
}

struct tagMCI_VD_STEP_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrames
}

struct tagMCI_WAVE_DELETE_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
}

struct tagMCI_WAVE_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const char * lpstrDeviceType
  /* this+0xc */ const char * lpstrElementName
  /* this+0x10 */ const char * lpstrAlias
  /* this+0x14 */ unsigned long dwBufferSeconds
}

struct tagMCI_WAVE_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const wchar_t * lpstrDeviceType
  /* this+0xc */ const wchar_t * lpstrElementName
  /* this+0x10 */ const wchar_t * lpstrAlias
  /* this+0x14 */ unsigned long dwBufferSeconds
}

struct tagMCI_WAVE_SET_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwTimeFormat
  /* this+0x8 */ unsigned long dwAudio
  /* this+0xc */ unsigned int wInput
  /* this+0x10 */ unsigned int wOutput
  /* this+0x14 */ unsigned short wFormatTag
  /* this+0x16 */ unsigned short wReserved2
  /* this+0x18 */ unsigned short nChannels
  /* this+0x1a */ unsigned short wReserved3
  /* this+0x1c */ unsigned long nSamplesPerSec
  /* this+0x20 */ unsigned long nAvgBytesPerSec
  /* this+0x24 */ unsigned short nBlockAlign
  /* this+0x26 */ unsigned short wReserved4
  /* this+0x28 */ unsigned short wBitsPerSample
  /* this+0x2a */ unsigned short wReserved5
}

struct tagMDICREATESTRUCTA {
  /* this+0x0 */ const char * szClass
  /* this+0x4 */ const char * szTitle
  /* this+0x8 */ void * hOwner
  /* this+0xc */ int x
  /* this+0x10 */ int y
  /* this+0x14 */ int cx
  /* this+0x18 */ int cy
  /* this+0x1c */ unsigned long style
  /* this+0x20 */ long lParam
}

struct tagMDICREATESTRUCTW {
  /* this+0x0 */ const wchar_t * szClass
  /* this+0x4 */ const wchar_t * szTitle
  /* this+0x8 */ void * hOwner
  /* this+0xc */ int x
  /* this+0x10 */ int y
  /* this+0x14 */ int cx
  /* this+0x18 */ int cy
  /* this+0x1c */ unsigned long style
  /* this+0x20 */ long lParam
}

struct tagMDINEXTMENU {
  /* this+0x0 */ struct HMENU__ * hmenuIn
  /* this+0x4 */ struct HMENU__ * hmenuNext
  /* this+0x8 */ struct HWND__ * hwndNext
}

struct tagMEASUREITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType
  /* this+0x4 */ unsigned int CtlID
  /* this+0x8 */ unsigned int itemID
  /* this+0xc */ unsigned int itemWidth
  /* this+0x10 */ unsigned int itemHeight
  /* this+0x14 */ unsigned long itemData
}

struct tagMENUBARINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcBar

  /* this+0x14 */ struct HMENU__ * hMenu
  /* this+0x18 */ struct HWND__ * hwndMenu
  /* this(bf)+0x1c:0x0 len(0x1) */ int fBarFocused
  /* this(bf)+0x1c:0x1 len(0x1) */ int fFocused
}

struct tagMENUGETOBJECTINFO {
  /* this+0x0 */ unsigned long dwFlags
  /* this+0x4 */ unsigned int uPos
  /* this+0x8 */ struct HMENU__ * hmenu
  /* this+0xc */ void * riid
  /* this+0x10 */ void * pvObj
}

struct tagMENUINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long fMask
  /* this+0x8 */ unsigned long dwStyle
  /* this+0xc */ unsigned int cyMax
  /* this+0x10 */ struct HBRUSH__ * hbrBack
  /* this+0x14 */ unsigned long dwContextHelpID
  /* this+0x18 */ unsigned long dwMenuData
}

struct tagMENUITEMINFOA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fMask
  /* this+0x8 */ unsigned int fType
  /* this+0xc */ unsigned int fState
  /* this+0x10 */ unsigned int wID
  /* this+0x14 */ struct HMENU__ * hSubMenu
  /* this+0x18 */ struct HBITMAP__ * hbmpChecked
  /* this+0x1c */ struct HBITMAP__ * hbmpUnchecked
  /* this+0x20 */ unsigned long dwItemData
  /* this+0x24 */ char * dwTypeData
  /* this+0x28 */ unsigned int cch
  /* this+0x2c */ struct HBITMAP__ * hbmpItem
}

struct tagMENUITEMINFOW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fMask
  /* this+0x8 */ unsigned int fType
  /* this+0xc */ unsigned int fState
  /* this+0x10 */ unsigned int wID
  /* this+0x14 */ struct HMENU__ * hSubMenu
  /* this+0x18 */ struct HBITMAP__ * hbmpChecked
  /* this+0x1c */ struct HBITMAP__ * hbmpUnchecked
  /* this+0x20 */ unsigned long dwItemData
  /* this+0x24 */ wchar_t * dwTypeData
  /* this+0x28 */ unsigned int cch
  /* this+0x2c */ struct HBITMAP__ * hbmpItem
}

struct tagMETAFILEPICT {
  /* this+0x0 */ long mm
  /* this+0x4 */ long xExt
  /* this+0x8 */ long yExt
  /* this+0xc */ struct HMETAFILE__ * hMF
}

struct tagMETAHEADER {
  /* this+0x0 */ unsigned short mtType
  /* this+0x2 */ unsigned short mtHeaderSize
  /* this+0x4 */ unsigned short mtVersion
  /* this+0x6 */ unsigned long mtSize
  /* this+0xa */ unsigned short mtNoObjects
  /* this+0xc */ unsigned long mtMaxRecord
  /* this+0x10 */ unsigned short mtNoParameters
}

struct tagMETARECORD {
  /* this+0x0 */ unsigned long rdSize
  /* this+0x4 */ unsigned short rdFunction
  /* this+0x6 */ unsigned short[0x1] rdParm
}

struct tagMIDIINCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwSupport
  /* this+0x2c */ struct _GUID ManufacturerGuid

  /* this+0x3c */ struct _GUID ProductGuid

  /* this+0x4c */ struct _GUID NameGuid

}

struct tagMIDIINCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwSupport
  /* this+0x4c */ struct _GUID ManufacturerGuid

  /* this+0x5c */ struct _GUID ProductGuid

  /* this+0x6c */ struct _GUID NameGuid

}

struct tagMIDIINCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwSupport
}

struct tagMIDIINCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwSupport
}

struct tagMIDIOUTCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned short wTechnology
  /* this+0x2a */ unsigned short wVoices
  /* this+0x2c */ unsigned short wNotes
  /* this+0x2e */ unsigned short wChannelMask
  /* this+0x30 */ unsigned long dwSupport
  /* this+0x34 */ struct _GUID ManufacturerGuid

  /* this+0x44 */ struct _GUID ProductGuid

  /* this+0x54 */ struct _GUID NameGuid

}

struct tagMIDIOUTCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned short wTechnology
  /* this+0x4a */ unsigned short wVoices
  /* this+0x4c */ unsigned short wNotes
  /* this+0x4e */ unsigned short wChannelMask
  /* this+0x50 */ unsigned long dwSupport
  /* this+0x54 */ struct _GUID ManufacturerGuid

  /* this+0x64 */ struct _GUID ProductGuid

  /* this+0x74 */ struct _GUID NameGuid

}

struct tagMIDIOUTCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned short wTechnology
  /* this+0x2a */ unsigned short wVoices
  /* this+0x2c */ unsigned short wNotes
  /* this+0x2e */ unsigned short wChannelMask
  /* this+0x30 */ unsigned long dwSupport
}

struct tagMIDIOUTCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned short wTechnology
  /* this+0x4a */ unsigned short wVoices
  /* this+0x4c */ unsigned short wNotes
  /* this+0x4e */ unsigned short wChannelMask
  /* this+0x50 */ unsigned long dwSupport
}

struct tagMINIMIZEDMETRICS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iWidth
  /* this+0x8 */ int iHorzGap
  /* this+0xc */ int iVertGap
  /* this+0x10 */ int iArrange
}

struct tagMINMAXINFO {
  /* this+0x0 */ struct tagPOINT ptReserved

  /* this+0x8 */ struct tagPOINT ptMaxSize

  /* this+0x10 */ struct tagPOINT ptMaxPosition

  /* this+0x18 */ struct tagPOINT ptMinTrackSize

  /* this+0x20 */ struct tagPOINT ptMaxTrackSize

}

struct tagMIXERCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long fdwSupport
  /* this+0x2c */ unsigned long cDestinations
  /* this+0x30 */ struct _GUID ManufacturerGuid

  /* this+0x40 */ struct _GUID ProductGuid

  /* this+0x50 */ struct _GUID NameGuid

}

struct tagMIXERCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long fdwSupport
  /* this+0x4c */ unsigned long cDestinations
  /* this+0x50 */ struct _GUID ManufacturerGuid

  /* this+0x60 */ struct _GUID ProductGuid

  /* this+0x70 */ struct _GUID NameGuid

}

struct tagMIXERCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long fdwSupport
  /* this+0x2c */ unsigned long cDestinations
}

struct tagMIXERCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long fdwSupport
  /* this+0x4c */ unsigned long cDestinations
}

struct tagMIXERCONTROLA {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long dwControlType
  /* this+0xc */ unsigned long fdwControl
  /* this+0x10 */ unsigned long cMultipleItems
  /* this+0x14 */ char[0x10] szShortName
  /* this+0x24 */ char[0x40] szName
    /* this+0x64 */ union tagMIXERCONTROLA::<unnamed-type-Bounds> Bounds

    /* this+0x7c */ union tagMIXERCONTROLA::<unnamed-type-Metrics> Metrics

}

union tagMIXERCONTROLA::<unnamed-type-Bounds> {
  /* this+0x0 */ long lMinimum
  /* this+0x4 */ long lMaximum
  /* this+0x0 */ unsigned long dwMinimum
  /* this+0x4 */ unsigned long dwMaximum
  /* this+0x0 */ unsigned long[0x6] dwReserved
}

union tagMIXERCONTROLA::<unnamed-type-Metrics> {
  /* this+0x0 */ unsigned long cSteps
  /* this+0x0 */ unsigned long cbCustomData
  /* this+0x0 */ unsigned long[0x6] dwReserved
}

struct tagMIXERCONTROLDETAILS_LISTTEXTA {
  /* this+0x0 */ unsigned long dwParam1
  /* this+0x4 */ unsigned long dwParam2
  /* this+0x8 */ char[0x40] szName
}

struct tagMIXERCONTROLDETAILS_LISTTEXTW {
  /* this+0x0 */ unsigned long dwParam1
  /* this+0x4 */ unsigned long dwParam2
  /* this+0x8 */ wchar_t[0x40] szName
}

struct tagMIXERCONTROLW {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long dwControlType
  /* this+0xc */ unsigned long fdwControl
  /* this+0x10 */ unsigned long cMultipleItems
  /* this+0x14 */ wchar_t[0x10] szShortName
  /* this+0x34 */ wchar_t[0x40] szName
    /* this+0xb4 */ union tagMIXERCONTROLW::<unnamed-type-Bounds> Bounds

    /* this+0xcc */ union tagMIXERCONTROLW::<unnamed-type-Metrics> Metrics

}

union tagMIXERCONTROLW::<unnamed-type-Bounds> {
  /* this+0x0 */ long lMinimum
  /* this+0x4 */ long lMaximum
  /* this+0x0 */ unsigned long dwMinimum
  /* this+0x4 */ unsigned long dwMaximum
  /* this+0x0 */ unsigned long[0x6] dwReserved
}

union tagMIXERCONTROLW::<unnamed-type-Metrics> {
  /* this+0x0 */ unsigned long cSteps
  /* this+0x0 */ unsigned long cbCustomData
  /* this+0x0 */ unsigned long[0x6] dwReserved
}

struct tagMIXERLINEA {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwDestination
  /* this+0x8 */ unsigned long dwSource
  /* this+0xc */ unsigned long dwLineID
  /* this+0x10 */ unsigned long fdwLine
  /* this+0x14 */ unsigned long dwUser
  /* this+0x18 */ unsigned long dwComponentType
  /* this+0x1c */ unsigned long cChannels
  /* this+0x20 */ unsigned long cConnections
  /* this+0x24 */ unsigned long cControls
  /* this+0x28 */ char[0x10] szShortName
  /* this+0x38 */ char[0x40] szName
    /* this+0x78 */ struct tagMIXERLINEA::<unnamed-type-Target> Target

}

struct tagMIXERLINEA::<unnamed-type-Target> {
  /* this+0x0 */ unsigned long dwType
  /* this+0x4 */ unsigned long dwDeviceID
  /* this+0x8 */ unsigned short wMid
  /* this+0xa */ unsigned short wPid
  /* this+0xc */ unsigned int vDriverVersion
  /* this+0x10 */ char[0x20] szPname
}

struct tagMIXERLINECONTROLSA {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwLineID
  /* this+0x8 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long dwControlType
  /* this+0xc */ unsigned long cControls
  /* this+0x10 */ unsigned long cbmxctrl
  /* this+0x14 */ struct tagMIXERCONTROLA * pamxctrl
}

struct tagMIXERLINECONTROLSW {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwLineID
  /* this+0x8 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long dwControlType
  /* this+0xc */ unsigned long cControls
  /* this+0x10 */ unsigned long cbmxctrl
  /* this+0x14 */ struct tagMIXERCONTROLW * pamxctrl
}

struct tagMIXERLINEW {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwDestination
  /* this+0x8 */ unsigned long dwSource
  /* this+0xc */ unsigned long dwLineID
  /* this+0x10 */ unsigned long fdwLine
  /* this+0x14 */ unsigned long dwUser
  /* this+0x18 */ unsigned long dwComponentType
  /* this+0x1c */ unsigned long cChannels
  /* this+0x20 */ unsigned long cConnections
  /* this+0x24 */ unsigned long cControls
  /* this+0x28 */ wchar_t[0x10] szShortName
  /* this+0x48 */ wchar_t[0x40] szName
    /* this+0xc8 */ struct tagMIXERLINEW::<unnamed-type-Target> Target

}

struct tagMIXERLINEW::<unnamed-type-Target> {
  /* this+0x0 */ unsigned long dwType
  /* this+0x4 */ unsigned long dwDeviceID
  /* this+0x8 */ unsigned short wMid
  /* this+0xa */ unsigned short wPid
  /* this+0xc */ unsigned int vDriverVersion
  /* this+0x10 */ wchar_t[0x20] szPname
}

struct tagMONITORINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcMonitor

  /* this+0x14 */ struct tagRECT rcWork

  /* this+0x24 */ unsigned long dwFlags
}

struct tagMONITORINFOEXA {
  tagMONITORINFO, offset = 0x0

  /* this+0x28 */ char[0x20] szDevice
}

struct tagMONITORINFOEXW {
  tagMONITORINFO, offset = 0x0

  /* this+0x28 */ wchar_t[0x20] szDevice
}

struct tagMOUSEHOOKSTRUCT {
  /* this+0x0 */ struct tagPOINT pt

  /* this+0x8 */ struct HWND__ * hwnd
  /* this+0xc */ unsigned int wHitTestCode
  /* this+0x10 */ unsigned long dwExtraInfo
}

struct tagMOUSEHOOKSTRUCTEX {
  tagMOUSEHOOKSTRUCT, offset = 0x0

  /* this+0x14 */ unsigned long mouseData
}

struct tagMOUSEINPUT {
  /* this+0x0 */ long dx
  /* this+0x4 */ long dy
  /* this+0x8 */ unsigned long mouseData
  /* this+0xc */ unsigned long dwFlags
  /* this+0x10 */ unsigned long time
  /* this+0x14 */ unsigned long dwExtraInfo
}

struct tagMOUSEKEYS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iMaxSpeed
  /* this+0xc */ unsigned long iTimeToMaxSpeed
  /* this+0x10 */ unsigned long iCtrlSpeed
  /* this+0x14 */ unsigned long dwReserved1
  /* this+0x18 */ unsigned long dwReserved2
}

struct tagMOUSEMOVEPOINT {
  /* this+0x0 */ int x
  /* this+0x4 */ int y
  /* this+0x8 */ unsigned long time
  /* this+0xc */ unsigned long dwExtraInfo
}

struct tagMSG {
  /* this+0x0 */ struct HWND__ * hwnd
  /* this+0x4 */ unsigned int message
  /* this+0x8 */ unsigned int wParam
  /* this+0xc */ long lParam
  /* this+0x10 */ unsigned long time
  /* this+0x14 */ struct tagPOINT pt

}

struct tagMSGBOXPARAMSA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ struct HINSTANCE__ * hInstance
  /* this+0xc */ const char * lpszText
  /* this+0x10 */ const char * lpszCaption
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ const char * lpszIcon
  /* this+0x1c */ unsigned long dwContextHelpId
  /* this+0x20 */ function  * lpfnMsgBoxCallback
  /* this+0x24 */ unsigned long dwLanguageId
}

struct tagMSGBOXPARAMSW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ struct HINSTANCE__ * hInstance
  /* this+0xc */ const wchar_t * lpszText
  /* this+0x10 */ const wchar_t * lpszCaption
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ const wchar_t * lpszIcon
  /* this+0x1c */ unsigned long dwContextHelpId
  /* this+0x20 */ function  * lpfnMsgBoxCallback
  /* this+0x24 */ unsigned long dwLanguageId
}

struct tagMSLLHOOKSTRUCT {
  /* this+0x0 */ struct tagPOINT pt

  /* this+0x8 */ unsigned long mouseData
  /* this+0xc */ unsigned long flags
  /* this+0x10 */ unsigned long time
  /* this+0x14 */ unsigned long dwExtraInfo
}

struct tagMULTIKEYHELPA {
  /* this+0x0 */ unsigned long mkSize
  /* this+0x4 */ char mkKeylist
  /* this+0x5 */ char[0x1] szKeyphrase
}

struct tagMULTIKEYHELPW {
  /* this+0x0 */ unsigned long mkSize
  /* this+0x4 */ wchar_t mkKeylist
  /* this+0x6 */ wchar_t[0x1] szKeyphrase
}

struct tagNCCALCSIZE_PARAMS {
  /* this+0x0 */ struct tagRECT[0x3] rgrc
  /* this+0x30 */ struct tagWINDOWPOS * lppos
}

struct tagNEWTEXTMETRICA {
  /* this+0x0 */ long tmHeight
  /* this+0x4 */ long tmAscent
  /* this+0x8 */ long tmDescent
  /* this+0xc */ long tmInternalLeading
  /* this+0x10 */ long tmExternalLeading
  /* this+0x14 */ long tmAveCharWidth
  /* this+0x18 */ long tmMaxCharWidth
  /* this+0x1c */ long tmWeight
  /* this+0x20 */ long tmOverhang
  /* this+0x24 */ long tmDigitizedAspectX
  /* this+0x28 */ long tmDigitizedAspectY
  /* this+0x2c */ unsigned char tmFirstChar
  /* this+0x2d */ unsigned char tmLastChar
  /* this+0x2e */ unsigned char tmDefaultChar
  /* this+0x2f */ unsigned char tmBreakChar
  /* this+0x30 */ unsigned char tmItalic
  /* this+0x31 */ unsigned char tmUnderlined
  /* this+0x32 */ unsigned char tmStruckOut
  /* this+0x33 */ unsigned char tmPitchAndFamily
  /* this+0x34 */ unsigned char tmCharSet
  /* this+0x38 */ unsigned long ntmFlags
  /* this+0x3c */ unsigned int ntmSizeEM
  /* this+0x40 */ unsigned int ntmCellHeight
  /* this+0x44 */ unsigned int ntmAvgWidth
}

struct tagNEWTEXTMETRICEXA {
  /* this+0x0 */ struct tagNEWTEXTMETRICA ntmTm

  /* this+0x48 */ struct tagFONTSIGNATURE ntmFontSig

}

struct tagNEWTEXTMETRICEXW {
  /* this+0x0 */ struct tagNEWTEXTMETRICW ntmTm

  /* this+0x4c */ struct tagFONTSIGNATURE ntmFontSig

}

struct tagNEWTEXTMETRICW {
  /* this+0x0 */ long tmHeight
  /* this+0x4 */ long tmAscent
  /* this+0x8 */ long tmDescent
  /* this+0xc */ long tmInternalLeading
  /* this+0x10 */ long tmExternalLeading
  /* this+0x14 */ long tmAveCharWidth
  /* this+0x18 */ long tmMaxCharWidth
  /* this+0x1c */ long tmWeight
  /* this+0x20 */ long tmOverhang
  /* this+0x24 */ long tmDigitizedAspectX
  /* this+0x28 */ long tmDigitizedAspectY
  /* this+0x2c */ wchar_t tmFirstChar
  /* this+0x2e */ wchar_t tmLastChar
  /* this+0x30 */ wchar_t tmDefaultChar
  /* this+0x32 */ wchar_t tmBreakChar
  /* this+0x34 */ unsigned char tmItalic
  /* this+0x35 */ unsigned char tmUnderlined
  /* this+0x36 */ unsigned char tmStruckOut
  /* this+0x37 */ unsigned char tmPitchAndFamily
  /* this+0x38 */ unsigned char tmCharSet
  /* this+0x3c */ unsigned long ntmFlags
  /* this+0x40 */ unsigned int ntmSizeEM
  /* this+0x44 */ unsigned int ntmCellHeight
  /* this+0x48 */ unsigned int ntmAvgWidth
}

struct tagNMHDR {
  /* this+0x0 */ struct HWND__ * hwndFrom
  /* this+0x4 */ unsigned int idFrom
  /* this+0x8 */ unsigned int code
}

struct tagNONCLIENTMETRICSA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iBorderWidth
  /* this+0x8 */ int iScrollWidth
  /* this+0xc */ int iScrollHeight
  /* this+0x10 */ int iCaptionWidth
  /* this+0x14 */ int iCaptionHeight
  /* this+0x18 */ struct tagLOGFONTA lfCaptionFont

  /* this+0x54 */ int iSmCaptionWidth
  /* this+0x58 */ int iSmCaptionHeight
  /* this+0x5c */ struct tagLOGFONTA lfSmCaptionFont

  /* this+0x98 */ int iMenuWidth
  /* this+0x9c */ int iMenuHeight
  /* this+0xa0 */ struct tagLOGFONTA lfMenuFont

  /* this+0xdc */ struct tagLOGFONTA lfStatusFont

  /* this+0x118 */ struct tagLOGFONTA lfMessageFont

  /* this+0x154 */ int iPaddedBorderWidth
}

struct tagNONCLIENTMETRICSW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iBorderWidth
  /* this+0x8 */ int iScrollWidth
  /* this+0xc */ int iScrollHeight
  /* this+0x10 */ int iCaptionWidth
  /* this+0x14 */ int iCaptionHeight
  /* this+0x18 */ struct tagLOGFONTW lfCaptionFont

  /* this+0x74 */ int iSmCaptionWidth
  /* this+0x78 */ int iSmCaptionHeight
  /* this+0x7c */ struct tagLOGFONTW lfSmCaptionFont

  /* this+0xd8 */ int iMenuWidth
  /* this+0xdc */ int iMenuHeight
  /* this+0xe0 */ struct tagLOGFONTW lfMenuFont

  /* this+0x13c */ struct tagLOGFONTW lfStatusFont

  /* this+0x198 */ struct tagLOGFONTW lfMessageFont

  /* this+0x1f4 */ int iPaddedBorderWidth
}

struct tagODBC_VS_ARGS {
  /* this+0x0 */ const struct _GUID * pguidEvent
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ wchar_t * wszArg
  /* this+0x8 */ char * szArg
  /* this+0xc */ wchar_t * wszCorrelation
  /* this+0xc */ char * szCorrelation
  /* this+0x10 */ short RetCode
}

struct tagPAINTSTRUCT {
  /* this+0x0 */ struct HDC__ * hdc
  /* this+0x4 */ int fErase
  /* this+0x8 */ struct tagRECT rcPaint

  /* this+0x18 */ int fRestore
  /* this+0x1c */ int fIncUpdate
  /* this+0x20 */ unsigned char[0x20] rgbReserved
}

struct tagPALETTEENTRY {
  /* this+0x0 */ unsigned char peRed
  /* this+0x1 */ unsigned char peGreen
  /* this+0x2 */ unsigned char peBlue
  /* this+0x3 */ unsigned char peFlags
}

struct tagPANOSE {
  /* this+0x0 */ unsigned char bFamilyType
  /* this+0x1 */ unsigned char bSerifStyle
  /* this+0x2 */ unsigned char bWeight
  /* this+0x3 */ unsigned char bProportion
  /* this+0x4 */ unsigned char bContrast
  /* this+0x5 */ unsigned char bStrokeVariation
  /* this+0x6 */ unsigned char bArmStyle
  /* this+0x7 */ unsigned char bLetterform
  /* this+0x8 */ unsigned char bMidline
  /* this+0x9 */ unsigned char bXHeight
}

struct tagPARAMDESC {
  /* this+0x0 */ struct tagPARAMDESCEX * pparamdescex
  /* this+0x4 */ unsigned short wParamFlags
}

struct tagPARAMDESCEX {
  /* this+0x0 */ unsigned long cBytes
  /* this+0x8 */ struct tagVARIANT varDefaultValue

}

struct tagPELARRAY {
  /* this+0x0 */ long paXCount
  /* this+0x4 */ long paYCount
  /* this+0x8 */ long paXExt
  /* this+0xc */ long paYExt
  /* this+0x10 */ unsigned char paRGBs
}

struct tagPIXELFORMATDESCRIPTOR {
  /* this+0x0 */ unsigned short nSize
  /* this+0x2 */ unsigned short nVersion
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned char iPixelType
  /* this+0x9 */ unsigned char cColorBits
  /* this+0xa */ unsigned char cRedBits
  /* this+0xb */ unsigned char cRedShift
  /* this+0xc */ unsigned char cGreenBits
  /* this+0xd */ unsigned char cGreenShift
  /* this+0xe */ unsigned char cBlueBits
  /* this+0xf */ unsigned char cBlueShift
  /* this+0x10 */ unsigned char cAlphaBits
  /* this+0x11 */ unsigned char cAlphaShift
  /* this+0x12 */ unsigned char cAccumBits
  /* this+0x13 */ unsigned char cAccumRedBits
  /* this+0x14 */ unsigned char cAccumGreenBits
  /* this+0x15 */ unsigned char cAccumBlueBits
  /* this+0x16 */ unsigned char cAccumAlphaBits
  /* this+0x17 */ unsigned char cDepthBits
  /* this+0x18 */ unsigned char cStencilBits
  /* this+0x19 */ unsigned char cAuxBuffers
  /* this+0x1a */ unsigned char iLayerType
  /* this+0x1b */ unsigned char bReserved
  /* this+0x1c */ unsigned long dwLayerMask
  /* this+0x20 */ unsigned long dwVisibleMask
  /* this+0x24 */ unsigned long dwDamageMask
}

struct tagPOINT {
  /* this+0x0 */ long x
  /* this+0x4 */ long y
}

struct tagPOINTFX {
  /* this+0x0 */ struct _FIXED x

  /* this+0x4 */ struct _FIXED y

}

struct tagPOINTS {
  /* this+0x0 */ short x
  /* this+0x2 */ short y
}

struct tagPOLYTEXTA {
  /* this+0x0 */ int x
  /* this+0x4 */ int y
  /* this+0x8 */ unsigned int n
  /* this+0xc */ const char * lpstr
  /* this+0x10 */ unsigned int uiFlags
  /* this+0x14 */ struct tagRECT rcl

  /* this+0x24 */ int * pdx
}

struct tagPOLYTEXTW {
  /* this+0x0 */ int x
  /* this+0x4 */ int y
  /* this+0x8 */ unsigned int n
  /* this+0xc */ const wchar_t * lpstr
  /* this+0x10 */ unsigned int uiFlags
  /* this+0x14 */ struct tagRECT rcl

  /* this+0x24 */ int * pdx
}

struct tagPROPVARIANT {
  /* this+0x0 */ unsigned short vt
  /* this+0x2 */ unsigned short wReserved1
  /* this+0x4 */ unsigned short wReserved2
  /* this+0x6 */ unsigned short wReserved3
  /* this+0x8 */ char cVal
  /* this+0x8 */ unsigned char bVal
  /* this+0x8 */ short iVal
  /* this+0x8 */ unsigned short uiVal
  /* this+0x8 */ long lVal
  /* this+0x8 */ unsigned long ulVal
  /* this+0x8 */ int intVal
  /* this+0x8 */ unsigned int uintVal
  /* this+0x8 */ union _LARGE_INTEGER hVal

  /* this+0x8 */ union _ULARGE_INTEGER uhVal

  /* this+0x8 */ float fltVal
  /* this+0x8 */ double dblVal
  /* this+0x8 */ short boolVal
  /* this+0x8 */ long scode
  /* this+0x8 */ union tagCY cyVal

  /* this+0x8 */ double date
  /* this+0x8 */ struct _FILETIME filetime

  /* this+0x8 */ struct _GUID * puuid
  /* this+0x8 */ struct tagCLIPDATA * pclipdata
  /* this+0x8 */ wchar_t * bstrVal
  /* this+0x8 */ struct tagBSTRBLOB bstrblobVal

  /* this+0x8 */ struct tagBLOB blob

  /* this+0x8 */ char * pszVal
  /* this+0x8 */ wchar_t * pwszVal
  /* this+0x8 */ struct IUnknown * punkVal
  /* this+0x8 */ struct IDispatch * pdispVal
  /* this+0x8 */ struct IStream * pStream
  /* this+0x8 */ struct IStorage * pStorage
  /* this+0x8 */ struct tagVersionedStream * pVersionedStream
  /* this+0x8 */ struct tagSAFEARRAY * parray
  /* this+0x8 */ struct tagCAC cac

  /* this+0x8 */ struct tagCAUB caub

  /* this+0x8 */ struct tagCAI cai

  /* this+0x8 */ struct tagCAUI caui

  /* this+0x8 */ struct tagCAL cal

  /* this+0x8 */ struct tagCAUL caul

  /* this+0x8 */ struct tagCAH cah

  /* this+0x8 */ struct tagCAUH cauh

  /* this+0x8 */ struct tagCAFLT caflt

  /* this+0x8 */ struct tagCADBL cadbl

  /* this+0x8 */ struct tagCABOOL cabool

  /* this+0x8 */ struct tagCASCODE cascode

  /* this+0x8 */ struct tagCACY cacy

  /* this+0x8 */ struct tagCADATE cadate

  /* this+0x8 */ struct tagCAFILETIME cafiletime

  /* this+0x8 */ struct tagCACLSID cauuid

  /* this+0x8 */ struct tagCACLIPDATA caclipdata

  /* this+0x8 */ struct tagCABSTR cabstr

  /* this+0x8 */ struct tagCABSTRBLOB cabstrblob

  /* this+0x8 */ struct tagCALPSTR calpstr

  /* this+0x8 */ struct tagCALPWSTR calpwstr

  /* this+0x8 */ struct tagCAPROPVARIANT capropvar

  /* this+0x8 */ char * pcVal
  /* this+0x8 */ unsigned char * pbVal
  /* this+0x8 */ short * piVal
  /* this+0x8 */ unsigned short * puiVal
  /* this+0x8 */ long * plVal
  /* this+0x8 */ unsigned long * pulVal
  /* this+0x8 */ int * pintVal
  /* this+0x8 */ unsigned int * puintVal
  /* this+0x8 */ float * pfltVal
  /* this+0x8 */ double * pdblVal
  /* this+0x8 */ short * pboolVal
  /* this+0x8 */ struct tagDEC * pdecVal
  /* this+0x8 */ long * pscode
  /* this+0x8 */ union tagCY * pcyVal
  /* this+0x8 */ double * pdate
  /* this+0x8 */ wchar_t * * pbstrVal
  /* this+0x8 */ struct IUnknown * * ppunkVal
  /* this+0x8 */ struct IDispatch * * ppdispVal
  /* this+0x8 */ struct tagSAFEARRAY * * pparray
  /* this+0x8 */ struct tagPROPVARIANT * pvarVal
  /* this+0x0 */ struct tagDEC decVal

}

struct tagRAWHID {
  /* this+0x0 */ unsigned long dwSizeHid
  /* this+0x4 */ unsigned long dwCount
  /* this+0x8 */ unsigned char[0x1] bRawData
}

struct tagRAWINPUT {
  /* this+0x0 */ struct tagRAWINPUTHEADER header

    /* this+0x10 */ union tagRAWINPUT::<unnamed-type-data> data

}

union tagRAWINPUT::<unnamed-type-data> {
  /* this+0x0 */ struct tagRAWMOUSE mouse

  /* this+0x0 */ struct tagRAWKEYBOARD keyboard

  /* this+0x0 */ struct tagRAWHID hid

}

struct tagRAWINPUTDEVICE {
  /* this+0x0 */ unsigned short usUsagePage
  /* this+0x2 */ unsigned short usUsage
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ struct HWND__ * hwndTarget
}

struct tagRAWINPUTDEVICELIST {
  /* this+0x0 */ void * hDevice
  /* this+0x4 */ unsigned long dwType
}

struct tagRAWINPUTHEADER {
  /* this+0x0 */ unsigned long dwType
  /* this+0x4 */ unsigned long dwSize
  /* this+0x8 */ void * hDevice
  /* this+0xc */ unsigned int wParam
}

struct tagRAWKEYBOARD {
  /* this+0x0 */ unsigned short MakeCode
  /* this+0x2 */ unsigned short Flags
  /* this+0x4 */ unsigned short Reserved
  /* this+0x6 */ unsigned short VKey
  /* this+0x8 */ unsigned int Message
  /* this+0xc */ unsigned long ExtraInformation
}

struct tagRAWMOUSE {
  /* this+0x0 */ unsigned short usFlags
  /* this+0x4 */ unsigned long ulButtons
  /* this+0x4 */ unsigned short usButtonFlags
  /* this+0x6 */ unsigned short usButtonData
  /* this+0x8 */ unsigned long ulRawButtons
  /* this+0xc */ long lLastX
  /* this+0x10 */ long lLastY
  /* this+0x14 */ unsigned long ulExtraInformation
}

struct tagRECONVERTSTRING {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwVersion
  /* this+0x8 */ unsigned long dwStrLen
  /* this+0xc */ unsigned long dwStrOffset
  /* this+0x10 */ unsigned long dwCompStrLen
  /* this+0x14 */ unsigned long dwCompStrOffset
  /* this+0x18 */ unsigned long dwTargetStrLen
  /* this+0x1c */ unsigned long dwTargetStrOffset
}

struct tagRECT {
  /* this+0x0 */ long left
  /* this+0x4 */ long top
  /* this+0x8 */ long right
  /* this+0xc */ long bottom
}

struct tagREGISTERWORDA {
  /* this+0x0 */ char * lpReading
  /* this+0x4 */ char * lpWord
}

struct tagREGISTERWORDW {
  /* this+0x0 */ wchar_t * lpReading
  /* this+0x4 */ wchar_t * lpWord
}

struct tagRGBQUAD {
  /* this+0x0 */ unsigned char rgbBlue
  /* this+0x1 */ unsigned char rgbGreen
  /* this+0x2 */ unsigned char rgbRed
  /* this+0x3 */ unsigned char rgbReserved
}

struct tagRGBTRIPLE {
  /* this+0x0 */ unsigned char rgbtBlue
  /* this+0x1 */ unsigned char rgbtGreen
  /* this+0x2 */ unsigned char rgbtRed
}

struct tagRID_DEVICE_INFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwType
  /* this+0x8 */ struct tagRID_DEVICE_INFO_MOUSE mouse

  /* this+0x8 */ struct tagRID_DEVICE_INFO_KEYBOARD keyboard

  /* this+0x8 */ struct tagRID_DEVICE_INFO_HID hid

}

struct tagRID_DEVICE_INFO_HID {
  /* this+0x0 */ unsigned long dwVendorId
  /* this+0x4 */ unsigned long dwProductId
  /* this+0x8 */ unsigned long dwVersionNumber
  /* this+0xc */ unsigned short usUsagePage
  /* this+0xe */ unsigned short usUsage
}

struct tagRID_DEVICE_INFO_KEYBOARD {
  /* this+0x0 */ unsigned long dwType
  /* this+0x4 */ unsigned long dwSubType
  /* this+0x8 */ unsigned long dwKeyboardMode
  /* this+0xc */ unsigned long dwNumberOfFunctionKeys
  /* this+0x10 */ unsigned long dwNumberOfIndicators
  /* this+0x14 */ unsigned long dwNumberOfKeysTotal
}

struct tagRID_DEVICE_INFO_MOUSE {
  /* this+0x0 */ unsigned long dwId
  /* this+0x4 */ unsigned long dwNumberOfButtons
  /* this+0x8 */ unsigned long dwSampleRate
  /* this+0xc */ int fHasHorizontalWheel
}

struct tagSAFEARRAY {
  /* this+0x0 */ unsigned short cDims
  /* this+0x2 */ unsigned short fFeatures
  /* this+0x4 */ unsigned long cbElements
  /* this+0x8 */ unsigned long cLocks
  /* this+0xc */ void * pvData
  /* this+0x10 */ struct tagSAFEARRAYBOUND[0x1] rgsabound
}

struct tagSAFEARRAYBOUND {
  /* this+0x0 */ unsigned long cElements
  /* this+0x4 */ long lLbound
}

struct tagSCROLLBARINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcScrollBar

  /* this+0x14 */ int dxyLineButton
  /* this+0x18 */ int xyThumbTop
  /* this+0x1c */ int xyThumbBottom
  /* this+0x20 */ int reserved
  /* this+0x24 */ unsigned long[0x6] rgstate
}

struct tagSCROLLINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fMask
  /* this+0x8 */ int nMin
  /* this+0xc */ int nMax
  /* this+0x10 */ unsigned int nPage
  /* this+0x14 */ int nPos
  /* this+0x18 */ int nTrackPos
}

struct tagSERIALKEYSA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ char * lpszActivePort
  /* this+0xc */ char * lpszPort
  /* this+0x10 */ unsigned int iBaudRate
  /* this+0x14 */ unsigned int iPortState
  /* this+0x18 */ unsigned int iActive
}

struct tagSERIALKEYSW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ wchar_t * lpszActivePort
  /* this+0xc */ wchar_t * lpszPort
  /* this+0x10 */ unsigned int iBaudRate
  /* this+0x14 */ unsigned int iPortState
  /* this+0x18 */ unsigned int iActive
}

struct tagSIZE {
  /* this+0x0 */ long cx
  /* this+0x4 */ long cy
}

struct tagSOUNDSENTRYA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iFSTextEffect
  /* this+0xc */ unsigned long iFSTextEffectMSec
  /* this+0x10 */ unsigned long iFSTextEffectColorBits
  /* this+0x14 */ unsigned long iFSGrafEffect
  /* this+0x18 */ unsigned long iFSGrafEffectMSec
  /* this+0x1c */ unsigned long iFSGrafEffectColor
  /* this+0x20 */ unsigned long iWindowsEffect
  /* this+0x24 */ unsigned long iWindowsEffectMSec
  /* this+0x28 */ char * lpszWindowsEffectDLL
  /* this+0x2c */ unsigned long iWindowsEffectOrdinal
}

struct tagSOUNDSENTRYW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iFSTextEffect
  /* this+0xc */ unsigned long iFSTextEffectMSec
  /* this+0x10 */ unsigned long iFSTextEffectColorBits
  /* this+0x14 */ unsigned long iFSGrafEffect
  /* this+0x18 */ unsigned long iFSGrafEffectMSec
  /* this+0x1c */ unsigned long iFSGrafEffectColor
  /* this+0x20 */ unsigned long iWindowsEffect
  /* this+0x24 */ unsigned long iWindowsEffectMSec
  /* this+0x28 */ wchar_t * lpszWindowsEffectDLL
  /* this+0x2c */ unsigned long iWindowsEffectOrdinal
}

struct tagSQL_DAY_SECOND {
  /* this+0x0 */ unsigned long day
  /* this+0x4 */ unsigned long hour
  /* this+0x8 */ unsigned long minute
  /* this+0xc */ unsigned long second
  /* this+0x10 */ unsigned long fraction
}

struct tagSQL_INTERVAL_STRUCT {
  /* this+0x0 */ enum SQLINTERVAL interval_type
  /* this+0x4 */ short interval_sign
    /* this+0x8 */ union tagSQL_INTERVAL_STRUCT::<unnamed-type-intval> intval

}

union tagSQL_INTERVAL_STRUCT::<unnamed-type-intval> {
  /* this+0x0 */ struct tagSQL_YEAR_MONTH year_month

  /* this+0x0 */ struct tagSQL_DAY_SECOND day_second

}

struct tagSQL_NUMERIC_STRUCT {
  /* this+0x0 */ unsigned char precision
  /* this+0x1 */ signed char scale
  /* this+0x2 */ unsigned char sign
  /* this+0x3 */ unsigned char[0x10] val
}

struct tagSQL_YEAR_MONTH {
  /* this+0x0 */ unsigned long year
  /* this+0x4 */ unsigned long month
}

struct tagSTATSTG {
  /* this+0x0 */ wchar_t * pwcsName
  /* this+0x4 */ unsigned long type
  /* this+0x8 */ union _ULARGE_INTEGER cbSize

  /* this+0x10 */ struct _FILETIME mtime

  /* this+0x18 */ struct _FILETIME ctime

  /* this+0x20 */ struct _FILETIME atime

  /* this+0x28 */ unsigned long grfMode
  /* this+0x2c */ unsigned long grfLocksSupported
  /* this+0x30 */ struct _GUID clsid

  /* this+0x40 */ unsigned long grfStateBits
  /* this+0x44 */ unsigned long reserved
}

struct tagSTICKYKEYS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
}

struct tagSTYLEBUFA {
  /* this+0x0 */ unsigned long dwStyle
  /* this+0x4 */ char[0x20] szDescription
}

struct tagSTYLEBUFW {
  /* this+0x0 */ unsigned long dwStyle
  /* this+0x4 */ wchar_t[0x20] szDescription
}

struct tagSTYLESTRUCT {
  /* this+0x0 */ unsigned long styleOld
  /* this+0x4 */ unsigned long styleNew
}

struct tagShortCutKey {
  /* this+0x0 */ char isSkill
  /* this+0x1 */ unsigned long ID
  /* this+0x5 */ short count
}

struct tagTEXTMETRICA {
  /* this+0x0 */ long tmHeight
  /* this+0x4 */ long tmAscent
  /* this+0x8 */ long tmDescent
  /* this+0xc */ long tmInternalLeading
  /* this+0x10 */ long tmExternalLeading
  /* this+0x14 */ long tmAveCharWidth
  /* this+0x18 */ long tmMaxCharWidth
  /* this+0x1c */ long tmWeight
  /* this+0x20 */ long tmOverhang
  /* this+0x24 */ long tmDigitizedAspectX
  /* this+0x28 */ long tmDigitizedAspectY
  /* this+0x2c */ unsigned char tmFirstChar
  /* this+0x2d */ unsigned char tmLastChar
  /* this+0x2e */ unsigned char tmDefaultChar
  /* this+0x2f */ unsigned char tmBreakChar
  /* this+0x30 */ unsigned char tmItalic
  /* this+0x31 */ unsigned char tmUnderlined
  /* this+0x32 */ unsigned char tmStruckOut
  /* this+0x33 */ unsigned char tmPitchAndFamily
  /* this+0x34 */ unsigned char tmCharSet
}

struct tagTEXTMETRICW {
  /* this+0x0 */ long tmHeight
  /* this+0x4 */ long tmAscent
  /* this+0x8 */ long tmDescent
  /* this+0xc */ long tmInternalLeading
  /* this+0x10 */ long tmExternalLeading
  /* this+0x14 */ long tmAveCharWidth
  /* this+0x18 */ long tmMaxCharWidth
  /* this+0x1c */ long tmWeight
  /* this+0x20 */ long tmOverhang
  /* this+0x24 */ long tmDigitizedAspectX
  /* this+0x28 */ long tmDigitizedAspectY
  /* this+0x2c */ wchar_t tmFirstChar
  /* this+0x2e */ wchar_t tmLastChar
  /* this+0x30 */ wchar_t tmDefaultChar
  /* this+0x32 */ wchar_t tmBreakChar
  /* this+0x34 */ unsigned char tmItalic
  /* this+0x35 */ unsigned char tmUnderlined
  /* this+0x36 */ unsigned char tmStruckOut
  /* this+0x37 */ unsigned char tmPitchAndFamily
  /* this+0x38 */ unsigned char tmCharSet
}

struct tagTIMESTAMP_STRUCT {
  /* this+0x0 */ short year
  /* this+0x2 */ unsigned short month
  /* this+0x4 */ unsigned short day
  /* this+0x6 */ unsigned short hour
  /* this+0x8 */ unsigned short minute
  /* this+0xa */ unsigned short second
  /* this+0xc */ unsigned long fraction
}

struct tagTIME_STRUCT {
  /* this+0x0 */ unsigned short hour
  /* this+0x2 */ unsigned short minute
  /* this+0x4 */ unsigned short second
}

struct tagTITLEBARINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcTitleBar

  /* this+0x14 */ unsigned long[0x6] rgstate
}

struct tagTITLEBARINFOEX {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcTitleBar

  /* this+0x14 */ unsigned long[0x6] rgstate
  /* this+0x2c */ struct tagRECT[0x6] rgrect
}

struct tagTLIBATTR {
  /* this+0x0 */ struct _GUID guid

  /* this+0x10 */ unsigned long lcid
  /* this+0x14 */ enum tagSYSKIND syskind
  /* this+0x18 */ unsigned short wMajorVerNum
  /* this+0x1a */ unsigned short wMinorVerNum
  /* this+0x1c */ unsigned short wLibFlags
}

struct tagTOGGLEKEYS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
}

struct tagTOUCHINPUT {
  /* this+0x0 */ long x
  /* this+0x4 */ long y
  /* this+0x8 */ void * hSource
  /* this+0xc */ unsigned long dwID
  /* this+0x10 */ unsigned long dwFlags
  /* this+0x14 */ unsigned long dwMask
  /* this+0x18 */ unsigned long dwTime
  /* this+0x1c */ unsigned long dwExtraInfo
  /* this+0x20 */ unsigned long cxContact
  /* this+0x24 */ unsigned long cyContact
}

struct tagTPMPARAMS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct tagRECT rcExclude

}

struct tagTRACKMOUSEEVENT {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ struct HWND__ * hwndTrack
  /* this+0xc */ unsigned long dwHoverTime
}

struct tagTTPOLYCURVE {
  /* this+0x0 */ unsigned short wType
  /* this+0x2 */ unsigned short cpfx
  /* this+0x4 */ struct tagPOINTFX[0x1] apfx
}

struct tagTTPOLYGONHEADER {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ unsigned long dwType
  /* this+0x8 */ struct tagPOINTFX pfxStart

}

struct tagTYPEATTR {
  /* this+0x0 */ struct _GUID guid

  /* this+0x10 */ unsigned long lcid
  /* this+0x14 */ unsigned long dwReserved
  /* this+0x18 */ long memidConstructor
  /* this+0x1c */ long memidDestructor
  /* this+0x20 */ wchar_t * lpstrSchema
  /* this+0x24 */ unsigned long cbSizeInstance
  /* this+0x28 */ enum tagTYPEKIND typekind
  /* this+0x2c */ unsigned short cFuncs
  /* this+0x2e */ unsigned short cVars
  /* this+0x30 */ unsigned short cImplTypes
  /* this+0x32 */ unsigned short cbSizeVft
  /* this+0x34 */ unsigned short cbAlignment
  /* this+0x36 */ unsigned short wTypeFlags
  /* this+0x38 */ unsigned short wMajorVerNum
  /* this+0x3a */ unsigned short wMinorVerNum
  /* this+0x3c */ struct tagTYPEDESC tdescAlias

  /* this+0x44 */ struct tagIDLDESC idldescType

}

struct tagTYPEDESC {
  /* this+0x0 */ struct tagTYPEDESC * lptdesc
  /* this+0x0 */ struct tagARRAYDESC * lpadesc
  /* this+0x0 */ unsigned long hreftype
  /* this+0x4 */ unsigned short vt
}

struct tagUPDATELAYEREDWINDOWINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct HDC__ * hdcDst
  /* this+0x8 */ const struct tagPOINT * pptDst
  /* this+0xc */ const struct tagSIZE * psize
  /* this+0x10 */ struct HDC__ * hdcSrc
  /* this+0x14 */ const struct tagPOINT * pptSrc
  /* this+0x18 */ unsigned long crKey
  /* this+0x1c */ const struct _BLENDFUNCTION * pblend
  /* this+0x20 */ unsigned long dwFlags
  /* this+0x24 */ const struct tagRECT * prcDirty
}

struct tagUSEROBJECTFLAGS {
  /* this+0x0 */ int fInherit
  /* this+0x4 */ int fReserved
  /* this+0x8 */ unsigned long dwFlags
}

struct tagVARDESC {
  /* this+0x0 */ long memid
  /* this+0x4 */ wchar_t * lpstrSchema
  /* this+0x8 */ unsigned long oInst
  /* this+0x8 */ struct tagVARIANT * lpvarValue
  /* this+0xc */ struct tagELEMDESC elemdescVar

  /* this+0x1c */ unsigned short wVarFlags
  /* this+0x20 */ enum tagVARKIND varkind
}

struct tagVARIANT {
  /* this+0x0 */ unsigned short vt
  /* this+0x2 */ unsigned short wReserved1
  /* this+0x4 */ unsigned short wReserved2
  /* this+0x6 */ unsigned short wReserved3
  /* this+0x8 */ __int64 llVal
  /* this+0x8 */ long lVal
  /* this+0x8 */ unsigned char bVal
  /* this+0x8 */ short iVal
  /* this+0x8 */ float fltVal
  /* this+0x8 */ double dblVal
  /* this+0x8 */ short boolVal
  /* this+0x8 */ long scode
  /* this+0x8 */ union tagCY cyVal

  /* this+0x8 */ double date
  /* this+0x8 */ wchar_t * bstrVal
  /* this+0x8 */ struct IUnknown * punkVal
  /* this+0x8 */ struct IDispatch * pdispVal
  /* this+0x8 */ struct tagSAFEARRAY * parray
  /* this+0x8 */ unsigned char * pbVal
  /* this+0x8 */ short * piVal
  /* this+0x8 */ long * plVal
  /* this+0x8 */ __int64 * pllVal
  /* this+0x8 */ float * pfltVal
  /* this+0x8 */ double * pdblVal
  /* this+0x8 */ short * pboolVal
  /* this+0x8 */ long * pscode
  /* this+0x8 */ union tagCY * pcyVal
  /* this+0x8 */ double * pdate
  /* this+0x8 */ wchar_t * * pbstrVal
  /* this+0x8 */ struct IUnknown * * ppunkVal
  /* this+0x8 */ struct IDispatch * * ppdispVal
  /* this+0x8 */ struct tagSAFEARRAY * * pparray
  /* this+0x8 */ struct tagVARIANT * pvarVal
  /* this+0x8 */ void * byref
  /* this+0x8 */ char cVal
  /* this+0x8 */ unsigned short uiVal
  /* this+0x8 */ unsigned long ulVal
  /* this+0x8 */ unsigned __int64 ullVal
  /* this+0x8 */ int intVal
  /* this+0x8 */ unsigned int uintVal
  /* this+0x8 */ struct tagDEC * pdecVal
  /* this+0x8 */ char * pcVal
  /* this+0x8 */ unsigned short * puiVal
  /* this+0x8 */ unsigned long * pulVal
  /* this+0x8 */ unsigned __int64 * pullVal
  /* this+0x8 */ int * pintVal
  /* this+0x8 */ unsigned int * puintVal
  /* this+0x8 */ void * pvRecord
  /* this+0xc */ struct IRecordInfo * pRecInfo
  /* this+0x0 */ struct tagDEC decVal

}

struct tagVS_FIXEDFILEINFO {
  /* this+0x0 */ unsigned long dwSignature
  /* this+0x4 */ unsigned long dwStrucVersion
  /* this+0x8 */ unsigned long dwFileVersionMS
  /* this+0xc */ unsigned long dwFileVersionLS
  /* this+0x10 */ unsigned long dwProductVersionMS
  /* this+0x14 */ unsigned long dwProductVersionLS
  /* this+0x18 */ unsigned long dwFileFlagsMask
  /* this+0x1c */ unsigned long dwFileFlags
  /* this+0x20 */ unsigned long dwFileOS
  /* this+0x24 */ unsigned long dwFileType
  /* this+0x28 */ unsigned long dwFileSubtype
  /* this+0x2c */ unsigned long dwFileDateMS
  /* this+0x30 */ unsigned long dwFileDateLS
}

struct tagVersionedStream {
  /* this+0x0 */ struct _GUID guidVersion

  /* this+0x10 */ struct IStream * pStream
}

struct tagWAVEINCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwFormats
  /* this+0x2c */ unsigned short wChannels
  /* this+0x2e */ unsigned short wReserved1
  /* this+0x30 */ struct _GUID ManufacturerGuid

  /* this+0x40 */ struct _GUID ProductGuid

  /* this+0x50 */ struct _GUID NameGuid

}

struct tagWAVEINCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwFormats
  /* this+0x4c */ unsigned short wChannels
  /* this+0x4e */ unsigned short wReserved1
  /* this+0x50 */ struct _GUID ManufacturerGuid

  /* this+0x60 */ struct _GUID ProductGuid

  /* this+0x70 */ struct _GUID NameGuid

}

struct tagWAVEINCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwFormats
  /* this+0x2c */ unsigned short wChannels
  /* this+0x2e */ unsigned short wReserved1
}

struct tagWAVEINCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwFormats
  /* this+0x4c */ unsigned short wChannels
  /* this+0x4e */ unsigned short wReserved1
}

struct tagWAVEOUTCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwFormats
  /* this+0x2c */ unsigned short wChannels
  /* this+0x2e */ unsigned short wReserved1
  /* this+0x30 */ unsigned long dwSupport
  /* this+0x34 */ struct _GUID ManufacturerGuid

  /* this+0x44 */ struct _GUID ProductGuid

  /* this+0x54 */ struct _GUID NameGuid

}

struct tagWAVEOUTCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwFormats
  /* this+0x4c */ unsigned short wChannels
  /* this+0x4e */ unsigned short wReserved1
  /* this+0x50 */ unsigned long dwSupport
  /* this+0x54 */ struct _GUID ManufacturerGuid

  /* this+0x64 */ struct _GUID ProductGuid

  /* this+0x74 */ struct _GUID NameGuid

}

struct tagWAVEOUTCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwFormats
  /* this+0x2c */ unsigned short wChannels
  /* this+0x2e */ unsigned short wReserved1
  /* this+0x30 */ unsigned long dwSupport
}

struct tagWAVEOUTCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwFormats
  /* this+0x4c */ unsigned short wChannels
  /* this+0x4e */ unsigned short wReserved1
  /* this+0x50 */ unsigned long dwSupport
}

struct tagWCRANGE {
  /* this+0x0 */ wchar_t wcLow
  /* this+0x2 */ unsigned short cGlyphs
}

struct tagWINDOWINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcWindow

  /* this+0x14 */ struct tagRECT rcClient

  /* this+0x24 */ unsigned long dwStyle
  /* this+0x28 */ unsigned long dwExStyle
  /* this+0x2c */ unsigned long dwWindowStatus
  /* this+0x30 */ unsigned int cxWindowBorders
  /* this+0x34 */ unsigned int cyWindowBorders
  /* this+0x38 */ unsigned short atomWindowType
  /* this+0x3a */ unsigned short wCreatorVersion
}

struct tagWINDOWPLACEMENT {
  /* this+0x0 */ unsigned int length
  /* this+0x4 */ unsigned int flags
  /* this+0x8 */ unsigned int showCmd
  /* this+0xc */ struct tagPOINT ptMinPosition

  /* this+0x14 */ struct tagPOINT ptMaxPosition

  /* this+0x1c */ struct tagRECT rcNormalPosition

}

struct tagWINDOWPOS {
  /* this+0x0 */ struct HWND__ * hwnd
  /* this+0x4 */ struct HWND__ * hwndInsertAfter
  /* this+0x8 */ int x
  /* this+0xc */ int y
  /* this+0x10 */ int cx
  /* this+0x14 */ int cy
  /* this+0x18 */ unsigned int flags
}

struct tagWNDCLASSA {
  /* this+0x0 */ unsigned int style
  /* this+0x4 */ function  * lpfnWndProc
  /* this+0x8 */ int cbClsExtra
  /* this+0xc */ int cbWndExtra
  /* this+0x10 */ struct HINSTANCE__ * hInstance
  /* this+0x14 */ struct HICON__ * hIcon
  /* this+0x18 */ struct HICON__ * hCursor
  /* this+0x1c */ struct HBRUSH__ * hbrBackground
  /* this+0x20 */ const char * lpszMenuName
  /* this+0x24 */ const char * lpszClassName
}

struct tagWNDCLASSEXA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int style
  /* this+0x8 */ function  * lpfnWndProc
  /* this+0xc */ int cbClsExtra
  /* this+0x10 */ int cbWndExtra
  /* this+0x14 */ struct HINSTANCE__ * hInstance
  /* this+0x18 */ struct HICON__ * hIcon
  /* this+0x1c */ struct HICON__ * hCursor
  /* this+0x20 */ struct HBRUSH__ * hbrBackground
  /* this+0x24 */ const char * lpszMenuName
  /* this+0x28 */ const char * lpszClassName
  /* this+0x2c */ struct HICON__ * hIconSm
}

struct tagWNDCLASSEXW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int style
  /* this+0x8 */ function  * lpfnWndProc
  /* this+0xc */ int cbClsExtra
  /* this+0x10 */ int cbWndExtra
  /* this+0x14 */ struct HINSTANCE__ * hInstance
  /* this+0x18 */ struct HICON__ * hIcon
  /* this+0x1c */ struct HICON__ * hCursor
  /* this+0x20 */ struct HBRUSH__ * hbrBackground
  /* this+0x24 */ const wchar_t * lpszMenuName
  /* this+0x28 */ const wchar_t * lpszClassName
  /* this+0x2c */ struct HICON__ * hIconSm
}

struct tagWNDCLASSW {
  /* this+0x0 */ unsigned int style
  /* this+0x4 */ function  * lpfnWndProc
  /* this+0x8 */ int cbClsExtra
  /* this+0xc */ int cbWndExtra
  /* this+0x10 */ struct HINSTANCE__ * hInstance
  /* this+0x14 */ struct HICON__ * hIcon
  /* this+0x18 */ struct HICON__ * hCursor
  /* this+0x1c */ struct HBRUSH__ * hbrBackground
  /* this+0x20 */ const wchar_t * lpszMenuName
  /* this+0x24 */ const wchar_t * lpszClassName
}

struct tagWTSSESSION_NOTIFICATION {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwSessionId
}

struct tagXFORM {
  /* this+0x0 */ float eM11
  /* this+0x4 */ float eM12
  /* this+0x8 */ float eM21
  /* this+0xc */ float eM22
  /* this+0x10 */ float eDx
  /* this+0x14 */ float eDy
}

struct threadlocaleinfostruct {
  /* this+0x0 */ int refcount
  /* this+0x4 */ unsigned int lc_codepage
  /* this+0x8 */ unsigned int lc_collate_cp
  /* this+0xc */ unsigned long[0x6] lc_handle
  /* this+0x24 */ struct tagLC_ID[0x6] lc_id
    /* this+0x48 */ struct threadlocaleinfostruct::<unnamed-type-lc_category>[0x6] lc_category
  /* this+0xa8 */ int lc_clike
  /* this+0xac */ int mb_cur_max
  /* this+0xb0 */ int * lconv_intl_refcount
  /* this+0xb4 */ int * lconv_num_refcount
  /* this+0xb8 */ int * lconv_mon_refcount
  /* this+0xbc */ struct lconv * lconv
  /* this+0xc0 */ int * ctype1_refcount
  /* this+0xc4 */ unsigned short * ctype1
  /* this+0xc8 */ const unsigned short * pctype
  /* this+0xcc */ const unsigned char * pclmap
  /* this+0xd0 */ const unsigned char * pcumap
  /* this+0xd4 */ struct __lc_time_data * lc_time_curr
}

struct threadlocaleinfostruct::<unnamed-type-lc_category> {
  /* this+0x0 */ char * locale
  /* this+0x4 */ wchar_t * wlocale
  /* this+0x8 */ int * refcount
  /* this+0xc */ int * wrefcount
}

struct threadmbcinfostruct {
  /* this+0x0 */ int refcount
  /* this+0x4 */ int mbcodepage
  /* this+0x8 */ int ismbcodepage
  /* this+0xc */ int mblcid
  /* this+0x10 */ unsigned short[0x6] mbulinfo
  /* this+0x1c */ unsigned char[0x101] mbctype
  /* this+0x11d */ unsigned char[0x100] mbcasemap
}

struct timeb {
  /* this+0x0 */ __int64 time
  /* this+0x8 */ unsigned short millitm
  /* this+0xa */ short timezone
  /* this+0xc */ short dstflag
}

struct timecaps_tag {
  /* this+0x0 */ unsigned int wPeriodMin
  /* this+0x4 */ unsigned int wPeriodMax
}

struct timeval {
  /* this+0x0 */ long tv_sec
  /* this+0x4 */ long tv_usec
}

struct tm {
  /* this+0x0 */ int tm_sec
  /* this+0x4 */ int tm_min
  /* this+0x8 */ int tm_hour
  /* this+0xc */ int tm_mday
  /* this+0x10 */ int tm_mon
  /* this+0x14 */ int tm_year
  /* this+0x18 */ int tm_wday
  /* this+0x1c */ int tm_yday
  /* this+0x20 */ int tm_isdst
}

struct transitiondate {
  /* this+0x0 */ int yr
  /* this+0x4 */ int yd
  /* this+0x8 */ int ms
}

struct tree_desc_s {
  /* this+0x0 */ struct ct_data_s * dyn_tree
  /* this+0x4 */ int max_code
  /* this+0x8 */ struct static_tree_desc_s * stat_desc
}

class type_info {
    *
  public unsigned int hash_code()
  public void type_info::~type_info()
  public bool type_info::operator==(const class type_info &)
  public bool operator!=(const class type_info &)
  public int before(const class type_info &)
  public const char * name(struct __type_info_node *)
  public const char * raw_name()
  /* this+0x4 */ void * _M_data
  /* this+0x8 */ char[0x1] _M_d_name
  private void type_info(const class type_info &)
  private class type_info & operator=(const class type_info &)
  private static const char * _Name_base(const class type_info *, struct __type_info_node *)
  private static void type_info::_Type_info_dtor(class type_info *)
  private static const char * _Name_base_internal(const class type_info *, struct __type_info_node *)
  private static void _Type_info_dtor_internal(class type_info *)
  public void _type_info_dtor_internal_method()
  public const char * _name_internal_method(struct __type_info_node *)
  public void * __vecDelDtor(unsigned int)
}

struct upvaldesc {
  /* this+0x0 */ unsigned char k
  /* this+0x1 */ unsigned char info
}

struct val_context {
  /* this+0x0 */ int valuelen
  /* this+0x4 */ void * value_context
  /* this+0x8 */ void * val_buff_ptr
}

struct value_entA {
  /* this+0x0 */ char * ve_valuename
  /* this+0x4 */ unsigned long ve_valuelen
  /* this+0x8 */ unsigned long ve_valueptr
  /* this+0xc */ unsigned long ve_type
}

struct value_entW {
  /* this+0x0 */ wchar_t * ve_valuename
  /* this+0x4 */ unsigned long ve_valuelen
  /* this+0x8 */ unsigned long ve_valueptr
  /* this+0xc */ unsigned long ve_type
}

struct vc_attributes::FormatStringAttribute {
  public void FormatStringAttribute()
  /* this+0x0 */ const wchar_t * Style
  /* this+0x4 */ const wchar_t * UnformattedAlternative
}

struct vc_attributes::InvalidCheckAttribute {
  public void InvalidCheckAttribute()
  /* this+0x0 */ long Value
}

struct vc_attributes::PostAttribute {
  public void PostAttribute()
  /* this+0x0 */ unsigned int Deref
  /* this+0x4 */ enum vc_attributes::YesNoMaybe Valid
  /* this+0x8 */ enum vc_attributes::YesNoMaybe Null
  /* this+0xc */ enum vc_attributes::YesNoMaybe Tainted
  /* this+0x10 */ enum vc_attributes::AccessType Access
  /* this+0x14 */ unsigned int ValidElementsConst
  /* this+0x18 */ unsigned int ValidBytesConst
  /* this+0x1c */ const wchar_t * ValidElements
  /* this+0x20 */ const wchar_t * ValidBytes
  /* this+0x24 */ const wchar_t * ValidElementsLength
  /* this+0x28 */ const wchar_t * ValidBytesLength
  /* this+0x2c */ unsigned int WritableElementsConst
  /* this+0x30 */ unsigned int WritableBytesConst
  /* this+0x34 */ const wchar_t * WritableElements
  /* this+0x38 */ const wchar_t * WritableBytes
  /* this+0x3c */ const wchar_t * WritableElementsLength
  /* this+0x40 */ const wchar_t * WritableBytesLength
  /* this+0x44 */ unsigned int ElementSizeConst
  /* this+0x48 */ const wchar_t * ElementSize
  /* this+0x4c */ enum vc_attributes::YesNoMaybe NullTerminated
  /* this+0x50 */ enum vc_attributes::YesNoMaybe MustCheck
  /* this+0x54 */ const wchar_t * Condition
}

struct vc_attributes::PostBoundAttribute {
  public void PostBoundAttribute()
  /* this+0x0 */ unsigned int Deref
}

struct vc_attributes::PostRangeAttribute {
  public void PostRangeAttribute()
  /* this+0x0 */ unsigned int Deref
  /* this+0x4 */ const char * MinVal
  /* this+0x8 */ const char * MaxVal
}

struct vc_attributes::PreAttribute {
  public void PreAttribute()
  /* this+0x0 */ unsigned int Deref
  /* this+0x4 */ enum vc_attributes::YesNoMaybe Valid
  /* this+0x8 */ enum vc_attributes::YesNoMaybe Null
  /* this+0xc */ enum vc_attributes::YesNoMaybe Tainted
  /* this+0x10 */ enum vc_attributes::AccessType Access
  /* this+0x14 */ unsigned int ValidElementsConst
  /* this+0x18 */ unsigned int ValidBytesConst
  /* this+0x1c */ const wchar_t * ValidElements
  /* this+0x20 */ const wchar_t * ValidBytes
  /* this+0x24 */ const wchar_t * ValidElementsLength
  /* this+0x28 */ const wchar_t * ValidBytesLength
  /* this+0x2c */ unsigned int WritableElementsConst
  /* this+0x30 */ unsigned int WritableBytesConst
  /* this+0x34 */ const wchar_t * WritableElements
  /* this+0x38 */ const wchar_t * WritableBytes
  /* this+0x3c */ const wchar_t * WritableElementsLength
  /* this+0x40 */ const wchar_t * WritableBytesLength
  /* this+0x44 */ unsigned int ElementSizeConst
  /* this+0x48 */ const wchar_t * ElementSize
  /* this+0x4c */ enum vc_attributes::YesNoMaybe NullTerminated
  /* this+0x50 */ const wchar_t * Condition
}

struct vc_attributes::PreBoundAttribute {
  public void PreBoundAttribute()
  /* this+0x0 */ unsigned int Deref
}

struct vc_attributes::PreRangeAttribute {
  public void PreRangeAttribute()
  /* this+0x0 */ unsigned int Deref
  /* this+0x4 */ const char * MinVal
  /* this+0x8 */ const char * MaxVal
}

struct vc_attributes::SuccessAttribute {
  public void SuccessAttribute()
  /* this+0x0 */ const wchar_t * Condition
}

struct waveformat_tag {
  /* this+0x0 */ unsigned short wFormatTag
  /* this+0x2 */ unsigned short nChannels
  /* this+0x4 */ unsigned long nSamplesPerSec
  /* this+0x8 */ unsigned long nAvgBytesPerSec
  /* this+0xc */ unsigned short nBlockAlign
}

struct wavehdr_tag {
  /* this+0x0 */ char * lpData
  /* this+0x4 */ unsigned long dwBufferLength
  /* this+0x8 */ unsigned long dwBytesRecorded
  /* this+0xc */ unsigned long dwUser
  /* this+0x10 */ unsigned long dwFlags
  /* this+0x14 */ unsigned long dwLoops
  /* this+0x18 */ struct wavehdr_tag * lpNext
  /* this+0x1c */ unsigned long reserved
}

struct z_stream_s {
  /* this+0x0 */ unsigned char * next_in
  /* this+0x4 */ unsigned int avail_in
  /* this+0x8 */ unsigned long total_in
  /* this+0xc */ unsigned char * next_out
  /* this+0x10 */ unsigned int avail_out
  /* this+0x14 */ unsigned long total_out
  /* this+0x18 */ char * msg
  /* this+0x1c */ struct internal_state * state
  /* this+0x20 */ function  * zalloc
  /* this+0x24 */ function  * zfree
  /* this+0x28 */ void * opaque
  /* this+0x2c */ int data_type
  /* this+0x30 */ unsigned long adler
  /* this+0x34 */ unsigned long reserved
}

