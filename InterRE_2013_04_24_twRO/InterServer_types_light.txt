

*** TYPES


** UDTs

struct std::tr1::_Ignore {
}

struct std::nothrow_t {
}

struct _RTL_CRITICAL_SECTION {
  /* this+0x0 */ struct _RTL_CRITICAL_SECTION_DEBUG * DebugInfo;
  /* this+0x4 */ long LockCount;
  /* this+0x8 */ long RecursionCount;
  /* this+0xc */ void * OwningThread;
  /* this+0x10 */ void * LockSemaphore;
  /* this+0x14 */ unsigned long SpinCount;
}

struct _LIST_ENTRY {
  /* this+0x0 */ struct _LIST_ENTRY * Flink;
  /* this+0x4 */ struct _LIST_ENTRY * Blink;
}

struct MAILTIME {
  /* this+0x0 */ short Year;
  /* this+0x2 */ short Month;
  /* this+0x4 */ short Day;
  /* this+0x6 */ short Hour;
}

struct _s__RTTIBaseClassDescriptor2 {
  /* this+0x0 */ struct _TypeDescriptor * pTypeDescriptor;
  /* this+0x4 */ unsigned long numContainedBases;
  /* this+0x8 */ struct _PMD where;
  /* this+0x14 */ unsigned long attributes;
  /* this+0x18 */ const struct _s__RTTIClassHierarchyDescriptor * pClassDescriptor;
}

struct _s__RTTIBaseClassArray {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x0] arrayOfBaseClassDescriptors;
}

class CZServerMgr {
  /* this+0x4 */ class CMemoryMgr<CZServer> m_serverMapMemoryPool;
  /* this+0x28 */ struct _RTL_CRITICAL_SECTION m_serverMap_cs;
  /* this+0x40 */ int m_bVerMessage;
  /* this+0x44 */ int m_bEpisodeMessage;
  /* this+0x48 */ class std::map<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> > > m_serverMap;
}

class N3Inter {
}

class N3Object {
  /* this+0x4 */ const unsigned int m_MyID;
}

class CZsvrMgr {
  /* this+0x4 */ class CMemoryMgr<CZServer> m_serverMapMemoryPool;
  /* this+0x28 */ struct _RTL_CRITICAL_SECTION m_serverMap_cs;
  /* this+0x40 */ int m_bVerMessage;
  /* this+0x44 */ int m_bEpisodeMessage;
  /* this+0x48 */ class std::map<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> > > m_serverMap;
  /* this+0x60 */ const unsigned int m_MyID;
    /* this+0x64 */ bool m_bOK;
  /* this+0x68 */ class N3MessageQueue m_MessageQueue;
}

class N3MessageQueue {
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x1c */ class std::deque<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > m_Queue;
  /* this+0x34 */ void * m_hSemaphore;
  /* this+0x38 */ bool m_bOK;
}

struct PACKET_ZI_MEMORIALDUNGEON_OPENSTATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum PACKET_ZI_MEMORIALDUNGEON_OPENSTATE::enumRequest Request;
  /* this+0x6 */ unsigned long RequestGID;
  /* this+0xa */ unsigned long RequestAID;
}

class CMemoryMgr<CUserMgr::SERVER_MOVE_USER> {
  /* this+0x4 */ class CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

struct CUserMgr::SERVER_MOVE_USER {
  /* this+0x0 */ unsigned long DisConnectTime;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long GID;
  /* this+0xc */ unsigned long ServerID;
  /* this+0x10 */ char[0x18] Name;
}

class CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::lcMemory {
  /* this+0x4 */ struct CUserMgr::SERVER_MOVE_USER * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

struct _s__CatchableType {
  /* this+0x0 */ unsigned int properties;
  /* this+0x4 */ struct _TypeDescriptor * pType;
  /* this+0x8 */ struct _PMD thisDisplacement;
  /* this+0x14 */ int sizeOrOffset;
  /* this+0x18 */ function  * copyFunction;
}

struct _s__CatchableTypeArray {
  /* this+0x0 */ int nCatchableTypes;
  /* this+0x4 */ const struct _s__CatchableType *[0x0] arrayOfCatchableTypes;
}

struct PACKET_ZC_SRPACKETR2_INIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short ProtectFactor;
  /* this+0x4 */ unsigned int DeformSeedFactor;
  /* this+0x8 */ unsigned int DeformAddFactor;
}

struct PACKET_XX_DISCONNECT {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZI_RESULT_LOBBY_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ unsigned char Result;
  /* this+0xb */ char[0x18] EntryQueueName;
  /* this+0x23 */ char[0x18] LobbyName;
}

class CODBC {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
}

class CServerInfo {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
  /* this+0x12 */ int m_localServerType;
  /* this+0x16 */ int m_characterServerCount;
  /* this+0x1a */ class std::map<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> > > m_serverInfoMap;
  /* this+0x2a */ struct _SERVERINFO m_localServerInfo;
  /* this+0x98 */ class std::list<int,std::allocator<int> > m_MyServerSet;
  /* this+0xa4 */ char[0x400] m_characterServerInfo;
}

class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<unsigned long> _Alval;
}

class std::map<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,_SERVERINFO *> > _Alval;
}

struct _SERVERINFO {
  /* this+0x0 */ int SID;
  /* this+0x4 */ int Type;
  /* this+0x8 */ unsigned long ip;
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > IPstr;
  /* this+0x28 */ int Port;
  /* this+0x2c */ int DestinationOneSID;
  /* this+0x30 */ int DestinationTwoSID;
  /* this+0x34 */ char[0x14] Name;
  /* this+0x48 */ unsigned long PrivateIP;
  /* this+0x4c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > PrivateIPstr;
  /* this+0x68 */ int PrivatePort;
  /* this+0x6c */ bool bReady;
  /* this+0x6d */ bool bOverpopulation;
}

class std::list<int,std::allocator<int> > {
  /* this+0x0 */ struct std::_List_nod<int,std::allocator<int> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<int,std::allocator<int> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<int> _Alval;
}

class CAcceptor {
}

struct PACKET_ZI_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long senderAID;
  /* this+0x6 */ unsigned long GRID;
  /* this+0xa */ char[0x18] TargetCharName;
}

struct $_s__RTTIBaseClassArray$_extraBytes_16 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x4] arrayOfBaseClassDescriptors;
}

struct IRMAILID {
  /* this+0x0 */ unsigned char office;
  /* this+0x1 */ unsigned int id;
}

struct _TypeDescriptor {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x0] name;
}

struct _s__RTTIClassHierarchyDescriptor {
  /* this+0x0 */ unsigned long signature;
  /* this+0x4 */ unsigned long attributes;
  /* this+0x8 */ unsigned long numBaseClasses;
  /* this+0xc */ const struct _s__RTTIBaseClassArray * pBaseClassArray;
}

struct _s__RTTICompleteObjectLocator {
  /* this+0x0 */ unsigned long signature;
  /* this+0x4 */ unsigned long offset;
  /* this+0x8 */ unsigned long cdOffset;
  /* this+0xc */ struct _TypeDescriptor * pTypeDescriptor;
  /* this+0x10 */ const struct _s__RTTIClassHierarchyDescriptor * pClassDescriptor;
}

class CDateTime {
  /* this+0x0 */ long m_time;
}

struct tagTIMESTAMP_STRUCT {
  /* this+0x0 */ short year;
  /* this+0x2 */ unsigned short month;
  /* this+0x4 */ unsigned short day;
  /* this+0x6 */ unsigned short hour;
  /* this+0x8 */ unsigned short minute;
  /* this+0xa */ unsigned short second;
  /* this+0xc */ unsigned long fraction;
}

struct threadlocaleinfostruct {
  /* this+0x0 */ int refcount;
  /* this+0x4 */ unsigned int lc_codepage;
  /* this+0x8 */ unsigned int lc_collate_cp;
  /* this+0xc */ unsigned long[0x6] lc_handle;
  /* this+0x24 */ struct tagLC_ID[0x6] lc_id;
  /* this+0x48 */ struct threadlocaleinfostruct::<unnamed-type-lc_category>[0x6] lc_category;
  /* this+0xa8 */ int lc_clike;
  /* this+0xac */ int mb_cur_max;
  /* this+0xb0 */ int * lconv_intl_refcount;
  /* this+0xb4 */ int * lconv_num_refcount;
  /* this+0xb8 */ int * lconv_mon_refcount;
  /* this+0xbc */ struct lconv * lconv;
  /* this+0xc0 */ int * ctype1_refcount;
  /* this+0xc4 */ unsigned short * ctype1;
  /* this+0xc8 */ const unsigned short * pctype;
  /* this+0xcc */ const unsigned char * pclmap;
  /* this+0xd0 */ const unsigned char * pcumap;
  /* this+0xd4 */ struct __lc_time_data * lc_time_curr;
}

struct threadmbcinfostruct {
  /* this+0x0 */ int refcount;
  /* this+0x4 */ int mbcodepage;
  /* this+0x8 */ int ismbcodepage;
  /* this+0xc */ int mblcid;
  /* this+0x10 */ unsigned short[0x6] mbulinfo;
  /* this+0x1c */ unsigned char[0x101] mbctype;
  /* this+0x11d */ unsigned char[0x100] mbcasemap;
}

struct localeinfo_struct {
  /* this+0x0 */ struct threadlocaleinfostruct * locinfo;
  /* this+0x4 */ struct threadmbcinfostruct * mbcinfo;
}

struct MAP_STATE {
  /* this+0x0 */ int ZsvrState;
  /* this+0x4 */ unsigned char[0x10] mapName;
}

class std::basic_string<char,std::char_traits<char>,std::allocator<char> > {
  /* this+0x0 */ union std::_String_val<char,std::allocator<char> >::_Bxty _Bx;
  /* this+0x10 */ unsigned int _Mysize;
  /* this+0x14 */ unsigned int _Myres;
  /* this+0x18 */ class std::allocator<char> _Alval;
  }

struct std::_Allocator_base<int> {
}

class std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > {
}

struct std::less<unsigned long> {
}

struct std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ struct CUserMgr::SERVER_MOVE_USER * second;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node> {
}

struct std::_List_nod<int,std::allocator<int> >::_Node {
  /* this+0x0 */ struct std::_List_nod<int,std::allocator<int> >::_Node * _Next;
  /* this+0x4 */ struct std::_List_nod<int,std::allocator<int> >::_Node * _Prev;
  /* this+0x8 */ int _Myval;
}

struct std::_Allocator_base<std::_List_nod<int,std::allocator<int> >::_Node> {
}

struct std::_Allocator_base<unsigned char> {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node> {
}

struct std::_Container_base0 {
}

class std::allocator<int> {
}

class std::_List_nod<int,std::allocator<int> > {
  /* this+0x0 */ struct std::_List_nod<int,std::allocator<int> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<int,std::allocator<int> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<int> _Alval;
}

class std::allocator<std::_List_nod<int,std::allocator<int> >::_Node> {
}

class N3MessageQueue::lcData {
  /* this+0x0 */ unsigned int m_Message;
  /* this+0x4 */ unsigned int m_wParam;
  /* this+0x8 */ unsigned int m_lParam;
}

struct std::_Allocator_base<N3MessageQueue::lcData> {
}

struct std::allocator<int>::rebind<int> {
}

struct std::allocator<int>::rebind<std::_List_nod<int,std::allocator<int> >::_Node> {
}

struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> _Myval;
  /* this+0x2c */ char _Color;
  /* this+0x2d */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node> {
}

struct std::_Allocator_base<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > {
}

struct std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node {
  /* this+0x0 */ struct std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node * _Next;
  /* this+0x4 */ struct std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node * _Prev;
  /* this+0x8 */ unsigned long _Myval;
}

struct std::_Allocator_base<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node> {
}

struct std::pair<int const ,CZServer *> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class CZServer * second;
}

struct std::_Allocator_base<std::pair<int const ,CZServer *> > {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,CParty *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node> {
}

class std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CParty *> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CParty *> > _Alval;
}

struct std::pair<unsigned long,CParty *> {
}

class std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0>::value_compare {
}

struct std::pair<unsigned long const ,CParty *> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class CParty * second;
}

class std::allocator<std::pair<unsigned long const ,CParty *> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > > > {
}

class std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CParty *> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node> {
}

class std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ struct USER_STRING_MAP_DATA * second;
}

struct std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > {
}

struct std::_Allocator_base<std::pair<unsigned long const ,CParty *> > {
}

struct std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >::rebind<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > {
}

struct std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node> {
}

class std::_Tree<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > _Alval;
}

struct std::pair<unsigned long,CUserMgr::SERVER_MOVE_USER *> {
}

class std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > >,bool> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > > > {
}

class std::allocator<unsigned long> {
}

class std::_List_nod<unsigned long,std::allocator<unsigned long> > {
  /* this+0x0 */ struct std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<unsigned long> _Alval;
}

class std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node> {
}

struct std::_Allocator_base<unsigned long> {
}

struct std::allocator<std::pair<unsigned long const ,CParty *> >::rebind<std::pair<unsigned long const ,CParty *> > {
}

struct std::allocator<std::pair<unsigned long const ,CParty *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node> {
}

struct std::pair<unsigned long const ,USER_STRING_MAP_DATA *> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ struct USER_STRING_MAP_DATA * second;
}

struct std::_Allocator_base<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > {
}

struct std::_Allocator_base<N3MessageQueue::lcData *> {
}

class std::_List_val<int,std::allocator<int> > {
  /* this+0x0 */ struct std::_List_nod<int,std::allocator<int> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<int,std::allocator<int> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<int> _Alval;
}

struct std::pair<int const ,_SERVERINFO *> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct _SERVERINFO * second;
}

struct std::_Allocator_base<std::pair<int const ,_SERVERINFO *> > {
}

struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,CZServer *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node> {
}

class std::allocator<unsigned char> {
}

struct std::allocator<unsigned char>::rebind<unsigned char> {
}

class std::allocator<N3MessageQueue::lcData *> {
}

struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node * _Right;
  /* this+0xc */ class std::tr1::shared_ptr<N3SchedulerTask<CZServer> > _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node> {
}

struct std::unary_function<double,unsigned int> {
}

class std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CZServer *> > _Alval;
}

class std::_Tree<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CZServer *> > _Alval;
}

struct std::pair<int,CZServer *> {
}

struct std::less<int> {
}

class std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0>::value_compare {
}

class std::allocator<std::pair<int const ,CZServer *> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > > > {
}

class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > {
  /* this+0x4 */ class std::_Mutex _Mylock;
  /* this+0x8 */ wchar_t * _Gfirst;
  /* this+0xc */ wchar_t * _Pfirst;
  /* this+0x10 */ wchar_t * * _IGfirst;
  /* this+0x14 */ wchar_t * * _IPfirst;
  /* this+0x18 */ wchar_t * _Gnext;
  /* this+0x1c */ wchar_t * _Pnext;
  /* this+0x20 */ wchar_t * * _IGnext;
  /* this+0x24 */ wchar_t * * _IPnext;
  /* this+0x28 */ int _Gcount;
  /* this+0x2c */ int _Pcount;
  /* this+0x30 */ int * _IGcount;
  /* this+0x34 */ int * _IPcount;
  /* this+0x38 */ class std::locale * _Plocale;
}

struct std::char_traits<wchar_t> {
}

class std::fpos<int> {
    /* this+0x0 */ __int64 _Myoff;
  /* this+0x8 */ __int64 _Fpos;
  /* this+0x10 */ int _Mystate;
}

class std::locale {
                  /* this+0x0 */ class std::locale::_Locimp * _Ptr;
}

class std::_Mutex {
  /* this+0x0 */ void * _Mtx;
}

class std::logic_error {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

class std::length_error {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

class std::exception {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

class std::runtime_error {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

struct std::ctype_base {
  /* this+0x4 */ unsigned int _Refs;
}

class std::ctype<char> {
  /* this+0x4 */ unsigned int _Refs;
      /* this+0x8 */ struct _Ctypevec _Ctype;
}

class std::locale::id {
  /* this+0x0 */ unsigned int _Id;
  }

class std::_Locinfo {
  /* this+0x0 */ class std::_Lockit _Lock;
  /* this+0x4 */ class std::_Yarn<char> _Days;
  /* this+0xc */ class std::_Yarn<char> _Months;
  /* this+0x14 */ class std::_Yarn<char> _Oldlocname;
  /* this+0x1c */ class std::_Yarn<char> _Newlocname;
}

class std::locale::facet {
  /* this+0x4 */ unsigned int _Refs;
}

struct _Ctypevec {
  /* this+0x0 */ unsigned long _Hand;
  /* this+0x4 */ unsigned int _Page;
  /* this+0x8 */ const short * _Table;
  /* this+0xc */ int _Delfl;
}

struct std::_Iterator_base12 {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
  /* this+0x4 */ struct std::_Iterator_base12 * _Mynextiter;
}

struct std::_Container_base12 {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
}

struct std::_Container_proxy {
  /* this+0x0 */ const struct std::_Container_base12 * _Mycont;
  /* this+0x4 */ struct std::_Iterator_base12 * _Myfirstiter;
}

struct std::_Num_int_base {
                                                          }

class std::numeric_limits<unsigned int> {
                                                                  }

class std::allocator<void> {
}

class std::ctype_byname<char> {
  /* this+0x4 */ unsigned int _Refs;
      /* this+0x8 */ struct _Ctypevec _Ctype;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ int second;
}

struct std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > {
}

struct std::allocator<std::pair<int const ,CZServer *> >::rebind<std::pair<int const ,CZServer *> > {
}

struct std::allocator<std::pair<int const ,CZServer *> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node> {
}

struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> _Myval;
  /* this+0x2c */ char _Color;
  /* this+0x2d */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node> {
}

class std::basic_ios<unsigned short,std::char_traits<unsigned short> > {
                                                                          /* this+0x8 */ unsigned int _Stdstr;
  /* this+0xc */ int _Mystate;
  /* this+0x10 */ int _Except;
  /* this+0x14 */ int _Fmtfl;
  /* this+0x18 */ __int64 _Prec;
  /* this+0x20 */ __int64 _Wide;
  /* this+0x28 */ struct std::ios_base::_Iosarray * _Arr;
  /* this+0x2c */ struct std::ios_base::_Fnarray * _Calls;
  /* this+0x30 */ class std::locale * _Ploc;
      /* this+0x38 */ class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > * _Mystrbuf;
  /* this+0x3c */ class std::basic_ostream<unsigned short,std::char_traits<unsigned short> > * _Tiestr;
  /* this+0x40 */ unsigned short _Fillch;
}

class std::basic_istream<unsigned short,std::char_traits<unsigned short> > {
  /* this+0x8 */ __int64 _Chcount;
}

class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > {
  /* this+0x4 */ class std::_Mutex _Mylock;
  /* this+0x8 */ unsigned short * _Gfirst;
  /* this+0xc */ unsigned short * _Pfirst;
  /* this+0x10 */ unsigned short * * _IGfirst;
  /* this+0x14 */ unsigned short * * _IPfirst;
  /* this+0x18 */ unsigned short * _Gnext;
  /* this+0x1c */ unsigned short * _Pnext;
  /* this+0x20 */ unsigned short * * _IGnext;
  /* this+0x24 */ unsigned short * * _IPnext;
  /* this+0x28 */ int _Gcount;
  /* this+0x2c */ int _Pcount;
  /* this+0x30 */ int * _IGcount;
  /* this+0x34 */ int * _IPcount;
  /* this+0x38 */ class std::locale * _Plocale;
}

class std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > {
}

class std::ctype<unsigned short> {
  /* this+0x4 */ unsigned int _Refs;
    /* this+0x8 */ struct _Ctypevec _Ctype;
  /* this+0x18 */ struct _Cvtvec _Cvt;
}

class std::num_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > {
}

class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base {
  /* this+0x0 */ class std::basic_istream<unsigned short,std::char_traits<unsigned short> > & _Myistr;
}

class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::sentry {
  /* this+0x0 */ class std::basic_istream<unsigned short,std::char_traits<unsigned short> > & _Myistr;
  /* this+0x4 */ bool _Ok;
}

class std::ios_base {
                                                                          /* this+0x8 */ unsigned int _Stdstr;
  /* this+0xc */ int _Mystate;
  /* this+0x10 */ int _Except;
  /* this+0x14 */ int _Fmtfl;
  /* this+0x18 */ __int64 _Prec;
  /* this+0x20 */ __int64 _Wide;
  /* this+0x28 */ struct std::ios_base::_Iosarray * _Arr;
  /* this+0x2c */ struct std::ios_base::_Fnarray * _Calls;
  /* this+0x30 */ class std::locale * _Ploc;
    }

struct std::_Bool_struct {
  /* this+0x0 */ int _Member;
}

class std::map<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > _Alval;
}

class std::allocator<wchar_t> {
}

class std::_String_val<wchar_t,std::allocator<wchar_t> > {
  /* this+0x0 */ union std::_String_val<wchar_t,std::allocator<wchar_t> >::_Bxty _Bx;
  /* this+0x10 */ unsigned int _Mysize;
  /* this+0x14 */ unsigned int _Myres;
  /* this+0x18 */ class std::allocator<wchar_t> _Alval;
}

union std::_String_val<wchar_t,std::allocator<wchar_t> >::_Bxty {
  /* this+0x0 */ wchar_t[0x8] _Buf;
  /* this+0x0 */ wchar_t * _Ptr;
  /* this+0x0 */ char[0x8] _Alias;
}

class std::_List_const_iterator<std::_List_val<int,std::allocator<int> > > {
  /* this+0x0 */ struct std::_List_nod<int,std::allocator<int> >::_Node * _Ptr;
}

class std::_List_iterator<std::_List_val<int,std::allocator<int> > > {
  /* this+0x0 */ struct std::_List_nod<int,std::allocator<int> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_List_iterator<std::_List_val<int,std::allocator<int> > > > {
}

class std::reverse_iterator<std::_List_const_iterator<std::_List_val<int,std::allocator<int> > > > {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node> {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,int,std::tr1::shared_ptr<N3SchedulerTask<CZServer> > const *,std::tr1::shared_ptr<N3SchedulerTask<CZServer> > const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node * _Ptr;
}

struct std::bidirectional_iterator_tag {
}

class std::tr1::shared_ptr<N3SchedulerTask<CZServer> > {
  /* this+0x0 */ class N3SchedulerTask<CZServer> * _Ptr;
  /* this+0x4 */ class std::tr1::_Ref_count_base * _Rep;
}

class std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > {
  /* this+0x0 */ class N3Scheduler<CZServer>::lcTaskPriority comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > _Alval;
}

class std::_Vector_val<unsigned char,std::allocator<unsigned char> > {
  /* this+0x0 */ unsigned char * _Myfirst;
  /* this+0x4 */ unsigned char * _Mylast;
  /* this+0x8 */ unsigned char * _Myend;
  /* this+0xc */ class std::allocator<unsigned char> _Alval;
}

struct std::unary_function<std::error_code,unsigned int> {
}

class std::error_code {
  /* this+0x0 */ int _Myval;
  /* this+0x4 */ const class std::error_category * _Mycat;
}

class std::hash<std::error_code> {
}

class std::allocator<N3MessageQueue::lcData> {
}

struct std::allocator<N3MessageQueue::lcData>::rebind<N3MessageQueue::lcData> {
}

struct std::allocator<N3MessageQueue::lcData>::rebind<N3MessageQueue::lcData *> {
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > {
}

struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node> {
}

class std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > {
}

struct std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >::rebind<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > {
}

struct std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node> {
}

struct std::_Allocator_base<char> {
}

class std::allocator<char> {
}

struct std::allocator<char>::rebind<char> {
}

struct std::unary_function<float,unsigned int> {
}

struct std::_Allocator_base<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > {
}

class std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > {
}

struct std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >::rebind<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > {
}

struct std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >::rebind<std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node> {
}

struct std::_Iterator_base0 {
}

struct std::random_access_iterator_tag {
}

struct std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base0> {
}

class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > {
  /* this+0x0 */ union std::_String_val<wchar_t,std::allocator<wchar_t> >::_Bxty _Bx;
  /* this+0x10 */ unsigned int _Mysize;
  /* this+0x14 */ unsigned int _Myres;
  /* this+0x18 */ class std::allocator<wchar_t> _Alval;
  }

class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > {
}

class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > {
  /* this+0x0 */ const wchar_t * _Ptr;
}

class std::reverse_iterator<std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > {
}

class std::reverse_iterator<std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > {
}

class std::basic_ios<char,std::char_traits<char> > {
                                                                          /* this+0x8 */ unsigned int _Stdstr;
  /* this+0xc */ int _Mystate;
  /* this+0x10 */ int _Except;
  /* this+0x14 */ int _Fmtfl;
  /* this+0x18 */ __int64 _Prec;
  /* this+0x20 */ __int64 _Wide;
  /* this+0x28 */ struct std::ios_base::_Iosarray * _Arr;
  /* this+0x2c */ struct std::ios_base::_Fnarray * _Calls;
  /* this+0x30 */ class std::locale * _Ploc;
      /* this+0x38 */ class std::basic_streambuf<char,std::char_traits<char> > * _Mystrbuf;
  /* this+0x3c */ class std::basic_ostream<char,std::char_traits<char> > * _Tiestr;
  /* this+0x40 */ char _Fillch;
}

class std::basic_ostream<char,std::char_traits<char> > {
}

class std::basic_streambuf<char,std::char_traits<char> > {
  /* this+0x4 */ class std::_Mutex _Mylock;
  /* this+0x8 */ char * _Gfirst;
  /* this+0xc */ char * _Pfirst;
  /* this+0x10 */ char * * _IGfirst;
  /* this+0x14 */ char * * _IPfirst;
  /* this+0x18 */ char * _Gnext;
  /* this+0x1c */ char * _Pnext;
  /* this+0x20 */ char * * _IGnext;
  /* this+0x24 */ char * * _IPnext;
  /* this+0x28 */ int _Gcount;
  /* this+0x2c */ int _Pcount;
  /* this+0x30 */ int * _IGcount;
  /* this+0x34 */ int * _IPcount;
  /* this+0x38 */ class std::locale * _Plocale;
}

class std::ostreambuf_iterator<char,std::char_traits<char> > {
}

class std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > {
}

class std::basic_ostream<char,std::char_traits<char> >::_Sentry_base {
  /* this+0x0 */ class std::basic_ostream<char,std::char_traits<char> > & _Myostr;
}

class std::basic_ostream<char,std::char_traits<char> >::sentry {
  /* this+0x0 */ class std::basic_ostream<char,std::char_traits<char> > & _Myostr;
  /* this+0x4 */ bool _Ok;
}

struct std::char_traits<char> {
}

class std::bad_cast {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

struct std::unary_function<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,unsigned int> {
}

struct std::binary_function<unsigned long,unsigned long,bool> {
}

struct std::_Num_float_base {
                                                                              }

class std::numeric_limits<float> {
                                                                                            }

struct std::output_iterator_tag {
}

class std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::allocator<std::pair<int const ,_SERVERINFO *> > {
}

struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,_SERVERINFO *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

class std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,_SERVERINFO *> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node> {
}

class std::_List_val<unsigned long,std::allocator<unsigned long> > {
  /* this+0x0 */ struct std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<unsigned long> _Alval;
}

class std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::numeric_limits<__int64> {
                                                                  }

class std::system_error {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
  /* this+0xc */ class std::error_code _Mycode;
}

class std::error_category {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node> {
}

class std::invalid_argument {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

struct std::unary_function<unsigned __int64,unsigned int> {
}

class std::hash<float> {
}

struct std::unary_function<__int64,unsigned int> {
}

class std::hash<__int64> {
}

struct std::allocator<unsigned long>::rebind<unsigned long> {
}

struct std::allocator<unsigned long>::rebind<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node> {
}

struct CHARINFO_IN_GROUP {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ char[0x18] charName;
  /* this+0x20 */ unsigned char Role;
  /* this+0x21 */ unsigned char curState;
}

struct std::_Allocator_base<CHARINFO_IN_GROUP *> {
}

struct std::allocator<std::pair<int const ,_SERVERINFO *> >::rebind<std::pair<int const ,_SERVERINFO *> > {
}

struct std::allocator<std::pair<int const ,_SERVERINFO *> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node> {
}

class std::codecvt_base {
  /* this+0x4 */ unsigned int _Refs;
}

class std::allocator<CHARINFO_IN_GROUP *> {
}

struct std::allocator<CHARINFO_IN_GROUP *>::rebind<CHARINFO_IN_GROUP *> {
}

class std::underflow_error {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

class std::_Vector_val<CHARINFO_IN_GROUP *,std::allocator<CHARINFO_IN_GROUP *> > {
  /* this+0x0 */ struct CHARINFO_IN_GROUP * * _Myfirst;
  /* this+0x4 */ struct CHARINFO_IN_GROUP * * _Mylast;
  /* this+0x8 */ struct CHARINFO_IN_GROUP * * _Myend;
  /* this+0xc */ class std::allocator<CHARINFO_IN_GROUP *> _Alval;
}

class std::bad_exception {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,USER_STRING_MAP_DATA *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node> {
}

class std::numeric_limits<bool> {
                                                                    }

class std::numeric_limits<unsigned short> {
                                                                  }

class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > _Alval;
}

class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ int second;
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0>::value_compare {
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > > > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node * _Ptr;
}

class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > _Alval;
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > _Alval;
}

struct USER_STRING_MAP_DATA {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ unsigned long ServerID;
  /* this+0xc */ unsigned long GRID;
  /* this+0x10 */ int sex;
  /* this+0x14 */ short age;
  /* this+0x16 */ short level;
  /* this+0x18 */ short job;
  /* this+0x1a */ short head;
  /* this+0x1c */ short headpalette;
  /* this+0x1e */ char[0x18] accountName;
  /* this+0x36 */ char[0x18] characterName;
  /* this+0x4e */ char[0x10] mapName;
  /* this+0x5e */ struct STRUCT_FRIEND[0x28] Friends;
  /* this+0x55e */ int FriendNumber;
  /* this+0x562 */ int MailCounter;
  /* this+0x566 */ struct DBMAILINFO[0x3c] MailInfo;
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0>::value_compare {
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > > > {
}

class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > {
  /* this+0x0 */ const char * _Ptr;
}

class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > {
  /* this+0x0 */ const char * _Ptr;
}

class std::basic_istream<char,std::char_traits<char> > {
  /* this+0x8 */ __int64 _Chcount;
}

class std::istreambuf_iterator<char,std::char_traits<char> > {
}

class std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > {
}

class std::basic_istream<char,std::char_traits<char> >::_Sentry_base {
  /* this+0x0 */ class std::basic_istream<char,std::char_traits<char> > & _Myistr;
}

class std::basic_istream<char,std::char_traits<char> >::sentry {
  /* this+0x0 */ class std::basic_istream<char,std::char_traits<char> > & _Myistr;
  /* this+0x4 */ bool _Ok;
}

struct std::_Allocator_base<wchar_t> {
}

struct std::allocator<wchar_t>::rebind<wchar_t> {
}

class std::_String_val<char,std::allocator<char> > {
  /* this+0x0 */ union std::_String_val<char,std::allocator<char> >::_Bxty _Bx;
  /* this+0x10 */ unsigned int _Mysize;
  /* this+0x14 */ unsigned int _Myres;
  /* this+0x18 */ class std::allocator<char> _Alval;
}

union std::_String_val<char,std::allocator<char> >::_Bxty {
  /* this+0x0 */ char[0x10] _Buf;
  /* this+0x0 */ char * _Ptr;
  /* this+0x0 */ char[0x10] _Alias;
}

class std::numeric_limits<unsigned long> {
                                                                  }

struct std::unary_function<unsigned long,unsigned int> {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node> {
}

class std::_Tree<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > _Alval;
}

class std::map<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > _Alval;
}

class std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0>::value_compare {
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > > > {
}

class std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,_SERVERINFO *> > _Alval;
}

class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > > > {
}

struct std::_Num_base {
                                              }

class std::_Iosb<int> {
                                                                        }

class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > _Alval;
}

class std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CZServer *> > _Alval;
}

struct std::binary_function<int,int,bool> {
}

struct std::unary_function<long double,unsigned int> {
}

class std::codecvt<unsigned short,char,int> {
  /* this+0x4 */ unsigned int _Refs;
    /* this+0x8 */ struct _Cvtvec _Cvt;
}

struct _Cvtvec {
  /* this+0x0 */ unsigned long _Hand;
  /* this+0x4 */ unsigned int _Page;
}

class std::error_condition {
  /* this+0x0 */ int _Myval;
  /* this+0x4 */ const class std::error_category * _Mycat;
}

class std::map<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CParty *> > _Alval;
}

class CParty {
  /* this+0x4 */ unsigned long m_groupID;
  /* this+0x8 */ struct GROUP_INFO m_groupInfo;
  /* this+0xe */ char[0x18] m_groupName;
  /* this+0x28 */ class std::vector<CHARINFO_IN_GROUP *,std::allocator<CHARINFO_IN_GROUP *> > m_users;
  /* this+0x38 */ class CMemoryMgr<CHARINFO_IN_GROUP> m_userMPool;
}

struct std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base0> {
}

class std::_Exception_ptr {
  /* this+0x0 */ void * _Data1;
  /* this+0x4 */ void * _Data2;
}

class std::numeric_limits<int> {
                                                                  }

class std::vector<unsigned char,std::allocator<unsigned char> > {
  /* this+0x0 */ unsigned char * _Myfirst;
  /* this+0x4 */ unsigned char * _Mylast;
  /* this+0x8 */ unsigned char * _Myend;
  /* this+0xc */ class std::allocator<unsigned char> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > > {
  /* this+0x0 */ unsigned char * _Ptr;
}

class std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > > {
  /* this+0x0 */ unsigned char * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<unsigned char,std::allocator<unsigned char> > > > {
}

struct std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int> {
}

class std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

struct std::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool> {
}

struct std::input_iterator_tag {
}

struct std::forward_iterator_tag {
}

class std::hash<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > {
}

class std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > {
  /* this+0x0 */ class N3Scheduler<CZServer>::lcTaskPriority comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > _Alval;
}

class N3Scheduler<CZServer>::lcTaskPriority {
}

class std::ctype<wchar_t> {
  /* this+0x4 */ unsigned int _Refs;
    /* this+0x8 */ struct _Ctypevec _Ctype;
  /* this+0x18 */ struct _Cvtvec _Cvt;
}

class std::list<unsigned long,std::allocator<unsigned long> > {
  /* this+0x0 */ struct std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<unsigned long> _Alval;
}

class std::_List_const_iterator<std::_List_val<unsigned long,std::allocator<unsigned long> > > {
  /* this+0x0 */ struct std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node * _Ptr;
}

class std::_List_iterator<std::_List_val<unsigned long,std::allocator<unsigned long> > > {
  /* this+0x0 */ struct std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_List_iterator<std::_List_val<unsigned long,std::allocator<unsigned long> > > > {
}

class std::reverse_iterator<std::_List_const_iterator<std::_List_val<unsigned long,std::allocator<unsigned long> > > > {
}

class std::tr1::_Ptr_base<N3SchedulerTask<CZServer> > {
  /* this+0x0 */ class N3SchedulerTask<CZServer> * _Ptr;
  /* this+0x4 */ class std::tr1::_Ref_count_base * _Rep;
}

class N3SchedulerTask<CZServer> {
  /* this+0x4 */ const unsigned long m_Identity;
  /* this+0x8 */ unsigned long m_Time;
}

class type_info {
  /* this+0x4 */ void * _M_data;
  /* this+0x8 */ char[0x1] _M_d_name;
}

class std::tr1::_Ref_count_base {
  /* this+0x4 */ long _Uses;
  /* this+0x8 */ long _Weaks;
}

struct std::tr1::_Nil {
}

class std::tr1::bad_weak_ptr {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

class std::tr1::tuple<std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> {
  /* this+0x0 */ struct std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> _Impl;
}

struct std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> {
  /* this+0x0 */ struct std::tr1::_Nil _Value;
  /* this+0x1 */ struct std::tr1::_Nil _Tail;
}

struct std::char_traits<unsigned short> {
}

struct std::pair<int,_SERVERINFO *> {
}

class std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0>::value_compare {
}

class std::numeric_limits<char> {
                                                                  }

class std::domain_error {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

class std::numeric_limits<double> {
                                                                                            }

class std::numeric_limits<long double> {
                                                                                            }

class std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > _Alval;
}

struct std::pair<unsigned long,USER_STRING_MAP_DATA *> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > > > {
}

class std::hash<unsigned long> {
}

class std::bad_alloc {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

class std::bad_array_new_length {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

class std::hash<double> {
}

class std::overflow_error {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

struct std::unary_function<std::error_condition,unsigned int> {
}

class std::hash<std::error_condition> {
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::_Yarn<char> {
  /* this+0x0 */ char * _Myptr;
  /* this+0x4 */ char _Nul;
}

class std::range_error {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node> {
}

class std::map<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CZServer *> > _Alval;
}

class CZServer {
  /* this+0x4 */ class CAsyncStream * m_asyncStream;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_disconnector_cs;
  /* this+0x20 */ unsigned long m_dwErrorCount;
  /* this+0x24 */ unsigned long m_nBanTime;
  /* this+0x28 */ class CZSPacketHandler m_packetHandler;
  /* this+0x38 */ int m_ZServerID;
  /* this+0x3c */ unsigned long m_IP;
  /* this+0x40 */ int m_first;
  /* this+0x44 */ unsigned long m_firstTick;
  /* this+0x48 */ class std::list<unsigned long,std::allocator<unsigned long> > m_SendListGDID;
  /* this+0x54 */ int m_bSendInfo;
  /* this+0x58 */ int m_HsvrID;
  /* this+0x5c */ class N3Scheduler<CZServer> m_Scheduler;
  /* this+0x70 */ unsigned int m_LastPacketSendTM;
  /* this+0x74 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > m_ServiceMap;
  /* this+0x84 */ int m_TotalPlayerNum;
  /* this+0x88 */ int m_UsedMemoryKBytes;
  /* this+0x8c */ int m_TotalNPCNum;
  /* this+0x90 */ int m_InstantMapNum;
  /* this+0x94 */ int m_InstantMapBlockCnt;
  /* this+0x98 */ unsigned long m_RegisteredMgrFUCnt;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > _Alval;
}

class std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> {
  /* this+0x0 */ class N3Scheduler<CZServer>::lcTaskPriority comp;
}

struct std::_Iterator012<std::random_access_iterator_tag,CHARINFO_IN_GROUP *,int,CHARINFO_IN_GROUP * const *,CHARINFO_IN_GROUP * const &,std::_Iterator_base0> {
}

class std::_Tree<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,_SERVERINFO *> > _Alval;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > > > {
}

class std::basic_ios<wchar_t,std::char_traits<wchar_t> > {
                                                                          /* this+0x8 */ unsigned int _Stdstr;
  /* this+0xc */ int _Mystate;
  /* this+0x10 */ int _Except;
  /* this+0x14 */ int _Fmtfl;
  /* this+0x18 */ __int64 _Prec;
  /* this+0x20 */ __int64 _Wide;
  /* this+0x28 */ struct std::ios_base::_Iosarray * _Arr;
  /* this+0x2c */ struct std::ios_base::_Fnarray * _Calls;
  /* this+0x30 */ class std::locale * _Ploc;
      /* this+0x38 */ class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * _Mystrbuf;
  /* this+0x3c */ class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > * _Tiestr;
  /* this+0x40 */ wchar_t _Fillch;
}

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > {
}

struct _Collvec {
  /* this+0x0 */ unsigned long _Hand;
  /* this+0x4 */ unsigned int _Page;
}

class std::_Timevec {
  /* this+0x0 */ void * _Timeptr;
}

struct lconv {
  /* this+0x0 */ char * decimal_point;
  /* this+0x4 */ char * thousands_sep;
  /* this+0x8 */ char * grouping;
  /* this+0xc */ char * int_curr_symbol;
  /* this+0x10 */ char * currency_symbol;
  /* this+0x14 */ char * mon_decimal_point;
  /* this+0x18 */ char * mon_thousands_sep;
  /* this+0x1c */ char * mon_grouping;
  /* this+0x20 */ char * positive_sign;
  /* this+0x24 */ char * negative_sign;
  /* this+0x28 */ char int_frac_digits;
  /* this+0x29 */ char frac_digits;
  /* this+0x2a */ char p_cs_precedes;
  /* this+0x2b */ char p_sep_by_space;
  /* this+0x2c */ char n_cs_precedes;
  /* this+0x2d */ char n_sep_by_space;
  /* this+0x2e */ char p_sign_posn;
  /* this+0x2f */ char n_sign_posn;
  /* this+0x30 */ wchar_t * _W_decimal_point;
  /* this+0x34 */ wchar_t * _W_thousands_sep;
  /* this+0x38 */ wchar_t * _W_int_curr_symbol;
  /* this+0x3c */ wchar_t * _W_currency_symbol;
  /* this+0x40 */ wchar_t * _W_mon_decimal_point;
  /* this+0x44 */ wchar_t * _W_mon_thousands_sep;
  /* this+0x48 */ wchar_t * _W_positive_sign;
  /* this+0x4c */ wchar_t * _W_negative_sign;
}

class std::_Lockit {
  /* this+0x0 */ int _Locktype;
}

class std::hash<unsigned __int64> {
}

class std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::numeric_limits<long> {
                                                                  }

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > > > {
}

class std::out_of_range {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

class std::basic_istream<wchar_t,std::char_traits<wchar_t> > {
  /* this+0x8 */ __int64 _Chcount;
}

class std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > {
}

class std::num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > {
}

class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base {
  /* this+0x0 */ class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & _Myistr;
}

class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry {
  /* this+0x0 */ class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & _Myistr;
  /* this+0x4 */ bool _Ok;
}

class std::numeric_limits<wchar_t> {
                                                                  }

class std::numeric_limits<unsigned char> {
                                                                  }

class std::numeric_limits<unsigned __int64> {
                                                                  }

class std::hash<long double> {
}

class std::_Deque_val<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
  /* this+0x4 */ class N3MessageQueue::lcData * * _Map;
  /* this+0x8 */ unsigned int _Mapsize;
  /* this+0xc */ unsigned int _Myoff;
  /* this+0x10 */ unsigned int _Mysize;
  /* this+0x14 */ class std::allocator<N3MessageQueue::lcData> _Alval;
  /* this+0x15 */ class std::allocator<N3MessageQueue::lcData *> _Almap;
}

class std::deque<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
  /* this+0x4 */ class N3MessageQueue::lcData * * _Map;
  /* this+0x8 */ unsigned int _Mapsize;
  /* this+0xc */ unsigned int _Myoff;
  /* this+0x10 */ unsigned int _Mysize;
  /* this+0x14 */ class std::allocator<N3MessageQueue::lcData> _Alval;
  /* this+0x15 */ class std::allocator<N3MessageQueue::lcData *> _Almap;
  }

class std::_Deque_iterator<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
  /* this+0x4 */ struct std::_Iterator_base12 * _Mynextiter;
  /* this+0x8 */ unsigned int _Myoff;
}

class std::_Deque_const_iterator<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
  /* this+0x4 */ struct std::_Iterator_base12 * _Mynextiter;
  /* this+0x8 */ unsigned int _Myoff;
}

class std::reverse_iterator<std::_Deque_iterator<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > > {
}

class std::reverse_iterator<std::_Deque_const_iterator<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > > {
}

class std::codecvt<wchar_t,char,int> {
  /* this+0x4 */ unsigned int _Refs;
    /* this+0x8 */ struct _Cvtvec _Cvt;
}

class std::basic_ostream<unsigned short,std::char_traits<unsigned short> > {
}

class std::_Tree<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > {
  /* this+0x0 */ class N3Scheduler<CZServer>::lcTaskPriority comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > _Alval;
}

class std::multiset<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > > {
  /* this+0x0 */ class N3Scheduler<CZServer>::lcTaskPriority comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > _Alval;
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > > > {
}

class std::numeric_limits<short> {
                                                                  }

class std::vector<CHARINFO_IN_GROUP *,std::allocator<CHARINFO_IN_GROUP *> > {
  /* this+0x0 */ struct CHARINFO_IN_GROUP * * _Myfirst;
  /* this+0x4 */ struct CHARINFO_IN_GROUP * * _Mylast;
  /* this+0x8 */ struct CHARINFO_IN_GROUP * * _Myend;
  /* this+0xc */ class std::allocator<CHARINFO_IN_GROUP *> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<CHARINFO_IN_GROUP *,std::allocator<CHARINFO_IN_GROUP *> > > {
  /* this+0x0 */ struct CHARINFO_IN_GROUP * * _Ptr;
}

class std::_Vector_const_iterator<std::_Vector_val<CHARINFO_IN_GROUP *,std::allocator<CHARINFO_IN_GROUP *> > > {
  /* this+0x0 */ struct CHARINFO_IN_GROUP * * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<CHARINFO_IN_GROUP *,std::allocator<CHARINFO_IN_GROUP *> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<CHARINFO_IN_GROUP *,std::allocator<CHARINFO_IN_GROUP *> > > > {
}

class std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > {
}

class std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > {
}

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base {
  /* this+0x0 */ class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & _Myostr;
}

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry {
  /* this+0x0 */ class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & _Myostr;
  /* this+0x4 */ bool _Ok;
}

class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > {
}

class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > {
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > _Alval;
}

class std::_Locbase<int> {
                }

class std::locale::_Locimp {
  /* this+0x4 */ unsigned int _Refs;
  /* this+0x8 */ class std::locale::facet * * _Facetvec;
  /* this+0xc */ unsigned int _Facetcount;
  /* this+0x10 */ int _Catmask;
  /* this+0x14 */ bool _Xparent;
  /* this+0x18 */ class std::_Yarn<char> _Name;
  }

class std::numeric_limits<signed char> {
                                                                  }

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > > > {
}

class std::ios_base::failure {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
  /* this+0xc */ class std::error_code _Mycode;
}

class std::ios_base::Init {
  }

struct std::ios_base::_Iosarray {
  /* this+0x0 */ struct std::ios_base::_Iosarray * _Next;
  /* this+0x4 */ int _Index;
  /* this+0x8 */ long _Lo;
  /* this+0xc */ void * _Vp;
}

struct std::ios_base::_Fnarray {
  /* this+0x0 */ struct std::ios_base::_Fnarray * _Next;
  /* this+0x4 */ int _Index;
  /* this+0x8 */ function  * _Pfn;
}

class std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > {
}

class std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > > {
}

class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base {
  /* this+0x0 */ class std::basic_ostream<unsigned short,std::char_traits<unsigned short> > & _Myostr;
}

class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::sentry {
  /* this+0x0 */ class std::basic_ostream<unsigned short,std::char_traits<unsigned short> > & _Myostr;
  /* this+0x4 */ bool _Ok;
}

struct std::_Scalar_ptr_iterator_tag {
}

class CMemoryMgr<CHARINFO_IN_GROUP> {
  /* this+0x4 */ class CMemoryMgr<CHARINFO_IN_GROUP>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

class CMemoryMgr<CHARINFO_IN_GROUP>::lcMemory {
  /* this+0x4 */ struct CHARINFO_IN_GROUP * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

struct PACKET_ZI_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long targetAID;
  /* this+0x6 */ unsigned long GRID;
  /* this+0xa */ enum PACKET_ZC_PARTY_JOIN_REQ_ACK::enumAnswer answer;
}

struct PACKET_ZI_ENTRY_QUEUE_NAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct $_TypeDescriptor$_extraBytes_50 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x32] name;
}

struct __type_info_node {
  /* this+0x0 */ void * _MemPtr;
  /* this+0x4 */ struct __type_info_node * _Next;
}

struct $_TypeDescriptor$_extraBytes_36 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x24] name;
}

struct $_TypeDescriptor$_extraBytes_21 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x15] name;
}

class CAsyncStream {
  /* this+0x4 */ unsigned long m_completionKey;
    /* this+0x8 */ unsigned int m_socket;
  /* this+0xc */ class CPacketQueue m_sendQueue;
  /* this+0x38 */ class CPacketQueue m_recvQueue;
  /* this+0x64 */ struct _RTL_CRITICAL_SECTION m_csLock;
  /* this+0x7c */ struct CAsyncOperation m_recvOperation;
  /* this+0x28a4 */ struct CAsyncOperation m_sendOperation;
  /* this+0x50cc */ class CPacketHandler * m_packetHandler;
  /* this+0x50d0 */ unsigned long m_lastError;
}

class CPacketHandler {
  /* this+0x4 */ class CPacketQueue * m_recvQueue;
}

struct CAsyncOperation {
  /* this+0x0 */ unsigned long Internal;
  /* this+0x4 */ unsigned long InternalHigh;
  /* this+0x8 */ unsigned long Offset;
  /* this+0xc */ unsigned long OffsetHigh;
  /* this+0x8 */ void * Pointer;
  /* this+0x10 */ void * hEvent;
  /* this+0x14 */ struct _WSABUF m_dataBuf;
  /* this+0x1c */ char[0x2800] m_buffer;
  /* this+0x281c */ int m_type;
  /* this+0x2820 */ unsigned int m_socket;
  /* this+0x2824 */ class CAsyncStream * m_stream;
}

class CPacketQueue {
  /* this+0x0 */ char * m_buf;
  /* this+0x4 */ int m_capacity;
  /* this+0x8 */ int m_front;
  /* this+0xc */ int m_rear;
  /* this+0x10 */ int m_size;
  /* this+0x14 */ struct _RTL_CRITICAL_SECTION m_cs;
}

struct PACKET_ZI_REQ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
}

struct PACKET_ZI_REQ_JOIN_GUILD2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long myAID;
  /* this+0x6 */ unsigned long myGID;
  /* this+0xa */ char[0x18] receiverName;
}

struct $_TypeDescriptor$_extraBytes_48 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x30] name;
}

struct PACKET_ZI_RESULT_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ unsigned char Result;
  /* this+0xb */ char[0x18] EntryQueueName;
}

struct PACKET_ZI_PING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned int UsedKBytesMemory;
  /* this+0x6 */ unsigned int NumTotalNPC;
}

struct PACKET_IZ_REQ_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GRID;
  /* this+0xa */ unsigned long expOption;
  /* this+0xe */ unsigned char ItemPickupRule;
  /* this+0xf */ unsigned char ItemDivisionRule;
}

class NFileLog {
  /* this+0x4 */ bool m_bOK;
  /* this+0x5 */ bool m_bOutput;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x20 */ char[0x400] m_szLogDir;
  /* this+0x420 */ char[0x400] m_szLogFilePrefix;
  /* this+0x820 */ unsigned int m_SequenceFileCnt;
  /* this+0x824 */ int m_BytesOfWritten;
}

class NCriticalErrorLog {
  /* this+0x4 */ bool m_bOK;
  /* this+0x5 */ bool m_bOutput;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x20 */ char[0x400] m_szLogDir;
  /* this+0x420 */ char[0x400] m_szLogFilePrefix;
  /* this+0x820 */ unsigned int m_SequenceFileCnt;
  /* this+0x824 */ int m_BytesOfWritten;
    /* this+0x828 */ bool m_bOK;
}

struct PACKET_ZC_QUEST_INFO {
  /* this+0x0 */ unsigned long questID;
  /* this+0x4 */ bool active;
}

struct PACKET_ZI_REQ_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
}

struct _WSABUF {
  /* this+0x0 */ unsigned long len;
  /* this+0x4 */ char * buf;
}

struct $_TypeDescriptor$_extraBytes_52 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x34] name;
}

struct $_TypeDescriptor$_extraBytes_27 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x1b] name;
}

struct PACKET_ZI_REQ_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
  /* this+0x22 */ short ApplyType;
  /* this+0x24 */ unsigned long GDID;
}

struct PACKET_ZI_INSTANTMAP_CREATE_RES {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned int hRequestN2Obj;
  /* this+0x6 */ char[0x10] mapName;
  /* this+0x16 */ int mapID;
  /* this+0x1a */ bool bSuccess;
}

struct PACKET_ZI_RESULT_ENTRY_QUEUE_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ unsigned char Result;
  /* this+0xb */ char[0x18] EntryQueueName;
}

struct PACKET_IZ_CHAT_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long receiverAID;
  /* this+0x8 */ unsigned long senderAID;
}

struct $_TypeDescriptor$_extraBytes_24 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x18] name;
}

struct PACKET_ZC_ACK_TOUSESKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ unsigned long NUM;
  /* this+0x8 */ bool result;
  /* this+0x9 */ unsigned char cause;
}

struct _PMD {
  /* this+0x0 */ int mdisp;
  /* this+0x4 */ int pdisp;
  /* this+0x8 */ int vdisp;
}

class CMemoryMgr<USER_STRING_MAP_DATA> {
  /* this+0x4 */ class CMemoryMgr<USER_STRING_MAP_DATA>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

class CMemoryMgr<USER_STRING_MAP_DATA>::lcMemory {
  /* this+0x4 */ struct USER_STRING_MAP_DATA * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

struct GROUP_INFO {
  /* this+0x0 */ unsigned long expOption;
  /* this+0x4 */ unsigned char ItemPickupRule;
  /* this+0x5 */ unsigned char ItemDivisionRule;
}

struct $_s__RTTIBaseClassArray$_extraBytes_8 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x2] arrayOfBaseClassDescriptors;
}

struct PACKET_ZI_ENTRY_QUEUE_MOVE_ROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x10] mapName;
  /* this+0x1a */ int xPos;
  /* this+0x1e */ int yPos;
}

union __m128 {
  /* this+0x0 */ float[0x4] m128_f32;
  /* this+0x0 */ unsigned __int64[0x2] m128_u64;
  /* this+0x0 */ char[0x10] m128_i8;
  /* this+0x0 */ short[0x8] m128_i16;
  /* this+0x0 */ int[0x4] m128_i32;
  /* this+0x0 */ __int64[0x2] m128_i64;
  /* this+0x0 */ unsigned char[0x10] m128_u8;
  /* this+0x0 */ unsigned short[0x8] m128_u16;
  /* this+0x0 */ unsigned int[0x4] m128_u32;
}

struct $_TypeDescriptor$_extraBytes_26 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x1a] name;
}

struct $_TypeDescriptor$_extraBytes_14 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0xe] name;
}

struct _lldiv_t {
  /* this+0x0 */ __int64 quot;
  /* this+0x8 */ __int64 rem;
}

class N3SyncObject {
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION & m_CS;
}

class CMemoryMgr<CParty> {
  /* this+0x4 */ class CMemoryMgr<CParty>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

class CMemoryMgr<CParty>::lcMemory {
  /* this+0x4 */ class CParty * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

struct PACKET_ZC_USE_SKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ short level;
  /* this+0x6 */ unsigned long targetAID;
  /* this+0xa */ unsigned long srcAID;
  /* this+0xe */ bool result;
}

struct PACKET_IZ_PARTY_BROADCAST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
}

struct _TP_CALLBACK_INSTANCE {
}

struct EQUIPSLOTINFO {
  /* this+0x0 */ unsigned short[0x4] info;
}

struct $_s__RTTIBaseClassArray$_extraBytes_4 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x1] arrayOfBaseClassDescriptors;
}

struct PACKET_ZI_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
}

struct BUYING_STORE_ITEMLIST {
  /* this+0x0 */ int price;
  /* this+0x4 */ short count;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ unsigned short ITID;
}

struct PACKET_ZI_RESULT_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ unsigned char Result;
  /* this+0xb */ char[0x18] EntryQueueName;
}

struct PACKET_ZI_LOBBY_ADMISSION_V2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
  /* this+0x22 */ char[0x18] LobbyName;
  /* this+0x3a */ char CampCode;
  /* this+0x3b */ short xPos;
  /* this+0x3d */ short yPos;
}

struct $_TypeDescriptor$_extraBytes_43 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x2b] name;
}

struct PACKET_ZI_NOTIFY_ENTRY_QUEUE_RANKING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
  /* this+0x22 */ int Ranking;
}

struct tagLC_ID {
  /* this+0x0 */ unsigned short wLanguage;
  /* this+0x2 */ unsigned short wCountry;
  /* this+0x4 */ unsigned short wCodePage;
}

struct PACKET_IZ_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long receiverAID;
  /* this+0x6 */ unsigned long OldMasterAID;
  /* this+0xa */ unsigned long NewMasterAID;
}

struct $_TypeDescriptor$_extraBytes_30 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x1e] name;
}

class CUserMgr {
  /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > > m_userStringMap;
  /* this+0x14 */ class std::map<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > > m_userAIDMap;
  /* this+0x24 */ class CMemoryMgr<USER_STRING_MAP_DATA> m_userData;
  /* this+0x48 */ class CMemoryMgr<CUserMgr::SERVER_MOVE_USER> m_ServerMoveUserPool;
  /* this+0x6c */ class std::map<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > > m_ServerMoveUser;
}

struct STRUCT_FRIEND {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ char[0x18] Name;
}

struct _RTL_CRITICAL_SECTION_DEBUG {
  /* this+0x0 */ unsigned short Type;
  /* this+0x2 */ unsigned short CreatorBackTraceIndex;
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION * CriticalSection;
  /* this+0x8 */ struct _LIST_ENTRY ProcessLocksList;
  /* this+0x10 */ unsigned long EntryCount;
  /* this+0x14 */ unsigned long ContentionCount;
  /* this+0x18 */ unsigned long Flags;
  /* this+0x1c */ unsigned short CreatorBackTraceIndexHigh;
  /* this+0x1e */ unsigned short SpareWORD;
}

struct $_TypeDescriptor$_extraBytes_19 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x13] name;
}

struct PACKET_ZI_MEMORIALDUNGEON_SUBSCRIPTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3d] Name;
  /* this+0x3f */ char[0x3d] NickName;
  /* this+0x7c */ unsigned long GRID;
  /* this+0x80 */ unsigned long AID;
  /* this+0x84 */ unsigned long GID;
}

struct _s__ThrowInfo {
  /* this+0x0 */ unsigned int attributes;
  /* this+0x4 */ function  * pmfnUnwind;
  /* this+0x8 */ function  * pForwardCompat;
  /* this+0xc */ const struct _s__CatchableTypeArray * pCatchableTypeArray;
}

struct ENTRY_QUEUE_APPLY_INFO {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ char[0x18] charName;
  /* this+0x20 */ short job;
  /* this+0x22 */ short level;
}

struct PACKET_ZI_PING_LIVE {
  /* this+0x0 */ short PacketType;
}

class CMemoryMgr<CZServer> {
  /* this+0x4 */ class CMemoryMgr<CZServer>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

class CMemoryMgr<CZServer>::lcMemory {
  /* this+0x4 */ class CZServer * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

struct threadlocaleinfostruct::<unnamed-type-lc_category> {
  /* this+0x0 */ char * locale;
  /* this+0x4 */ wchar_t * wlocale;
  /* this+0x8 */ int * refcount;
  /* this+0xc */ int * wrefcount;
}

struct __lc_time_data {
  /* this+0x0 */ char *[0x7] wday_abbr;
  /* this+0x1c */ char *[0x7] wday;
  /* this+0x38 */ char *[0xc] month_abbr;
  /* this+0x68 */ char *[0xc] month;
  /* this+0x98 */ char *[0x2] ampm;
  /* this+0xa0 */ char * ww_sdatefmt;
  /* this+0xa4 */ char * ww_ldatefmt;
  /* this+0xa8 */ char * ww_timefmt;
  /* this+0xac */ unsigned long ww_lcid;
  /* this+0xb0 */ int ww_caltype;
  /* this+0xb4 */ int refcount;
  /* this+0xb8 */ wchar_t *[0x7] _W_wday_abbr;
  /* this+0xd4 */ wchar_t *[0x7] _W_wday;
  /* this+0xf0 */ wchar_t *[0xc] _W_month_abbr;
  /* this+0x120 */ wchar_t *[0xc] _W_month;
  /* this+0x150 */ wchar_t *[0x2] _W_ampm;
  /* this+0x158 */ wchar_t * _W_ww_sdatefmt;
  /* this+0x15c */ wchar_t * _W_ww_ldatefmt;
  /* this+0x160 */ wchar_t * _W_ww_timefmt;
}

struct PACKET_ZI_WHISPER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long senderAID;
  /* this+0x8 */ char[0x18] sender;
  /* this+0x20 */ char[0x18] receiver;
  /* this+0x38 */ char[0x18] senderAccountName;
}

struct $_TypeDescriptor$_extraBytes_22 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x16] name;
}

struct _TP_POOL {
}

struct _TP_CLEANUP_GROUP {
}

struct _ACTIVATION_CONTEXT {
}

union _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u> {
  /* this+0x0 */ unsigned long Flags;
  /* this+0x0 */ struct _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u>::<unnamed-type-s> s;
}

struct _TP_CALLBACK_ENVIRON_V3 {
  /* this+0x0 */ unsigned long Version;
  /* this+0x4 */ struct _TP_POOL * Pool;
  /* this+0x8 */ struct _TP_CLEANUP_GROUP * CleanupGroup;
  /* this+0xc */ function  * CleanupGroupCancelCallback;
  /* this+0x10 */ void * RaceDll;
  /* this+0x14 */ struct _ACTIVATION_CONTEXT * ActivationContext;
  /* this+0x18 */ function  * FinalizationCallback;
  /* this+0x1c */ union _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u> u;
  /* this+0x20 */ enum _TP_CALLBACK_PRIORITY CallbackPriority;
  /* this+0x24 */ unsigned long Size;
}

struct PACKET_ZC_ITEM_FALL_ENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ITAID;
  /* this+0x6 */ unsigned short ITID;
  /* this+0x8 */ bool IsIdentified;
  /* this+0x9 */ short xPos;
  /* this+0xb */ short yPos;
  /* this+0xd */ unsigned char subX;
  /* this+0xe */ unsigned char subY;
  /* this+0xf */ short count;
}

struct $_s__CatchableTypeArray$_extraBytes_8 {
  /* this+0x0 */ int nCatchableTypes;
  /* this+0x4 */ const struct _s__CatchableType *[0x2] arrayOfCatchableTypes;
}

struct _ldiv_t {
  /* this+0x0 */ long quot;
  /* this+0x4 */ long rem;
}

struct _iobuf {
  /* this+0x0 */ char * _ptr;
  /* this+0x4 */ int _cnt;
  /* this+0x8 */ char * _base;
  /* this+0xc */ int _flag;
  /* this+0x10 */ int _file;
  /* this+0x14 */ int _charbuf;
  /* this+0x18 */ int _bufsiz;
  /* this+0x1c */ char * _tmpfname;
}

struct PACKET_ZI_RESULT_LOBBY_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ unsigned char Result;
  /* this+0xb */ char[0x18] EntryQueueName;
  /* this+0x23 */ char[0x18] LobbyName;
}

struct PACKET_ZI_ENTRY_QUEUE_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
  /* this+0x22 */ char[0x10] mapName;
  /* this+0x32 */ int xPos;
  /* this+0x36 */ int yPos;
}

struct HDC__ {
  /* this+0x0 */ int unused;
}

struct DBMAILINFO {
  /* this+0x0 */ unsigned long MailID;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long GID;
  /* this+0xc */ char[0x28] Header;
  /* this+0x34 */ int Reading;
  /* this+0x38 */ char[0x28] ItemInfo;
  /* this+0x60 */ int ItemLen;
  /* this+0x64 */ unsigned long Money;
  /* this+0x68 */ char[0x18] FromName;
  /* this+0x80 */ char[0xc8] Text;
  /* this+0x148 */ struct MAILTIME DeleteTime;
}

struct PACKET_ZI_INSTANTMAP_ALLOW {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum PACKET_ZI_INSTANTMAP_ALLOW::enumWhy why;
  /* this+0x6 */ bool bAllow;
}

struct PACKET_ZI_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
  /* this+0x22 */ char[0x18] LobbyName;
}

struct $_TypeDescriptor$_extraBytes_31 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x1f] name;
}

struct UnPackItemInfo {
  /* this+0x0 */ unsigned short ITID;
  /* this+0x2 */ unsigned int BoxID;
}

class CDBStatement {
  /* this+0x0 */ void * m_hStmt;
}

struct $_TypeDescriptor$_extraBytes_46 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x2e] name;
}

struct $_TypeDescriptor$_extraBytes_49 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x31] name;
}

struct CPartyDB::RULE_VALUE {
      }

struct CPartyDB::PARTY_RULE_VALUE {
  /* this+0x0 */ struct CPartyDB::RULE_VALUE RuleValue;
  /* this+0x0 */ int DBValue;
}

class CPartyDB {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
  }

struct DBGROUPINFO {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ unsigned long GRID;
  /* this+0xc */ char[0x18] name;
  /* this+0x24 */ unsigned long Role;
}

class N3Scheduler<CZServer> {
  /* this+0x4 */ class std::multiset<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > > m_Tasks;
}

struct $_TypeDescriptor$_extraBytes_40 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x28] name;
}

struct PACKET_IZ_DELETE_MEMBER_FROM_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long receiverAID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ char[0x18] characterName;
  /* this+0x22 */ unsigned char result;
}

struct PACKET_ZI_MEMORIALDUNGEON_VISA {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
}

struct GROUPMEMBER_INFO {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ char[0x18] characterName;
  /* this+0x1c */ char[0x10] mapName;
  /* this+0x2c */ unsigned char role;
  /* this+0x2d */ unsigned char state;
}

struct PACKET_ZI_GRID_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GRID;
  /* this+0xa */ unsigned long expOption;
}

struct PACKET_ZI_OTHER_ZONE_PC_SEND_MSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short msg;
  /* this+0x4 */ unsigned long TargetAID;
}

class CVTBLErrorLog {
  /* this+0x4 */ bool m_bOK;
  /* this+0x5 */ bool m_bOutput;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x20 */ char[0x400] m_szLogDir;
  /* this+0x420 */ char[0x400] m_szLogFilePrefix;
  /* this+0x820 */ unsigned int m_SequenceFileCnt;
  /* this+0x824 */ int m_BytesOfWritten;
    /* this+0x828 */ bool m_bOK;
}

struct $_TypeDescriptor$_extraBytes_23 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x17] name;
}

struct PACKET_ZI_INFO_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char Result;
  /* this+0x5 */ char[0x18] EntryQueueName;
  /* this+0x1d */ int Ranking;
}

struct CASH_ITEM_LIST2 {
  /* this+0x0 */ unsigned short item_id;
  /* this+0x2 */ int price;
}

class CClient {
  /* this+0x4 */ class CAsyncStream * m_asyncStream;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_disconnector_cs;
  /* this+0x20 */ unsigned long m_dwErrorCount;
  /* this+0x24 */ unsigned long m_nBanTime;
}

class CZSPacketHandler {
  /* this+0x4 */ class CPacketQueue * m_recvQueue;
  /* this+0x8 */ class CZServer * m_zServer;
  /* this+0xc */ unsigned int m_LastPacketRecvTM;
}

struct PACKET_ZI_ENTRY_QUEUE_DELETE_GID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
}

struct PACKET_ZI_LOBBY_MOVE_ROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x10] mapName;
  /* this+0x1a */ int xPos;
  /* this+0x1e */ int yPos;
}

struct PACKET_IZ_PARTY_BROADCAST_VAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ unsigned long AID;
}

struct tm {
  /* this+0x0 */ int tm_sec;
  /* this+0x4 */ int tm_min;
  /* this+0x8 */ int tm_hour;
  /* this+0xc */ int tm_mday;
  /* this+0x10 */ int tm_mon;
  /* this+0x14 */ int tm_year;
  /* this+0x18 */ int tm_wday;
  /* this+0x1c */ int tm_yday;
  /* this+0x20 */ int tm_isdst;
}

struct PACKET_ZI_INSTANTMAP_ERROR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned int hRequestN2Obj;
  /* this+0x6 */ int mapID;
  /* this+0xa */ enum PACKET_ZI_INSTANTMAP_ERROR::enumWhy why;
}

struct _OVERLAPPED {
  /* this+0x0 */ unsigned long Internal;
  /* this+0x4 */ unsigned long InternalHigh;
  /* this+0x8 */ unsigned long Offset;
  /* this+0xc */ unsigned long OffsetHigh;
  /* this+0x8 */ void * Pointer;
  /* this+0x10 */ void * hEvent;
}

struct PACKET_ZI_STATEINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned int UsedKBytesMemory;
  /* this+0x6 */ unsigned int NumTotalNPC;
}

struct $_TypeDescriptor$_extraBytes_20 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x14] name;
}

struct PACKET_ZC_NOTIFY_STANDENTRY_NPC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char objecttype;
  /* this+0x3 */ unsigned long GID;
  /* this+0x7 */ short speed;
  /* this+0x9 */ short bodyState;
  /* this+0xb */ short healthState;
  /* this+0xd */ short effectState;
  /* this+0xf */ short head;
  /* this+0x11 */ short weapon;
  /* this+0x13 */ short accessory;
  /* this+0x15 */ short job;
  /* this+0x17 */ short shield;
  /* this+0x19 */ short accessory2;
  /* this+0x1b */ short accessory3;
  /* this+0x1d */ short headpalette;
  /* this+0x1f */ short bodypalette;
  /* this+0x21 */ short headDir;
  /* this+0x23 */ bool isPKModeON;
  /* this+0x24 */ unsigned char sex;
  /* this+0x25 */ unsigned char[0x3] PosDir;
  /* this+0x28 */ unsigned char xSize;
  /* this+0x29 */ unsigned char ySize;
  /* this+0x2a */ short clevel;
}

struct PACKET_IZ_GROUP_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long expOption;
  /* this+0xc */ char[0x18] groupName;
}

struct PACKET_CZ_CONTACTNPC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ unsigned char type;
}

struct _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u>::<unnamed-type-s> {
      }

union _Dconst {
  /* this+0x0 */ unsigned short[0x8] _Word;
  /* this+0x0 */ float _Float;
  /* this+0x0 */ double _Double;
  /* this+0x0 */ double _Long_double;
}

struct PACKET_XX_CONNECT {
  /* this+0x0 */ short PacketType;
}

struct ResultItemInfo {
  /* this+0x0 */ unsigned int SSI_ID;
  /* this+0x4 */ unsigned int AID;
  /* this+0x8 */ char[0x50] StoreName;
  /* this+0x58 */ unsigned short ITID;
  /* this+0x5a */ unsigned char ItemType;
  /* this+0x5b */ int price;
  /* this+0x5f */ unsigned short count;
  /* this+0x61 */ unsigned char refiningLevel;
  /* this+0x62 */ struct EQUIPSLOTINFO CardSlot;
}

struct PACKET_ZI_ENTRY_QUEUE_RANKING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
}

class CPartyMgr {
  /* this+0x4 */ class std::map<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> > > m_group;
  /* this+0x14 */ class CMemoryMgr<CParty> m_groupMPool;
  /* this+0x38 */ int m_MaxPartyMemberNum;
}

struct _GUID {
  /* this+0x0 */ unsigned long Data1;
  /* this+0x4 */ unsigned short Data2;
  /* this+0x6 */ unsigned short Data3;
  /* this+0x8 */ unsigned char[0x8] Data4;
}

struct $_s__RTTIBaseClassArray$_extraBytes_12 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x3] arrayOfBaseClassDescriptors;
}

struct PACKET_ZI_ENTRY_QUEUE_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
}

struct PACKET_ZI_RESULT_ENTRY_QUEUE_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ unsigned char Result;
  /* this+0xb */ char[0x18] EntryQueueName;
}

struct PACKET_ZI_JOB_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ short job;
}

struct AID_GID_INFO {
  /* this+0x0 */ unsigned long AID;
  /* this+0x4 */ unsigned long GID;
}

struct PACKET_ZI_MEMORIALDUNGEON_COMMAND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ char[0x18] partyName;
  /* this+0x22 */ enum PACKET_CZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command;
}

struct PACKET_ZI_MEMORIALDUNGEON_DESTROY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GRID;
}

struct PACKET_ZI_LOBBY_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
  /* this+0x22 */ char[0x18] LobbyName;
  /* this+0x3a */ char[0x10] mapName;
  /* this+0x4a */ int xPos;
  /* this+0x4e */ int yPos;
}

struct PACKET_IZ_ADD_MEMBER_TO_GROUP2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long receiverAID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long Role;
  /* this+0xe */ unsigned char state;
  /* this+0xf */ char[0x18] groupName;
  /* this+0x27 */ char[0x18] characterName;
  /* this+0x3f */ char[0x10] mapName;
  /* this+0x4f */ unsigned char ItemPickupRule;
  /* this+0x50 */ unsigned char ItemDivisionRule;
}

union __m64 {
  /* this+0x0 */ unsigned __int64 m64_u64;
  /* this+0x0 */ float[0x2] m64_f32;
  /* this+0x0 */ char[0x8] m64_i8;
  /* this+0x0 */ short[0x4] m64_i16;
  /* this+0x0 */ int[0x2] m64_i32;
  /* this+0x0 */ __int64 m64_i64;
  /* this+0x0 */ unsigned char[0x8] m64_u8;
  /* this+0x0 */ unsigned short[0x4] m64_u16;
  /* this+0x0 */ unsigned int[0x2] m64_u32;
}

struct PACKET_ZI_GPK_DYNCODE_RELOAD {
  /* this+0x0 */ short PacketType;
}

struct CASH_ITEM_LIST {
  /* this+0x0 */ unsigned long item_id;
  /* this+0x4 */ int price;
}

struct PACKET_ZI_LOBBY_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] EntryQueueName;
  /* this+0x22 */ char[0x18] LobbyName;
}

struct PACKET_IZ_ADD_MEMBER_TO_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long receiverAID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long Role;
  /* this+0xe */ unsigned char state;
  /* this+0xf */ char[0x18] groupName;
  /* this+0x27 */ char[0x18] characterName;
  /* this+0x3f */ char[0x10] mapName;
}

class std::tr1::tuple<bool,unsigned int const ,unsigned int const ,unsigned int const ,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> {
  /* this+0x0 */ struct std::tr1::_Cons_node<bool,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > > _Impl;
}

struct $_TypeDescriptor$_extraBytes_25 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x19] name;
}

struct PACKET_ZC_ITEM_ENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ITAID;
  /* this+0x6 */ unsigned short ITID;
  /* this+0x8 */ bool IsIdentified;
  /* this+0x9 */ short xPos;
  /* this+0xb */ short yPos;
  /* this+0xd */ short count;
  /* this+0xf */ unsigned char subX;
  /* this+0x10 */ unsigned char subY;
}

struct $_TypeDescriptor$_extraBytes_15 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0xf] name;
}

struct $_TypeDescriptor$_extraBytes_12 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0xc] name;
}

struct CMemorialDungeon::tagInstantMapInfo {
  /* this+0x0 */ bool bCreateRequest;
  /* this+0x4 */ int mapType;
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > _Alval;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Ptr;
}

class CMemorialDungeon::CPlayer {
  /* this+0x4 */ unsigned long m_AID;
  /* this+0x8 */ unsigned long m_GID;
}

class std::map<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > _Alval;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Ptr;
}

class CMemorialDungeon {
  /* this+0x4 */ const unsigned int m_MyID;
  /* this+0xc */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > > m_InstantMapList;
  /* this+0x1c */ bool m_bOK;
  /* this+0x20 */ class N3MessageQueue m_MessageQueue;
  /* this+0x5c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
  /* this+0x78 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_NickName;
  /* this+0x94 */ int m_hParty;
  /* this+0x98 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_PartyName;
  /* this+0xb4 */ const int m_Factor;
  /* this+0xb8 */ const int m_TargetZSID;
  /* this+0xbc */ unsigned long m_ZSVRregisteredFUCnt;
  /* this+0xc0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_EnterInstantMapName;
  /* this+0xdc */ int m_EnterPosX;
  /* this+0xe0 */ int m_EnterPosY;
  /* this+0xe4 */ int m_LiveTimeMinute;
  /* this+0xe8 */ const int m_HsvrID;
  /* this+0xec */ enum CMemorialDungeon::enumSTATE m_State;
  /* this+0xf0 */ class std::map<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > > m_PlayerContainer;
  /* this+0x100 */ class std::multimap<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > > m_ScheduleContainer;
  /* this+0x110 */ function  * m_ProcessFuncPtr;
}

class std::multimap<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > _Alval;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Ptr;
}

struct $_TypeDescriptor$_extraBytes_45 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x2d] name;
}

class CMemorialDungeonConfiguration::LCMemorialDungeon {
  /* this+0x0 */ class std::vector<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap,std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> > m_MapList;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strPlaceWithMap;
  /* this+0x2c */ int m_LiveTimeMinute;
  /* this+0x30 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strName;
  /* this+0x4c */ struct CMemorialDungeonConfiguration::LCMemorialDungeon::tagEnter m_Enter;
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > _Alval;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Ptr;
}

class CMemorialDungeonConfiguration {
    /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > > m_MemorialDungeonContainer;
  /* this+0x14 */ int m_EnterLimitMinute;
  /* this+0x18 */ bool m_bDataBaseLogOutput;
  /* this+0x1c */ int m_SubscriptionMinimumDelaySecond;
  /* this+0x20 */ unsigned int m_under_zsvr_memory_mbytes;
  /* this+0x24 */ bool m_bOpen;
  /* this+0x25 */ bool m_bOK;
  }

class N2FTAFile {
  /* this+0x4 */ const int m_TABSIZE;
  /* this+0x8 */ unsigned char * m_pBuffer;
  /* this+0xc */ int m_TotalBytes;
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strFileName;
  /* this+0x2c */ struct N2FTAFile::tagCur m_Cur;
  /* this+0x38 */ class std::map<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> > > m_LineInfoContainer;
}

class N2FTALexicalAnalyzer {
  /* this+0x4 */ class N2FTAFile & m_SourceFile;
  /* this+0x8 */ bool m_bOK;
  /* this+0xc */ class std::list<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > m_Container;
}

class N2FTALexicalAnalyzer::FTARet {
  /* this+0x0 */ enum N2FTALexicalAnalyzer::FTARet::enumReturnCode m_Code;
  /* this+0x8 */ class N2FTAToken m_Token;
  /* this+0x78 */ int m_SourceFileLine;
  /* this+0x7c */ int m_SourceFileCol;
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_SourceFileName;
}

class N2FTAToken {
  /* this+0x8 */ enum N2FTAToken::enumTYPE m_Type;
  /* this+0x10 */ class N2FTAVar m_Value;
  /* this+0x48 */ int m_SourceFileLine;
  /* this+0x4c */ int m_SourceFileCol;
  /* this+0x50 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_SourceFileName;
}

class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_PhysicalMapName;
  /* this+0x1c */ int m_Type;
}

class std::vector<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap,std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> > {
  /* this+0x0 */ class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap * _Myfirst;
  /* this+0x4 */ class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap * _Mylast;
  /* this+0x8 */ class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap * _Myend;
  /* this+0xc */ class std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap,std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> > > {
}

struct CMemorialDungeonConfiguration::LCMemorialDungeon::tagEnter {
  /* this+0x0 */ int X;
  /* this+0x4 */ int Y;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > PhysicalMapName;
}

class N2InterMessageQueue::Message {
  /* this+0x0 */ unsigned int m_FromInter;
  /* this+0x4 */ int m_Message;
  /* this+0x8 */ int m_wParam;
  /* this+0xc */ int m_lParam;
}

struct std::_Allocator_base<N2InterMessageQueue::Message> {
}

struct std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node {
  /* this+0x0 */ struct std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node * _Next;
  /* this+0x4 */ struct std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node * _Prev;
  /* this+0x8 */ class N2FTALexicalAnalyzer::FTARet _Myval;
}

struct std::_Allocator_base<std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node> {
}

struct std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ enum CMemorialDungeon::enumSCHEDULE second;
}

struct std::_Allocator_base<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > {
}

struct std::_Allocator_base<N2FTALexicalAnalyzer::FTARet> {
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ class CMemorialDungeonConfiguration::LCMemorialDungeon second;
}

struct std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > {
}

class std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > {
  /* this+0x0 */ struct std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<N2FTALexicalAnalyzer::FTARet> _Alval;
}

class std::allocator<N2FTALexicalAnalyzer::FTARet> {
}

class std::_List_val<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > {
  /* this+0x0 */ struct std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<N2FTALexicalAnalyzer::FTARet> _Alval;
}

class std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > {
}

struct std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >::rebind<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > {
}

struct std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node> {
}

struct std::pair<int const ,N2FTAFile::CLineInfo> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class N2FTAFile::CLineInfo second;
}

struct std::_Allocator_base<std::pair<int const ,N2FTAFile::CLineInfo> > {
}

class std::allocator<N2InterMessageQueue::Message> {
}

struct std::allocator<N2InterMessageQueue::Message>::rebind<N2InterMessageQueue::Message> {
}

struct std::allocator<N2InterMessageQueue::Message>::rebind<std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node> {
}

class std::allocator<std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node> {
}

struct std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node {
}

struct std::_Allocator_base<std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node> {
}

struct std::pair<unsigned long const ,CMemorialDungeon::CPlayer> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class CMemorialDungeon::CPlayer second;
}

struct std::_Allocator_base<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,CMemorialDungeon::CPlayer> _Myval;
  /* this+0x1c */ char _Color;
  /* this+0x1d */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node> {
}

class std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > _Alval;
}

struct std::pair<unsigned long,enum CMemorialDungeon::enumSCHEDULE> {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

class std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > > > {
}

struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> _Myval;
  /* this+0x30 */ char _Color;
  /* this+0x31 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node> {
}

struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> _Myval;
  /* this+0x98 */ char _Color;
  /* this+0x99 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node> {
}

struct std::allocator<N2FTALexicalAnalyzer::FTARet>::rebind<N2FTALexicalAnalyzer::FTARet> {
}

struct std::allocator<N2FTALexicalAnalyzer::FTARet>::rebind<std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node> {
}

class std::allocator<std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node> {
}

class std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > _Alval;
}

class std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> > {
  /* this+0x0 */ struct std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<N2InterMessageQueue::Message> _Alval;
}

class std::_List_val<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> > {
  /* this+0x0 */ struct std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<N2InterMessageQueue::Message> _Alval;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node> {
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ struct CMemorialDungeon::tagInstantMapInfo second;
}

struct std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > {
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node> {
}

class std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> > _Alval;
}

class std::_Tree<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> > _Alval;
}

struct std::pair<int,N2FTAFile::CLineInfo> {
  /* this+0x0 */ int first;
  /* this+0x4 */ class N2FTAFile::CLineInfo second;
}

struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,N2FTAFile::CLineInfo> _Myval;
  /* this+0x18 */ char _Color;
  /* this+0x19 */ char _Isnil;
}

class std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0>::value_compare {
}

class std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > > > {
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon> {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ class CMemorialDungeonConfiguration::LCMemorialDungeon second;
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0>::value_compare {
}

struct std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > {
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ class CMemorialDungeonConfig::lcMDConfigData second;
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> >::rebind<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node> {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> >::rebind<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > {
}

class std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > {
}

class std::allocator<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node> {
}

struct std::_Pair_base<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,bool> {
  /* this+0x0 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > first;
  /* this+0x4 */ bool second;
}

class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > {
  /* this+0x0 */ struct std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node * _Ptr;
}

class std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > {
}

struct std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >::rebind<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > {
}

struct std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node> {
}

struct std::_Allocator_base<std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node> {
}

struct std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node {
  /* this+0x0 */ struct std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node * _Next;
  /* this+0x4 */ struct std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node * _Prev;
  /* this+0x8 */ class CMemorialDungeonConfig::lcMDConfigData::MDMapInfo _Myval;
}

class std::allocator<std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node> {
}

class std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Ptr;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> _Myval;
  /* this+0x1c */ char _Color;
  /* this+0x1d */ char _Isnil;
}

struct std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject second;
}

class std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > _Alval;
}

class std::_List_val<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > {
  /* this+0x0 */ struct std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> _Alval;
}

class std::list<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > {
  /* this+0x0 */ struct std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> _Alval;
}

class std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> {
}

class CMemorialDungeonConfig::lcMDConfigData::MDMapInfo {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_szMapName;
  /* this+0x1c */ int m_nMapType;
}

class std::_List_const_iterator<std::_List_val<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > > {
  /* this+0x0 */ struct std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node * _Ptr;
}

class std::_List_iterator<std::_List_val<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > > {
  /* this+0x0 */ struct std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_List_iterator<std::_List_val<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > > > {
}

class std::reverse_iterator<std::_List_const_iterator<std::_List_val<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > > > {
}

struct std::pair<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,bool> {
  /* this+0x0 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > _Alval;
}

struct std::pair<unsigned long,CMemorialDungeon::CPlayer> {
}

class std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > > > {
}

struct std::_Allocator_base<std::pair<unsigned int const ,unsigned long> > {
}

struct std::pair<unsigned int const ,unsigned long> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ unsigned long second;
}

class std::allocator<std::pair<unsigned int const ,unsigned long> > {
}

struct std::allocator<std::pair<unsigned int const ,unsigned long> >::rebind<std::pair<unsigned int const ,unsigned long> > {
}

struct std::allocator<std::pair<unsigned int const ,unsigned long> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node> {
}

struct std::binary_function<unsigned int,unsigned int,bool> {
}

class std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node> {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned int const ,unsigned long> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > {
}

struct std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > >::rebind<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node> {
}

class std::list<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > {
  /* this+0x0 */ struct std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<N2FTALexicalAnalyzer::FTARet> _Alval;
}

class std::_List_const_iterator<std::_List_val<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > > {
  /* this+0x0 */ struct std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node * _Ptr;
}

class std::_List_iterator<std::_List_val<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > > {
  /* this+0x0 */ struct std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_List_iterator<std::_List_val<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > > > {
}

class std::reverse_iterator<std::_List_const_iterator<std::_List_val<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > > > {
}

class std::_Vector_val<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > > {
  /* this+0x0 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > * _Myfirst;
  /* this+0x4 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > * _Mylast;
  /* this+0x8 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > * _Myend;
  /* this+0xc */ class std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > _Alval;
}

struct std::_Pair_base<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject second;
}

class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject {
  /* this+0x4 */ class CMemorialDungeon * m_Object;
  /* this+0x8 */ unsigned int m_SecondaryKey;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Ptr;
}

class std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,unsigned long> > _Alval;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > > {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,unsigned long> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node> {
}

struct std::_Pair_base<unsigned int const ,unsigned long> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ unsigned long second;
}

class std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> {
  /* this+0x0 */ struct std::less<unsigned int> comp;
}

struct std::less<unsigned int> {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,unsigned long> > _Alval;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > _Alval;
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ class CMemorialDungeonConfig::lcMDConfigData second;
}

class CMemorialDungeonConfig::lcMDConfigData {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_szTitle;
  /* this+0x1c */ class std::list<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > m_MapInfoObj;
  /* this+0x28 */ class CMemorialDungeonConfig::lcMDConfigData::MDEnterMapInfo m_lcEnterMapInfo;
  /* this+0x4c */ int m_nLiveTimeMinute;
  /* this+0x50 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_szPlaceWithMap;
}

class std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,unsigned long> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,unsigned long> > _Alval;
}

struct std::pair<unsigned long,unsigned long> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ unsigned long second;
}

class std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0>::value_compare {
}

struct std::pair<unsigned long const ,unsigned long> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ unsigned long second;
}

class std::allocator<std::pair<unsigned long const ,unsigned long> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > > > {
}

class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > _Alval;
}

class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo> {
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0>::value_compare {
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > > > {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node> {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> _Myval;
  /* this+0x88 */ char _Color;
  /* this+0x89 */ char _Isnil;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node> {
}

class std::list<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> > {
  /* this+0x0 */ struct std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<N2InterMessageQueue::Message> _Alval;
}

class std::_List_const_iterator<std::_List_val<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> > > {
}

class std::_List_iterator<std::_List_val<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> > > {
}

class std::reverse_iterator<std::_List_iterator<std::_List_val<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> > > > {
}

class std::reverse_iterator<std::_List_const_iterator<std::_List_val<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> > > > {
}

class std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > {
  /* this+0x0 */ struct std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > _Alval;
}

class std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > {
  /* this+0x0 */ struct std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > _Alval;
}

struct std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node {
  /* this+0x0 */ struct std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node * _Next;
  /* this+0x4 */ struct std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node * _Prev;
  /* this+0x8 */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> _Myval;
}

class std::_List_const_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > {
  /* this+0x0 */ struct std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node * _Ptr;
}

class std::reverse_iterator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > {
}

class std::reverse_iterator<std::_List_const_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > {
}

class std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > {
  /* this+0x0 */ struct std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> _Alval;
}

struct std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >::rebind<std::pair<int const ,N2FTAFile::CLineInfo> > {
}

struct std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node> {
}

class std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > {
  /* this+0x0 */ struct std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > _Alval;
}

struct std::pair<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject second;
}

struct std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject second;
}

class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > {
}

class std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0>::value_compare {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,unsigned long>,int,std::pair<unsigned int const ,unsigned long> const *,std::pair<unsigned int const ,unsigned long> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Ptr;
}

class std::_Tree<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > _Alval;
}

class std::map<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > _Alval;
}

class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject {
  /* this+0x4 */ class CMemorialDungeonReservedPlayer m_Object;
  /* this+0x74 */ unsigned long m_SecondaryKey;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > > {
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > _Alval;
}

struct std::_Pair_base<unsigned long const ,unsigned long> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ unsigned long second;
}

struct std::_Allocator_base<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node> {
}

struct std::_Allocator_base<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> {
}

struct std::_Iterator012<std::random_access_iterator_tag,std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,int,std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > const *,std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > const &,std::_Iterator_base0> {
}

class std::_Vector_const_iterator<std::_Vector_val<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > > > {
  /* this+0x0 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > * _Ptr;
}

class std::_Vector_iterator<std::_Vector_val<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > > > {
  /* this+0x0 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,unsigned long>,int,std::pair<unsigned long const ,unsigned long> const *,std::pair<unsigned long const ,unsigned long> const &,std::_Iterator_base0> {
}

class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > _Alval;
}

class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > _Alval;
}

struct std::_Pair_base<unsigned long const ,CParty *> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class CParty * second;
}

class std::_Vector_val<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap,std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> > {
  /* this+0x0 */ class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap * _Myfirst;
  /* this+0x4 */ class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap * _Mylast;
  /* this+0x8 */ class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap * _Myend;
  /* this+0xc */ class std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> _Alval;
}

class std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> {
}

class std::_Vector_const_iterator<std::_Vector_val<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap,std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> > > {
  /* this+0x0 */ class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap,std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap,std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> > > > {
}

class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,unsigned long> > _Alval;
}

struct std::_Pair_base<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,int,CMemorialDungeonConfig::lcMDConfigData::MDMapInfo const *,CMemorialDungeonConfig::lcMDConfigData::MDMapInfo const &,std::_Iterator_base0> {
}

class std::_List_unchecked_const_iterator<std::_List_val<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node * _Ptr;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,unsigned long> > _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfig::lcMDConfigData> {
}

class stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfig::lcMDConfigData,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> >,0> {
  /* this+0x0 */ class stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > comp;
}

class std::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfig::lcMDConfigData,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> >,0>::value_compare {
}

class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > _Alval;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > > > {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node * _Ptr;
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > > {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node> {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject>,int,std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> const *,std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Ptr;
}

class std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,unsigned long> > _Alval;
}

class std::map<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> > > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,unsigned long> > _Alval;
}

class std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0>::value_compare {
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > > > {
}

struct std::_Allocator_base<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject>,int,std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> const *,std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> const &,std::_Iterator_base0> {
}

struct std::_Allocator_base<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> {
}

class std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> > _Alval;
}

struct std::_Allocator_base<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > {
}

struct std::pair<unsigned int,unsigned long> {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ unsigned long second;
}

struct std::_Allocator_base<std::pair<unsigned long const ,unsigned long> > {
}

class std::_List_unchecked_const_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > >::_Node * _Ptr;
}

struct std::allocator<std::pair<unsigned long const ,unsigned long> >::rebind<std::pair<unsigned long const ,unsigned long> > {
}

struct std::allocator<std::pair<unsigned long const ,unsigned long> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node> {
}

class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > {
}

struct std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >::rebind<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > {
}

struct std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node> {
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > > {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > _Alval;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CParty *>,int,std::pair<unsigned long const ,CParty *> const *,std::pair<unsigned long const ,CParty *> const &,std::_Iterator_base0> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > > {
}

class std::_List_unchecked_iterator<std::_List_val<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > > {
}

class std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

struct std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap>::rebind<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > _Alval;
}

class std::_List_unchecked_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > {
}

class std::_Tree<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > _Alval;
}

class std::map<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > _Alval;
}

class std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0>::value_compare {
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > > > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> const &,std::_Iterator_base0> {
}

class std::map<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> > _Alval;
}

class N2FTAFile::CLineInfo {
  /* this+0x0 */ unsigned char * m_pBuffer;
  /* this+0x4 */ int m_Bytes;
}

class std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

struct std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo>::rebind<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> {
}

struct std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo>::rebind<std::_List_nod<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> >::_Node> {
}

struct std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >::rebind<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > {
}

struct std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> >::_Node> {
}

class std::_Hash<std::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfig::lcMDConfigData,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> >,0> > {
  /* this+0x0 */ class stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > comp;
  /* this+0x4 */ class std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > _List;
  /* this+0x10 */ class std::vector<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > > _Vec;
  /* this+0x20 */ unsigned int _Mask;
  /* this+0x24 */ unsigned int _Maxidx;
  /* this+0x28 */ float _Max_bucket_size;
}

class std::vector<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > > {
  /* this+0x0 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > * _Myfirst;
  /* this+0x4 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > * _Mylast;
  /* this+0x8 */ class std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > * _Myend;
  /* this+0xc */ class std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > _Alval;
}

struct std::pair<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > {
}

struct std::pair<std::_List_const_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::_List_const_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > {
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > > > > {
}

struct std::pair<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > > {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Nonscalar_ptr_iterator_tag {
}

class stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfig::lcMDConfigData,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > {
  /* this+0x0 */ class stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > comp;
  /* this+0x4 */ class std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > _List;
  /* this+0x10 */ class std::vector<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > >,std::allocator<std::_List_iterator<std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > > > > _Vec;
  /* this+0x20 */ unsigned int _Mask;
  /* this+0x24 */ unsigned int _Maxidx;
  /* this+0x28 */ float _Max_bucket_size;
}

struct $_TypeDescriptor$_extraBytes_53 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x35] name;
}

class N2FTAVar {
  /* this+0x8 */ enum N2FTAVar::enumType m_Type;
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strData;
  /* this+0x28 */ __int64 m_intData;
  /* this+0x30 */ double m_floatData;
}

class CMemorialDungeonMgr {
    /* this+0x4 */ bool m_bOK;
  /* this+0x5 */ bool m_bOpen;
  /* this+0x8 */ unsigned long m_Previous_Create_RequestTM;
  /* this+0xc */ class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *> m_MemorialDungeonContainer2;
  /* this+0x30 */ class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer> m_SubscriptionPlayerContainer;
}

class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *> {
  /* this+0x4 */ class std::map<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > > m_DataMap;
  /* this+0x14 */ class std::map<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> > > m_IndexMap;
}

class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator {
  /* this+0x4 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > m_Iter;
}

class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer> {
  /* this+0x4 */ class std::map<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > > m_DataMap;
  /* this+0x14 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_IndexMap;
}

class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator {
  /* this+0x4 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > m_Iter;
}

class CMemorialDungeonReservedPlayer {
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
  /* this+0x20 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_NickName;
  /* this+0x3c */ int m_hParty;
  /* this+0x40 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_PartyName;
  /* this+0x5c */ bool m_bCreateDoing;
  /* this+0x60 */ int m_PriorityNum;
  /* this+0x64 */ unsigned long m_PriorityNumNotifyTM;
  /* this+0x68 */ unsigned long m_RequestTM;
  /* this+0x6c */ int m_HsvrID;
}

class N2Object {
  /* this+0x4 */ const unsigned int m_MyID;
}

class N2InterMessageQueue {
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x1c */ class std::list<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> > m_Container;
}

class CMemorialDungeonConfig {
  /* this+0x0 */ bool m_bOK;
    /* this+0x4 */ class stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfig::lcMDConfigData,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > m_MDConfigInfo;
  /* this+0x30 */ int m_nMaxMemoryBytes;
  /* this+0x34 */ int m_nEnterLimitMinute;
  /* this+0x38 */ int m_nSubscriptionMinimumDelaySecond;
  /* this+0x3c */ int m_nDatabaseLogOutput;
  /* this+0x40 */ bool m_bOpen;
}

struct std::pair<bool,CMemorialDungeonConfig::lcMDConfigData> {
  /* this+0x0 */ bool first;
  /* this+0x4 */ class CMemorialDungeonConfig::lcMDConfigData second;
}

class CMemorialDungeonConfig::lcMDConfigData::MDEnterMapInfo {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_szMapName;
  /* this+0x1c */ int m_nXpos;
  /* this+0x20 */ int m_nYpos;
}

struct $_TypeDescriptor$_extraBytes_65 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x41] name;
}

struct N2FTAFile::tagCur {
  /* this+0x0 */ int Idx;
  /* this+0x4 */ int Line;
  /* this+0x8 */ int Col;
}

struct lua_State {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x6 */ unsigned char status;
  /* this+0x8 */ struct lua_TValue * top;
  /* this+0xc */ struct lua_TValue * base;
  /* this+0x10 */ struct global_State * l_G;
  /* this+0x14 */ struct CallInfo * ci;
  /* this+0x18 */ const unsigned int * savedpc;
  /* this+0x1c */ struct lua_TValue * stack_last;
  /* this+0x20 */ struct lua_TValue * stack;
  /* this+0x24 */ struct CallInfo * end_ci;
  /* this+0x28 */ struct CallInfo * base_ci;
  /* this+0x2c */ int stacksize;
  /* this+0x30 */ int size_ci;
  /* this+0x34 */ unsigned short nCcalls;
  /* this+0x36 */ unsigned short baseCcalls;
  /* this+0x38 */ unsigned char hookmask;
  /* this+0x39 */ unsigned char allowhook;
  /* this+0x3c */ int basehookcount;
  /* this+0x40 */ int hookcount;
  /* this+0x44 */ function  * hook;
  /* this+0x48 */ struct lua_TValue l_gt;
  /* this+0x58 */ struct lua_TValue env;
  /* this+0x68 */ union GCObject * openupval;
  /* this+0x6c */ union GCObject * gclist;
  /* this+0x70 */ struct lua_longjmp * errorJmp;
  /* this+0x74 */ int errfunc;
}

class NLuaState {
  /* this+0x4 */ struct lua_State * m_pLuaState;
  /* this+0x8 */ bool m_bOK;
}

struct std::pair<unsigned int const ,N3Inter *> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class N3Inter * second;
}

struct std::_Allocator_base<std::pair<unsigned int const ,N3Inter *> > {
}

struct std::pair<unsigned int const ,N3DataTransferMgr::lcData> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class N3DataTransferMgr::lcData second;
}

struct std::_Allocator_base<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > {
}

struct std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ enum CInstantMap::enumSCHEDULE second;
}

struct std::_Allocator_base<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > {
}

struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> _Myval;
  /* this+0x2c */ char _Color;
  /* this+0x2d */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node> {
}

class std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > {
}

struct std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >::rebind<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > {
}

struct std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node> {
}

struct std::pair<unsigned int,N3DataTransferMgr::lcData> {
}

class std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > {
}

class std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> {
  /* this+0x0 */ struct std::less<unsigned int> comp;
}

class std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0>::value_compare {
}

class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > _Alval;
}

class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int> {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned int second;
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0>::value_compare {
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned int second;
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > > {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > first;
  /* this+0x4 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > second;
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > > {
}

struct std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >::rebind<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > {
}

struct std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node> {
}

class std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > _Alval;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned int const ,N3DataTransferMgr::lcData> _Myval;
  /* this+0x28 */ char _Color;
  /* this+0x29 */ char _Isnil;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > > > {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node> {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node> {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > _Alval;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

class std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > _Alval;
}

struct std::pair<unsigned int const ,CInstantMap *> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class CInstantMap * second;
}

struct std::_Allocator_base<std::pair<unsigned int const ,CInstantMap *> > {
}

struct std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node> {
}

class std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N3Inter *> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N3Inter *> > _Alval;
}

struct std::pair<unsigned int,N3Inter *> {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ class N3Inter * second;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned int const ,N3Inter *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

class std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0>::value_compare {
}

class std::allocator<std::pair<unsigned int const ,N3Inter *> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > > > {
}

class std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

struct std::allocator<std::pair<unsigned int const ,N3Inter *> >::rebind<std::pair<unsigned int const ,N3Inter *> > {
}

struct std::allocator<std::pair<unsigned int const ,N3Inter *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node> {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > _Alval;
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node> {
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > _Alval;
}

struct std::pair<unsigned long,enum CInstantMap::enumSCHEDULE> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ enum CInstantMap::enumSCHEDULE second;
}

class std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1>::value_compare {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node> {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N3Inter *> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > _Alval;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > > > {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned int const ,CInstantMap *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node> {
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > _Alval;
}

class std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> {
  /* this+0x0 */ struct std::less<unsigned int> comp;
}

class std::allocator<std::pair<unsigned int const ,CInstantMap *> > {
}

struct std::allocator<std::pair<unsigned int const ,CInstantMap *> >::rebind<std::pair<unsigned int const ,CInstantMap *> > {
}

struct std::allocator<std::pair<unsigned int const ,CInstantMap *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node> {
}

class std::_Tree<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CInstantMap *> > _Alval;
}

class std::map<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> > > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CInstantMap *> > _Alval;
}

class CInstantMap {
  /* this+0x4 */ const unsigned int m_MyID;
  /* this+0xc */ bool m_bOK;
  /* this+0x10 */ const int m_ZSID;
  /* this+0x14 */ const int m_MapType;
  /* this+0x18 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
  /* this+0x34 */ int m_MapID;
  /* this+0x38 */ const unsigned int m_RequestCreateInter;
  /* this+0x3c */ unsigned long m_ZSVRregisteredFUCnt;
  /* this+0x40 */ class N3MessageQueue m_MessageQueue;
  /* this+0x7c */ enum CInstantMap::enumSTATE m_State;
  /* this+0x80 */ class std::multimap<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > > m_ScheduleContainer;
  /* this+0x90 */ function  * m_ProcessFuncPtr;
}

class std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0>::value_compare {
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > > > {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CInstantMap *> > _Alval;
}

class std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CInstantMap *> > _Alval;
}

class std::multimap<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > _Alval;
}

class std::map<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > _Alval;
}

class N3DataTransferMgr::lcData {
  /* this+0x4 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_data;
  /* this+0x14 */ unsigned long m_Time;
}

struct std::_Iterator012<std::random_access_iterator_tag,unsigned char,int,unsigned char const *,unsigned char const &,std::_Iterator_base0> {
}

class std::map<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> > > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N3Inter *> > _Alval;
}

class std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> {
  /* this+0x0 */ struct std::less<unsigned int> comp;
}

struct std::pair<unsigned int,CInstantMap *> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > > > {
}

class N3DataTransferMgr {
    /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x20 */ class std::map<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > > m_DataMap;
}

class N3MessageMgr {
    /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x1c */ bool m_bOK;
  /* this+0x20 */ class std::map<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> > > m_ObjContainer;
}

class CInstantMapMgr {
  /* this+0x4 */ bool m_bOK;
    /* this+0x8 */ class std::map<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> > > m_Container;
  /* this+0x18 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > m_IndexMap;
}

struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
  /* this+0x0 */ bool first;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
}

class CInstantMap::InstantMap_MSGwparam_TARGETZSVR_CREATE_RESPONSE {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_mapName;
  /* this+0x1c */ int m_mapID;
  /* this+0x20 */ bool m_bSuccess;
}

class CZsvrAcceptHandler {
    /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class CMemoryMgr<CAsyncStream> m_streamPool;
  /* this+0x2c */ class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_set;
}

class std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node * _Right;
  /* this+0xc */ unsigned long _Myval;
  /* this+0x10 */ char _Color;
  /* this+0x11 */ char _Isnil;
}

class std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<unsigned long> _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node> {
}

class std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<unsigned long> _Alval;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node> {
}

struct std::allocator<unsigned long>::rebind<std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node * _Ptr;
}

class std::_Tree<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<unsigned long> _Alval;
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > > > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,unsigned long,int,unsigned long const *,unsigned long const &,std::_Iterator_base0> {
}

struct $_TypeDescriptor$_extraBytes_35 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x23] name;
}

class CMemoryMgr<CAsyncStream> {
  /* this+0x4 */ class CMemoryMgr<CAsyncStream>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

class CMemoryMgr<CAsyncStream>::lcMemory {
  /* this+0x4 */ class CAsyncStream * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

class CZsvrAcceptThread {
  /* this+0x4 */ unsigned long m_ThreadID;
  /* this+0x8 */ bool m_bOK;
  /* this+0xc */ enum N3Thread::enumState m_State;
  /* this+0x10 */ void * m_hThread;
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
  /* this+0x38 */ const unsigned int m_MyID;
    /* this+0x3c */ bool m_bOK;
  /* this+0x40 */ class N3MessageQueue m_MessageQueue;
  /* this+0x7c */ unsigned int m_Socket;
  /* this+0x80 */ struct fd_set m_Readfdset;
  /* this+0x184 */ const unsigned long m_IPaddr;
  /* this+0x188 */ const short m_Port;
  /* this+0x18c */ class std::map<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > > m_SessionMap;
}

struct _flowspec {
  /* this+0x0 */ unsigned long TokenRate;
  /* this+0x4 */ unsigned long TokenBucketSize;
  /* this+0x8 */ unsigned long PeakBandwidth;
  /* this+0xc */ unsigned long Latency;
  /* this+0x10 */ unsigned long DelayVariation;
  /* this+0x14 */ unsigned long ServiceType;
  /* this+0x18 */ unsigned long MaxSduSize;
  /* this+0x1c */ unsigned long MinimumPolicedSize;
}

struct sockaddr {
  /* this+0x0 */ unsigned short sa_family;
  /* this+0x2 */ char[0xe] sa_data;
}

struct fd_set {
  /* this+0x0 */ unsigned int fd_count;
  /* this+0x4 */ unsigned int[0x40] fd_array;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > _Myval;
  /* this+0x20 */ char _Color;
  /* this+0x21 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node> {
}

struct std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class std::vector<char,std::allocator<char> > second;
}

struct std::_Allocator_base<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > {
}

class std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> {
  /* this+0x0 */ struct std::less<unsigned int> comp;
}

class std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node> {
}

struct std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >::rebind<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > {
}

struct std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node> {
}

struct std::pair<unsigned int,std::vector<char,std::allocator<char> > > {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ class std::vector<char,std::allocator<char> > second;
}

class std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0>::value_compare {
}

class std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > _Alval;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > > > {
}

class std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> {
  /* this+0x0 */ struct std::less<unsigned int> comp;
}

class std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > {
}

struct std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class CZsvrAcceptThread::lCSession second;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> _Myval;
  /* this+0x3c */ char _Color;
  /* this+0x3d */ char _Isnil;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node> {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,CZsvrAcceptThread::lCSession>,int,std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> const *,std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> const &,std::_Iterator_base0> {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Ptr;
}

class std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > _Alval;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > > {
}

class std::_Tree<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > _Alval;
}

struct std::pair<unsigned int,CZsvrAcceptThread::lCSession> {
}

class std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0>::value_compare {
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > > > {
}

struct std::_Pair_base<unsigned int const ,CZsvrAcceptThread::lCSession> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class CZsvrAcceptThread::lCSession second;
}

class CZsvrAcceptThread::lCSession {
  /* this+0x4 */ unsigned int m_Socket;
  /* this+0x8 */ const unsigned long m_AcceptTM;
  /* this+0xc */ unsigned long m_IPaddr;
  /* this+0x10 */ bool m_bAuth;
  /* this+0x14 */ int m_ZSID;
  /* this+0x18 */ int m_RequestDisconnectCnt;
  /* this+0x1c */ class std::vector<unsigned char,std::allocator<unsigned char> > m_packetbuffer;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::map<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > _Alval;
}

class std::vector<char,std::allocator<char> > {
  /* this+0x0 */ char * _Myfirst;
  /* this+0x4 */ char * _Mylast;
  /* this+0x8 */ char * _Myend;
  /* this+0xc */ class std::allocator<char> _Alval;
}

class std::map<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > _Alval;
}

struct std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > {
  /* this+0x0 */ const unsigned int _Value;
  /* this+0x4 */ struct std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > _Tail;
}

struct std::tr1::_Cons_node<bool,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > > {
  /* this+0x0 */ bool _Value;
  /* this+0x4 */ struct std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > _Tail;
}

struct std::tr1::_Get<0,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > {
}

struct std::tr1::_Get<1,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > > {
}

struct std::tr1::_Get<0,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > {
}

struct std::tr1::_Get<1,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > {
}

struct std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > {
  /* this+0x0 */ const unsigned int _Value;
  /* this+0x4 */ struct std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > _Tail;
}

struct std::tr1::_Get<2,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > > {
}

struct std::tr1::_Get<3,std::tr1::_Cons_node<bool,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > > > {
}

struct std::tr1::_Not_nil<unsigned int const > {
}

struct std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > {
  /* this+0x0 */ const unsigned int _Value;
  /* this+0x4 */ struct std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> _Tail;
}

struct std::tr1::_Get<0,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > > {
}

struct std::tr1::_Get<2,std::tr1::_Cons_node<bool,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > > > {
}

struct std::tr1::_Get<1,std::tr1::_Cons_node<bool,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > > > {
}

struct std::tr1::_Not_nil<bool> {
}

struct std::tr1::_Get<0,std::tr1::_Cons_node<bool,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<unsigned int const ,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > > > {
}

struct std::_Allocator_base<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > {
}

struct std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >::rebind<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > {
}

struct std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node> {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> >,0> >::_Node * _Ptr;
}

struct in_addr {
  /* this+0x0 */ union in_addr::<unnamed-type-S_un> S_un;
}

struct sockaddr_in {
  /* this+0x0 */ unsigned short sin_family;
  /* this+0x2 */ unsigned short sin_port;
  /* this+0x4 */ struct in_addr sin_addr;
  /* this+0x8 */ char[0x8] sin_zero;
}

struct PACKET_ZI_AUTH_REQ {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwIP;
  /* this+0x6 */ short sPort;
  /* this+0x8 */ int ZSID;
}

struct _WSAPROTOCOL_INFOA {
  /* this+0x0 */ unsigned long dwServiceFlags1;
  /* this+0x4 */ unsigned long dwServiceFlags2;
  /* this+0x8 */ unsigned long dwServiceFlags3;
  /* this+0xc */ unsigned long dwServiceFlags4;
  /* this+0x10 */ unsigned long dwProviderFlags;
  /* this+0x14 */ struct _GUID ProviderId;
  /* this+0x24 */ unsigned long dwCatalogEntryId;
  /* this+0x28 */ struct _WSAPROTOCOLCHAIN ProtocolChain;
  /* this+0x48 */ int iVersion;
  /* this+0x4c */ int iAddressFamily;
  /* this+0x50 */ int iMaxSockAddr;
  /* this+0x54 */ int iMinSockAddr;
  /* this+0x58 */ int iSocketType;
  /* this+0x5c */ int iProtocol;
  /* this+0x60 */ int iProtocolMaxOffset;
  /* this+0x64 */ int iNetworkByteOrder;
  /* this+0x68 */ int iSecurityScheme;
  /* this+0x6c */ unsigned long dwMessageSize;
  /* this+0x70 */ unsigned long dwProviderReserved;
  /* this+0x74 */ char[0x100] szProtocol;
}

struct _QualityOfService {
  /* this+0x0 */ struct _flowspec SendingFlowspec;
  /* this+0x20 */ struct _flowspec ReceivingFlowspec;
  /* this+0x40 */ struct _WSABUF ProviderSpecific;
}

class N3Thread {
  /* this+0x4 */ unsigned long m_ThreadID;
  /* this+0x8 */ bool m_bOK;
  /* this+0xc */ enum N3Thread::enumState m_State;
  /* this+0x10 */ void * m_hThread;
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
}

union in_addr::<unnamed-type-S_un> {
  /* this+0x0 */ struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b> S_un_b;
  /* this+0x0 */ struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w> S_un_w;
  /* this+0x0 */ unsigned long S_addr;
}

class NIPAddr {
  /* this+0x4 */ unsigned long m_IPAddr;
}

struct HWND__ {
  /* this+0x0 */ int unused;
}

struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b> {
  /* this+0x0 */ unsigned char s_b1;
  /* this+0x1 */ unsigned char s_b2;
  /* this+0x2 */ unsigned char s_b3;
  /* this+0x3 */ unsigned char s_b4;
}

struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w> {
  /* this+0x0 */ unsigned short s_w1;
  /* this+0x2 */ unsigned short s_w2;
}

struct _WSAPROTOCOLCHAIN {
  /* this+0x0 */ int ChainLen;
  /* this+0x4 */ unsigned long[0x7] ChainEntries;
}

class NOutputTextMgr {
  /* this+0x0 */ bool m_bOK;
  /* this+0x4 */ unsigned int m_LineCnt;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS;
    /* this+0x20 */ class std::map<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > > m_Note;
}

struct timeval {
  /* this+0x0 */ long tv_sec;
  /* this+0x4 */ long tv_usec;
}

struct $_TypeDescriptor$_extraBytes_34 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x22] name;
}

struct PACKET_MI_MSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long type;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> >::_Node * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,CZServer *>,int,std::pair<int const ,CZServer *> const *,std::pair<int const ,CZServer *> const &,std::_Iterator_base0> {
}

struct std::_Pair_base<int const ,CZServer *> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class CZServer * second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > > {
}

struct $_TypeDescriptor$_extraBytes_33 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x21] name;
}

struct PACKET_MI_REQ_EDIT_EXP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] ID;
  /* this+0x1a */ char[0x18] Passwd;
  /* this+0x32 */ int Exp;
  /* this+0x36 */ int Death;
  /* this+0x3a */ int Drop;
}

class CServerExpInfoMgr {
  /* this+0x0 */ class CServerExpInfoMgr::lcFactor m_Exp;
  /* this+0x10 */ class CServerExpInfoMgr::lcFactor m_Death;
  /* this+0x20 */ class CServerExpInfoMgr::lcFactor m_Drop;
  /* this+0x30 */ bool m_bOK;
  /* this+0x34 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strID;
  /* this+0x50 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strPW;
  }

class CServerExpInfoMgr::lcFactor {
  /* this+0x4 */ int m_Max;
  /* this+0x8 */ int m_Min;
  /* this+0xc */ int m_Value;
}

class CMCPacketHandler {
  /* this+0x4 */ class CPacketQueue * m_recvQueue;
  /* this+0x8 */ short OldHeader;
  /* this+0xc */ class CMClient * m_mServer;
}

class CMClient {
  /* this+0x4 */ class CAsyncStream * m_asyncStream;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_disconnector_cs;
  /* this+0x20 */ unsigned long m_dwErrorCount;
  /* this+0x24 */ unsigned long m_nBanTime;
  /* this+0x28 */ class CMCPacketHandler m_packetHandler;
  /* this+0x38 */ unsigned long m_lastCommunicationTime;
  /* this+0x3c */ int m_isValid;
  /* this+0x40 */ char[0x18] m_ID;
  /* this+0x58 */ char[0x18] m_passwd;
  /* this+0x70 */ int m_SID;
  /* this+0x74 */ unsigned long m_IPaddr;
}

class CMemoryMgr<CMClient> {
  /* this+0x4 */ class CMemoryMgr<CMClient>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

class CMemoryMgr<CMClient>::lcMemory {
  /* this+0x4 */ class CMClient * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

class CGuildMgr {
  /* this+0x4 */ class std::map<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> > > m_guildInfo;
}

class CIGuildMgr {
  /* this+0x4 */ class std::map<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> > > m_guildInfo;
  /* this+0x14 */ unsigned long m_lastSaveTime;
  /* this+0x18 */ class CMemoryMgr<CIGuildInfo> m_iGuildMPool;
  /* this+0x3c */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_guildAIDQueue;
  /* this+0x4c */ class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_AgitOwnerGuildIDList;
  /* this+0x5c */ class std::list<unsigned long,std::allocator<unsigned long> > m_GarbageGDID;
    /* this+0x68 */ bool m_bOK;
}

class CGuild {
  /* this+0x4 */ int m_GDID;
  /* this+0x8 */ int m_level;
  /* this+0xc */ char[0x18] m_guildName;
  /* this+0x24 */ char[0x18] m_guildMasterName;
  /* this+0x3c */ int m_maxUserNum;
  /* this+0x40 */ int m_userNum;
  /* this+0x44 */ int m_honor;
  /* this+0x48 */ int m_virtue;
  /* this+0x4c */ int m_type;
  /* this+0x50 */ int m_class;
  /* this+0x54 */ int m_money;
  /* this+0x58 */ int m_arenaWin;
  /* this+0x5c */ int m_arenaLose;
  /* this+0x60 */ int m_arenaDrawn;
  /* this+0x64 */ char[0x18] m_manageLand;
  /* this+0x7c */ int m_exp;
  /* this+0x80 */ int m_point;
  /* this+0x84 */ char[0x50] m_desc;
  /* this+0xd4 */ struct GUILDNOTICE m_guildNotice;
  /* this+0x18c */ char[0xc00] m_guildEmblem;
  /* this+0xd8c */ int m_isEmblemLoad;
  /* this+0xd90 */ int m_emblemSize;
  /* this+0xd94 */ int m_emblemVersion;
  /* this+0xd98 */ class std::vector<GUILDMINFO *,std::allocator<GUILDMINFO *> > m_guildMInfo;
  /* this+0xda8 */ class std::vector<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > m_guildAllyInfo;
  /* this+0xdb8 */ class std::vector<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > m_guildBanishInfo;
  /* this+0xdc8 */ class std::vector<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > m_guildMPosition;
  /* this+0xdd8 */ class CMemoryMgr<GUILDMINFO> m_GuildMInfoMPool;
  /* this+0xdfc */ class CMemoryMgr<GUILDALLYINFO> m_GuildAllyInfoMPool;
  /* this+0xe20 */ class CMemoryMgr<GUILDBANISHINFO> m_GuildBanishInfoMPool;
  /* this+0xe44 */ class CMemoryMgr<GUILDMPOSITION> m_GuildMPositionMPool;
  /* this+0xe68 */ int m_skillDataLength;
  /* this+0xe6c */ int m_skillPoint;
  /* this+0xe70 */ unsigned char[0x12c] m_skillData;
}

class CIGuildInfo {
  /* this+0x4 */ int m_GDID;
  /* this+0x8 */ int m_level;
  /* this+0xc */ char[0x18] m_guildName;
  /* this+0x24 */ char[0x18] m_guildMasterName;
  /* this+0x3c */ int m_maxUserNum;
  /* this+0x40 */ int m_userNum;
  /* this+0x44 */ int m_honor;
  /* this+0x48 */ int m_virtue;
  /* this+0x4c */ int m_type;
  /* this+0x50 */ int m_class;
  /* this+0x54 */ int m_money;
  /* this+0x58 */ int m_arenaWin;
  /* this+0x5c */ int m_arenaLose;
  /* this+0x60 */ int m_arenaDrawn;
  /* this+0x64 */ char[0x18] m_manageLand;
  /* this+0x7c */ int m_exp;
  /* this+0x80 */ int m_point;
  /* this+0x84 */ char[0x50] m_desc;
  /* this+0xd4 */ struct GUILDNOTICE m_guildNotice;
  /* this+0x18c */ char[0xc00] m_guildEmblem;
  /* this+0xd8c */ int m_isEmblemLoad;
  /* this+0xd90 */ int m_emblemSize;
  /* this+0xd94 */ int m_emblemVersion;
  /* this+0xd98 */ class std::vector<GUILDMINFO *,std::allocator<GUILDMINFO *> > m_guildMInfo;
  /* this+0xda8 */ class std::vector<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > m_guildAllyInfo;
  /* this+0xdb8 */ class std::vector<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > m_guildBanishInfo;
  /* this+0xdc8 */ class std::vector<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > m_guildMPosition;
  /* this+0xdd8 */ class CMemoryMgr<GUILDMINFO> m_GuildMInfoMPool;
  /* this+0xdfc */ class CMemoryMgr<GUILDALLYINFO> m_GuildAllyInfoMPool;
  /* this+0xe20 */ class CMemoryMgr<GUILDBANISHINFO> m_GuildBanishInfoMPool;
  /* this+0xe44 */ class CMemoryMgr<GUILDMPOSITION> m_GuildMPositionMPool;
  /* this+0xe68 */ int m_skillDataLength;
  /* this+0xe6c */ int m_skillPoint;
  /* this+0xe70 */ unsigned char[0x12c] m_skillData;
  /* this+0xf9c */ class CIGuildInfoPacketDispatcher m_packetDispatcher;
  /* this+0xfa4 */ int m_bSkillSave;
  /* this+0xfa8 */ struct CIGuildInfo::ServerInfo[0x28] m_ZServerInfo;
  /* this+0x10e8 */ class std::list<int,std::allocator<int> > m_ZServerList;
  /* this+0x10f4 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_MemberZSID;
  /* this+0x1104 */ int m_bAllNotifyInfo;
  /* this+0x1108 */ unsigned long m_lastSaveTime;
  /* this+0x110c */ int m_DBInfoChange;
  /* this+0x1110 */ int m_InfoUse;
}

struct PACKET_IM_REQ_GUILD_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GuildID;
  /* this+0x6 */ char[0x18] GuildName;
  /* this+0x1e */ char GuildLevel;
  /* this+0x1f */ int GuildExp;
}

class CMemoryMgr<CIGuildInfo> {
  /* this+0x4 */ class CMemoryMgr<CIGuildInfo>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

struct PACKET_ZI_REQ_BAN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ unsigned long MyGID;
  /* this+0x12 */ char[0x18] AccountName;
  /* this+0x2a */ char[0x28] reasonDesc;
}

class CIsvrSchedulerIdentity {
    /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ unsigned int m_IdentityCnt;
}

class CMemoryMgr<GUILDMPOSITION> {
  /* this+0x4 */ class CMemoryMgr<GUILDMPOSITION>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

struct GUILDMPOSITION {
  /* this+0x0 */ int GDID;
  /* this+0x4 */ int Grade;
  /* this+0x8 */ char[0x18] PosName;
  /* this+0x20 */ int JoinRight;
  /* this+0x24 */ int PenaltyRight;
  /* this+0x28 */ int PositionID;
  /* this+0x2c */ int Service;
}

class CMemoryMgr<GUILDMPOSITION>::lcMemory {
  /* this+0x4 */ struct GUILDMPOSITION * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

struct GUILDMINFO {
  /* this+0x0 */ int GID;
  /* this+0x4 */ char[0x18] CharName;
  /* this+0x1c */ char[0x18] AccountName;
  /* this+0x34 */ int Level;
  /* this+0x38 */ char[0x32] Memo;
  /* this+0x6a */ int Service;
  /* this+0x6e */ int MemberExp;
  /* this+0x72 */ int GDID;
  /* this+0x76 */ int AID;
  /* this+0x7a */ int PositionID;
  /* this+0x7e */ short head;
  /* this+0x80 */ short headPalette;
  /* this+0x82 */ short sex;
  /* this+0x84 */ int job;
  /* this+0x88 */ int status;
}

struct std::_Allocator_base<GUILDMINFO *> {
}

struct GUILDALLYINFO {
  /* this+0x0 */ int GDID;
  /* this+0x4 */ int OpponentGDID;
  /* this+0x8 */ char[0x18] GuildName;
  /* this+0x20 */ int Relation;
}

struct std::_Allocator_base<GUILDALLYINFO *> {
}

struct GUILDBANISHINFO {
  /* this+0x0 */ int GDID;
  /* this+0x4 */ char[0x18] MemberName;
  /* this+0x1c */ char[0x18] MemberAccount;
  /* this+0x34 */ char[0x32] Reason;
  /* this+0x66 */ int GID;
  /* this+0x6a */ int AID;
}

struct std::_Allocator_base<GUILDBANISHINFO *> {
}

class std::allocator<GUILDMINFO *> {
}

class std::_Vector_val<GUILDMINFO *,std::allocator<GUILDMINFO *> > {
  /* this+0x0 */ struct GUILDMINFO * * _Myfirst;
  /* this+0x4 */ struct GUILDMINFO * * _Mylast;
  /* this+0x8 */ struct GUILDMINFO * * _Myend;
  /* this+0xc */ class std::allocator<GUILDMINFO *> _Alval;
}

struct std::_Allocator_base<GUILDMPOSITION *> {
}

struct std::pair<unsigned int const ,CMapInfo> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class CMapInfo second;
}

struct std::_Allocator_base<std::pair<unsigned int const ,CMapInfo> > {
}

struct std::pair<int const ,int> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ int second;
}

struct std::_Allocator_base<std::pair<int const ,int> > {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned long const ,CGuild *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node> {
}

class std::allocator<GUILDALLYINFO *> {
}

struct std::allocator<GUILDALLYINFO *>::rebind<GUILDALLYINFO *> {
}

class std::allocator<GUILDBANISHINFO *> {
}

struct std::allocator<GUILDBANISHINFO *>::rebind<GUILDBANISHINFO *> {
}

class std::_Vector_val<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > {
  /* this+0x0 */ struct GUILDBANISHINFO * * _Myfirst;
  /* this+0x4 */ struct GUILDBANISHINFO * * _Mylast;
  /* this+0x8 */ struct GUILDBANISHINFO * * _Myend;
  /* this+0xc */ class std::allocator<GUILDBANISHINFO *> _Alval;
}

class std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::allocator<std::pair<int const ,int> > {
}

struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,int> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

class std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,int> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node> {
}

struct std::allocator<std::pair<int const ,int> >::rebind<std::pair<int const ,int> > {
}

struct std::allocator<std::pair<int const ,int> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node> {
}

struct std::allocator<GUILDMINFO *>::rebind<GUILDMINFO *> {
}

struct std::_Iterator012<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base0> {
}

class std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > > {
  /* this+0x0 */ int * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Node * _Ptr;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node> {
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ int second;
}

class std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,int> > _Alval;
}

class std::_Tree<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,int> > _Alval;
}

struct std::pair<int,int> {
}

class std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,bool> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > > {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > > {
}

struct std::pair<unsigned long const ,CGuild *> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class CGuild * second;
}

struct std::_Allocator_base<std::pair<unsigned long const ,CGuild *> > {
}

class std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> {
  /* this+0x0 */ struct std::less<unsigned long> comp;
}

class std::allocator<std::pair<unsigned long const ,CGuild *> > {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CGuild *> > _Alval;
}

class std::allocator<GUILDMPOSITION *> {
}

struct std::allocator<GUILDMPOSITION *>::rebind<GUILDMPOSITION *> {
}

struct std::pair<unsigned int,CMapInfo> {
}

class std::allocator<std::pair<unsigned int const ,CMapInfo> > {
}

class std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> {
  /* this+0x0 */ struct std::less<unsigned int> comp;
}

class std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0>::value_compare {
}

struct std::allocator<std::pair<unsigned int const ,CMapInfo> >::rebind<std::pair<unsigned int const ,CMapInfo> > {
}

struct std::allocator<std::pair<unsigned int const ,CMapInfo> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node> {
}

class std::vector<GUILDMINFO *,std::allocator<GUILDMINFO *> > {
  /* this+0x0 */ struct GUILDMINFO * * _Myfirst;
  /* this+0x4 */ struct GUILDMINFO * * _Mylast;
  /* this+0x8 */ struct GUILDMINFO * * _Myend;
  /* this+0xc */ class std::allocator<GUILDMINFO *> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<GUILDMINFO *,std::allocator<GUILDMINFO *> > > {
  /* this+0x0 */ struct GUILDMINFO * * _Ptr;
}

class std::_Vector_const_iterator<std::_Vector_val<GUILDMINFO *,std::allocator<GUILDMINFO *> > > {
  /* this+0x0 */ struct GUILDMINFO * * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<GUILDMINFO *,std::allocator<GUILDMINFO *> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<GUILDMINFO *,std::allocator<GUILDMINFO *> > > > {
}

struct std::_Pair_base<bool,CMapInfo> {
  /* this+0x0 */ bool first;
  /* this+0x4 */ class CMapInfo second;
}

class CMapInfo {
  /* this+0x4 */ int MapID;
  /* this+0x8 */ char[0x18] Name;
  /* this+0x20 */ int type;
  /* this+0x24 */ bool bPlayerEnter;
  /* this+0x28 */ int ZSID;
}

class std::_List_unchecked_const_iterator<std::_List_val<unsigned long,std::allocator<unsigned long> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_List_nod<unsigned long,std::allocator<unsigned long> >::_Node * _Ptr;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node> {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CGuild *> > _Alval;
}

class std::map<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> > > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CGuild *> > _Alval;
}

class std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0>::value_compare {
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > > > {
}

class std::_List_unchecked_iterator<std::_List_val<unsigned long,std::allocator<unsigned long> > > {
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ int second;
}

class std::_Vector_val<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > {
  /* this+0x0 */ struct GUILDMPOSITION * * _Myfirst;
  /* this+0x4 */ struct GUILDMPOSITION * * _Mylast;
  /* this+0x8 */ struct GUILDMPOSITION * * _Myend;
  /* this+0xc */ class std::allocator<GUILDMPOSITION *> _Alval;
}

class std::_Vector_val<int,std::allocator<int> > {
  /* this+0x0 */ int * _Myfirst;
  /* this+0x4 */ int * _Mylast;
  /* this+0x8 */ int * _Myend;
  /* this+0xc */ class std::allocator<int> _Alval;
}

class std::vector<int,std::allocator<int> > {
  /* this+0x0 */ int * _Myfirst;
  /* this+0x4 */ int * _Mylast;
  /* this+0x8 */ int * _Myend;
  /* this+0xc */ class std::allocator<int> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > {
  /* this+0x0 */ int * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > > > {
}

struct std::binary_function<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,unsigned long,bool> {
}

class std::_Vector_val<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > {
  /* this+0x0 */ struct GUILDALLYINFO * * _Myfirst;
  /* this+0x4 */ struct GUILDALLYINFO * * _Mylast;
  /* this+0x8 */ struct GUILDALLYINFO * * _Myend;
  /* this+0xc */ class std::allocator<GUILDALLYINFO *> _Alval;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned int const ,CMapInfo> _Myval;
  /* this+0x3c */ char _Color;
  /* this+0x3d */ char _Isnil;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CMapInfo> > _Alval;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node> {
}

class std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned long> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned long const ,CGuild *> > _Alval;
}

struct std::pair<unsigned long,CGuild *> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ class CGuild * second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > > > {
}

struct std::unary_function<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,bool> {
}

class std::tr1::_Ref_count<`anonymous namespace'::lcZSVRLivePing> {
  /* this+0x4 */ long _Uses;
  /* this+0x8 */ long _Weaks;
  /* this+0xc */ class `anonymous-namespace'::lcZSVRLivePing * _Ptr;
}

class `anonymous-namespace'::lcZSVRLivePing {
  /* this+0x4 */ const unsigned long m_Identity;
  /* this+0x8 */ unsigned long m_Time;
}

class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,int> > _Alval;
}

struct std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > >,1> > > first;
  /* this+0x4 */ bool second;
}

class std::vector<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > {
  /* this+0x0 */ struct GUILDALLYINFO * * _Myfirst;
  /* this+0x4 */ struct GUILDALLYINFO * * _Mylast;
  /* this+0x8 */ struct GUILDALLYINFO * * _Myend;
  /* this+0xc */ class std::allocator<GUILDALLYINFO *> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > > {
  /* this+0x0 */ struct GUILDALLYINFO * * _Ptr;
}

class std::_Vector_const_iterator<std::_Vector_val<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > > {
  /* this+0x0 */ struct GUILDALLYINFO * * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > > > {
}

class std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CMapInfo> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CMapInfo> > _Alval;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > > {
}

class std::vector<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > {
  /* this+0x0 */ struct GUILDBANISHINFO * * _Myfirst;
  /* this+0x4 */ struct GUILDBANISHINFO * * _Mylast;
  /* this+0x8 */ struct GUILDBANISHINFO * * _Myend;
  /* this+0xc */ class std::allocator<GUILDBANISHINFO *> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > > {
  /* this+0x0 */ struct GUILDBANISHINFO * * _Ptr;
}

class std::_Vector_const_iterator<std::_Vector_val<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > > {
  /* this+0x0 */ struct GUILDBANISHINFO * * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > > > {
}

class std::vector<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > {
  /* this+0x0 */ struct GUILDMPOSITION * * _Myfirst;
  /* this+0x4 */ struct GUILDMPOSITION * * _Mylast;
  /* this+0x8 */ struct GUILDMPOSITION * * _Myend;
  /* this+0xc */ class std::allocator<GUILDMPOSITION *> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > > {
  /* this+0x0 */ struct GUILDMPOSITION * * _Ptr;
}

class std::_Vector_const_iterator<std::_Vector_val<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > > {
  /* this+0x0 */ struct GUILDMPOSITION * * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > > > {
}

class std::map<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> > > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,CMapInfo> > _Alval;
}

class std::binder2nd<`N3Scheduler<CZServer>::Delete'::`2'::CTaskCompare> {
  /* this+0x0 */ class N3Scheduler<CZServer>::Delete::__l2::CTaskCompare op;
  /* this+0x4 */ unsigned long value;
}

class N3Scheduler<CZServer>::Delete::__l2::CTaskCompare {
}

struct std::pair<bool,CMapInfo> {
  /* this+0x0 */ bool first;
  /* this+0x4 */ class CMapInfo second;
}

struct std::allocator<std::pair<unsigned long const ,CGuild *> >::rebind<std::pair<unsigned long const ,CGuild *> > {
}

struct std::allocator<std::pair<unsigned long const ,CGuild *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node> {
}

class CMakerRankDB {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
}

struct MAKER_RANKING {
  /* this+0x0 */ unsigned long GID;
  /* this+0x4 */ char[0x18] charname;
  /* this+0x1c */ int point;
}

class CMakerRankMgr {
  /* this+0x4 */ class CMakerRankDB m_MakerRankDB;
  /* this+0x18 */ struct MAKER_RANKING[0xc] m_BlackSmith;
  /* this+0x198 */ struct MAKER_RANKING[0xc] m_Alchemist;
  /* this+0x318 */ struct MAKER_RANKING[0xc] m_Taekwon;
  /* this+0x498 */ struct MAKER_RANKING[0xc] m_Killer;
}

struct $_TypeDescriptor$_extraBytes_42 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x2a] name;
}

class CMemoryMgr<GUILDBANISHINFO> {
  /* this+0x4 */ class CMemoryMgr<GUILDBANISHINFO>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

class CMemoryMgr<GUILDBANISHINFO>::lcMemory {
  /* this+0x4 */ struct GUILDBANISHINFO * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

struct $_TypeDescriptor$_extraBytes_47 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x2f] name;
}

struct GUILDINFO {
  /* this+0x0 */ int GDID;
  /* this+0x4 */ int Level;
  /* this+0x8 */ char[0x18] Name;
  /* this+0x20 */ char[0x18] MName;
  /* this+0x38 */ int MaxUserNum;
  /* this+0x3c */ int UserNum;
  /* this+0x40 */ int Honor;
  /* this+0x44 */ int Virtue;
  /* this+0x48 */ int Type;
  /* this+0x4c */ int Class;
  /* this+0x50 */ int Money;
  /* this+0x54 */ int ArenaWin;
  /* this+0x58 */ int ArenaLose;
  /* this+0x5c */ int ArenaDrawn;
  /* this+0x60 */ char[0x18] ManageLand;
  /* this+0x78 */ int Exp;
  /* this+0x7c */ int EmblemVersion;
  /* this+0x80 */ int Point;
  /* this+0x84 */ char[0x50] Desc;
}

struct $_TypeDescriptor$_extraBytes_58 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x3a] name;
}

struct GUILD_MEMBER_INFO {
  /* this+0x0 */ int AID;
  /* this+0x4 */ int GID;
  /* this+0x8 */ short head;
  /* this+0xa */ short headPalette;
  /* this+0xc */ short sex;
  /* this+0xe */ short job;
  /* this+0x10 */ short level;
  /* this+0x12 */ int contributionExp;
  /* this+0x16 */ int currentState;
  /* this+0x1a */ int positionID;
  /* this+0x1e */ char[0x32] intro;
  /* this+0x50 */ char[0x18] charname;
}

struct GUILDNOTICE {
  /* this+0x0 */ int GDID;
  /* this+0x4 */ char[0x3c] Subject;
  /* this+0x40 */ char[0x78] Notice;
}

class CMemoryMgr<GUILDMINFO> {
  /* this+0x4 */ class CMemoryMgr<GUILDMINFO>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

class CMemoryMgr<GUILDALLYINFO> {
  /* this+0x4 */ class CMemoryMgr<GUILDALLYINFO>::lcMemory * m_MemoryPool;
  /* this+0x8 */ int m_MemoryCnt;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs;
}

struct PACKET_IZ_PING_LIVE {
  /* this+0x0 */ short PacketType;
}

class CMemoryMgr<CIGuildInfo>::lcMemory {
  /* this+0x4 */ class CIGuildInfo * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

class CIGuildInfoPacketDispatcher {
  /* this+0x4 */ class CIGuildInfo * m_guildInfo;
}

struct CIGuildInfo::ServerInfo {
  /* this+0x0 */ unsigned long ServerID;
  /* this+0x4 */ int MemberNumber;
}

class CMAPStatisticLogMgr {
    /* this+0x4 */ bool m_bOK;
  /* this+0x5 */ bool m_bOutputLog;
}

class CZSVRStatisticLogMgr {
    /* this+0x4 */ bool m_bOK;
  /* this+0x5 */ bool m_bOutputLog;
}

class CMemoryMgr<GUILDMINFO>::lcMemory {
  /* this+0x4 */ struct GUILDMINFO * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

class N2ODBCCtrl {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ void * m_hEnv;
  /* this+0xc */ void * m_hDbc;
  /* this+0x10 */ bool m_bConnect;
}

class CMapInfoMgr {
    /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class std::map<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> > > m_MapInfoTbl;
  /* this+0x18 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > m_MappingTbl;
}

struct std::pair<int,bool> {
  /* this+0x0 */ int first;
  /* this+0x4 */ bool second;
}

struct $_TypeDescriptor$_extraBytes_37 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x25] name;
}

class CMemoryMgr<GUILDALLYINFO>::lcMemory {
  /* this+0x4 */ struct GUILDALLYINFO * m_pObject;
  /* this+0x8 */ bool m_bUsed;
}

class N2DBLog {
  /* this+0x4 */ bool m_bOK;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> >,0> > > first;
  /* this+0x4 */ bool second;
}

class NSyncObject {
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION & m_CS;
}

class CGVar {
    /* this+0x0 */ bool m_bOK;
  /* this+0x4 */ int m_AsyncDBThreadNum;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_GlobalDBPwd;
  /* this+0x24 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_CharacterDBPwd;
}

class N2SyncObject {
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION & m_CS;
}

class N3ODBCCtrl {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ void * m_hEnv;
  /* this+0xc */ void * m_hDbc;
  /* this+0x10 */ bool m_bConnect;
}

class N3ODBCHandler {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class N3ODBCCtrl & m_vcODBCCtrl;
  /* this+0xc */ void * m_hStmt;
}

struct PACKET_ZI_UPDATE_MAKERRANK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ int point;
  /* this+0xc */ char[0x18] charname;
}

struct PACKET_ZI_MAIL_SEND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long GID;
  /* this+0xc */ char[0x28] Header;
  /* this+0x34 */ char[0x28] ItemInfo;
  /* this+0x5c */ char ItemLen;
  /* this+0x5d */ unsigned long Money;
  /* this+0x61 */ char[0x18] SendName;
  /* this+0x79 */ unsigned long SendAID;
}

struct PACKET_ZI_ACTOR_INIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
}

struct PACKET_ZI_MAIL_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int MailID;
}

struct PACKET_IZ_WHISPER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long receiverAID;
  /* this+0x8 */ unsigned long senderAID;
  /* this+0xc */ char[0x18] sender;
  /* this+0x24 */ char[0x18] senderAccountName;
}

struct PACKET_ZI_REQ_USER_COUNT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZI_MAKE_GROUP2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] groupName;
  /* this+0x22 */ unsigned char ItemPickupRule;
  /* this+0x23 */ unsigned char ItemDivisionRule;
}

struct PACKET_ZI_MAKE_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] groupName;
}

struct PACKET_ZI_MEMORIALDUNGEON_SUBSCRIPTION2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ char[0x3d] NickName;
  /* this+0x41 */ unsigned long GRID;
  /* this+0x45 */ unsigned long AID;
  /* this+0x49 */ unsigned long GID;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned int const ,N2Inter *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node> {
}

struct std::pair<unsigned int const ,N2Inter *> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class N2Inter * second;
}

struct std::_Allocator_base<std::pair<unsigned int const ,N2Inter *> > {
}

class std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> > _Alval;
}

class std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> > {
}

struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,CPacketLengthExMgr::CData> _Myval;
  /* this+0x1c */ char _Color;
  /* this+0x1d */ char _Isnil;
}

struct std::pair<int const ,CPacketLengthExMgr::CData> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class CPacketLengthExMgr::CData second;
}

class std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> > _Alval;
}

class std::allocator<std::pair<unsigned int const ,N2Inter *> > {
}

struct std::allocator<std::pair<unsigned int const ,N2Inter *> >::rebind<std::pair<unsigned int const ,N2Inter *> > {
}

struct std::allocator<std::pair<unsigned int const ,N2Inter *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node> {
}

class std::_Tree<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> > _Alval;
}

struct std::pair<int,CPacketLengthExMgr::CData> {
  /* this+0x0 */ int first;
  /* this+0x4 */ class CPacketLengthExMgr::CData second;
}

class std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > > > {
}

struct std::_Allocator_base<std::pair<int const ,CPacketLengthExMgr::CData> > {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node> {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N2Inter *> > _Alval;
}

class std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N2Inter *> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node> {
}

class std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> {
  /* this+0x0 */ struct std::less<unsigned int> comp;
}

struct std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >::rebind<std::pair<int const ,CPacketLengthExMgr::CData> > {
}

struct std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node> {
}

struct std::pair<int const ,CMClient *> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class CMClient * second;
}

struct std::_Allocator_base<std::pair<int const ,CMClient *> > {
}

class std::allocator<std::pair<int const ,CMClient *> > {
}

struct std::allocator<std::pair<int const ,CMClient *> >::rebind<std::pair<int const ,CMClient *> > {
}

struct std::allocator<std::pair<int const ,CMClient *> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node> {
}

struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,CMClient *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node> {
}

class std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::_Tree<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N2Inter *> > _Alval;
}

struct std::pair<unsigned int,N2Inter *> {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ class N2Inter * second;
}

class std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > > > {
}

struct std::_Pair_base<enum CPacketLengthExMgr::enumFixedPacketRet,int> {
  /* this+0x0 */ enum CPacketLengthExMgr::enumFixedPacketRet first;
  /* this+0x4 */ int second;
}

class std::_Tree<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CMClient *> > _Alval;
}

class std::map<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CMClient *> > _Alval;
}

class std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0>::value_compare {
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > > > {
}

class std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CMClient *> > _Alval;
}

class std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CMClient *> > _Alval;
}

struct std::_Int_iterator_tag {
}

struct std::pair<int,CMClient *> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > > > {
}

class std::map<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> > _Alval;
}

class CPacketLengthExMgr::CData {
  /* this+0x0 */ const int m_Len;
  /* this+0x4 */ const int m_Min;
  /* this+0x8 */ const int m_ReplayFactor;
}

class std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

struct std::pair<enum CPacketLengthExMgr::enumFixedPacketRet,int> {
  /* this+0x0 */ enum CPacketLengthExMgr::enumFixedPacketRet first;
  /* this+0x4 */ int second;
}

class std::map<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> > > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,N2Inter *> > _Alval;
}

class N2Inter {
}

struct PACKET_IZ_MEMORIALDUNGEON_MSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ enum PACKET_IZ_MEMORIALDUNGEON_MSG::enumNotify Notify;
  /* this+0xe */ char[0x3d] MemorialDungeonName;
}

struct PACKET_ZC_BROADCASTING_SPECIAL_ITEM_OBTAIN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ unsigned short ItemID;
}

struct PACKET_IZ_BROADCASTING_SPECIAL_ITEM_OBTAIN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ unsigned short ItemID;
}

struct IM_SERVER_STATE {
  /* this+0x0 */ int serverID;
  /* this+0x4 */ int packetNumber;
  /* this+0x8 */ int userCounter;
  /* this+0xc */ int loopcountPerSec;
}

struct PACKET_ZI_SERVERSTATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int monitorNum;
  /* this+0x6 */ struct IM_SERVER_STATE state;
}

struct PACKET_ZI_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] Name;
  /* this+0x1a */ unsigned long Job;
  /* this+0x1e */ unsigned long Level;
  /* this+0x22 */ char[0x10] mapName;
  /* this+0x32 */ unsigned long Option;
}

struct PACKET_ZI_VERSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
}

class CProgrammerSupportLog {
  /* this+0x4 */ bool m_bOK;
  /* this+0x5 */ bool m_bOutput;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x20 */ char[0x400] m_szLogDir;
  /* this+0x420 */ char[0x400] m_szLogFilePrefix;
  /* this+0x820 */ unsigned int m_SequenceFileCnt;
  /* this+0x824 */ int m_BytesOfWritten;
    /* this+0x828 */ bool m_bOK;
}

struct PACKET_ZI_GUILD_CHANGEOWNER_AGIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long oldGDID;
  /* this+0x6 */ unsigned long newGDID;
  /* this+0xa */ char[0x10] mapName;
}

struct PACKET_IZ_MOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MoveType;
  /* this+0x6 */ unsigned long SrcID;
  /* this+0xa */ unsigned long DestID;
  /* this+0xe */ int DestX;
  /* this+0x12 */ int DestY;
  /* this+0x16 */ char[0x10] MapName;
  /* this+0x26 */ char[0x18] CharName;
}

struct PACKET_ZI_REQ_MAKE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ unsigned long AID;
  /* this+0xe */ char[0x18] GName;
  /* this+0x26 */ char[0x18] MName;
  /* this+0x3e */ char[0x18] AccountName;
}

struct PACKET_IZ_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] Name;
  /* this+0x1a */ unsigned long Job;
  /* this+0x1e */ unsigned long Level;
  /* this+0x22 */ char[0x10] mapName;
  /* this+0x32 */ unsigned long Option;
}

struct PACKET_ZI_MAPMOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x10] mapName;
}

class N2InterMessageSystem {
    /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x1c */ bool m_bOK;
  /* this+0x20 */ class std::map<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> > > m_InterObjContainer;
}

struct PACKET_ZI_SEEK_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] Name;
  /* this+0x1a */ unsigned long Job;
  /* this+0x1e */ unsigned long Level;
  /* this+0x22 */ char[0x10] mapName;
  /* this+0x32 */ unsigned long Option;
}

struct PACKET_ZI_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GRID;
  /* this+0x6 */ unsigned long MasterAID;
  /* this+0xa */ int FamilyGroup;
  /* this+0xe */ unsigned long expOption;
  /* this+0x12 */ unsigned char ItemPickupRule;
  /* this+0x13 */ unsigned char ItemDivisionRule;
}

struct PACKET_ZI_EPISODE_VERSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Episode_Ver;
  /* this+0x6 */ unsigned long Minor_Ver;
}

struct PACKET_ZI_MOVE_GID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MoveType;
  /* this+0x6 */ unsigned long SrcID;
  /* this+0xa */ int DestX;
  /* this+0xe */ int DestY;
  /* this+0x12 */ char[0x18] DestName;
  /* this+0x2a */ unsigned long DestGID;
}

struct PACKET_IZ_ACK_MAKE_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GRID;
  /* this+0xa */ char[0x18] groupName;
  /* this+0x22 */ unsigned char result;
}

struct PACKET_ZI_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GRID;
  /* this+0x6 */ unsigned long MasterAID;
  /* this+0xa */ unsigned long AID;
}

struct PACKET_IZ_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GRID;
  /* this+0xa */ char[0x18] groupName;
}

struct PACKET_IZ_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long targetAID;
  /* this+0x6 */ unsigned long GRID;
  /* this+0xa */ char[0x18] groupName;
}

struct PACKET_IZ_MEMORIALDUNGEON_MSG2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ unsigned long AID;
  /* this+0xc */ enum PACKET_IZ_MEMORIALDUNGEON_MSG2::enumNotify Notify;
}

class CMClientMgr {
  /* this+0x4 */ int m_serverIDcounter;
  /* this+0x8 */ class std::map<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> > > m_mServerMap;
  /* this+0x18 */ class CMemoryMgr<CMClient> m_mserverMemoryPool;
  /* this+0x3c */ struct _RTL_CRITICAL_SECTION m_mserverMgr_cs;
}

class CMsvrMgr {
  /* this+0x4 */ int m_serverIDcounter;
  /* this+0x8 */ class std::map<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> > > m_mServerMap;
  /* this+0x18 */ class CMemoryMgr<CMClient> m_mserverMemoryPool;
  /* this+0x3c */ struct _RTL_CRITICAL_SECTION m_mserverMgr_cs;
  /* this+0x5c */ const unsigned int m_MyID;
    /* this+0x60 */ bool m_bOK;
  /* this+0x64 */ class N3MessageQueue m_MessageQueue;
}

struct PACKET_ZI_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long senderAID;
  /* this+0x6 */ unsigned long receiverAID;
  /* this+0xa */ unsigned long GRID;
}

struct PACKET_SERVER_ENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int SID;
}

struct PACKET_ZI_REQ_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ char[0x28] key;
}

struct PACKET_ZI_MOVE_2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MoveType;
  /* this+0x6 */ unsigned long SrcID;
  /* this+0xa */ int DestX;
  /* this+0xe */ int DestY;
  /* this+0x12 */ unsigned long DestAID;
  /* this+0x16 */ unsigned long DestGID;
  /* this+0x1a */ char[0x18] DestName;
}

struct PACKET_IZ_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long requestAID;
  /* this+0x6 */ char[0x18] characterName;
  /* this+0x1e */ enum PACKET_ZC_PARTY_JOIN_REQ_ACK::enumAnswer answer;
}

struct PACKET_ZI_JOIN_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long senderAID;
  /* this+0x6 */ unsigned long GRID;
  /* this+0xa */ int answer;
}

struct IM_SERVER_STATE_CHANNELING {
  /* this+0x0 */ int serverID;
  /* this+0x4 */ int packetNumber;
  /* this+0x8 */ int userCounter;
  /* this+0xc */ int loopcountPerSec;
  /* this+0x10 */ short[0xa] Channeling_UserCounter;
}

struct PACKET_ZI_SERVERSTATE_CHANNELING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int monitorNum;
  /* this+0x6 */ struct IM_SERVER_STATE_CHANNELING state;
}

struct IM_SERVER_STATE_HAN_GAME {
  /* this+0x0 */ int serverID;
  /* this+0x4 */ int packetNumber;
  /* this+0x8 */ int userCounter;
  /* this+0xc */ int loopcountPerSec;
  /* this+0x10 */ int hangameUserCounter;
}

struct PACKET_IM_SERVERSTATE_HAN_GAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct IM_SERVER_STATE_HAN_GAME serverState;
}

struct PACKET_ZI_MAIL_GET_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int MailID;
}

struct PACKET_ZI_REQ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long OpponentGDID;
  /* this+0xa */ int Relation;
}

struct PACKET_ZI_DIVORCE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x18] name;
}

struct PACKET_IZ_ACK_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x18] characterName;
  /* this+0x1e */ unsigned char answer;
}

struct PACKET_ZI_CHANGE_EXPOPTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GRID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long expOption;
}

struct PACKET_ZI_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long FriendAID;
  /* this+0xa */ unsigned long FriendGID;
}

struct PACKET_IZ_DIVORCE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x18] name;
}

struct PACKET_IZ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
}

class CPacketLengthExMgr {
  /* this+0x0 */ class std::map<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> > > m_LengthMap;
}

struct PACKET_ZI_MAIL_GET_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
}

struct PACKET_IZ_GUILD_CHANGEOWNER_AGIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long oldGDID;
  /* this+0x6 */ unsigned long newGDID;
  /* this+0xa */ char[0x10] mapName;
}

struct PACKET_ZI_LOGON {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int sex;
  /* this+0xe */ short head;
  /* this+0x10 */ short headpalette;
  /* this+0x12 */ short level;
  /* this+0x14 */ short job;
  /* this+0x16 */ char[0x18] accountName;
  /* this+0x2e */ char[0x18] charName;
  /* this+0x46 */ char[0x10] mapName;
}

struct PACKET_IZ_AUTH_ACK {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZI_CHAR_LEVEL_UP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ unsigned long AID;
}

struct PACKET_ZI_CHAT_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long GRID;
}

class NMemoryHelper {
  /* this+0x4 */ unsigned char * m_pBuffer;
  /* this+0x8 */ int m_maxbytes;
  /* this+0xc */ int m_usedbytes;
}

struct PACKET_IZ_REQ_EDIT_EXP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int monitornum;
  /* this+0x6 */ int Exp;
  /* this+0xa */ int Death;
  /* this+0xe */ int Drop;
}

struct PACKET_IZ_MEMORIALDUNGEON_OPENSTATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ bool bOpen;
  /* this+0x3 */ unsigned long ToGID;
  /* this+0x7 */ unsigned long ToAID;
}

struct PACKET_ZI_MOVE_SERVER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] charName;
}

struct PACKET_ZI_MOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MoveType;
  /* this+0x6 */ unsigned long SrcID;
  /* this+0xa */ int DestX;
  /* this+0xe */ int DestY;
  /* this+0x12 */ char[0x18] DestName;
}

struct PACKET_ZI_REQ_EXPEL_GROUP_MEMBER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GRID;
  /* this+0xa */ char[0x18] characterName;
}

struct PACKET_IM_SERVERSTATE_CHANNELING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct IM_SERVER_STATE_CHANNELING serverState;
}

struct PACKET_ZI_ALLY_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long otherGDID;
  /* this+0xa */ unsigned long myAID;
  /* this+0xe */ unsigned long myGID;
  /* this+0x12 */ unsigned long otherAID;
  /* this+0x16 */ unsigned long otherGID;
  /* this+0x1a */ int answer;
}

class CMailDB {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
}

struct PACKET_ZI_ACK_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ReqAID;
  /* this+0x6 */ unsigned long ReqGID;
  /* this+0xa */ unsigned long AckAID;
  /* this+0xe */ unsigned long AckGID;
}

struct PACKET_ZI_DISCONNECT_ALL {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZI_EXIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] charName;
}

struct PACKET_ZI_MAIL_OPEN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int MailID;
}

struct PACKET_ZI_ACK_WHISPER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long senderAID;
  /* this+0x6 */ char[0x18] sender;
  /* this+0x1e */ unsigned char result;
}

struct PACKET_IM_SERVERSTATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct IM_SERVER_STATE serverState;
}

struct PACKET_IZ_USER_COUNT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int count;
}

struct PACKET_IZ_DISCONNECT_ALL {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZI_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long myGID;
  /* this+0xa */ unsigned long myAID;
  /* this+0xe */ unsigned long GID;
}

struct PACKET_ZI_REQ_MAIL_RETURN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long MailID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ char[0x18] FromName;
  /* this+0x26 */ unsigned long ReceiveAID;
  /* this+0x2a */ unsigned long ReceiveGID;
}

struct PACKET_ZI_ACK_CHK_PROCESSTIME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ long InterProcessTime;
  /* this+0x6 */ long ZoneProcessTime;
}

struct PACKET_ZI_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long OtherGDID;
  /* this+0xa */ unsigned long MyAID;
}

struct PACKET_IZ_SEEK_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] Name;
  /* this+0x1a */ unsigned long Job;
  /* this+0x1e */ unsigned long Level;
  /* this+0x22 */ char[0x10] mapName;
  /* this+0x32 */ unsigned long Option;
}

struct PACKET_IZ_ACK_WHISPER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long senderAID;
  /* this+0x6 */ unsigned char result;
}

class CMailCtrl {
  /* this+0x4 */ class CMailDB m_MailDB;
  /* this+0x16 */ struct MAILTIME m_DeleteTime;
  /* this+0x20 */ unsigned long m_lastTime;
  /* this+0x24 */ class CDateTime m_DateTime;
}

struct CZSPacketHandler::DispatchPacket::__l49::TEMPHEADER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
}

struct CZSPacketHandler::DispatchPacket::__l50::TEMPHEADER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
}

struct CZSPacketHandler::DispatchPacket::__l51::TEMPHEADER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
}

class CRecycleObject {
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_className;
}

class CRecycleObjectMemoryPoolInter {
}

class CRecycleObjectMgrInter {
}

class CMsvrAcceptHandler {
    /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class CMemoryMgr<CAsyncStream> m_streamPool;
}

class CMsvrAcceptThread {
  /* this+0x4 */ unsigned long m_ThreadID;
  /* this+0x8 */ bool m_bOK;
  /* this+0xc */ enum N3Thread::enumState m_State;
  /* this+0x10 */ void * m_hThread;
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
  /* this+0x38 */ const unsigned int m_MyID;
    /* this+0x3c */ bool m_bOK;
  /* this+0x40 */ class N3MessageQueue m_MessageQueue;
  /* this+0x7c */ unsigned int m_Socket;
  /* this+0x80 */ const unsigned long m_IPaddr;
  /* this+0x84 */ const short m_Port;
}

struct std::_Pair_base<int const ,CMClient *> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class CMClient * second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > > {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> >::_Node * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,CMClient *>,int,std::pair<int const ,CMClient *> const *,std::pair<int const ,CMClient *> const &,std::_Iterator_base0> {
}

struct $_TypeDescriptor$_extraBytes_18 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x12] name;
}

class CMServerLog {
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS;
    /* this+0x1c */ bool m_bOK;
  /* this+0x1d */ char[0x104] m_LogFileName;
}

struct _SECURITY_ATTRIBUTES {
  /* this+0x0 */ unsigned long nLength;
  /* this+0x4 */ void * lpSecurityDescriptor;
  /* this+0x8 */ int bInheritHandle;
}

struct _SYSTEMTIME {
  /* this+0x0 */ unsigned short wYear;
  /* this+0x2 */ unsigned short wMonth;
  /* this+0x4 */ unsigned short wDayOfWeek;
  /* this+0x6 */ unsigned short wDay;
  /* this+0x8 */ unsigned short wHour;
  /* this+0xa */ unsigned short wMinute;
  /* this+0xc */ unsigned short wSecond;
  /* this+0xe */ unsigned short wMilliseconds;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> >,0> > > first;
  /* this+0x4 */ bool second;
}

class CErrorLog {
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_csCriticalError;
}

class std::_Vector_val<char,std::allocator<char> > {
  /* this+0x0 */ char * _Myfirst;
  /* this+0x4 */ char * _Mylast;
  /* this+0x8 */ char * _Myend;
  /* this+0xc */ class std::allocator<char> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > > {
  /* this+0x0 */ char * _Ptr;
}

class std::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > > {
  /* this+0x0 */ char * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > > > {
  /* this+0x0 */ class std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > > current;
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > > > {
}

struct std::iterator<std::random_access_iterator_tag,char,int,char *,char &> {
}

class std::_Revranit<std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > {
  /* this+0x0 */ class std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > > current;
}

struct PACKET_IM_ACK_EDIT_EXP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Result;
  /* this+0x6 */ int Exp;
  /* this+0xa */ int Death;
  /* this+0xe */ int Drop;
}

struct PACKET_MI_REQ_SERVERSTATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int serverID;
  /* this+0x6 */ int packetNumber;
}

struct PACKET_IM_CONTROLFAIL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int errorCode;
}

struct PACKET_IZ_REQ_SERVERSTATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int packetNumber;
  /* this+0x6 */ int monitorNum;
}

struct PACKET_MI_GUILD_INFO_INIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GuildID;
}

struct PACKET_MI_GET_GUILD_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GuildID;
}

struct PACKET_IM_SERVERLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_IM_RESULT_GUILD_INFO_INIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char Result;
}

struct PACKET_IZ_BROADCAST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLen;
}

struct PACKET_MI_ALLY_GUILD_INIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GuildID;
}

struct PACKET_IM_REQ_ALLY_GUILD_INIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char Result;
}

struct PACKET_MI_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] ID;
  /* this+0x1a */ char[0x18] Password;
}

struct PACKET_MI_SHOTDOWN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int serverID;
  /* this+0x6 */ char[0x18] password;
}

class std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > {
  /* this+0x0 */ struct std::less<short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<short const ,int> > _Alval;
}

class std::allocator<std::pair<short const ,int> > {
}

struct std::less<short> {
}

struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<short const ,int> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::pair<short const ,int> {
  /* this+0x0 */ const short first;
  /* this+0x4 */ int second;
}

class std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > {
  /* this+0x0 */ struct std::less<short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<short const ,int> > _Alval;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<short const ,int>,int,std::pair<short const ,int> const *,std::pair<short const ,int> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Ptr;
}

struct std::binary_function<short,short,bool> {
}

struct std::_Allocator_base<std::pair<short const ,int> > {
}

struct std::allocator<std::pair<short const ,int> >::rebind<std::pair<short const ,int> > {
}

struct std::allocator<std::pair<short const ,int> >::rebind<std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node> {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node> {
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > > {
}

struct std::_Pair_base<short const ,int> {
  /* this+0x0 */ const short first;
  /* this+0x4 */ int second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > {
  /* this+0x0 */ struct std::less<short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<short const ,int> > _Alval;
}

class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > {
  /* this+0x0 */ struct std::less<short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<short const ,int> > _Alval;
}

class std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0>::value_compare {
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > > > {
}

struct std::pair<short,int> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> > > > {
}

class std::_Tmap_traits<short,int,std::less<short>,std::allocator<std::pair<short const ,int> >,0> {
  /* this+0x0 */ struct std::less<short> comp;
}

class CExpParameter {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
  /* this+0x14 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_guildexpValue;
}

struct PACKET_IZ_GUILD_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
}

struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,char *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node> {
}

struct std::pair<int const ,char *> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ char * second;
}

struct std::_Allocator_base<std::pair<int const ,char *> > {
}

class std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::allocator<std::pair<int const ,char *> > {
}

class std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,char *> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node> {
}

struct std::allocator<std::pair<int const ,char *> >::rebind<std::pair<int const ,char *> > {
}

struct std::allocator<std::pair<int const ,char *> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node> {
}

class std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,char *> > _Alval;
}

class std::_Tree<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,char *> > _Alval;
}

struct std::pair<int,char *> {
  /* this+0x0 */ int first;
  /* this+0x4 */ char * second;
}

class std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > > > {
}

class std::map<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,char *> > _Alval;
}

struct PACKET_ZI_GUILD_CHANGEMAXUSER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ int maxNum;
}

struct PACKET_IZ_GUILD_CHANGEMAXUSER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ int maxNum;
}

class CGuildDB {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
  /* this+0x14 */ class std::map<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> > > m_getProcTable;
}

class CIGuildInfoDB {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
  /* this+0x14 */ class std::map<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> > > m_getProcTable;
  /* this+0x24 */ class std::map<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> > > m_inputProcTable;
}

struct GUILD_REG_POSITION_INFO {
  /* this+0x0 */ int positionID;
  /* this+0x4 */ int right;
  /* this+0x8 */ int ranking;
  /* this+0xc */ int payRate;
  /* this+0x10 */ char[0x18] posName;
}

struct PACKET_ZI_GUILD_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
}

struct PACKET_ZI_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ char[0x18] Name;
  /* this+0x1e */ char[0x18] AccountName;
  /* this+0x36 */ unsigned long AID;
  /* this+0x3a */ unsigned long GID;
  /* this+0x3e */ int answer;
}

class CIGuildSkillDB {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
  /* this+0x14 */ class std::map<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> > > m_getProcTable;
}

struct PACKET_ZI_GUILD_ZENY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ char[0x10] mapName;
  /* this+0x1e */ unsigned char type;
  /* this+0x1f */ int zeny;
}

struct MEMBER_POSITION_INFO {
  /* this+0x0 */ int AID;
  /* this+0x4 */ int GID;
  /* this+0x8 */ int positionID;
}

struct PACKET_IZ_GUILD_MAP_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ char[0x10] mapName;
}

struct std::_Iterator012<std::random_access_iterator_tag,GUILDMINFO *,int,GUILDMINFO * const *,GUILDMINFO * const &,std::_Iterator_base0> {
}

struct std::_Iterator012<std::random_access_iterator_tag,GUILDALLYINFO *,int,GUILDALLYINFO * const *,GUILDALLYINFO * const &,std::_Iterator_base0> {
}

struct std::_Pair_base<int const ,int> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ int second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,int,int,int const *,int const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> > > {
}

class std::_List_unchecked_const_iterator<std::_List_val<int,std::allocator<int> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_List_nod<int,std::allocator<int> >::_Node * _Ptr;
}

struct std::_Iterator012<std::random_access_iterator_tag,GUILDMPOSITION *,int,GUILDMPOSITION * const *,GUILDMPOSITION * const &,std::_Iterator_base0> {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,int>,int,std::pair<int const ,int> const *,std::pair<int const ,int> const &,std::_Iterator_base0> {
}

struct std::_Iterator012<std::random_access_iterator_tag,GUILDBANISHINFO *,int,GUILDBANISHINFO * const *,GUILDBANISHINFO * const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,int,std::less<int>,std::allocator<std::pair<int const ,int> >,0> >::_Node * _Ptr;
}

class std::_List_unchecked_iterator<std::_List_val<int,std::allocator<int> > > {
}

struct PACKET_IZ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long OpponentGDID;
  /* this+0xa */ int Relation;
}

struct PACKET_ZI_GUILD_NOTICE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ char[0x3c] subject;
  /* this+0x42 */ char[0x78] notice;
}

struct PACKET_IZ_UPDATE_CHARSTAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ unsigned long AID;
  /* this+0xe */ int status;
  /* this+0x12 */ short sex;
  /* this+0x14 */ short head;
  /* this+0x16 */ short headPalette;
  /* this+0x18 */ short job;
  /* this+0x1a */ int Level;
}

struct PACKET_IZ_GUILD_ZENY_UPDATE_ALL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long Zeny;
}

struct PACKET_IZ_GUILD_NOTICE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ char[0x3c] subject;
  /* this+0x42 */ char[0x78] notice;
}

struct PACKET_IZ_ACK_BAN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ char[0x18] charName;
  /* this+0x26 */ char[0x18] AccountName;
  /* this+0x3e */ char[0x28] reasonDesc;
}

struct PACKET_IZ_GUILD_MEMBER_ADD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ struct GUILDMINFO Info;
}

struct PACKET_ZI_REGISTER_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
  /* this+0xc */ unsigned long GID;
}

struct PACKET_IZ_GUILD_ZENY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ char[0x10] mapName;
  /* this+0x1e */ unsigned char type;
  /* this+0x1f */ int zeny;
  /* this+0x23 */ unsigned char ret;
}

struct PACKET_ZI_REQ_GUILD_POSITION_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
}

struct PACKET_IZ_GUILD_MPOSITION_TOD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
}

class MyMemoryMgrPtr<GUILDBANISHINFO> {
  /* this+0x0 */ class CMemoryMgr<GUILDBANISHINFO> & m_cpMemoryMgr;
  /* this+0x4 */ struct GUILDBANISHINFO * m_myptr;
}

struct PACKET_IZ_ACK_LEAVE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ char[0x18] charName;
  /* this+0x26 */ char[0x28] reasonDesc;
}

struct PACKET_ZI_REQ_LEAVE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ char[0x28] reasonDesc;
}

struct PACKET_IZ_GUILD_BANISHINFO_TOD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
}

struct PACKET_IZ_GUILD_MEMBERINFO_TOD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
}

struct PACKET_IZ_GET_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
  /* this+0xc */ short emblemVersion;
}

struct PACKET_IZ_ACK_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
}

struct PACKET_IZ_GUILD_NOTIFYSKILLDATA {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ int isForceSend;
  /* this+0xc */ int SkillPoint;
}

struct PACKET_IZ_GUILD_ALLYINFO_TOD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
}

struct PACKET_IZ_GUILDINFO_TOD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ struct GUILDINFO Data;
}

struct PACKET_IZ_FREE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
}

struct PACKET_IZ_REQ_DISORGANIZE_GUILD_RESULT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ int result;
}

struct PACKET_IZ_ADD_EXP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int Exp;
  /* this+0xe */ int MaxUserNum;
}

struct PACKET_IZ_ACK_GUILD_POSITION_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
}

struct PACKET_IZ_UPDATE_CHARGDID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Type;
  /* this+0x3 */ unsigned long GDID;
  /* this+0x7 */ int emblemVer;
  /* this+0xb */ int InterSID;
  /* this+0xf */ unsigned long GID;
  /* this+0x13 */ unsigned long AID;
  /* this+0x17 */ int right;
  /* this+0x1b */ bool isMaster;
  /* this+0x1c */ char[0x18] GuildName;
}

struct PACKET_ZI_ADD_EXP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int Exp;
}

struct PACKET_IZ_ACK_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long ReqAID;
  /* this+0xa */ unsigned long GDID;
  /* this+0xe */ unsigned char answer;
}

struct PACKET_ZI_REQ_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ unsigned long AID;
  /* this+0xc */ unsigned long GID;
}

struct PACKET_ZI_GDSKILL_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GDID;
  /* this+0x8 */ int SkillPoint;
}

struct std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<int const ,char *> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ char * second;
}

struct std::_Pair_base<int,char *> {
  /* this+0x0 */ int first;
  /* this+0x4 */ char * second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,char *>,int,std::pair<int const ,char *> const *,std::pair<int const ,char *> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct PACKET_IZ_ADD_ALLY_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned char answer;
  /* this+0xb */ struct GUILDALLYINFO Ally;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CGuild *>,int,std::pair<unsigned long const ,CGuild *> const *,std::pair<unsigned long const ,CGuild *> const &,std::_Iterator_base0> {
}

struct std::_Pair_base<unsigned long const ,CGuild *> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class CGuild * second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > > {
}

struct PACKET_IZ_ADD_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned char answer;
  /* this+0xb */ struct GUILDALLYINFO Hostile;
}

struct PACKET_IZ_RESULT_MAKE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ unsigned char result;
}

struct PACKET_IZ_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ char[0x18] guildName;
}

class CUserLogDB {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
}

class CUserLogMgr {
  /* this+0x4 */ unsigned long m_LogIdleTime;
}

struct PACKET_IZ_NOTIFY_MAKERRANK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
  /* this+0x4 */ unsigned long[0xa] GID;
  /* this+0x2c */ char[0x18][0xa] charname;
  /* this+0x11c */ int[0xa] point;
}

struct PACKET_IZ_MAIL_REQ_SEND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char Result;
}

struct PACKET_IZ_MAIL_REQ_OPEN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ int MailID;
  /* this+0xc */ char[0x28] Header;
  /* this+0x34 */ char[0x28] ItemInfo;
  /* this+0x5c */ char ItemLen;
  /* this+0x5d */ unsigned long Money;
  /* this+0x61 */ char[0x18] FromName;
  /* this+0x79 */ unsigned long DeleteTime;
}

struct PACKET_IZ_ACK_MAIL_RETURN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long MailID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
  /* this+0xe */ short Result;
  /* this+0x10 */ char[0x28] ItemInfo;
  /* this+0x38 */ char ItemLen;
  /* this+0x39 */ unsigned long Money;
  /* this+0x3d */ char[0x18] FromName;
}

struct MAIL_LIST {
  /* this+0x0 */ unsigned long MailID;
  /* this+0x4 */ char[0x28] HEADER;
  /* this+0x2c */ char isOpen;
  /* this+0x2d */ char[0x18] FromName;
  /* this+0x45 */ long DeleteTime;
}

struct PACKET_IZ_ACK_MAIL_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int MailID;
  /* this+0xe */ unsigned short Result;
}

struct PACKET_IZ_MAIL_REQ_GET_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int MailID;
  /* this+0xa */ char[0x28] ItemInfo;
  /* this+0x32 */ char ItemLen;
  /* this+0x33 */ unsigned long Money;
  /* this+0x37 */ char[0x18] FromName;
}

struct PACKET_IZ_MAIL_RECEIVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long MailID;
  /* this+0xa */ char[0x28] Header;
  /* this+0x32 */ char[0x18] FromName;
}

struct PACKET_IZ_MAIL_REQ_GET_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ int MailNumber;
}

class N2ODBCHandler {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class N2ODBCCtrl & m_vcODBCCtrl;
  /* this+0xc */ void * m_hStmt;
}

struct PACKET_IZ_INSTANTMAP_PLAYER_ENTER3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int mapID;
  /* this+0x6 */ bool bPlayerEnter;
}

struct std::pair<unsigned short const ,N2IDGenerator *> {
  /* this+0x0 */ const unsigned short first;
  /* this+0x4 */ class N2IDGenerator * second;
}

struct std::_Allocator_base<std::pair<unsigned short const ,N2IDGenerator *> > {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned int const ,bool> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node> {
}

struct std::pair<unsigned int,bool> {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ bool second;
}

struct std::pair<unsigned int const ,bool> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ bool second;
}

class std::allocator<std::pair<unsigned int const ,bool> > {
}

class std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> {
  /* this+0x0 */ struct std::less<unsigned int> comp;
}

class std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0>::value_compare {
}

struct std::_Allocator_base<std::pair<unsigned int const ,bool> > {
}

struct std::binary_function<unsigned short,unsigned short,bool> {
}

class std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> {
  /* this+0x0 */ struct std::less<unsigned short> comp;
}

class std::allocator<std::pair<unsigned short const ,N2IDGenerator *> > {
}

struct std::less<unsigned short> {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned short const ,N2IDGenerator *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,N2IDGenerator *> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node> {
}

class std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,N2IDGenerator *> > _Alval;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node> {
}

struct std::allocator<std::pair<unsigned int const ,bool> >::rebind<std::pair<unsigned int const ,bool> > {
}

struct std::allocator<std::pair<unsigned int const ,bool> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node> {
}

struct std::_Allocator_base<unsigned int> {
}

class std::allocator<unsigned int> {
}

struct std::allocator<unsigned int>::rebind<unsigned int> {
}

struct std::allocator<unsigned int>::rebind<unsigned int *> {
}

class std::allocator<unsigned int *> {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,bool> > _Alval;
}

class std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,bool> > _Alval;
}

struct std::_Allocator_base<unsigned int *> {
}

struct std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >::rebind<std::pair<unsigned short const ,N2IDGenerator *> > {
}

struct std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> >::_Node * _Ptr;
}

struct std::pair<unsigned short,N2IDGenerator *> {
  /* this+0x0 */ unsigned short first;
  /* this+0x4 */ class N2IDGenerator * second;
}

class std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0>::value_compare {
}

class std::_Tree<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,bool> > _Alval;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > > > {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > > {
}

class std::_Deque_val<unsigned int,std::allocator<unsigned int> > {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
  /* this+0x4 */ unsigned int * * _Map;
  /* this+0x8 */ unsigned int _Mapsize;
  /* this+0xc */ unsigned int _Myoff;
  /* this+0x10 */ unsigned int _Mysize;
  /* this+0x14 */ class std::allocator<unsigned int> _Alval;
  /* this+0x15 */ class std::allocator<unsigned int *> _Almap;
}

class std::map<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> > > {
  /* this+0x0 */ struct std::less<unsigned int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned int const ,bool> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,N2IDGenerator *> > _Alval;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > > > {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> >,1> > > first;
  /* this+0x4 */ bool second;
}

class std::queue<unsigned int,std::deque<unsigned int,std::allocator<unsigned int> > > {
  /* this+0x0 */ class std::deque<unsigned int,std::allocator<unsigned int> > c;
}

class std::deque<unsigned int,std::allocator<unsigned int> > {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
  /* this+0x4 */ unsigned int * * _Map;
  /* this+0x8 */ unsigned int _Mapsize;
  /* this+0xc */ unsigned int _Myoff;
  /* this+0x10 */ unsigned int _Mysize;
  /* this+0x14 */ class std::allocator<unsigned int> _Alval;
  /* this+0x15 */ class std::allocator<unsigned int *> _Almap;
  }

class std::map<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> > > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,N2IDGenerator *> > _Alval;
}

class N2IDGenerator {
  /* this+0x4 */ const unsigned short m_MinID;
  /* this+0x6 */ const unsigned short m_MaxID;
  /* this+0x8 */ const unsigned short m_GroupID;
  /* this+0xc */ class std::queue<unsigned int,std::deque<unsigned int,std::allocator<unsigned int> > > m_StandbyIDqueue;
  /* this+0x24 */ class std::map<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> > > m_IDContainer;
  /* this+0x34 */ bool m_bOK;
}

struct std::_Pair_base<unsigned long const ,enum CInstantMap::enumSCHEDULE> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ enum CInstantMap::enumSCHEDULE second;
}

struct std::_Pair_base<unsigned long,enum CInstantMap::enumSCHEDULE> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ enum CInstantMap::enumSCHEDULE second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE>,int,std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> const *,std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> const &,std::_Iterator_base0> {
}

class std::_Deque_iterator<unsigned int,std::allocator<unsigned int> > {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
  /* this+0x4 */ struct std::_Iterator_base12 * _Mynextiter;
  /* this+0x8 */ unsigned int _Myoff;
}

class std::_Deque_const_iterator<unsigned int,std::allocator<unsigned int> > {
  /* this+0x0 */ struct std::_Container_proxy * _Myproxy;
  /* this+0x4 */ struct std::_Iterator_base12 * _Mynextiter;
  /* this+0x8 */ unsigned int _Myoff;
}

class std::reverse_iterator<std::_Deque_iterator<unsigned int,std::allocator<unsigned int> > > {
}

class std::reverse_iterator<std::_Deque_const_iterator<unsigned int,std::allocator<unsigned int> > > {
}

class CN3RecycleIDGenerator {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class std::deque<unsigned int,std::allocator<unsigned int> > m_RecycleIDContainer;
  /* this+0x20 */ const unsigned int m_nFirstIDValue;
  /* this+0x24 */ const unsigned int m_nLastIDValue;
  /* this+0x28 */ const unsigned int m_nMinimumObjCnt;
  /* this+0x2c */ unsigned int m_nNextID;
}

struct PACKET_IZ_INSTNATMAP_DESTROY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x10] mapName;
  /* this+0x12 */ int mapID;
}

class N2IDAllocator {
    /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x1c */ bool m_bOK;
  /* this+0x20 */ class std::map<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> > > m_GroupContainer;
}

struct PACKET_IZ_INSTANTMAP_REMOVE3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int ZSID;
  /* this+0x6 */ int mapID;
  /* this+0xa */ char[0x10] mapName;
}

class CInstantMapConfiguration {
    /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ int m_DestroyWaitSecond;
  /* this+0xc */ int m_CreateResponseWaitSecond_fromZSVR;
  /* this+0x10 */ bool m_bOpen;
}

struct PACKET_IZ_INSTANTMAP_ADD3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int ZSID;
  /* this+0x6 */ char[0x10] mapName;
  /* this+0x16 */ int mapID;
  /* this+0x1a */ int mapType;
  /* this+0x1e */ bool bPlayerEnter;
}

class CInstantMapIDGenerator {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class std::deque<unsigned int,std::allocator<unsigned int> > m_RecycleIDContainer;
  /* this+0x20 */ const unsigned int m_nFirstIDValue;
  /* this+0x24 */ const unsigned int m_nLastIDValue;
  /* this+0x28 */ const unsigned int m_nMinimumObjCnt;
  /* this+0x2c */ unsigned int m_nNextID;
  }

struct PACKET_IZ_INSTANTMAP_CREATE_REQ {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned int hRequestN2Obj;
  /* this+0x6 */ char[0x10] mapName;
  /* this+0x16 */ int mapID;
  /* this+0x1a */ int mapType;
}

struct $_TypeDescriptor$_extraBytes_28 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x1c] name;
}

struct std::_Pair_base<unsigned int const ,CInstantMap *> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class CInstantMap * second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
  /* this+0x0 */ bool first;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned int second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> >,0> > > {
}

struct std::_Pair_base<bool,char const *> {
  /* this+0x0 */ bool first;
  /* this+0x4 */ const char * second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > > {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > first;
  /* this+0x4 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,CInstantMap *>,int,std::pair<unsigned int const ,CInstantMap *> const *,std::pair<unsigned int const ,CInstantMap *> const &,std::_Iterator_base0> {
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int> {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned int second;
}

struct std::pair<bool,char const *> {
  /* this+0x0 */ bool first;
  /* this+0x4 */ const char * second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CMemorialDungeon::CPlayer>,int,std::pair<unsigned long const ,CMemorialDungeon::CPlayer> const *,std::pair<unsigned long const ,CMemorialDungeon::CPlayer> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> >::_Node * _Ptr;
}

struct std::_Pair_base<bool,CMemorialDungeonConfig::lcMDConfigData> {
  /* this+0x0 */ bool first;
  /* this+0x4 */ class CMemorialDungeonConfig::lcMDConfigData second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > > {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned long const ,CMemorialDungeon::CPlayer> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ class CMemorialDungeon::CPlayer second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ enum CMemorialDungeon::enumSCHEDULE second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE>,int,std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> const *,std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> const &,std::_Iterator_base0> {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> >,1> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ struct CMemorialDungeon::tagInstantMapInfo second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> >,0> > > {
}

class CMemorialDungeonDBLog {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ bool m_bOK;
  /* this+0xc */ const enum CMemorialDungeonDBLog::enumTYPE m_Type;
  /* this+0x10 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_MemorialDungeonName;
  /* this+0x2c */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_PartyName;
  /* this+0x48 */ const int m_PartyID;
  /* this+0x4c */ const int m_CreateZSID;
}

class CMemorialDungeonDBLogMgr {
    /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class N2ODBCCtrl m_ODBCCtrl;
}

class CMemorialDungeonFactorGenerator {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class std::deque<unsigned int,std::allocator<unsigned int> > m_RecycleIDContainer;
  /* this+0x20 */ const unsigned int m_nFirstIDValue;
  /* this+0x24 */ const unsigned int m_nLastIDValue;
  /* this+0x28 */ const unsigned int m_nMinimumObjCnt;
  /* this+0x2c */ unsigned int m_nNextID;
  }

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon> {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ class CMemorialDungeonConfiguration::LCMemorialDungeon second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ class CMemorialDungeonConfiguration::LCMemorialDungeon second;
}

struct std::_Iterator012<std::random_access_iterator_tag,CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap,int,CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap const *,CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap const &,std::_Iterator_base0> {
}

class N2DBLogMgr {
    /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class std::vector<N2DBLogThread *,std::allocator<N2DBLogThread *> > m_ThreadContainer;
  /* this+0x18 */ class N2DBLogRequestQueue m_RequestQueue;
}

class std::vector<N2DBLogThread *,std::allocator<N2DBLogThread *> > {
  /* this+0x0 */ class N2DBLogThread * * _Myfirst;
  /* this+0x4 */ class N2DBLogThread * * _Mylast;
  /* this+0x8 */ class N2DBLogThread * * _Myend;
  /* this+0xc */ class std::allocator<N2DBLogThread *> _Alval;
}

class std::_Vector_iterator<std::_Vector_val<N2DBLogThread *,std::allocator<N2DBLogThread *> > > {
  /* this+0x0 */ class N2DBLogThread * * _Ptr;
}

class N2DBLogRequestQueue {
  /* this+0x4 */ class std::list<N2DBLog *,std::allocator<N2DBLog *> > m_Container;
  /* this+0x10 */ bool m_bOK;
  /* this+0x14 */ void * m_hSemaphore;
  /* this+0x18 */ struct _RTL_CRITICAL_SECTION m_CS;
}

struct std::_Allocator_base<N2DBLog *> {
}

class std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> > {
  /* this+0x0 */ struct std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<N2DBLog *> _Alval;
}

struct std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node {
  /* this+0x0 */ struct std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node * _Next;
  /* this+0x4 */ struct std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node * _Prev;
  /* this+0x8 */ class N2DBLog * _Myval;
}

class std::allocator<N2DBLog *> {
}

class std::_List_val<N2DBLog *,std::allocator<N2DBLog *> > {
  /* this+0x0 */ struct std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<N2DBLog *> _Alval;
}

class N2DBLogThread {
  /* this+0x4 */ unsigned long m_ThreadID;
  /* this+0x8 */ bool m_bOK;
  /* this+0xc */ enum N2Thread::enumState m_State;
  /* this+0x10 */ void * m_hThread;
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
  /* this+0x34 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x4c */ class std::list<int,std::allocator<int> > m_Container;
  /* this+0x58 */ bool m_bOK;
  /* this+0x5c */ bool m_bOK;
  /* this+0x60 */ class N2ODBCCtrl m_ODBCCtrl;
  /* this+0x74 */ class N2DBLogRequestQueue * m_cpRequestQueue;
  /* this+0x78 */ void * m_hMessageSemaphore;
  /* this+0x7c */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_ConnectStr;
}

struct std::_Allocator_base<N2DBLogThread *> {
}

struct std::_Allocator_base<std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node> {
}

class std::allocator<N2DBLogThread *> {
}

struct std::allocator<N2DBLogThread *>::rebind<N2DBLogThread *> {
}

struct std::allocator<N2DBLog *>::rebind<N2DBLog *> {
}

struct std::allocator<N2DBLog *>::rebind<std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node> {
}

class std::allocator<std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node> {
}

class std::list<N2DBLog *,std::allocator<N2DBLog *> > {
  /* this+0x0 */ struct std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node * _Myhead;
  /* this+0x4 */ unsigned int _Mysize;
  /* this+0x8 */ class std::allocator<std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node> _Alnod;
  /* this+0x9 */ class std::allocator<N2DBLog *> _Alval;
}

class std::_List_const_iterator<std::_List_val<N2DBLog *,std::allocator<N2DBLog *> > > {
  /* this+0x0 */ struct std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node * _Ptr;
}

class std::_List_iterator<std::_List_val<N2DBLog *,std::allocator<N2DBLog *> > > {
  /* this+0x0 */ struct std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_List_iterator<std::_List_val<N2DBLog *,std::allocator<N2DBLog *> > > > {
}

class std::reverse_iterator<std::_List_const_iterator<std::_List_val<N2DBLog *,std::allocator<N2DBLog *> > > > {
}

class std::_Vector_val<N2DBLogThread *,std::allocator<N2DBLogThread *> > {
  /* this+0x0 */ class N2DBLogThread * * _Myfirst;
  /* this+0x4 */ class N2DBLogThread * * _Mylast;
  /* this+0x8 */ class N2DBLogThread * * _Myend;
  /* this+0xc */ class std::allocator<N2DBLogThread *> _Alval;
}

class std::_Vector_const_iterator<std::_Vector_val<N2DBLogThread *,std::allocator<N2DBLogThread *> > > {
  /* this+0x0 */ class N2DBLogThread * * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<N2DBLogThread *,std::allocator<N2DBLogThread *> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<N2DBLogThread *,std::allocator<N2DBLogThread *> > > > {
}

class N2Thread {
  /* this+0x4 */ unsigned long m_ThreadID;
  /* this+0x8 */ bool m_bOK;
  /* this+0xc */ enum N2Thread::enumState m_State;
  /* this+0x10 */ void * m_hThread;
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
}

class N2MessageQueue<int> {
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x1c */ class std::list<int,std::allocator<int> > m_Container;
  /* this+0x28 */ bool m_bOK;
}

struct PACKET_IZ_MEMORIALDUNGEON_SYNC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3d] MemorialDungeonName;
  /* this+0x3f */ unsigned long hPartyID;
  /* this+0x43 */ char[0x18] partyName;
  /* this+0x5b */ unsigned long ExistZSID;
  /* this+0x5f */ unsigned long hMemorialDungeonID;
  /* this+0x63 */ int Factor;
  /* this+0x67 */ enum PACKET_IZ_MEMORIALDUNGEON_SYNC::enumEVENT Event;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned long,unsigned long> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ unsigned long second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned int,unsigned long> {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ unsigned long second;
}

struct std::_Pair_base<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject second;
}

struct PACKET_IZ_MEMORIALDUNGEON_INFO2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ unsigned long AID;
  /* this+0xc */ unsigned long DestroyDate;
  /* this+0x10 */ unsigned long EnterTimeOutDate;
}

struct PACKET_IZ_MEMORIALDUNGEON_NOTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ enum PACKET_ZC_MEMORIALDUNGEON_NOTIFY::enumTYPE Type;
  /* this+0xe */ unsigned long EnterLimitDate;
}

struct PACKET_IZ_MEMORIALDUNGEON_SYNC2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long hPartyID;
  /* this+0x8 */ char[0x18] partyName;
  /* this+0x20 */ unsigned long ExistZSID;
  /* this+0x24 */ unsigned long hMemorialDungeonID;
  /* this+0x28 */ int Factor;
  /* this+0x2c */ enum PACKET_IZ_MEMORIALDUNGEON_SYNC2::enumEVENT Event;
}

struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ char[0x3d] MemorialDungeonName;
  /* this+0x47 */ short PriorityOrderNum;
}

struct PACKET_IZ_MEMORIALDUNGEON_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ char[0x3d] MemorialDungeonName;
  /* this+0x47 */ unsigned long DestroyDate;
  /* this+0x4b */ unsigned long EnterTimeOutDate;
}

struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_INFO2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ unsigned long AID;
  /* this+0xc */ short PriorityOrderNum;
}

struct PACKET_IZ_MEMORIALDUNGEON_COMMAND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ enum PACKET_IZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command;
}

struct PACKET_IZ_MEMORIALDUNGEON_VISA {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long ZSID;
  /* this+0xe */ char[0x10] mapName;
  /* this+0x1e */ int x;
  /* this+0x22 */ int y;
}

struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_NOTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ short PriorityOrderNum;
}

class CMAPStatisticLog {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ long m_Date;
  /* this+0xc */ const int m_ZSID;
  /* this+0x10 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > m_MapInfoContainer;
}

class CStatisticsMgr {
    /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class CDateTime m_LogOutputEvnetDT;
  /* this+0xc */ int m_ReportPerMinute;
}

class CZSVRStatisticLog {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ const long m_Date;
  /* this+0xc */ const int m_ZSID;
  /* this+0x10 */ const int m_PlayerNum;
  /* this+0x14 */ const int m_NPCNum;
  /* this+0x18 */ const int m_MemoryKBytes;
  /* this+0x1c */ const int m_TotalServiceMapNum;
  /* this+0x20 */ const int m_ServiceInstantMapNum;
}

class NEO_PACKAGEITEM::CNeoPackageItem {
  /* this+0x0 */ class NEO_PACKAGEITEM::CPseudoRandom m_Random2;
  /* this+0x4 */ bool m_bCreateInstance;
    /* this+0x8 */ class std::map<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> > > m_PackageList;
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned short const ,CITP *> _Myval;
  /* this+0x14 */ char _Color;
  /* this+0x15 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node> {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned short const ,unsigned short> _Myval;
  /* this+0x10 */ char _Color;
  /* this+0x11 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node> {
}

class std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> {
  /* this+0x0 */ struct std::less<unsigned short> comp;
}

class std::allocator<std::pair<unsigned short const ,CITP *> > {
}

struct std::pair<unsigned short const ,CITP *> {
  /* this+0x0 */ const unsigned short first;
  /* this+0x4 */ class CITP * second;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,CITP *> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node> {
}

struct std::pair<unsigned short,CITP *> {
  /* this+0x0 */ unsigned short first;
  /* this+0x4 */ class CITP * second;
}

class std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0>::value_compare {
}

struct std::pair<unsigned short const ,unsigned short> {
  /* this+0x0 */ const unsigned short first;
  /* this+0x2 */ unsigned short second;
}

struct std::_Allocator_base<std::pair<unsigned short const ,unsigned short> > {
}

class std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,CITP *> > _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned long second;
}

struct std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > {
}

class std::_Tree<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,CITP *> > _Alval;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > > > {
}

class std::allocator<std::pair<unsigned short const ,unsigned short> > {
}

struct std::allocator<std::pair<unsigned short const ,unsigned short> >::rebind<std::pair<unsigned short const ,unsigned short> > {
}

struct std::allocator<std::pair<unsigned short const ,unsigned short> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node> {
}

class std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,unsigned short> > _Alval;
}

class std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,unsigned short> > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,unsigned short> > _Alval;
}

struct std::pair<unsigned short,unsigned short> {
}

class std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > >,bool> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > > > {
}

struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > _Myval;
  /* this+0x20 */ char _Color;
  /* this+0x21 */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node> {
}

struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> _Myval;
  /* this+0x2c */ char _Color;
  /* this+0x2d */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node> {
}

class std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> {
  /* this+0x0 */ struct std::less<unsigned short> comp;
}

struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> _Myval;
  /* this+0x2c */ char _Color;
  /* this+0x2d */ char _Isnil;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node> {
}

class std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> > _Alval;
}

class std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> > {
}

struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,NEO_PACKAGEITEM::Package> _Myval;
  /* this+0x28 */ char _Color;
  /* this+0x29 */ char _Isnil;
}

struct std::pair<int const ,NEO_PACKAGEITEM::Package> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct NEO_PACKAGEITEM::Package second;
}

class std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> > _Alval;
}

class std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node> {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node> {
}

struct std::pair<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> > > {
  /* this+0x0 */ unsigned short first;
  /* this+0x4 */ class std::vector<unsigned short,std::allocator<unsigned short> > second;
}

struct std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > {
  /* this+0x0 */ const unsigned short first;
  /* this+0x4 */ class std::vector<unsigned short,std::allocator<unsigned short> > second;
}

class std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > {
}

class std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> {
  /* this+0x0 */ struct std::less<unsigned short> comp;
}

class std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0>::value_compare {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Ptr;
}

struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> _Myval;
  /* this+0x44 */ char _Color;
  /* this+0x45 */ char _Isnil;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ class NEO_PACKAGEITEM::Box second;
}

class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > _Alval;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > > {
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ class NEO_PACKAGEITEM::Box second;
}

class NEO_PACKAGEITEM::Box {
  /* this+0x0 */ const unsigned int BoxID;
  /* this+0x4 */ int Gift_Number;
  /* this+0x8 */ int MaxRandomRate;
  /* this+0xc */ class std::vector<NEO_PACKAGEITEM::InItem,std::allocator<NEO_PACKAGEITEM::InItem> > ItemList;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node * _Ptr;
}

struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node * _Right;
  /* this+0xc */ int _Myval;
  /* this+0x10 */ char _Color;
  /* this+0x11 */ char _Isnil;
}

class std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::`anonymous-namespace'::Randomcmp comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<int> _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned short second;
}

struct std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Ptr;
}

class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > _Alval;
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > {
}

class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > _Alval;
}

struct std::_Allocator_base<std::pair<unsigned short const ,CITP *> > {
}

class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > _Alval;
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > _Alval;
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0>::value_compare {
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > > > {
}

class std::_Vector_val<NEO_PACKAGEITEM::InItem,std::allocator<NEO_PACKAGEITEM::InItem> > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::InItem * _Myfirst;
  /* this+0x4 */ struct NEO_PACKAGEITEM::InItem * _Mylast;
  /* this+0x8 */ struct NEO_PACKAGEITEM::InItem * _Myend;
  /* this+0xc */ class std::allocator<NEO_PACKAGEITEM::InItem> _Alval;
}

class std::vector<NEO_PACKAGEITEM::InItem,std::allocator<NEO_PACKAGEITEM::InItem> > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::InItem * _Myfirst;
  /* this+0x4 */ struct NEO_PACKAGEITEM::InItem * _Mylast;
  /* this+0x8 */ struct NEO_PACKAGEITEM::InItem * _Myend;
  /* this+0xc */ class std::allocator<NEO_PACKAGEITEM::InItem> _Alval;
}

class std::allocator<NEO_PACKAGEITEM::InItem> {
}

struct NEO_PACKAGEITEM::InItem {
  /* this+0x0 */ int ITID;
  /* this+0x4 */ int Cnt;
  /* this+0x8 */ int HireHour;
  /* this+0xc */ bool bBroadcasting;
  /* this+0xd */ bool bGUID;
  /* this+0x10 */ int Rndrate;
  /* this+0x14 */ int Gift_Number;
}

class std::_Vector_iterator<std::_Vector_val<NEO_PACKAGEITEM::InItem,std::allocator<NEO_PACKAGEITEM::InItem> > > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::InItem * _Ptr;
}

class std::_Vector_const_iterator<std::_Vector_val<NEO_PACKAGEITEM::InItem,std::allocator<NEO_PACKAGEITEM::InItem> > > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::InItem * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<NEO_PACKAGEITEM::InItem,std::allocator<NEO_PACKAGEITEM::InItem> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<NEO_PACKAGEITEM::InItem,std::allocator<NEO_PACKAGEITEM::InItem> > > > {
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box> {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > > > {
}

struct std::pair<int,NEO_PACKAGEITEM::Package> {
}

class std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0>::value_compare {
}

struct std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::allocator<std::pair<unsigned short const ,CITP *> >::rebind<std::pair<unsigned short const ,CITP *> > {
}

struct std::allocator<std::pair<unsigned short const ,CITP *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node> {
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::_Tree<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::`anonymous-namespace'::Randomcmp comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<int> _Alval;
}

class std::set<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int> > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::`anonymous-namespace'::Randomcmp comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<int> _Alval;
}

struct NEO_PACKAGEITEM::`anonymous-namespace'::Randomcmp {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > > > {
}

class std::_Tree<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> > _Alval;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > > > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node> {
}

struct std::allocator<int>::rebind<std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node> {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<NEO_PACKAGEITEM::InItem *,NEO_PACKAGEITEM::InItem *> {
  /* this+0x0 */ struct NEO_PACKAGEITEM::InItem * first;
  /* this+0x4 */ struct NEO_PACKAGEITEM::InItem * second;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node> {
}

struct std::_Allocator_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long> {
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > > > {
}

class std::map<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> > > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,CITP *> > _Alval;
}

class CITP {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
}

class std::map<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> > _Alval;
}

struct NEO_PACKAGEITEM::Package {
  /* this+0x0 */ int nGetMaxCount;
  /* this+0x4 */ int nTotalWeight;
  /* this+0x8 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > > BoxList;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node> {
}

struct std::pair<NEO_PACKAGEITEM::InItem *,NEO_PACKAGEITEM::InItem *> {
  /* this+0x0 */ struct NEO_PACKAGEITEM::InItem * first;
  /* this+0x4 */ struct NEO_PACKAGEITEM::InItem * second;
}

struct std::_Allocator_base<NEO_PACKAGEITEM::InItem> {
}

struct std::allocator<NEO_PACKAGEITEM::InItem>::rebind<NEO_PACKAGEITEM::InItem> {
}

class std::_Vector_const_iterator<std::_Vector_val<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::ProvideItem * _Ptr;
}

class std::_Vector_iterator<std::_Vector_val<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::ProvideItem * _Ptr;
}

struct NEO_PACKAGEITEM::ProvideItem {
  /* this+0x0 */ int ITID;
  /* this+0x4 */ int Cnt;
  /* this+0x8 */ int HireHour;
  /* this+0xc */ bool bBroadcasting;
  /* this+0xd */ bool bGUID;
  /* this+0x10 */ unsigned int BoxID;
}

class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,unsigned short> > _Alval;
}

struct std::_Iterator012<std::random_access_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base0> {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,NEO_PACKAGEITEM::Package>,int,std::pair<int const ,NEO_PACKAGEITEM::Package> const *,std::pair<int const ,NEO_PACKAGEITEM::Package> const &,std::_Iterator_base0> {
}

class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > _Alval;
}

class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > {
}

class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > _Alval;
}

class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

class std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Myfirst;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Mylast;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Myend;
  /* this+0xc */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Alval;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > > {
}

class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > _Alval;
}

class std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Myfirst;
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Mylast;
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Myend;
  /* this+0xc */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Alval;
}

class std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Ptr;
}

class std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > * _Ptr;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > {
}

class std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> {
  /* this+0x0 */ struct NEO_PACKAGEITEM::`anonymous-namespace'::Randomcmp comp;
}

class std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::`anonymous-namespace'::Randomcmp comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<int> _Alval;
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> > > > {
}

class std::tr1::_Ptr_base<NEO_PACKAGEITEM::CNeoPackageItem_Lua> {
  /* this+0x0 */ class NEO_PACKAGEITEM::CNeoPackageItem_Lua * _Ptr;
  /* this+0x4 */ class std::tr1::_Ref_count_base * _Rep;
}

class std::tr1::shared_ptr<NEO_PACKAGEITEM::CNeoPackageItem_Lua> {
  /* this+0x0 */ class NEO_PACKAGEITEM::CNeoPackageItem_Lua * _Ptr;
  /* this+0x4 */ class std::tr1::_Ref_count_base * _Rep;
}

class NEO_PACKAGEITEM::CNeoPackageItem_Lua {
}

class std::tr1::_Ref_count<NEO_PACKAGEITEM::CNeoPackageItem_Lua> {
  /* this+0x4 */ long _Uses;
  /* this+0x8 */ long _Weaks;
  /* this+0xc */ class NEO_PACKAGEITEM::CNeoPackageItem_Lua * _Ptr;
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

class std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > _Alval;
}

class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > _Alval;
}

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short> {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned short second;
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > > > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node> {
}

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

struct std::_Allocator_base<std::pair<int const ,NEO_PACKAGEITEM::Package> > {
}

struct std::_Iterator012<std::random_access_iterator_tag,NEO_PACKAGEITEM::ProvideItem,int,NEO_PACKAGEITEM::ProvideItem const *,NEO_PACKAGEITEM::ProvideItem const &,std::_Iterator_base0> {
}

class std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > _Alval;
}

class std::_Tree<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > _Alval;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > > > {
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > _Alval;
}

struct std::_Allocator_base<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > {
}

struct std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node> {
}

struct std::_Pair_base<int const ,NEO_PACKAGEITEM::Package> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct NEO_PACKAGEITEM::Package second;
}

class std::allocator<NEO_PACKAGEITEM::ProvideItem> {
}

class std::_Vector_val<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::ProvideItem * _Myfirst;
  /* this+0x4 */ struct NEO_PACKAGEITEM::ProvideItem * _Mylast;
  /* this+0x8 */ struct NEO_PACKAGEITEM::ProvideItem * _Myend;
  /* this+0xc */ class std::allocator<NEO_PACKAGEITEM::ProvideItem> _Alval;
}

struct std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >::rebind<std::pair<int const ,NEO_PACKAGEITEM::Package> > {
}

struct std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> >,0> >::_Node> {
}

struct std::_Iterator012<std::random_access_iterator_tag,NEO_PACKAGEITEM::InItem,int,NEO_PACKAGEITEM::InItem const *,NEO_PACKAGEITEM::InItem const &,std::_Iterator_base0> {
}

struct std::_Allocator_base<NEO_PACKAGEITEM::ProvideItem> {
}

struct std::allocator<NEO_PACKAGEITEM::ProvideItem>::rebind<NEO_PACKAGEITEM::ProvideItem> {
}

class std::map<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > _Alval;
}

class std::vector<unsigned short,std::allocator<unsigned short> > {
  /* this+0x0 */ unsigned short * _Myfirst;
  /* this+0x4 */ unsigned short * _Mylast;
  /* this+0x8 */ unsigned short * _Myend;
  /* this+0xc */ class std::allocator<unsigned short> _Alval;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tset_traits<int,NEO_PACKAGEITEM::`anonymous namespace'::Randomcmp,std::allocator<int>,0> >::_Node> {
}

struct std::_Allocator_base<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > {
}

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > _Alval;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> >,0> >::_Node> {
}

struct std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::rebind<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > {
  /* this+0x0 */ struct NEO_PACKAGEITEM::ProvideItem * _Myfirst;
  /* this+0x4 */ struct NEO_PACKAGEITEM::ProvideItem * _Mylast;
  /* this+0x8 */ struct NEO_PACKAGEITEM::ProvideItem * _Myend;
  /* this+0xc */ class std::allocator<NEO_PACKAGEITEM::ProvideItem> _Alval;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > > > {
}

struct std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >::rebind<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > {
}

struct std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node> {
}

struct $_TypeDescriptor$_extraBytes_11 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0xb] name;
}

class CITPThrow {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_ATK;
  /* this+0x48 */ int m_property;
}

class CITPCashPointItem {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ unsigned short m_ChangeItemID;
  /* this+0x48 */ int m_Count;
}

class CITPArmor {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_defencePower;
  /* this+0x48 */ int m_maxSlot;
  /* this+0x4c */ int m_str;
  /* this+0x50 */ int m_int;
  /* this+0x54 */ int m_vit;
  /* this+0x58 */ int m_dex;
  /* this+0x5c */ int m_agi;
  /* this+0x60 */ int m_luk;
  /* this+0x64 */ int m_mdef;
  /* this+0x68 */ int m_maxHp;
  /* this+0x6c */ int m_effect;
  /* this+0x70 */ int m_maxSp;
  /* this+0x74 */ int m_sex;
  /* this+0x78 */ short m_class;
}

class CITPCannonball {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_ATK;
  /* this+0x48 */ int m_property;
}

class CITPWeapon {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_ATK;
  /* this+0x48 */ short m_MATK;
  /* this+0x4c */ int m_AR;
  /* this+0x50 */ int m_maxSlot;
  /* this+0x54 */ int m_str;
  /* this+0x58 */ int m_int;
  /* this+0x5c */ int m_vit;
  /* this+0x60 */ int m_dex;
  /* this+0x64 */ int m_agi;
  /* this+0x68 */ int m_luk;
  /* this+0x6c */ int m_effect;
  /* this+0x70 */ int m_sex;
  /* this+0x74 */ int m_level;
  /* this+0x78 */ short m_class;
  /* this+0x7c */ int m_property;
}

class CITPAmmo {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_ATK;
  /* this+0x48 */ int m_property;
}

class CITPMgr {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
  /* this+0x14 */ class std::map<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> > > m_itp;
  /* this+0x24 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > > m_itemName;
  /* this+0x34 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > > m_effect;
  /* this+0x44 */ class std::map<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > > m_combiItem;
  /* this+0x54 */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > > m_scrollItem;
}

class CITPGun {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_ATK;
  /* this+0x48 */ int m_AR;
  /* this+0x4c */ int m_maxSlot;
  /* this+0x50 */ int m_str;
  /* this+0x54 */ int m_int;
  /* this+0x58 */ int m_vit;
  /* this+0x5c */ int m_dex;
  /* this+0x60 */ int m_agi;
  /* this+0x64 */ int m_luk;
  /* this+0x68 */ int m_effect;
  /* this+0x6c */ int m_sex;
  /* this+0x70 */ int m_level;
  /* this+0x74 */ short m_class;
  /* this+0x78 */ int m_property;
}

class CITPArrow {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_ATK;
  /* this+0x48 */ int m_property;
}

class CITPCard {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ unsigned long m_effect;
  /* this+0x48 */ int m_property;
  /* this+0x4c */ int m_class;
  /* this+0x50 */ int m_compositionType;
  /* this+0x54 */ int m_compositionPos;
}

struct NEO_PACKAGEITEM::BaseItem {
  /* this+0x0 */ int ITID;
  /* this+0x4 */ int Cnt;
  /* this+0x8 */ int HireHour;
  /* this+0xc */ bool bBroadcasting;
  /* this+0xd */ bool bGUID;
}

class NEO_PACKAGEITEM::CPseudoRandom {
  /* this+0x0 */ unsigned long m_seed;
}

class CITPBothhand {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_ATK;
  /* this+0x48 */ short m_MATK;
  /* this+0x4c */ int m_AR;
  /* this+0x50 */ int m_maxSlot;
  /* this+0x54 */ int m_str;
  /* this+0x58 */ int m_int;
  /* this+0x5c */ int m_vit;
  /* this+0x60 */ int m_dex;
  /* this+0x64 */ int m_agi;
  /* this+0x68 */ int m_luk;
  /* this+0x6c */ int m_effect;
  /* this+0x70 */ int m_sex;
  /* this+0x74 */ int m_level;
  /* this+0x78 */ short m_class;
  /* this+0x7c */ int m_property;
}

class CITPBow {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_ATK;
  /* this+0x48 */ int m_AR;
  /* this+0x4c */ int m_maxSlot;
  /* this+0x50 */ int m_str;
  /* this+0x54 */ int m_int;
  /* this+0x58 */ int m_vit;
  /* this+0x5c */ int m_dex;
  /* this+0x60 */ int m_agi;
  /* this+0x64 */ int m_luk;
  /* this+0x68 */ int m_effect;
  /* this+0x6c */ int m_sex;
  /* this+0x70 */ int m_level;
  /* this+0x74 */ short m_class;
  /* this+0x78 */ int m_property;
}

class `anonymous-namespace'::CBoxIDGernator {
  /* this+0x0 */ unsigned int m_BoxID;
}

class CITPQuest {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
}

class CITPArmorTM {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_defencePower;
  /* this+0x48 */ int m_maxSlot;
  /* this+0x4c */ int m_str;
  /* this+0x50 */ int m_int;
  /* this+0x54 */ int m_vit;
  /* this+0x58 */ int m_dex;
  /* this+0x5c */ int m_agi;
  /* this+0x60 */ int m_luk;
  /* this+0x64 */ int m_mdef;
  /* this+0x68 */ int m_maxHp;
  /* this+0x6c */ int m_effect;
  /* this+0x70 */ int m_maxSp;
  /* this+0x74 */ int m_sex;
  /* this+0x78 */ short m_class;
}

class CITPArmorTMB {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_defencePower;
  /* this+0x48 */ int m_maxSlot;
  /* this+0x4c */ int m_str;
  /* this+0x50 */ int m_int;
  /* this+0x54 */ int m_vit;
  /* this+0x58 */ int m_dex;
  /* this+0x5c */ int m_agi;
  /* this+0x60 */ int m_luk;
  /* this+0x64 */ int m_mdef;
  /* this+0x68 */ int m_maxHp;
  /* this+0x6c */ int m_effect;
  /* this+0x70 */ int m_maxSp;
  /* this+0x74 */ int m_sex;
  /* this+0x78 */ short m_class;
}

class CITPHeal {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_minHp;
  /* this+0x48 */ int m_maxHp;
  /* this+0x4c */ int m_minSp;
  /* this+0x50 */ int m_maxSp;
  /* this+0x54 */ int m_abuse_gause;
  /* this+0x58 */ int m_states;
}

class CITPSpecial {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ unsigned long m_effect;
}

class CITPEvent {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
}

class CITPArmorTB {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_defencePower;
  /* this+0x48 */ int m_maxSlot;
  /* this+0x4c */ int m_str;
  /* this+0x50 */ int m_int;
  /* this+0x54 */ int m_vit;
  /* this+0x58 */ int m_dex;
  /* this+0x5c */ int m_agi;
  /* this+0x60 */ int m_luk;
  /* this+0x64 */ int m_mdef;
  /* this+0x68 */ int m_maxHp;
  /* this+0x6c */ int m_effect;
  /* this+0x70 */ int m_maxSp;
  /* this+0x74 */ int m_sex;
  /* this+0x78 */ short m_class;
}

class CITPArmorMB {
  /* this+0x4 */ unsigned short m_ITID;
  /* this+0x8 */ int m_weight;
  /* this+0xc */ int m_price;
  /* this+0x10 */ int m_location;
  /* this+0x14 */ char[0x18] m_name;
  /* this+0x2c */ int m_isRefinable;
  /* this+0x30 */ int m_isDamagable;
  /* this+0x34 */ int m_isMovable;
  /* this+0x38 */ unsigned long m_availableJob;
  /* this+0x3c */ bool m_bCashItem;
  /* this+0x3d */ bool m_isUseEvent;
  /* this+0x3e */ bool m_isBindOnEquip;
  /* this+0x40 */ short m_minLevel;
  /* this+0x42 */ short m_maxLevel;
  /* this+0x44 */ int m_defencePower;
  /* this+0x48 */ int m_maxSlot;
  /* this+0x4c */ int m_str;
  /* this+0x50 */ int m_int;
  /* this+0x54 */ int m_vit;
  /* this+0x58 */ int m_dex;
  /* this+0x5c */ int m_agi;
  /* this+0x60 */ int m_luk;
  /* this+0x64 */ int m_mdef;
  /* this+0x68 */ int m_maxHp;
  /* this+0x6c */ int m_effect;
  /* this+0x70 */ int m_maxSp;
  /* this+0x74 */ int m_sex;
  /* this+0x78 */ short m_class;
}

class CBuyingStoreItemList {
  /* this+0x0 */ class std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > m_BuyingStoreItemList;
}

class std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<unsigned short> _Alval;
}

struct std::_Iterator012<std::random_access_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base0> {
}

class std::_Vector_const_iterator<std::_Vector_val<unsigned short,std::allocator<unsigned short> > > {
  /* this+0x0 */ unsigned short * _Ptr;
}

struct std::_Pair_base<unsigned short const ,CITP *> {
  /* this+0x0 */ const unsigned short first;
  /* this+0x4 */ class CITP * second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node * _Ptr;
}

struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node * _Right;
  /* this+0xc */ unsigned short _Myval;
  /* this+0xe */ char _Color;
  /* this+0xf */ char _Isnil;
}

class std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<unsigned short> _Alval;
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short> {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned short second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> >::_Node * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,unsigned short,int,unsigned short const *,unsigned short const &,std::_Iterator_base0> {
}

class std::allocator<unsigned short> {
}

class std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> {
  /* this+0x0 */ struct std::less<unsigned short> comp;
}

struct std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<unsigned short> _Alval;
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > > > {
}

class std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > {
  /* this+0x0 */ struct std::less<unsigned short> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<unsigned short> _Alval;
}

struct std::_Pair_base<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> > > {
  /* this+0x0 */ unsigned short first;
  /* this+0x4 */ class std::vector<unsigned short,std::allocator<unsigned short> > second;
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned short second;
}

class std::_Vector_iterator<std::_Vector_val<unsigned short,std::allocator<unsigned short> > > {
  /* this+0x0 */ unsigned short * _Ptr;
}

struct std::_Pair_base<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > {
  /* this+0x0 */ const unsigned short first;
  /* this+0x4 */ class std::vector<unsigned short,std::allocator<unsigned short> > second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned short,CITP *> {
  /* this+0x0 */ unsigned short first;
  /* this+0x4 */ class CITP * second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> > > {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> >::_Node * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned short const ,unsigned short>,int,std::pair<unsigned short const ,unsigned short> const *,std::pair<unsigned short const ,unsigned short> const &,std::_Iterator_base0> {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node> {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned short const ,CITP *>,int,std::pair<unsigned short const ,CITP *> const *,std::pair<unsigned short const ,CITP *> const &,std::_Iterator_base0> {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::allocator<std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node> {
}

struct std::tr1::_Get<0,std::tr1::_Cons_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > {
}

struct std::tr1::_Get<1,std::tr1::_Cons_node<CITPArmor *,std::tr1::_Cons_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > {
}

struct std::tr1::_Cons_node<CITPArmor *,std::tr1::_Cons_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > {
  /* this+0x0 */ class CITPArmor * _Value;
  /* this+0x4 */ struct std::tr1::_Cons_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > _Tail;
}

struct std::tr1::_Cons_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Value;
  /* this+0x1c */ struct std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> _Tail;
}

struct std::tr1::_Not_nil<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

struct std::tr1::_Not_nil<CITPArmor *> {
}

struct std::tr1::_Get<0,std::tr1::_Cons_node<CITPArmor *,std::tr1::_Cons_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > > {
}

class std::tr1::tuple<CITPArmor *,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> {
  /* this+0x0 */ struct std::tr1::_Cons_node<CITPArmor *,std::tr1::_Cons_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> > > _Impl;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> >,0> > > {
}

struct std::_Allocator_base<unsigned short> {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> const &,std::_Iterator_base0> {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> > > {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> >,0> > > {
}

class std::_Vector_val<unsigned short,std::allocator<unsigned short> > {
  /* this+0x0 */ unsigned short * _Myfirst;
  /* this+0x4 */ unsigned short * _Mylast;
  /* this+0x8 */ unsigned short * _Myend;
  /* this+0xc */ class std::allocator<unsigned short> _Alval;
}

class std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<unsigned short,std::allocator<unsigned short> > > > {
}

class std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<unsigned short,std::allocator<unsigned short> > > > {
}

struct std::_Pair_base<unsigned short const ,unsigned short> {
  /* this+0x0 */ const unsigned short first;
  /* this+0x2 */ unsigned short second;
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> > > > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > >,int,std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > const *,std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > const &,std::_Iterator_base0> {
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ unsigned long second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> >,0> >::_Node * _Ptr;
}

struct std::allocator<unsigned short>::rebind<unsigned short> {
}

struct std::allocator<unsigned short>::rebind<std::_Tree_nod<std::_Tset_traits<unsigned short,std::less<unsigned short>,std::allocator<unsigned short>,0> >::_Node> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> >,0> > > {
}

class CItemListV2 {
  /* this+0x0 */ class std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > m_ItemList;
}

class `anonymous-namespace'::CAutoLuaClose {
  /* this+0x0 */ struct lua_State * m_L;
}

class `anonymous-namespace'::lcDBHandler {
  /* this+0x0 */ void * m_hstmt;
  /* this+0x4 */ bool m_bOK;
}

class InventoryItem {
  /* this+0x4 */ unsigned short m_ID;
}

class CItemList {
  /* this+0x0 */ int m_itemNum;
  /* this+0x4 */ int[0x3e8] m_itemArray;
}

struct $_TypeDescriptor$_extraBytes_17 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x11] name;
}

class CAcceptHandler {
}

class N3IPAddr {
  /* this+0x4 */ unsigned long m_IPAddr;
}

class CAcceptThread {
  /* this+0x4 */ unsigned long m_ThreadID;
  /* this+0x8 */ bool m_bOK;
  /* this+0xc */ enum N2Thread::enumState m_State;
  /* this+0x10 */ void * m_hThread;
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
  /* this+0x30 */ bool m_bOK;
  /* this+0x31 */ bool m_bReqExit;
  /* this+0x34 */ class CAcceptHandler * m_cpHandler;
  /* this+0x38 */ const unsigned long m_IPaddr;
  /* this+0x3c */ const short m_Port;
  /* this+0x40 */ const int m_Backlog;
  /* this+0x44 */ unsigned int m_Socket;
  /* this+0x48 */ unsigned int m_ipLog;
  /* this+0x4c */ const char * m_Name;
}

struct _SYSTEM_INFO {
  /* this+0x0 */ unsigned long dwOemId;
  /* this+0x0 */ unsigned short wProcessorArchitecture;
  /* this+0x2 */ unsigned short wReserved;
  /* this+0x4 */ unsigned long dwPageSize;
  /* this+0x8 */ void * lpMinimumApplicationAddress;
  /* this+0xc */ void * lpMaximumApplicationAddress;
  /* this+0x10 */ unsigned long dwActiveProcessorMask;
  /* this+0x14 */ unsigned long dwNumberOfProcessors;
  /* this+0x18 */ unsigned long dwProcessorType;
  /* this+0x1c */ unsigned long dwAllocationGranularity;
  /* this+0x20 */ unsigned short wProcessorLevel;
  /* this+0x22 */ unsigned short wProcessorRevision;
}

struct linger {
  /* this+0x0 */ unsigned short l_onoff;
  /* this+0x2 */ unsigned short l_linger;
}

class CFriendDB {
  /* this+0x4 */ void * m_henv;
  /* this+0x8 */ void * m_hdbc;
  /* this+0xc */ void * m_hstmt;
  /* this+0x10 */ short m_retcode;
}

struct HMENU__ {
  /* this+0x0 */ int unused;
}

class CTestButton {
  /* this+0x0 */ struct HWND__ * m_hWnd;
  /* this+0x4 */ struct HMENU__ * const m_hMenu;
  /* this+0x8 */ int m_X;
  /* this+0xc */ int m_Y;
  /* this+0x10 */ int m_Width;
  /* this+0x14 */ int m_Height;
}

struct HINSTANCE__ {
  /* this+0x0 */ int unused;
}

struct _FLOATING_SAVE_AREA {
  /* this+0x0 */ unsigned long ControlWord;
  /* this+0x4 */ unsigned long StatusWord;
  /* this+0x8 */ unsigned long TagWord;
  /* this+0xc */ unsigned long ErrorOffset;
  /* this+0x10 */ unsigned long ErrorSelector;
  /* this+0x14 */ unsigned long DataOffset;
  /* this+0x18 */ unsigned long DataSelector;
  /* this+0x1c */ unsigned char[0x50] RegisterArea;
  /* this+0x6c */ unsigned long Cr0NpxState;
}

struct _CONTEXT {
  /* this+0x0 */ unsigned long ContextFlags;
  /* this+0x4 */ unsigned long Dr0;
  /* this+0x8 */ unsigned long Dr1;
  /* this+0xc */ unsigned long Dr2;
  /* this+0x10 */ unsigned long Dr3;
  /* this+0x14 */ unsigned long Dr6;
  /* this+0x18 */ unsigned long Dr7;
  /* this+0x1c */ struct _FLOATING_SAVE_AREA FloatSave;
  /* this+0x8c */ unsigned long SegGs;
  /* this+0x90 */ unsigned long SegFs;
  /* this+0x94 */ unsigned long SegEs;
  /* this+0x98 */ unsigned long SegDs;
  /* this+0x9c */ unsigned long Edi;
  /* this+0xa0 */ unsigned long Esi;
  /* this+0xa4 */ unsigned long Ebx;
  /* this+0xa8 */ unsigned long Edx;
  /* this+0xac */ unsigned long Ecx;
  /* this+0xb0 */ unsigned long Eax;
  /* this+0xb4 */ unsigned long Ebp;
  /* this+0xb8 */ unsigned long Eip;
  /* this+0xbc */ unsigned long SegCs;
  /* this+0xc0 */ unsigned long EFlags;
  /* this+0xc4 */ unsigned long Esp;
  /* this+0xc8 */ unsigned long SegSs;
  /* this+0xcc */ unsigned char[0x200] ExtendedRegisters;
}

struct _EXCEPTION_RECORD {
  /* this+0x0 */ unsigned long ExceptionCode;
  /* this+0x4 */ unsigned long ExceptionFlags;
  /* this+0x8 */ struct _EXCEPTION_RECORD * ExceptionRecord;
  /* this+0xc */ void * ExceptionAddress;
  /* this+0x10 */ unsigned long NumberParameters;
  /* this+0x14 */ unsigned long[0xf] ExceptionInformation;
}

struct _tagADDRESS64 {
  /* this+0x0 */ unsigned __int64 Offset;
  /* this+0x8 */ unsigned short Segment;
  /* this+0xc */ enum ADDRESS_MODE Mode;
}

struct _ACCEPT_PARM {
  /* this+0x0 */ unsigned long ip;
  /* this+0x4 */ short port;
  /* this+0x8 */ int backlog;
  /* this+0xc */ unsigned int ipLog;
  /* this+0x10 */ class CAcceptHandler * handler;
}

struct _KDHELP {
  /* this+0x0 */ unsigned long Thread;
  /* this+0x4 */ unsigned long ThCallbackStack;
  /* this+0x8 */ unsigned long NextCallback;
  /* this+0xc */ unsigned long FramePointer;
  /* this+0x10 */ unsigned long KiCallUserMode;
  /* this+0x14 */ unsigned long KeUserCallbackDispatcher;
  /* this+0x18 */ unsigned long SystemRangeStart;
  /* this+0x1c */ unsigned long ThCallbackBStore;
  /* this+0x20 */ unsigned long KiUserExceptionDispatcher;
  /* this+0x24 */ unsigned long StackBase;
  /* this+0x28 */ unsigned long StackLimit;
  /* this+0x2c */ unsigned long[0x5] Reserved;
}

struct tagRECT {
  /* this+0x0 */ long left;
  /* this+0x4 */ long top;
  /* this+0x8 */ long right;
  /* this+0xc */ long bottom;
}

struct tagPAINTSTRUCT {
  /* this+0x0 */ struct HDC__ * hdc;
  /* this+0x4 */ int fErase;
  /* this+0x8 */ struct tagRECT rcPaint;
  /* this+0x18 */ int fRestore;
  /* this+0x1c */ int fIncUpdate;
  /* this+0x20 */ unsigned char[0x20] rgbReserved;
}

class CMyMiniDumpUnhandledExceptionHandler {
    /* this+0x0 */ bool m_bOK;
      }

struct _EXCEPTION_POINTERS {
  /* this+0x0 */ struct _EXCEPTION_RECORD * ExceptionRecord;
  /* this+0x4 */ struct _CONTEXT * ContextRecord;
}

struct HICON__ {
  /* this+0x0 */ int unused;
}

class CProcessThread {
  /* this+0x4 */ unsigned long m_ThreadID;
  /* this+0x8 */ bool m_bOK;
  /* this+0xc */ enum N2Thread::enumState m_State;
  /* this+0x10 */ void * m_hThread;
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name;
  /* this+0x30 */ bool m_bOK;
  /* this+0x31 */ bool m_bReqExit;
  }

struct HBRUSH__ {
  /* this+0x0 */ int unused;
}

class N2IDGenerator36 {
  /* this+0x0 */ bool m_bOK;
  }

struct WSAData {
  /* this+0x0 */ unsigned short wVersion;
  /* this+0x2 */ unsigned short wHighVersion;
  /* this+0x4 */ char[0x101] szDescription;
  /* this+0x105 */ char[0x81] szSystemStatus;
  /* this+0x186 */ unsigned short iMaxSockets;
  /* this+0x188 */ unsigned short iMaxUdpDg;
  /* this+0x18c */ char * lpVendorInfo;
}

struct tagMSG {
  /* this+0x0 */ struct HWND__ * hwnd;
  /* this+0x4 */ unsigned int message;
  /* this+0x8 */ unsigned int wParam;
  /* this+0xc */ long lParam;
  /* this+0x10 */ unsigned long time;
  /* this+0x14 */ struct tagPOINT pt;
}

struct tagWNDCLASSEXA {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned int style;
  /* this+0x8 */ function  * lpfnWndProc;
  /* this+0xc */ int cbClsExtra;
  /* this+0x10 */ int cbWndExtra;
  /* this+0x14 */ struct HINSTANCE__ * hInstance;
  /* this+0x18 */ struct HICON__ * hIcon;
  /* this+0x1c */ struct HICON__ * hCursor;
  /* this+0x20 */ struct HBRUSH__ * hbrBackground;
  /* this+0x24 */ const char * lpszMenuName;
  /* this+0x28 */ const char * lpszClassName;
  /* this+0x2c */ struct HICON__ * hIconSm;
}

struct Addr {
  /* this+0x0 */ unsigned long ip;
  /* this+0x4 */ int port;
}

struct tagPOINT {
  /* this+0x0 */ long x;
  /* this+0x4 */ long y;
}

struct tagCREATESTRUCTA {
  /* this+0x0 */ void * lpCreateParams;
  /* this+0x4 */ struct HINSTANCE__ * hInstance;
  /* this+0x8 */ struct HMENU__ * hMenu;
  /* this+0xc */ struct HWND__ * hwndParent;
  /* this+0x10 */ int cy;
  /* this+0x14 */ int cx;
  /* this+0x18 */ int y;
  /* this+0x1c */ int x;
  /* this+0x20 */ long style;
  /* this+0x24 */ const char * lpszName;
  /* this+0x28 */ const char * lpszClass;
  /* this+0x2c */ unsigned long dwExStyle;
}

class NTraceLog {
  /* this+0x4 */ bool m_bOK;
  /* this+0x5 */ bool m_bOutput;
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS;
  /* this+0x20 */ char[0x400] m_szLogDir;
  /* this+0x420 */ char[0x400] m_szLogFilePrefix;
  /* this+0x820 */ unsigned int m_SequenceFileCnt;
  /* this+0x824 */ int m_BytesOfWritten;
    /* this+0x828 */ bool m_bOK;
}

class N2SystemMgr {
    /* this+0x4 */ bool m_bOK;
}

struct _KDHELP64 {
  /* this+0x0 */ unsigned __int64 Thread;
  /* this+0x8 */ unsigned long ThCallbackStack;
  /* this+0xc */ unsigned long ThCallbackBStore;
  /* this+0x10 */ unsigned long NextCallback;
  /* this+0x14 */ unsigned long FramePointer;
  /* this+0x18 */ unsigned __int64 KiCallUserMode;
  /* this+0x20 */ unsigned __int64 KeUserCallbackDispatcher;
  /* this+0x28 */ unsigned __int64 SystemRangeStart;
  /* this+0x30 */ unsigned __int64 KiUserExceptionDispatcher;
  /* this+0x38 */ unsigned __int64 StackBase;
  /* this+0x40 */ unsigned __int64 StackLimit;
  /* this+0x48 */ unsigned __int64[0x5] Reserved;
}

struct _tagADDRESS {
  /* this+0x0 */ unsigned long Offset;
  /* this+0x4 */ unsigned short Segment;
  /* this+0x8 */ enum ADDRESS_MODE Mode;
}

class addrCompare {
}

struct PACKET_IZ_CHK_PROCESSTIME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long InterProcessTime;
}

struct tagEMRPOLYLINE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long cptl;
  /* this+0x1c */ struct _POINTL[0x1] aptl;
}

struct tagEMR {
  /* this+0x0 */ unsigned long iType;
  /* this+0x4 */ unsigned long nSize;
}

struct _RECTL {
  /* this+0x0 */ long left;
  /* this+0x4 */ long top;
  /* this+0x8 */ long right;
  /* this+0xc */ long bottom;
}

struct tagXFORM {
  /* this+0x0 */ float eM11;
  /* this+0x4 */ float eM12;
  /* this+0x8 */ float eM21;
  /* this+0xc */ float eM22;
  /* this+0x10 */ float eDx;
  /* this+0x14 */ float eDy;
}

struct tagEMRTRANSPARENTBLT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ long xDest;
  /* this+0x1c */ long yDest;
  /* this+0x20 */ long cxDest;
  /* this+0x24 */ long cyDest;
  /* this+0x28 */ unsigned long dwRop;
  /* this+0x2c */ long xSrc;
  /* this+0x30 */ long ySrc;
  /* this+0x34 */ struct tagXFORM xformSrc;
  /* this+0x4c */ unsigned long crBkColorSrc;
  /* this+0x50 */ unsigned long iUsageSrc;
  /* this+0x54 */ unsigned long offBmiSrc;
  /* this+0x58 */ unsigned long cbBmiSrc;
  /* this+0x5c */ unsigned long offBitsSrc;
  /* this+0x60 */ unsigned long cbBitsSrc;
  /* this+0x64 */ long cxSrc;
  /* this+0x68 */ long cySrc;
}

struct _SERVICE_PRESHUTDOWN_INFO {
  /* this+0x0 */ unsigned long dwPreshutdownTimeout;
}

struct tagMIDIINCAPS2W {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned long dwSupport;
  /* this+0x4c */ struct _GUID ManufacturerGuid;
  /* this+0x5c */ struct _GUID ProductGuid;
  /* this+0x6c */ struct _GUID NameGuid;
}

struct PACKET_ZC_EQUIPMENT_ITEMLIST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_HC_SECOND_PASSWD_LOGIN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Seed;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned short Result;
}

struct _TAPE_SET_DRIVE_PARAMETERS {
  /* this+0x0 */ unsigned char ECC;
  /* this+0x1 */ unsigned char Compression;
  /* this+0x2 */ unsigned char DataPadding;
  /* this+0x3 */ unsigned char ReportSetmarks;
  /* this+0x4 */ unsigned long EOTWarningZoneSize;
}

struct tagCBTACTIVATESTRUCT {
  /* this+0x0 */ int fMouse;
  /* this+0x4 */ struct HWND__ * hWndActive;
}

struct _NETRESOURCEW {
  /* this+0x0 */ unsigned long dwScope;
  /* this+0x4 */ unsigned long dwType;
  /* this+0x8 */ unsigned long dwDisplayType;
  /* this+0xc */ unsigned long dwUsage;
  /* this+0x10 */ wchar_t * lpLocalName;
  /* this+0x14 */ wchar_t * lpRemoteName;
  /* this+0x18 */ wchar_t * lpComment;
  /* this+0x1c */ wchar_t * lpProvider;
}

struct _WSAVersion {
  /* this+0x0 */ unsigned long dwVersion;
  /* this+0x4 */ enum _WSAEcomparator ecHow;
}

struct _AFPROTOCOLS {
  /* this+0x0 */ int iAddressFamily;
  /* this+0x4 */ int iProtocol;
}

struct _CSADDR_INFO {
  /* this+0x0 */ struct _SOCKET_ADDRESS LocalAddr;
  /* this+0x8 */ struct _SOCKET_ADDRESS RemoteAddr;
  /* this+0x10 */ int iSocketType;
  /* this+0x14 */ int iProtocol;
}

struct _BLOB {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned char * pBlobData;
}

struct _WSAQuerySetA {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ char * lpszServiceInstanceName;
  /* this+0x8 */ struct _GUID * lpServiceClassId;
  /* this+0xc */ struct _WSAVersion * lpVersion;
  /* this+0x10 */ char * lpszComment;
  /* this+0x14 */ unsigned long dwNameSpace;
  /* this+0x18 */ struct _GUID * lpNSProviderId;
  /* this+0x1c */ char * lpszContext;
  /* this+0x20 */ unsigned long dwNumberOfProtocols;
  /* this+0x24 */ struct _AFPROTOCOLS * lpafpProtocols;
  /* this+0x28 */ char * lpszQueryString;
  /* this+0x2c */ unsigned long dwNumberOfCsAddrs;
  /* this+0x30 */ struct _CSADDR_INFO * lpcsaBuffer;
  /* this+0x34 */ unsigned long dwOutputFlags;
  /* this+0x38 */ struct _BLOB * lpBlob;
}

struct midiproptempo_tag {
  /* this+0x0 */ unsigned long cbStruct;
  /* this+0x4 */ unsigned long dwTempo;
}

struct PACKET_ZC_PC_SELL_RESULT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_ZC_FAILED_TRADE_BUYING_STORE_TO_SELLER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
  /* this+0x4 */ unsigned short ITID;
}

struct _QUERY_SERVICE_CONFIGA {
  /* this+0x0 */ unsigned long dwServiceType;
  /* this+0x4 */ unsigned long dwStartType;
  /* this+0x8 */ unsigned long dwErrorControl;
  /* this+0xc */ char * lpBinaryPathName;
  /* this+0x10 */ char * lpLoadOrderGroup;
  /* this+0x14 */ unsigned long dwTagId;
  /* this+0x18 */ char * lpDependencies;
  /* this+0x1c */ char * lpServiceStartName;
  /* this+0x20 */ char * lpDisplayName;
}

struct _WSANAMESPACE_INFOEXA {
  /* this+0x0 */ struct _GUID NSProviderId;
  /* this+0x10 */ unsigned long dwNameSpace;
  /* this+0x14 */ int fActive;
  /* this+0x18 */ unsigned long dwVersion;
  /* this+0x1c */ char * lpszIdentifier;
  /* this+0x20 */ struct _BLOB ProviderSpecific;
}

struct PACKET_ZC_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long OldMasterAID;
  /* this+0x6 */ unsigned long NewMasterAID;
}

struct PACKET_ZC_NOTIFY_POSITION_TO_GUILDM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
}

struct PACKET_CZ_SELECTAUTOSPELL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int SKID;
}

struct _TOKEN_PRIMARY_GROUP {
  /* this+0x0 */ void * PrimaryGroup;
}

struct PPM_IDLE_STATE_ACCOUNTING {
  /* this+0x0 */ unsigned long IdleTransitions;
  /* this+0x4 */ unsigned long FailedTransitions;
  /* this+0x8 */ unsigned long InvalidBucketIndex;
  /* this+0x10 */ unsigned __int64 TotalTime;
  /* this+0x18 */ unsigned long[0x6] IdleTimeBuckets;
}

struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Block> {
  /* this+0x0 */ void * hMem;
  /* this+0x4 */ unsigned long[0x3] dwReserved;
}

struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Region> {
  /* this+0x0 */ unsigned long dwCommittedSize;
  /* this+0x4 */ unsigned long dwUnCommittedSize;
  /* this+0x8 */ void * lpFirstBlock;
  /* this+0xc */ void * lpLastBlock;
}

struct _PROCESS_HEAP_ENTRY {
  /* this+0x0 */ void * lpData;
  /* this+0x4 */ unsigned long cbData;
  /* this+0x8 */ unsigned char cbOverhead;
  /* this+0x9 */ unsigned char iRegionIndex;
  /* this+0xa */ unsigned short wFlags;
  /* this+0xc */ struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Block> Block;
  /* this+0xc */ struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Region> Region;
}

struct tagEMREOF {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long nPalEntries;
  /* this+0xc */ unsigned long offPalEntries;
  /* this+0x10 */ unsigned long nSizeLast;
}

struct PACKET_CZ_BROADCAST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_REQ_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CZ_REQ_GIVE_MANNER_BYNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] CharName;
}

struct _SID_AND_ATTRIBUTES {
  /* this+0x0 */ void * Sid;
  /* this+0x4 */ unsigned long Attributes;
}

struct _MEMORY_BASIC_INFORMATION64 {
  /* this+0x0 */ unsigned __int64 BaseAddress;
  /* this+0x8 */ unsigned __int64 AllocationBase;
  /* this+0x10 */ unsigned long AllocationProtect;
  /* this+0x14 */ unsigned long __alignment1;
  /* this+0x18 */ unsigned __int64 RegionSize;
  /* this+0x20 */ unsigned long State;
  /* this+0x24 */ unsigned long Protect;
  /* this+0x28 */ unsigned long Type;
  /* this+0x2c */ unsigned long __alignment2;
}

struct tagMCI_SAVE_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const char * lpfilename;
}

struct PACKET_CZ_REGISTER_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] Name;
  /* this+0x1a */ unsigned long Job;
  /* this+0x1e */ unsigned long Level;
  /* this+0x22 */ char[0x10] mapName;
  /* this+0x32 */ unsigned long Option;
}

struct PACKET_CZ_CLOSE_SEARCH_STORE_INFO {
  /* this+0x0 */ short PacketType;
}

struct _ACCESS_REASONS {
  /* this+0x0 */ unsigned long[0x20] Data;
}

struct _PRIVILEGE_SET {
  /* this+0x0 */ unsigned long PrivilegeCount;
  /* this+0x4 */ unsigned long Control;
  /* this+0x8 */ struct _LUID_AND_ATTRIBUTES[0x1] Privilege;
}

struct _SE_ACCESS_REPLY {
  /* this+0x0 */ unsigned long Size;
  /* this+0x4 */ unsigned long ResultListCount;
  /* this+0x8 */ unsigned long * GrantedAccess;
  /* this+0xc */ unsigned long * AccessStatus;
  /* this+0x10 */ struct _ACCESS_REASONS * AccessReason;
  /* this+0x14 */ struct _PRIVILEGE_SET * * Privileges;
}

struct _PROCESSOR_POWER_POLICY_INFO {
  /* this+0x0 */ unsigned long TimeCheck;
  /* this+0x4 */ unsigned long DemoteLimit;
  /* this+0x8 */ unsigned long PromoteLimit;
  /* this+0xc */ unsigned char DemotePercent;
  /* this+0xd */ unsigned char PromotePercent;
  /* this+0xe */ unsigned char[0x2] Spare;
      }

struct _PROCESSOR_POWER_POLICY {
  /* this+0x0 */ unsigned long Revision;
  /* this+0x4 */ unsigned char DynamicThrottle;
  /* this+0x5 */ unsigned char[0x3] Spare;
      /* this+0xc */ unsigned long PolicyCount;
  /* this+0x10 */ struct _PROCESSOR_POWER_POLICY_INFO[0x3] Policy;
}

struct _RTL_SRWLOCK {
  /* this+0x0 */ void * Ptr;
}

struct tagTOGGLEKEYS {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
}

struct HDRVR__ {
  /* this+0x0 */ int unused;
}

struct tagMCI_SEEK_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwTo;
}

struct tagBITMAPFILEHEADER {
  /* this+0x0 */ unsigned short bfType;
  /* this+0x2 */ unsigned long bfSize;
  /* this+0x6 */ unsigned short bfReserved1;
  /* this+0x8 */ unsigned short bfReserved2;
  /* this+0xa */ unsigned long bfOffBits;
}

struct _POINTL {
  /* this+0x0 */ long x;
  /* this+0x4 */ long y;
}

struct DISPLAYCONFIG_SOURCE_MODE {
  /* this+0x0 */ unsigned int width;
  /* this+0x4 */ unsigned int height;
  /* this+0x8 */ enum DISPLAYCONFIG_PIXELFORMAT pixelFormat;
  /* this+0xc */ struct _POINTL position;
}

struct tagEMRARC {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBox;
  /* this+0x18 */ struct _POINTL ptlStart;
  /* this+0x20 */ struct _POINTL ptlEnd;
}

struct tagNMHDR {
  /* this+0x0 */ struct HWND__ * hwndFrom;
  /* this+0x4 */ unsigned int idFrom;
  /* this+0x8 */ unsigned int code;
}

struct tagICONMETRICSW {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ int iHorzSpacing;
  /* this+0x8 */ int iVertSpacing;
  /* this+0xc */ int iTitleWrap;
  /* this+0x10 */ struct tagLOGFONTW lfFont;
}

struct _currencyfmtA {
  /* this+0x0 */ unsigned int NumDigits;
  /* this+0x4 */ unsigned int LeadingZero;
  /* this+0x8 */ unsigned int Grouping;
  /* this+0xc */ char * lpDecimalSep;
  /* this+0x10 */ char * lpThousandSep;
  /* this+0x14 */ unsigned int NegativeOrder;
  /* this+0x18 */ unsigned int PositiveOrder;
  /* this+0x1c */ char * lpCurrencySymbol;
}

struct val_context {
  /* this+0x0 */ int valuelen;
  /* this+0x4 */ void * value_context;
  /* this+0x8 */ void * val_buff_ptr;
}

struct _ACTIVATION_CONTEXT_QUERY_INDEX {
  /* this+0x0 */ unsigned long ulAssemblyIndex;
  /* this+0x4 */ unsigned long ulFileIndexInAssembly;
}

struct tagJOYCAPSA {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ char[0x20] szPname;
  /* this+0x24 */ unsigned int wXmin;
  /* this+0x28 */ unsigned int wXmax;
  /* this+0x2c */ unsigned int wYmin;
  /* this+0x30 */ unsigned int wYmax;
  /* this+0x34 */ unsigned int wZmin;
  /* this+0x38 */ unsigned int wZmax;
  /* this+0x3c */ unsigned int wNumButtons;
  /* this+0x40 */ unsigned int wPeriodMin;
  /* this+0x44 */ unsigned int wPeriodMax;
  /* this+0x48 */ unsigned int wRmin;
  /* this+0x4c */ unsigned int wRmax;
  /* this+0x50 */ unsigned int wUmin;
  /* this+0x54 */ unsigned int wUmax;
  /* this+0x58 */ unsigned int wVmin;
  /* this+0x5c */ unsigned int wVmax;
  /* this+0x60 */ unsigned int wCaps;
  /* this+0x64 */ unsigned int wMaxAxes;
  /* this+0x68 */ unsigned int wNumAxes;
  /* this+0x6c */ unsigned int wMaxButtons;
  /* this+0x70 */ char[0x20] szRegKey;
  /* this+0x90 */ char[0x104] szOEMVxD;
}

struct tagRAWHID {
  /* this+0x0 */ unsigned long dwSizeHid;
  /* this+0x4 */ unsigned long dwCount;
  /* this+0x8 */ unsigned char[0x1] bRawData;
}

struct tagMIDIOUTCAPSA {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned short wTechnology;
  /* this+0x2a */ unsigned short wVoices;
  /* this+0x2c */ unsigned short wNotes;
  /* this+0x2e */ unsigned short wChannelMask;
  /* this+0x30 */ unsigned long dwSupport;
}

struct _OSVERSIONINFOEXW {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize;
  /* this+0x4 */ unsigned long dwMajorVersion;
  /* this+0x8 */ unsigned long dwMinorVersion;
  /* this+0xc */ unsigned long dwBuildNumber;
  /* this+0x10 */ unsigned long dwPlatformId;
  /* this+0x14 */ wchar_t[0x80] szCSDVersion;
  /* this+0x114 */ unsigned short wServicePackMajor;
  /* this+0x116 */ unsigned short wServicePackMinor;
  /* this+0x118 */ unsigned short wSuiteMask;
  /* this+0x11a */ unsigned char wProductType;
  /* this+0x11b */ unsigned char wReserved;
}

struct _DCB {
  /* this+0x0 */ unsigned long DCBlength;
  /* this+0x4 */ unsigned long BaudRate;
                              /* this+0xc */ unsigned short wReserved;
  /* this+0xe */ unsigned short XonLim;
  /* this+0x10 */ unsigned short XoffLim;
  /* this+0x12 */ unsigned char ByteSize;
  /* this+0x13 */ unsigned char Parity;
  /* this+0x14 */ unsigned char StopBits;
  /* this+0x15 */ char XonChar;
  /* this+0x16 */ char XoffChar;
  /* this+0x17 */ char ErrorChar;
  /* this+0x18 */ char EofChar;
  /* this+0x19 */ char EvtChar;
  /* this+0x1a */ unsigned short wReserved1;
}

struct _COMMCONFIG {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned short wVersion;
  /* this+0x6 */ unsigned short wReserved;
  /* this+0x8 */ struct _DCB dcb;
  /* this+0x24 */ unsigned long dwProviderSubType;
  /* this+0x28 */ unsigned long dwProviderOffset;
  /* this+0x2c */ unsigned long dwProviderSize;
  /* this+0x30 */ wchar_t[0x1] wcProviderData;
}

struct tagPALETTEENTRY {
  /* this+0x0 */ unsigned char peRed;
  /* this+0x1 */ unsigned char peGreen;
  /* this+0x2 */ unsigned char peBlue;
  /* this+0x3 */ unsigned char peFlags;
}

struct tagEXTLOGFONTW {
  /* this+0x0 */ struct tagLOGFONTW elfLogFont;
  /* this+0x5c */ wchar_t[0x40] elfFullName;
  /* this+0xdc */ wchar_t[0x20] elfStyle;
  /* this+0x11c */ unsigned long elfVersion;
  /* this+0x120 */ unsigned long elfStyleSize;
  /* this+0x124 */ unsigned long elfMatch;
  /* this+0x128 */ unsigned long elfReserved;
  /* this+0x12c */ unsigned char[0x4] elfVendorId;
  /* this+0x130 */ unsigned long elfCulture;
  /* this+0x134 */ struct tagPANOSE elfPanose;
}

struct tagEMREXTCREATEFONTINDIRECTW {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihFont;
  /* this+0xc */ struct tagEXTLOGFONTW elfw;
}

struct addrinfoW {
  /* this+0x0 */ int ai_flags;
  /* this+0x4 */ int ai_family;
  /* this+0x8 */ int ai_socktype;
  /* this+0xc */ int ai_protocol;
  /* this+0x10 */ unsigned int ai_addrlen;
  /* this+0x14 */ wchar_t * ai_canonname;
  /* this+0x18 */ struct sockaddr * ai_addr;
  /* this+0x1c */ struct addrinfoW * ai_next;
}

struct PACKET_CZ_ENTER2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int AuthCode;
  /* this+0xe */ unsigned long clientTime;
  /* this+0x12 */ unsigned char Sex;
}

struct _SID_IDENTIFIER_AUTHORITY {
  /* this+0x0 */ unsigned char[0x6] Value;
}

struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
  /* this+0x0 */ unsigned long TimeDateStamp;
  /* this+0x4 */ unsigned short OffsetModuleName;
  /* this+0x6 */ unsigned short NumberOfModuleForwarderRefs;
}

struct tagEMROFFSETCLIPRGN {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _POINTL ptlOffset;
}

struct tagSCROLLINFO {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned int fMask;
  /* this+0x8 */ int nMin;
  /* this+0xc */ int nMax;
  /* this+0x10 */ unsigned int nPage;
  /* this+0x14 */ int nPos;
  /* this+0x18 */ int nTrackPos;
}

struct tagREGISTERWORDW {
  /* this+0x0 */ wchar_t * lpReading;
  /* this+0x4 */ wchar_t * lpWord;
}

struct _LUID_AND_ATTRIBUTES {
  /* this+0x0 */ struct _LUID Luid;
  /* this+0x8 */ unsigned long Attributes;
}

struct _KCRM_MARSHAL_HEADER {
  /* this+0x0 */ unsigned long VersionMajor;
  /* this+0x4 */ unsigned long VersionMinor;
  /* this+0x8 */ unsigned long NumProtocols;
  /* this+0xc */ unsigned long Unused;
}

struct tagPOLYTEXTA {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ unsigned int n;
  /* this+0xc */ const char * lpstr;
  /* this+0x10 */ unsigned int uiFlags;
  /* this+0x14 */ struct tagRECT rcl;
  /* this+0x24 */ int * pdx;
}

struct tagEMRSELECTOBJECT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihObject;
}

struct tagEMRPOLYDRAW {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long cptl;
  /* this+0x1c */ struct _POINTL[0x1] aptl;
  /* this+0x24 */ unsigned char[0x1] abTypes;
}

struct tagMIXERCONTROLDETAILS_LISTTEXTA {
  /* this+0x0 */ unsigned long dwParam1;
  /* this+0x4 */ unsigned long dwParam2;
  /* this+0x8 */ char[0x40] szName;
}

struct tagCOPYDATASTRUCT {
  /* this+0x0 */ unsigned long dwData;
  /* this+0x4 */ unsigned long cbData;
  /* this+0x8 */ void * lpData;
}

struct tagREGISTERWORDA {
  /* this+0x0 */ char * lpReading;
  /* this+0x4 */ char * lpWord;
}

struct PACKET_ZC_SKILLINFO_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ short level;
  /* this+0x6 */ short spcost;
  /* this+0x8 */ short attackRange;
  /* this+0xa */ bool upgradable;
}

struct PACKET_CZ_PARTY_RECRUIT_REFUSE_VOLUNTEER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long REFUSE_AID;
}

struct _IMAGE_BOUND_FORWARDER_REF {
  /* this+0x0 */ unsigned long TimeDateStamp;
  /* this+0x4 */ unsigned short OffsetModuleName;
  /* this+0x6 */ unsigned short Reserved;
}

struct tagMINMAXINFO {
  /* this+0x0 */ struct tagPOINT ptReserved;
  /* this+0x8 */ struct tagPOINT ptMaxSize;
  /* this+0x10 */ struct tagPOINT ptMaxPosition;
  /* this+0x18 */ struct tagPOINT ptMinTrackSize;
  /* this+0x20 */ struct tagPOINT ptMaxTrackSize;
}

struct _SERVICE_TABLE_ENTRYW {
  /* this+0x0 */ wchar_t * lpServiceName;
  /* this+0x4 */ function  * lpServiceProc;
}

struct tagWAVEOUTCAPS2A {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned long dwFormats;
  /* this+0x2c */ unsigned short wChannels;
  /* this+0x2e */ unsigned short wReserved1;
  /* this+0x30 */ unsigned long dwSupport;
  /* this+0x34 */ struct _GUID ManufacturerGuid;
  /* this+0x44 */ struct _GUID ProductGuid;
  /* this+0x54 */ struct _GUID NameGuid;
}

struct tagMCI_ANIM_WINDOW_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ struct HWND__ * hWnd;
  /* this+0x8 */ unsigned int nCmdShow;
  /* this+0xc */ const char * lpstrText;
}

struct PACKET_ZC_ACCEPT_QUIT {
  /* this+0x0 */ short PacketType;
}

struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
  /* this+0x0 */ unsigned long EndOfJobTimeAction;
}

struct tagDEBUGHOOKINFO {
  /* this+0x0 */ unsigned long idThread;
  /* this+0x4 */ unsigned long idThreadInstaller;
  /* this+0x8 */ long lParam;
  /* this+0xc */ unsigned int wParam;
  /* this+0x10 */ int code;
}

struct HRAWINPUT__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_NOTIFY_ACT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long targetGID;
  /* this+0xa */ unsigned long startTime;
  /* this+0xe */ int attackMT;
  /* this+0x12 */ int attackedMT;
  /* this+0x16 */ short damage;
  /* this+0x18 */ short count;
  /* this+0x1a */ unsigned char action;
  /* this+0x1b */ short leftDamage;
}

struct tagWINDOWINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct tagRECT rcWindow;
  /* this+0x14 */ struct tagRECT rcClient;
  /* this+0x24 */ unsigned long dwStyle;
  /* this+0x28 */ unsigned long dwExStyle;
  /* this+0x2c */ unsigned long dwWindowStatus;
  /* this+0x30 */ unsigned int cxWindowBorders;
  /* this+0x34 */ unsigned int cyWindowBorders;
  /* this+0x38 */ unsigned short atomWindowType;
  /* this+0x3a */ unsigned short wCreatorVersion;
}

struct tagRGBTRIPLE {
  /* this+0x0 */ unsigned char rgbtBlue;
  /* this+0x1 */ unsigned char rgbtGreen;
  /* this+0x2 */ unsigned char rgbtRed;
}

struct tagEMRSELECTCLIPPATH {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long iMode;
}

struct tagWAVEOUTCAPS2W {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned long dwFormats;
  /* this+0x4c */ unsigned short wChannels;
  /* this+0x4e */ unsigned short wReserved1;
  /* this+0x50 */ unsigned long dwSupport;
  /* this+0x54 */ struct _GUID ManufacturerGuid;
  /* this+0x64 */ struct _GUID ProductGuid;
  /* this+0x74 */ struct _GUID NameGuid;
}

struct PARTY_BOOKING_DETAIL {
  /* this+0x0 */ short Level;
  /* this+0x2 */ short MapID;
  /* this+0x4 */ short[0x6] Job;
}

struct PARTY_BOOKING_AD_INFO {
  /* this+0x0 */ unsigned long Index;
  /* this+0x4 */ char[0x18] CharName;
  /* this+0x1c */ long ExpireTime;
  /* this+0x20 */ struct PARTY_BOOKING_DETAIL Detail;
}

struct _COMSTAT {
                  /* this+0x4 */ unsigned long cbInQue;
  /* this+0x8 */ unsigned long cbOutQue;
}

struct DLGITEMTEMPLATE {
  /* this+0x0 */ unsigned long style;
  /* this+0x4 */ unsigned long dwExtendedStyle;
  /* this+0x8 */ short x;
  /* this+0xa */ short y;
  /* this+0xc */ short cx;
  /* this+0xe */ short cy;
  /* this+0x10 */ unsigned short id;
}

struct PACKET_ZC_PC_SELL_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CZ_BATTLEFIELD_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct _LUID {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ long HighPart;
}

struct _TOKEN_SOURCE {
  /* this+0x0 */ char[0x8] SourceName;
  /* this+0x8 */ struct _LUID SourceIdentifier;
}

struct _TOKEN_CONTROL {
  /* this+0x0 */ struct _LUID TokenId;
  /* this+0x8 */ struct _LUID AuthenticationId;
  /* this+0x10 */ struct _LUID ModifiedId;
  /* this+0x18 */ struct _TOKEN_SOURCE TokenSource;
}

struct _DISPLAY_DEVICEW {
  /* this+0x0 */ unsigned long cb;
  /* this+0x4 */ wchar_t[0x20] DeviceName;
  /* this+0x44 */ wchar_t[0x80] DeviceString;
  /* this+0x144 */ unsigned long StateFlags;
  /* this+0x148 */ wchar_t[0x80] DeviceID;
  /* this+0x248 */ wchar_t[0x80] DeviceKey;
}

struct PACKET_HC_REQUEST_CHARACTER_PASSWORD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
  /* this+0x4 */ unsigned long dummyValue;
}

struct tagABORTPATH {
  /* this+0x0 */ struct tagEMR emr;
}

struct _CONSOLE_SCREEN_BUFFER_INFO {
  /* this+0x0 */ struct _COORD dwSize;
  /* this+0x4 */ struct _COORD dwCursorPosition;
  /* this+0x8 */ unsigned short wAttributes;
  /* this+0xa */ struct _SMALL_RECT srWindow;
  /* this+0x12 */ struct _COORD dwMaximumWindowSize;
}

struct SKILLINFO {
  /* this+0x0 */ unsigned short SKID;
  /* this+0x2 */ int type;
  /* this+0x6 */ short level;
  /* this+0x8 */ short spcost;
  /* this+0xa */ short attackRange;
  /* this+0xc */ char[0x18] skillName;
  /* this+0x24 */ bool upgradable;
}

struct PACKET_ZC_ADD_SKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct SKILLINFO data;
}

struct tagCOLORCORRECTPALETTE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihPalette;
  /* this+0xc */ unsigned long nFirstEntry;
  /* this+0x10 */ unsigned long nPalEntries;
  /* this+0x14 */ unsigned long nReserved;
}

struct tagMINIMIZEDMETRICS {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ int iWidth;
  /* this+0x8 */ int iHorzGap;
  /* this+0xc */ int iVertGap;
  /* this+0x10 */ int iArrange;
}

struct HMIDIIN__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL::ITEM {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ short count;
  /* this+0x7 */ unsigned short WearState;
  /* this+0x9 */ struct EQUIPSLOTINFO slot;
  /* this+0x11 */ long HireExpireDate;
  /* this+0x15 */ struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL::ITEM::<unnamed-type-Flag> Flag;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL::ITEM::<unnamed-type-Flag> {
    }

struct tagJOYCAPSW {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ wchar_t[0x20] szPname;
  /* this+0x44 */ unsigned int wXmin;
  /* this+0x48 */ unsigned int wXmax;
  /* this+0x4c */ unsigned int wYmin;
  /* this+0x50 */ unsigned int wYmax;
  /* this+0x54 */ unsigned int wZmin;
  /* this+0x58 */ unsigned int wZmax;
  /* this+0x5c */ unsigned int wNumButtons;
  /* this+0x60 */ unsigned int wPeriodMin;
  /* this+0x64 */ unsigned int wPeriodMax;
  /* this+0x68 */ unsigned int wRmin;
  /* this+0x6c */ unsigned int wRmax;
  /* this+0x70 */ unsigned int wUmin;
  /* this+0x74 */ unsigned int wUmax;
  /* this+0x78 */ unsigned int wVmin;
  /* this+0x7c */ unsigned int wVmax;
  /* this+0x80 */ unsigned int wCaps;
  /* this+0x84 */ unsigned int wMaxAxes;
  /* this+0x88 */ unsigned int wNumAxes;
  /* this+0x8c */ unsigned int wMaxButtons;
  /* this+0x90 */ wchar_t[0x20] szRegKey;
  /* this+0xd0 */ wchar_t[0x104] szOEMVxD;
}

struct PACKET_ZC_NOTIFY_TIME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long time;
}

struct PACKET_ZC_CHANGE_CHATROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long roomID;
  /* this+0xc */ short maxcount;
  /* this+0xe */ short curcount;
  /* this+0x10 */ unsigned char type;
}

struct tagEMRCREATECOLORSPACEW {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihCS;
  /* this+0xc */ struct tagLOGCOLORSPACEW lcs;
  /* this+0x258 */ unsigned long dwFlags;
  /* this+0x25c */ unsigned long cbData;
  /* this+0x260 */ unsigned char[0x1] Data;
}

struct tagMCI_SYSINFO_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ char * lpstrReturn;
  /* this+0x8 */ unsigned long dwRetSize;
  /* this+0xc */ unsigned long dwNumber;
  /* this+0x10 */ unsigned int wDeviceType;
}

struct PACKET_CZ_MAIL_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
}

struct tagEMRFILLRGN {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long cbRgnData;
  /* this+0x1c */ unsigned long ihBrush;
  /* this+0x20 */ unsigned char[0x1] RgnData;
}

struct tagMULTIKEYHELPW {
  /* this+0x0 */ unsigned long mkSize;
  /* this+0x4 */ wchar_t mkKeylist;
  /* this+0x6 */ wchar_t[0x1] szKeyphrase;
}

struct tagHELPWININFOA {
  /* this+0x0 */ int wStructSize;
  /* this+0x4 */ int x;
  /* this+0x8 */ int y;
  /* this+0xc */ int dx;
  /* this+0x10 */ int dy;
  /* this+0x14 */ int wMax;
  /* this+0x18 */ char[0x2] rgchMember;
}

struct tagMIXERLINEW {
  /* this+0x0 */ unsigned long cbStruct;
  /* this+0x4 */ unsigned long dwDestination;
  /* this+0x8 */ unsigned long dwSource;
  /* this+0xc */ unsigned long dwLineID;
  /* this+0x10 */ unsigned long fdwLine;
  /* this+0x14 */ unsigned long dwUser;
  /* this+0x18 */ unsigned long dwComponentType;
  /* this+0x1c */ unsigned long cChannels;
  /* this+0x20 */ unsigned long cConnections;
  /* this+0x24 */ unsigned long cControls;
  /* this+0x28 */ wchar_t[0x10] szShortName;
  /* this+0x48 */ wchar_t[0x40] szName;
  /* this+0xc8 */ struct tagMIXERLINEW::<unnamed-type-Target> Target;
}

struct _TIME_DYNAMIC_ZONE_INFORMATION {
  /* this+0x0 */ long Bias;
  /* this+0x4 */ wchar_t[0x20] StandardName;
  /* this+0x44 */ struct _SYSTEMTIME StandardDate;
  /* this+0x54 */ long StandardBias;
  /* this+0x58 */ wchar_t[0x20] DaylightName;
  /* this+0x98 */ struct _SYSTEMTIME DaylightDate;
  /* this+0xa8 */ long DaylightBias;
  /* this+0xac */ wchar_t[0x80] TimeZoneKeyName;
  /* this+0x1ac */ unsigned char DynamicDaylightTimeDisabled;
}

struct tagSIZE {
  /* this+0x0 */ long cx;
  /* this+0x4 */ long cy;
}

struct tagEMRFRAMERGN {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long cbRgnData;
  /* this+0x1c */ unsigned long ihBrush;
  /* this+0x20 */ struct tagSIZE szlStroke;
  /* this+0x28 */ unsigned char[0x1] RgnData;
}

struct tagMEASUREITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType;
  /* this+0x4 */ unsigned int CtlID;
  /* this+0x8 */ unsigned int itemID;
  /* this+0xc */ unsigned int itemWidth;
  /* this+0x10 */ unsigned int itemHeight;
  /* this+0x14 */ unsigned long itemData;
}

struct DRVCONFIGINFOEX {
  /* this+0x0 */ unsigned long dwDCISize;
  /* this+0x4 */ const wchar_t * lpszDCISectionName;
  /* this+0x8 */ const wchar_t * lpszDCIAliasName;
  /* this+0xc */ unsigned long dnDevNode;
}

struct _TRANSACTION_ENLISTMENT_PAIR {
  /* this+0x0 */ struct _GUID EnlistmentId;
  /* this+0x10 */ struct _GUID ResourceManagerId;
}

struct _TRANSACTION_ENLISTMENTS_INFORMATION {
  /* this+0x0 */ unsigned long NumberOfEnlistments;
  /* this+0x4 */ struct _TRANSACTION_ENLISTMENT_PAIR[0x1] EnlistmentPair;
}

struct _CREATE_PROCESS_DEBUG_INFO {
  /* this+0x0 */ void * hFile;
  /* this+0x4 */ void * hProcess;
  /* this+0x8 */ void * hThread;
  /* this+0xc */ void * lpBaseOfImage;
  /* this+0x10 */ unsigned long dwDebugInfoFileOffset;
  /* this+0x14 */ unsigned long nDebugInfoSize;
  /* this+0x18 */ void * lpThreadLocalBase;
  /* this+0x1c */ function  * lpStartAddress;
  /* this+0x20 */ void * lpImageName;
  /* this+0x24 */ unsigned short fUnicode;
}

struct _SMALL_RECT {
  /* this+0x0 */ short Left;
  /* this+0x2 */ short Top;
  /* this+0x4 */ short Right;
  /* this+0x6 */ short Bottom;
}

struct tagMIXERCONTROLW {
  /* this+0x0 */ unsigned long cbStruct;
  /* this+0x4 */ unsigned long dwControlID;
  /* this+0x8 */ unsigned long dwControlType;
  /* this+0xc */ unsigned long fdwControl;
  /* this+0x10 */ unsigned long cMultipleItems;
  /* this+0x14 */ wchar_t[0x10] szShortName;
  /* this+0x34 */ wchar_t[0x40] szName;
  /* this+0xb4 */ union tagMIXERCONTROLW::<unnamed-type-Bounds> Bounds;
  /* this+0xcc */ union tagMIXERCONTROLW::<unnamed-type-Metrics> Metrics;
}

struct tagMIXERLINECONTROLSW {
  /* this+0x0 */ unsigned long cbStruct;
  /* this+0x4 */ unsigned long dwLineID;
  /* this+0x8 */ unsigned long dwControlID;
  /* this+0x8 */ unsigned long dwControlType;
  /* this+0xc */ unsigned long cControls;
  /* this+0x10 */ unsigned long cbmxctrl;
  /* this+0x14 */ struct tagMIXERCONTROLW * pamxctrl;
}

struct _ACE_HEADER {
  /* this+0x0 */ unsigned char AceType;
  /* this+0x1 */ unsigned char AceFlags;
  /* this+0x2 */ unsigned short AceSize;
}

struct HGLRC__ {
  /* this+0x0 */ int unused;
}

struct tagEMREXCLUDECLIPRECT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclClip;
}

struct tagEMRPOLYPOLYLINE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long nPolys;
  /* this+0x1c */ unsigned long cptl;
  /* this+0x20 */ unsigned long[0x1] aPolyCounts;
  /* this+0x24 */ struct _POINTL[0x1] aptl;
}

struct tagUSEROBJECTFLAGS {
  /* this+0x0 */ int fInherit;
  /* this+0x4 */ int fReserved;
  /* this+0x8 */ unsigned long dwFlags;
}

struct midistrmbuffver_tag {
  /* this+0x0 */ unsigned long dwVersion;
  /* this+0x4 */ unsigned long dwMid;
  /* this+0x8 */ unsigned long dwOEMVersion;
}

struct _wfinddata64i32_t {
  /* this+0x0 */ unsigned int attrib;
  /* this+0x8 */ __int64 time_create;
  /* this+0x10 */ __int64 time_access;
  /* this+0x18 */ __int64 time_write;
  /* this+0x20 */ unsigned long size;
  /* this+0x24 */ wchar_t[0x104] name;
}

struct PACKET_AC_OTP_USER {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_ADD_MEMBER_TO_GROUP2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long Role;
  /* this+0xa */ short xPos;
  /* this+0xc */ short yPos;
  /* this+0xe */ unsigned char state;
  /* this+0xf */ char[0x18] groupName;
  /* this+0x27 */ char[0x18] characterName;
  /* this+0x3f */ char[0x10] mapName;
  /* this+0x4f */ unsigned char ItemPickupRule;
  /* this+0x50 */ unsigned char ItemDivisionRule;
}

struct _NON_PAGED_DEBUG_INFO {
  /* this+0x0 */ unsigned short Signature;
  /* this+0x2 */ unsigned short Flags;
  /* this+0x4 */ unsigned long Size;
  /* this+0x8 */ unsigned short Machine;
  /* this+0xa */ unsigned short Characteristics;
  /* this+0xc */ unsigned long TimeDateStamp;
  /* this+0x10 */ unsigned long CheckSum;
  /* this+0x14 */ unsigned long SizeOfImage;
  /* this+0x18 */ unsigned __int64 ImageBase;
}

struct PACKET_ZC_CART_ITEMLIST_NORMAL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_ROOM_NEWENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long roomID;
  /* this+0xc */ short maxcount;
  /* this+0xe */ short curcount;
  /* this+0x10 */ unsigned char type;
}

struct PACKET_MOB_HUNTING {
  /* this+0x0 */ unsigned long questID;
  /* this+0x4 */ unsigned long mobGID;
  /* this+0x8 */ short maxCount;
  /* this+0xa */ short count;
}

struct HRGN__ {
  /* this+0x0 */ int unused;
}

struct tagCHANGEFILTERSTRUCT {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long ExtStatus;
}

struct tMIXERCONTROLDETAILS_UNSIGNED {
  /* this+0x0 */ unsigned long dwValue;
}

struct PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long UniqueID;
}

struct PACKET_ZC_NORMAL_ITEMLIST3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_STORE_NORMAL_ITEMLIST3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_SEARCH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Level;
  /* this+0x4 */ unsigned long LastIndex;
  /* this+0x8 */ short ResultCount;
}

struct _JOBOBJECT_JOBSET_INFORMATION {
  /* this+0x0 */ unsigned long MemberLevel;
}

struct DISPLAYCONFIG_PATH_SOURCE_INFO {
  /* this+0x0 */ struct _LUID adapterId;
  /* this+0x8 */ unsigned int id;
  /* this+0xc */ unsigned int modeInfoIdx;
  /* this+0x10 */ unsigned int statusFlags;
}

struct tagRAWINPUTHEADER {
  /* this+0x0 */ unsigned long dwType;
  /* this+0x4 */ unsigned long dwSize;
  /* this+0x8 */ void * hDevice;
  /* this+0xc */ unsigned int wParam;
}

union tagRAWINPUT::<unnamed-type-data> {
  /* this+0x0 */ struct tagRAWMOUSE mouse;
  /* this+0x0 */ struct tagRAWKEYBOARD keyboard;
  /* this+0x0 */ struct tagRAWHID hid;
}

struct tagRAWINPUT {
  /* this+0x0 */ struct tagRAWINPUTHEADER header;
  /* this+0x10 */ union tagRAWINPUT::<unnamed-type-data> data;
}

union _LARGE_INTEGER {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ long HighPart;
  /* this+0x0 */ struct <unnamed-tag> u;
  /* this+0x0 */ __int64 QuadPart;
}

struct CM_Power_Data_s {
  /* this+0x0 */ unsigned long PD_Size;
  /* this+0x4 */ enum _DEVICE_POWER_STATE PD_MostRecentPowerState;
  /* this+0x8 */ unsigned long PD_Capabilities;
  /* this+0xc */ unsigned long PD_D1Latency;
  /* this+0x10 */ unsigned long PD_D2Latency;
  /* this+0x14 */ unsigned long PD_D3Latency;
  /* this+0x18 */ enum _DEVICE_POWER_STATE[0x7] PD_PowerStateMapping;
  /* this+0x34 */ enum _SYSTEM_POWER_STATE PD_DeepestSystemWake;
}

struct BITMAPV5HEADER {
  /* this+0x0 */ unsigned long bV5Size;
  /* this+0x4 */ long bV5Width;
  /* this+0x8 */ long bV5Height;
  /* this+0xc */ unsigned short bV5Planes;
  /* this+0xe */ unsigned short bV5BitCount;
  /* this+0x10 */ unsigned long bV5Compression;
  /* this+0x14 */ unsigned long bV5SizeImage;
  /* this+0x18 */ long bV5XPelsPerMeter;
  /* this+0x1c */ long bV5YPelsPerMeter;
  /* this+0x20 */ unsigned long bV5ClrUsed;
  /* this+0x24 */ unsigned long bV5ClrImportant;
  /* this+0x28 */ unsigned long bV5RedMask;
  /* this+0x2c */ unsigned long bV5GreenMask;
  /* this+0x30 */ unsigned long bV5BlueMask;
  /* this+0x34 */ unsigned long bV5AlphaMask;
  /* this+0x38 */ unsigned long bV5CSType;
  /* this+0x3c */ struct tagICEXYZTRIPLE bV5Endpoints;
  /* this+0x60 */ unsigned long bV5GammaRed;
  /* this+0x64 */ unsigned long bV5GammaGreen;
  /* this+0x68 */ unsigned long bV5GammaBlue;
  /* this+0x6c */ unsigned long bV5Intent;
  /* this+0x70 */ unsigned long bV5ProfileData;
  /* this+0x74 */ unsigned long bV5ProfileSize;
  /* this+0x78 */ unsigned long bV5Reserved;
}

struct tagANIMATIONINFO {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ int iMinAnimate;
}

struct tagWAVEOUTCAPSA {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned long dwFormats;
  /* this+0x2c */ unsigned short wChannels;
  /* this+0x2e */ unsigned short wReserved1;
  /* this+0x30 */ unsigned long dwSupport;
}

struct PACKET_CZ_MOVETO_MAP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x10] mapName;
  /* this+0x12 */ short xPos;
  /* this+0x14 */ short yPos;
}

struct _VIDEOPARAMETERS {
  /* this+0x0 */ struct _GUID Guid;
  /* this+0x10 */ unsigned long dwOffset;
  /* this+0x14 */ unsigned long dwCommand;
  /* this+0x18 */ unsigned long dwFlags;
  /* this+0x1c */ unsigned long dwMode;
  /* this+0x20 */ unsigned long dwTVStandard;
  /* this+0x24 */ unsigned long dwAvailableModes;
  /* this+0x28 */ unsigned long dwAvailableTVStandard;
  /* this+0x2c */ unsigned long dwFlickerFilter;
  /* this+0x30 */ unsigned long dwOverScanX;
  /* this+0x34 */ unsigned long dwOverScanY;
  /* this+0x38 */ unsigned long dwMaxUnscaledX;
  /* this+0x3c */ unsigned long dwMaxUnscaledY;
  /* this+0x40 */ unsigned long dwPositionX;
  /* this+0x44 */ unsigned long dwPositionY;
  /* this+0x48 */ unsigned long dwBrightness;
  /* this+0x4c */ unsigned long dwContrast;
  /* this+0x50 */ unsigned long dwCPType;
  /* this+0x54 */ unsigned long dwCPCommand;
  /* this+0x58 */ unsigned long dwCPStandard;
  /* this+0x5c */ unsigned long dwCPKey;
  /* this+0x60 */ unsigned long bCP_APSTriggerBits;
  /* this+0x64 */ unsigned char[0x100] bOEMCopyProtection;
}

struct _PROCESSOR_GROUP_INFO {
  /* this+0x0 */ unsigned char MaximumProcessorCount;
  /* this+0x1 */ unsigned char ActiveProcessorCount;
  /* this+0x2 */ unsigned char[0x26] Reserved;
  /* this+0x28 */ unsigned long ActiveProcessorMask;
}

struct _GROUP_RELATIONSHIP {
  /* this+0x0 */ unsigned short MaximumGroupCount;
  /* this+0x2 */ unsigned short ActiveGroupCount;
  /* this+0x4 */ unsigned char[0x14] Reserved;
  /* this+0x18 */ struct _PROCESSOR_GROUP_INFO[0x1] GroupInfo;
}

struct tagBITMAPCOREHEADER {
  /* this+0x0 */ unsigned long bcSize;
  /* this+0x4 */ unsigned short bcWidth;
  /* this+0x6 */ unsigned short bcHeight;
  /* this+0x8 */ unsigned short bcPlanes;
  /* this+0xa */ unsigned short bcBitCount;
}

struct tagBITMAPCOREINFO {
  /* this+0x0 */ struct tagBITMAPCOREHEADER bmciHeader;
  /* this+0xc */ struct tagRGBTRIPLE[0x1] bmciColors;
}

struct tagPIXELFORMATDESCRIPTOR {
  /* this+0x0 */ unsigned short nSize;
  /* this+0x2 */ unsigned short nVersion;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned char iPixelType;
  /* this+0x9 */ unsigned char cColorBits;
  /* this+0xa */ unsigned char cRedBits;
  /* this+0xb */ unsigned char cRedShift;
  /* this+0xc */ unsigned char cGreenBits;
  /* this+0xd */ unsigned char cGreenShift;
  /* this+0xe */ unsigned char cBlueBits;
  /* this+0xf */ unsigned char cBlueShift;
  /* this+0x10 */ unsigned char cAlphaBits;
  /* this+0x11 */ unsigned char cAlphaShift;
  /* this+0x12 */ unsigned char cAccumBits;
  /* this+0x13 */ unsigned char cAccumRedBits;
  /* this+0x14 */ unsigned char cAccumGreenBits;
  /* this+0x15 */ unsigned char cAccumBlueBits;
  /* this+0x16 */ unsigned char cAccumAlphaBits;
  /* this+0x17 */ unsigned char cDepthBits;
  /* this+0x18 */ unsigned char cStencilBits;
  /* this+0x19 */ unsigned char cAuxBuffers;
  /* this+0x1a */ unsigned char iLayerType;
  /* this+0x1b */ unsigned char bReserved;
  /* this+0x1c */ unsigned long dwLayerMask;
  /* this+0x20 */ unsigned long dwVisibleMask;
  /* this+0x24 */ unsigned long dwDamageMask;
}

struct tagEMRFILLPATH {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
}

struct _FLOAT128 {
  /* this+0x0 */ __int64 LowPart;
  /* this+0x8 */ __int64 HighPart;
}

union _LDT_ENTRY::<unnamed-type-HighWord> {
  /* this+0x0 */ struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> Bytes;
  /* this+0x0 */ struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> Bits;
}

struct _LDT_ENTRY {
  /* this+0x0 */ unsigned short LimitLow;
  /* this+0x2 */ unsigned short BaseLow;
  /* this+0x4 */ union _LDT_ENTRY::<unnamed-type-HighWord> HighWord;
}

struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
  /* this+0x0 */ union _LARGE_INTEGER PerProcessUserTimeLimit;
  /* this+0x8 */ union _LARGE_INTEGER PerJobUserTimeLimit;
  /* this+0x10 */ unsigned long LimitFlags;
  /* this+0x14 */ unsigned long MinimumWorkingSetSize;
  /* this+0x18 */ unsigned long MaximumWorkingSetSize;
  /* this+0x1c */ unsigned long ActiveProcessLimit;
  /* this+0x20 */ unsigned long Affinity;
  /* this+0x24 */ unsigned long PriorityClass;
  /* this+0x28 */ unsigned long SchedulingClass;
}

struct tagMETAHEADER {
  /* this+0x0 */ unsigned short mtType;
  /* this+0x2 */ unsigned short mtHeaderSize;
  /* this+0x4 */ unsigned short mtVersion;
  /* this+0x6 */ unsigned long mtSize;
  /* this+0xa */ unsigned short mtNoObjects;
  /* this+0xc */ unsigned long mtMaxRecord;
  /* this+0x10 */ unsigned short mtNoParameters;
}

struct tagLOGFONTW {
  /* this+0x0 */ long lfHeight;
  /* this+0x4 */ long lfWidth;
  /* this+0x8 */ long lfEscapement;
  /* this+0xc */ long lfOrientation;
  /* this+0x10 */ long lfWeight;
  /* this+0x14 */ unsigned char lfItalic;
  /* this+0x15 */ unsigned char lfUnderline;
  /* this+0x16 */ unsigned char lfStrikeOut;
  /* this+0x17 */ unsigned char lfCharSet;
  /* this+0x18 */ unsigned char lfOutPrecision;
  /* this+0x19 */ unsigned char lfClipPrecision;
  /* this+0x1a */ unsigned char lfQuality;
  /* this+0x1b */ unsigned char lfPitchAndFamily;
  /* this+0x1c */ wchar_t[0x20] lfFaceName;
}

struct PACKET_ZC_NPC_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short packetLength;
  /* this+0x4 */ unsigned long accountID;
  /* this+0x8 */ unsigned long color;
}

struct CASH_BUY_ITEM {
  /* this+0x0 */ unsigned long item_id;
  /* this+0x4 */ int count;
  /* this+0x8 */ short tab_code;
}

struct HKL__ {
  /* this+0x0 */ int unused;
}

struct tagLOGFONTA {
  /* this+0x0 */ long lfHeight;
  /* this+0x4 */ long lfWidth;
  /* this+0x8 */ long lfEscapement;
  /* this+0xc */ long lfOrientation;
  /* this+0x10 */ long lfWeight;
  /* this+0x14 */ unsigned char lfItalic;
  /* this+0x15 */ unsigned char lfUnderline;
  /* this+0x16 */ unsigned char lfStrikeOut;
  /* this+0x17 */ unsigned char lfCharSet;
  /* this+0x18 */ unsigned char lfOutPrecision;
  /* this+0x19 */ unsigned char lfClipPrecision;
  /* this+0x1a */ unsigned char lfQuality;
  /* this+0x1b */ unsigned char lfPitchAndFamily;
  /* this+0x1c */ char[0x20] lfFaceName;
}

struct tagCWPRETSTRUCT {
  /* this+0x0 */ long lResult;
  /* this+0x4 */ long lParam;
  /* this+0x8 */ unsigned int wParam;
  /* this+0xc */ unsigned int message;
  /* this+0x10 */ struct HWND__ * hwnd;
}

struct _SERVICE_STATUS_PROCESS {
  /* this+0x0 */ unsigned long dwServiceType;
  /* this+0x4 */ unsigned long dwCurrentState;
  /* this+0x8 */ unsigned long dwControlsAccepted;
  /* this+0xc */ unsigned long dwWin32ExitCode;
  /* this+0x10 */ unsigned long dwServiceSpecificExitCode;
  /* this+0x14 */ unsigned long dwCheckPoint;
  /* this+0x18 */ unsigned long dwWaitHint;
  /* this+0x1c */ unsigned long dwProcessId;
  /* this+0x20 */ unsigned long dwServiceFlags;
}

struct _SERVICE_NOTIFY_2A {
  /* this+0x0 */ unsigned long dwVersion;
  /* this+0x4 */ function  * pfnNotifyCallback;
  /* this+0x8 */ void * pContext;
  /* this+0xc */ unsigned long dwNotificationStatus;
  /* this+0x10 */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
  /* this+0x34 */ unsigned long dwNotificationTriggered;
  /* this+0x38 */ char * pszServiceNames;
}

struct HIMCC__ {
  /* this+0x0 */ int unused;
}

struct _MEMORY_BASIC_INFORMATION32 {
  /* this+0x0 */ unsigned long BaseAddress;
  /* this+0x4 */ unsigned long AllocationBase;
  /* this+0x8 */ unsigned long AllocationProtect;
  /* this+0xc */ unsigned long RegionSize;
  /* this+0x10 */ unsigned long State;
  /* this+0x14 */ unsigned long Protect;
  /* this+0x18 */ unsigned long Type;
}

struct tagENHMETARECORD {
  /* this+0x0 */ unsigned long iType;
  /* this+0x4 */ unsigned long nSize;
  /* this+0x8 */ unsigned long[0x1] dParm;
}

struct tagTEXTMETRICA {
  /* this+0x0 */ long tmHeight;
  /* this+0x4 */ long tmAscent;
  /* this+0x8 */ long tmDescent;
  /* this+0xc */ long tmInternalLeading;
  /* this+0x10 */ long tmExternalLeading;
  /* this+0x14 */ long tmAveCharWidth;
  /* this+0x18 */ long tmMaxCharWidth;
  /* this+0x1c */ long tmWeight;
  /* this+0x20 */ long tmOverhang;
  /* this+0x24 */ long tmDigitizedAspectX;
  /* this+0x28 */ long tmDigitizedAspectY;
  /* this+0x2c */ unsigned char tmFirstChar;
  /* this+0x2d */ unsigned char tmLastChar;
  /* this+0x2e */ unsigned char tmDefaultChar;
  /* this+0x2f */ unsigned char tmBreakChar;
  /* this+0x30 */ unsigned char tmItalic;
  /* this+0x31 */ unsigned char tmUnderlined;
  /* this+0x32 */ unsigned char tmStruckOut;
  /* this+0x33 */ unsigned char tmPitchAndFamily;
  /* this+0x34 */ unsigned char tmCharSet;
}

struct tagAUXCAPS2W {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned short wTechnology;
  /* this+0x4a */ unsigned short wReserved1;
  /* this+0x4c */ unsigned long dwSupport;
  /* this+0x50 */ struct _GUID ManufacturerGuid;
  /* this+0x60 */ struct _GUID ProductGuid;
  /* this+0x70 */ struct _GUID NameGuid;
}

struct tagMIXERCAPS2W {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned long fdwSupport;
  /* this+0x4c */ unsigned long cDestinations;
  /* this+0x50 */ struct _GUID ManufacturerGuid;
  /* this+0x60 */ struct _GUID ProductGuid;
  /* this+0x70 */ struct _GUID NameGuid;
}

struct PACKET_ZC_BROADCAST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_REQ_WEAR_EQUIP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned short wearLocation;
}

struct PACKET_CZ_REQ_EXPEL_MEMBER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
}

struct _FILE_ATTRIBUTE_TAG_INFO {
  /* this+0x0 */ unsigned long FileAttributes;
  /* this+0x4 */ unsigned long ReparseTag;
}

struct HWINSTA__ {
  /* this+0x0 */ int unused;
}

struct _OFSTRUCT {
  /* this+0x0 */ unsigned char cBytes;
  /* this+0x1 */ unsigned char fFixedDisk;
  /* this+0x2 */ unsigned short nErrCode;
  /* this+0x4 */ unsigned short Reserved1;
  /* this+0x6 */ unsigned short Reserved2;
  /* this+0x8 */ char[0x80] szPathName;
}

struct DISPLAYCONFIG_RATIONAL {
  /* this+0x0 */ unsigned int Numerator;
  /* this+0x4 */ unsigned int Denominator;
}

struct _FIXED {
  /* this+0x0 */ unsigned short fract;
  /* this+0x2 */ short value;
}

struct _MAT2 {
  /* this+0x0 */ struct _FIXED eM11;
  /* this+0x4 */ struct _FIXED eM12;
  /* this+0x8 */ struct _FIXED eM21;
  /* this+0xc */ struct _FIXED eM22;
}

struct tagEMRNAMEDESCAPE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ int iEscape;
  /* this+0xc */ int cbDriver;
  /* this+0x10 */ int cbEscData;
  /* this+0x14 */ unsigned char[0x1] EscData;
}

struct tagMSGBOXPARAMSA {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ struct HWND__ * hwndOwner;
  /* this+0x8 */ struct HINSTANCE__ * hInstance;
  /* this+0xc */ const char * lpszText;
  /* this+0x10 */ const char * lpszCaption;
  /* this+0x14 */ unsigned long dwStyle;
  /* this+0x18 */ const char * lpszIcon;
  /* this+0x1c */ unsigned long dwContextHelpId;
  /* this+0x20 */ function  * lpfnMsgBoxCallback;
  /* this+0x24 */ unsigned long dwLanguageId;
}

struct tagCLIENTCREATESTRUCT {
  /* this+0x0 */ void * hWindowMenu;
  /* this+0x4 */ unsigned int idFirstChild;
}

struct _TOKEN_MANDATORY_LABEL {
  /* this+0x0 */ struct _SID_AND_ATTRIBUTES Label;
}

struct _OUTPUT_DEBUG_STRING_INFO {
  /* this+0x0 */ char * lpDebugStringData;
  /* this+0x4 */ unsigned short fUnicode;
  /* this+0x6 */ unsigned short nDebugStringLength;
}

struct _FILE_COMPRESSION_INFO {
  /* this+0x0 */ union _LARGE_INTEGER CompressedFileSize;
  /* this+0x8 */ unsigned short CompressionFormat;
  /* this+0xa */ unsigned char CompressionUnitShift;
  /* this+0xb */ unsigned char ChunkShift;
  /* this+0xc */ unsigned char ClusterShift;
  /* this+0xd */ unsigned char[0x3] Reserved;
}

struct tagEVENTMSG {
  /* this+0x0 */ unsigned int message;
  /* this+0x4 */ unsigned int paramL;
  /* this+0x8 */ unsigned int paramH;
  /* this+0xc */ unsigned long time;
  /* this+0x10 */ struct HWND__ * hwnd;
}

struct _UNIVERSAL_NAME_INFOA {
  /* this+0x0 */ char * lpUniversalName;
}

struct tagMCI_STATUS_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwReturn;
  /* this+0x8 */ unsigned long dwItem;
  /* this+0xc */ unsigned long dwTrack;
}

struct _IMAGE_DATA_DIRECTORY {
  /* this+0x0 */ unsigned long VirtualAddress;
  /* this+0x4 */ unsigned long Size;
}

struct _IMAGE_OPTIONAL_HEADER64 {
  /* this+0x0 */ unsigned short Magic;
  /* this+0x2 */ unsigned char MajorLinkerVersion;
  /* this+0x3 */ unsigned char MinorLinkerVersion;
  /* this+0x4 */ unsigned long SizeOfCode;
  /* this+0x8 */ unsigned long SizeOfInitializedData;
  /* this+0xc */ unsigned long SizeOfUninitializedData;
  /* this+0x10 */ unsigned long AddressOfEntryPoint;
  /* this+0x14 */ unsigned long BaseOfCode;
  /* this+0x18 */ unsigned __int64 ImageBase;
  /* this+0x20 */ unsigned long SectionAlignment;
  /* this+0x24 */ unsigned long FileAlignment;
  /* this+0x28 */ unsigned short MajorOperatingSystemVersion;
  /* this+0x2a */ unsigned short MinorOperatingSystemVersion;
  /* this+0x2c */ unsigned short MajorImageVersion;
  /* this+0x2e */ unsigned short MinorImageVersion;
  /* this+0x30 */ unsigned short MajorSubsystemVersion;
  /* this+0x32 */ unsigned short MinorSubsystemVersion;
  /* this+0x34 */ unsigned long Win32VersionValue;
  /* this+0x38 */ unsigned long SizeOfImage;
  /* this+0x3c */ unsigned long SizeOfHeaders;
  /* this+0x40 */ unsigned long CheckSum;
  /* this+0x44 */ unsigned short Subsystem;
  /* this+0x46 */ unsigned short DllCharacteristics;
  /* this+0x48 */ unsigned __int64 SizeOfStackReserve;
  /* this+0x50 */ unsigned __int64 SizeOfStackCommit;
  /* this+0x58 */ unsigned __int64 SizeOfHeapReserve;
  /* this+0x60 */ unsigned __int64 SizeOfHeapCommit;
  /* this+0x68 */ unsigned long LoaderFlags;
  /* this+0x6c */ unsigned long NumberOfRvaAndSizes;
  /* this+0x70 */ struct _IMAGE_DATA_DIRECTORY[0x10] DataDirectory;
}

struct tagEMRSETVIEWPORTEXTEX {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct tagSIZE szlExtent;
}

struct tagTRACKMOUSEEVENT {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ struct HWND__ * hwndTrack;
  /* this+0xc */ unsigned long dwHoverTime;
}

struct tagCOMBOBOXINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct tagRECT rcItem;
  /* this+0x14 */ struct tagRECT rcButton;
  /* this+0x24 */ unsigned long stateButton;
  /* this+0x28 */ struct HWND__ * hwndCombo;
  /* this+0x2c */ struct HWND__ * hwndItem;
  /* this+0x30 */ struct HWND__ * hwndList;
}

struct PACKET_ZC_LONGPAR_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short varID;
  /* this+0x4 */ int amount;
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym> {
  /* this+0x0 */ unsigned long TagIndex;
  /* this+0x4 */ union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc> Misc;
  /* this+0x8 */ union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry> FcnAry;
  /* this+0x10 */ unsigned short TvIndex;
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-File> {
  /* this+0x0 */ unsigned char[0x12] Name;
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Section> {
  /* this+0x0 */ unsigned long Length;
  /* this+0x4 */ unsigned short NumberOfRelocations;
  /* this+0x6 */ unsigned short NumberOfLinenumbers;
  /* this+0x8 */ unsigned long CheckSum;
  /* this+0xc */ short Number;
  /* this+0xe */ unsigned char Selection;
  /* this+0xf */ unsigned char bReserved;
  /* this+0x10 */ short HighNumber;
}

struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
  /* this+0x0 */ unsigned char bAuxType;
  /* this+0x1 */ unsigned char bReserved;
  /* this+0x2 */ unsigned long SymbolTableIndex;
  /* this+0x6 */ unsigned char[0xc] rgbReserved;
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-CRC> {
  /* this+0x0 */ unsigned long crc;
  /* this+0x4 */ unsigned char[0xe] rgbReserved;
}

union _IMAGE_AUX_SYMBOL {
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym> Sym;
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-File> File;
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Section> Section;
  /* this+0x0 */ struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-CRC> CRC;
}

struct _FILETIME {
  /* this+0x0 */ unsigned long dwLowDateTime;
  /* this+0x4 */ unsigned long dwHighDateTime;
}

struct _BY_HANDLE_FILE_INFORMATION {
  /* this+0x0 */ unsigned long dwFileAttributes;
  /* this+0x4 */ struct _FILETIME ftCreationTime;
  /* this+0xc */ struct _FILETIME ftLastAccessTime;
  /* this+0x14 */ struct _FILETIME ftLastWriteTime;
  /* this+0x1c */ unsigned long dwVolumeSerialNumber;
  /* this+0x20 */ unsigned long nFileSizeHigh;
  /* this+0x24 */ unsigned long nFileSizeLow;
  /* this+0x28 */ unsigned long nNumberOfLinks;
  /* this+0x2c */ unsigned long nFileIndexHigh;
  /* this+0x30 */ unsigned long nFileIndexLow;
}

struct _STARTUPINFOA {
  /* this+0x0 */ unsigned long cb;
  /* this+0x4 */ char * lpReserved;
  /* this+0x8 */ char * lpDesktop;
  /* this+0xc */ char * lpTitle;
  /* this+0x10 */ unsigned long dwX;
  /* this+0x14 */ unsigned long dwY;
  /* this+0x18 */ unsigned long dwXSize;
  /* this+0x1c */ unsigned long dwYSize;
  /* this+0x20 */ unsigned long dwXCountChars;
  /* this+0x24 */ unsigned long dwYCountChars;
  /* this+0x28 */ unsigned long dwFillAttribute;
  /* this+0x2c */ unsigned long dwFlags;
  /* this+0x30 */ unsigned short wShowWindow;
  /* this+0x32 */ unsigned short cbReserved2;
  /* this+0x34 */ unsigned char * lpReserved2;
  /* this+0x38 */ void * hStdInput;
  /* this+0x3c */ void * hStdOutput;
  /* this+0x40 */ void * hStdError;
}

struct PACKET_ZC_EQUIPWIN_MICROSCOPE_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
  /* this+0x4 */ char[0x18] characterName;
  /* this+0x1c */ short job;
  /* this+0x1e */ short head;
  /* this+0x20 */ short accessory;
  /* this+0x22 */ short accessory2;
  /* this+0x24 */ short accessory3;
  /* this+0x26 */ short robe;
  /* this+0x28 */ short headpalette;
  /* this+0x2a */ short bodypalette;
  /* this+0x2c */ unsigned char sex;
}

struct _EVENTLOGRECORD {
  /* this+0x0 */ unsigned long Length;
  /* this+0x4 */ unsigned long Reserved;
  /* this+0x8 */ unsigned long RecordNumber;
  /* this+0xc */ unsigned long TimeGenerated;
  /* this+0x10 */ unsigned long TimeWritten;
  /* this+0x14 */ unsigned long EventID;
  /* this+0x18 */ unsigned short EventType;
  /* this+0x1a */ unsigned short NumStrings;
  /* this+0x1c */ unsigned short EventCategory;
  /* this+0x1e */ unsigned short ReservedFlags;
  /* this+0x20 */ unsigned long ClosingRecordNumber;
  /* this+0x24 */ unsigned long StringOffset;
  /* this+0x28 */ unsigned long UserSidLength;
  /* this+0x2c */ unsigned long UserSidOffset;
  /* this+0x30 */ unsigned long DataLength;
  /* this+0x34 */ unsigned long DataOffset;
}

struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
  /* this+0x0 */ unsigned long PropagationCookie;
  /* this+0x4 */ struct _GUID UOW;
  /* this+0x14 */ struct _GUID TmIdentity;
  /* this+0x24 */ unsigned long BufferLength;
}

struct tagSTYLESTRUCT {
  /* this+0x0 */ unsigned long styleOld;
  /* this+0x4 */ unsigned long styleNew;
}

struct _cpinfoexA {
  /* this+0x0 */ unsigned int MaxCharSize;
  /* this+0x4 */ unsigned char[0x2] DefaultChar;
  /* this+0x6 */ unsigned char[0xc] LeadByte;
  /* this+0x12 */ wchar_t UnicodeDefaultChar;
  /* this+0x14 */ unsigned int CodePage;
  /* this+0x18 */ char[0x104] CodePageName;
}

struct tagAUXCAPSW {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned short wTechnology;
  /* this+0x4a */ unsigned short wReserved1;
  /* this+0x4c */ unsigned long dwSupport;
}

struct timecaps_tag {
  /* this+0x0 */ unsigned int wPeriodMin;
  /* this+0x4 */ unsigned int wPeriodMax;
}

struct tagMCI_OVLY_SAVE_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const wchar_t * lpfilename;
  /* this+0x8 */ struct tagRECT rc;
}

struct PACKET_CZ_REQ_SE_CASH_TAB_CODE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short tab_code;
}

struct PACKET_CZ_ITEM_PICKUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ITAID;
}

struct tagMCI_VD_ESCAPE_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const char * lpstrCommand;
}

struct PACKET_ZC_MEMBER_EXIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short curcount;
  /* this+0x4 */ char[0x18] name;
  /* this+0x1c */ unsigned char type;
}

struct PACKET_ZC_SIMPLE_CASH_POINT_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long CashPoint;
}

struct PACKET_ZC_UPDATE_RANKING_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short RankingType;
  /* this+0x4 */ int Point;
  /* this+0x8 */ int TotalPoint;
}

struct HMONITOR__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_STORE_ITEMLIST_EQUIP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct tagEMRMODIFYWORLDTRANSFORM {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct tagXFORM xform;
  /* this+0x20 */ unsigned long iMode;
}

struct PACKET_CZ_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_MACRO_ITEMPICKUP_FAIL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ITAID;
}

struct PACKET_ZC_STORE_ITEMLIST_EQUIP_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ char[0x18] StoreName;
}

struct tagPANOSE {
  /* this+0x0 */ unsigned char bFamilyType;
  /* this+0x1 */ unsigned char bSerifStyle;
  /* this+0x2 */ unsigned char bWeight;
  /* this+0x3 */ unsigned char bProportion;
  /* this+0x4 */ unsigned char bContrast;
  /* this+0x5 */ unsigned char bStrokeVariation;
  /* this+0x6 */ unsigned char bArmStyle;
  /* this+0x7 */ unsigned char bLetterform;
  /* this+0x8 */ unsigned char bMidline;
  /* this+0x9 */ unsigned char bXHeight;
}

struct tagEXTLOGFONTA {
  /* this+0x0 */ struct tagLOGFONTA elfLogFont;
  /* this+0x3c */ unsigned char[0x40] elfFullName;
  /* this+0x7c */ unsigned char[0x20] elfStyle;
  /* this+0x9c */ unsigned long elfVersion;
  /* this+0xa0 */ unsigned long elfStyleSize;
  /* this+0xa4 */ unsigned long elfMatch;
  /* this+0xa8 */ unsigned long elfReserved;
  /* this+0xac */ unsigned char[0x4] elfVendorId;
  /* this+0xb0 */ unsigned long elfCulture;
  /* this+0xb4 */ struct tagPANOSE elfPanose;
}

struct PACKET_ZC_NOTIFY_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] EntryQueueName;
}

struct tagMENUITEMINFOA {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned int fMask;
  /* this+0x8 */ unsigned int fType;
  /* this+0xc */ unsigned int fState;
  /* this+0x10 */ unsigned int wID;
  /* this+0x14 */ struct HMENU__ * hSubMenu;
  /* this+0x18 */ struct HBITMAP__ * hbmpChecked;
  /* this+0x1c */ struct HBITMAP__ * hbmpUnchecked;
  /* this+0x20 */ unsigned long dwItemData;
  /* this+0x24 */ char * dwTypeData;
  /* this+0x28 */ unsigned int cch;
  /* this+0x2c */ struct HBITMAP__ * hbmpItem;
}

struct HBITMAP__ {
  /* this+0x0 */ int unused;
}

struct _ICONINFOEXW {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ int fIcon;
  /* this+0x8 */ unsigned long xHotspot;
  /* this+0xc */ unsigned long yHotspot;
  /* this+0x10 */ struct HBITMAP__ * hbmMask;
  /* this+0x14 */ struct HBITMAP__ * hbmColor;
  /* this+0x18 */ unsigned short wResID;
  /* this+0x1a */ wchar_t[0x104] szModName;
  /* this+0x222 */ wchar_t[0x104] szResName;
}

struct _COORD {
  /* this+0x0 */ short X;
  /* this+0x2 */ short Y;
}

struct tagWAVEINCAPS2A {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned long dwFormats;
  /* this+0x2c */ unsigned short wChannels;
  /* this+0x2e */ unsigned short wReserved1;
  /* this+0x30 */ struct _GUID ManufacturerGuid;
  /* this+0x40 */ struct _GUID ProductGuid;
  /* this+0x50 */ struct _GUID NameGuid;
}

struct PACKET_CZ_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long MyAID;
  /* this+0xa */ unsigned long MyGID;
}

struct _XSAVE_AREA_HEADER {
  /* this+0x0 */ unsigned __int64 Mask;
  /* this+0x8 */ unsigned __int64[0x7] Reserved;
}

struct tagLOGCOLORSPACEW {
  /* this+0x0 */ unsigned long lcsSignature;
  /* this+0x4 */ unsigned long lcsVersion;
  /* this+0x8 */ unsigned long lcsSize;
  /* this+0xc */ long lcsCSType;
  /* this+0x10 */ long lcsIntent;
  /* this+0x14 */ struct tagICEXYZTRIPLE lcsEndpoints;
  /* this+0x38 */ unsigned long lcsGammaRed;
  /* this+0x3c */ unsigned long lcsGammaGreen;
  /* this+0x40 */ unsigned long lcsGammaBlue;
  /* this+0x44 */ wchar_t[0x104] lcsFilename;
}

struct _currencyfmtW {
  /* this+0x0 */ unsigned int NumDigits;
  /* this+0x4 */ unsigned int LeadingZero;
  /* this+0x8 */ unsigned int Grouping;
  /* this+0xc */ wchar_t * lpDecimalSep;
  /* this+0x10 */ wchar_t * lpThousandSep;
  /* this+0x14 */ unsigned int NegativeOrder;
  /* this+0x18 */ unsigned int PositiveOrder;
  /* this+0x1c */ wchar_t * lpCurrencySymbol;
}

struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
  /* this+0x0 */ wchar_t * pmszRequiredPrivileges;
}

struct tagMCI_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned int wDeviceID;
  /* this+0x8 */ const wchar_t * lpstrDeviceType;
  /* this+0xc */ const wchar_t * lpstrElementName;
  /* this+0x10 */ const wchar_t * lpstrAlias;
}

struct _TOKEN_DEFAULT_DACL {
  /* this+0x0 */ struct _ACL * DefaultDacl;
}

struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
  /* this+0x0 */ struct _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
}

struct _devicemodeA {
  /* this+0x0 */ unsigned char[0x20] dmDeviceName;
  /* this+0x20 */ unsigned short dmSpecVersion;
  /* this+0x22 */ unsigned short dmDriverVersion;
  /* this+0x24 */ unsigned short dmSize;
  /* this+0x26 */ unsigned short dmDriverExtra;
  /* this+0x28 */ unsigned long dmFields;
  /* this+0x2c */ short dmOrientation;
  /* this+0x2e */ short dmPaperSize;
  /* this+0x30 */ short dmPaperLength;
  /* this+0x32 */ short dmPaperWidth;
  /* this+0x34 */ short dmScale;
  /* this+0x36 */ short dmCopies;
  /* this+0x38 */ short dmDefaultSource;
  /* this+0x3a */ short dmPrintQuality;
  /* this+0x2c */ struct _POINTL dmPosition;
  /* this+0x34 */ unsigned long dmDisplayOrientation;
  /* this+0x38 */ unsigned long dmDisplayFixedOutput;
  /* this+0x3c */ short dmColor;
  /* this+0x3e */ short dmDuplex;
  /* this+0x40 */ short dmYResolution;
  /* this+0x42 */ short dmTTOption;
  /* this+0x44 */ short dmCollate;
  /* this+0x46 */ unsigned char[0x20] dmFormName;
  /* this+0x66 */ unsigned short dmLogPixels;
  /* this+0x68 */ unsigned long dmBitsPerPel;
  /* this+0x6c */ unsigned long dmPelsWidth;
  /* this+0x70 */ unsigned long dmPelsHeight;
  /* this+0x74 */ unsigned long dmDisplayFlags;
  /* this+0x74 */ unsigned long dmNup;
  /* this+0x78 */ unsigned long dmDisplayFrequency;
  /* this+0x7c */ unsigned long dmICMMethod;
  /* this+0x80 */ unsigned long dmICMIntent;
  /* this+0x84 */ unsigned long dmMediaType;
  /* this+0x88 */ unsigned long dmDitherType;
  /* this+0x8c */ unsigned long dmReserved1;
  /* this+0x90 */ unsigned long dmReserved2;
  /* this+0x94 */ unsigned long dmPanningWidth;
  /* this+0x98 */ unsigned long dmPanningHeight;
}

struct tagEMRLINETO {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _POINTL ptl;
}

struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
  /* this+0x0 */ unsigned long dwDataType;
  /* this+0x4 */ unsigned long cbData;
  /* this+0x8 */ unsigned char * pData;
}

struct PACKET_ZC_SKILL_ENTRY4 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long creatorAID;
  /* this+0xc */ short xPos;
  /* this+0xe */ short yPos;
  /* this+0x10 */ int job;
  /* this+0x14 */ char RadiusRange;
  /* this+0x15 */ bool isVisible;
}

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
      /* this+0x0 */ unsigned long Name;
  /* this+0x0 */ unsigned short Id;
  /* this+0x4 */ unsigned long OffsetToData;
    }

struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
  /* this+0x0 */ unsigned long ulFlags;
  /* this+0x4 */ enum ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
  /* this+0x8 */ unsigned long UiAccess;
}

struct _GRADIENT_TRIANGLE {
  /* this+0x0 */ unsigned long Vertex1;
  /* this+0x4 */ unsigned long Vertex2;
  /* this+0x8 */ unsigned long Vertex3;
}

struct tagEMRROUNDRECT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBox;
  /* this+0x18 */ struct tagSIZE szlCorner;
}

struct tagMIXERCAPSW {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned long fdwSupport;
  /* this+0x4c */ unsigned long cDestinations;
}

struct PACKET_ZC_USE_ITEM_ACK2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned short id;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ short count;
  /* this+0xc */ bool result;
}

struct PACKET_ZC_DEL_QUEST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long questID;
}

struct _ADMINISTRATOR_POWER_POLICY {
  /* this+0x0 */ enum _SYSTEM_POWER_STATE MinSleep;
  /* this+0x4 */ enum _SYSTEM_POWER_STATE MaxSleep;
  /* this+0x8 */ unsigned long MinVideoTimeout;
  /* this+0xc */ unsigned long MaxVideoTimeout;
  /* this+0x10 */ unsigned long MinSpindownTimeout;
  /* this+0x14 */ unsigned long MaxSpindownTimeout;
}

struct _IMAGE_FILE_HEADER {
  /* this+0x0 */ unsigned short Machine;
  /* this+0x2 */ unsigned short NumberOfSections;
  /* this+0x4 */ unsigned long TimeDateStamp;
  /* this+0x8 */ unsigned long PointerToSymbolTable;
  /* this+0xc */ unsigned long NumberOfSymbols;
  /* this+0x10 */ unsigned short SizeOfOptionalHeader;
  /* this+0x12 */ unsigned short Characteristics;
}

struct _IMAGE_OPTIONAL_HEADER {
  /* this+0x0 */ unsigned short Magic;
  /* this+0x2 */ unsigned char MajorLinkerVersion;
  /* this+0x3 */ unsigned char MinorLinkerVersion;
  /* this+0x4 */ unsigned long SizeOfCode;
  /* this+0x8 */ unsigned long SizeOfInitializedData;
  /* this+0xc */ unsigned long SizeOfUninitializedData;
  /* this+0x10 */ unsigned long AddressOfEntryPoint;
  /* this+0x14 */ unsigned long BaseOfCode;
  /* this+0x18 */ unsigned long BaseOfData;
  /* this+0x1c */ unsigned long ImageBase;
  /* this+0x20 */ unsigned long SectionAlignment;
  /* this+0x24 */ unsigned long FileAlignment;
  /* this+0x28 */ unsigned short MajorOperatingSystemVersion;
  /* this+0x2a */ unsigned short MinorOperatingSystemVersion;
  /* this+0x2c */ unsigned short MajorImageVersion;
  /* this+0x2e */ unsigned short MinorImageVersion;
  /* this+0x30 */ unsigned short MajorSubsystemVersion;
  /* this+0x32 */ unsigned short MinorSubsystemVersion;
  /* this+0x34 */ unsigned long Win32VersionValue;
  /* this+0x38 */ unsigned long SizeOfImage;
  /* this+0x3c */ unsigned long SizeOfHeaders;
  /* this+0x40 */ unsigned long CheckSum;
  /* this+0x44 */ unsigned short Subsystem;
  /* this+0x46 */ unsigned short DllCharacteristics;
  /* this+0x48 */ unsigned long SizeOfStackReserve;
  /* this+0x4c */ unsigned long SizeOfStackCommit;
  /* this+0x50 */ unsigned long SizeOfHeapReserve;
  /* this+0x54 */ unsigned long SizeOfHeapCommit;
  /* this+0x58 */ unsigned long LoaderFlags;
  /* this+0x5c */ unsigned long NumberOfRvaAndSizes;
  /* this+0x60 */ struct _IMAGE_DATA_DIRECTORY[0x10] DataDirectory;
}

struct _IMAGE_NT_HEADERS {
  /* this+0x0 */ unsigned long Signature;
  /* this+0x4 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* this+0x18 */ struct _IMAGE_OPTIONAL_HEADER OptionalHeader;
}

struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
  /* this+0x0 */ unsigned long ulFlags;
  /* this+0x4 */ unsigned long ulFilenameLength;
  /* this+0x8 */ unsigned long ulPathLength;
  /* this+0xc */ const wchar_t * lpFileName;
  /* this+0x10 */ const wchar_t * lpFilePath;
}

struct _UNLOAD_DLL_DEBUG_INFO {
  /* this+0x0 */ void * lpBaseOfDll;
}

struct tagLOGPEN {
  /* this+0x0 */ unsigned int lopnStyle;
  /* this+0x4 */ struct tagPOINT lopnWidth;
  /* this+0xc */ unsigned long lopnColor;
}

struct _REMOTE_NAME_INFOW {
  /* this+0x0 */ wchar_t * lpUniversalName;
  /* this+0x4 */ wchar_t * lpConnectionName;
  /* this+0x8 */ wchar_t * lpRemainingPath;
}

struct tagMIDIOUTCAPS2W {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned short wTechnology;
  /* this+0x4a */ unsigned short wVoices;
  /* this+0x4c */ unsigned short wNotes;
  /* this+0x4e */ unsigned short wChannelMask;
  /* this+0x50 */ unsigned long dwSupport;
  /* this+0x54 */ struct _GUID ManufacturerGuid;
  /* this+0x64 */ struct _GUID ProductGuid;
  /* this+0x74 */ struct _GUID NameGuid;
}

struct _CONSOLE_READCONSOLE_CONTROL {
  /* this+0x0 */ unsigned long nLength;
  /* this+0x4 */ unsigned long nInitialChars;
  /* this+0x8 */ unsigned long dwCtrlWakeupMask;
  /* this+0xc */ unsigned long dwControlKeyState;
}

struct _MMIOINFO {
  /* this+0x0 */ unsigned long dwFlags;
  /* this+0x4 */ unsigned long fccIOProc;
  /* this+0x8 */ function  * pIOProc;
  /* this+0xc */ unsigned int wErrorRet;
  /* this+0x10 */ struct HTASK__ * htask;
  /* this+0x14 */ long cchBuffer;
  /* this+0x18 */ char * pchBuffer;
  /* this+0x1c */ char * pchNext;
  /* this+0x20 */ char * pchEndRead;
  /* this+0x24 */ char * pchEndWrite;
  /* this+0x28 */ long lBufOffset;
  /* this+0x2c */ long lDiskOffset;
  /* this+0x30 */ unsigned long[0x3] adwInfo;
  /* this+0x3c */ unsigned long dwReserved1;
  /* this+0x40 */ unsigned long dwReserved2;
  /* this+0x44 */ struct HMMIO__ * hmmio;
}

struct PACKET_ZC_PCBANG_EFFECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int ExpFactor;
  /* this+0x6 */ int ExpFactor2;
  /* this+0xa */ int DropFactor;
}

struct _RIP_INFO {
  /* this+0x0 */ unsigned long dwError;
  /* this+0x4 */ unsigned long dwType;
}

struct tagLOGBRUSH32 {
  /* this+0x0 */ unsigned int lbStyle;
  /* this+0x4 */ unsigned long lbColor;
  /* this+0x8 */ unsigned long lbHatch;
}

struct tagKBDLLHOOKSTRUCT {
  /* this+0x0 */ unsigned long vkCode;
  /* this+0x4 */ unsigned long scanCode;
  /* this+0x8 */ unsigned long flags;
  /* this+0xc */ unsigned long time;
  /* this+0x10 */ unsigned long dwExtraInfo;
}

struct PACKET_ZC_REFUSE_ENTER_ROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct tagLOGBRUSH {
  /* this+0x0 */ unsigned int lbStyle;
  /* this+0x4 */ unsigned long lbColor;
  /* this+0x8 */ unsigned long lbHatch;
}

struct waveformat_tag {
  /* this+0x0 */ unsigned short wFormatTag;
  /* this+0x2 */ unsigned short nChannels;
  /* this+0x4 */ unsigned long nSamplesPerSec;
  /* this+0x8 */ unsigned long nAvgBytesPerSec;
  /* this+0xc */ unsigned short nBlockAlign;
}

struct PACKET_ZC_REQ_WEAR_EQUIP_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned short wearLocation;
  /* this+0x6 */ unsigned short wItemSpriteNumber;
  /* this+0x8 */ unsigned char result;
}

struct PACKET_CZ_UPGRADE_SKILLLEVEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
}

struct PACKET_HC_EDIT_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Result;
  /* this+0x4 */ unsigned long Seed;
}

struct PACKET_CZ_REQ_TAKEOFF_EQUIP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
}

struct _XSTATE_CONTEXT {
  /* this+0x0 */ unsigned __int64 Mask;
  /* this+0x8 */ unsigned long Length;
  /* this+0xc */ unsigned long Reserved1;
  /* this+0x10 */ struct _XSAVE_AREA * Area;
  /* this+0x14 */ unsigned long Reserved2;
  /* this+0x18 */ void * Buffer;
  /* this+0x1c */ unsigned long Reserved3;
}

struct tagCOLORMATCHTOTARGET {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long dwAction;
  /* this+0xc */ unsigned long dwFlags;
  /* this+0x10 */ unsigned long cbName;
  /* this+0x14 */ unsigned long cbData;
  /* this+0x18 */ unsigned char[0x1] Data;
}

struct tagMIXERCAPS2A {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned long fdwSupport;
  /* this+0x2c */ unsigned long cDestinations;
  /* this+0x30 */ struct _GUID ManufacturerGuid;
  /* this+0x40 */ struct _GUID ProductGuid;
  /* this+0x50 */ struct _GUID NameGuid;
}

struct PACKET_ZC_REQ_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
}

struct PACKET_CZ_REQUEST_TIME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long clientTime;
}

struct _FILE_RENAME_INFO {
  /* this+0x0 */ unsigned char ReplaceIfExists;
  /* this+0x4 */ void * RootDirectory;
  /* this+0x8 */ unsigned long FileNameLength;
  /* this+0xc */ wchar_t[0x1] FileName;
}

struct _ABC {
  /* this+0x0 */ int abcA;
  /* this+0x4 */ unsigned int abcB;
  /* this+0x8 */ int abcC;
}

struct tagJOYCAPS2A {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ char[0x20] szPname;
  /* this+0x24 */ unsigned int wXmin;
  /* this+0x28 */ unsigned int wXmax;
  /* this+0x2c */ unsigned int wYmin;
  /* this+0x30 */ unsigned int wYmax;
  /* this+0x34 */ unsigned int wZmin;
  /* this+0x38 */ unsigned int wZmax;
  /* this+0x3c */ unsigned int wNumButtons;
  /* this+0x40 */ unsigned int wPeriodMin;
  /* this+0x44 */ unsigned int wPeriodMax;
  /* this+0x48 */ unsigned int wRmin;
  /* this+0x4c */ unsigned int wRmax;
  /* this+0x50 */ unsigned int wUmin;
  /* this+0x54 */ unsigned int wUmax;
  /* this+0x58 */ unsigned int wVmin;
  /* this+0x5c */ unsigned int wVmax;
  /* this+0x60 */ unsigned int wCaps;
  /* this+0x64 */ unsigned int wMaxAxes;
  /* this+0x68 */ unsigned int wNumAxes;
  /* this+0x6c */ unsigned int wMaxButtons;
  /* this+0x70 */ char[0x20] szRegKey;
  /* this+0x90 */ char[0x104] szOEMVxD;
  /* this+0x194 */ struct _GUID ManufacturerGuid;
  /* this+0x1a4 */ struct _GUID ProductGuid;
  /* this+0x1b4 */ struct _GUID NameGuid;
}

struct tagMCI_ANIM_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned int wDeviceID;
  /* this+0x8 */ const char * lpstrDeviceType;
  /* this+0xc */ const char * lpstrElementName;
  /* this+0x10 */ const char * lpstrAlias;
  /* this+0x14 */ unsigned long dwStyle;
  /* this+0x18 */ struct HWND__ * hWndParent;
}

struct PACKET_ZC_CART_NORMAL_ITEMLIST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct _NETINFOSTRUCT {
  /* this+0x0 */ unsigned long cbStructure;
  /* this+0x4 */ unsigned long dwProviderVersion;
  /* this+0x8 */ unsigned long dwStatus;
  /* this+0xc */ unsigned long dwCharacteristics;
  /* this+0x10 */ unsigned long dwHandle;
  /* this+0x14 */ unsigned short wNetType;
  /* this+0x18 */ unsigned long dwPrinters;
  /* this+0x1c */ unsigned long dwDrives;
}

struct PACKET_ZC_NOTIFY_INITCHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GID;
  /* this+0x8 */ short Style;
  /* this+0xa */ unsigned char Item;
}

struct PACKET_ZC_ACK_MERGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short item_index;
  /* this+0x4 */ unsigned short item_count;
  /* this+0x6 */ unsigned char Result;
}

struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long Flags;
  /* this+0xc */ struct _GUID ObjectType;
  /* this+0x1c */ struct _GUID InheritedObjectType;
  /* this+0x2c */ unsigned long SidStart;
}

struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
  /* this+0x0 */ struct _GUID TmIdentity;
  /* this+0x10 */ unsigned long Flags;
}

struct PACKET_ZC_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long otherAID;
  /* this+0x6 */ char[0x18] guildName;
}

struct HKEY__ {
  /* this+0x0 */ int unused;
}

struct _OVERLAPPED_ENTRY {
  /* this+0x0 */ unsigned long lpCompletionKey;
  /* this+0x4 */ struct _OVERLAPPED * lpOverlapped;
  /* this+0x8 */ unsigned long Internal;
  /* this+0xc */ unsigned long dwNumberOfBytesTransferred;
}

struct tagEMRSELECTPALETTE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihPal;
}

struct hostent {
  /* this+0x0 */ char * h_name;
  /* this+0x4 */ char * * h_aliases;
  /* this+0x8 */ short h_addrtype;
  /* this+0xa */ short h_length;
  /* this+0xc */ char * * h_addr_list;
}

struct _WOW64_FLOATING_SAVE_AREA {
  /* this+0x0 */ unsigned long ControlWord;
  /* this+0x4 */ unsigned long StatusWord;
  /* this+0x8 */ unsigned long TagWord;
  /* this+0xc */ unsigned long ErrorOffset;
  /* this+0x10 */ unsigned long ErrorSelector;
  /* this+0x14 */ unsigned long DataOffset;
  /* this+0x18 */ unsigned long DataSelector;
  /* this+0x1c */ unsigned char[0x50] RegisterArea;
  /* this+0x6c */ unsigned long Cr0NpxState;
}

struct _WOW64_CONTEXT {
  /* this+0x0 */ unsigned long ContextFlags;
  /* this+0x4 */ unsigned long Dr0;
  /* this+0x8 */ unsigned long Dr1;
  /* this+0xc */ unsigned long Dr2;
  /* this+0x10 */ unsigned long Dr3;
  /* this+0x14 */ unsigned long Dr6;
  /* this+0x18 */ unsigned long Dr7;
  /* this+0x1c */ struct _WOW64_FLOATING_SAVE_AREA FloatSave;
  /* this+0x8c */ unsigned long SegGs;
  /* this+0x90 */ unsigned long SegFs;
  /* this+0x94 */ unsigned long SegEs;
  /* this+0x98 */ unsigned long SegDs;
  /* this+0x9c */ unsigned long Edi;
  /* this+0xa0 */ unsigned long Esi;
  /* this+0xa4 */ unsigned long Ebx;
  /* this+0xa8 */ unsigned long Edx;
  /* this+0xac */ unsigned long Ecx;
  /* this+0xb0 */ unsigned long Eax;
  /* this+0xb4 */ unsigned long Ebp;
  /* this+0xb8 */ unsigned long Eip;
  /* this+0xbc */ unsigned long SegCs;
  /* this+0xc0 */ unsigned long EFlags;
  /* this+0xc4 */ unsigned long Esp;
  /* this+0xc8 */ unsigned long SegSs;
  /* this+0xcc */ unsigned char[0x200] ExtendedRegisters;
}

struct tagENUMLOGFONTEXDVA {
  /* this+0x0 */ struct tagENUMLOGFONTEXA elfEnumLogfontEx;
  /* this+0xbc */ struct tagDESIGNVECTOR elfDesignVector;
}

struct tagDRAWTEXTPARAMS {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ int iTabLength;
  /* this+0x8 */ int iLeftMargin;
  /* this+0xc */ int iRightMargin;
  /* this+0x10 */ unsigned int uiLengthDrawn;
}

struct PACKET_ZC_NOTIFY_MOVEENTRY4 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char objecttype;
  /* this+0x3 */ unsigned long GID;
  /* this+0x7 */ short speed;
  /* this+0x9 */ short bodyState;
  /* this+0xb */ short healthState;
  /* this+0xd */ int effectState;
  /* this+0x11 */ short job;
  /* this+0x13 */ short head;
  /* this+0x15 */ int weapon;
  /* this+0x19 */ short accessory;
  /* this+0x1b */ unsigned long moveStartTime;
  /* this+0x1f */ short accessory2;
  /* this+0x21 */ short accessory3;
  /* this+0x23 */ short headpalette;
  /* this+0x25 */ short bodypalette;
  /* this+0x27 */ short headDir;
  /* this+0x29 */ unsigned long GUID;
  /* this+0x2d */ short GEmblemVer;
  /* this+0x2f */ short honor;
  /* this+0x31 */ int virtue;
  /* this+0x35 */ bool isPKModeON;
  /* this+0x36 */ unsigned char sex;
  /* this+0x37 */ unsigned char[0x6] MoveData;
  /* this+0x3d */ unsigned char xSize;
  /* this+0x3e */ unsigned char ySize;
  /* this+0x3f */ short clevel;
  /* this+0x41 */ short font;
}

struct _TOKEN_ORIGIN {
  /* this+0x0 */ struct _LUID OriginatingLogonSession;
}

struct _WSAQuerySetW {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ wchar_t * lpszServiceInstanceName;
  /* this+0x8 */ struct _GUID * lpServiceClassId;
  /* this+0xc */ struct _WSAVersion * lpVersion;
  /* this+0x10 */ wchar_t * lpszComment;
  /* this+0x14 */ unsigned long dwNameSpace;
  /* this+0x18 */ struct _GUID * lpNSProviderId;
  /* this+0x1c */ wchar_t * lpszContext;
  /* this+0x20 */ unsigned long dwNumberOfProtocols;
  /* this+0x24 */ struct _AFPROTOCOLS * lpafpProtocols;
  /* this+0x28 */ wchar_t * lpszQueryString;
  /* this+0x2c */ unsigned long dwNumberOfCsAddrs;
  /* this+0x30 */ struct _CSADDR_INFO * lpcsaBuffer;
  /* this+0x34 */ unsigned long dwOutputFlags;
  /* this+0x38 */ struct _BLOB * lpBlob;
}

struct tagMIXERLINEW::<unnamed-type-Target> {
  /* this+0x0 */ unsigned long dwType;
  /* this+0x4 */ unsigned long dwDeviceID;
  /* this+0x8 */ unsigned short wMid;
  /* this+0xa */ unsigned short wPid;
  /* this+0xc */ unsigned int vDriverVersion;
  /* this+0x10 */ wchar_t[0x20] szPname;
}

struct _HARDWARE_COUNTER_DATA {
  /* this+0x0 */ enum _HARDWARE_COUNTER_TYPE Type;
  /* this+0x4 */ unsigned long Reserved;
  /* this+0x8 */ unsigned __int64 Value;
}

struct tagPELARRAY {
  /* this+0x0 */ long paXCount;
  /* this+0x4 */ long paYCount;
  /* this+0x8 */ long paXExt;
  /* this+0xc */ long paYExt;
  /* this+0x10 */ unsigned char paRGBs;
}

struct tagMDICREATESTRUCTA {
  /* this+0x0 */ const char * szClass;
  /* this+0x4 */ const char * szTitle;
  /* this+0x8 */ void * hOwner;
  /* this+0xc */ int x;
  /* this+0x10 */ int y;
  /* this+0x14 */ int cx;
  /* this+0x18 */ int cy;
  /* this+0x1c */ unsigned long style;
  /* this+0x20 */ long lParam;
}

struct tagSTYLEBUFW {
  /* this+0x0 */ unsigned long dwStyle;
  /* this+0x4 */ wchar_t[0x20] szDescription;
}

struct _WSANSClassInfoA {
  /* this+0x0 */ char * lpszName;
  /* this+0x4 */ unsigned long dwNameSpace;
  /* this+0x8 */ unsigned long dwValueType;
  /* this+0xc */ unsigned long dwValueSize;
  /* this+0x10 */ void * lpValue;
}

struct tagMCI_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned int wDeviceID;
  /* this+0x8 */ const char * lpstrDeviceType;
  /* this+0xc */ const char * lpstrElementName;
  /* this+0x10 */ const char * lpstrAlias;
}

struct tagMCI_SAVE_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const wchar_t * lpfilename;
}

struct _GROUP_AFFINITY {
  /* this+0x0 */ unsigned long Mask;
  /* this+0x4 */ unsigned short Group;
  /* this+0x6 */ unsigned short[0x3] Reserved;
}

struct _PROCESSOR_RELATIONSHIP {
  /* this+0x0 */ unsigned char Flags;
  /* this+0x1 */ unsigned char[0x15] Reserved;
  /* this+0x16 */ unsigned short GroupCount;
  /* this+0x18 */ struct _GROUP_AFFINITY[0x1] GroupMask;
}

struct _POINTFLOAT {
  /* this+0x0 */ float x;
  /* this+0x4 */ float y;
}

struct _GLYPHMETRICSFLOAT {
  /* this+0x0 */ float gmfBlackBoxX;
  /* this+0x4 */ float gmfBlackBoxY;
  /* this+0x8 */ struct _POINTFLOAT gmfptGlyphOrigin;
  /* this+0x10 */ float gmfCellIncX;
  /* this+0x14 */ float gmfCellIncY;
}

struct _SOCKET_ADDRESS {
  /* this+0x0 */ struct sockaddr * lpSockaddr;
  /* this+0x4 */ int iSockaddrLength;
}

struct tagDATE_STRUCT {
  /* this+0x0 */ short year;
  /* this+0x2 */ unsigned short month;
  /* this+0x4 */ unsigned short day;
}

struct PACKET_ZC_SKILL_ENTRY2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long creatorAID;
  /* this+0xa */ short xPos;
  /* this+0xc */ short yPos;
  /* this+0xe */ unsigned char job;
  /* this+0xf */ bool isVisible;
  /* this+0x10 */ bool isContens;
  /* this+0x11 */ char[0x50] msg;
}

struct _SYSTEM_ALARM_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long SidStart;
}

struct _ACL {
  /* this+0x0 */ unsigned char AclRevision;
  /* this+0x1 */ unsigned char Sbz1;
  /* this+0x2 */ unsigned short AclSize;
  /* this+0x4 */ unsigned short AceCount;
  /* this+0x6 */ unsigned short Sbz2;
}

struct _IMAGE_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long StartingAddress;
  /* this+0x4 */ unsigned long EndingAddress;
  /* this+0x8 */ unsigned long EndOfPrologue;
}

struct tagFONTSIGNATURE {
  /* this+0x0 */ unsigned long[0x4] fsUsb;
  /* this+0x10 */ unsigned long[0x2] fsCsb;
}

struct _SERVICE_NOTIFY_2W {
  /* this+0x0 */ unsigned long dwVersion;
  /* this+0x4 */ function  * pfnNotifyCallback;
  /* this+0x8 */ void * pContext;
  /* this+0xc */ unsigned long dwNotificationStatus;
  /* this+0x10 */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
  /* this+0x34 */ unsigned long dwNotificationTriggered;
  /* this+0x38 */ wchar_t * pszServiceNames;
}

struct PACKET_CA_REPLY_PNGAMEROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Permission;
}

struct PACKET_CZ_MAIL_OPEN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
}

struct _IMAGE_OS2_HEADER {
  /* this+0x0 */ unsigned short ne_magic;
  /* this+0x2 */ char ne_ver;
  /* this+0x3 */ char ne_rev;
  /* this+0x4 */ unsigned short ne_enttab;
  /* this+0x6 */ unsigned short ne_cbenttab;
  /* this+0x8 */ long ne_crc;
  /* this+0xc */ unsigned short ne_flags;
  /* this+0xe */ unsigned short ne_autodata;
  /* this+0x10 */ unsigned short ne_heap;
  /* this+0x12 */ unsigned short ne_stack;
  /* this+0x14 */ long ne_csip;
  /* this+0x18 */ long ne_sssp;
  /* this+0x1c */ unsigned short ne_cseg;
  /* this+0x1e */ unsigned short ne_cmod;
  /* this+0x20 */ unsigned short ne_cbnrestab;
  /* this+0x22 */ unsigned short ne_segtab;
  /* this+0x24 */ unsigned short ne_rsrctab;
  /* this+0x26 */ unsigned short ne_restab;
  /* this+0x28 */ unsigned short ne_modtab;
  /* this+0x2a */ unsigned short ne_imptab;
  /* this+0x2c */ long ne_nrestab;
  /* this+0x30 */ unsigned short ne_cmovent;
  /* this+0x32 */ unsigned short ne_align;
  /* this+0x34 */ unsigned short ne_cres;
  /* this+0x36 */ unsigned char ne_exetyp;
  /* this+0x37 */ unsigned char ne_flagsothers;
  /* this+0x38 */ unsigned short ne_pretthunks;
  /* this+0x3a */ unsigned short ne_psegrefbytes;
  /* this+0x3c */ unsigned short ne_swaparea;
  /* this+0x3e */ unsigned short ne_expver;
}

struct _MESSAGE_RESOURCE_BLOCK {
  /* this+0x0 */ unsigned long LowId;
  /* this+0x4 */ unsigned long HighId;
  /* this+0x8 */ unsigned long OffsetToEntries;
}

struct tagACTCTXA {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ const char * lpSource;
  /* this+0xc */ unsigned short wProcessorArchitecture;
  /* this+0xe */ unsigned short wLangId;
  /* this+0x10 */ const char * lpAssemblyDirectory;
  /* this+0x14 */ const char * lpResourceName;
  /* this+0x18 */ const char * lpApplicationName;
  /* this+0x1c */ struct HINSTANCE__ * hModule;
}

struct _WSANAMESPACE_INFOA {
  /* this+0x0 */ struct _GUID NSProviderId;
  /* this+0x10 */ unsigned long dwNameSpace;
  /* this+0x14 */ int fActive;
  /* this+0x18 */ unsigned long dwVersion;
  /* this+0x1c */ char * lpszIdentifier;
}

struct PACKET_HC_NOT_AVAILABLE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Result;
  /* this+0x4 */ unsigned long Seed;
}

struct _ENLISTMENT_CRM_INFORMATION {
  /* this+0x0 */ struct _GUID CrmTransactionManagerId;
  /* this+0x10 */ struct _GUID CrmResourceManagerId;
  /* this+0x20 */ struct _GUID CrmEnlistmentId;
}

struct tagEMRSETDIBITSTODEVICE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ long xDest;
  /* this+0x1c */ long yDest;
  /* this+0x20 */ long xSrc;
  /* this+0x24 */ long ySrc;
  /* this+0x28 */ long cxSrc;
  /* this+0x2c */ long cySrc;
  /* this+0x30 */ unsigned long offBmiSrc;
  /* this+0x34 */ unsigned long cbBmiSrc;
  /* this+0x38 */ unsigned long offBitsSrc;
  /* this+0x3c */ unsigned long cbBitsSrc;
  /* this+0x40 */ unsigned long iUsageSrc;
  /* this+0x44 */ unsigned long iStartScan;
  /* this+0x48 */ unsigned long cScans;
}

struct _SERVICE_DELAYED_AUTO_START_INFO {
  /* this+0x0 */ int fDelayedAutostart;
}

struct PACKET_CZ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
}

struct PACKET_HC_DELETE_CHAR3_RESERVED {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ int Result;
  /* this+0xa */ long DeleteReservedDate;
}

struct tagMCI_PLAY_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwFrom;
  /* this+0x8 */ unsigned long dwTo;
}

struct PACKET_AC_NOTIFY_ERROR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_ZC_STORE_ITEMLIST_NORMAL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct tagACTCTXW {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ const wchar_t * lpSource;
  /* this+0xc */ unsigned short wProcessorArchitecture;
  /* this+0xe */ unsigned short wLangId;
  /* this+0x10 */ const wchar_t * lpAssemblyDirectory;
  /* this+0x14 */ const wchar_t * lpResourceName;
  /* this+0x18 */ const wchar_t * lpApplicationName;
  /* this+0x1c */ struct HINSTANCE__ * hModule;
}

struct _FILE_ALLOCATION_INFO {
  /* this+0x0 */ union _LARGE_INTEGER AllocationSize;
}

struct std::_Arithmetic_traits<int> {
  }

class std::basic_ostringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > {
}

struct std::tr1::integral_constant<bool,0> {
  }

struct std::is_error_code_enum<std::error_condition> {
  }

class std::_Init_locks {
}

struct std::is_error_condition_enum<int> {
  }

struct std::tr1::integral_constant<bool,1> {
  }

struct std::is_error_condition_enum<enum std::errc::errc> {
  }

struct std::_Arithmetic_traits<__int64> {
  }

struct std::is_error_condition_enum<std::error_condition> {
  }

struct std::iterator_traits<unsigned short> {
}

class std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > {
}

struct std::_Arithmetic_traits<unsigned __int64> {
  }

struct std::_Arithmetic_traits<signed char> {
  }

struct std::_DebugHeapTag_t {
  /* this+0x0 */ int _Type;
}

struct std::is_error_code_enum<int> {
  }

struct std::_Arithmetic_traits<short> {
  }

struct std::_Pickinteger<1> {
}

struct std::iterator<std::output_iterator_tag,void,void,void,void> {
}

struct std::_Outit {
}

class std::basic_fstream<wchar_t,std::char_traits<wchar_t> > {
}

struct std::is_error_code_enum<enum std::io_errc::io_errc> {
  }

struct std::iterator_traits<unsigned long> {
}

struct std::is_error_code_enum<std::ios_base::failure> {
  }

class std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > {
}

class std::basic_filebuf<char,std::char_traits<char> > {
}

class std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > {
}

struct std::_Arithmetic_traits<long> {
  }

struct std::is_error_code_enum<enum std::errc::errc> {
  }

struct std::_Arithmetic_traits<unsigned long> {
  }

struct std::is_error_condition_enum<std::allocator<char> > {
  }

struct std::identity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > {
}

struct std::is_error_condition_enum<enum std::io_errc::io_errc> {
  }

struct std::iterator_traits<short> {
}

class std::bad_typeid {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

struct std::_Arithmetic_traits<double> {
  }

class std::basic_ifstream<char,std::char_traits<char> > {
}

struct std::iterator_traits<unsigned __int64> {
}

struct std::iterator_traits<signed char> {
}

class std::basic_ifstream<wchar_t,std::char_traits<wchar_t> > {
}

class std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > {
}

struct std::_Facetptr<std::ctype<char> > {
  }

struct std::tr1::_Is_integral<bool> {
  }

struct std::tr1::add_reference<void const > {
}

struct std::tr1::_Is_floating_point<double> {
  }

struct std::tr1::_Is_floating_point<float> {
  }

struct std::tr1::_Get_align<short> {
  /* this+0x0 */ short _Elt0;
  /* this+0x2 */ char _Elt1;
  /* this+0x4 */ short _Elt2;
}

struct std::tr1::_Remove_reference<std::locale * &> {
}

struct std::tr1::_Get_align<char> {
  /* this+0x0 */ char _Elt0;
  /* this+0x1 */ char _Elt1;
  /* this+0x2 */ char _Elt2;
}

struct std::tr1::_Or<1,0> {
  }

struct std::tr1::_Is_integral<signed char> {
  }

struct std::tr1::_Cat_base<0> {
  }

struct std::tr1::_Is_integral<unsigned int> {
  }

struct std::tr1::_Or<0,0> {
  }

struct std::tr1::_Is_integral<unsigned __int64> {
  }

struct std::tr1::integral_constant<unsigned int,0> {
  }

struct std::tr1::_Is_void<void> {
  }

struct std::tr1::_Const_tag {
}

struct std::tr1::add_rvalue_reference<void> {
}

struct std::tr1::_Remove_reference<std::ios_base::_Iosarray * &> {
}

struct std::tr1::_Is_integral<char> {
  }

struct std::tr1::_Is_integral<unsigned short> {
  }

struct std::tr1::add_rvalue_reference<void const > {
}

struct std::tr1::_Is_integral<long> {
  }

struct std::tr1::_Remove_reference<__int64 &> {
}

struct std::tr1::_Dynamic_tag {
}

struct std::tr1::_Is_integral<int> {
  }

struct std::tr1::add_rvalue_reference<void const volatile > {
}

struct std::tr1::_Cat_base<1> {
  }

struct std::tr1::add_reference<void const volatile > {
}

struct std::tr1::_Remove_reference<int &> {
}

struct std::tr1::_Is_integral<__int64> {
  }

struct std::tr1::_Static_tag {
}

struct std::tr1::_Get_align<long> {
  /* this+0x0 */ long _Elt0;
  /* this+0x4 */ char _Elt1;
  /* this+0x8 */ long _Elt2;
}

struct std::tr1::add_reference<void> {
}

struct std::tr1::enable_if<1,std::error_condition> {
}

struct std::tr1::_Get_align<int> {
  /* this+0x0 */ int _Elt0;
  /* this+0x4 */ char _Elt1;
  /* this+0x8 */ int _Elt2;
}

struct std::tr1::_Is_integral<unsigned long> {
  }

struct std::tr1::_Or<0,1> {
  }

struct std::tr1::add_reference<void volatile > {
}

struct std::tr1::_Remove_reference<std::ios_base::_Fnarray * &> {
}

struct std::tr1::_Is_integral<unsigned char> {
  }

struct std::tr1::add_rvalue_reference<void volatile > {
}

struct std::tr1::enable_if<0,std::error_code> {
}

struct std::tr1::_Is_integral<short> {
  }

struct std::tr1::_Is_floating_point<long double> {
  }

struct std::tr1::enable_if<0,std::error_condition> {
}

struct std::tr1::_Is_integral<wchar_t> {
  }

struct std::tr1::_Or<1,1> {
  }

struct std::iterator_traits<__int64> {
}

class std::basic_fstream<char,std::char_traits<char> > {
}

class std::__non_rtti_object {
  /* this+0x4 */ const char * _Mywhat;
  /* this+0x8 */ bool _Mydofree;
}

struct std::iterator_traits<unsigned int> {
}

class std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> > {
}

struct std::_Arithmetic_traits<char> {
  }

struct std::_Arithmetic_traits<long double> {
  }

struct std::iterator_traits<char> {
}

struct std::_Arithmetic_traits<unsigned char> {
  }

class std::basic_ofstream<char,std::char_traits<char> > {
}

struct std::is_error_condition_enum<std::error_code> {
  }

class std::basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > {
}

class std::basic_iostream<wchar_t,std::char_traits<wchar_t> > {
}

struct std::identity<std::allocator<char> > {
}

struct std::iterator_traits<unsigned char> {
}

struct std::iterator_traits<int> {
}

class std::basic_filebuf<wchar_t,std::char_traits<wchar_t> > {
}

struct std::iterator_traits<bool> {
}

class std::basic_ofstream<wchar_t,std::char_traits<wchar_t> > {
}

struct std::is_error_code_enum<std::error_code> {
  }

class std::basic_string<unsigned int,std::char_traits<unsigned int>,std::allocator<unsigned int> > {
}

struct std::iterator_traits<wchar_t> {
}

struct std::_Arithmetic_traits<bool> {
  }

struct std::_Arithmetic_traits<float> {
  }

struct std::_Arithmetic_traits<unsigned short> {
  }

class std::basic_iostream<char,std::char_traits<char> > {
}

struct std::iterator_traits<long> {
}

class std::vector<bool,std::allocator<bool> > {
}

struct std::_Facetptr<std::ctype<wchar_t> > {
  }

class std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > {
}

struct std::_Arithmetic_traits<unsigned int> {
  }

struct std::_Facetptr<std::ctype<unsigned short> > {
  }

struct std::is_error_code_enum<std::allocator<char> > {
  }

class std::basic_istringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > {
}

struct _ACCESS_ALLOWED_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long Flags;
  /* this+0xc */ struct _GUID ObjectType;
  /* this+0x1c */ struct _GUID InheritedObjectType;
  /* this+0x2c */ unsigned long SidStart;
}

struct _WSAQuerySet2W {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ wchar_t * lpszServiceInstanceName;
  /* this+0x8 */ struct _WSAVersion * lpVersion;
  /* this+0xc */ wchar_t * lpszComment;
  /* this+0x10 */ unsigned long dwNameSpace;
  /* this+0x14 */ struct _GUID * lpNSProviderId;
  /* this+0x18 */ wchar_t * lpszContext;
  /* this+0x1c */ unsigned long dwNumberOfProtocols;
  /* this+0x20 */ struct _AFPROTOCOLS * lpafpProtocols;
  /* this+0x24 */ wchar_t * lpszQueryString;
  /* this+0x28 */ unsigned long dwNumberOfCsAddrs;
  /* this+0x2c */ struct _CSADDR_INFO * lpcsaBuffer;
  /* this+0x30 */ unsigned long dwOutputFlags;
  /* this+0x34 */ struct _BLOB * lpBlob;
}

struct sockaddr_storage {
  /* this+0x0 */ unsigned short ss_family;
  /* this+0x2 */ char[0x6] __ss_pad1;
  /* this+0x8 */ __int64 __ss_align;
  /* this+0x10 */ char[0x70] __ss_pad2;
}

struct tagMCI_WAVE_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned int wDeviceID;
  /* this+0x8 */ const char * lpstrDeviceType;
  /* this+0xc */ const char * lpstrElementName;
  /* this+0x10 */ const char * lpstrAlias;
  /* this+0x14 */ unsigned long dwBufferSeconds;
}

struct PACKET_HC_REFUSE_DELETECHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ErrorCode;
}

struct _NUMA_NODE_RELATIONSHIP {
  /* this+0x0 */ unsigned long NodeNumber;
  /* this+0x4 */ unsigned char[0x14] Reserved;
  /* this+0x18 */ struct _GROUP_AFFINITY GroupMask;
}

struct _CACHE_RELATIONSHIP {
  /* this+0x0 */ unsigned char Level;
  /* this+0x1 */ unsigned char Associativity;
  /* this+0x2 */ unsigned short LineSize;
  /* this+0x4 */ unsigned long CacheSize;
  /* this+0x8 */ enum _PROCESSOR_CACHE_TYPE Type;
  /* this+0xc */ unsigned char[0x14] Reserved;
  /* this+0x20 */ struct _GROUP_AFFINITY GroupMask;
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
  /* this+0x0 */ enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  /* this+0x4 */ unsigned long Size;
  /* this+0x8 */ struct _PROCESSOR_RELATIONSHIP Processor;
  /* this+0x8 */ struct _NUMA_NODE_RELATIONSHIP NumaNode;
  /* this+0x8 */ struct _CACHE_RELATIONSHIP Cache;
  /* this+0x8 */ struct _GROUP_RELATIONSHIP Group;
}

struct sockaddr_storage_xp {
  /* this+0x0 */ short ss_family;
  /* this+0x2 */ char[0x6] __ss_pad1;
  /* this+0x8 */ __int64 __ss_align;
  /* this+0x10 */ char[0x70] __ss_pad2;
}

struct PACKET_ZC_NPCACK_MAPMOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x10] mapName;
  /* this+0x12 */ short xPos;
  /* this+0x14 */ short yPos;
}

struct PACKET_ZC_STORE_EQUIPMENT_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_CART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct LIST_ENTRY32 {
  /* this+0x0 */ unsigned long Flink;
  /* this+0x4 */ unsigned long Blink;
}

struct _IMAGE_FUNCTION_ENTRY64 {
  /* this+0x0 */ unsigned __int64 StartingAddress;
  /* this+0x8 */ unsigned __int64 EndingAddress;
  /* this+0x10 */ unsigned __int64 EndOfPrologue;
  /* this+0x10 */ unsigned __int64 UnwindInfoAddress;
}

struct _EXIT_THREAD_DEBUG_INFO {
  /* this+0x0 */ unsigned long dwExitCode;
}

struct _ENUM_SERVICE_STATUS_PROCESSA {
  /* this+0x0 */ char * lpServiceName;
  /* this+0x4 */ char * lpDisplayName;
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatusProcess;
}

struct servent {
  /* this+0x0 */ char * s_name;
  /* this+0x4 */ char * * s_aliases;
  /* this+0x8 */ short s_port;
  /* this+0xc */ char * s_proto;
}

struct tagMCI_GENERIC_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
}

struct PACKET_CA_PT_CARDPASS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x1c] m_cardPass;
}

struct tagACCEL {
  /* this+0x0 */ unsigned char fVirt;
  /* this+0x2 */ unsigned short key;
  /* this+0x4 */ unsigned short cmd;
}

struct ZSERVER_ADDR {
  /* this+0x0 */ unsigned long ip;
  /* this+0x4 */ short port;
}

struct PACKET_HC_NOTIFY_ZONESVR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char[0x10] mapName;
  /* this+0x16 */ struct ZSERVER_ADDR addr;
}

struct PACKET_ZC_NOTIFY_MAPPROPERTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
}

struct PACKET_ZC_PROPERTY_PET {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] szName;
  /* this+0x1a */ unsigned char bModified;
  /* this+0x1b */ short nLevel;
  /* this+0x1d */ short nFullness;
  /* this+0x1f */ short nRelationship;
  /* this+0x21 */ unsigned short ITID;
  /* this+0x23 */ short job;
}

struct _QUOTA_LIMITS {
  /* this+0x0 */ unsigned long PagedPoolLimit;
  /* this+0x4 */ unsigned long NonPagedPoolLimit;
  /* this+0x8 */ unsigned long MinimumWorkingSetSize;
  /* this+0xc */ unsigned long MaximumWorkingSetSize;
  /* this+0x10 */ unsigned long PagefileLimit;
  /* this+0x18 */ union _LARGE_INTEGER TimeLimit;
}

union _RTL_RUN_ONCE {
  /* this+0x0 */ void * Ptr;
}

struct tagSERIALKEYSW {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ wchar_t * lpszActivePort;
  /* this+0xc */ wchar_t * lpszPort;
  /* this+0x10 */ unsigned int iBaudRate;
  /* this+0x14 */ unsigned int iPortState;
  /* this+0x18 */ unsigned int iActive;
}

struct tagMCI_ANIM_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned int wDeviceID;
  /* this+0x8 */ const wchar_t * lpstrDeviceType;
  /* this+0xc */ const wchar_t * lpstrElementName;
  /* this+0x10 */ const wchar_t * lpstrAlias;
  /* this+0x14 */ unsigned long dwStyle;
  /* this+0x18 */ struct HWND__ * hWndParent;
}

struct PACKET_ZC_DELETE_ITEM_FROM_BODY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short DeleteType;
  /* this+0x4 */ unsigned short Index;
  /* this+0x6 */ short Count;
}

struct _TOKEN_LINKED_TOKEN {
  /* this+0x0 */ void * LinkedToken;
}

struct _NETCONNECTINFOSTRUCT {
  /* this+0x0 */ unsigned long cbStructure;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long dwSpeed;
  /* this+0xc */ unsigned long dwDelay;
  /* this+0x10 */ unsigned long dwOptDataSize;
}

struct _SERVICE_TRIGGER {
  /* this+0x0 */ unsigned long dwTriggerType;
  /* this+0x4 */ unsigned long dwAction;
  /* this+0x8 */ struct _GUID * pTriggerSubtype;
  /* this+0xc */ unsigned long cDataItems;
  /* this+0x10 */ struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM * pDataItems;
}

struct _WSAMSG {
  /* this+0x0 */ struct sockaddr * name;
  /* this+0x4 */ int namelen;
  /* this+0x8 */ struct _WSABUF * lpBuffers;
  /* this+0xc */ unsigned long dwBufferCount;
  /* this+0x10 */ struct _WSABUF Control;
  /* this+0x18 */ unsigned long dwFlags;
}

struct PACKET_ZC_STATUS_CHANGE_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short statusID;
  /* this+0x4 */ bool result;
  /* this+0x5 */ unsigned char value;
}

struct _IMAGE_SYMBOL {
  /* this+0x0 */ union _IMAGE_SYMBOL::<unnamed-type-N> N;
  /* this+0x8 */ unsigned long Value;
  /* this+0xc */ short SectionNumber;
  /* this+0xe */ unsigned short Type;
  /* this+0x10 */ unsigned char StorageClass;
  /* this+0x11 */ unsigned char NumberOfAuxSymbols;
}

struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
  /* this+0x0 */ unsigned long ulFlags;
  /* this+0x4 */ unsigned long ulEncodedAssemblyIdentityLength;
  /* this+0x8 */ unsigned long ulManifestPathType;
  /* this+0xc */ unsigned long ulManifestPathLength;
  /* this+0x10 */ union _LARGE_INTEGER liManifestLastWriteTime;
  /* this+0x18 */ unsigned long ulPolicyPathType;
  /* this+0x1c */ unsigned long ulPolicyPathLength;
  /* this+0x20 */ union _LARGE_INTEGER liPolicyLastWriteTime;
  /* this+0x28 */ unsigned long ulMetadataSatelliteRosterIndex;
  /* this+0x2c */ unsigned long ulManifestVersionMajor;
  /* this+0x30 */ unsigned long ulManifestVersionMinor;
  /* this+0x34 */ unsigned long ulPolicyVersionMajor;
  /* this+0x38 */ unsigned long ulPolicyVersionMinor;
  /* this+0x3c */ unsigned long ulAssemblyDirectoryNameLength;
  /* this+0x40 */ const wchar_t * lpAssemblyEncodedAssemblyIdentity;
  /* this+0x44 */ const wchar_t * lpAssemblyManifestPath;
  /* this+0x48 */ const wchar_t * lpAssemblyPolicyPath;
  /* this+0x4c */ const wchar_t * lpAssemblyDirectoryName;
  /* this+0x50 */ unsigned long ulFileCount;
}

struct tagDROPSTRUCT {
  /* this+0x0 */ struct HWND__ * hwndSource;
  /* this+0x4 */ struct HWND__ * hwndSink;
  /* this+0x8 */ unsigned long wFmt;
  /* this+0xc */ unsigned long dwData;
  /* this+0x10 */ struct tagPOINT ptDrop;
  /* this+0x18 */ unsigned long dwControlData;
}

struct PACKET_ZC_ATTACK_FAILURE_FOR_DISTANCE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long targetAID;
  /* this+0x6 */ short targetXPos;
  /* this+0x8 */ short targetYPos;
  /* this+0xa */ short xPos;
  /* this+0xc */ short yPos;
  /* this+0xe */ short currentAttRange;
}

struct _TOKEN_GROUPS_AND_PRIVILEGES {
  /* this+0x0 */ unsigned long SidCount;
  /* this+0x4 */ unsigned long SidLength;
  /* this+0x8 */ struct _SID_AND_ATTRIBUTES * Sids;
  /* this+0xc */ unsigned long RestrictedSidCount;
  /* this+0x10 */ unsigned long RestrictedSidLength;
  /* this+0x14 */ struct _SID_AND_ATTRIBUTES * RestrictedSids;
  /* this+0x18 */ unsigned long PrivilegeCount;
  /* this+0x1c */ unsigned long PrivilegeLength;
  /* this+0x20 */ struct _LUID_AND_ATTRIBUTES * Privileges;
  /* this+0x24 */ struct _LUID AuthenticationId;
}

struct tagMSLLHOOKSTRUCT {
  /* this+0x0 */ struct tagPOINT pt;
  /* this+0x8 */ unsigned long mouseData;
  /* this+0xc */ unsigned long flags;
  /* this+0x10 */ unsigned long time;
  /* this+0x14 */ unsigned long dwExtraInfo;
}

struct tagIMEMENUITEMINFOA {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned int fType;
  /* this+0x8 */ unsigned int fState;
  /* this+0xc */ unsigned int wID;
  /* this+0x10 */ struct HBITMAP__ * hbmpChecked;
  /* this+0x14 */ struct HBITMAP__ * hbmpUnchecked;
  /* this+0x18 */ unsigned long dwItemData;
  /* this+0x1c */ char[0x50] szString;
  /* this+0x6c */ struct HBITMAP__ * hbmpItem;
}

struct tagEXTLOGPEN {
  /* this+0x0 */ unsigned long elpPenStyle;
  /* this+0x4 */ unsigned long elpWidth;
  /* this+0x8 */ unsigned int elpBrushStyle;
  /* this+0xc */ unsigned long elpColor;
  /* this+0x10 */ unsigned long elpHatch;
  /* this+0x14 */ unsigned long elpNumEntries;
  /* this+0x18 */ unsigned long[0x1] elpStyleEntry;
}

struct midievent_tag {
  /* this+0x0 */ unsigned long dwDeltaTime;
  /* this+0x4 */ unsigned long dwStreamID;
  /* this+0x8 */ unsigned long dwEvent;
  /* this+0xc */ unsigned long[0x1] dwParms;
}

struct PACKET_ZC_ACK_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] characterName;
  /* this+0x1a */ unsigned char answer;
}

struct _OUTLINETEXTMETRICA {
  /* this+0x0 */ unsigned int otmSize;
  /* this+0x4 */ struct tagTEXTMETRICA otmTextMetrics;
  /* this+0x3c */ unsigned char otmFiller;
  /* this+0x3d */ struct tagPANOSE otmPanoseNumber;
  /* this+0x48 */ unsigned int otmfsSelection;
  /* this+0x4c */ unsigned int otmfsType;
  /* this+0x50 */ int otmsCharSlopeRise;
  /* this+0x54 */ int otmsCharSlopeRun;
  /* this+0x58 */ int otmItalicAngle;
  /* this+0x5c */ unsigned int otmEMSquare;
  /* this+0x60 */ int otmAscent;
  /* this+0x64 */ int otmDescent;
  /* this+0x68 */ unsigned int otmLineGap;
  /* this+0x6c */ unsigned int otmsCapEmHeight;
  /* this+0x70 */ unsigned int otmsXHeight;
  /* this+0x74 */ struct tagRECT otmrcFontBox;
  /* this+0x84 */ int otmMacAscent;
  /* this+0x88 */ int otmMacDescent;
  /* this+0x8c */ unsigned int otmMacLineGap;
  /* this+0x90 */ unsigned int otmusMinimumPPEM;
  /* this+0x94 */ struct tagPOINT otmptSubscriptSize;
  /* this+0x9c */ struct tagPOINT otmptSubscriptOffset;
  /* this+0xa4 */ struct tagPOINT otmptSuperscriptSize;
  /* this+0xac */ struct tagPOINT otmptSuperscriptOffset;
  /* this+0xb4 */ unsigned int otmsStrikeoutSize;
  /* this+0xb8 */ int otmsStrikeoutPosition;
  /* this+0xbc */ int otmsUnderscoreSize;
  /* this+0xc0 */ int otmsUnderscorePosition;
  /* this+0xc4 */ char * otmpFamilyName;
  /* this+0xc8 */ char * otmpFaceName;
  /* this+0xcc */ char * otmpStyleName;
  /* this+0xd0 */ char * otmpFullName;
}

struct addrinfoexA {
  /* this+0x0 */ int ai_flags;
  /* this+0x4 */ int ai_family;
  /* this+0x8 */ int ai_socktype;
  /* this+0xc */ int ai_protocol;
  /* this+0x10 */ unsigned int ai_addrlen;
  /* this+0x14 */ char * ai_canonname;
  /* this+0x18 */ struct sockaddr * ai_addr;
  /* this+0x1c */ void * ai_blob;
  /* this+0x20 */ unsigned int ai_bloblen;
  /* this+0x24 */ struct _GUID * ai_provider;
  /* this+0x28 */ struct addrinfoexA * ai_next;
}

struct tagAUXCAPSA {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned short wTechnology;
  /* this+0x2a */ unsigned short wReserved1;
  /* this+0x2c */ unsigned long dwSupport;
}

struct PACKET_ZC_BOSS_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char infoType;
  /* this+0x3 */ int xPos;
  /* this+0x7 */ int yPos;
  /* this+0xb */ unsigned short minHour;
  /* this+0xd */ unsigned short minMinute;
  /* this+0xf */ unsigned short maxHour;
  /* this+0x11 */ unsigned short maxMinute;
  /* this+0x13 */ char[0x33] name;
}

struct _RASTERIZER_STATUS {
  /* this+0x0 */ short nSize;
  /* this+0x2 */ short wFlags;
  /* this+0x4 */ short nLanguageID;
}

struct _WIN32_FIND_DATAW {
  /* this+0x0 */ unsigned long dwFileAttributes;
  /* this+0x4 */ struct _FILETIME ftCreationTime;
  /* this+0xc */ struct _FILETIME ftLastAccessTime;
  /* this+0x14 */ struct _FILETIME ftLastWriteTime;
  /* this+0x1c */ unsigned long nFileSizeHigh;
  /* this+0x20 */ unsigned long nFileSizeLow;
  /* this+0x24 */ unsigned long dwReserved0;
  /* this+0x28 */ unsigned long dwReserved1;
  /* this+0x2c */ wchar_t[0x104] cFileName;
  /* this+0x234 */ wchar_t[0xe] cAlternateFileName;
}

struct tagEMRTEXT {
  /* this+0x0 */ struct _POINTL ptlReference;
  /* this+0x8 */ unsigned long nChars;
  /* this+0xc */ unsigned long offString;
  /* this+0x10 */ unsigned long fOptions;
  /* this+0x14 */ struct _RECTL rcl;
  /* this+0x24 */ unsigned long offDx;
}

struct tagEMRPOLYTEXTOUTA {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long iGraphicsMode;
  /* this+0x1c */ float exScale;
  /* this+0x20 */ float eyScale;
  /* this+0x24 */ long cStrings;
  /* this+0x28 */ struct tagEMRTEXT[0x1] aemrtext;
}

struct _ICONINFOEXA {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ int fIcon;
  /* this+0x8 */ unsigned long xHotspot;
  /* this+0xc */ unsigned long yHotspot;
  /* this+0x10 */ struct HBITMAP__ * hbmMask;
  /* this+0x14 */ struct HBITMAP__ * hbmColor;
  /* this+0x18 */ unsigned short wResID;
  /* this+0x1a */ char[0x104] szModName;
  /* this+0x11e */ char[0x104] szResName;
}

struct pcmwaveformat_tag {
  /* this+0x0 */ struct waveformat_tag wf;
  /* this+0xe */ unsigned short wBitsPerSample;
}

struct tagMCI_OVLY_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned int wDeviceID;
  /* this+0x8 */ const wchar_t * lpstrDeviceType;
  /* this+0xc */ const wchar_t * lpstrElementName;
  /* this+0x10 */ const wchar_t * lpstrAlias;
  /* this+0x14 */ unsigned long dwStyle;
  /* this+0x18 */ struct HWND__ * hWndParent;
}

struct PACKET_ZC_NOTIFY_UPDATEPLAYER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Style;
  /* this+0x4 */ unsigned char Item;
}

struct HLSURF__ {
  /* this+0x0 */ int unused;
}

struct _WIN32_FIND_DATAA {
  /* this+0x0 */ unsigned long dwFileAttributes;
  /* this+0x4 */ struct _FILETIME ftCreationTime;
  /* this+0xc */ struct _FILETIME ftLastAccessTime;
  /* this+0x14 */ struct _FILETIME ftLastWriteTime;
  /* this+0x1c */ unsigned long nFileSizeHigh;
  /* this+0x20 */ unsigned long nFileSizeLow;
  /* this+0x24 */ unsigned long dwReserved0;
  /* this+0x28 */ unsigned long dwReserved1;
  /* this+0x2c */ char[0x104] cFileName;
  /* this+0x130 */ char[0xe] cAlternateFileName;
}

struct tagBITMAPINFOHEADER {
  /* this+0x0 */ unsigned long biSize;
  /* this+0x4 */ long biWidth;
  /* this+0x8 */ long biHeight;
  /* this+0xc */ unsigned short biPlanes;
  /* this+0xe */ unsigned short biBitCount;
  /* this+0x10 */ unsigned long biCompression;
  /* this+0x14 */ unsigned long biSizeImage;
  /* this+0x18 */ long biXPelsPerMeter;
  /* this+0x1c */ long biYPelsPerMeter;
  /* this+0x20 */ unsigned long biClrUsed;
  /* this+0x24 */ unsigned long biClrImportant;
}

struct tagENUMTEXTMETRICA {
  /* this+0x0 */ struct tagNEWTEXTMETRICEXA etmNewTextMetricEx;
  /* this+0x60 */ struct tagAXESLISTA etmAxesList;
}

struct PACKET_ZC_ACK_MAIL_RETURN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
  /* this+0x6 */ short Result;
}

struct tagEMRSTRETCHDIBITS {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ long xDest;
  /* this+0x1c */ long yDest;
  /* this+0x20 */ long xSrc;
  /* this+0x24 */ long ySrc;
  /* this+0x28 */ long cxSrc;
  /* this+0x2c */ long cySrc;
  /* this+0x30 */ unsigned long offBmiSrc;
  /* this+0x34 */ unsigned long cbBmiSrc;
  /* this+0x38 */ unsigned long offBitsSrc;
  /* this+0x3c */ unsigned long cbBitsSrc;
  /* this+0x40 */ unsigned long iUsageSrc;
  /* this+0x44 */ unsigned long dwRop;
  /* this+0x48 */ long cxDest;
  /* this+0x4c */ long cyDest;
}

struct _TP_POOL_STACK_INFORMATION {
  /* this+0x0 */ unsigned long StackReserve;
  /* this+0x4 */ unsigned long StackCommit;
}

struct IMAGE_LOAD_CONFIG_DIRECTORY32 {
  /* this+0x0 */ unsigned long Size;
  /* this+0x4 */ unsigned long TimeDateStamp;
  /* this+0x8 */ unsigned short MajorVersion;
  /* this+0xa */ unsigned short MinorVersion;
  /* this+0xc */ unsigned long GlobalFlagsClear;
  /* this+0x10 */ unsigned long GlobalFlagsSet;
  /* this+0x14 */ unsigned long CriticalSectionDefaultTimeout;
  /* this+0x18 */ unsigned long DeCommitFreeBlockThreshold;
  /* this+0x1c */ unsigned long DeCommitTotalFreeThreshold;
  /* this+0x20 */ unsigned long LockPrefixTable;
  /* this+0x24 */ unsigned long MaximumAllocationSize;
  /* this+0x28 */ unsigned long VirtualMemoryThreshold;
  /* this+0x2c */ unsigned long ProcessHeapFlags;
  /* this+0x30 */ unsigned long ProcessAffinityMask;
  /* this+0x34 */ unsigned short CSDVersion;
  /* this+0x36 */ unsigned short Reserved1;
  /* this+0x38 */ unsigned long EditList;
  /* this+0x3c */ unsigned long SecurityCookie;
  /* this+0x40 */ unsigned long SEHandlerTable;
  /* this+0x44 */ unsigned long SEHandlerCount;
}

struct _TRIVERTEX {
  /* this+0x0 */ long x;
  /* this+0x4 */ long y;
  /* this+0x8 */ unsigned short Red;
  /* this+0xa */ unsigned short Green;
  /* this+0xc */ unsigned short Blue;
  /* this+0xe */ unsigned short Alpha;
}

struct PACKET_CZ_BLOCKING_PLAY_CANCEL {
  /* this+0x0 */ short PacketType;
}

struct CHARINFO_FROM_CHARACTERDB::tagParty {
  /* this+0x0 */ unsigned char Config;
}

struct CHARINFO_FROM_CHARACTERDB {
  /* this+0x0 */ int GID;
  /* this+0x4 */ int exp;
  /* this+0x8 */ int AID;
  /* this+0xc */ int GuildID;
  /* this+0x10 */ int money;
  /* this+0x14 */ int jobexp;
  /* this+0x18 */ int joblevel;
  /* this+0x1c */ int bodystate;
  /* this+0x20 */ int healthstate;
  /* this+0x24 */ int effectstate;
  /* this+0x28 */ int virtue;
  /* this+0x2c */ int honor;
  /* this+0x30 */ int hp;
  /* this+0x34 */ short maxhp;
  /* this+0x36 */ short sp;
  /* this+0x38 */ short maxsp;
  /* this+0x3a */ short xPos;
  /* this+0x3c */ short yPos;
  /* this+0x3e */ short speed;
  /* this+0x40 */ short jobpoint;
  /* this+0x42 */ short sxPos;
  /* this+0x44 */ short syPos;
  /* this+0x46 */ short head;
  /* this+0x48 */ short weapon;
  /* this+0x4a */ short accessory;
  /* this+0x4c */ short accessory2;
  /* this+0x4e */ short accessory3;
  /* this+0x50 */ short headpalette;
  /* this+0x52 */ short bodypalette;
  /* this+0x54 */ short cookMastery;
  /* this+0x56 */ char[0x18] name;
  /* this+0x6e */ char[0x10] mapname;
  /* this+0x7e */ char[0x10] restartMapName;
  /* this+0x8e */ short job;
  /* this+0x90 */ short clevel;
  /* this+0x92 */ short sppoint;
  /* this+0x94 */ char Str;
  /* this+0x95 */ char Agi;
  /* this+0x96 */ char Vit;
  /* this+0x97 */ char Int;
  /* this+0x98 */ char Dex;
  /* this+0x99 */ char Luk;
  /* this+0x9a */ char CharNum;
  /* this+0x9b */ unsigned char haircolor;
  /* this+0x9c */ struct CHARINFO_FROM_CHARACTERDB::tagParty Party;
  /* this+0x9d */ bool bOpenEquipmentWin;
  /* this+0x9e */ short font;
  /* this+0xa0 */ short robe;
  /* this+0xa2 */ int chrSlotChangeCnt;
  /* this+0xa6 */ int charNameChangeCnt;
}

struct _ACCESS_DENIED_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long SidStart;
}

struct _MEMORY_BASIC_INFORMATION {
  /* this+0x0 */ void * BaseAddress;
  /* this+0x4 */ void * AllocationBase;
  /* this+0x8 */ unsigned long AllocationProtect;
  /* this+0xc */ unsigned long RegionSize;
  /* this+0x10 */ unsigned long State;
  /* this+0x14 */ unsigned long Protect;
  /* this+0x18 */ unsigned long Type;
}

struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
          /* this+0x0 */ unsigned int value;
}

struct tagTEXTMETRICW {
  /* this+0x0 */ long tmHeight;
  /* this+0x4 */ long tmAscent;
  /* this+0x8 */ long tmDescent;
  /* this+0xc */ long tmInternalLeading;
  /* this+0x10 */ long tmExternalLeading;
  /* this+0x14 */ long tmAveCharWidth;
  /* this+0x18 */ long tmMaxCharWidth;
  /* this+0x1c */ long tmWeight;
  /* this+0x20 */ long tmOverhang;
  /* this+0x24 */ long tmDigitizedAspectX;
  /* this+0x28 */ long tmDigitizedAspectY;
  /* this+0x2c */ wchar_t tmFirstChar;
  /* this+0x2e */ wchar_t tmLastChar;
  /* this+0x30 */ wchar_t tmDefaultChar;
  /* this+0x32 */ wchar_t tmBreakChar;
  /* this+0x34 */ unsigned char tmItalic;
  /* this+0x35 */ unsigned char tmUnderlined;
  /* this+0x36 */ unsigned char tmStruckOut;
  /* this+0x37 */ unsigned char tmPitchAndFamily;
  /* this+0x38 */ unsigned char tmCharSet;
}

struct _OUTLINETEXTMETRICW {
  /* this+0x0 */ unsigned int otmSize;
  /* this+0x4 */ struct tagTEXTMETRICW otmTextMetrics;
  /* this+0x40 */ unsigned char otmFiller;
  /* this+0x41 */ struct tagPANOSE otmPanoseNumber;
  /* this+0x4c */ unsigned int otmfsSelection;
  /* this+0x50 */ unsigned int otmfsType;
  /* this+0x54 */ int otmsCharSlopeRise;
  /* this+0x58 */ int otmsCharSlopeRun;
  /* this+0x5c */ int otmItalicAngle;
  /* this+0x60 */ unsigned int otmEMSquare;
  /* this+0x64 */ int otmAscent;
  /* this+0x68 */ int otmDescent;
  /* this+0x6c */ unsigned int otmLineGap;
  /* this+0x70 */ unsigned int otmsCapEmHeight;
  /* this+0x74 */ unsigned int otmsXHeight;
  /* this+0x78 */ struct tagRECT otmrcFontBox;
  /* this+0x88 */ int otmMacAscent;
  /* this+0x8c */ int otmMacDescent;
  /* this+0x90 */ unsigned int otmMacLineGap;
  /* this+0x94 */ unsigned int otmusMinimumPPEM;
  /* this+0x98 */ struct tagPOINT otmptSubscriptSize;
  /* this+0xa0 */ struct tagPOINT otmptSubscriptOffset;
  /* this+0xa8 */ struct tagPOINT otmptSuperscriptSize;
  /* this+0xb0 */ struct tagPOINT otmptSuperscriptOffset;
  /* this+0xb8 */ unsigned int otmsStrikeoutSize;
  /* this+0xbc */ int otmsStrikeoutPosition;
  /* this+0xc0 */ int otmsUnderscoreSize;
  /* this+0xc4 */ int otmsUnderscorePosition;
  /* this+0xc8 */ char * otmpFamilyName;
  /* this+0xcc */ char * otmpFaceName;
  /* this+0xd0 */ char * otmpStyleName;
  /* this+0xd4 */ char * otmpFullName;
}

struct tagRAWKEYBOARD {
  /* this+0x0 */ unsigned short MakeCode;
  /* this+0x2 */ unsigned short Flags;
  /* this+0x4 */ unsigned short Reserved;
  /* this+0x6 */ unsigned short VKey;
  /* this+0x8 */ unsigned int Message;
  /* this+0xc */ unsigned long ExtraInformation;
}

struct _DOCINFOA {
  /* this+0x0 */ int cbSize;
  /* this+0x4 */ const char * lpszDocName;
  /* this+0x8 */ const char * lpszOutput;
  /* this+0xc */ const char * lpszDatatype;
  /* this+0x10 */ unsigned long fwType;
}

struct PACKET_CH_SECOND_PASSWD_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x4] SecondPWIdx;
}

struct _SYSTEM_AUDIT_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long SidStart;
}

struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
  /* this+0x0 */ void * hActCtx;
  /* this+0x4 */ unsigned long dwFlags;
}

struct tagCIEXYZ {
  /* this+0x0 */ long ciexyzX;
  /* this+0x4 */ long ciexyzY;
  /* this+0x8 */ long ciexyzZ;
}

struct tagICEXYZTRIPLE {
  /* this+0x0 */ struct tagCIEXYZ ciexyzRed;
  /* this+0xc */ struct tagCIEXYZ ciexyzGreen;
  /* this+0x18 */ struct tagCIEXYZ ciexyzBlue;
}

struct HTOUCHINPUT__ {
  /* this+0x0 */ int unused;
}

struct tagWNDCLASSA {
  /* this+0x0 */ unsigned int style;
  /* this+0x4 */ function  * lpfnWndProc;
  /* this+0x8 */ int cbClsExtra;
  /* this+0xc */ int cbWndExtra;
  /* this+0x10 */ struct HINSTANCE__ * hInstance;
  /* this+0x14 */ struct HICON__ * hIcon;
  /* this+0x18 */ struct HICON__ * hCursor;
  /* this+0x1c */ struct HBRUSH__ * hbrBackground;
  /* this+0x20 */ const char * lpszMenuName;
  /* this+0x24 */ const char * lpszClassName;
}

struct PURCHASE_MYITEM {
  /* this+0x0 */ int price;
  /* this+0x4 */ short index;
  /* this+0x6 */ short count;
  /* this+0x8 */ unsigned char type;
  /* this+0x9 */ unsigned short ITID;
  /* this+0xb */ bool IsIdentified;
  /* this+0xc */ bool IsDamaged;
  /* this+0xd */ unsigned char refiningLevel;
  /* this+0xe */ struct EQUIPSLOTINFO slot;
}

struct BITMAPV4HEADER {
  /* this+0x0 */ unsigned long bV4Size;
  /* this+0x4 */ long bV4Width;
  /* this+0x8 */ long bV4Height;
  /* this+0xc */ unsigned short bV4Planes;
  /* this+0xe */ unsigned short bV4BitCount;
  /* this+0x10 */ unsigned long bV4V4Compression;
  /* this+0x14 */ unsigned long bV4SizeImage;
  /* this+0x18 */ long bV4XPelsPerMeter;
  /* this+0x1c */ long bV4YPelsPerMeter;
  /* this+0x20 */ unsigned long bV4ClrUsed;
  /* this+0x24 */ unsigned long bV4ClrImportant;
  /* this+0x28 */ unsigned long bV4RedMask;
  /* this+0x2c */ unsigned long bV4GreenMask;
  /* this+0x30 */ unsigned long bV4BlueMask;
  /* this+0x34 */ unsigned long bV4AlphaMask;
  /* this+0x38 */ unsigned long bV4CSType;
  /* this+0x3c */ struct tagICEXYZTRIPLE bV4Endpoints;
  /* this+0x60 */ unsigned long bV4GammaRed;
  /* this+0x64 */ unsigned long bV4GammaGreen;
  /* this+0x68 */ unsigned long bV4GammaBlue;
}

struct _BLENDFUNCTION {
  /* this+0x0 */ unsigned char BlendOp;
  /* this+0x1 */ unsigned char BlendFlags;
  /* this+0x2 */ unsigned char SourceConstantAlpha;
  /* this+0x3 */ unsigned char AlphaFormat;
}

struct PACKET_CZ_CHANGE_MAPTYPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short xPos;
  /* this+0x4 */ short yPos;
  /* this+0x6 */ short type;
}

struct tagGESTURECONFIG {
  /* this+0x0 */ unsigned long dwID;
  /* this+0x4 */ unsigned long dwWant;
  /* this+0x8 */ unsigned long dwBlock;
}

struct _FILEMUIINFO {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwVersion;
  /* this+0x8 */ unsigned long dwFileType;
  /* this+0xc */ unsigned char[0x10] pChecksum;
  /* this+0x1c */ unsigned char[0x10] pServiceChecksum;
  /* this+0x2c */ unsigned long dwLanguageNameOffset;
  /* this+0x30 */ unsigned long dwTypeIDMainSize;
  /* this+0x34 */ unsigned long dwTypeIDMainOffset;
  /* this+0x38 */ unsigned long dwTypeNameMainOffset;
  /* this+0x3c */ unsigned long dwTypeIDMUISize;
  /* this+0x40 */ unsigned long dwTypeIDMUIOffset;
  /* this+0x44 */ unsigned long dwTypeNameMUIOffset;
  /* this+0x48 */ unsigned char[0x8] abBuffer;
}

struct _TRANSACTION_BIND_INFORMATION {
  /* this+0x0 */ void * TmHandle;
}

struct HUMPD__ {
  /* this+0x0 */ int unused;
}

struct PACKET_CH_SELECT_ACCESSIBLE_MAPNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char CharNum;
  /* this+0x3 */ unsigned char mapListNum;
}

struct PACKET_ZC_NOTIFY_NEWENTRY6 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char objecttype;
  /* this+0x5 */ unsigned long GID;
  /* this+0x9 */ short speed;
  /* this+0xb */ short bodyState;
  /* this+0xd */ short healthState;
  /* this+0xf */ int effectState;
  /* this+0x13 */ short job;
  /* this+0x15 */ short head;
  /* this+0x17 */ int weapon;
  /* this+0x1b */ short accessory;
  /* this+0x1d */ short accessory2;
  /* this+0x1f */ short accessory3;
  /* this+0x21 */ short headpalette;
  /* this+0x23 */ short bodypalette;
  /* this+0x25 */ short headDir;
  /* this+0x27 */ short robe;
  /* this+0x29 */ unsigned long GUID;
  /* this+0x2d */ short GEmblemVer;
  /* this+0x2f */ short honor;
  /* this+0x31 */ int virtue;
  /* this+0x35 */ bool isPKModeON;
  /* this+0x36 */ unsigned char sex;
  /* this+0x37 */ unsigned char[0x3] PosDir;
  /* this+0x3a */ unsigned char xSize;
  /* this+0x3b */ unsigned char ySize;
  /* this+0x3c */ short clevel;
  /* this+0x3e */ short font;
}

struct tagNEWTEXTMETRICEXA {
  /* this+0x0 */ struct tagNEWTEXTMETRICA ntmTm;
  /* this+0x48 */ struct tagFONTSIGNATURE ntmFontSig;
}

struct tagAXESLISTA {
  /* this+0x0 */ unsigned long axlReserved;
  /* this+0x4 */ unsigned long axlNumAxes;
  /* this+0x8 */ struct tagAXISINFOA[0x10] axlAxisInfo;
}

struct _NETRESOURCEA {
  /* this+0x0 */ unsigned long dwScope;
  /* this+0x4 */ unsigned long dwType;
  /* this+0x8 */ unsigned long dwDisplayType;
  /* this+0xc */ unsigned long dwUsage;
  /* this+0x10 */ char * lpLocalName;
  /* this+0x14 */ char * lpRemoteName;
  /* this+0x18 */ char * lpComment;
  /* this+0x1c */ char * lpProvider;
}

struct PACKET_CH_REQ_CHANGE_CHARACTERNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwGID;
  /* this+0x6 */ char[0x18] szCharName;
}

struct PACKET_CZ_SIMPLE_CASH_BTNSHOW {
  /* this+0x0 */ short PacketType;
}

struct _STARTUPINFOW {
  /* this+0x0 */ unsigned long cb;
  /* this+0x4 */ unsigned short * lpReserved;
  /* this+0x8 */ unsigned short * lpDesktop;
  /* this+0xc */ unsigned short * lpTitle;
  /* this+0x10 */ unsigned long dwX;
  /* this+0x14 */ unsigned long dwY;
  /* this+0x18 */ unsigned long dwXSize;
  /* this+0x1c */ unsigned long dwYSize;
  /* this+0x20 */ unsigned long dwXCountChars;
  /* this+0x24 */ unsigned long dwYCountChars;
  /* this+0x28 */ unsigned long dwFillAttribute;
  /* this+0x2c */ unsigned long dwFlags;
  /* this+0x30 */ unsigned short wShowWindow;
  /* this+0x32 */ unsigned short cbReserved2;
  /* this+0x34 */ unsigned char * lpReserved2;
  /* this+0x38 */ void * hStdInput;
  /* this+0x3c */ void * hStdOutput;
  /* this+0x40 */ void * hStdError;
}

struct _PROC_THREAD_ATTRIBUTE_LIST {
}

struct _STARTUPINFOEXW {
  /* this+0x0 */ struct _STARTUPINFOW StartupInfo;
  /* this+0x44 */ struct _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList;
}

struct tagEMRCREATEDIBPATTERNBRUSHPT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihBrush;
  /* this+0xc */ unsigned long iUsage;
  /* this+0x10 */ unsigned long offBmi;
  /* this+0x14 */ unsigned long cbBmi;
  /* this+0x18 */ unsigned long offBits;
  /* this+0x1c */ unsigned long cbBits;
}

struct SC_HANDLE__ {
  /* this+0x0 */ int unused;
}

struct tagAUXCAPS2A {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned short wTechnology;
  /* this+0x2a */ unsigned short wReserved1;
  /* this+0x2c */ unsigned long dwSupport;
  /* this+0x30 */ struct _GUID ManufacturerGuid;
  /* this+0x40 */ struct _GUID ProductGuid;
  /* this+0x50 */ struct _GUID NameGuid;
}

struct _KTMOBJECT_CURSOR {
  /* this+0x0 */ struct _GUID LastQuery;
  /* this+0x10 */ unsigned long ObjectIdCount;
  /* this+0x14 */ struct _GUID[0x1] ObjectIds;
}

struct tagPOINTS {
  /* this+0x0 */ short x;
  /* this+0x2 */ short y;
}

struct tagMOUSEINPUT {
  /* this+0x0 */ long dx;
  /* this+0x4 */ long dy;
  /* this+0x8 */ unsigned long mouseData;
  /* this+0xc */ unsigned long dwFlags;
  /* this+0x10 */ unsigned long time;
  /* this+0x14 */ unsigned long dwExtraInfo;
}

struct tagKEYBDINPUT {
  /* this+0x0 */ unsigned short wVk;
  /* this+0x2 */ unsigned short wScan;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long time;
  /* this+0xc */ unsigned long dwExtraInfo;
}

struct tagHARDWAREINPUT {
  /* this+0x0 */ unsigned long uMsg;
  /* this+0x4 */ unsigned short wParamL;
  /* this+0x6 */ unsigned short wParamH;
}

struct tagINPUT {
  /* this+0x0 */ unsigned long type;
  /* this+0x4 */ struct tagMOUSEINPUT mi;
  /* this+0x4 */ struct tagKEYBDINPUT ki;
  /* this+0x4 */ struct tagHARDWAREINPUT hi;
}

struct PACKET_ZC_PARTY_BOOKING_NOTIFY_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Index;
  /* this+0x6 */ short[0x6] Job;
}

struct PACKET_ZC_ACK_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Result;
  /* this+0x3 */ char[0x18] EntryQueueName;
}

struct PACKET_CZ_KSY_EVENT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_ZC_HACKSH_ERROR_MSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short errorType;
}

struct _KCRM_PROTOCOL_BLOB {
  /* this+0x0 */ struct _GUID ProtocolId;
  /* this+0x10 */ unsigned long StaticInfoLength;
  /* this+0x14 */ unsigned long TransactionIdInfoLength;
  /* this+0x18 */ unsigned long Unused1;
  /* this+0x1c */ unsigned long Unused2;
}

struct PACKET_ZC_SAY_DIALOG2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long NAID;
  /* this+0x8 */ unsigned char type;
}

struct tagPOINTFX {
  /* this+0x0 */ struct _FIXED x;
  /* this+0x4 */ struct _FIXED y;
}

struct PACKET_ZC_ACK_REQ_CHANGE_MEMBERS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CA_LOGIN5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x33] ID;
  /* this+0x39 */ unsigned char[0x33] Passwd;
  /* this+0x6c */ unsigned char clienttype;
}

struct PPM_WMI_PERF_STATES_EX {
  /* this+0x0 */ unsigned long Count;
  /* this+0x4 */ unsigned long MaxFrequency;
  /* this+0x8 */ unsigned long CurrentState;
  /* this+0xc */ unsigned long MaxPerfState;
  /* this+0x10 */ unsigned long MinPerfState;
  /* this+0x14 */ unsigned long LowestPerfState;
  /* this+0x18 */ unsigned long ThermalConstraint;
  /* this+0x1c */ unsigned char BusyAdjThreshold;
  /* this+0x1d */ unsigned char PolicyType;
  /* this+0x1e */ unsigned char Type;
  /* this+0x1f */ unsigned char Reserved;
  /* this+0x20 */ unsigned long TimerInterval;
  /* this+0x24 */ void * TargetProcessors;
  /* this+0x28 */ unsigned long PStateHandler;
  /* this+0x2c */ unsigned long PStateContext;
  /* this+0x30 */ unsigned long TStateHandler;
  /* this+0x34 */ unsigned long TStateContext;
  /* this+0x38 */ unsigned long FeedbackHandler;
  /* this+0x3c */ unsigned long Reserved1;
  /* this+0x40 */ unsigned __int64 Reserved2;
  /* this+0x48 */ struct PPM_WMI_PERF_STATE[0x1] State;
}

struct _COMMPROP {
  /* this+0x0 */ unsigned short wPacketLength;
  /* this+0x2 */ unsigned short wPacketVersion;
  /* this+0x4 */ unsigned long dwServiceMask;
  /* this+0x8 */ unsigned long dwReserved1;
  /* this+0xc */ unsigned long dwMaxTxQueue;
  /* this+0x10 */ unsigned long dwMaxRxQueue;
  /* this+0x14 */ unsigned long dwMaxBaud;
  /* this+0x18 */ unsigned long dwProvSubType;
  /* this+0x1c */ unsigned long dwProvCapabilities;
  /* this+0x20 */ unsigned long dwSettableParams;
  /* this+0x24 */ unsigned long dwSettableBaud;
  /* this+0x28 */ unsigned short wSettableData;
  /* this+0x2a */ unsigned short wSettableStopParity;
  /* this+0x2c */ unsigned long dwCurrentTxQueue;
  /* this+0x30 */ unsigned long dwCurrentRxQueue;
  /* this+0x34 */ unsigned long dwProvSpec1;
  /* this+0x38 */ unsigned long dwProvSpec2;
  /* this+0x3c */ wchar_t[0x1] wcProvChar;
}

struct tagGUITHREADINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long flags;
  /* this+0x8 */ struct HWND__ * hwndActive;
  /* this+0xc */ struct HWND__ * hwndFocus;
  /* this+0x10 */ struct HWND__ * hwndCapture;
  /* this+0x14 */ struct HWND__ * hwndMenuOwner;
  /* this+0x18 */ struct HWND__ * hwndMoveSize;
  /* this+0x1c */ struct HWND__ * hwndCaret;
  /* this+0x20 */ struct tagRECT rcCaret;
}

struct PACKET_CZ_REQ_EXPEL_GROUP_MEMBER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x18] characterName;
}

struct PACKET_CZ_REQ_MAKINGARROW {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short id;
}

struct PACKET_CZ_STANDING_RESURRECTION {
  /* this+0x0 */ short PacketType;
}

struct PARTY_RECRUIT_DETAIL {
  /* this+0x0 */ short Level;
  /* this+0x2 */ char[0x25] Notice;
}

struct _KCRM_TRANSACTION_BLOB {
  /* this+0x0 */ struct _GUID UOW;
  /* this+0x10 */ struct _GUID TmIdentity;
  /* this+0x20 */ unsigned long IsolationLevel;
  /* this+0x24 */ unsigned long IsolationFlags;
  /* this+0x28 */ unsigned long Timeout;
  /* this+0x2c */ wchar_t[0x40] Description;
}

struct tagEXTLOGPEN32 {
  /* this+0x0 */ unsigned long elpPenStyle;
  /* this+0x4 */ unsigned long elpWidth;
  /* this+0x8 */ unsigned int elpBrushStyle;
  /* this+0xc */ unsigned long elpColor;
  /* this+0x10 */ unsigned long elpHatch;
  /* this+0x14 */ unsigned long elpNumEntries;
  /* this+0x18 */ unsigned long[0x1] elpStyleEntry;
}

struct _DISCDLGSTRUCTA {
  /* this+0x0 */ unsigned long cbStructure;
  /* this+0x4 */ struct HWND__ * hwndOwner;
  /* this+0x8 */ char * lpLocalName;
  /* this+0xc */ char * lpRemoteName;
  /* this+0x10 */ unsigned long dwFlags;
}

struct _QUERY_SERVICE_CONFIGW {
  /* this+0x0 */ unsigned long dwServiceType;
  /* this+0x4 */ unsigned long dwStartType;
  /* this+0x8 */ unsigned long dwErrorControl;
  /* this+0xc */ wchar_t * lpBinaryPathName;
  /* this+0x10 */ wchar_t * lpLoadOrderGroup;
  /* this+0x14 */ unsigned long dwTagId;
  /* this+0x18 */ wchar_t * lpDependencies;
  /* this+0x1c */ wchar_t * lpServiceStartName;
  /* this+0x20 */ wchar_t * lpDisplayName;
}

struct PACKET_CZ_SEARCH_STORE_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char StoreType;
  /* this+0x5 */ unsigned long maxPrice;
  /* this+0x9 */ unsigned long minPrice;
  /* this+0xd */ unsigned char ItemIDListSize;
  /* this+0xe */ unsigned char CardIDListSize;
}

struct HPALETTE__ {
  /* this+0x0 */ int unused;
}

struct PACKET_AC_ACK_HASH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_HO_PAR_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short var;
  /* this+0x4 */ int value;
}

struct _SINGLE_LIST_ENTRY {
  /* this+0x0 */ struct _SINGLE_LIST_ENTRY * Next;
}

struct _SYSTEM_ALARM_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long Flags;
  /* this+0xc */ struct _GUID ObjectType;
  /* this+0x1c */ struct _GUID InheritedObjectType;
  /* this+0x2c */ unsigned long SidStart;
}

struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long Flags;
  /* this+0xc */ struct _GUID ObjectType;
  /* this+0x1c */ struct _GUID InheritedObjectType;
  /* this+0x2c */ unsigned long SidStart;
}

struct tagWNDCLASSEXW {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned int style;
  /* this+0x8 */ function  * lpfnWndProc;
  /* this+0xc */ int cbClsExtra;
  /* this+0x10 */ int cbWndExtra;
  /* this+0x14 */ struct HINSTANCE__ * hInstance;
  /* this+0x18 */ struct HICON__ * hIcon;
  /* this+0x1c */ struct HICON__ * hCursor;
  /* this+0x20 */ struct HBRUSH__ * hbrBackground;
  /* this+0x24 */ const wchar_t * lpszMenuName;
  /* this+0x28 */ const wchar_t * lpszClassName;
  /* this+0x2c */ struct HICON__ * hIconSm;
}

struct tagMONITORINFOEXA {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct tagRECT rcMonitor;
  /* this+0x14 */ struct tagRECT rcWork;
  /* this+0x24 */ unsigned long dwFlags;
  /* this+0x28 */ char[0x20] szDevice;
}

struct PACKET_CZ_NOTIFY_ACTORINIT {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_STORE_EQUIPMENT_ITEMLIST3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct _STARTUPINFOEXA {
  /* this+0x0 */ struct _STARTUPINFOA StartupInfo;
  /* this+0x44 */ struct _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList;
}

struct PACKET_ZC_OPEN_EDITDLGSTR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short pointCampA;
  /* this+0x4 */ short pointCampB;
}

struct _M128A {
  /* this+0x0 */ unsigned __int64 Low;
  /* this+0x8 */ __int64 High;
}

struct _XSAVE_FORMAT {
  /* this+0x0 */ unsigned short ControlWord;
  /* this+0x2 */ unsigned short StatusWord;
  /* this+0x4 */ unsigned char TagWord;
  /* this+0x5 */ unsigned char Reserved1;
  /* this+0x6 */ unsigned short ErrorOpcode;
  /* this+0x8 */ unsigned long ErrorOffset;
  /* this+0xc */ unsigned short ErrorSelector;
  /* this+0xe */ unsigned short Reserved2;
  /* this+0x10 */ unsigned long DataOffset;
  /* this+0x14 */ unsigned short DataSelector;
  /* this+0x16 */ unsigned short Reserved3;
  /* this+0x18 */ unsigned long MxCsr;
  /* this+0x1c */ unsigned long MxCsr_Mask;
  /* this+0x20 */ struct _M128A[0x8] FloatRegisters;
  /* this+0xa0 */ struct _M128A[0x8] XmmRegisters;
  /* this+0x120 */ unsigned char[0xc0] Reserved4;
  /* this+0x1e0 */ unsigned long[0x7] StackControl;
  /* this+0x1fc */ unsigned long Cr0NpxState;
}

struct tagEMRINVERTRGN {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long cbRgnData;
  /* this+0x1c */ unsigned char[0x1] RgnData;
}

struct _WSANAMESPACE_INFOEXW {
  /* this+0x0 */ struct _GUID NSProviderId;
  /* this+0x10 */ unsigned long dwNameSpace;
  /* this+0x14 */ int fActive;
  /* this+0x18 */ unsigned long dwVersion;
  /* this+0x1c */ wchar_t * lpszIdentifier;
  /* this+0x20 */ struct _BLOB ProviderSpecific;
}

struct _MODEMSETTINGS {
  /* this+0x0 */ unsigned long dwActualSize;
  /* this+0x4 */ unsigned long dwRequiredSize;
  /* this+0x8 */ unsigned long dwDevSpecificOffset;
  /* this+0xc */ unsigned long dwDevSpecificSize;
  /* this+0x10 */ unsigned long dwCallSetupFailTimer;
  /* this+0x14 */ unsigned long dwInactivityTimeout;
  /* this+0x18 */ unsigned long dwSpeakerVolume;
  /* this+0x1c */ unsigned long dwSpeakerMode;
  /* this+0x20 */ unsigned long dwPreferredModemOptions;
  /* this+0x24 */ unsigned long dwNegotiatedModemOptions;
  /* this+0x28 */ unsigned long dwNegotiatedDCERate;
  /* this+0x2c */ unsigned char[0x1] abVariablePortion;
}

struct tagMCI_VD_ESCAPE_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const wchar_t * lpstrCommand;
}

struct PACKET_ZC_ACK_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char answer;
}

struct PACKET_ZC_NOTIFY_EFFECT3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int effectID;
  /* this+0xa */ int numdata;
}

struct PACKET_ZC_EQUIPITEM_DAMAGED {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short wearLocation;
  /* this+0x4 */ unsigned long accountID;
}

struct POWER_ACTION_POLICY {
  /* this+0x0 */ enum POWER_ACTION Action;
  /* this+0x4 */ unsigned long Flags;
  /* this+0x8 */ unsigned long EventCode;
}

struct tagBITMAPINFO {
  /* this+0x0 */ struct tagBITMAPINFOHEADER bmiHeader;
  /* this+0x28 */ struct tagRGBQUAD[0x1] bmiColors;
}

struct PACKET_ZC_GUILD_INFO2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int GDID;
  /* this+0x6 */ int level;
  /* this+0xa */ int userNum;
  /* this+0xe */ int maxUserNum;
  /* this+0x12 */ int userAverageLevel;
  /* this+0x16 */ int exp;
  /* this+0x1a */ int maxExp;
  /* this+0x1e */ int point;
  /* this+0x22 */ int honor;
  /* this+0x26 */ int virtue;
  /* this+0x2a */ int emblemVersion;
  /* this+0x2e */ char[0x18] guildname;
  /* this+0x46 */ char[0x18] masterName;
  /* this+0x5e */ char[0x10] manageLand;
  /* this+0x6e */ int zeny;
}

struct PACKET_ZC_RESULT_MAKE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct tagMIDIOUTCAPS2A {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned short wTechnology;
  /* this+0x2a */ unsigned short wVoices;
  /* this+0x2c */ unsigned short wNotes;
  /* this+0x2e */ unsigned short wChannelMask;
  /* this+0x30 */ unsigned long dwSupport;
  /* this+0x34 */ struct _GUID ManufacturerGuid;
  /* this+0x44 */ struct _GUID ProductGuid;
  /* this+0x54 */ struct _GUID NameGuid;
}

struct tagODBC_VS_ARGS {
  /* this+0x0 */ const struct _GUID * pguidEvent;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ wchar_t * wszArg;
  /* this+0x8 */ char * szArg;
  /* this+0xc */ wchar_t * wszCorrelation;
  /* this+0xc */ char * szCorrelation;
  /* this+0x10 */ short RetCode;
}

struct PACKET_ZC_NOTIFY_RANKING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int ranking;
  /* this+0xa */ int total;
}

struct PACKET_CZ_AUCTION_CREATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
}

struct PACKET_ZC_SKILL_POSTDELAY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ unsigned long DelayTM;
}

struct PACKET_ZC_NOTIFY_CARTITEM_COUNTINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short curCount;
  /* this+0x4 */ short maxCount;
  /* this+0x6 */ int curWeight;
  /* this+0xa */ int maxWeight;
}

struct _IMAGE_ROM_OPTIONAL_HEADER {
  /* this+0x0 */ unsigned short Magic;
  /* this+0x2 */ unsigned char MajorLinkerVersion;
  /* this+0x3 */ unsigned char MinorLinkerVersion;
  /* this+0x4 */ unsigned long SizeOfCode;
  /* this+0x8 */ unsigned long SizeOfInitializedData;
  /* this+0xc */ unsigned long SizeOfUninitializedData;
  /* this+0x10 */ unsigned long AddressOfEntryPoint;
  /* this+0x14 */ unsigned long BaseOfCode;
  /* this+0x18 */ unsigned long BaseOfData;
  /* this+0x1c */ unsigned long BaseOfBss;
  /* this+0x20 */ unsigned long GprMask;
  /* this+0x24 */ unsigned long[0x4] CprMask;
  /* this+0x34 */ unsigned long GpValue;
}

struct _IMAGE_ROM_HEADERS {
  /* this+0x0 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* this+0x14 */ struct _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
}

struct tagSCROLLBARINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct tagRECT rcScrollBar;
  /* this+0x14 */ int dxyLineButton;
  /* this+0x18 */ int xyThumbTop;
  /* this+0x1c */ int xyThumbBottom;
  /* this+0x20 */ int reserved;
  /* this+0x24 */ unsigned long[0x6] rgstate;
}

struct pollfd {
  /* this+0x0 */ unsigned int fd;
  /* this+0x4 */ short events;
  /* this+0x6 */ short revents;
}

struct tagMIDIINCAPSA {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned long dwSupport;
}

struct tagMCI_WAVE_SET_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwTimeFormat;
  /* this+0x8 */ unsigned long dwAudio;
  /* this+0xc */ unsigned int wInput;
  /* this+0x10 */ unsigned int wOutput;
  /* this+0x14 */ unsigned short wFormatTag;
  /* this+0x16 */ unsigned short wReserved2;
  /* this+0x18 */ unsigned short nChannels;
  /* this+0x1a */ unsigned short wReserved3;
  /* this+0x1c */ unsigned long nSamplesPerSec;
  /* this+0x20 */ unsigned long nAvgBytesPerSec;
  /* this+0x24 */ unsigned short nBlockAlign;
  /* this+0x26 */ unsigned short wReserved4;
  /* this+0x28 */ unsigned short wBitsPerSample;
  /* this+0x2a */ unsigned short wReserved5;
}

struct _IMAGE_DEBUG_DIRECTORY {
  /* this+0x0 */ unsigned long Characteristics;
  /* this+0x4 */ unsigned long TimeDateStamp;
  /* this+0x8 */ unsigned short MajorVersion;
  /* this+0xa */ unsigned short MinorVersion;
  /* this+0xc */ unsigned long Type;
  /* this+0x10 */ unsigned long SizeOfData;
  /* this+0x14 */ unsigned long AddressOfRawData;
  /* this+0x18 */ unsigned long PointerToRawData;
}

struct pvalueA {
  /* this+0x0 */ char * pv_valuename;
  /* this+0x4 */ int pv_valuelen;
  /* this+0x8 */ void * pv_value_context;
  /* this+0xc */ unsigned long pv_type;
}

struct PACKET_CZ_REQ_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x28] key;
}

struct PACKET_ZC_NOTIFY_NEWENTRY2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ short effectState;
  /* this+0xe */ short job;
  /* this+0x10 */ short head;
  /* this+0x12 */ int weapon;
  /* this+0x16 */ short accessory;
  /* this+0x18 */ short accessory2;
  /* this+0x1a */ short accessory3;
  /* this+0x1c */ short headpalette;
  /* this+0x1e */ short bodypalette;
  /* this+0x20 */ short headDir;
  /* this+0x22 */ unsigned long GUID;
  /* this+0x26 */ short GEmblemVer;
  /* this+0x28 */ short honor;
  /* this+0x2a */ short virtue;
  /* this+0x2c */ bool isPKModeON;
  /* this+0x2d */ unsigned char sex;
  /* this+0x2e */ unsigned char[0x3] PosDir;
  /* this+0x31 */ unsigned char xSize;
  /* this+0x32 */ unsigned char ySize;
  /* this+0x33 */ short clevel;
}

struct PACKET_ZC_NOTIFY_PCBANG_PLAYING_TIME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int TimeMinute;
}

struct _TOKEN_USER {
  /* this+0x0 */ struct _SID_AND_ATTRIBUTES User;
}

struct tagEMREXTTEXTOUTA {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long iGraphicsMode;
  /* this+0x1c */ float exScale;
  /* this+0x20 */ float eyScale;
  /* this+0x24 */ struct tagEMRTEXT emrtext;
}

struct PACKET_ZC_NOTIFY_NEWENTRY3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ int effectState;
  /* this+0x10 */ short job;
  /* this+0x12 */ short head;
  /* this+0x14 */ int weapon;
  /* this+0x18 */ short accessory;
  /* this+0x1a */ short accessory2;
  /* this+0x1c */ short accessory3;
  /* this+0x1e */ short headpalette;
  /* this+0x20 */ short bodypalette;
  /* this+0x22 */ short headDir;
  /* this+0x24 */ unsigned long GUID;
  /* this+0x28 */ short GEmblemVer;
  /* this+0x2a */ short honor;
  /* this+0x2c */ int virtue;
  /* this+0x30 */ bool isPKModeON;
  /* this+0x31 */ unsigned char sex;
  /* this+0x32 */ unsigned char[0x3] PosDir;
  /* this+0x35 */ unsigned char xSize;
  /* this+0x36 */ unsigned char ySize;
  /* this+0x37 */ short clevel;
}

struct PACKET_CZ_ITEM_THROW2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ short count;
}

struct tagEMRANGLEARC {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _POINTL ptlCenter;
  /* this+0x10 */ unsigned long nRadius;
  /* this+0x14 */ float eStartAngle;
  /* this+0x18 */ float eSweepAngle;
}

struct tagCANDIDATEFORM {
  /* this+0x0 */ unsigned long dwIndex;
  /* this+0x4 */ unsigned long dwStyle;
  /* this+0x8 */ struct tagPOINT ptCurrentPos;
  /* this+0x10 */ struct tagRECT rcArea;
}

struct tagEMRSETARCDIRECTION {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long iArcDirection;
}

struct midihdr_tag {
  /* this+0x0 */ char * lpData;
  /* this+0x4 */ unsigned long dwBufferLength;
  /* this+0x8 */ unsigned long dwBytesRecorded;
  /* this+0xc */ unsigned long dwUser;
  /* this+0x10 */ unsigned long dwFlags;
  /* this+0x14 */ struct midihdr_tag * lpNext;
  /* this+0x18 */ unsigned long reserved;
  /* this+0x1c */ unsigned long dwOffset;
  /* this+0x20 */ unsigned long[0x8] dwReserved;
}

struct PACKET_ZC_GUILD_ZENY_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ret;
}

struct tagLAYERPLANEDESCRIPTOR {
  /* this+0x0 */ unsigned short nSize;
  /* this+0x2 */ unsigned short nVersion;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned char iPixelType;
  /* this+0x9 */ unsigned char cColorBits;
  /* this+0xa */ unsigned char cRedBits;
  /* this+0xb */ unsigned char cRedShift;
  /* this+0xc */ unsigned char cGreenBits;
  /* this+0xd */ unsigned char cGreenShift;
  /* this+0xe */ unsigned char cBlueBits;
  /* this+0xf */ unsigned char cBlueShift;
  /* this+0x10 */ unsigned char cAlphaBits;
  /* this+0x11 */ unsigned char cAlphaShift;
  /* this+0x12 */ unsigned char cAccumBits;
  /* this+0x13 */ unsigned char cAccumRedBits;
  /* this+0x14 */ unsigned char cAccumGreenBits;
  /* this+0x15 */ unsigned char cAccumBlueBits;
  /* this+0x16 */ unsigned char cAccumAlphaBits;
  /* this+0x17 */ unsigned char cDepthBits;
  /* this+0x18 */ unsigned char cStencilBits;
  /* this+0x19 */ unsigned char cAuxBuffers;
  /* this+0x1a */ unsigned char iLayerPlane;
  /* this+0x1b */ unsigned char bReserved;
  /* this+0x1c */ unsigned long crTransparent;
}

struct tagMCI_WAVE_DELETE_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwFrom;
  /* this+0x8 */ unsigned long dwTo;
}

struct _TAPE_SET_POSITION {
  /* this+0x0 */ unsigned long Method;
  /* this+0x4 */ unsigned long Partition;
  /* this+0x8 */ union _LARGE_INTEGER Offset;
  /* this+0x10 */ unsigned char Immediate;
}

struct _numberfmtW {
  /* this+0x0 */ unsigned int NumDigits;
  /* this+0x4 */ unsigned int LeadingZero;
  /* this+0x8 */ unsigned int Grouping;
  /* this+0xc */ wchar_t * lpDecimalSep;
  /* this+0x10 */ wchar_t * lpThousandSep;
  /* this+0x14 */ unsigned int NegativeOrder;
}

struct _CONNECTDLGSTRUCTA {
  /* this+0x0 */ unsigned long cbStructure;
  /* this+0x4 */ struct HWND__ * hwndOwner;
  /* this+0x8 */ struct _NETRESOURCEA * lpConnRes;
  /* this+0xc */ unsigned long dwFlags;
  /* this+0x10 */ unsigned long dwDevNum;
}

struct PACKET_ZC_MISSION_HUNT {
  /* this+0x0 */ unsigned long mobGID;
  /* this+0x4 */ short huntCount;
  /* this+0x6 */ char[0x18] mobName;
}

struct PACKET_ZC_NOTIFY_WEAPONITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct tagRID_DEVICE_INFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long dwType;
  /* this+0x8 */ struct tagRID_DEVICE_INFO_MOUSE mouse;
  /* this+0x8 */ struct tagRID_DEVICE_INFO_KEYBOARD keyboard;
  /* this+0x8 */ struct tagRID_DEVICE_INFO_HID hid;
}

struct PACKET_CZ_REQ_JOIN_GUILD2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] characterName;
}

union _IMAGE_LINENUMBER::<unnamed-type-Type> {
  /* this+0x0 */ unsigned long SymbolTableIndex;
  /* this+0x0 */ unsigned long VirtualAddress;
}

struct _IMAGE_LINENUMBER {
  /* this+0x0 */ union _IMAGE_LINENUMBER::<unnamed-type-Type> Type;
  /* this+0x4 */ unsigned short Linenumber;
}

struct tagMIXERLINEA::<unnamed-type-Target> {
  /* this+0x0 */ unsigned long dwType;
  /* this+0x4 */ unsigned long dwDeviceID;
  /* this+0x8 */ unsigned short wMid;
  /* this+0xa */ unsigned short wPid;
  /* this+0xc */ unsigned int vDriverVersion;
  /* this+0x10 */ char[0x20] szPname;
}

struct tagMIXERLINEA {
  /* this+0x0 */ unsigned long cbStruct;
  /* this+0x4 */ unsigned long dwDestination;
  /* this+0x8 */ unsigned long dwSource;
  /* this+0xc */ unsigned long dwLineID;
  /* this+0x10 */ unsigned long fdwLine;
  /* this+0x14 */ unsigned long dwUser;
  /* this+0x18 */ unsigned long dwComponentType;
  /* this+0x1c */ unsigned long cChannels;
  /* this+0x20 */ unsigned long cConnections;
  /* this+0x24 */ unsigned long cControls;
  /* this+0x28 */ char[0x10] szShortName;
  /* this+0x38 */ char[0x40] szName;
  /* this+0x78 */ struct tagMIXERLINEA::<unnamed-type-Target> Target;
}

struct _EXCEPTION_DEBUG_INFO {
  /* this+0x0 */ struct _EXCEPTION_RECORD ExceptionRecord;
  /* this+0x50 */ unsigned long dwFirstChance;
}

struct tagNEWTEXTMETRICA {
  /* this+0x0 */ long tmHeight;
  /* this+0x4 */ long tmAscent;
  /* this+0x8 */ long tmDescent;
  /* this+0xc */ long tmInternalLeading;
  /* this+0x10 */ long tmExternalLeading;
  /* this+0x14 */ long tmAveCharWidth;
  /* this+0x18 */ long tmMaxCharWidth;
  /* this+0x1c */ long tmWeight;
  /* this+0x20 */ long tmOverhang;
  /* this+0x24 */ long tmDigitizedAspectX;
  /* this+0x28 */ long tmDigitizedAspectY;
  /* this+0x2c */ unsigned char tmFirstChar;
  /* this+0x2d */ unsigned char tmLastChar;
  /* this+0x2e */ unsigned char tmDefaultChar;
  /* this+0x2f */ unsigned char tmBreakChar;
  /* this+0x30 */ unsigned char tmItalic;
  /* this+0x31 */ unsigned char tmUnderlined;
  /* this+0x32 */ unsigned char tmStruckOut;
  /* this+0x33 */ unsigned char tmPitchAndFamily;
  /* this+0x34 */ unsigned char tmCharSet;
  /* this+0x38 */ unsigned long ntmFlags;
  /* this+0x3c */ unsigned int ntmSizeEM;
  /* this+0x40 */ unsigned int ntmCellHeight;
  /* this+0x44 */ unsigned int ntmAvgWidth;
}

struct _DISPLAY_DEVICEA {
  /* this+0x0 */ unsigned long cb;
  /* this+0x4 */ char[0x20] DeviceName;
  /* this+0x24 */ char[0x80] DeviceString;
  /* this+0xa4 */ unsigned long StateFlags;
  /* this+0xa8 */ char[0x80] DeviceID;
  /* this+0x128 */ char[0x80] DeviceKey;
}

struct tagWCRANGE {
  /* this+0x0 */ wchar_t wcLow;
  /* this+0x2 */ unsigned short cGlyphs;
}

struct _IMAGE_DEBUG_MISC {
  /* this+0x0 */ unsigned long DataType;
  /* this+0x4 */ unsigned long Length;
  /* this+0x8 */ unsigned char Unicode;
  /* this+0x9 */ unsigned char[0x3] Reserved;
  /* this+0xc */ unsigned char[0x1] Data;
}

struct _TRANSACTION_LIST_ENTRY {
  /* this+0x0 */ struct _GUID UOW;
}

struct _TP_IO {
}

struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
  /* this+0x0 */ char * pmszRequiredPrivileges;
}

struct tagMCI_BREAK_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ int nVirtKey;
  /* this+0x8 */ struct HWND__ * hwndBreak;
}

struct PACKET_CH_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ClientType;
  /* this+0x3 */ unsigned char[0x10] HashValue;
}

struct HENHMETAFILE__ {
  /* this+0x0 */ int unused;
}

struct tagMCI_ANIM_WINDOW_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ struct HWND__ * hWnd;
  /* this+0x8 */ unsigned int nCmdShow;
  /* this+0xc */ const wchar_t * lpstrText;
}

struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long BeginAddress;
  /* this+0x4 */ unsigned long EndAddress;
  /* this+0x8 */ unsigned long ExceptionHandler;
  /* this+0xc */ unsigned long HandlerData;
  /* this+0x10 */ unsigned long PrologEndAddress;
}

struct _RESOURCEMANAGER_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID ResourceManagerId;
  /* this+0x10 */ unsigned long DescriptionLength;
  /* this+0x14 */ wchar_t[0x1] Description;
}

struct PACKET_CZ_CHANGE_CHATROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short size;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ char[0x8] passwd;
}

struct _COMPATIBILITY_CONTEXT_ELEMENT {
  /* this+0x0 */ struct _GUID Id;
  /* this+0x10 */ enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
}

struct _SOCKET_ADDRESS_LIST {
  /* this+0x0 */ int iAddressCount;
  /* this+0x4 */ struct _SOCKET_ADDRESS[0x1] Address;
}

struct PACKET_ZC_TAEKWON_RANK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18][0xa] Name;
  /* this+0xf2 */ int[0xa] Point;
}

struct PACKET_ZC_BUYING_STORE_ENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long makerAID;
  /* this+0x6 */ char[0x50] storeName;
}

struct tagENUMLOGFONTEXA {
  /* this+0x0 */ struct tagLOGFONTA elfLogFont;
  /* this+0x3c */ unsigned char[0x40] elfFullName;
  /* this+0x7c */ unsigned char[0x20] elfStyle;
  /* this+0x9c */ unsigned char[0x20] elfScript;
}

struct tagDESIGNVECTOR {
  /* this+0x0 */ unsigned long dvReserved;
  /* this+0x4 */ unsigned long dvNumAxes;
  /* this+0x8 */ long[0x10] dvValues;
}

struct PACKET_ZC_USESKILL_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long targetID;
  /* this+0xa */ short xPos;
  /* this+0xc */ short yPos;
  /* this+0xe */ unsigned short SKID;
  /* this+0x10 */ unsigned long property;
  /* this+0x14 */ unsigned long delayTime;
}

struct PACKET_CH_NOT_AVAILABLE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x4] SecondPWIdx;
}

struct PACKET_ZC_NOTIFY_STANDENTRY5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char objecttype;
  /* this+0x5 */ unsigned long GID;
  /* this+0x9 */ short speed;
  /* this+0xb */ short bodyState;
  /* this+0xd */ short healthState;
  /* this+0xf */ int effectState;
  /* this+0x13 */ short job;
  /* this+0x15 */ short head;
  /* this+0x17 */ int weapon;
  /* this+0x1b */ short accessory;
  /* this+0x1d */ short accessory2;
  /* this+0x1f */ short accessory3;
  /* this+0x21 */ short headpalette;
  /* this+0x23 */ short bodypalette;
  /* this+0x25 */ short headDir;
  /* this+0x27 */ unsigned long GUID;
  /* this+0x2b */ short GEmblemVer;
  /* this+0x2d */ short honor;
  /* this+0x2f */ int virtue;
  /* this+0x33 */ bool isPKModeON;
  /* this+0x34 */ unsigned char sex;
  /* this+0x35 */ unsigned char[0x3] PosDir;
  /* this+0x38 */ unsigned char xSize;
  /* this+0x39 */ unsigned char ySize;
  /* this+0x3a */ unsigned char state;
  /* this+0x3b */ short clevel;
  /* this+0x3d */ short font;
}

struct _OSVERSIONINFOW {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize;
  /* this+0x4 */ unsigned long dwMajorVersion;
  /* this+0x8 */ unsigned long dwMinorVersion;
  /* this+0xc */ unsigned long dwBuildNumber;
  /* this+0x10 */ unsigned long dwPlatformId;
  /* this+0x14 */ wchar_t[0x80] szCSDVersion;
}

struct tagRECONVERTSTRING {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwVersion;
  /* this+0x8 */ unsigned long dwStrLen;
  /* this+0xc */ unsigned long dwStrOffset;
  /* this+0x10 */ unsigned long dwCompStrLen;
  /* this+0x14 */ unsigned long dwCompStrOffset;
  /* this+0x18 */ unsigned long dwTargetStrLen;
  /* this+0x1c */ unsigned long dwTargetStrOffset;
}

struct PACKET_HC_CHARLIST_NOTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int TotalCnt;
}

struct _EXCEPTION_RECORD32 {
  /* this+0x0 */ unsigned long ExceptionCode;
  /* this+0x4 */ unsigned long ExceptionFlags;
  /* this+0x8 */ unsigned long ExceptionRecord;
  /* this+0xc */ unsigned long ExceptionAddress;
  /* this+0x10 */ unsigned long NumberParameters;
  /* this+0x14 */ unsigned long[0xf] ExceptionInformation;
}

struct PACKET_AHC_GAME_GUARD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long[0x4] AuthData;
}

struct MISSION_HUNT_INFO {
  /* this+0x0 */ unsigned long mobGID;
  /* this+0x4 */ short huntCount;
  /* this+0x6 */ short maxCount;
  /* this+0x8 */ char[0x18] mobName;
}

struct PACKET_CZ_CLOSE_DIALOG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct _IMAGE_SYMBOL_EX {
  /* this+0x0 */ union _IMAGE_SYMBOL_EX::<unnamed-type-N> N;
  /* this+0x8 */ unsigned long Value;
  /* this+0xc */ long SectionNumber;
  /* this+0x10 */ unsigned short Type;
  /* this+0x12 */ unsigned char StorageClass;
  /* this+0x13 */ unsigned char NumberOfAuxSymbols;
}

struct tagEMREXTSELECTCLIPRGN {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long cbRgnData;
  /* this+0xc */ unsigned long iMode;
  /* this+0x10 */ unsigned char[0x1] RgnData;
}

struct PACKET_ZC_NOTIFY_ACTENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ short effectState;
  /* this+0xe */ short job;
  /* this+0x10 */ short head;
  /* this+0x12 */ short weapon;
  /* this+0x14 */ short accessory;
  /* this+0x16 */ short shield;
  /* this+0x18 */ short accessory2;
  /* this+0x1a */ short accessory3;
  /* this+0x1c */ short headpalette;
  /* this+0x1e */ short bodypalette;
  /* this+0x20 */ short headDir;
  /* this+0x22 */ unsigned long GUID;
  /* this+0x26 */ short GEmblemVer;
  /* this+0x28 */ short honor;
  /* this+0x2a */ short virtue;
  /* this+0x2c */ bool isPKModeON;
  /* this+0x2d */ unsigned char sex;
  /* this+0x2e */ unsigned char[0x3] PosDir;
  /* this+0x31 */ unsigned char xSize;
  /* this+0x32 */ unsigned char ySize;
  /* this+0x33 */ unsigned char action;
  /* this+0x34 */ unsigned long actStartTime;
  /* this+0x38 */ short clevel;
}

struct PACKET_ZC_ACK_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Result;
  /* this+0x3 */ char[0x18] EntryQueueName;
}

struct tagSTICKYKEYS {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
}

struct tagTITLEBARINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct tagRECT rcTitleBar;
  /* this+0x14 */ unsigned long[0x6] rgstate;
}

struct tagMCI_SEQ_SET_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwTimeFormat;
  /* this+0x8 */ unsigned long dwAudio;
  /* this+0xc */ unsigned long dwTempo;
  /* this+0x10 */ unsigned long dwPort;
  /* this+0x14 */ unsigned long dwSlave;
  /* this+0x18 */ unsigned long dwMaster;
  /* this+0x1c */ unsigned long dwOffset;
}

struct PACKET_ZC_EMOTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char type;
}

struct PACKET_ZC_EQUIP_ARROW {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
}

struct PACKET_CA_LOGIN_CHN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long Version;
  /* this+0x8 */ unsigned char[0x20] PasswdMD5;
  /* this+0x28 */ unsigned char clienttype;
}

struct PACKET_CZ_REG_CHANGE_GUILD_POSITIONINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct _TRANSACTION_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID TransactionId;
  /* this+0x10 */ unsigned long State;
  /* this+0x14 */ unsigned long Outcome;
}

struct tagAXISINFOW {
  /* this+0x0 */ long axMinValue;
  /* this+0x4 */ long axMaxValue;
  /* this+0x8 */ wchar_t[0x10] axAxisName;
}

struct tagENUMLOGFONTA {
  /* this+0x0 */ struct tagLOGFONTA elfLogFont;
  /* this+0x3c */ unsigned char[0x40] elfFullName;
  /* this+0x7c */ unsigned char[0x20] elfStyle;
}

struct tagEMRALPHABLEND {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ long xDest;
  /* this+0x1c */ long yDest;
  /* this+0x20 */ long cxDest;
  /* this+0x24 */ long cyDest;
  /* this+0x28 */ unsigned long dwRop;
  /* this+0x2c */ long xSrc;
  /* this+0x30 */ long ySrc;
  /* this+0x34 */ struct tagXFORM xformSrc;
  /* this+0x4c */ unsigned long crBkColorSrc;
  /* this+0x50 */ unsigned long iUsageSrc;
  /* this+0x54 */ unsigned long offBmiSrc;
  /* this+0x58 */ unsigned long cbBmiSrc;
  /* this+0x5c */ unsigned long offBitsSrc;
  /* this+0x60 */ unsigned long cbBitsSrc;
  /* this+0x64 */ long cxSrc;
  /* this+0x68 */ long cySrc;
}

struct tagMOUSEHOOKSTRUCT {
  /* this+0x0 */ struct tagPOINT pt;
  /* this+0x8 */ struct HWND__ * hwnd;
  /* this+0xc */ unsigned int wHitTestCode;
  /* this+0x10 */ unsigned long dwExtraInfo;
}

struct tagUPDATELAYEREDWINDOWINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct HDC__ * hdcDst;
  /* this+0x8 */ const struct tagPOINT * pptDst;
  /* this+0xc */ const struct tagSIZE * psize;
  /* this+0x10 */ struct HDC__ * hdcSrc;
  /* this+0x14 */ const struct tagPOINT * pptSrc;
  /* this+0x18 */ unsigned long crKey;
  /* this+0x1c */ const struct _BLENDFUNCTION * pblend;
  /* this+0x20 */ unsigned long dwFlags;
  /* this+0x24 */ const struct tagRECT * prcDirty;
}

struct tagMIXERCONTROLA {
  /* this+0x0 */ unsigned long cbStruct;
  /* this+0x4 */ unsigned long dwControlID;
  /* this+0x8 */ unsigned long dwControlType;
  /* this+0xc */ unsigned long fdwControl;
  /* this+0x10 */ unsigned long cMultipleItems;
  /* this+0x14 */ char[0x10] szShortName;
  /* this+0x24 */ char[0x40] szName;
  /* this+0x64 */ union tagMIXERCONTROLA::<unnamed-type-Bounds> Bounds;
  /* this+0x7c */ union tagMIXERCONTROLA::<unnamed-type-Metrics> Metrics;
}

struct PACKET_CZ_REQ_REMAINTIME {
  /* this+0x0 */ short PacketType;
}

struct PACKET_HC_MAKE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Result;
  /* this+0x4 */ unsigned long Seed;
}

struct tagEMRGLSRECORD {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long cbData;
  /* this+0xc */ unsigned char[0x1] Data;
}

struct tagMOUSEKEYS {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long iMaxSpeed;
  /* this+0xc */ unsigned long iTimeToMaxSpeed;
  /* this+0x10 */ unsigned long iCtrlSpeed;
  /* this+0x14 */ unsigned long dwReserved1;
  /* this+0x18 */ unsigned long dwReserved2;
}

struct PACKET_ZC_ACK_BAN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] charName;
  /* this+0x1a */ char[0x28] reasonDesc;
  /* this+0x42 */ char[0x18] account;
}

struct HACCEL__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_JOIN_BATTLE_FIELD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long BFNO;
  /* this+0x6 */ short JoinTeam;
  /* this+0x8 */ short Result;
}

struct tagEMRSTRETCHBLT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ long xDest;
  /* this+0x1c */ long yDest;
  /* this+0x20 */ long cxDest;
  /* this+0x24 */ long cyDest;
  /* this+0x28 */ unsigned long dwRop;
  /* this+0x2c */ long xSrc;
  /* this+0x30 */ long ySrc;
  /* this+0x34 */ struct tagXFORM xformSrc;
  /* this+0x4c */ unsigned long crBkColorSrc;
  /* this+0x50 */ unsigned long iUsageSrc;
  /* this+0x54 */ unsigned long offBmiSrc;
  /* this+0x58 */ unsigned long cbBmiSrc;
  /* this+0x5c */ unsigned long offBitsSrc;
  /* this+0x60 */ unsigned long cbBitsSrc;
  /* this+0x64 */ long cxSrc;
  /* this+0x68 */ long cySrc;
}

struct _ACCESS_DENIED_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long SidStart;
}

struct _TOKEN_GROUPS {
  /* this+0x0 */ unsigned long GroupCount;
  /* this+0x4 */ struct _SID_AND_ATTRIBUTES[0x1] Groups;
}

struct _TOKEN_PRIVILEGES {
  /* this+0x0 */ unsigned long PrivilegeCount;
  /* this+0x4 */ struct _LUID_AND_ATTRIBUTES[0x1] Privileges;
}

struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
  /* this+0x0 */ unsigned long SecurityLimitFlags;
  /* this+0x4 */ void * JobToken;
  /* this+0x8 */ struct _TOKEN_GROUPS * SidsToDisable;
  /* this+0xc */ struct _TOKEN_PRIVILEGES * PrivilegesToDelete;
  /* this+0x10 */ struct _TOKEN_GROUPS * RestrictedSids;
}

struct _IMAGE_THUNK_DATA32 {
  /* this+0x0 */ union _IMAGE_THUNK_DATA32::<unnamed-type-u1> u1;
}

struct tagAXISINFOA {
  /* this+0x0 */ long axMinValue;
  /* this+0x4 */ long axMaxValue;
  /* this+0x8 */ unsigned char[0x10] axAxisName;
}

struct PACKET_CA_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x10] HashValue;
}

struct PACKET_CZ_JOIN_BATTLE_FIELD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long BFNO;
  /* this+0x6 */ short JoinTeam;
}

struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long FuncStart;
        }

struct PACKET_ZC_NOTIFY_MAPINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
}

struct PACKET_CZ_REQMAKINGHOMUN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ bool result;
}

struct tagSERIALKEYSA {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ char * lpszActivePort;
  /* this+0xc */ char * lpszPort;
  /* this+0x10 */ unsigned int iBaudRate;
  /* this+0x14 */ unsigned int iPortState;
  /* this+0x18 */ unsigned int iActive;
}

struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
  /* this+0x0 */ void * IoCompletionPortHandle;
  /* this+0x4 */ unsigned long CompletionKey;
}

struct PACKET_ZC_ITEM_PICKUP_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long accountID;
  /* this+0x6 */ unsigned short ITID;
  /* this+0x8 */ bool IsIdentified;
  /* this+0x9 */ bool IsDamaged;
  /* this+0xa */ unsigned char refiningLevel;
  /* this+0xb */ struct EQUIPSLOTINFO slot;
  /* this+0x13 */ unsigned short location;
  /* this+0x15 */ unsigned char type;
}

struct PACKET_ZC_COSTUME_SPRITE_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ int value;
}

struct ANON_OBJECT_HEADER {
  /* this+0x0 */ unsigned short Sig1;
  /* this+0x2 */ unsigned short Sig2;
  /* this+0x4 */ unsigned short Version;
  /* this+0x6 */ unsigned short Machine;
  /* this+0x8 */ unsigned long TimeDateStamp;
  /* this+0xc */ struct _GUID ClassID;
  /* this+0x1c */ unsigned long SizeOfData;
}

struct PACKET_CZ_JOIN_COUPLE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int answer;
}

struct PACKET_CZ_REQ_CLOSE_BUYING_STORE {
  /* this+0x0 */ short PacketType;
}

struct tagEMREXTESCAPE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ int iEscape;
  /* this+0xc */ int cbEscData;
  /* this+0x10 */ unsigned char[0x1] EscData;
}

struct tagMCI_ANIM_RECT_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ struct tagRECT rc;
}

struct _FILE_NAME_INFO {
  /* this+0x0 */ unsigned long FileNameLength;
  /* this+0x4 */ wchar_t[0x1] FileName;
}

struct tagEMRCREATECOLORSPACE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihCS;
  /* this+0xc */ struct tagLOGCOLORSPACEA lcs;
}

struct tagMIDIINCAPS2A {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned long dwSupport;
  /* this+0x2c */ struct _GUID ManufacturerGuid;
  /* this+0x3c */ struct _GUID ProductGuid;
  /* this+0x4c */ struct _GUID NameGuid;
}

struct _WSAPROTOCOL_INFOW {
  /* this+0x0 */ unsigned long dwServiceFlags1;
  /* this+0x4 */ unsigned long dwServiceFlags2;
  /* this+0x8 */ unsigned long dwServiceFlags3;
  /* this+0xc */ unsigned long dwServiceFlags4;
  /* this+0x10 */ unsigned long dwProviderFlags;
  /* this+0x14 */ struct _GUID ProviderId;
  /* this+0x24 */ unsigned long dwCatalogEntryId;
  /* this+0x28 */ struct _WSAPROTOCOLCHAIN ProtocolChain;
  /* this+0x48 */ int iVersion;
  /* this+0x4c */ int iAddressFamily;
  /* this+0x50 */ int iMaxSockAddr;
  /* this+0x54 */ int iMinSockAddr;
  /* this+0x58 */ int iSocketType;
  /* this+0x5c */ int iProtocol;
  /* this+0x60 */ int iProtocolMaxOffset;
  /* this+0x64 */ int iNetworkByteOrder;
  /* this+0x68 */ int iSecurityScheme;
  /* this+0x6c */ unsigned long dwMessageSize;
  /* this+0x70 */ unsigned long dwProviderReserved;
  /* this+0x74 */ wchar_t[0x100] szProtocol;
}

struct midiproptimediv_tag {
  /* this+0x0 */ unsigned long cbStruct;
  /* this+0x4 */ unsigned long dwTimeDiv;
}

struct PACKET_ZC_REQ_TAKEOFF_EQUIP_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned short wearLocation;
  /* this+0x6 */ bool result;
}

struct PACKET_ZC_STATUS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short point;
  /* this+0x4 */ unsigned char str;
  /* this+0x5 */ unsigned char standardStr;
  /* this+0x6 */ unsigned char agi;
  /* this+0x7 */ unsigned char standardAgi;
  /* this+0x8 */ unsigned char vit;
  /* this+0x9 */ unsigned char standardVit;
  /* this+0xa */ unsigned char Int;
  /* this+0xb */ unsigned char standardInt;
  /* this+0xc */ unsigned char dex;
  /* this+0xd */ unsigned char standardDex;
  /* this+0xe */ unsigned char luk;
  /* this+0xf */ unsigned char standardLuk;
  /* this+0x10 */ short attPower;
  /* this+0x12 */ short refiningPower;
  /* this+0x14 */ short max_mattPower;
  /* this+0x16 */ short min_mattPower;
  /* this+0x18 */ short itemdefPower;
  /* this+0x1a */ short plusdefPower;
  /* this+0x1c */ short mdefPower;
  /* this+0x1e */ short plusmdefPower;
  /* this+0x20 */ short hitSuccessValue;
  /* this+0x22 */ short avoidSuccessValue;
  /* this+0x24 */ short plusAvoidSuccessValue;
  /* this+0x26 */ short criticalSuccessValue;
  /* this+0x28 */ short ASPD;
  /* this+0x2a */ short plusASPD;
}

struct PACKET_ZC_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long OpponentGDID;
  /* this+0x6 */ int Relation;
}

struct tagShortCutKey {
  /* this+0x0 */ char isSkill;
  /* this+0x1 */ unsigned long ID;
  /* this+0x5 */ short count;
}

struct PACKET_CZ_SHORTCUT_KEY_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ struct tagShortCutKey ShortCutKey;
}

struct _IMAGE_VXD_HEADER {
  /* this+0x0 */ unsigned short e32_magic;
  /* this+0x2 */ unsigned char e32_border;
  /* this+0x3 */ unsigned char e32_worder;
  /* this+0x4 */ unsigned long e32_level;
  /* this+0x8 */ unsigned short e32_cpu;
  /* this+0xa */ unsigned short e32_os;
  /* this+0xc */ unsigned long e32_ver;
  /* this+0x10 */ unsigned long e32_mflags;
  /* this+0x14 */ unsigned long e32_mpages;
  /* this+0x18 */ unsigned long e32_startobj;
  /* this+0x1c */ unsigned long e32_eip;
  /* this+0x20 */ unsigned long e32_stackobj;
  /* this+0x24 */ unsigned long e32_esp;
  /* this+0x28 */ unsigned long e32_pagesize;
  /* this+0x2c */ unsigned long e32_lastpagesize;
  /* this+0x30 */ unsigned long e32_fixupsize;
  /* this+0x34 */ unsigned long e32_fixupsum;
  /* this+0x38 */ unsigned long e32_ldrsize;
  /* this+0x3c */ unsigned long e32_ldrsum;
  /* this+0x40 */ unsigned long e32_objtab;
  /* this+0x44 */ unsigned long e32_objcnt;
  /* this+0x48 */ unsigned long e32_objmap;
  /* this+0x4c */ unsigned long e32_itermap;
  /* this+0x50 */ unsigned long e32_rsrctab;
  /* this+0x54 */ unsigned long e32_rsrccnt;
  /* this+0x58 */ unsigned long e32_restab;
  /* this+0x5c */ unsigned long e32_enttab;
  /* this+0x60 */ unsigned long e32_dirtab;
  /* this+0x64 */ unsigned long e32_dircnt;
  /* this+0x68 */ unsigned long e32_fpagetab;
  /* this+0x6c */ unsigned long e32_frectab;
  /* this+0x70 */ unsigned long e32_impmod;
  /* this+0x74 */ unsigned long e32_impmodcnt;
  /* this+0x78 */ unsigned long e32_impproc;
  /* this+0x7c */ unsigned long e32_pagesum;
  /* this+0x80 */ unsigned long e32_datapage;
  /* this+0x84 */ unsigned long e32_preload;
  /* this+0x88 */ unsigned long e32_nrestab;
  /* this+0x8c */ unsigned long e32_cbnrestab;
  /* this+0x90 */ unsigned long e32_nressum;
  /* this+0x94 */ unsigned long e32_autodata;
  /* this+0x98 */ unsigned long e32_debuginfo;
  /* this+0x9c */ unsigned long e32_debuglen;
  /* this+0xa0 */ unsigned long e32_instpreload;
  /* this+0xa4 */ unsigned long e32_instdemand;
  /* this+0xa8 */ unsigned long e32_heapsize;
  /* this+0xac */ unsigned char[0xc] e32_res3;
  /* this+0xb8 */ unsigned long e32_winresoff;
  /* this+0xbc */ unsigned long e32_winreslen;
  /* this+0xc0 */ unsigned short e32_devid;
  /* this+0xc2 */ unsigned short e32_ddkver;
}

struct PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
}

struct PACKET_CZ_TRYCAPTURE_MONSTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long targetAID;
}

struct PACKET_ZC_PARTY_RECRUIT_CANCEL_VOLUNTEER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long index;
}

struct PACKET_ZC_CARTOFF {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_NOTIFY_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] EntryQueueName;
  /* this+0x1a */ char[0x18] LobbyName;
}

struct tagEMRSETWORLDTRANSFORM {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct tagXFORM xform;
}

struct EQUIPMENTITEM_EXTRAINFO2 {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ bool IsIdentified;
  /* this+0x6 */ unsigned short location;
  /* this+0x8 */ unsigned short WearState;
  /* this+0xa */ bool IsDamaged;
  /* this+0xb */ unsigned char RefiningLevel;
  /* this+0xc */ struct EQUIPSLOTINFO slot;
  /* this+0x14 */ long HireExpireDate;
}

struct EQUIPMENTITEM_EXTRAINFO3 {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ bool IsIdentified;
  /* this+0x6 */ unsigned short location;
  /* this+0x8 */ unsigned short WearState;
  /* this+0xa */ bool IsDamaged;
  /* this+0xb */ unsigned char RefiningLevel;
  /* this+0xc */ struct EQUIPSLOTINFO slot;
  /* this+0x14 */ long HireExpireDate;
  /* this+0x18 */ unsigned short bindOnEquipType;
}

struct _CACHE_DESCRIPTOR {
  /* this+0x0 */ unsigned char Level;
  /* this+0x1 */ unsigned char Associativity;
  /* this+0x2 */ unsigned short LineSize;
  /* this+0x4 */ unsigned long Size;
  /* this+0x8 */ enum _PROCESSOR_CACHE_TYPE Type;
}

struct _RTL_CONDITION_VARIABLE {
  /* this+0x0 */ void * Ptr;
}

struct tagMULTIKEYHELPA {
  /* this+0x0 */ unsigned long mkSize;
  /* this+0x4 */ char mkKeylist;
  /* this+0x5 */ char[0x1] szKeyphrase;
}

struct PACKET_ZC_GROUPINFO_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long expOption;
}

struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID TmIdentity;
  /* this+0x10 */ union _LARGE_INTEGER VirtualClock;
}

struct addrinfo {
  /* this+0x0 */ int ai_flags;
  /* this+0x4 */ int ai_family;
  /* this+0x8 */ int ai_socktype;
  /* this+0xc */ int ai_protocol;
  /* this+0x10 */ unsigned int ai_addrlen;
  /* this+0x14 */ char * ai_canonname;
  /* this+0x18 */ struct sockaddr * ai_addr;
  /* this+0x1c */ struct addrinfo * ai_next;
}

struct PACKET_CA_LOGIN_CHANNEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x18] Passwd;
  /* this+0x36 */ unsigned char clienttype;
  /* this+0x37 */ char[0x10] m_szIP;
  /* this+0x47 */ unsigned char[0xd] m_szMacAddr;
  /* this+0x54 */ unsigned char Channeling_Corp;
}

struct _WIN32_FILE_ATTRIBUTE_DATA {
  /* this+0x0 */ unsigned long dwFileAttributes;
  /* this+0x4 */ struct _FILETIME ftCreationTime;
  /* this+0xc */ struct _FILETIME ftLastAccessTime;
  /* this+0x14 */ struct _FILETIME ftLastWriteTime;
  /* this+0x1c */ unsigned long nFileSizeHigh;
  /* this+0x20 */ unsigned long nFileSizeLow;
}

struct _MMCKINFO {
  /* this+0x0 */ unsigned long ckid;
  /* this+0x4 */ unsigned long cksize;
  /* this+0x8 */ unsigned long fccType;
  /* this+0xc */ unsigned long dwDataOffset;
  /* this+0x10 */ unsigned long dwFlags;
}

struct PACKET_ZC_BROADCAST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long fontColor;
  /* this+0x8 */ short fontType;
  /* this+0xa */ short fontSize;
  /* this+0xc */ short fontAlign;
  /* this+0xe */ short fontY;
}

struct PPM_WMI_IDLE_STATES {
  /* this+0x0 */ unsigned long Type;
  /* this+0x4 */ unsigned long Count;
  /* this+0x8 */ unsigned long TargetState;
  /* this+0xc */ unsigned long OldState;
  /* this+0x10 */ unsigned __int64 TargetProcessors;
  /* this+0x18 */ struct PPM_WMI_IDLE_STATE[0x1] State;
}

struct _FILE_BASIC_INFO {
  /* this+0x0 */ union _LARGE_INTEGER CreationTime;
  /* this+0x8 */ union _LARGE_INTEGER LastAccessTime;
  /* this+0x10 */ union _LARGE_INTEGER LastWriteTime;
  /* this+0x18 */ union _LARGE_INTEGER ChangeTime;
  /* this+0x20 */ unsigned long FileAttributes;
}

struct _OSVERSIONINFOEXA {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize;
  /* this+0x4 */ unsigned long dwMajorVersion;
  /* this+0x8 */ unsigned long dwMinorVersion;
  /* this+0xc */ unsigned long dwBuildNumber;
  /* this+0x10 */ unsigned long dwPlatformId;
  /* this+0x14 */ char[0x80] szCSDVersion;
  /* this+0x94 */ unsigned short wServicePackMajor;
  /* this+0x96 */ unsigned short wServicePackMinor;
  /* this+0x98 */ unsigned short wSuiteMask;
  /* this+0x9a */ unsigned char wProductType;
  /* this+0x9b */ unsigned char wReserved;
}

struct tMIXERCONTROLDETAILS_SIGNED {
  /* this+0x0 */ long lValue;
}

struct _IMAGE_COFF_SYMBOLS_HEADER {
  /* this+0x0 */ unsigned long NumberOfSymbols;
  /* this+0x4 */ unsigned long LvaToFirstSymbol;
  /* this+0x8 */ unsigned long NumberOfLinenumbers;
  /* this+0xc */ unsigned long LvaToFirstLinenumber;
  /* this+0x10 */ unsigned long RvaToFirstByteOfCode;
  /* this+0x14 */ unsigned long RvaToLastByteOfCode;
  /* this+0x18 */ unsigned long RvaToFirstByteOfData;
  /* this+0x1c */ unsigned long RvaToLastByteOfData;
}

struct _ImageArchitectureHeader {
      /* this+0x4 */ unsigned long FirstEntryRVA;
}

struct _SYSTEM_POWER_STATUS {
  /* this+0x0 */ unsigned char ACLineStatus;
  /* this+0x1 */ unsigned char BatteryFlag;
  /* this+0x2 */ unsigned char BatteryLifePercent;
  /* this+0x3 */ unsigned char Reserved1;
  /* this+0x4 */ unsigned long BatteryLifeTime;
  /* this+0x8 */ unsigned long BatteryFullLifeTime;
}

union _IMAGE_SYMBOL::<unnamed-type-N> {
  /* this+0x0 */ unsigned char[0x8] ShortName;
  /* this+0x0 */ struct _IMAGE_SYMBOL::<unnamed-type-N>::<unnamed-type-Name> Name;
  /* this+0x0 */ unsigned long[0x2] LongName;
}

struct tagEMRPOLYLINE16 {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long cpts;
  /* this+0x1c */ struct tagPOINTS[0x1] apts;
}

struct tagMENUBARINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct tagRECT rcBar;
  /* this+0x14 */ struct HMENU__ * hMenu;
  /* this+0x18 */ struct HWND__ * hwndMenu;
    }

struct tagWTSSESSION_NOTIFICATION {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long dwSessionId;
}

struct PACKET_CZ_REQ_USER_COUNT {
  /* this+0x0 */ short PacketType;
}

struct BILLING_EXTENSION {
  /* this+0x0 */ unsigned char m_byAllowDeny;
  /* this+0x1 */ unsigned long m_dw_1st;
  /* this+0x5 */ unsigned long m_dw_2nd;
  /* this+0x9 */ unsigned long m_dw_3rd;
  /* this+0xd */ unsigned char[0x7] m_byReserved;
}

struct PACKET_ZC_PARTY_RECRUIT_ACK_SEARCH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ bool IsExistMoreResult;
}

struct HWAVEIN__ {
  /* this+0x0 */ int unused;
}

struct PACKET_HC_ACCEPT_ENTER_NEO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned char TotalSlotNum;
  /* this+0x5 */ unsigned char PremiumStartSlot;
  /* this+0x6 */ unsigned char PremiumEndSlot;
}

struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long Flags;
  /* this+0xc */ struct _GUID ObjectType;
  /* this+0x1c */ struct _GUID InheritedObjectType;
  /* this+0x2c */ unsigned long SidStart;
}

struct PACKET_ZC_ACK_AUCTION_ADD_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Index;
  /* this+0x4 */ unsigned char result;
}

struct tagMIXERCAPSA {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned long fdwSupport;
  /* this+0x2c */ unsigned long cDestinations;
}

struct tagEMRSCALEVIEWPORTEXTEX {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ long xNum;
  /* this+0xc */ long xDenom;
  /* this+0x10 */ long yNum;
  /* this+0x14 */ long yDenom;
}

struct DLGTEMPLATE {
  /* this+0x0 */ unsigned long style;
  /* this+0x4 */ unsigned long dwExtendedStyle;
  /* this+0x8 */ unsigned short cdit;
  /* this+0xa */ short x;
  /* this+0xc */ short y;
  /* this+0xe */ short cx;
  /* this+0x10 */ short cy;
}

struct tagJOYCAPS2W {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ wchar_t[0x20] szPname;
  /* this+0x44 */ unsigned int wXmin;
  /* this+0x48 */ unsigned int wXmax;
  /* this+0x4c */ unsigned int wYmin;
  /* this+0x50 */ unsigned int wYmax;
  /* this+0x54 */ unsigned int wZmin;
  /* this+0x58 */ unsigned int wZmax;
  /* this+0x5c */ unsigned int wNumButtons;
  /* this+0x60 */ unsigned int wPeriodMin;
  /* this+0x64 */ unsigned int wPeriodMax;
  /* this+0x68 */ unsigned int wRmin;
  /* this+0x6c */ unsigned int wRmax;
  /* this+0x70 */ unsigned int wUmin;
  /* this+0x74 */ unsigned int wUmax;
  /* this+0x78 */ unsigned int wVmin;
  /* this+0x7c */ unsigned int wVmax;
  /* this+0x80 */ unsigned int wCaps;
  /* this+0x84 */ unsigned int wMaxAxes;
  /* this+0x88 */ unsigned int wNumAxes;
  /* this+0x8c */ unsigned int wMaxButtons;
  /* this+0x90 */ wchar_t[0x20] szRegKey;
  /* this+0xd0 */ wchar_t[0x104] szOEMVxD;
  /* this+0x2d8 */ struct _GUID ManufacturerGuid;
  /* this+0x2e8 */ struct _GUID ProductGuid;
  /* this+0x2f8 */ struct _GUID NameGuid;
}

struct joyinfoex_tag {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long dwXpos;
  /* this+0xc */ unsigned long dwYpos;
  /* this+0x10 */ unsigned long dwZpos;
  /* this+0x14 */ unsigned long dwRpos;
  /* this+0x18 */ unsigned long dwUpos;
  /* this+0x1c */ unsigned long dwVpos;
  /* this+0x20 */ unsigned long dwButtons;
  /* this+0x24 */ unsigned long dwButtonNumber;
  /* this+0x28 */ unsigned long dwPOV;
  /* this+0x2c */ unsigned long dwReserved1;
  /* this+0x30 */ unsigned long dwReserved2;
}

struct PACKET_CZ_CLAN_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct tagEMRELLIPSE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBox;
}

struct PACKET_ZC_PAR_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short varID;
  /* this+0x4 */ int count;
}

struct AUCTION_ITEM_SEARCH_INFO {
  /* this+0x0 */ unsigned long AuctionID;
  /* this+0x4 */ char[0x18] SellerName;
  /* this+0x1c */ unsigned short ITID;
  /* this+0x1e */ int Type;
  /* this+0x22 */ short count;
  /* this+0x24 */ bool IsIdentified;
  /* this+0x25 */ bool IsDamaged;
  /* this+0x26 */ unsigned char refiningLevel;
  /* this+0x27 */ struct EQUIPSLOTINFO slot;
  /* this+0x2f */ int NowPrice;
  /* this+0x33 */ int MaxPrice;
  /* this+0x37 */ char[0x18] BuyerName;
  /* this+0x4f */ long DeleteTime;
}

struct PACKET_CZ_BOT_CHECK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int IsBot;
}

struct PACKET_ZC_NOTIFY_CLAN_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ char[0x18] charName;
}

struct _ACCESS_ALLOWED_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long SidStart;
}

union _RATE_QUOTA_LIMIT {
  /* this+0x0 */ unsigned long RateData;
    }

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-ProcessorCore> {
  /* this+0x0 */ unsigned char Flags;
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-NumaNode> {
  /* this+0x0 */ unsigned long NodeNumber;
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
  /* this+0x0 */ unsigned long ProcessorMask;
  /* this+0x4 */ enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  /* this+0x8 */ struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-ProcessorCore> ProcessorCore;
  /* this+0x8 */ struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-NumaNode> NumaNode;
  /* this+0x8 */ struct _CACHE_DESCRIPTOR Cache;
  /* this+0x8 */ unsigned __int64[0x2] Reserved;
}

struct tagENHMETAHEADER {
  /* this+0x0 */ unsigned long iType;
  /* this+0x4 */ unsigned long nSize;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ struct _RECTL rclFrame;
  /* this+0x28 */ unsigned long dSignature;
  /* this+0x2c */ unsigned long nVersion;
  /* this+0x30 */ unsigned long nBytes;
  /* this+0x34 */ unsigned long nRecords;
  /* this+0x38 */ unsigned short nHandles;
  /* this+0x3a */ unsigned short sReserved;
  /* this+0x3c */ unsigned long nDescription;
  /* this+0x40 */ unsigned long offDescription;
  /* this+0x44 */ unsigned long nPalEntries;
  /* this+0x48 */ struct tagSIZE szlDevice;
  /* this+0x50 */ struct tagSIZE szlMillimeters;
  /* this+0x58 */ unsigned long cbPixelFormat;
  /* this+0x5c */ unsigned long offPixelFormat;
  /* this+0x60 */ unsigned long bOpenGL;
  /* this+0x64 */ struct tagSIZE szlMicrometers;
}

struct PACKET_ZC_NOTIFY_EXP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int amount;
  /* this+0xa */ unsigned short varID;
  /* this+0xc */ short expType;
}

struct PACKET_ZC_NPCACK_ENABLE {
  /* this+0x0 */ short PacketType;
}

struct _TAPE_WMI_OPERATIONS {
  /* this+0x0 */ unsigned long Method;
  /* this+0x4 */ unsigned long DataBufferSize;
  /* this+0x8 */ void * DataBuffer;
}

struct tagMCI_SYSINFO_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ wchar_t * lpstrReturn;
  /* this+0x8 */ unsigned long dwRetSize;
  /* this+0xc */ unsigned long dwNumber;
  /* this+0x10 */ unsigned int wDeviceType;
}

struct PACKET_CZ_REQ_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short ApplyType;
  /* this+0x4 */ char[0x18] EntryQueueName;
}

struct vc_attributes::PreBoundAttribute {
  /* this+0x0 */ unsigned int Deref;
}

struct tagRAWMOUSE {
  /* this+0x0 */ unsigned short usFlags;
  /* this+0x4 */ unsigned long ulButtons;
  /* this+0x4 */ unsigned short usButtonFlags;
  /* this+0x6 */ unsigned short usButtonData;
  /* this+0x8 */ unsigned long ulRawButtons;
  /* this+0xc */ long lLastX;
  /* this+0x10 */ long lLastY;
  /* this+0x14 */ unsigned long ulExtraInformation;
}

struct tagGESTUREINFO {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long dwID;
  /* this+0xc */ struct HWND__ * hwndTarget;
  /* this+0x10 */ struct tagPOINTS ptsLocation;
  /* this+0x14 */ unsigned long dwInstanceID;
  /* this+0x18 */ unsigned long dwSequenceID;
  /* this+0x20 */ unsigned __int64 ullArguments;
  /* this+0x28 */ unsigned int cbExtraArgs;
}

struct _WSAQuerySet2A {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ char * lpszServiceInstanceName;
  /* this+0x8 */ struct _WSAVersion * lpVersion;
  /* this+0xc */ char * lpszComment;
  /* this+0x10 */ unsigned long dwNameSpace;
  /* this+0x14 */ struct _GUID * lpNSProviderId;
  /* this+0x18 */ char * lpszContext;
  /* this+0x1c */ unsigned long dwNumberOfProtocols;
  /* this+0x20 */ struct _AFPROTOCOLS * lpafpProtocols;
  /* this+0x24 */ char * lpszQueryString;
  /* this+0x28 */ unsigned long dwNumberOfCsAddrs;
  /* this+0x2c */ struct _CSADDR_INFO * lpcsaBuffer;
  /* this+0x30 */ unsigned long dwOutputFlags;
  /* this+0x34 */ struct _BLOB * lpBlob;
}

struct _devicemodeW {
  /* this+0x0 */ wchar_t[0x20] dmDeviceName;
  /* this+0x40 */ unsigned short dmSpecVersion;
  /* this+0x42 */ unsigned short dmDriverVersion;
  /* this+0x44 */ unsigned short dmSize;
  /* this+0x46 */ unsigned short dmDriverExtra;
  /* this+0x48 */ unsigned long dmFields;
  /* this+0x4c */ short dmOrientation;
  /* this+0x4e */ short dmPaperSize;
  /* this+0x50 */ short dmPaperLength;
  /* this+0x52 */ short dmPaperWidth;
  /* this+0x54 */ short dmScale;
  /* this+0x56 */ short dmCopies;
  /* this+0x58 */ short dmDefaultSource;
  /* this+0x5a */ short dmPrintQuality;
  /* this+0x4c */ struct _POINTL dmPosition;
  /* this+0x54 */ unsigned long dmDisplayOrientation;
  /* this+0x58 */ unsigned long dmDisplayFixedOutput;
  /* this+0x5c */ short dmColor;
  /* this+0x5e */ short dmDuplex;
  /* this+0x60 */ short dmYResolution;
  /* this+0x62 */ short dmTTOption;
  /* this+0x64 */ short dmCollate;
  /* this+0x66 */ wchar_t[0x20] dmFormName;
  /* this+0xa6 */ unsigned short dmLogPixels;
  /* this+0xa8 */ unsigned long dmBitsPerPel;
  /* this+0xac */ unsigned long dmPelsWidth;
  /* this+0xb0 */ unsigned long dmPelsHeight;
  /* this+0xb4 */ unsigned long dmDisplayFlags;
  /* this+0xb4 */ unsigned long dmNup;
  /* this+0xb8 */ unsigned long dmDisplayFrequency;
  /* this+0xbc */ unsigned long dmICMMethod;
  /* this+0xc0 */ unsigned long dmICMIntent;
  /* this+0xc4 */ unsigned long dmMediaType;
  /* this+0xc8 */ unsigned long dmDitherType;
  /* this+0xcc */ unsigned long dmReserved1;
  /* this+0xd0 */ unsigned long dmReserved2;
  /* this+0xd4 */ unsigned long dmPanningWidth;
  /* this+0xd8 */ unsigned long dmPanningHeight;
}

struct _SE_SECURITY_DESCRIPTOR {
  /* this+0x0 */ unsigned long Size;
  /* this+0x4 */ unsigned long Flags;
  /* this+0x8 */ void * SecurityDescriptor;
}

union _IMAGE_THUNK_DATA32::<unnamed-type-u1> {
  /* this+0x0 */ unsigned long ForwarderString;
  /* this+0x0 */ unsigned long Function;
  /* this+0x0 */ unsigned long Ordinal;
  /* this+0x0 */ unsigned long AddressOfData;
}

struct MENUITEMTEMPLATEHEADER {
  /* this+0x0 */ unsigned short versionNumber;
  /* this+0x2 */ unsigned short offset;
}

struct _WSANAMESPACE_INFOW {
  /* this+0x0 */ struct _GUID NSProviderId;
  /* this+0x10 */ unsigned long dwNameSpace;
  /* this+0x14 */ int fActive;
  /* this+0x18 */ unsigned long dwVersion;
  /* this+0x1c */ wchar_t * lpszIdentifier;
}

struct PACKET_ZC_SKILL_SELECT_REQUEST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ enum PACKET_ZC_SKILL_SELECT_REQUEST::enumWHY why;
}

struct PACKET_CH_CHECKBOT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long dwAID;
  /* this+0x8 */ char[0x18] szStringInfo;
}

struct HFONT__ {
  /* this+0x0 */ int unused;
}

struct tagMCI_OVLY_WINDOW_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ struct HWND__ * hWnd;
  /* this+0x8 */ unsigned int nCmdShow;
  /* this+0xc */ const char * lpstrText;
}

struct PACKET_CZ_PARTY_RECRUIT_ADD_FILTERLINGLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Index;
}

struct tagMOUSEMOVEPOINT {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ unsigned long time;
  /* this+0xc */ unsigned long dwExtraInfo;
}

struct PACKET_CZ_USE_ITEM2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned long AID;
}

struct MENU_INTERFACE {
  /* this+0x0 */ short Type;
}

struct tagHIGHCONTRASTA {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ char * lpszDefaultScheme;
}

struct PRODUCTINFO_INSTORE {
  /* this+0x0 */ short index;
  /* this+0x2 */ short count;
  /* this+0x4 */ int price;
}

struct PACKET_ZC_GANGSI_RANK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18][0xa] Name;
  /* this+0xf2 */ int[0xa] Point;
  /* this+0x11a */ short PacketSwitch;
}

struct PACKET_CZ_MER_COMMAND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char command;
}

struct _WSANSClassInfoW {
  /* this+0x0 */ wchar_t * lpszName;
  /* this+0x4 */ unsigned long dwNameSpace;
  /* this+0x8 */ unsigned long dwValueType;
  /* this+0xc */ unsigned long dwValueSize;
  /* this+0x10 */ void * lpValue;
}

struct _JIT_DEBUG_INFO {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwProcessorArchitecture;
  /* this+0x8 */ unsigned long dwThreadID;
  /* this+0xc */ unsigned long dwReserved0;
  /* this+0x10 */ unsigned __int64 lpExceptionAddress;
  /* this+0x18 */ unsigned __int64 lpExceptionRecord;
  /* this+0x20 */ unsigned __int64 lpContextRecord;
}

struct _FILE_IO_PRIORITY_HINT_INFO {
  /* this+0x0 */ enum _PRIORITY_HINT PriorityHint;
}

struct PACKET_ZC_ACK_CREATE_CHATROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_CZ_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long MyAID;
  /* this+0xa */ unsigned long MyGID;
}

struct FillteringInfo {
  /* this+0x0 */ unsigned long GID;
  /* this+0x4 */ char[0x18] CharName;
}

struct _OSVERSIONINFOA {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize;
  /* this+0x4 */ unsigned long dwMajorVersion;
  /* this+0x8 */ unsigned long dwMinorVersion;
  /* this+0xc */ unsigned long dwBuildNumber;
  /* this+0x10 */ unsigned long dwPlatformId;
  /* this+0x14 */ char[0x80] szCSDVersion;
}

struct PACKET_ZC_SSILIST_ITEM_CLICK_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short x;
  /* this+0x4 */ short y;
}

struct tagEMRSETICMPROFILE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long dwFlags;
  /* this+0xc */ unsigned long cbName;
  /* this+0x10 */ unsigned long cbData;
  /* this+0x14 */ unsigned char[0x1] Data;
}

struct PACKET_CZ_CLOSE_STORE {
  /* this+0x0 */ short PacketType;
}

struct CZ_PURCHASE_ITEM_FROMMC {
  /* this+0x0 */ short count;
  /* this+0x2 */ short index;
}

struct _IMAGE_BASE_RELOCATION {
  /* this+0x0 */ unsigned long VirtualAddress;
  /* this+0x4 */ unsigned long SizeOfBlock;
}

struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
  /* this+0x0 */ unsigned __int64 LastRecoveredLsn;
}

struct _PROCESSOR_NUMBER {
  /* this+0x0 */ unsigned short Group;
  /* this+0x2 */ unsigned char Number;
  /* this+0x3 */ unsigned char Reserved;
}

struct _FILE_STANDARD_INFO {
  /* this+0x0 */ union _LARGE_INTEGER AllocationSize;
  /* this+0x8 */ union _LARGE_INTEGER EndOfFile;
  /* this+0x10 */ unsigned long NumberOfLinks;
  /* this+0x14 */ unsigned char DeletePending;
  /* this+0x15 */ unsigned char Directory;
}

struct tagWAVEINCAPSW {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned long dwFormats;
  /* this+0x4c */ unsigned short wChannels;
  /* this+0x4e */ unsigned short wReserved1;
}

struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
  /* this+0x0 */ struct _GUID EnlistmentId;
  /* this+0x10 */ struct _GUID UOW;
}

struct tagMCI_OVLY_LOAD_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const char * lpfilename;
  /* this+0x8 */ struct tagRECT rc;
}

struct PACKET_ZC_CLEAR_DIALOG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
  /* this+0x0 */ unsigned long MarshalCookie;
  /* this+0x4 */ struct _GUID UOW;
}

struct addrinfoexW {
  /* this+0x0 */ int ai_flags;
  /* this+0x4 */ int ai_family;
  /* this+0x8 */ int ai_socktype;
  /* this+0xc */ int ai_protocol;
  /* this+0x10 */ unsigned int ai_addrlen;
  /* this+0x14 */ wchar_t * ai_canonname;
  /* this+0x18 */ struct sockaddr * ai_addr;
  /* this+0x1c */ void * ai_blob;
  /* this+0x20 */ unsigned int ai_bloblen;
  /* this+0x24 */ struct _GUID * ai_provider;
  /* this+0x28 */ struct addrinfoexW * ai_next;
}

struct PACKET_ZC_OPENSTORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short itemcount;
}

struct PACKET_ZC_NOTIFY_MOVEENTRY3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char objecttype;
  /* this+0x3 */ unsigned long GID;
  /* this+0x7 */ short speed;
  /* this+0x9 */ short bodyState;
  /* this+0xb */ short healthState;
  /* this+0xd */ int effectState;
  /* this+0x11 */ short job;
  /* this+0x13 */ short head;
  /* this+0x15 */ int weapon;
  /* this+0x19 */ short accessory;
  /* this+0x1b */ unsigned long moveStartTime;
  /* this+0x1f */ short accessory2;
  /* this+0x21 */ short accessory3;
  /* this+0x23 */ short headpalette;
  /* this+0x25 */ short bodypalette;
  /* this+0x27 */ short headDir;
  /* this+0x29 */ unsigned long GUID;
  /* this+0x2d */ short GEmblemVer;
  /* this+0x2f */ short honor;
  /* this+0x31 */ int virtue;
  /* this+0x35 */ bool isPKModeON;
  /* this+0x36 */ unsigned char sex;
  /* this+0x37 */ unsigned char[0x6] MoveData;
  /* this+0x3d */ unsigned char xSize;
  /* this+0x3e */ unsigned char ySize;
  /* this+0x3f */ short clevel;
}

struct DISPLAYCONFIG_DEVICE_INFO_HEADER {
  /* this+0x0 */ enum DISPLAYCONFIG_DEVICE_INFO_TYPE type;
  /* this+0x4 */ unsigned int size;
  /* this+0x8 */ struct _LUID adapterId;
  /* this+0x10 */ unsigned int id;
}

struct DISPLAYCONFIG_TARGET_MODE {
  /* this+0x0 */ struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
}

struct DISPLAYCONFIG_TARGET_PREFERRED_MODE {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header;
  /* this+0x14 */ unsigned int width;
  /* this+0x18 */ unsigned int height;
  /* this+0x20 */ struct DISPLAYCONFIG_TARGET_MODE targetMode;
}

struct tagCANDIDATELIST {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwStyle;
  /* this+0x8 */ unsigned long dwCount;
  /* this+0xc */ unsigned long dwSelection;
  /* this+0x10 */ unsigned long dwPageStart;
  /* this+0x14 */ unsigned long dwPageSize;
  /* this+0x18 */ unsigned long[0x1] dwOffset;
}

struct PACKET_ZC_SIMPLE_CASHSHOP_POINT_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long CashPoint;
  /* this+0x8 */ short md_itemcount;
  /* this+0xa */ short md_itemSize;
  /* this+0xc */ short best_itemcount;
  /* this+0xe */ short best_itemsize;
}

struct tagACCESSTIMEOUT {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long iTimeOutMSec;
}

struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
  /* this+0x0 */ void * CompletionKey;
  /* this+0x4 */ void * CompletionPort;
}

struct HWINEVENTHOOK__ {
  /* this+0x0 */ int unused;
}

struct tagMCI_OVLY_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned int wDeviceID;
  /* this+0x8 */ const char * lpstrDeviceType;
  /* this+0xc */ const char * lpstrElementName;
  /* this+0x10 */ const char * lpstrAlias;
  /* this+0x14 */ unsigned long dwStyle;
  /* this+0x18 */ struct HWND__ * hWndParent;
}

struct tagMENUGETOBJECTINFO {
  /* this+0x0 */ unsigned long dwFlags;
  /* this+0x4 */ unsigned int uPos;
  /* this+0x8 */ struct HMENU__ * hmenu;
  /* this+0xc */ void * riid;
  /* this+0x10 */ void * pvObj;
}

struct tWAVEFORMATEX {
  /* this+0x0 */ unsigned short wFormatTag;
  /* this+0x2 */ unsigned short nChannels;
  /* this+0x4 */ unsigned long nSamplesPerSec;
  /* this+0x8 */ unsigned long nAvgBytesPerSec;
  /* this+0xc */ unsigned short nBlockAlign;
  /* this+0xe */ unsigned short wBitsPerSample;
  /* this+0x10 */ unsigned short cbSize;
}

struct PACKET_ZC_MAKINGITEM_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct _MESSAGE_RESOURCE_ENTRY {
  /* this+0x0 */ unsigned short Length;
  /* this+0x2 */ unsigned short Flags;
  /* this+0x4 */ unsigned char[0x1] Text;
}

struct tagHIGHCONTRASTW {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ wchar_t * lpszDefaultScheme;
}

struct tagMCI_LOAD_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const char * lpfilename;
}

struct PACKET_ZC_CLOSE_STORE {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_DELETEITEM_FROM_MCSTORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ short count;
}

struct PACKET_ZC_RESULT_CASH_PASSWORD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
  /* this+0x4 */ short ErrorCount;
}

struct _IMAGE_SECTION_HEADER {
  /* this+0x0 */ unsigned char[0x8] Name;
  /* this+0x8 */ union <unnamed-tag> Misc;
  /* this+0xc */ unsigned long VirtualAddress;
  /* this+0x10 */ unsigned long SizeOfRawData;
  /* this+0x14 */ unsigned long PointerToRawData;
  /* this+0x18 */ unsigned long PointerToRelocations;
  /* this+0x1c */ unsigned long PointerToLinenumbers;
  /* this+0x20 */ unsigned short NumberOfRelocations;
  /* this+0x22 */ unsigned short NumberOfLinenumbers;
  /* this+0x24 */ unsigned long Characteristics;
}

struct tagPOLYTEXTW {
  /* this+0x0 */ int x;
  /* this+0x4 */ int y;
  /* this+0x8 */ unsigned int n;
  /* this+0xc */ const wchar_t * lpstr;
  /* this+0x10 */ unsigned int uiFlags;
  /* this+0x14 */ struct tagRECT rcl;
  /* this+0x24 */ int * pdx;
}

struct PACKET_CZ_BATTLE_FIELD_LIST {
  /* this+0x0 */ short PacketType;
}

struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
  /* this+0x0 */ unsigned long SavepointId;
}

struct tagGESTURENOTIFYSTRUCT {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ struct HWND__ * hwndTarget;
  /* this+0xc */ struct tagPOINTS ptsLocation;
  /* this+0x10 */ unsigned long dwInstanceID;
}

struct tagWAVEINCAPSA {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ char[0x20] szPname;
  /* this+0x28 */ unsigned long dwFormats;
  /* this+0x2c */ unsigned short wChannels;
  /* this+0x2e */ unsigned short wReserved1;
}

struct tagICONMETRICSA {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ int iHorzSpacing;
  /* this+0x8 */ int iVertSpacing;
  /* this+0xc */ int iTitleWrap;
  /* this+0x10 */ struct tagLOGFONTA lfFont;
}

struct wavehdr_tag {
  /* this+0x0 */ char * lpData;
  /* this+0x4 */ unsigned long dwBufferLength;
  /* this+0x8 */ unsigned long dwBytesRecorded;
  /* this+0xc */ unsigned long dwUser;
  /* this+0x10 */ unsigned long dwFlags;
  /* this+0x14 */ unsigned long dwLoops;
  /* this+0x18 */ struct wavehdr_tag * lpNext;
  /* this+0x1c */ unsigned long reserved;
}

struct _nlsversioninfo {
  /* this+0x0 */ unsigned long dwNLSVersionInfoSize;
  /* this+0x4 */ unsigned long dwNLSVersion;
  /* this+0x8 */ unsigned long dwDefinedVersion;
}

struct PACKET_ZC_MAIL_REQ_OPEN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ int MailID;
  /* this+0x8 */ char[0x28] Header;
  /* this+0x30 */ char[0x18] FromName;
  /* this+0x48 */ long DeleteTime;
  /* this+0x4c */ unsigned long Money;
  /* this+0x50 */ int count;
  /* this+0x54 */ unsigned short ITID;
  /* this+0x56 */ unsigned short Type;
  /* this+0x58 */ bool IsIdentified;
  /* this+0x59 */ bool IsDamaged;
  /* this+0x5a */ unsigned char refiningLevel;
  /* this+0x5b */ struct EQUIPSLOTINFO slot;
}

struct _TRANSACTION_PROPERTIES_INFORMATION {
  /* this+0x0 */ unsigned long IsolationLevel;
  /* this+0x4 */ unsigned long IsolationFlags;
  /* this+0x8 */ union _LARGE_INTEGER Timeout;
  /* this+0x10 */ unsigned long Outcome;
  /* this+0x14 */ unsigned long DescriptionLength;
  /* this+0x18 */ wchar_t[0x1] Description;
}

struct HMETAFILE__ {
  /* this+0x0 */ int unused;
}

struct tagMETAFILEPICT {
  /* this+0x0 */ long mm;
  /* this+0x4 */ long xExt;
  /* this+0x8 */ long yExt;
  /* this+0xc */ struct HMETAFILE__ * hMF;
}

struct tagAXESLISTW {
  /* this+0x0 */ unsigned long axlReserved;
  /* this+0x4 */ unsigned long axlNumAxes;
  /* this+0x8 */ struct tagAXISINFOW[0x10] axlAxisInfo;
}

struct _stat64 {
  /* this+0x0 */ unsigned int st_dev;
  /* this+0x4 */ unsigned short st_ino;
  /* this+0x6 */ unsigned short st_mode;
  /* this+0x8 */ short st_nlink;
  /* this+0xa */ short st_uid;
  /* this+0xc */ short st_gid;
  /* this+0x10 */ unsigned int st_rdev;
  /* this+0x18 */ __int64 st_size;
  /* this+0x20 */ __int64 st_atime;
  /* this+0x28 */ __int64 st_mtime;
  /* this+0x30 */ __int64 st_ctime;
}

struct _FOCUS_EVENT_RECORD {
  /* this+0x0 */ int bSetFocus;
}

struct PACKET_HC_CHECKBOT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct tagHELPWININFOW {
  /* this+0x0 */ int wStructSize;
  /* this+0x4 */ int x;
  /* this+0x8 */ int y;
  /* this+0xc */ int dx;
  /* this+0x10 */ int dy;
  /* this+0x14 */ int wMax;
  /* this+0x18 */ wchar_t[0x2] rgchMember;
}

struct _numberfmtA {
  /* this+0x0 */ unsigned int NumDigits;
  /* this+0x4 */ unsigned int LeadingZero;
  /* this+0x8 */ unsigned int Grouping;
  /* this+0xc */ char * lpDecimalSep;
  /* this+0x10 */ char * lpThousandSep;
  /* this+0x14 */ unsigned int NegativeOrder;
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_CART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct _WSAServiceClassInfoW {
  /* this+0x0 */ struct _GUID * lpServiceClassId;
  /* this+0x4 */ wchar_t * lpszServiceClassName;
  /* this+0x8 */ unsigned long dwCount;
  /* this+0xc */ struct _WSANSClassInfoW * lpClassInfos;
}

struct PACKET_PING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_USESKILL_ACK2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long targetID;
  /* this+0xa */ short xPos;
  /* this+0xc */ short yPos;
  /* this+0xe */ unsigned short SKID;
  /* this+0x10 */ unsigned long property;
  /* this+0x14 */ unsigned long delayTime;
  /* this+0x18 */ bool isDisposable;
}

struct tagHANDLETABLE {
  /* this+0x0 */ void *[0x1] objectHandle;
}

struct tagSOUNDSENTRYA {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long iFSTextEffect;
  /* this+0xc */ unsigned long iFSTextEffectMSec;
  /* this+0x10 */ unsigned long iFSTextEffectColorBits;
  /* this+0x14 */ unsigned long iFSGrafEffect;
  /* this+0x18 */ unsigned long iFSGrafEffectMSec;
  /* this+0x1c */ unsigned long iFSGrafEffectColor;
  /* this+0x20 */ unsigned long iWindowsEffect;
  /* this+0x24 */ unsigned long iWindowsEffectMSec;
  /* this+0x28 */ char * lpszWindowsEffectDLL;
  /* this+0x2c */ unsigned long iWindowsEffectOrdinal;
}

struct _IMAGE_RESOURCE_DATA_ENTRY {
  /* this+0x0 */ unsigned long OffsetToData;
  /* this+0x4 */ unsigned long Size;
  /* this+0x8 */ unsigned long CodePage;
  /* this+0xc */ unsigned long Reserved;
}

struct _COMMTIMEOUTS {
  /* this+0x0 */ unsigned long ReadIntervalTimeout;
  /* this+0x4 */ unsigned long ReadTotalTimeoutMultiplier;
  /* this+0x8 */ unsigned long ReadTotalTimeoutConstant;
  /* this+0xc */ unsigned long WriteTotalTimeoutMultiplier;
  /* this+0x10 */ unsigned long WriteTotalTimeoutConstant;
}

struct tagAUDIODESCRIPTION {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ int Enabled;
  /* this+0x8 */ unsigned long Locale;
}

struct PACKET_CZ_CANCEL_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_SC_BILLING_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwAmountRemain;
  /* this+0x6 */ unsigned long dwQuantityRemain;
  /* this+0xa */ unsigned long dwReserved1;
  /* this+0xe */ unsigned long dwReserved2;
}

struct PACKET_CZ_MONSTER_TALK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char stateId;
  /* this+0x7 */ unsigned char skillId;
  /* this+0x8 */ unsigned char arg1;
}

struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long Flags;
  /* this+0xc */ struct _GUID ObjectType;
  /* this+0x1c */ struct _GUID InheritedObjectType;
  /* this+0x2c */ unsigned long SidStart;
}

struct _EXIT_PROCESS_DEBUG_INFO {
  /* this+0x0 */ unsigned long dwExitCode;
}

struct tagRID_DEVICE_INFO_MOUSE {
  /* this+0x0 */ unsigned long dwId;
  /* this+0x4 */ unsigned long dwNumberOfButtons;
  /* this+0x8 */ unsigned long dwSampleRate;
  /* this+0xc */ int fHasHorizontalWheel;
}

struct tagRID_DEVICE_INFO_KEYBOARD {
  /* this+0x0 */ unsigned long dwType;
  /* this+0x4 */ unsigned long dwSubType;
  /* this+0x8 */ unsigned long dwKeyboardMode;
  /* this+0xc */ unsigned long dwNumberOfFunctionKeys;
  /* this+0x10 */ unsigned long dwNumberOfIndicators;
  /* this+0x14 */ unsigned long dwNumberOfKeysTotal;
}

struct tagRID_DEVICE_INFO_HID {
  /* this+0x0 */ unsigned long dwVendorId;
  /* this+0x4 */ unsigned long dwProductId;
  /* this+0x8 */ unsigned long dwVersionNumber;
  /* this+0xc */ unsigned short usUsagePage;
  /* this+0xe */ unsigned short usUsage;
}

struct _ImageArchitectureEntry {
  /* this+0x0 */ unsigned long FixupInstRVA;
  /* this+0x4 */ unsigned long NewInst;
}

struct IMPORT_OBJECT_HEADER {
  /* this+0x0 */ unsigned short Sig1;
  /* this+0x2 */ unsigned short Sig2;
  /* this+0x4 */ unsigned short Version;
  /* this+0x6 */ unsigned short Machine;
  /* this+0x8 */ unsigned long TimeDateStamp;
  /* this+0xc */ unsigned long SizeOfData;
  /* this+0x10 */ unsigned short Ordinal;
  /* this+0x10 */ unsigned short Hint;
      }

struct tagMSGBOXPARAMSW {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ struct HWND__ * hwndOwner;
  /* this+0x8 */ struct HINSTANCE__ * hInstance;
  /* this+0xc */ const wchar_t * lpszText;
  /* this+0x10 */ const wchar_t * lpszCaption;
  /* this+0x14 */ unsigned long dwStyle;
  /* this+0x18 */ const wchar_t * lpszIcon;
  /* this+0x1c */ unsigned long dwContextHelpId;
  /* this+0x20 */ function  * lpfnMsgBoxCallback;
  /* this+0x24 */ unsigned long dwLanguageId;
}

struct OTHER_GUILD_INFO {
  /* this+0x0 */ char[0x18] guildname;
  /* this+0x18 */ int guildLevel;
  /* this+0x1c */ int guildMemberSize;
  /* this+0x20 */ int guildRanking;
}

struct PACKET_CZ_REQNAME_BYGID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
}

struct _WSAServiceClassInfoA {
  /* this+0x0 */ struct _GUID * lpServiceClassId;
  /* this+0x4 */ char * lpszServiceClassName;
  /* this+0x8 */ unsigned long dwCount;
  /* this+0xc */ struct _WSANSClassInfoA * lpClassInfos;
}

struct PACKET_ZC_DELETE_ITEM_FROM_CART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct tagLOGPALETTE {
  /* this+0x0 */ unsigned short palVersion;
  /* this+0x2 */ unsigned short palNumEntries;
  /* this+0x4 */ struct tagPALETTEENTRY[0x1] palPalEntry;
}

struct tagNONCLIENTMETRICSA {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ int iBorderWidth;
  /* this+0x8 */ int iScrollWidth;
  /* this+0xc */ int iScrollHeight;
  /* this+0x10 */ int iCaptionWidth;
  /* this+0x14 */ int iCaptionHeight;
  /* this+0x18 */ struct tagLOGFONTA lfCaptionFont;
  /* this+0x54 */ int iSmCaptionWidth;
  /* this+0x58 */ int iSmCaptionHeight;
  /* this+0x5c */ struct tagLOGFONTA lfSmCaptionFont;
  /* this+0x98 */ int iMenuWidth;
  /* this+0x9c */ int iMenuHeight;
  /* this+0xa0 */ struct tagLOGFONTA lfMenuFont;
  /* this+0xdc */ struct tagLOGFONTA lfStatusFont;
  /* this+0x118 */ struct tagLOGFONTA lfMessageFont;
  /* this+0x154 */ int iPaddedBorderWidth;
}

struct tagRAWINPUTDEVICE {
  /* this+0x0 */ unsigned short usUsagePage;
  /* this+0x2 */ unsigned short usUsage;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ struct HWND__ * hwndTarget;
}

struct PACKET_CZ_REQ_LEAVE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ int AID;
  /* this+0xa */ int GID;
  /* this+0xe */ char[0x28] reasonDesc;
}

struct PACKET_ZC_ADD_QUEST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long questID;
  /* this+0x6 */ bool active;
  /* this+0x7 */ long quest_svrTime;
  /* this+0xb */ long quest_endTime;
  /* this+0xf */ short count;
  /* this+0x11 */ struct PACKET_ZC_MISSION_HUNT[0x3] hunt;
}

struct PACKET_CZ_CONFIG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum PACKET_CZ_CONFIG::enumConfig Config;
  /* this+0x6 */ int Value;
}

struct PPM_PERFSTATE_DOMAIN_EVENT {
  /* this+0x0 */ unsigned long State;
  /* this+0x4 */ unsigned long Latency;
  /* this+0x8 */ unsigned long Speed;
  /* this+0x10 */ unsigned __int64 Processors;
}

struct tagCREATESTRUCTW {
  /* this+0x0 */ void * lpCreateParams;
  /* this+0x4 */ struct HINSTANCE__ * hInstance;
  /* this+0x8 */ struct HMENU__ * hMenu;
  /* this+0xc */ struct HWND__ * hwndParent;
  /* this+0x10 */ int cy;
  /* this+0x14 */ int cx;
  /* this+0x18 */ int y;
  /* this+0x1c */ int x;
  /* this+0x20 */ long style;
  /* this+0x24 */ const wchar_t * lpszName;
  /* this+0x28 */ const wchar_t * lpszClass;
  /* this+0x2c */ unsigned long dwExStyle;
}

struct tagCBT_CREATEWNDW {
  /* this+0x0 */ struct tagCREATESTRUCTW * lpcs;
  /* this+0x4 */ struct HWND__ * hwndInsertAfter;
}

struct PACKET_CZ_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GRID;
  /* this+0x6 */ bool bAccept;
}

struct PACKET_CZ_PARTY_RECRUIT_SHOW_EQUIPMENT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long TargetGID;
}

struct tagACTCTX_SECTION_KEYED_DATA_2600 {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long ulDataFormatVersion;
  /* this+0x8 */ void * lpData;
  /* this+0xc */ unsigned long ulLength;
  /* this+0x10 */ void * lpSectionGlobalData;
  /* this+0x14 */ unsigned long ulSectionGlobalDataLength;
  /* this+0x18 */ void * lpSectionBase;
  /* this+0x1c */ unsigned long ulSectionTotalLength;
  /* this+0x20 */ void * hActCtx;
  /* this+0x24 */ unsigned long ulAssemblyRosterIndex;
}

struct _PERFORMANCE_DATA {
  /* this+0x0 */ unsigned short Size;
  /* this+0x2 */ unsigned char Version;
  /* this+0x3 */ unsigned char HwCountersCount;
  /* this+0x4 */ unsigned long ContextSwitchCount;
  /* this+0x8 */ unsigned __int64 WaitReasonBitMap;
  /* this+0x10 */ unsigned __int64 CycleTime;
  /* this+0x18 */ unsigned long RetryCount;
  /* this+0x1c */ unsigned long Reserved;
  /* this+0x20 */ struct _HARDWARE_COUNTER_DATA[0x10] HwCounters;
}

struct _MODEMDEVCAPS {
  /* this+0x0 */ unsigned long dwActualSize;
  /* this+0x4 */ unsigned long dwRequiredSize;
  /* this+0x8 */ unsigned long dwDevSpecificOffset;
  /* this+0xc */ unsigned long dwDevSpecificSize;
  /* this+0x10 */ unsigned long dwModemProviderVersion;
  /* this+0x14 */ unsigned long dwModemManufacturerOffset;
  /* this+0x18 */ unsigned long dwModemManufacturerSize;
  /* this+0x1c */ unsigned long dwModemModelOffset;
  /* this+0x20 */ unsigned long dwModemModelSize;
  /* this+0x24 */ unsigned long dwModemVersionOffset;
  /* this+0x28 */ unsigned long dwModemVersionSize;
  /* this+0x2c */ unsigned long dwDialOptions;
  /* this+0x30 */ unsigned long dwCallSetupFailTimer;
  /* this+0x34 */ unsigned long dwInactivityTimeout;
  /* this+0x38 */ unsigned long dwSpeakerVolume;
  /* this+0x3c */ unsigned long dwSpeakerMode;
  /* this+0x40 */ unsigned long dwModemOptions;
  /* this+0x44 */ unsigned long dwMaxDTERate;
  /* this+0x48 */ unsigned long dwMaxDCERate;
  /* this+0x4c */ unsigned char[0x1] abVariablePortion;
}

struct tagWAVEOUTCAPSW {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned long dwFormats;
  /* this+0x4c */ unsigned short wChannels;
  /* this+0x4e */ unsigned short wReserved1;
  /* this+0x50 */ unsigned long dwSupport;
}

struct PACKET_ZC_PC_PURCHASE_RESULT_FROMMC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ short curcount;
  /* this+0x6 */ unsigned char result;
}

struct PACKET_ZC_AUTORUN_SKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct SKILLINFO data;
}

struct _NT_TIB {
  /* this+0x0 */ struct _EXCEPTION_REGISTRATION_RECORD * ExceptionList;
  /* this+0x4 */ void * StackBase;
  /* this+0x8 */ void * StackLimit;
  /* this+0xc */ void * SubSystemTib;
  /* this+0x10 */ void * FiberData;
  /* this+0x10 */ unsigned long Version;
  /* this+0x14 */ void * ArbitraryUserPointer;
  /* this+0x18 */ struct _NT_TIB * Self;
}

struct tagWINDOWPLACEMENT {
  /* this+0x0 */ unsigned int length;
  /* this+0x4 */ unsigned int flags;
  /* this+0x8 */ unsigned int showCmd;
  /* this+0xc */ struct tagPOINT ptMinPosition;
  /* this+0x14 */ struct tagPOINT ptMaxPosition;
  /* this+0x1c */ struct tagRECT rcNormalPosition;
}

struct _CONSOLE_SCREEN_BUFFER_INFOEX {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct _COORD dwSize;
  /* this+0x8 */ struct _COORD dwCursorPosition;
  /* this+0xc */ unsigned short wAttributes;
  /* this+0xe */ struct _SMALL_RECT srWindow;
  /* this+0x16 */ struct _COORD dwMaximumWindowSize;
  /* this+0x1a */ unsigned short wPopupAttributes;
  /* this+0x1c */ int bFullscreenSupported;
  /* this+0x20 */ unsigned long[0x10] ColorTable;
}

struct _SERVICE_STATUS {
  /* this+0x0 */ unsigned long dwServiceType;
  /* this+0x4 */ unsigned long dwCurrentState;
  /* this+0x8 */ unsigned long dwControlsAccepted;
  /* this+0xc */ unsigned long dwWin32ExitCode;
  /* this+0x10 */ unsigned long dwServiceSpecificExitCode;
  /* this+0x14 */ unsigned long dwCheckPoint;
  /* this+0x18 */ unsigned long dwWaitHint;
}

struct _ENUM_SERVICE_STATUSW {
  /* this+0x0 */ wchar_t * lpServiceName;
  /* this+0x4 */ wchar_t * lpDisplayName;
  /* this+0x8 */ struct _SERVICE_STATUS ServiceStatus;
}

struct _CONSOLE_FONT_INFOEX {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long nFont;
  /* this+0x8 */ struct _COORD dwFontSize;
  /* this+0xc */ unsigned int FontFamily;
  /* this+0x10 */ unsigned int FontWeight;
  /* this+0x14 */ wchar_t[0x20] FaceName;
}

struct value_entW {
  /* this+0x0 */ wchar_t * ve_valuename;
  /* this+0x4 */ unsigned long ve_valuelen;
  /* this+0x8 */ unsigned long ve_valueptr;
  /* this+0xc */ unsigned long ve_type;
}

struct tagMCI_INFO_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ wchar_t * lpstrReturn;
  /* this+0x8 */ unsigned long dwRetSize;
}

struct _PACKEDEVENTINFO {
  /* this+0x0 */ unsigned long ulSize;
  /* this+0x4 */ unsigned long ulNumEventsForLogFile;
  /* this+0x8 */ unsigned long[0x0] ulOffsets;
}

struct _MEMORYSTATUSEX {
  /* this+0x0 */ unsigned long dwLength;
  /* this+0x4 */ unsigned long dwMemoryLoad;
  /* this+0x8 */ unsigned __int64 ullTotalPhys;
  /* this+0x10 */ unsigned __int64 ullAvailPhys;
  /* this+0x18 */ unsigned __int64 ullTotalPageFile;
  /* this+0x20 */ unsigned __int64 ullAvailPageFile;
  /* this+0x28 */ unsigned __int64 ullTotalVirtual;
  /* this+0x30 */ unsigned __int64 ullAvailVirtual;
  /* this+0x38 */ unsigned __int64 ullAvailExtendedVirtual;
}

struct sockproto {
  /* this+0x0 */ unsigned short sp_family;
  /* this+0x2 */ unsigned short sp_protocol;
}

struct PACKET_CZ_ACK_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_ZC_PARTY_RECRUIT_REFUSE_VOLUNTEER_TO_PM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long PM_AID;
}

struct PACKET_CZ_CANCEL_LOCKON {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_CHOPOKGI {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_SSILIST_ITEM_CLICK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long SSI_ID;
  /* this+0xa */ unsigned short ITID;
}

struct _XSTATE_FEATURE {
  /* this+0x0 */ unsigned long Offset;
  /* this+0x4 */ unsigned long Size;
}

struct _PSINJECTDATA {
  /* this+0x0 */ unsigned long DataBytes;
  /* this+0x4 */ unsigned short InjectionPoint;
  /* this+0x6 */ unsigned short PageNumber;
}

struct tagMENUITEMINFOW {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned int fMask;
  /* this+0x8 */ unsigned int fType;
  /* this+0xc */ unsigned int fState;
  /* this+0x10 */ unsigned int wID;
  /* this+0x14 */ struct HMENU__ * hSubMenu;
  /* this+0x18 */ struct HBITMAP__ * hbmpChecked;
  /* this+0x1c */ struct HBITMAP__ * hbmpUnchecked;
  /* this+0x20 */ unsigned long dwItemData;
  /* this+0x24 */ wchar_t * dwTypeData;
  /* this+0x28 */ unsigned int cch;
  /* this+0x2c */ struct HBITMAP__ * hbmpItem;
}

struct tagGCP_RESULTSA {
  /* this+0x0 */ unsigned long lStructSize;
  /* this+0x4 */ char * lpOutString;
  /* this+0x8 */ unsigned int * lpOrder;
  /* this+0xc */ int * lpDx;
  /* this+0x10 */ int * lpCaretPos;
  /* this+0x14 */ char * lpClass;
  /* this+0x18 */ wchar_t * lpGlyphs;
  /* this+0x1c */ unsigned int nGlyphs;
  /* this+0x20 */ int nMaxFit;
}

struct _SERVICE_NOTIFY_1 {
  /* this+0x0 */ unsigned long dwVersion;
  /* this+0x4 */ function  * pfnNotifyCallback;
  /* this+0x8 */ void * pContext;
  /* this+0xc */ unsigned long dwNotificationStatus;
  /* this+0x10 */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
}

struct HTASK__ {
  /* this+0x0 */ int unused;
}

struct tagEMRFORMAT {
  /* this+0x0 */ unsigned long dSignature;
  /* this+0x4 */ unsigned long nVersion;
  /* this+0x8 */ unsigned long cbData;
  /* this+0xc */ unsigned long offData;
}

struct tagMCI_VD_STEP_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwFrames;
}

struct PACKET_ZC_ADD_ITEM_TO_CART2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
  /* this+0x8 */ unsigned short ITID;
  /* this+0xa */ unsigned char type;
  /* this+0xb */ bool IsIdentified;
  /* this+0xc */ bool IsDamaged;
  /* this+0xd */ unsigned char refiningLevel;
  /* this+0xe */ struct EQUIPSLOTINFO slot;
}

struct tagMETARECORD {
  /* this+0x0 */ unsigned long rdSize;
  /* this+0x4 */ unsigned short rdFunction;
  /* this+0x6 */ unsigned short[0x1] rdParm;
}

struct PACKET_ZC_STORE_ENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long makerAID;
  /* this+0x6 */ char[0x50] storeName;
}

struct _GENERIC_MAPPING {
  /* this+0x0 */ unsigned long GenericRead;
  /* this+0x4 */ unsigned long GenericWrite;
  /* this+0x8 */ unsigned long GenericExecute;
  /* this+0xc */ unsigned long GenericAll;
}

struct PACKET_CZ_INPUT_EDITDLG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ int value;
}

struct _heapinfo {
  /* this+0x0 */ int * _pentry;
  /* this+0x4 */ unsigned int _size;
  /* this+0x8 */ int _useflag;
}

struct PACKET_HC_ACCEPT_ENTER2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned char NormalSlotNum;
  /* this+0x5 */ unsigned char PremiumSlotNum;
  /* this+0x6 */ unsigned char BillingSlotNum;
  /* this+0x7 */ unsigned char ProducibleSlotNum;
  /* this+0x8 */ unsigned char ValidSlotNum;
  /* this+0x9 */ char[0x14] m_extension;
}

struct PACKET_CZ_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct tagTITLEBARINFOEX {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct tagRECT rcTitleBar;
  /* this+0x14 */ unsigned long[0x6] rgstate;
  /* this+0x2c */ struct tagRECT[0x6] rgrect;
}

struct PACKET_CZ_REQ_GUILD_NAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GuildID;
}

struct PACKET_ZC_GUILD_SKILLINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short skillPoint;
}

struct tagVS_FIXEDFILEINFO {
  /* this+0x0 */ unsigned long dwSignature;
  /* this+0x4 */ unsigned long dwStrucVersion;
  /* this+0x8 */ unsigned long dwFileVersionMS;
  /* this+0xc */ unsigned long dwFileVersionLS;
  /* this+0x10 */ unsigned long dwProductVersionMS;
  /* this+0x14 */ unsigned long dwProductVersionLS;
  /* this+0x18 */ unsigned long dwFileFlagsMask;
  /* this+0x1c */ unsigned long dwFileFlags;
  /* this+0x20 */ unsigned long dwFileOS;
  /* this+0x24 */ unsigned long dwFileType;
  /* this+0x28 */ unsigned long dwFileSubtype;
  /* this+0x2c */ unsigned long dwFileDateMS;
  /* this+0x30 */ unsigned long dwFileDateLS;
}

struct _SERVICE_FAILURE_ACTIONSA {
  /* this+0x0 */ unsigned long dwResetPeriod;
  /* this+0x4 */ char * lpRebootMsg;
  /* this+0x8 */ char * lpCommand;
  /* this+0xc */ unsigned long cActions;
  /* this+0x10 */ struct _SC_ACTION * lpsaActions;
}

struct HIMC__ {
  /* this+0x0 */ int unused;
}

struct tagMIDIOUTCAPSW {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned short wTechnology;
  /* this+0x4a */ unsigned short wVoices;
  /* this+0x4c */ unsigned short wNotes;
  /* this+0x4e */ unsigned short wChannelMask;
  /* this+0x50 */ unsigned long dwSupport;
}

struct tagMCI_WAVE_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned int wDeviceID;
  /* this+0x8 */ const wchar_t * lpstrDeviceType;
  /* this+0xc */ const wchar_t * lpstrElementName;
  /* this+0x10 */ const wchar_t * lpstrAlias;
  /* this+0x14 */ unsigned long dwBufferSeconds;
}

struct _TP_WORK {
}

struct PACKET_ZC_GUILD_MEMBER_MAP_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ char[0x10] mapName;
}

struct PACKET_ZC_PARTY_RECRUIT_CANCEL_VOLUNTEER_TO_PM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct _FILE_ID_BOTH_DIR_INFO {
  /* this+0x0 */ unsigned long NextEntryOffset;
  /* this+0x4 */ unsigned long FileIndex;
  /* this+0x8 */ union _LARGE_INTEGER CreationTime;
  /* this+0x10 */ union _LARGE_INTEGER LastAccessTime;
  /* this+0x18 */ union _LARGE_INTEGER LastWriteTime;
  /* this+0x20 */ union _LARGE_INTEGER ChangeTime;
  /* this+0x28 */ union _LARGE_INTEGER EndOfFile;
  /* this+0x30 */ union _LARGE_INTEGER AllocationSize;
  /* this+0x38 */ unsigned long FileAttributes;
  /* this+0x3c */ unsigned long FileNameLength;
  /* this+0x40 */ unsigned long EaSize;
  /* this+0x44 */ char ShortNameLength;
  /* this+0x46 */ wchar_t[0xc] ShortName;
  /* this+0x60 */ union _LARGE_INTEGER FileId;
  /* this+0x68 */ wchar_t[0x1] FileName;
}

struct tagEMREXTCREATEPEN {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihPen;
  /* this+0xc */ unsigned long offBmi;
  /* this+0x10 */ unsigned long cbBmi;
  /* this+0x14 */ unsigned long offBits;
  /* this+0x18 */ unsigned long cbBits;
  /* this+0x1c */ struct tagEXTLOGPEN32 elp;
}

struct tagMCI_OVLY_SAVE_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const char * lpfilename;
  /* this+0x8 */ struct tagRECT rc;
}

struct PACKET_ZC_REQ_EXCHANGE_ITEM2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
  /* this+0x1a */ unsigned long GID;
  /* this+0x1e */ short level;
}

struct _IMAGE_RELOCATION {
  /* this+0x0 */ unsigned long VirtualAddress;
  /* this+0x0 */ unsigned long RelocCount;
  /* this+0x4 */ unsigned long SymbolTableIndex;
  /* this+0x8 */ unsigned short Type;
}

struct PPM_WMI_PERF_STATES {
  /* this+0x0 */ unsigned long Count;
  /* this+0x4 */ unsigned long MaxFrequency;
  /* this+0x8 */ unsigned long CurrentState;
  /* this+0xc */ unsigned long MaxPerfState;
  /* this+0x10 */ unsigned long MinPerfState;
  /* this+0x14 */ unsigned long LowestPerfState;
  /* this+0x18 */ unsigned long ThermalConstraint;
  /* this+0x1c */ unsigned char BusyAdjThreshold;
  /* this+0x1d */ unsigned char PolicyType;
  /* this+0x1e */ unsigned char Type;
  /* this+0x1f */ unsigned char Reserved;
  /* this+0x20 */ unsigned long TimerInterval;
  /* this+0x28 */ unsigned __int64 TargetProcessors;
  /* this+0x30 */ unsigned long PStateHandler;
  /* this+0x34 */ unsigned long PStateContext;
  /* this+0x38 */ unsigned long TStateHandler;
  /* this+0x3c */ unsigned long TStateContext;
  /* this+0x40 */ unsigned long FeedbackHandler;
  /* this+0x44 */ unsigned long Reserved1;
  /* this+0x48 */ unsigned __int64 Reserved2;
  /* this+0x50 */ struct PPM_WMI_PERF_STATE[0x1] State;
}

struct PACKET_ZC_ACK_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_ZC_WAIT_DIALOG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct PACKET_CH_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int AuthCode;
  /* this+0xa */ unsigned long userLevel;
  /* this+0xe */ unsigned short clientType;
  /* this+0x10 */ unsigned char Sex;
}

struct PACKET_ZC_CONCLUDE_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char who;
}

struct PPM_WMI_PERF_STATE {
  /* this+0x0 */ unsigned long Frequency;
  /* this+0x4 */ unsigned long Power;
  /* this+0x8 */ unsigned char PercentFrequency;
  /* this+0x9 */ unsigned char IncreaseLevel;
  /* this+0xa */ unsigned char DecreaseLevel;
  /* this+0xb */ unsigned char Type;
  /* this+0xc */ unsigned long IncreaseTime;
  /* this+0x10 */ unsigned long DecreaseTime;
  /* this+0x18 */ unsigned __int64 Control;
  /* this+0x20 */ unsigned __int64 Status;
  /* this+0x28 */ unsigned long HitCount;
  /* this+0x2c */ unsigned long Reserved1;
  /* this+0x30 */ unsigned __int64 Reserved2;
  /* this+0x38 */ unsigned __int64 Reserved3;
}

struct tagWNDCLASSW {
  /* this+0x0 */ unsigned int style;
  /* this+0x4 */ function  * lpfnWndProc;
  /* this+0x8 */ int cbClsExtra;
  /* this+0xc */ int cbWndExtra;
  /* this+0x10 */ struct HINSTANCE__ * hInstance;
  /* this+0x14 */ struct HICON__ * hIcon;
  /* this+0x18 */ struct HICON__ * hCursor;
  /* this+0x1c */ struct HBRUSH__ * hbrBackground;
  /* this+0x20 */ const wchar_t * lpszMenuName;
  /* this+0x24 */ const wchar_t * lpszClassName;
}

struct _QUERY_SERVICE_LOCK_STATUSW {
  /* this+0x0 */ unsigned long fIsLocked;
  /* this+0x4 */ wchar_t * lpLockOwner;
  /* this+0x8 */ unsigned long dwLockDuration;
}

struct PACKET_CA_LOGIN4 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x10] PasswdMD5;
  /* this+0x2e */ unsigned char clienttype;
  /* this+0x2f */ char[0xd] macData;
}

struct PACKET_CZ_REQNAME_BYGID2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
}

struct PACKET_ZC_EFST_SET_ENTER2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short hEFST;
  /* this+0x8 */ unsigned long MaxMS;
  /* this+0xc */ unsigned long Time;
  /* this+0x10 */ int Val1;
  /* this+0x14 */ int Val2;
  /* this+0x18 */ int Val3;
}

struct PACKET_ZC_DELETE_ITEM_FROM_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct _MOUSE_EVENT_RECORD {
  /* this+0x0 */ struct _COORD dwMousePosition;
  /* this+0x4 */ unsigned long dwButtonState;
  /* this+0x8 */ unsigned long dwControlKeyState;
  /* this+0xc */ unsigned long dwEventFlags;
}

struct PACKET_CZ_REQ_PARTY_NAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long PartyID;
}

struct PACKET_CZ_REQ_RANKING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short RankingType;
}

struct MAKABLEITEM_INFO {
  /* this+0x0 */ unsigned short ITID;
  /* this+0x2 */ unsigned short[0x3] material_ID;
}

struct PACKET_CZ_REQMAKINGITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct MAKABLEITEM_INFO info;
}

struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
  /* this+0x0 */ struct _GUID OldestTransactionGuid;
}

struct tagMCI_OVLY_LOAD_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const wchar_t * lpfilename;
  /* this+0x8 */ struct tagRECT rc;
}

struct tagLOCALESIGNATURE {
  /* this+0x0 */ unsigned long[0x4] lsUsb;
  /* this+0x10 */ unsigned long[0x2] lsCsbDefault;
  /* this+0x18 */ unsigned long[0x2] lsCsbSupported;
}

struct _CONNECTDLGSTRUCTW {
  /* this+0x0 */ unsigned long cbStructure;
  /* this+0x4 */ struct HWND__ * hwndOwner;
  /* this+0x8 */ struct _NETRESOURCEW * lpConnRes;
  /* this+0xc */ unsigned long dwFlags;
  /* this+0x10 */ unsigned long dwDevNum;
}

struct PACKET_ZC_ACK_REQNAME_BYGID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x18] CName;
}

struct tagNCCALCSIZE_PARAMS {
  /* this+0x0 */ struct tagRECT[0x3] rgrc;
  /* this+0x30 */ struct tagWINDOWPOS * lppos;
}

struct PACKET_ZC_AUCTION_ACK_MY_SELL_STOP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
}

struct _WSACOMPLETION {
  /* this+0x0 */ enum _WSACOMPLETIONTYPE Type;
  /* this+0x4 */ union _WSACOMPLETION::<unnamed-type-Parameters> Parameters;
}

struct _IMAGE_SEPARATE_DEBUG_HEADER {
  /* this+0x0 */ unsigned short Signature;
  /* this+0x2 */ unsigned short Flags;
  /* this+0x4 */ unsigned short Machine;
  /* this+0x6 */ unsigned short Characteristics;
  /* this+0x8 */ unsigned long TimeDateStamp;
  /* this+0xc */ unsigned long CheckSum;
  /* this+0x10 */ unsigned long ImageBase;
  /* this+0x14 */ unsigned long SizeOfImage;
  /* this+0x18 */ unsigned long NumberOfSections;
  /* this+0x1c */ unsigned long ExportedNamesSize;
  /* this+0x20 */ unsigned long DebugDirectorySize;
  /* this+0x24 */ unsigned long SectionAlignment;
  /* this+0x28 */ unsigned long[0x2] Reserved;
}

struct tagCOMPAREITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType;
  /* this+0x4 */ unsigned int CtlID;
  /* this+0x8 */ struct HWND__ * hwndItem;
  /* this+0xc */ unsigned int itemID1;
  /* this+0x10 */ unsigned long itemData1;
  /* this+0x14 */ unsigned int itemID2;
  /* this+0x18 */ unsigned long itemData2;
  /* this+0x1c */ unsigned long dwLocaleId;
}

struct mmtime_tag {
  /* this+0x0 */ unsigned int wType;
  /* this+0x4 */ union mmtime_tag::<unnamed-type-u> u;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5::ITEM {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ unsigned long location;
  /* this+0x9 */ unsigned long WearState;
  /* this+0xd */ unsigned char RefiningLevel;
  /* this+0xe */ struct EQUIPSLOTINFO slot;
  /* this+0x16 */ long HireExpireDate;
  /* this+0x1a */ unsigned short bindOnEquipType;
  /* this+0x1c */ unsigned short wItemSpriteNumber;
  /* this+0x1e */ struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5::ITEM::<unnamed-type-Flag> Flag;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5::ITEM::<unnamed-type-Flag> {
      }

struct tagMCI_OVLY_WINDOW_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ struct HWND__ * hWnd;
  /* this+0x8 */ unsigned int nCmdShow;
  /* this+0xc */ const wchar_t * lpstrText;
}

struct _CONTEXT_CHUNK {
  /* this+0x0 */ long Offset;
  /* this+0x4 */ unsigned long Length;
}

struct _ENUM_SERVICE_STATUSA {
  /* this+0x0 */ char * lpServiceName;
  /* this+0x4 */ char * lpDisplayName;
  /* this+0x8 */ struct _SERVICE_STATUS ServiceStatus;
}

struct PACKET_ZC_ITEM_DELETE_BUYING_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ short count;
  /* this+0x6 */ int zeny;
}

struct tagEMRRESTOREDC {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ long iRelative;
}

struct PACKET_ZC_SELECT_DEALTYPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct PACKET_ZC_NOTIFY_BIND_ON_EQUIP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
}

struct _UMS_CREATE_THREAD_ATTRIBUTES {
  /* this+0x0 */ unsigned long UmsVersion;
  /* this+0x4 */ void * UmsContext;
  /* this+0x8 */ void * UmsCompletionList;
}

struct _MESSAGE_RESOURCE_DATA {
  /* this+0x0 */ unsigned long NumberOfBlocks;
  /* this+0x4 */ struct _MESSAGE_RESOURCE_BLOCK[0x1] Blocks;
}

struct _cpinfoexW {
  /* this+0x0 */ unsigned int MaxCharSize;
  /* this+0x4 */ unsigned char[0x2] DefaultChar;
  /* this+0x6 */ unsigned char[0xc] LeadByte;
  /* this+0x12 */ wchar_t UnicodeDefaultChar;
  /* this+0x14 */ unsigned int CodePage;
  /* this+0x18 */ wchar_t[0x104] CodePageName;
}

struct tagIMECHARPOSITION {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long dwCharPos;
  /* this+0x8 */ struct tagPOINT pt;
  /* this+0x10 */ unsigned int cLineHeight;
  /* this+0x14 */ struct tagRECT rcDocument;
}

struct PACKET_ZC_ACK_GIVE_MANNER_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long result;
}

union _SLIST_HEADER {
  /* this+0x0 */ unsigned __int64 Alignment;
  /* this+0x0 */ struct _SINGLE_LIST_ENTRY Next;
  /* this+0x4 */ unsigned short Depth;
  /* this+0x6 */ unsigned short Sequence;
}

struct _UNIVERSAL_NAME_INFOW {
  /* this+0x0 */ wchar_t * lpUniversalName;
}

struct PACKET_CZ_PARTY_RECRUIT_CANCEL_VOLUNTEER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Index;
}

struct _TAPE_WRITE_MARKS {
  /* this+0x0 */ unsigned long Type;
  /* this+0x4 */ unsigned long Count;
  /* this+0x8 */ unsigned char Immediate;
}

struct PACKET_ZC_SPRITE_CHANGE2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ int value;
}

struct tagSTYLEBUFA {
  /* this+0x0 */ unsigned long dwStyle;
  /* this+0x4 */ char[0x20] szDescription;
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_HP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long accountID;
  /* this+0x6 */ char[0x18] name;
  /* this+0x1e */ short hp;
  /* this+0x20 */ short maxHp;
}

struct tagCURSORINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long flags;
  /* this+0x8 */ struct HICON__ * hCursor;
  /* this+0xc */ struct tagPOINT ptScreenPos;
}

struct value_entA {
  /* this+0x0 */ char * ve_valuename;
  /* this+0x4 */ unsigned long ve_valuelen;
  /* this+0x8 */ unsigned long ve_valueptr;
  /* this+0xc */ unsigned long ve_type;
}

struct PACKET_AC_PT_LOGIN_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x9] m_SeedValue;
}

struct tagENUMLOGFONTEXW {
  /* this+0x0 */ struct tagLOGFONTW elfLogFont;
  /* this+0x5c */ wchar_t[0x40] elfFullName;
  /* this+0xdc */ wchar_t[0x20] elfStyle;
  /* this+0x11c */ wchar_t[0x20] elfScript;
}

struct tagENUMLOGFONTEXDVW {
  /* this+0x0 */ struct tagENUMLOGFONTEXW elfEnumLogfontEx;
  /* this+0x15c */ struct tagDESIGNVECTOR elfDesignVector;
}

union mmtime_tag::<unnamed-type-u> {
  /* this+0x0 */ unsigned long ms;
  /* this+0x0 */ unsigned long sample;
  /* this+0x0 */ unsigned long cb;
  /* this+0x0 */ unsigned long ticks;
  /* this+0x0 */ struct mmtime_tag::<unnamed-type-u>::<unnamed-type-smpte> smpte;
  /* this+0x0 */ struct mmtime_tag::<unnamed-type-u>::<unnamed-type-midi> midi;
}

struct _IO_COUNTERS {
  /* this+0x0 */ unsigned __int64 ReadOperationCount;
  /* this+0x8 */ unsigned __int64 WriteOperationCount;
  /* this+0x10 */ unsigned __int64 OtherOperationCount;
  /* this+0x18 */ unsigned __int64 ReadTransferCount;
  /* this+0x20 */ unsigned __int64 WriteTransferCount;
  /* this+0x28 */ unsigned __int64 OtherTransferCount;
}

struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
  /* this+0x0 */ struct _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
  /* this+0x30 */ struct _IO_COUNTERS IoInfo;
  /* this+0x60 */ unsigned long ProcessMemoryLimit;
  /* this+0x64 */ unsigned long JobMemoryLimit;
  /* this+0x68 */ unsigned long PeakProcessMemoryUsed;
  /* this+0x6c */ unsigned long PeakJobMemoryUsed;
}

struct tagMIXERCONTROLDETAILS_LISTTEXTW {
  /* this+0x0 */ unsigned long dwParam1;
  /* this+0x4 */ unsigned long dwParam2;
  /* this+0x8 */ wchar_t[0x40] szName;
}

struct PACKET_CH_MAKE_CHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x18] name;
  /* this+0x1a */ unsigned char Str;
  /* this+0x1b */ unsigned char Agi;
  /* this+0x1c */ unsigned char Vit;
  /* this+0x1d */ unsigned char Int;
  /* this+0x1e */ unsigned char Dex;
  /* this+0x1f */ unsigned char Luk;
  /* this+0x20 */ unsigned char CharNum;
  /* this+0x21 */ short headPal;
  /* this+0x23 */ short head;
}

struct tagTOUCHINPUT {
  /* this+0x0 */ long x;
  /* this+0x4 */ long y;
  /* this+0x8 */ void * hSource;
  /* this+0xc */ unsigned long dwID;
  /* this+0x10 */ unsigned long dwFlags;
  /* this+0x14 */ unsigned long dwMask;
  /* this+0x18 */ unsigned long dwTime;
  /* this+0x1c */ unsigned long dwExtraInfo;
  /* this+0x20 */ unsigned long cxContact;
  /* this+0x24 */ unsigned long cyContact;
}

struct _nlsversioninfoex {
  /* this+0x0 */ unsigned long dwNLSVersionInfoSize;
  /* this+0x4 */ unsigned long dwNLSVersion;
  /* this+0x8 */ unsigned long dwDefinedVersion;
  /* this+0xc */ unsigned long dwEffectiveId;
  /* this+0x10 */ struct _GUID guidCustomVersion;
}

struct _MEMORYSTATUS {
  /* this+0x0 */ unsigned long dwLength;
  /* this+0x4 */ unsigned long dwMemoryLoad;
  /* this+0x8 */ unsigned long dwTotalPhys;
  /* this+0xc */ unsigned long dwAvailPhys;
  /* this+0x10 */ unsigned long dwTotalPageFile;
  /* this+0x14 */ unsigned long dwAvailPageFile;
  /* this+0x18 */ unsigned long dwTotalVirtual;
  /* this+0x1c */ unsigned long dwAvailVirtual;
}

struct _WGLSWAP {
  /* this+0x0 */ struct HDC__ * hdc;
  /* this+0x4 */ unsigned int uiFlags;
}

struct PACKET_HC_DELETE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Result;
  /* this+0x4 */ unsigned long Seed;
}

struct HMIDIOUT__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_PRNPC_STATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Winner;
  /* this+0x3 */ unsigned char Point;
}

struct tagCHARSETINFO {
  /* this+0x0 */ unsigned int ciCharset;
  /* this+0x4 */ unsigned int ciACP;
  /* this+0x8 */ struct tagFONTSIGNATURE fs;
}

struct tagTTPOLYGONHEADER {
  /* this+0x0 */ unsigned long cb;
  /* this+0x4 */ unsigned long dwType;
  /* this+0x8 */ struct tagPOINTFX pfxStart;
}

struct tagHELPINFO {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ int iContextType;
  /* this+0x8 */ int iCtrlId;
  /* this+0xc */ void * hItemHandle;
  /* this+0x10 */ unsigned long dwContextId;
  /* this+0x14 */ struct tagPOINT MousePos;
}

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
  /* this+0x0 */ unsigned long dwReason;
  /* this+0x4 */ char * pszComment;
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
}

struct tagRGBQUAD {
  /* this+0x0 */ unsigned char rgbBlue;
  /* this+0x1 */ unsigned char rgbGreen;
  /* this+0x2 */ unsigned char rgbRed;
  /* this+0x3 */ unsigned char rgbReserved;
}

struct _IMAGE_ARCHIVE_MEMBER_HEADER {
  /* this+0x0 */ unsigned char[0x10] Name;
  /* this+0x10 */ unsigned char[0xc] Date;
  /* this+0x1c */ unsigned char[0x6] UserID;
  /* this+0x22 */ unsigned char[0x6] GroupID;
  /* this+0x28 */ unsigned char[0x8] Mode;
  /* this+0x30 */ unsigned char[0xa] Size;
  /* this+0x3a */ unsigned char[0x2] EndHeader;
}

struct PACKET_ZC_ITEM_PICKUP_ACK2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ unsigned short count;
  /* this+0x6 */ unsigned short ITID;
  /* this+0x8 */ bool IsIdentified;
  /* this+0x9 */ bool IsDamaged;
  /* this+0xa */ unsigned char refiningLevel;
  /* this+0xb */ struct EQUIPSLOTINFO slot;
  /* this+0x13 */ unsigned short location;
  /* this+0x15 */ unsigned char type;
  /* this+0x16 */ unsigned char result;
  /* this+0x17 */ long HireExpireDate;
}

struct PACKET_CZ_RECALL_SSO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long aid;
}

struct _SC_ACTION {
  /* this+0x0 */ enum _SC_ACTION_TYPE Type;
  /* this+0x4 */ unsigned long Delay;
}

struct PACKET_CH_SELECT_CHAR_GOINGTOBEUSED {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwAID;
  /* this+0x6 */ int nCountSelectedChar;
  /* this+0xa */ unsigned long[0x9] ardwSelectedGID;
}

struct PACKET_ZC_CHANGE_DIRECTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short headDir;
  /* this+0x8 */ unsigned char dir;
}

struct PACKET_CZ_REQ_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] EntryQueueName;
}

struct IMAGE_COR20_HEADER {
  /* this+0x0 */ unsigned long cb;
  /* this+0x4 */ unsigned short MajorRuntimeVersion;
  /* this+0x6 */ unsigned short MinorRuntimeVersion;
  /* this+0x8 */ struct _IMAGE_DATA_DIRECTORY MetaData;
  /* this+0x10 */ unsigned long Flags;
  /* this+0x14 */ unsigned long EntryPointToken;
  /* this+0x14 */ unsigned long EntryPointRVA;
  /* this+0x18 */ struct _IMAGE_DATA_DIRECTORY Resources;
  /* this+0x20 */ struct _IMAGE_DATA_DIRECTORY StrongNameSignature;
  /* this+0x28 */ struct _IMAGE_DATA_DIRECTORY CodeManagerTable;
  /* this+0x30 */ struct _IMAGE_DATA_DIRECTORY VTableFixups;
  /* this+0x38 */ struct _IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
  /* this+0x40 */ struct _IMAGE_DATA_DIRECTORY ManagedNativeHeader;
}

struct tagWINDOWPOS {
  /* this+0x0 */ struct HWND__ * hwnd;
  /* this+0x4 */ struct HWND__ * hwndInsertAfter;
  /* this+0x8 */ int x;
  /* this+0xc */ int y;
  /* this+0x10 */ int cx;
  /* this+0x14 */ int cy;
  /* this+0x18 */ unsigned int flags;
}

struct PACKET_ZC_ITEM_FALL_ENTRY4 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ITAID;
  /* this+0x6 */ unsigned short ITID;
  /* this+0x8 */ unsigned short type;
  /* this+0xa */ bool IsIdentified;
  /* this+0xb */ short xPos;
  /* this+0xd */ short yPos;
  /* this+0xf */ unsigned char subX;
  /* this+0x10 */ unsigned char subY;
  /* this+0x11 */ short count;
}

struct _SERVICE_PREFERRED_NODE_INFO {
  /* this+0x0 */ unsigned short usPreferredNode;
  /* this+0x2 */ unsigned char fDelete;
}

struct CHARACTER_INFO {
  /* this+0x0 */ unsigned long GID;
  /* this+0x4 */ int exp;
  /* this+0x8 */ int money;
  /* this+0xc */ int jobexp;
  /* this+0x10 */ int joblevel;
  /* this+0x14 */ int bodystate;
  /* this+0x18 */ int healthstate;
  /* this+0x1c */ int effectstate;
  /* this+0x20 */ int virtue;
  /* this+0x24 */ int honor;
  /* this+0x28 */ short jobpoint;
  /* this+0x2a */ int hp;
  /* this+0x2e */ int maxhp;
  /* this+0x32 */ short sp;
  /* this+0x34 */ short maxsp;
  /* this+0x36 */ short speed;
  /* this+0x38 */ short job;
  /* this+0x3a */ short head;
  /* this+0x3c */ short weapon;
  /* this+0x3e */ short level;
  /* this+0x40 */ short sppoint;
  /* this+0x42 */ short accessory;
  /* this+0x44 */ short shield;
  /* this+0x46 */ short accessory2;
  /* this+0x48 */ short accessory3;
  /* this+0x4a */ short headpalette;
  /* this+0x4c */ short bodypalette;
  /* this+0x4e */ unsigned char[0x18] name;
  /* this+0x66 */ unsigned char Str;
  /* this+0x67 */ unsigned char Agi;
  /* this+0x68 */ unsigned char Vit;
  /* this+0x69 */ unsigned char Int;
  /* this+0x6a */ unsigned char Dex;
  /* this+0x6b */ unsigned char Luk;
  /* this+0x6c */ unsigned char CharNum;
  /* this+0x6d */ unsigned char haircolor;
  /* this+0x6e */ short bIsChangedCharName;
  /* this+0x70 */ unsigned char[0x10] mapName;
  /* this+0x80 */ long DeleteReservedDate;
  /* this+0x84 */ int nRobe;
  /* this+0x88 */ int m_nchrSlotCnt;
  /* this+0x8c */ int nCharNameChangeCnt;
}

struct PACKET_HC_ACCEPT_MAKECHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct CHARACTER_INFO charinfo;
}

struct PACKET_ZC_ACCEPT_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long startTime;
  /* this+0x6 */ unsigned char[0x3] PosDir;
  /* this+0x9 */ unsigned char xSize;
  /* this+0xa */ unsigned char ySize;
}

struct PACKET_CZ_CLOSE_WINDOW {
  /* this+0x0 */ short PacketType;
}

struct _IMAGE_EXPORT_DIRECTORY {
  /* this+0x0 */ unsigned long Characteristics;
  /* this+0x4 */ unsigned long TimeDateStamp;
  /* this+0x8 */ unsigned short MajorVersion;
  /* this+0xa */ unsigned short MinorVersion;
  /* this+0xc */ unsigned long Name;
  /* this+0x10 */ unsigned long Base;
  /* this+0x14 */ unsigned long NumberOfFunctions;
  /* this+0x18 */ unsigned long NumberOfNames;
  /* this+0x1c */ unsigned long AddressOfFunctions;
  /* this+0x20 */ unsigned long AddressOfNames;
  /* this+0x24 */ unsigned long AddressOfNameOrdinals;
}

struct tagNEWTEXTMETRICEXW {
  /* this+0x0 */ struct tagNEWTEXTMETRICW ntmTm;
  /* this+0x4c */ struct tagFONTSIGNATURE ntmFontSig;
}

struct tagENUMTEXTMETRICW {
  /* this+0x0 */ struct tagNEWTEXTMETRICEXW etmNewTextMetricEx;
  /* this+0x64 */ struct tagAXESLISTW etmAxesList;
}

struct PACKET_CH_REQ_CHANGE_CHARACTER_SLOT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short beforeCharNum;
  /* this+0x4 */ short AfterCharNum;
  /* this+0x6 */ short CurChrSlotCnt;
}

struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
  /* this+0x0 */ void * lpInformation;
  /* this+0x4 */ void * lpSectionBase;
  /* this+0x8 */ unsigned long ulSectionLength;
  /* this+0xc */ void * lpSectionGlobalDataBase;
  /* this+0x10 */ unsigned long ulSectionGlobalDataLength;
}

struct tagACTCTX_SECTION_KEYED_DATA {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long ulDataFormatVersion;
  /* this+0x8 */ void * lpData;
  /* this+0xc */ unsigned long ulLength;
  /* this+0x10 */ void * lpSectionGlobalData;
  /* this+0x14 */ unsigned long ulSectionGlobalDataLength;
  /* this+0x18 */ void * lpSectionBase;
  /* this+0x1c */ unsigned long ulSectionTotalLength;
  /* this+0x20 */ void * hActCtx;
  /* this+0x24 */ unsigned long ulAssemblyRosterIndex;
  /* this+0x28 */ unsigned long ulFlags;
  /* this+0x2c */ struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
}

struct PACKET_ZC_NOTIFY_PLAYERCHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_REQ_DISCONNECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
}

struct PACKET_AC_EVENT_RESULT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long EventItemCount;
}

struct PACKET_ZC_REQ_CASH_PASSWORD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Info;
}

struct PACKET_CZ_USE_SKILL_TOGROUND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short selectedLevel;
  /* this+0x4 */ unsigned short SKID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
}

struct tagEMRPLGBLT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ struct _POINTL[0x3] aptlDest;
  /* this+0x30 */ long xSrc;
  /* this+0x34 */ long ySrc;
  /* this+0x38 */ long cxSrc;
  /* this+0x3c */ long cySrc;
  /* this+0x40 */ struct tagXFORM xformSrc;
  /* this+0x58 */ unsigned long crBkColorSrc;
  /* this+0x5c */ unsigned long iUsageSrc;
  /* this+0x60 */ unsigned long offBmiSrc;
  /* this+0x64 */ unsigned long cbBmiSrc;
  /* this+0x68 */ unsigned long offBitsSrc;
  /* this+0x6c */ unsigned long cbBitsSrc;
  /* this+0x70 */ long xMask;
  /* this+0x74 */ long yMask;
  /* this+0x78 */ unsigned long iUsageMask;
  /* this+0x7c */ unsigned long offBmiMask;
  /* this+0x80 */ unsigned long cbBmiMask;
  /* this+0x84 */ unsigned long offBitsMask;
  /* this+0x88 */ unsigned long cbBitsMask;
}

struct _LOAD_DLL_DEBUG_INFO {
  /* this+0x0 */ void * hFile;
  /* this+0x4 */ void * lpBaseOfDll;
  /* this+0x8 */ unsigned long dwDebugInfoFileOffset;
  /* this+0xc */ unsigned long nDebugInfoSize;
  /* this+0x10 */ void * lpImageName;
  /* this+0x14 */ unsigned short fUnicode;
}

struct PACKET_CZ_MEMORIALDUNGEON_COMMAND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum PACKET_CZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command;
}

struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long BeginAddress;
  /* this+0x4 */ unsigned long EndAddress;
  /* this+0x8 */ unsigned long UnwindInfoAddress;
}

struct PACKET_ZC_SPRITE_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ unsigned char value;
}

struct GUILDINFO_LIST {
  /* this+0x0 */ char[0x18] GName;
  /* this+0x18 */ char[0x18] MName;
  /* this+0x30 */ int Level;
  /* this+0x34 */ int Ranking;
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Sym> {
  /* this+0x0 */ unsigned long WeakDefaultSymIndex;
  /* this+0x4 */ unsigned long WeakSearchType;
  /* this+0x8 */ unsigned char[0xc] rgbReserved;
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-File> {
  /* this+0x0 */ unsigned char[0x14] Name;
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Section> {
  /* this+0x0 */ unsigned long Length;
  /* this+0x4 */ unsigned short NumberOfRelocations;
  /* this+0x6 */ unsigned short NumberOfLinenumbers;
  /* this+0x8 */ unsigned long CheckSum;
  /* this+0xc */ short Number;
  /* this+0xe */ unsigned char Selection;
  /* this+0xf */ unsigned char bReserved;
  /* this+0x10 */ short HighNumber;
  /* this+0x12 */ unsigned char[0x2] rgbReserved;
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-CRC> {
  /* this+0x0 */ unsigned long crc;
  /* this+0x4 */ unsigned char[0x10] rgbReserved;
}

union _IMAGE_AUX_SYMBOL_EX {
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Sym> Sym;
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-File> File;
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Section> Section;
  /* this+0x0 */ struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
  /* this+0x12 */ unsigned char[0x2] rgbReserved;
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-CRC> CRC;
}

struct PACKET_CZ_SE_CASHSHOP_OPEN {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_HP_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int HP;
  /* this+0xa */ int MaxHP;
}

struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
  /* this+0x0 */ unsigned __int64 CycleTime;
}

struct tagEMRCREATEMONOBRUSH {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihBrush;
  /* this+0xc */ unsigned long iUsage;
  /* this+0x10 */ unsigned long offBmi;
  /* this+0x14 */ unsigned long cbBmi;
  /* this+0x18 */ unsigned long offBits;
  /* this+0x1c */ unsigned long cbBits;
}

union _FILE_SEGMENT_ELEMENT {
  /* this+0x0 */ void * Buffer;
  /* this+0x0 */ unsigned __int64 Alignment;
}

struct _SID_AND_ATTRIBUTES_HASH {
  /* this+0x0 */ unsigned long SidCount;
  /* this+0x4 */ struct _SID_AND_ATTRIBUTES * SidAttr;
  /* this+0x8 */ unsigned long[0x20] Hash;
}

struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
  /* this+0x0 */ unsigned long ElementCount;
  /* this+0x4 */ struct _COMPATIBILITY_CONTEXT_ELEMENT[0x0] Elements;
}

struct _SERVICE_FAILURE_ACTIONS_FLAG {
  /* this+0x0 */ int fFailureActionsOnNonCrashFailures;
}

struct _div_t {
  /* this+0x0 */ int quot;
  /* this+0x4 */ int rem;
}

struct PACKET_ZC_MAPPROPERTY_R2::tagNotifyProperty {
                        }

struct PACKET_ZC_MAPPROPERTY_R2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
  /* this+0x4 */ struct PACKET_ZC_MAPPROPERTY_R2::tagNotifyProperty NotifyProperty;
}

struct PACKET_ZC_NOTIFY_STANDENTRY8 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char objecttype;
  /* this+0x5 */ unsigned long GID;
  /* this+0x9 */ short speed;
  /* this+0xb */ short bodyState;
  /* this+0xd */ short healthState;
  /* this+0xf */ int effectState;
  /* this+0x13 */ short job;
  /* this+0x15 */ short head;
  /* this+0x17 */ int weapon;
  /* this+0x1b */ short accessory;
  /* this+0x1d */ short accessory2;
  /* this+0x1f */ short accessory3;
  /* this+0x21 */ short headpalette;
  /* this+0x23 */ short bodypalette;
  /* this+0x25 */ short headDir;
  /* this+0x27 */ short robe;
  /* this+0x29 */ unsigned long GUID;
  /* this+0x2d */ short GEmblemVer;
  /* this+0x2f */ short honor;
  /* this+0x31 */ int virtue;
  /* this+0x35 */ bool isPKModeON;
  /* this+0x36 */ unsigned char sex;
  /* this+0x37 */ unsigned char[0x3] PosDir;
  /* this+0x3a */ unsigned char xSize;
  /* this+0x3b */ unsigned char ySize;
  /* this+0x3c */ unsigned char state;
  /* this+0x3d */ short clevel;
  /* this+0x3f */ short font;
  /* this+0x41 */ int maxHP;
  /* this+0x45 */ int HP;
  /* this+0x49 */ unsigned char isBoss;
}

struct _GLYPHMETRICS {
  /* this+0x0 */ unsigned int gmBlackBoxX;
  /* this+0x4 */ unsigned int gmBlackBoxY;
  /* this+0x8 */ struct tagPOINT gmptGlyphOrigin;
  /* this+0x10 */ short gmCellIncX;
  /* this+0x12 */ short gmCellIncY;
}

struct PACKET_ZC_GROUP_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ char[0x18] groupName;
}

struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> {
  /* this+0x0 */ unsigned char BaseMid;
  /* this+0x1 */ unsigned char Flags1;
  /* this+0x2 */ unsigned char Flags2;
  /* this+0x3 */ unsigned char BaseHi;
}

struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> {
                    }

struct PACKET_HC_ACK_IS_VALID_CHARNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short sResult;
}

struct _JOB_SET_ARRAY {
  /* this+0x0 */ void * JobHandle;
  /* this+0x4 */ unsigned long MemberLevel;
  /* this+0x8 */ unsigned long Flags;
}

struct PACKET_CZ_REPLY_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Result;
  /* this+0x3 */ char[0x18] EntryQueueName;
}

struct PACKET_ZC_MEMORIALDUNGEON_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3d] MemorialDungeonName;
  /* this+0x3f */ unsigned long DestroyDate;
  /* this+0x43 */ unsigned long EnterTimeOutDate;
}

struct _REASON_CONTEXT {
  /* this+0x0 */ unsigned long Version;
  /* this+0x4 */ unsigned long Flags;
  /* this+0x8 */ union _REASON_CONTEXT::<unnamed-type-Reason> Reason;
}

struct PACKET_ZC_NPCSPRITE_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ unsigned long value;
}

struct PACKET_CZ_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ int answer;
}

struct PACKET_ZC_NOTIFY_MOVEENTRY2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ short effectState;
  /* this+0xe */ short job;
  /* this+0x10 */ short head;
  /* this+0x12 */ int weapon;
  /* this+0x16 */ short accessory;
  /* this+0x18 */ unsigned long moveStartTime;
  /* this+0x1c */ short accessory2;
  /* this+0x1e */ short accessory3;
  /* this+0x20 */ short headpalette;
  /* this+0x22 */ short bodypalette;
  /* this+0x24 */ short headDir;
  /* this+0x26 */ unsigned long GUID;
  /* this+0x2a */ short GEmblemVer;
  /* this+0x2c */ short honor;
  /* this+0x2e */ short virtue;
  /* this+0x30 */ bool isPKModeON;
  /* this+0x31 */ unsigned char sex;
  /* this+0x32 */ unsigned char[0x6] MoveData;
  /* this+0x38 */ unsigned char xSize;
  /* this+0x39 */ unsigned char ySize;
  /* this+0x3a */ short clevel;
}

struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
  /* this+0x0 */ union _LARGE_INTEGER TotalUserTime;
  /* this+0x8 */ union _LARGE_INTEGER TotalKernelTime;
  /* this+0x10 */ union _LARGE_INTEGER ThisPeriodTotalUserTime;
  /* this+0x18 */ union _LARGE_INTEGER ThisPeriodTotalKernelTime;
  /* this+0x20 */ unsigned long TotalPageFaultCount;
  /* this+0x24 */ unsigned long TotalProcesses;
  /* this+0x28 */ unsigned long ActiveProcesses;
  /* this+0x2c */ unsigned long TotalTerminatedProcesses;
}

struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
  /* this+0x0 */ struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
  /* this+0x30 */ struct _IO_COUNTERS IoInfo;
}

struct PACKET_CZ_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
}

struct PACKET_ZC_SKILLMSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MsgNo;
}

struct PACKET_ZC_ACK_BATTLE_STATE_MONITOR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long BFNO;
  /* this+0x6 */ short PlayCount;
  /* this+0x8 */ short BattleState;
  /* this+0xa */ short TeamCount_A;
  /* this+0xc */ short TeamCount_B;
  /* this+0xe */ short MyCount;
  /* this+0x10 */ short JoinTeam;
}

struct tagEMRSETMITERLIMIT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ float eMiterLimit;
}

struct tagEMRCREATEBRUSHINDIRECT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihBrush;
  /* this+0xc */ struct tagLOGBRUSH32 lb;
}

struct PACKET_ZC_PC_PURCHASE_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct tagMCI_ANIM_STEP_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwFrames;
}

struct PACKET_ZC_MVP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_NOTIFY_EFFECT2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int effectID;
}

struct PACKET_CZ_ACK_STORE_PASSWORD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
  /* this+0x4 */ unsigned char[0x10] Password;
  /* this+0x14 */ unsigned char[0x10] NewPassword;
}

struct PRODUCTINFO_IN_BUYING_STORE {
  /* this+0x0 */ unsigned short ITID;
  /* this+0x2 */ short count;
  /* this+0x4 */ int price;
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_STORE2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
  /* this+0x0 */ unsigned long dwFlags;
  /* this+0x4 */ unsigned long ulFormatVersion;
  /* this+0x8 */ unsigned long ulAssemblyCount;
  /* this+0xc */ unsigned long ulRootManifestPathType;
  /* this+0x10 */ unsigned long ulRootManifestPathChars;
  /* this+0x14 */ unsigned long ulRootConfigurationPathType;
  /* this+0x18 */ unsigned long ulRootConfigurationPathChars;
  /* this+0x1c */ unsigned long ulAppDirPathType;
  /* this+0x20 */ unsigned long ulAppDirPathChars;
  /* this+0x24 */ const wchar_t * lpRootManifestPath;
  /* this+0x28 */ const wchar_t * lpRootConfigurationPath;
  /* this+0x2c */ const wchar_t * lpAppDirPath;
}

union _DEBUG_EVENT::<unnamed-type-u> {
  /* this+0x0 */ struct _EXCEPTION_DEBUG_INFO Exception;
  /* this+0x0 */ struct _CREATE_THREAD_DEBUG_INFO CreateThread;
  /* this+0x0 */ struct _CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
  /* this+0x0 */ struct _EXIT_THREAD_DEBUG_INFO ExitThread;
  /* this+0x0 */ struct _EXIT_PROCESS_DEBUG_INFO ExitProcess;
  /* this+0x0 */ struct _LOAD_DLL_DEBUG_INFO LoadDll;
  /* this+0x0 */ struct _UNLOAD_DLL_DEBUG_INFO UnloadDll;
  /* this+0x0 */ struct _OUTPUT_DEBUG_STRING_INFO DebugString;
  /* this+0x0 */ struct _RIP_INFO RipInfo;
}

struct _DEBUG_EVENT {
  /* this+0x0 */ unsigned long dwDebugEventCode;
  /* this+0x4 */ unsigned long dwProcessId;
  /* this+0x8 */ unsigned long dwThreadId;
  /* this+0xc */ union _DEBUG_EVENT::<unnamed-type-u> u;
}

struct PACKET_ZC_COMPASS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ int type;
  /* this+0xa */ int xPos;
  /* this+0xe */ int yPos;
  /* this+0x12 */ unsigned char id;
  /* this+0x13 */ unsigned long color;
}

struct _SECURITY_DESCRIPTOR_RELATIVE {
  /* this+0x0 */ unsigned char Revision;
  /* this+0x1 */ unsigned char Sbz1;
  /* this+0x2 */ unsigned short Control;
  /* this+0x4 */ unsigned long Owner;
  /* this+0x8 */ unsigned long Group;
  /* this+0xc */ unsigned long Sacl;
  /* this+0x10 */ unsigned long Dacl;
}

struct tagTIME_STRUCT {
  /* this+0x0 */ unsigned short hour;
  /* this+0x2 */ unsigned short minute;
  /* this+0x4 */ unsigned short second;
}

struct PACKET_AC_ACCEPT_LOGIN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ int AuthCode;
  /* this+0x8 */ unsigned long AID;
  /* this+0xc */ unsigned long userLevel;
  /* this+0x10 */ unsigned long lastLoginIP;
  /* this+0x14 */ char[0x1a] lastLoginTime;
  /* this+0x2e */ unsigned char Sex;
}

struct PACKET_ZC_ALL_QUEST_MISSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ int count;
}

struct _FILE_STREAM_INFO {
  /* this+0x0 */ unsigned long NextEntryOffset;
  /* this+0x4 */ unsigned long StreamNameLength;
  /* this+0x8 */ union _LARGE_INTEGER StreamSize;
  /* this+0x10 */ union _LARGE_INTEGER StreamAllocationSize;
  /* this+0x18 */ wchar_t[0x1] StreamName;
}

struct PACKET_ZC_PARTY_BOOKING_NOTIFY_INSERT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct PARTY_BOOKING_AD_INFO Info;
}

struct _TOKEN_STATISTICS {
  /* this+0x0 */ struct _LUID TokenId;
  /* this+0x8 */ struct _LUID AuthenticationId;
  /* this+0x10 */ union _LARGE_INTEGER ExpirationTime;
  /* this+0x18 */ enum _TOKEN_TYPE TokenType;
  /* this+0x1c */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* this+0x20 */ unsigned long DynamicCharged;
  /* this+0x24 */ unsigned long DynamicAvailable;
  /* this+0x28 */ unsigned long GroupCount;
  /* this+0x2c */ unsigned long PrivilegeCount;
  /* this+0x30 */ struct _LUID ModifiedId;
}

struct vc_attributes::SuccessAttribute {
  /* this+0x0 */ const wchar_t * Condition;
}

struct tagMIXERLINECONTROLSA {
  /* this+0x0 */ unsigned long cbStruct;
  /* this+0x4 */ unsigned long dwLineID;
  /* this+0x8 */ unsigned long dwControlID;
  /* this+0x8 */ unsigned long dwControlType;
  /* this+0xc */ unsigned long cControls;
  /* this+0x10 */ unsigned long cbmxctrl;
  /* this+0x14 */ struct tagMIXERCONTROLA * pamxctrl;
}

struct PACKET_CZ_EXIT_ROOM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_ACK_MAIL_ADD_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Index;
  /* this+0x4 */ unsigned char result;
}

struct tagSQL_NUMERIC_STRUCT {
  /* this+0x0 */ unsigned char precision;
  /* this+0x1 */ signed char scale;
  /* this+0x2 */ unsigned char sign;
  /* this+0x3 */ unsigned char[0x10] val;
}

struct _TAPE_GET_POSITION {
  /* this+0x0 */ unsigned long Type;
  /* this+0x4 */ unsigned long Partition;
  /* this+0x8 */ union _LARGE_INTEGER Offset;
}

struct PACKET_ZC_TALKBOX_CHATCONTENTS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x50] contents;
}

struct PACKET_CZ_USE_SKILL2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short selectedLevel;
  /* this+0x4 */ unsigned short SKID;
  /* this+0x6 */ unsigned long targetID;
}

struct PACKET_ZC_ADD_ITEM_TO_CART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
  /* this+0x8 */ unsigned short ITID;
  /* this+0xa */ bool IsIdentified;
  /* this+0xb */ bool IsDamaged;
  /* this+0xc */ unsigned char refiningLevel;
  /* this+0xd */ struct EQUIPSLOTINFO slot;
}

struct PACKET_ZC_FRIENDS_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_MAIL_GET_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
}

struct _stat32i64 {
  /* this+0x0 */ unsigned int st_dev;
  /* this+0x4 */ unsigned short st_ino;
  /* this+0x6 */ unsigned short st_mode;
  /* this+0x8 */ short st_nlink;
  /* this+0xa */ short st_uid;
  /* this+0xc */ short st_gid;
  /* this+0x10 */ unsigned int st_rdev;
  /* this+0x18 */ __int64 st_size;
  /* this+0x20 */ long st_atime;
  /* this+0x24 */ long st_mtime;
  /* this+0x28 */ long st_ctime;
}

struct PACKET_CZ_REQ_SCHEDULER_CASHITEM {
  /* this+0x0 */ short PacketType;
}

struct tagMCI_GETDEVCAPS_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwReturn;
  /* this+0x8 */ unsigned long dwItem;
}

struct _wfinddata64_t {
  /* this+0x0 */ unsigned int attrib;
  /* this+0x8 */ __int64 time_create;
  /* this+0x10 */ __int64 time_access;
  /* this+0x18 */ __int64 time_write;
  /* this+0x20 */ __int64 size;
  /* this+0x28 */ wchar_t[0x104] name;
}

struct PACKET_CZ_CLOSE_SIMPLECASH_SHOP {
  /* this+0x0 */ short PacketType;
}

struct PACKET_HC_AVAILABLE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Result;
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_RECALL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct tagMOUSEHOOKSTRUCTEX {
  /* this+0x0 */ struct tagPOINT pt;
  /* this+0x8 */ struct HWND__ * hwnd;
  /* this+0xc */ unsigned int wHitTestCode;
  /* this+0x10 */ unsigned long dwExtraInfo;
  /* this+0x14 */ unsigned long mouseData;
}

struct tagMCI_LOAD_PARMSW {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ const wchar_t * lpfilename;
}

struct tagCWPSTRUCT {
  /* this+0x0 */ long lParam;
  /* this+0x4 */ unsigned int wParam;
  /* this+0x8 */ unsigned int message;
  /* this+0xc */ struct HWND__ * hwnd;
}

struct tagALTTABINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ int cItems;
  /* this+0x8 */ int cColumns;
  /* this+0xc */ int cRows;
  /* this+0x10 */ int iColFocus;
  /* this+0x14 */ int iRowFocus;
  /* this+0x18 */ int cxItem;
  /* this+0x1c */ int cyItem;
  /* this+0x20 */ struct tagPOINT ptStart;
}

struct _IMAGE_TLS_DIRECTORY32 {
  /* this+0x0 */ unsigned long StartAddressOfRawData;
  /* this+0x4 */ unsigned long EndAddressOfRawData;
  /* this+0x8 */ unsigned long AddressOfIndex;
  /* this+0xc */ unsigned long AddressOfCallBacks;
  /* this+0x10 */ unsigned long SizeOfZeroFill;
  /* this+0x14 */ unsigned long Characteristics;
}

struct tagEMRPOLYDRAW16 {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long cpts;
  /* this+0x1c */ struct tagPOINTS[0x1] apts;
  /* this+0x20 */ unsigned char[0x1] abTypes;
}

struct PACKET_ZC_ACK_GUILD_MENUINTERFACE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int guildMemuFlag;
}

struct PACKET_ZC_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
}

struct PACKET_ZC_OPEN_BUYING_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char count;
}

struct _GRADIENT_RECT {
  /* this+0x0 */ unsigned long UpperLeft;
  /* this+0x4 */ unsigned long LowerRight;
}

struct PACKET_CZ_GPK_AUTH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct QOS_OBJECT_HDR {
  /* this+0x0 */ unsigned long ObjectType;
  /* this+0x4 */ unsigned long ObjectLength;
}

struct _QOS_SHAPING_RATE {
  /* this+0x0 */ struct QOS_OBJECT_HDR ObjectHdr;
  /* this+0x8 */ unsigned long ShapingRate;
}

struct _SYSTEM_MANDATORY_LABEL_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long SidStart;
}

struct _TAPE_ERASE {
  /* this+0x0 */ unsigned long Type;
  /* this+0x4 */ unsigned char Immediate;
}

struct HRSRC__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_CART_EQUIPMENT_ITEMLIST3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_CZ_DEATH_QUESTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Qanswer;
}

struct _ACL_SIZE_INFORMATION {
  /* this+0x0 */ unsigned long AceCount;
  /* this+0x4 */ unsigned long AclBytesInUse;
  /* this+0x8 */ unsigned long AclBytesFree;
}

struct PACKET_CZ_CREATE_CHATROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short size;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ char[0x8] passwd;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_CART_ITEMLIST_NORMAL_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct tagEMRPOLYPOLYLINE16 {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long nPolys;
  /* this+0x1c */ unsigned long cpts;
  /* this+0x20 */ unsigned long[0x1] aPolyCounts;
  /* this+0x24 */ struct tagPOINTS[0x1] apts;
}

struct mmtime_tag::<unnamed-type-u>::<unnamed-type-smpte> {
  /* this+0x0 */ unsigned char hour;
  /* this+0x1 */ unsigned char min;
  /* this+0x2 */ unsigned char sec;
  /* this+0x3 */ unsigned char frame;
  /* this+0x4 */ unsigned char fps;
  /* this+0x5 */ unsigned char dummy;
  /* this+0x6 */ unsigned char[0x2] pad;
}

struct mmtime_tag::<unnamed-type-u>::<unnamed-type-midi> {
  /* this+0x0 */ unsigned long songptrpos;
}

struct GUILD_SKILL_INFO {
  /* this+0x0 */ unsigned short SKID;
}

struct PACKET_ZC_SKILLINFO_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_ZC_STARSKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] mapName;
  /* this+0x1a */ int monsterID;
  /* this+0x1e */ unsigned char star;
  /* this+0x1f */ unsigned char result;
}

struct _LARGE_INTEGER::<unnamed-type-u> {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ long HighPart;
}

struct _TRANSACTIONMANAGER_LOG_INFORMATION {
  /* this+0x0 */ struct _GUID LogIdentity;
}

struct PACKET_CZ_REQ_GIVE_MANNER_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long otherAID;
  /* this+0x6 */ unsigned char type;
  /* this+0x7 */ short point;
}

struct tagDRVCONFIGINFO {
  /* this+0x0 */ unsigned long dwDCISize;
  /* this+0x4 */ const wchar_t * lpszDCISectionName;
  /* this+0x8 */ const wchar_t * lpszDCIAliasName;
}

struct PACKET_CZ_ACK_SELECT_DEALTYPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ unsigned char type;
}

struct PACKET_ZC_PARTY_RECRUIT_ACK_REGISTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
}

struct tagHW_PROFILE_INFOA {
  /* this+0x0 */ unsigned long dwDockInfo;
  /* this+0x4 */ char[0x27] szHwProfileGuid;
  /* this+0x2b */ char[0x50] szHwProfileName;
}

struct _ENUM_SERVICE_STATUS_PROCESSW {
  /* this+0x0 */ wchar_t * lpServiceName;
  /* this+0x4 */ wchar_t * lpDisplayName;
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatusProcess;
}

struct tagKERNINGPAIR {
  /* this+0x0 */ unsigned short wFirst;
  /* this+0x2 */ unsigned short wSecond;
  /* this+0x4 */ int iKernAmount;
}

struct PACKET_CH_SELECT_CHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char CharNum;
}

struct PPM_IDLE_ACCOUNTING_EX {
  /* this+0x0 */ unsigned long StateCount;
  /* this+0x4 */ unsigned long TotalTransitions;
  /* this+0x8 */ unsigned long ResetCount;
  /* this+0x10 */ unsigned __int64 StartTime;
  /* this+0x18 */ struct PPM_IDLE_STATE_ACCOUNTING_EX[0x1] State;
}

struct _ENLISTMENT_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID EnlistmentId;
  /* this+0x10 */ struct _GUID TransactionId;
  /* this+0x20 */ struct _GUID ResourceManagerId;
}

struct _ULARGE_INTEGER::<unnamed-type-u> {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ unsigned long HighPart;
}

union _ULARGE_INTEGER {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ unsigned long HighPart;
  /* this+0x0 */ struct _ULARGE_INTEGER::<unnamed-type-u> u;
  /* this+0x0 */ unsigned __int64 QuadPart;
}

struct PROCESSOR_IDLESTATE_POLICY {
  /* this+0x0 */ unsigned short Revision;
  /* this+0x2 */ union PROCESSOR_IDLESTATE_POLICY::<unnamed-type-Flags> Flags;
  /* this+0x4 */ unsigned long PolicyCount;
  /* this+0x8 */ struct PROCESSOR_IDLESTATE_INFO[0x3] Policy;
}

struct tagEMRCREATEPEN {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihPen;
  /* this+0xc */ struct tagLOGPEN lopn;
}

struct PACKET_CZ_AUCTION_ADD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NowMoney;
  /* this+0x6 */ unsigned long MaxMoney;
  /* this+0xa */ short DeleteHour;
}

struct PACKET_ZC_REASSEMBLY_AUTH {
  /* this+0x0 */ short PacketType;
}

union _KEY_EVENT_RECORD::<unnamed-type-uChar> {
  /* this+0x0 */ wchar_t UnicodeChar;
  /* this+0x0 */ char AsciiChar;
}

struct _KEY_EVENT_RECORD {
  /* this+0x0 */ int bKeyDown;
  /* this+0x4 */ unsigned short wRepeatCount;
  /* this+0x6 */ unsigned short wVirtualKeyCode;
  /* this+0x8 */ unsigned short wVirtualScanCode;
  /* this+0xa */ union _KEY_EVENT_RECORD::<unnamed-type-uChar> uChar;
  /* this+0xc */ unsigned long dwControlKeyState;
}

union tagSQL_INTERVAL_STRUCT::<unnamed-type-intval> {
  /* this+0x0 */ struct tagSQL_YEAR_MONTH year_month;
  /* this+0x0 */ struct tagSQL_DAY_SECOND day_second;
}

struct tagSQL_INTERVAL_STRUCT {
  /* this+0x0 */ enum SQLINTERVAL interval_type;
  /* this+0x4 */ short interval_sign;
  /* this+0x8 */ union tagSQL_INTERVAL_STRUCT::<unnamed-type-intval> intval;
}

struct tagSQL_YEAR_MONTH {
  /* this+0x0 */ unsigned long year;
  /* this+0x4 */ unsigned long month;
}

struct tagSQL_DAY_SECOND {
  /* this+0x0 */ unsigned long day;
  /* this+0x4 */ unsigned long hour;
  /* this+0x8 */ unsigned long minute;
  /* this+0xc */ unsigned long second;
  /* this+0x10 */ unsigned long fraction;
}

struct SERVER_ADDR {
  /* this+0x0 */ unsigned long ip;
  /* this+0x4 */ short port;
  /* this+0x6 */ unsigned char[0x14] name;
  /* this+0x1a */ unsigned short usercount;
  /* this+0x1c */ unsigned short state;
  /* this+0x1e */ unsigned short property;
}

struct tagGLYPHSET {
  /* this+0x0 */ unsigned long cbThis;
  /* this+0x4 */ unsigned long flAccel;
  /* this+0x8 */ unsigned long cGlyphsSupported;
  /* this+0xc */ unsigned long cRanges;
  /* this+0x10 */ struct tagWCRANGE[0x1] ranges;
}

struct PACKET_ZC_COUPLESTATUS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long statusType;
  /* this+0x6 */ int defaultStatus;
  /* this+0xa */ int plusStatus;
}

struct PACKET_CZ_INPUT_EDITDLGSTR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long NAID;
}

struct PACKET_ZC_PERSONAL_INFOMATION2::DETAIL_EXP_INFO {
  /* this+0x0 */ unsigned char InfoType;
  /* this+0x1 */ int Exp;
  /* this+0x5 */ int Death;
  /* this+0x9 */ int Drop;
}

struct PACKET_ZC_PERSONAL_INFOMATION2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ int Exp;
  /* this+0x8 */ int Death;
  /* this+0xc */ int Drop;
}

struct _QUERY_SERVICE_LOCK_STATUSA {
  /* this+0x0 */ unsigned long fIsLocked;
  /* this+0x4 */ char * lpLockOwner;
  /* this+0x8 */ unsigned long dwLockDuration;
}

struct MEMBER_POSITION_ID_NAME_INFO {
  /* this+0x0 */ int positionID;
  /* this+0x4 */ char[0x18] posName;
}

struct GUILD_BAN_INFO {
  /* this+0x0 */ char[0x18] charname;
  /* this+0x18 */ char[0x18] account;
  /* this+0x30 */ char[0x28] reason;
}

struct _CONSOLE_HISTORY_INFO {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned int HistoryBufferSize;
  /* this+0x8 */ unsigned int NumberOfHistoryBuffers;
  /* this+0xc */ unsigned long dwFlags;
}

struct HMIDISTRM__ {
  /* this+0x0 */ int unused;
}

struct _OBJECTID {
  /* this+0x0 */ struct _GUID Lineage;
  /* this+0x10 */ unsigned long Uniquifier;
}

struct _SYSTEM_ALARM_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long SidStart;
}

struct IMAGE_LOAD_CONFIG_DIRECTORY64 {
  /* this+0x0 */ unsigned long Size;
  /* this+0x4 */ unsigned long TimeDateStamp;
  /* this+0x8 */ unsigned short MajorVersion;
  /* this+0xa */ unsigned short MinorVersion;
  /* this+0xc */ unsigned long GlobalFlagsClear;
  /* this+0x10 */ unsigned long GlobalFlagsSet;
  /* this+0x14 */ unsigned long CriticalSectionDefaultTimeout;
  /* this+0x18 */ unsigned __int64 DeCommitFreeBlockThreshold;
  /* this+0x20 */ unsigned __int64 DeCommitTotalFreeThreshold;
  /* this+0x28 */ unsigned __int64 LockPrefixTable;
  /* this+0x30 */ unsigned __int64 MaximumAllocationSize;
  /* this+0x38 */ unsigned __int64 VirtualMemoryThreshold;
  /* this+0x40 */ unsigned __int64 ProcessAffinityMask;
  /* this+0x48 */ unsigned long ProcessHeapFlags;
  /* this+0x4c */ unsigned short CSDVersion;
  /* this+0x4e */ unsigned short Reserved1;
  /* this+0x50 */ unsigned __int64 EditList;
  /* this+0x58 */ unsigned __int64 SecurityCookie;
  /* this+0x60 */ unsigned __int64 SEHandlerTable;
  /* this+0x68 */ unsigned __int64 SEHandlerCount;
}

struct tagEMRSETPIXELV {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _POINTL ptlPixel;
  /* this+0x10 */ unsigned long crColor;
}

struct PACKET_CZ_REMOVE_AID_SSO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long aid;
}

struct _NT_TIB64 {
  /* this+0x0 */ unsigned __int64 ExceptionList;
  /* this+0x8 */ unsigned __int64 StackBase;
  /* this+0x10 */ unsigned __int64 StackLimit;
  /* this+0x18 */ unsigned __int64 SubSystemTib;
  /* this+0x20 */ unsigned __int64 FiberData;
  /* this+0x20 */ unsigned long Version;
  /* this+0x28 */ unsigned __int64 ArbitraryUserPointer;
  /* this+0x30 */ unsigned __int64 Self;
}

struct _UMS_SCHEDULER_STARTUP_INFO {
  /* this+0x0 */ unsigned long UmsVersion;
  /* this+0x4 */ void * CompletionList;
  /* this+0x8 */ function  * SchedulerProc;
  /* this+0xc */ void * SchedulerParam;
}

struct _ABCFLOAT {
  /* this+0x0 */ float abcfA;
  /* this+0x4 */ float abcfB;
  /* this+0x8 */ float abcfC;
}

struct tagLOGCOLORSPACEA {
  /* this+0x0 */ unsigned long lcsSignature;
  /* this+0x4 */ unsigned long lcsVersion;
  /* this+0x8 */ unsigned long lcsSize;
  /* this+0xc */ long lcsCSType;
  /* this+0x10 */ long lcsIntent;
  /* this+0x14 */ struct tagICEXYZTRIPLE lcsEndpoints;
  /* this+0x38 */ unsigned long lcsGammaRed;
  /* this+0x3c */ unsigned long lcsGammaGreen;
  /* this+0x40 */ unsigned long lcsGammaBlue;
  /* this+0x44 */ char[0x104] lcsFilename;
}

struct PACKET_ZC_ACCEPT_ENTER2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long startTime;
  /* this+0x6 */ unsigned char[0x3] PosDir;
  /* this+0x9 */ unsigned char xSize;
  /* this+0xa */ unsigned char ySize;
  /* this+0xb */ short font;
}

struct PACKET_ZC_ACK_ADDITEM_TO_CART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_CH_DELETE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x4] SecondPWIdx;
}

struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned __int64 BeginAddress;
  /* this+0x8 */ unsigned __int64 EndAddress;
  /* this+0x10 */ unsigned __int64 ExceptionHandler;
  /* this+0x18 */ unsigned __int64 HandlerData;
  /* this+0x20 */ unsigned __int64 PrologEndAddress;
}

struct _CONSOLE_CURSOR_INFO {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ int bVisible;
}

struct _TAPE_GET_MEDIA_PARAMETERS {
  /* this+0x0 */ union _LARGE_INTEGER Capacity;
  /* this+0x8 */ union _LARGE_INTEGER Remaining;
  /* this+0x10 */ unsigned long BlockSize;
  /* this+0x14 */ unsigned long PartitionCount;
  /* this+0x18 */ unsigned char WriteProtected;
}

struct _TOKEN_ELEVATION {
  /* this+0x0 */ unsigned long TokenIsElevated;
}

struct CZ_PURCHASE_ITEM {
  /* this+0x0 */ short count;
  /* this+0x2 */ unsigned short ITID;
}

struct PACKET_CH_REQ_CHANGE_CHARNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwGID;
}

struct _SERVICE_DESCRIPTIONA {
  /* this+0x0 */ char * lpDescription;
}

struct PACKET_CZ_ALCHEMIST_RANK {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_BATTLE_NOTI_START_STEP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long BFNO;
  /* this+0x6 */ short Result;
}

struct PACKET_CZ_IRMAIL_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct IRMAILID MailID;
}

struct tagRAWINPUTDEVICELIST {
  /* this+0x0 */ void * hDevice;
  /* this+0x4 */ unsigned long dwType;
}

struct PACKET_CZ_CHANGE_DIRECTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short headDir;
  /* this+0x4 */ unsigned char dir;
}

struct _XSTATE_CONFIGURATION {
  /* this+0x0 */ unsigned __int64 EnabledFeatures;
  /* this+0x8 */ unsigned long Size;
    /* this+0x10 */ struct _XSTATE_FEATURE[0x40] Features;
}

struct PACKET_ZC_FRIENDS_STATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ bool State;
}

struct PACKET_CAH_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long[0x4] AuthData;
}

struct PACKET_ZC_SKILL_POSTDELAY_LIST2::tagSkillPostDelay {
  /* this+0x0 */ unsigned short SKID;
  /* this+0x2 */ unsigned long MaxDelayTM;
  /* this+0x6 */ unsigned long DelayTM;
}

struct PACKET_ZC_SKILL_POSTDELAY_LIST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CZ_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int AuthCode;
  /* this+0xe */ unsigned long clientTime;
  /* this+0x12 */ unsigned char Sex;
}

struct tagBITMAP {
  /* this+0x0 */ long bmType;
  /* this+0x4 */ long bmWidth;
  /* this+0x8 */ long bmHeight;
  /* this+0xc */ long bmWidthBytes;
  /* this+0x10 */ unsigned short bmPlanes;
  /* this+0x12 */ unsigned short bmBitsPixel;
  /* this+0x14 */ void * bmBits;
}

struct tagDIBSECTION {
  /* this+0x0 */ struct tagBITMAP dsBm;
  /* this+0x18 */ struct tagBITMAPINFOHEADER dsBmih;
  /* this+0x40 */ unsigned long[0x3] dsBitfields;
  /* this+0x4c */ void * dshSection;
  /* this+0x50 */ unsigned long dsOffset;
}

struct PACKET_CZ_PARTY_BOOKING_REQ_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short[0x6] Job;
}

struct PACKET_ZC_NOTIFY_STANDENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char objecttype;
  /* this+0x3 */ unsigned long GID;
  /* this+0x7 */ short speed;
  /* this+0x9 */ short bodyState;
  /* this+0xb */ short healthState;
  /* this+0xd */ short effectState;
  /* this+0xf */ short job;
  /* this+0x11 */ short head;
  /* this+0x13 */ short weapon;
  /* this+0x15 */ short accessory;
  /* this+0x17 */ short shield;
  /* this+0x19 */ short accessory2;
  /* this+0x1b */ short accessory3;
  /* this+0x1d */ short headpalette;
  /* this+0x1f */ short bodypalette;
  /* this+0x21 */ short headDir;
  /* this+0x23 */ unsigned long GUID;
  /* this+0x27 */ short GEmblemVer;
  /* this+0x29 */ short honor;
  /* this+0x2b */ short virtue;
  /* this+0x2d */ bool isPKModeON;
  /* this+0x2e */ unsigned char sex;
  /* this+0x2f */ unsigned char[0x3] PosDir;
  /* this+0x32 */ unsigned char xSize;
  /* this+0x33 */ unsigned char ySize;
  /* this+0x34 */ unsigned char state;
  /* this+0x35 */ short clevel;
}

union _WOW64_LDT_ENTRY::<unnamed-type-HighWord> {
  /* this+0x0 */ struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> Bytes;
  /* this+0x0 */ struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> Bits;
}

struct _WOW64_LDT_ENTRY {
  /* this+0x0 */ unsigned short LimitLow;
  /* this+0x2 */ unsigned short BaseLow;
  /* this+0x4 */ union _WOW64_LDT_ENTRY::<unnamed-type-HighWord> HighWord;
}

struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> {
  /* this+0x0 */ unsigned char BaseMid;
  /* this+0x1 */ unsigned char Flags1;
  /* this+0x2 */ unsigned char Flags2;
  /* this+0x3 */ unsigned char BaseHi;
}

struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> {
                    }

struct _WIN32_STREAM_ID {
  /* this+0x0 */ unsigned long dwStreamId;
  /* this+0x4 */ unsigned long dwStreamAttributes;
  /* this+0x8 */ union _LARGE_INTEGER Size;
  /* this+0x10 */ unsigned long dwStreamNameSize;
  /* this+0x14 */ wchar_t[0x1] cStreamName;
}

struct _TOKEN_OWNER {
  /* this+0x0 */ void * Owner;
}

struct SET_POWER_SETTING_VALUE {
  /* this+0x0 */ unsigned long Version;
  /* this+0x4 */ struct _GUID Guid;
  /* this+0x14 */ enum SYSTEM_POWER_CONDITION PowerCondition;
  /* this+0x18 */ unsigned long DataLength;
  /* this+0x1c */ unsigned char[0x1] Data;
}

struct PACKET_ZC_NOTIFY_CLAN_CONNECTINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short NumConnect;
  /* this+0x4 */ unsigned short NumTotal;
}

struct _EVENTSFORLOGFILE {
  /* this+0x0 */ unsigned long ulSize;
  /* this+0x4 */ wchar_t[0x100] szLogicalLogFile;
  /* this+0x204 */ unsigned long ulNumRecords;
  /* this+0x208 */ struct _EVENTLOGRECORD[0x0] pEventLogRecords;
}

struct PACKET_CH_ENTER_CHECKBOT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_AUCTION_RESULT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char Result;
}

struct PACKET_ZC_START_COLLECTION {
  /* this+0x0 */ short PacketType;
}

struct _SUPPORTED_OS_INFO {
  /* this+0x0 */ unsigned short OsCount;
  /* this+0x2 */ unsigned short MitigationExist;
  /* this+0x4 */ unsigned short[0x4] OsList;
}

struct PACKET_CZ_CHANGE_EFFECTSTATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int EffectState;
}

struct PACKET_ZC_MSG_STATE_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ bool state;
}

struct PACKET_ZC_MAKABLEITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_PLAY_NPC_BGM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] Bgm;
}

struct tMIXERCONTROLDETAILS_BOOLEAN {
  /* this+0x0 */ long fValue;
}

struct PACKET_CZ_SKILL_SELECT_RESPONSE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum PACKET_ZC_SKILL_SELECT_REQUEST::enumWHY why;
  /* this+0x6 */ unsigned short SKID;
}

struct PACKET_ZC_SPIRITS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short num;
}

struct _IMAGE_RESOURCE_DIRECTORY_STRING {
  /* this+0x0 */ unsigned short Length;
  /* this+0x2 */ char[0x1] NameString;
}

struct sockaddr_dl {
  /* this+0x0 */ unsigned short sdl_family;
  /* this+0x2 */ unsigned char[0x8] sdl_data;
  /* this+0xa */ unsigned char[0x4] sdl_zero;
}

struct PACKET_CA_PT_EKEY_FAIL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short errorCode;
}

struct _ACCESS_DENIED_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long Flags;
  /* this+0xc */ struct _GUID ObjectType;
  /* this+0x1c */ struct _GUID InheritedObjectType;
  /* this+0x2c */ unsigned long SidStart;
}

struct _IMAGE_DOS_HEADER {
  /* this+0x0 */ unsigned short e_magic;
  /* this+0x2 */ unsigned short e_cblp;
  /* this+0x4 */ unsigned short e_cp;
  /* this+0x6 */ unsigned short e_crlc;
  /* this+0x8 */ unsigned short e_cparhdr;
  /* this+0xa */ unsigned short e_minalloc;
  /* this+0xc */ unsigned short e_maxalloc;
  /* this+0xe */ unsigned short e_ss;
  /* this+0x10 */ unsigned short e_sp;
  /* this+0x12 */ unsigned short e_csum;
  /* this+0x14 */ unsigned short e_ip;
  /* this+0x16 */ unsigned short e_cs;
  /* this+0x18 */ unsigned short e_lfarlc;
  /* this+0x1a */ unsigned short e_ovno;
  /* this+0x1c */ unsigned short[0x4] e_res;
  /* this+0x24 */ unsigned short e_oemid;
  /* this+0x26 */ unsigned short e_oeminfo;
  /* this+0x28 */ unsigned short[0xa] e_res2;
  /* this+0x3c */ long e_lfanew;
}

struct _FILE_DISPOSITION_INFO {
  /* this+0x0 */ unsigned char DeleteFileA;
}

struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header;
      /* this+0x14 */ unsigned int value;
}

struct PACKET_ZC_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ char[0x18] guildName;
}

struct PACKET_ZC_ITEM_PICKUP_ACK_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ unsigned short count;
  /* this+0x6 */ unsigned short ITID;
  /* this+0x8 */ bool IsIdentified;
  /* this+0x9 */ bool IsDamaged;
  /* this+0xa */ unsigned char refiningLevel;
  /* this+0xb */ struct EQUIPSLOTINFO slot;
  /* this+0x13 */ unsigned long location;
  /* this+0x17 */ unsigned char type;
  /* this+0x18 */ unsigned char result;
  /* this+0x19 */ long HireExpireDate;
  /* this+0x1d */ unsigned short bindOnEquipType;
}

struct _TP_TIMER {
}

struct PACKET_ZC_NOTIFY_UPDATECHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short Style;
  /* this+0x8 */ unsigned char Item;
}

struct PACKET_ZC_CART_NORMAL_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_STATE_CHANGE3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short bodyState;
  /* this+0x8 */ short healthState;
  /* this+0xa */ int effectState;
  /* this+0xe */ bool isPKModeON;
}

struct PACKET_ZC_NPCACK_SERVERMOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x10] mapName;
  /* this+0x12 */ short xPos;
  /* this+0x14 */ short yPos;
  /* this+0x16 */ struct ZSERVER_ADDR addr;
}

struct PACKET_ZC_ACK_CHANGE_GUILD_POSITIONINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_OPEN_SEARCH_STORE_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short OpenType;
  /* this+0x4 */ unsigned char SearchCntMax;
}

struct tagLASTINPUTINFO {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwTime;
}

struct PACKET_ZC_EXEC_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct MAIL_OPEN {
  /* this+0x0 */ unsigned long MailID;
  /* this+0x4 */ char[0x28] HEADER;
  /* this+0x2c */ char[0x18] FromName;
  /* this+0x44 */ long DeleteTime;
  /* this+0x48 */ unsigned long Money;
  /* this+0x4c */ int count;
  /* this+0x50 */ unsigned short ITID;
  /* this+0x52 */ unsigned short Type;
  /* this+0x54 */ bool IsIdentified;
  /* this+0x55 */ bool IsDamaged;
  /* this+0x56 */ unsigned char refiningLevel;
  /* this+0x57 */ struct EQUIPSLOTINFO slot;
}

struct PACKET_ZC_WHISPER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ char[0x18] sender;
  /* this+0x1c */ int isAdmin;
}

struct PACKET_ZC_BATTLE_JOIN_DISABLE_STATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ bool Enable;
}

struct PACKET_CZ_REQUEST_ACT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long targetGID;
  /* this+0x6 */ unsigned char action;
}

struct PACKET_ZC_SETTING_WHISPER_STATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
  /* this+0x3 */ unsigned char result;
}

struct tagIMEMENUITEMINFOW {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned int fType;
  /* this+0x8 */ unsigned int fState;
  /* this+0xc */ unsigned int wID;
  /* this+0x10 */ struct HBITMAP__ * hbmpChecked;
  /* this+0x14 */ struct HBITMAP__ * hbmpUnchecked;
  /* this+0x18 */ unsigned long dwItemData;
  /* this+0x1c */ wchar_t[0x50] szString;
  /* this+0xbc */ struct HBITMAP__ * hbmpItem;
}

struct PACKET_CZ_SELECT_PETEGG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
}

struct PACKET_CZ_IRMAIL_SEND::tagItem {
  /* this+0x0 */ short index;
  /* this+0x2 */ short id;
  /* this+0x4 */ short cnt;
}

struct PACKET_CZ_IRMAIL_SEND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ char[0x18] ReceiveName;
  /* this+0x1c */ char[0x28] Title;
  /* this+0x44 */ int Zeny;
  /* this+0x48 */ struct PACKET_CZ_IRMAIL_SEND::tagItem[0xa] Item;
}

struct tagCOLORADJUSTMENT {
  /* this+0x0 */ unsigned short caSize;
  /* this+0x2 */ unsigned short caFlags;
  /* this+0x4 */ unsigned short caIlluminantIndex;
  /* this+0x6 */ unsigned short caRedGamma;
  /* this+0x8 */ unsigned short caGreenGamma;
  /* this+0xa */ unsigned short caBlueGamma;
  /* this+0xc */ unsigned short caReferenceBlack;
  /* this+0xe */ unsigned short caReferenceWhite;
  /* this+0x10 */ short caContrast;
  /* this+0x12 */ short caBrightness;
  /* this+0x14 */ short caColorfulness;
  /* this+0x16 */ short caRedGreenTint;
}

struct tagEMRSETCOLORADJUSTMENT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct tagCOLORADJUSTMENT ColorAdjustment;
}

struct _FPO_DATA {
  /* this+0x0 */ unsigned long ulOffStart;
  /* this+0x4 */ unsigned long cbProcSize;
  /* this+0x8 */ unsigned long cdwLocals;
  /* this+0xc */ unsigned short cdwParams;
            }

struct tagNONCLIENTMETRICSW {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ int iBorderWidth;
  /* this+0x8 */ int iScrollWidth;
  /* this+0xc */ int iScrollHeight;
  /* this+0x10 */ int iCaptionWidth;
  /* this+0x14 */ int iCaptionHeight;
  /* this+0x18 */ struct tagLOGFONTW lfCaptionFont;
  /* this+0x74 */ int iSmCaptionWidth;
  /* this+0x78 */ int iSmCaptionHeight;
  /* this+0x7c */ struct tagLOGFONTW lfSmCaptionFont;
  /* this+0xd8 */ int iMenuWidth;
  /* this+0xdc */ int iMenuHeight;
  /* this+0xe0 */ struct tagLOGFONTW lfMenuFont;
  /* this+0x13c */ struct tagLOGFONTW lfStatusFont;
  /* this+0x198 */ struct tagLOGFONTW lfMessageFont;
  /* this+0x1f4 */ int iPaddedBorderWidth;
}

struct PACKET_HC_REFUSE_SELECTCHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ErrorCode;
}

struct PACKET_ZC_NOTIFY_NEWENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ short effectState;
  /* this+0xe */ short job;
  /* this+0x10 */ short head;
  /* this+0x12 */ short weapon;
  /* this+0x14 */ short accessory;
  /* this+0x16 */ short shield;
  /* this+0x18 */ short accessory2;
  /* this+0x1a */ short accessory3;
  /* this+0x1c */ short headpalette;
  /* this+0x1e */ short bodypalette;
  /* this+0x20 */ short headDir;
  /* this+0x22 */ unsigned long GUID;
  /* this+0x26 */ short GEmblemVer;
  /* this+0x28 */ short honor;
  /* this+0x2a */ short virtue;
  /* this+0x2c */ bool isPKModeON;
  /* this+0x2d */ unsigned char sex;
  /* this+0x2e */ unsigned char[0x3] PosDir;
  /* this+0x31 */ unsigned char xSize;
  /* this+0x32 */ unsigned char ySize;
  /* this+0x33 */ short clevel;
}

struct PACKET_CZ_PKMODE_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ bool isTurnOn;
}

struct PACKET_CZ_PARTY_BOOKING_REQ_REGISTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct PARTY_BOOKING_DETAIL RegisterInfo;
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct _TOKEN_ACCESS_INFORMATION {
  /* this+0x0 */ struct _SID_AND_ATTRIBUTES_HASH * SidHash;
  /* this+0x4 */ struct _SID_AND_ATTRIBUTES_HASH * RestrictedSidHash;
  /* this+0x8 */ struct _TOKEN_PRIVILEGES * Privileges;
  /* this+0xc */ struct _LUID AuthenticationId;
  /* this+0x14 */ enum _TOKEN_TYPE TokenType;
  /* this+0x18 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* this+0x1c */ struct _TOKEN_MANDATORY_POLICY MandatoryPolicy;
  /* this+0x20 */ unsigned long Flags;
}

struct tagEMRSETVIEWPORTORGEX {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _POINTL ptlOrigin;
}

struct PACKET_ZC_GUILD_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int GDID;
  /* this+0x6 */ int level;
  /* this+0xa */ int userNum;
  /* this+0xe */ int maxUserNum;
  /* this+0x12 */ int userAverageLevel;
  /* this+0x16 */ int exp;
  /* this+0x1a */ int maxExp;
  /* this+0x1e */ int point;
  /* this+0x22 */ int honor;
  /* this+0x26 */ int virtue;
  /* this+0x2a */ int emblemVersion;
  /* this+0x2e */ char[0x18] guildname;
  /* this+0x46 */ char[0x18] masterName;
  /* this+0x5e */ char[0x10] manageLand;
}

struct PVPINFO {
  /* this+0x0 */ int WinPoint;
  /* this+0x4 */ int LosePoint;
  /* this+0x8 */ int Point;
}

struct PACKET_ZC_ACK_PVPPOINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ struct PVPINFO PVP;
}

struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
  /* this+0x0 */ unsigned long Selector;
  /* this+0x4 */ struct _WOW64_LDT_ENTRY Descriptor;
}

struct _SERVICE_TABLE_ENTRYA {
  /* this+0x0 */ char * lpServiceName;
  /* this+0x4 */ function  * lpServiceProc;
}

struct PACKET_ZC_ACK_ITEMCOMPOSITION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short equipIndex;
  /* this+0x4 */ short cardIndex;
  /* this+0x6 */ unsigned char result;
}

struct PACKET_CZ_TAEKWON_RANK {
  /* this+0x0 */ short PacketType;
}

struct _MENU_EVENT_RECORD {
  /* this+0x0 */ unsigned int dwCommandId;
}

struct PACKET_ZC_ACTION_FAILURE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short errorCode;
}

struct _RGNDATA {
  /* this+0x0 */ struct _RGNDATAHEADER rdh;
  /* this+0x20 */ char[0x1] Buffer;
}

struct _REMOTE_NAME_INFOA {
  /* this+0x0 */ char * lpUniversalName;
  /* this+0x4 */ char * lpConnectionName;
  /* this+0x8 */ char * lpRemainingPath;
}

struct PACKET_CZ_REMEMBER_WARPPOINT {
  /* this+0x0 */ short PacketType;
}

struct _TRANSACTION_NOTIFICATION {
  /* this+0x0 */ void * TransactionKey;
  /* this+0x4 */ unsigned long TransactionNotification;
  /* this+0x8 */ union _LARGE_INTEGER TmVirtualClock;
  /* this+0x10 */ unsigned long ArgumentLength;
}

struct tagFILTERKEYS {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long iWaitMSec;
  /* this+0xc */ unsigned long iDelayMSec;
  /* this+0x10 */ unsigned long iRepeatMSec;
  /* this+0x14 */ unsigned long iBounceMSec;
}

struct PACKET_ZC_INFO_REMAINTIME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Type;
  /* this+0x6 */ int RemainTime;
}

struct PACKET_ZC_NOTIFY_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long GID;
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_BODY2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct tagEMRSETTEXTCOLOR {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long crColor;
}

struct _DOCINFOW {
  /* this+0x0 */ int cbSize;
  /* this+0x4 */ const wchar_t * lpszDocName;
  /* this+0x8 */ const wchar_t * lpszOutput;
  /* this+0xc */ const wchar_t * lpszDatatype;
  /* this+0x10 */ unsigned long fwType;
}

struct PACKET_ZC_NOTIFY_STANDENTRY2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ short effectState;
  /* this+0xe */ short job;
  /* this+0x10 */ short head;
  /* this+0x12 */ int weapon;
  /* this+0x16 */ short accessory;
  /* this+0x18 */ short accessory2;
  /* this+0x1a */ short accessory3;
  /* this+0x1c */ short headpalette;
  /* this+0x1e */ short bodypalette;
  /* this+0x20 */ short headDir;
  /* this+0x22 */ unsigned long GUID;
  /* this+0x26 */ short GEmblemVer;
  /* this+0x28 */ short honor;
  /* this+0x2a */ short virtue;
  /* this+0x2c */ bool isPKModeON;
  /* this+0x2d */ unsigned char sex;
  /* this+0x2e */ unsigned char[0x3] PosDir;
  /* this+0x31 */ unsigned char xSize;
  /* this+0x32 */ unsigned char ySize;
  /* this+0x33 */ unsigned char state;
  /* this+0x34 */ short clevel;
}

struct PACKET_ZC_LESSEFFECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int isLess;
}

struct HMIDI__ {
  /* this+0x0 */ int unused;
}

struct HMMIO__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_ISVR_DISCONNECT {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_NORMAL_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct _XSAVE_AREA {
  /* this+0x0 */ struct _XSAVE_FORMAT LegacyState;
  /* this+0x200 */ struct _XSAVE_AREA_HEADER Header;
}

struct tagDELETEITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType;
  /* this+0x4 */ unsigned int CtlID;
  /* this+0x8 */ unsigned int itemID;
  /* this+0xc */ struct HWND__ * hwndItem;
  /* this+0x10 */ unsigned long itemData;
}

struct PACKET_ZC_REPLY_ACK_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Result;
  /* this+0x3 */ char[0x18] EntryQueueName;
  /* this+0x1b */ char[0x18] LobbyName;
}

struct POWERBROADCAST_SETTING {
  /* this+0x0 */ struct _GUID PowerSetting;
  /* this+0x10 */ unsigned long DataLength;
  /* this+0x14 */ unsigned char[0x1] Data;
}

struct PACKET_CZ_ACK_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ReqAID;
  /* this+0x6 */ unsigned long ReqGID;
  /* this+0xa */ int Result;
}

struct _WSANETWORKEVENTS {
  /* this+0x0 */ long lNetworkEvents;
  /* this+0x4 */ int[0xa] iErrorCode;
}

struct PACKET_ZC_ACK_ITEMIDENTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ unsigned char result;
}

struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
  /* this+0x0 */ unsigned long LogPathLength;
  /* this+0x4 */ wchar_t[0x1] LogPath;
}

struct tagMONITORINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct tagRECT rcMonitor;
  /* this+0x14 */ struct tagRECT rcWork;
  /* this+0x24 */ unsigned long dwFlags;
}

struct tagMONITORINFOEXW {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ struct tagRECT rcMonitor;
  /* this+0x14 */ struct tagRECT rcWork;
  /* this+0x24 */ unsigned long dwFlags;
  /* this+0x28 */ wchar_t[0x20] szDevice;
}

struct _SYSTEM_POWER_POLICY {
  /* this+0x0 */ unsigned long Revision;
  /* this+0x4 */ struct POWER_ACTION_POLICY PowerButton;
  /* this+0x10 */ struct POWER_ACTION_POLICY SleepButton;
  /* this+0x1c */ struct POWER_ACTION_POLICY LidClose;
  /* this+0x28 */ enum _SYSTEM_POWER_STATE LidOpenWake;
  /* this+0x2c */ unsigned long Reserved;
  /* this+0x30 */ struct POWER_ACTION_POLICY Idle;
  /* this+0x3c */ unsigned long IdleTimeout;
  /* this+0x40 */ unsigned char IdleSensitivity;
  /* this+0x41 */ unsigned char DynamicThrottle;
  /* this+0x42 */ unsigned char[0x2] Spare2;
  /* this+0x44 */ enum _SYSTEM_POWER_STATE MinSleep;
  /* this+0x48 */ enum _SYSTEM_POWER_STATE MaxSleep;
  /* this+0x4c */ enum _SYSTEM_POWER_STATE ReducedLatencySleep;
  /* this+0x50 */ unsigned long WinLogonFlags;
  /* this+0x54 */ unsigned long Spare3;
  /* this+0x58 */ unsigned long DozeS4Timeout;
  /* this+0x5c */ unsigned long BroadcastCapacityResolution;
  /* this+0x60 */ struct SYSTEM_POWER_LEVEL[0x4] DischargePolicy;
  /* this+0xc0 */ unsigned long VideoTimeout;
  /* this+0xc4 */ unsigned char VideoDimDisplay;
  /* this+0xc8 */ unsigned long[0x3] VideoReserved;
  /* this+0xd4 */ unsigned long SpindownTimeout;
  /* this+0xd8 */ unsigned char OptimizeForPower;
  /* this+0xd9 */ unsigned char FanThrottleTolerance;
  /* this+0xda */ unsigned char ForcedThrottle;
  /* this+0xdb */ unsigned char MinThrottle;
  /* this+0xdc */ struct POWER_ACTION_POLICY OverThrottled;
}

struct tagNEWTEXTMETRICW {
  /* this+0x0 */ long tmHeight;
  /* this+0x4 */ long tmAscent;
  /* this+0x8 */ long tmDescent;
  /* this+0xc */ long tmInternalLeading;
  /* this+0x10 */ long tmExternalLeading;
  /* this+0x14 */ long tmAveCharWidth;
  /* this+0x18 */ long tmMaxCharWidth;
  /* this+0x1c */ long tmWeight;
  /* this+0x20 */ long tmOverhang;
  /* this+0x24 */ long tmDigitizedAspectX;
  /* this+0x28 */ long tmDigitizedAspectY;
  /* this+0x2c */ wchar_t tmFirstChar;
  /* this+0x2e */ wchar_t tmLastChar;
  /* this+0x30 */ wchar_t tmDefaultChar;
  /* this+0x32 */ wchar_t tmBreakChar;
  /* this+0x34 */ unsigned char tmItalic;
  /* this+0x35 */ unsigned char tmUnderlined;
  /* this+0x36 */ unsigned char tmStruckOut;
  /* this+0x37 */ unsigned char tmPitchAndFamily;
  /* this+0x38 */ unsigned char tmCharSet;
  /* this+0x3c */ unsigned long ntmFlags;
  /* this+0x40 */ unsigned int ntmSizeEM;
  /* this+0x44 */ unsigned int ntmCellHeight;
  /* this+0x48 */ unsigned int ntmAvgWidth;
}

struct DISPLAYCONFIG_2DREGION {
  /* this+0x0 */ unsigned int cx;
  /* this+0x4 */ unsigned int cy;
}

struct PACKET_ZC_REPLY_REMAINTIME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Result;
  /* this+0x6 */ int ExpirationDate;
  /* this+0xa */ int RemainTime;
}

struct _IMAGE_RESOURCE_DIR_STRING_U {
  /* this+0x0 */ unsigned short Length;
  /* this+0x2 */ wchar_t[0x1] NameString;
}

struct _TRANSACTION_LIST_INFORMATION {
  /* this+0x0 */ unsigned long NumberOfTransactions;
  /* this+0x4 */ struct _TRANSACTION_LIST_ENTRY[0x1] TransactionInformation;
}

struct tagEMRMASKBLT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ long xDest;
  /* this+0x1c */ long yDest;
  /* this+0x20 */ long cxDest;
  /* this+0x24 */ long cyDest;
  /* this+0x28 */ unsigned long dwRop;
  /* this+0x2c */ long xSrc;
  /* this+0x30 */ long ySrc;
  /* this+0x34 */ struct tagXFORM xformSrc;
  /* this+0x4c */ unsigned long crBkColorSrc;
  /* this+0x50 */ unsigned long iUsageSrc;
  /* this+0x54 */ unsigned long offBmiSrc;
  /* this+0x58 */ unsigned long cbBmiSrc;
  /* this+0x5c */ unsigned long offBitsSrc;
  /* this+0x60 */ unsigned long cbBitsSrc;
  /* this+0x64 */ long xMask;
  /* this+0x68 */ long yMask;
  /* this+0x6c */ unsigned long iUsageMask;
  /* this+0x70 */ unsigned long offBmiMask;
  /* this+0x74 */ unsigned long cbBmiMask;
  /* this+0x78 */ unsigned long offBitsMask;
  /* this+0x7c */ unsigned long cbBitsMask;
}

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
  /* this+0x0 */ unsigned long dwReason;
  /* this+0x4 */ wchar_t * pszComment;
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
}

struct HMIXER__ {
  /* this+0x0 */ int unused;
}

struct FLASHWINFO {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ struct HWND__ * hwnd;
  /* this+0x8 */ unsigned long dwFlags;
  /* this+0xc */ unsigned int uCount;
  /* this+0x10 */ unsigned long dwTimeout;
}

struct _APPLICATIONLAUNCH_SETTING_VALUE {
  /* this+0x0 */ union _LARGE_INTEGER ActivationTime;
  /* this+0x8 */ unsigned long Flags;
  /* this+0xc */ unsigned long ButtonInstanceID;
}

struct PACKET_ZC_GPK_DYNCODE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_ACK_CLAN_LEAVE {
  /* this+0x0 */ short PacketType;
}

struct _SERVICE_SID_INFO {
  /* this+0x0 */ unsigned long dwServiceSidType;
}

struct PACKET_ZC_PARTY_BOOKING_ACK_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
}

struct PACKET_CZ_REQ_WEAR_EQUIP_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned long wearLocation;
}

struct BATTERY_REPORTING_SCALE {
  /* this+0x0 */ unsigned long Granularity;
  /* this+0x4 */ unsigned long Capacity;
}

struct PPM_IDLE_ACCOUNTING {
  /* this+0x0 */ unsigned long StateCount;
  /* this+0x4 */ unsigned long TotalTransitions;
  /* this+0x8 */ unsigned long ResetCount;
  /* this+0x10 */ unsigned __int64 StartTime;
  /* this+0x18 */ struct PPM_IDLE_STATE_ACCOUNTING[0x1] State;
}

struct PACKET_ZC_ALCHEMIST_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Point;
  /* this+0x6 */ int TotalPoint;
}

struct PACKET_ZC_ROLE_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long role;
  /* this+0x6 */ char[0x18] name;
}

struct _TOKEN_MANDATORY_POLICY {
  /* this+0x0 */ unsigned long Policy;
}

struct tagEMRPIXELFORMAT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct tagPIXELFORMATDESCRIPTOR pfd;
}

struct _complex {
  /* this+0x0 */ double x;
  /* this+0x8 */ double y;
}

struct PACKET_ZC_STOPMOVE_FORCE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
}

struct _SYSTEM_AUDIT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long SidStart;
}

union _REASON_CONTEXT::<unnamed-type-Reason> {
  /* this+0x0 */ struct _REASON_CONTEXT::<unnamed-type-Reason>::<unnamed-type-Detailed> Detailed;
  /* this+0x0 */ wchar_t * SimpleReasonString;
}

struct _REASON_CONTEXT::<unnamed-type-Reason>::<unnamed-type-Detailed> {
  /* this+0x0 */ struct HINSTANCE__ * LocalizedReasonModule;
  /* this+0x4 */ unsigned long LocalizedReasonId;
  /* this+0x8 */ unsigned long ReasonStringCount;
  /* this+0xc */ wchar_t * * ReasonStrings;
}

struct tagMCI_OVLY_RECT_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ struct tagRECT rc;
}

struct PACKET_ZC_CANCEL_BATTLE_FIELD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long BFNO;
  /* this+0x6 */ short Result;
}

struct SERVICE_STATUS_HANDLE__ {
  /* this+0x0 */ int unused;
}

struct tagMCI_RECORD_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwFrom;
  /* this+0x8 */ unsigned long dwTo;
}

struct tagMENUINFO {
  /* this+0x0 */ unsigned long cbSize;
  /* this+0x4 */ unsigned long fMask;
  /* this+0x8 */ unsigned long dwStyle;
  /* this+0xc */ unsigned int cyMax;
  /* this+0x10 */ struct HBRUSH__ * hbrBack;
  /* this+0x14 */ unsigned long dwContextHelpID;
  /* this+0x18 */ unsigned long dwMenuData;
}

struct PACKET_CH_DELETE_CHAR2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x32] key;
}

struct _SERVICE_TIMECHANGE_INFO {
  /* this+0x0 */ union _LARGE_INTEGER liNewTime;
  /* this+0x8 */ union _LARGE_INTEGER liOldTime;
}

struct _ICONINFO {
  /* this+0x0 */ int fIcon;
  /* this+0x4 */ unsigned long xHotspot;
  /* this+0x8 */ unsigned long yHotspot;
  /* this+0xc */ struct HBITMAP__ * hbmMask;
  /* this+0x10 */ struct HBITMAP__ * hbmColor;
}

struct tagMCI_VD_PLAY_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwFrom;
  /* this+0x8 */ unsigned long dwTo;
  /* this+0xc */ unsigned long dwSpeed;
}

struct _OBJECT_TYPE_LIST {
  /* this+0x0 */ unsigned short Level;
  /* this+0x2 */ unsigned short Sbz;
  /* this+0x4 */ struct _GUID * ObjectType;
}

struct _SE_ACCESS_REQUEST {
  /* this+0x0 */ unsigned long Size;
  /* this+0x4 */ struct _SE_SECURITY_DESCRIPTOR * SeSecurityDescriptor;
  /* this+0x8 */ unsigned long DesiredAccess;
  /* this+0xc */ unsigned long PreviouslyGrantedAccess;
  /* this+0x10 */ void * PrincipalSelfSid;
  /* this+0x14 */ struct _GENERIC_MAPPING * GenericMapping;
  /* this+0x18 */ unsigned long ObjectTypeListCount;
  /* this+0x1c */ struct _OBJECT_TYPE_LIST * ObjectTypeList;
}

union tagMIXERCONTROLA::<unnamed-type-Bounds> {
  /* this+0x0 */ long lMinimum;
  /* this+0x4 */ long lMaximum;
  /* this+0x0 */ unsigned long dwMinimum;
  /* this+0x4 */ unsigned long dwMaximum;
  /* this+0x0 */ unsigned long[0x6] dwReserved;
}

union tagMIXERCONTROLA::<unnamed-type-Metrics> {
  /* this+0x0 */ unsigned long cSteps;
  /* this+0x0 */ unsigned long cbCustomData;
  /* this+0x0 */ unsigned long[0x6] dwReserved;
}

struct _PROCESS_INFORMATION {
  /* this+0x0 */ void * hProcess;
  /* this+0x4 */ void * hThread;
  /* this+0x8 */ unsigned long dwProcessId;
  /* this+0xc */ unsigned long dwThreadId;
}

struct _exception {
  /* this+0x0 */ int type;
  /* this+0x4 */ char * name;
  /* this+0x8 */ double arg1;
  /* this+0x10 */ double arg2;
  /* this+0x18 */ double retval;
}

struct PACKET_CZ_SHIFT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] CharacterName;
}

struct HWAVE__ {
  /* this+0x0 */ int unused;
}

struct PACKET_CZ_COMMAND_PET {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char cSub;
}

struct PACKET_CH_ENTER2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int AuthCode;
  /* this+0xa */ unsigned long userLevel;
  /* this+0xe */ unsigned short clientType;
  /* this+0x10 */ unsigned char Sex;
  /* this+0x11 */ char[0x10] macData;
  /* this+0x21 */ int iAccountSID;
}

struct PACKET_ZC_MER_PROPERTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short atk;
  /* this+0x4 */ short Matk;
  /* this+0x6 */ short hit;
  /* this+0x8 */ short critical;
  /* this+0xa */ short def;
  /* this+0xc */ short Mdef;
  /* this+0xe */ short flee;
  /* this+0x10 */ short aspd;
  /* this+0x12 */ char[0x18] name;
  /* this+0x2a */ short level;
  /* this+0x2c */ short hp;
  /* this+0x2e */ short maxHP;
  /* this+0x30 */ short sp;
  /* this+0x32 */ short maxSP;
  /* this+0x34 */ long ExpireDate;
  /* this+0x38 */ short faith;
  /* this+0x3a */ int toal_call_num;
  /* this+0x3e */ int approval_monster_kill_counter;
}

struct PACKET_ZC_SKILL_ENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long creatorAID;
  /* this+0xa */ short xPos;
  /* this+0xc */ short yPos;
  /* this+0xe */ unsigned char job;
  /* this+0xf */ bool isVisible;
}

struct _cpinfo {
  /* this+0x0 */ unsigned int MaxCharSize;
  /* this+0x4 */ unsigned char[0x2] DefaultChar;
  /* this+0x6 */ unsigned char[0xc] LeadByte;
}

struct SELL_ITEM {
  /* this+0x0 */ short index;
  /* this+0x2 */ int price;
  /* this+0x6 */ int overchargeprice;
}

struct RELATED_GUILD_INFO {
  /* this+0x0 */ int relation;
  /* this+0x4 */ int GDID;
  /* this+0x8 */ char[0x18] guildname;
}

struct PACKET_ZC_ADD_RELATED_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct RELATED_GUILD_INFO Info;
}

struct PACKET_CZ_REQ_ACCOUNTNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct SHELLHOOKINFO {
  /* this+0x0 */ struct HWND__ * hwnd;
  /* this+0x4 */ struct tagRECT rc;
}

struct PACKET_ZC_ALL_QUEST_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ int questCount;
}

struct PACKET_ZC_MSG_VALUE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short msg;
  /* this+0x4 */ int value;
}

struct PACKET_CZ_SETTING_WHISPER_PC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
  /* this+0x1a */ unsigned char type;
}

struct _PSFEATURE_OUTPUT {
  /* this+0x0 */ int bPageIndependent;
  /* this+0x4 */ int bSetPageDevice;
}

struct tagMIDIINCAPSW {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned long dwSupport;
}

struct PACKET_ZC_PARTY_RECRUIT_SUB_FILTERLINGLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x18] CharName;
}

struct PACKET_CZ_REQ_EMOTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
}

struct PACKET_ZC_DIVORCE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
}

struct PACKET_CZ_AGREE_STARPLACE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char which;
}

struct PACKET_ZC_POSITION_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_BAN_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_GAME_GUARD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long[0x4] AuthData;
}

struct _SYSTEM_AUDIT_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long Flags;
  /* this+0xc */ struct _GUID ObjectType;
  /* this+0x1c */ struct _GUID InheritedObjectType;
  /* this+0x2c */ unsigned long SidStart;
}

struct netent {
  /* this+0x0 */ char * n_name;
  /* this+0x4 */ char * * n_aliases;
  /* this+0x8 */ short n_addrtype;
  /* this+0xc */ unsigned long n_net;
}

struct PACKET_CZ_AUCTION_ADD_CANCEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AuctionID;
}

struct PACKET_CZ_PARTY_RECRUIT_SUB_FILTERLINGLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
}

struct PACKET_CZ_REQUEST_MOVE2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x3] dest;
}

struct __vc_attributes::immediatebindAttribute {
}

struct __vc_attributes::inAttribute {
}

struct __vc_attributes::publicAttribute {
}

struct __vc_attributes::size_isAttribute {
  /* this+0x0 */ const char * expression;
}

struct __vc_attributes::exportAttribute {
}

struct __vc_attributes::controlAttribute {
}

struct __vc_attributes::helpstringcontextAttribute {
  /* this+0x0 */ int contextid;
}

struct __vc_attributes::rangeAttribute {
  /* this+0x0 */ int low_val;
  /* this+0x4 */ int high_val;
}

struct __vc_attributes::displaybindAttribute {
}

struct __vc_attributes::hookAttribute {
  /* this+0x0 */ const char * event;
  /* this+0x4 */ const char * source;
  /* this+0x8 */ const char * handler;
  /* this+0xc */ const char * receiver;
}

struct __vc_attributes::uidefaultAttribute {
}

struct __vc_attributes::defaultbindAttribute {
}

struct __vc_attributes::outAttribute {
}

struct __vc_attributes::defaultvalueAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::pointer_defaultAttribute {
  /* this+0x0 */ enum __vc_attributes::pointer_defaultAttribute::type_e type;
}

struct __vc_attributes::uuidAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::threadingAttribute {
  /* this+0x0 */ enum __vc_attributes::threadingAttribute::threading_e value;
}

struct __vc_attributes::localAttribute {
}

struct __vc_attributes::idAttribute {
  /* this+0x0 */ int id_num;
}

struct __vc_attributes::nonbrowsableAttribute {
}

struct __vc_attributes::importlibAttribute {
  /* this+0x0 */ const char * tlb_file;
}

struct __vc_attributes::call_asAttribute {
  /* this+0x0 */ void * local_proc;
}

struct __vc_attributes::dispinterfaceAttribute {
}

struct __vc_attributes::dualAttribute {
}

struct __vc_attributes::switch_typeAttribute {
  /* this+0x0 */ const char * switch_type_specifier;
}

struct __vc_attributes::idl_moduleAttribute {
  /* this+0x0 */ const char * name;
  /* this+0x4 */ const char * dllname;
  /* this+0x8 */ const char * version;
  /* this+0xc */ const char * uuid;
  /* this+0x10 */ const char * helpstring;
  /* this+0x14 */ int helpstringcontext;
  /* this+0x18 */ int helpcontext;
  /* this+0x1c */ bool hidden;
  /* this+0x1d */ bool restricted;
}

struct __vc_attributes::coclassAttribute {
}

struct __vc_attributes::defaultAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::requesteditAttribute {
}

struct __vc_attributes::providerAttribute {
  /* this+0x0 */ const char * name;
  /* this+0x4 */ const char * uuid;
  /* this+0x8 */ int cookies;
}

struct __vc_attributes::max_isAttribute {
  /* this+0x0 */ const char * expression;
}

struct __vc_attributes::importAttribute {
  /* this+0x0 */ const char * idl_file;
}

struct __vc_attributes::satypeAttribute {
  /* this+0x0 */ const char * type;
}

struct __vc_attributes::propgetAttribute {
}

struct __vc_attributes::propputAttribute {
}

struct __vc_attributes::event_receiverAttribute {
  /* this+0x0 */ enum __vc_attributes::event_receiverAttribute::type_e type;
  /* this+0x4 */ bool layout_dependent;
}

struct __vc_attributes::async_uuidAttribute {
  /* this+0x0 */ const char * uuid;
}

struct __vc_attributes::idl_quoteAttribute {
  /* this+0x0 */ const char * text;
}

struct __vc_attributes::usesgetlasterrorAttribute {
}

struct __vc_attributes::unhookAttribute {
  /* this+0x0 */ const char * event;
  /* this+0x4 */ const char * source;
  /* this+0x8 */ const char * handler;
  /* this+0xc */ const char * receiver;
}

struct __vc_attributes::nonextensibleAttribute {
}

struct __vc_attributes::objectAttribute {
}

struct __vc_attributes::aggregatableAttribute {
  /* this+0x0 */ enum __vc_attributes::aggregatableAttribute::type_e type;
}

struct __vc_attributes::iid_isAttribute {
  /* this+0x0 */ const char * limited_expression;
}

struct __vc_attributes::progidAttribute {
  /* this+0x0 */ const char * name;
}

struct __vc_attributes::readonlyAttribute {
}

struct __vc_attributes::wire_marshalAttribute {
  /* this+0x0 */ const char * wire_type;
}

struct __vc_attributes::pragmaAttribute {
  /* this+0x0 */ const char * token_sequence;
}

struct __vc_attributes::propputrefAttribute {
}

struct __vc_attributes::vi_progidAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::odlAttribute {
}

struct __vc_attributes::bindableAttribute {
}

struct __vc_attributes::oleautomationAttribute {
}

struct __vc_attributes::helpstringdllAttribute {
  /* this+0x0 */ const char * dllname;
}

struct __vc_attributes::defaultcollelemAttribute {
}

struct __vc_attributes::retvalAttribute {
}

struct __vc_attributes::length_isAttribute {
  /* this+0x0 */ const char * expression;
}

struct __vc_attributes::atl::db_commandAttribute {
  /* this+0x0 */ const char * command;
  /* this+0x4 */ const char * name;
  /* this+0x8 */ const char * source_name;
  /* this+0xc */ const char * hresult;
  /* this+0x10 */ const char * bindings;
  /* this+0x14 */ const char * bulk_fetch;
}

struct __vc_attributes::atl::db_sourceAttribute {
  /* this+0x0 */ const char * source;
  /* this+0x4 */ const char * name;
  /* this+0x8 */ const char * hresult;
}

struct __vc_attributes::atl::db_columnAttribute {
  /* this+0x0 */ const char * ordinal;
  /* this+0x4 */ const char * dbtype;
  /* this+0x8 */ const char * precision;
  /* this+0xc */ const char * scale;
  /* this+0x10 */ const char * status;
  /* this+0x14 */ const char * length;
}

struct __vc_attributes::atl::soap_namespaceAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::atl::db_tableAttribute {
  /* this+0x0 */ const char * table;
  /* this+0x4 */ const char * name;
  /* this+0x8 */ const char * source_name;
  /* this+0xc */ const char * hresult;
  /* this+0x10 */ const char * bulk_fetch;
}

struct __vc_attributes::atl::implements_categoryAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::atl::aggregatesAttribute {
  /* this+0x0 */ const char * clsid;
}

struct __vc_attributes::atl::soap_headerAttribute {
  /* this+0x0 */ const char * value;
  /* this+0x4 */ bool required;
  /* this+0x5 */ bool in;
  /* this+0x6 */ bool out;
}

struct __vc_attributes::atl::requires_categoryAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::atl::perf_objectAttribute {
  /* this+0x0 */ int name_res;
  /* this+0x4 */ int help_res;
  /* this+0x8 */ const char * namestring;
  /* this+0xc */ const char * helpstring;
  /* this+0x10 */ int detail;
  /* this+0x14 */ bool no_instances;
  /* this+0x18 */ const char * class_;
  /* this+0x1c */ int maxinstnamelen;
}

struct __vc_attributes::atl::rdxAttribute {
  /* this+0x0 */ const char * key;
  /* this+0x4 */ const char * valuename;
  /* this+0x8 */ const char * regtype;
}

struct __vc_attributes::atl::perfmonAttribute {
  /* this+0x0 */ const char * name;
  /* this+0x4 */ bool register;
}

struct __vc_attributes::atl::db_accessorAttribute {
  /* this+0x0 */ int id;
  /* this+0x4 */ bool auto_;
}

struct __vc_attributes::atl::soap_handlerAttribute {
  /* this+0x0 */ const char * name;
  /* this+0x4 */ const char * namespace;
  /* this+0x8 */ const char * protocol;
  /* this+0xc */ const char * style;
  /* this+0x10 */ const char * use;
}

struct __vc_attributes::atl::support_error_infoAttribute {
  /* this+0x0 */ const char * error_interface;
}

struct __vc_attributes::atl::tag_nameAttribute {
  /* this+0x0 */ const char * name;
  /* this+0x4 */ const char * parse_func;
}

struct __vc_attributes::atl::com_interface_entryAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::atl::db_paramAttribute {
  /* this+0x0 */ const char * ordinal;
  /* this+0x4 */ const char * paramtype;
  /* this+0x8 */ const char * dbtype;
  /* this+0xc */ const char * precision;
  /* this+0x10 */ const char * scale;
  /* this+0x14 */ const char * status;
  /* this+0x18 */ const char * length;
}

struct __vc_attributes::atl::perf_counterAttribute {
  /* this+0x0 */ const char * namestring;
  /* this+0x4 */ const char * helpstring;
  /* this+0x8 */ int name_res;
  /* this+0xc */ int help_res;
  /* this+0x10 */ int countertype;
  /* this+0x14 */ int defscale;
  /* this+0x18 */ bool default_counter;
  /* this+0x1c */ int detail;
  /* this+0x20 */ int max_counter_size;
  /* this+0x24 */ const char * countertype_string;
}

struct __vc_attributes::atl::soap_methodAttribute {
  /* this+0x0 */ const char * name;
}

struct __vc_attributes::atl::request_handlerAttribute {
  /* this+0x0 */ const char * name;
  /* this+0x4 */ const char * sdl;
}

struct __vc_attributes::atl::synchronizeAttribute {
}

struct __vc_attributes::atl::registration_scriptAttribute {
  /* this+0x0 */ const char * script;
}

struct __vc_attributes::no_injected_textAttribute {
  /* this+0x0 */ bool value;
}

struct __vc_attributes::caseAttribute {
  /* this+0x0 */ int value;
}

struct __vc_attributes::helpstringAttribute {
  /* this+0x0 */ const char * help_text_string;
}

struct __vc_attributes::entryAttribute {
  /* this+0x0 */ const char * entry_id;
}

struct __vc_attributes::defaultvtableAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::emitidlAttribute {
          /* this+0x0 */ int value;
  /* this+0x4 */ bool defaultimports;
}

struct __vc_attributes::stringAttribute {
}

struct __vc_attributes::varargAttribute {
}

struct __vc_attributes::event_sourceAttribute {
  /* this+0x0 */ enum __vc_attributes::event_sourceAttribute::type_e type;
  /* this+0x4 */ enum __vc_attributes::event_sourceAttribute::optimize_e optimize;
  /* this+0x8 */ bool decorate;
}

struct __vc_attributes::includeAttribute {
  /* this+0x0 */ const char * include_file;
}

struct __vc_attributes::implementsAttribute {
  /* this+0x0 */ const char * interfaces;
  /* this+0x4 */ const char * dispinterfaces;
}

struct __vc_attributes::moduleAttribute {
  /* this+0x0 */ enum __vc_attributes::moduleAttribute::type_e type;
  /* this+0x4 */ const char * name;
  /* this+0x8 */ const char * version;
  /* this+0xc */ const char * uuid;
  /* this+0x10 */ int lcid;
  /* this+0x14 */ bool control;
  /* this+0x18 */ const char * helpstring;
  /* this+0x1c */ int helpstringcontext;
  /* this+0x20 */ const char * helpstringdll;
  /* this+0x24 */ const char * helpfile;
  /* this+0x28 */ int helpcontext;
  /* this+0x2c */ bool hidden;
  /* this+0x2d */ bool restricted;
  /* this+0x30 */ const char * custom;
  /* this+0x34 */ const char * resource_name;
}

struct __vc_attributes::last_isAttribute {
  /* this+0x0 */ const char * expression;
}

struct __vc_attributes::ptrAttribute {
}

struct __vc_attributes::helper_attributes::v1_earlyAttribute {
}

struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute {
                                  /* this+0x0 */ int ValidOn;
  /* this+0x4 */ bool AllowMultiple;
}

struct __vc_attributes::helper_attributes::requires_valueAttribute {
}

struct __vc_attributes::helper_attributes::as_stringAttribute {
}

struct __vc_attributes::helper_attributes::usageAttribute {
  /* this+0x0 */ unsigned int value;
}

struct __vc_attributes::helper_attributes::multi_valueAttribute {
}

struct __vc_attributes::helper_attributes::repeatableAttribute {
}

struct __vc_attributes::helper_attributes::notify_atlprovAttribute {
}

struct __vc_attributes::helper_attributes::attributeAttribute {
                                  /* this+0x0 */ int ValidOn;
  /* this+0x4 */ bool AllowMultiple;
  /* this+0x5 */ bool Inherited;
}

struct __vc_attributes::helper_attributes::v1_alttypeAttribute {
  /* this+0x0 */ enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
}

struct __vc_attributes::helper_attributes::process_earlyAttribute {
}

struct __vc_attributes::helper_attributes::help_stringAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::helper_attributes::v1_nameAttribute {
  /* this+0x0 */ const char * name;
}

struct __vc_attributes::helper_attributes::default_valueAttribute {
  /* this+0x0 */ void * value;
}

struct __vc_attributes::first_isAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::noncreatableAttribute {
}

struct __vc_attributes::appobjectAttribute {
}

struct __vc_attributes::restrictedAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::importidlAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::cpp_quoteAttribute {
  /* this+0x0 */ const char * string;
}

struct __vc_attributes::v1_enumAttribute {
}

struct __vc_attributes::refAttribute {
}

struct __vc_attributes::licensedAttribute {
}

struct __vc_attributes::lcidAttribute {
}

struct __vc_attributes::versionAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::helpcontextAttribute {
  /* this+0x0 */ const char * helpcontext_value;
}

struct __vc_attributes::helpfileAttribute {
  /* this+0x0 */ const char * filename;
}

struct __vc_attributes::sourceAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::transmit_asAttribute {
  /* this+0x0 */ const char * xmit_type;
}

struct __vc_attributes::hiddenAttribute {
}

struct __vc_attributes::library_blockAttribute {
}

struct __vc_attributes::customAttribute {
  /* this+0x0 */ char * value;
}

struct __vc_attributes::switch_isAttribute {
  /* this+0x0 */ const char * limited_expression;
}

struct __vc_attributes::ms_unionAttribute {
}

struct __vc_attributes::uniqueAttribute {
}

struct __vc_attributes::includelibAttribute {
  /* this+0x0 */ const char * value;
}

struct __vc_attributes::optionalAttribute {
}

struct vc_attributes::PostRangeAttribute {
  /* this+0x0 */ unsigned int Deref;
  /* this+0x4 */ const char * MinVal;
  /* this+0x8 */ const char * MaxVal;
}

struct vc_attributes::PreAttribute {
  /* this+0x0 */ unsigned int Deref;
  /* this+0x4 */ enum vc_attributes::YesNoMaybe Valid;
  /* this+0x8 */ enum vc_attributes::YesNoMaybe Null;
  /* this+0xc */ enum vc_attributes::YesNoMaybe Tainted;
  /* this+0x10 */ enum vc_attributes::AccessType Access;
  /* this+0x14 */ unsigned int ValidElementsConst;
  /* this+0x18 */ unsigned int ValidBytesConst;
  /* this+0x1c */ const wchar_t * ValidElements;
  /* this+0x20 */ const wchar_t * ValidBytes;
  /* this+0x24 */ const wchar_t * ValidElementsLength;
  /* this+0x28 */ const wchar_t * ValidBytesLength;
  /* this+0x2c */ unsigned int WritableElementsConst;
  /* this+0x30 */ unsigned int WritableBytesConst;
  /* this+0x34 */ const wchar_t * WritableElements;
  /* this+0x38 */ const wchar_t * WritableBytes;
  /* this+0x3c */ const wchar_t * WritableElementsLength;
  /* this+0x40 */ const wchar_t * WritableBytesLength;
  /* this+0x44 */ unsigned int ElementSizeConst;
  /* this+0x48 */ const wchar_t * ElementSize;
  /* this+0x4c */ enum vc_attributes::YesNoMaybe NullTerminated;
  /* this+0x50 */ const wchar_t * Condition;
}

struct vc_attributes::InvalidCheckAttribute {
  /* this+0x0 */ long Value;
}

struct vc_attributes::PostAttribute {
  /* this+0x0 */ unsigned int Deref;
  /* this+0x4 */ enum vc_attributes::YesNoMaybe Valid;
  /* this+0x8 */ enum vc_attributes::YesNoMaybe Null;
  /* this+0xc */ enum vc_attributes::YesNoMaybe Tainted;
  /* this+0x10 */ enum vc_attributes::AccessType Access;
  /* this+0x14 */ unsigned int ValidElementsConst;
  /* this+0x18 */ unsigned int ValidBytesConst;
  /* this+0x1c */ const wchar_t * ValidElements;
  /* this+0x20 */ const wchar_t * ValidBytes;
  /* this+0x24 */ const wchar_t * ValidElementsLength;
  /* this+0x28 */ const wchar_t * ValidBytesLength;
  /* this+0x2c */ unsigned int WritableElementsConst;
  /* this+0x30 */ unsigned int WritableBytesConst;
  /* this+0x34 */ const wchar_t * WritableElements;
  /* this+0x38 */ const wchar_t * WritableBytes;
  /* this+0x3c */ const wchar_t * WritableElementsLength;
  /* this+0x40 */ const wchar_t * WritableBytesLength;
  /* this+0x44 */ unsigned int ElementSizeConst;
  /* this+0x48 */ const wchar_t * ElementSize;
  /* this+0x4c */ enum vc_attributes::YesNoMaybe NullTerminated;
  /* this+0x50 */ enum vc_attributes::YesNoMaybe MustCheck;
  /* this+0x54 */ const wchar_t * Condition;
}

struct vc_attributes::FormatStringAttribute {
  /* this+0x0 */ const wchar_t * Style;
  /* this+0x4 */ const wchar_t * UnformattedAlternative;
}

struct vc_attributes::PostBoundAttribute {
  /* this+0x0 */ unsigned int Deref;
}

struct vc_attributes::PreRangeAttribute {
  /* this+0x0 */ unsigned int Deref;
  /* this+0x4 */ const char * MinVal;
  /* this+0x8 */ const char * MaxVal;
}

struct PACKET_CZ_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_WHISPER_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct tagEMRGDICOMMENT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long cbData;
  /* this+0xc */ unsigned char[0x1] Data;
}

struct PACKET_CZ_CANCEL_MERGE_ITEM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_ACK_WEAPONREFINE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int msg;
  /* this+0x6 */ unsigned short ITID;
}

struct PACKET_ZC_PARTY_RECRUIT_REFUSE_VOLUNTEER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Index;
}

struct tagCURSORSHAPE {
  /* this+0x0 */ int xHotSpot;
  /* this+0x4 */ int yHotSpot;
  /* this+0x8 */ int cx;
  /* this+0xc */ int cy;
  /* this+0x10 */ int cbWidth;
  /* this+0x14 */ unsigned char Planes;
  /* this+0x15 */ unsigned char BitsPixel;
}

struct PACKET_CZ_DORIDORI {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_PARTY_CONFIG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ bool bRefuseJoinMsg;
}

struct PACKET_ZC_DESTROY_ROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long roomID;
}

struct PACKET_ZC_DISAPPEAR_BUYING_STORE_ENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long makerAID;
}

struct PACKET_ZC_ACK_REQ_DISCONNECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short result;
}

struct REPAIRITEM_INFO {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char refiningLevel;
  /* this+0x5 */ struct EQUIPSLOTINFO slot;
}

struct provider_info {
  /* this+0x0 */ function  * pi_R0_1val;
  /* this+0x4 */ function  * pi_R0_allvals;
  /* this+0x8 */ function  * pi_R3_1val;
  /* this+0xc */ function  * pi_R3_allvals;
  /* this+0x10 */ unsigned long pi_flags;
  /* this+0x14 */ void * pi_key_context;
}

struct PACKET_ZC_CHANGE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GDID;
  /* this+0xa */ short emblemVersion;
}

struct PACKET_ZC_PC_CASH_POINT_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long CashPoint;
}

struct HCOLORSPACE__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int count;
  /* this+0x6 */ unsigned short ITID;
  /* this+0x8 */ bool IsIdentified;
  /* this+0x9 */ bool IsDamaged;
  /* this+0xa */ unsigned char refiningLevel;
  /* this+0xb */ struct EQUIPSLOTINFO slot;
}

struct PACKET_ZC_SHOWDIGIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
  /* this+0x3 */ int value;
}

struct NORMALITEM_EXTRAINFO2 {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ bool IsIdentified;
  /* this+0x6 */ short count;
  /* this+0x8 */ unsigned short WearState;
  /* this+0xa */ struct EQUIPSLOTINFO slot;
}

struct TAG_CHARACTER_BLOCK_INFO {
  /* this+0x0 */ unsigned long GID;
  /* this+0x4 */ char[0x14] szExpireDate;
}

struct PACKET_CH_CHARLIST_REQ {
  /* this+0x0 */ short PacketType;
}

struct _TAPE_CREATE_PARTITION {
  /* this+0x0 */ unsigned long Method;
  /* this+0x4 */ unsigned long Count;
  /* this+0x8 */ unsigned long Size;
}

struct PACKET_ZC_MCSTORE_NOTMOVEITEM_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct tagEMRSETCOLORSPACE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihCS;
}

struct joyinfo_tag {
  /* this+0x0 */ unsigned int wXpos;
  /* this+0x4 */ unsigned int wYpos;
  /* this+0x8 */ unsigned int wZpos;
  /* this+0xc */ unsigned int wButtons;
}

struct PACKET_ZC_SE_CASHSHOP_OPEN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int cash_point;
}

struct PACKET_CH_REQ_CHARINFO_PER_PAGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long SeqNum;
}

struct PACKET_CA_LOGIN3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x10] PasswdMD5;
  /* this+0x2e */ unsigned char clienttype;
  /* this+0x2f */ unsigned char ClientInfo;
}

struct SYSTEM_POWER_LEVEL {
  /* this+0x0 */ unsigned char Enable;
  /* this+0x1 */ unsigned char[0x3] Spare;
  /* this+0x4 */ unsigned long BatteryLevel;
  /* this+0x8 */ struct POWER_ACTION_POLICY PowerPolicy;
  /* this+0x14 */ enum _SYSTEM_POWER_STATE MinSystemState;
}

struct PACKET_ZC_SKILLINFO_UPDATE2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ int type;
  /* this+0x8 */ short level;
  /* this+0xa */ short spcost;
  /* this+0xc */ short attackRange;
  /* this+0xe */ bool upgradable;
}

struct PACKET_ZC_EL_PAR_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short var;
  /* this+0x4 */ int value;
}

struct tagSOUNDSENTRYW {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ unsigned long dwFlags;
  /* this+0x8 */ unsigned long iFSTextEffect;
  /* this+0xc */ unsigned long iFSTextEffectMSec;
  /* this+0x10 */ unsigned long iFSTextEffectColorBits;
  /* this+0x14 */ unsigned long iFSGrafEffect;
  /* this+0x18 */ unsigned long iFSGrafEffectMSec;
  /* this+0x1c */ unsigned long iFSGrafEffectColor;
  /* this+0x20 */ unsigned long iWindowsEffect;
  /* this+0x24 */ unsigned long iWindowsEffectMSec;
  /* this+0x28 */ wchar_t * lpszWindowsEffectDLL;
  /* this+0x2c */ unsigned long iWindowsEffectOrdinal;
}

struct tagMCI_SET_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwTimeFormat;
  /* this+0x8 */ unsigned long dwAudio;
}

struct HGESTUREINFO__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_NORMAL_ITEMLIST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_EXCHANGEITEM_UNDO {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_MACRO_START {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_SELECTCART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Identity;
  /* this+0x6 */ unsigned char type;
}

struct PACKET_CZ_REQ_PVPPOINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
}

struct tagENUMLOGFONTW {
  /* this+0x0 */ struct tagLOGFONTW elfLogFont;
  /* this+0x5c */ wchar_t[0x40] elfFullName;
  /* this+0xdc */ wchar_t[0x20] elfStyle;
}

struct PACKET_ZC_MEMBER_NEWENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short curcount;
  /* this+0x4 */ char[0x18] name;
}

struct PACKET_ZC_NOTIFY_ACT3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long targetGID;
  /* this+0xa */ unsigned long startTime;
  /* this+0xe */ int attackMT;
  /* this+0x12 */ int attackedMT;
  /* this+0x16 */ int damage;
  /* this+0x1a */ unsigned char IsSPDamage;
  /* this+0x1b */ short count;
  /* this+0x1d */ unsigned char action;
  /* this+0x1e */ int leftDamage;
}

struct PACKET_CZ_REQ_MAKINGITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short mkType;
  /* this+0x4 */ unsigned short id;
}

struct PACKET_CZ_ACK_GUILD_NAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GuildID;
  /* this+0x6 */ char[0x18] szGuildName;
}

struct PACKET_CZ_REQ_GUILD_MEMBER_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int GID;
}

struct PACKET_ZC_TAEKWON_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Point;
  /* this+0x6 */ int TotalPoint;
}

struct PACKET_ZC_PARTY_RECRUIT_NOTIFY_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Index;
  /* this+0x6 */ char[0x25] Notice;
}

struct _CREATE_THREAD_DEBUG_INFO {
  /* this+0x0 */ void * hThread;
  /* this+0x4 */ void * lpThreadLocalBase;
  /* this+0x8 */ function  * lpStartAddress;
}

struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
  /* this+0x0 */ unsigned __int64 pixelRate;
  /* this+0x8 */ struct DISPLAYCONFIG_RATIONAL hSyncFreq;
  /* this+0x10 */ struct DISPLAYCONFIG_RATIONAL vSyncFreq;
  /* this+0x18 */ struct DISPLAYCONFIG_2DREGION activeSize;
  /* this+0x20 */ struct DISPLAYCONFIG_2DREGION totalSize;
  /* this+0x28 */ unsigned int videoStandard;
  /* this+0x2c */ enum DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
}

struct PACKET_ZC_MERGE_ITEM_OPEN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct _TOKEN_AUDIT_POLICY {
  /* this+0x0 */ unsigned char[0x1b] PerUserPolicy;
}

union _IMAGE_SECTION_HEADER::<unnamed-type-Misc> {
  /* this+0x0 */ unsigned long PhysicalAddress;
  /* this+0x0 */ unsigned long VirtualSize;
}

struct PACKET_ZC_ACK_REQNAMEALL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x18] CName;
  /* this+0x1e */ char[0x18] PName;
  /* this+0x36 */ char[0x18] GName;
  /* this+0x4e */ char[0x18] RName;
}

struct PACKET_CZ_SE_CASHSHOP_CLOSE {
  /* this+0x0 */ short PacketType;
}

struct _CONSOLE_FONT_INFO {
  /* this+0x0 */ unsigned long nFont;
  /* this+0x4 */ struct _COORD dwFontSize;
}

struct PACKET_CZ_ACTIVE_QUEST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long questID;
  /* this+0x6 */ bool active;
}

struct _DISCDLGSTRUCTW {
  /* this+0x0 */ unsigned long cbStructure;
  /* this+0x4 */ struct HWND__ * hwndOwner;
  /* this+0x8 */ wchar_t * lpLocalName;
  /* this+0xc */ wchar_t * lpRemoteName;
  /* this+0x10 */ unsigned long dwFlags;
}

struct PACKET_CZ_HUNTINGLIST {
  /* this+0x0 */ short PacketType;
}

struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
  /* this+0x0 */ unsigned long NumberOfAssignedProcesses;
  /* this+0x4 */ unsigned long NumberOfProcessIdsInList;
  /* this+0x8 */ unsigned long[0x1] ProcessIdList;
}

struct PACKET_CZ_REQ_MAIL_RETURN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
  /* this+0x6 */ char[0x18] ReceiveName;
}

struct _FILE_NOTIFY_INFORMATION {
  /* this+0x0 */ unsigned long NextEntryOffset;
  /* this+0x4 */ unsigned long Action;
  /* this+0x8 */ unsigned long FileNameLength;
  /* this+0xc */ wchar_t[0x1] FileName;
}

struct PACKET_CZ_RECALL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] AccountName;
}

struct PACKET_ZC_PARTY_RECRUIT_ACK_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
}

struct PARTY_RECRUIT_AD_INFO {
  /* this+0x0 */ unsigned long Index;
  /* this+0x4 */ long ExpireTime;
  /* this+0x8 */ char[0x18] CharName;
  /* this+0x20 */ struct PARTY_RECRUIT_DETAIL Detail;
}

struct PACKET_ZC_PARTY_RECRUIT_NOTIFY_INSERT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct PARTY_RECRUIT_AD_INFO Info;
}

struct NOTIFY_USER_POWER_SETTING {
  /* this+0x0 */ struct _GUID Guid;
}

struct cmsghdr {
  /* this+0x0 */ unsigned long cmsg_len;
  /* this+0x4 */ int cmsg_level;
  /* this+0x8 */ int cmsg_type;
}

struct _SERVICE_TRIGGER_INFO {
  /* this+0x0 */ unsigned long cTriggers;
  /* this+0x4 */ struct _SERVICE_TRIGGER * pTriggers;
  /* this+0x8 */ unsigned char * pReserved;
}

struct PACKET_ZC_STORE_ITEMLIST_EQUIP_V2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ char[0x18] StoreName;
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_BODY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_CA_SSO_LOGIN_REQ {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long Version;
  /* this+0x8 */ unsigned char clienttype;
  /* this+0x9 */ char[0x18] ID;
  /* this+0x21 */ char[0x11] MacAddr;
  /* this+0x32 */ char[0xf] IpAddr;
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_DELETE {
  /* this+0x0 */ short PacketType;
}

struct _IMAGE_RESOURCE_DIRECTORY {
  /* this+0x0 */ unsigned long Characteristics;
  /* this+0x4 */ unsigned long TimeDateStamp;
  /* this+0x8 */ unsigned short MajorVersion;
  /* this+0xa */ unsigned short MinorVersion;
  /* this+0xc */ unsigned short NumberOfNamedEntries;
  /* this+0xe */ unsigned short NumberOfIdEntries;
}

struct PACKET_ZC_ACK_WEAR_EQUIP_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned long wearLocation;
  /* this+0x8 */ unsigned short wItemSpriteNumber;
  /* this+0xa */ unsigned char result;
}

struct PACKET_CZ_REQ_GUILD_MENUINTERFACE {
  /* this+0x0 */ short PacketType;
}

struct tagCOMPOSITIONFORM {
  /* this+0x0 */ unsigned long dwStyle;
  /* this+0x4 */ struct tagPOINT ptCurrentPos;
  /* this+0xc */ struct tagRECT rcArea;
}

struct PACKET_ZC_COMBODELAY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long delayTime;
}

struct PACKET_ZC_PETEGG_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CZ_REQ_BATTLE_STATE_MONITOR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long BFNO;
}

struct _CONTEXT_EX {
  /* this+0x0 */ struct _CONTEXT_CHUNK All;
  /* this+0x8 */ struct _CONTEXT_CHUNK Legacy;
  /* this+0x10 */ struct _CONTEXT_CHUNK XState;
}

struct PACKET_CZ_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long[0x4] AuthData;
}

struct PACKET_CZ_REQ_MERGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_ADD_EXCHANGE_ITEM2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ int count;
  /* this+0x9 */ bool IsIdentified;
  /* this+0xa */ bool IsDamaged;
  /* this+0xb */ unsigned char refiningLevel;
  /* this+0xc */ struct EQUIPSLOTINFO slot;
}

struct PACKET_ZC_HACKSH_CPX_MSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short nLength;
  /* this+0x6 */ int Ident;
}

struct _SERVICE_DESCRIPTIONW {
  /* this+0x0 */ wchar_t * lpDescription;
}

struct PACKET_CZ_REQ_ITEMCOMPOSITION_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short cardIndex;
}

struct PACKET_CZ_CONCLUDE_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQ_CARTOFF {
  /* this+0x0 */ short PacketType;
}

struct _NT_TIB32 {
  /* this+0x0 */ unsigned long ExceptionList;
  /* this+0x4 */ unsigned long StackBase;
  /* this+0x8 */ unsigned long StackLimit;
  /* this+0xc */ unsigned long SubSystemTib;
  /* this+0x10 */ unsigned long FiberData;
  /* this+0x10 */ unsigned long Version;
  /* this+0x14 */ unsigned long ArbitraryUserPointer;
  /* this+0x18 */ unsigned long Self;
}

struct _IMAGE_NT_HEADERS64 {
  /* this+0x0 */ unsigned long Signature;
  /* this+0x4 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* this+0x18 */ struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
}

struct PACKET_ZC_SE_CASHSHOP_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int cash_point;
  /* this+0x6 */ int free_point;
}

class PACKET_ZC_PREMIUM_CAMPAIGN_INFO::PREMIUM_CAMPAIGN_INFO {
  /* this+0x0 */ short Grade;
  /* this+0x2 */ float Exp;
  /* this+0x6 */ float Death;
  /* this+0xa */ float Drp;
}

struct PACKET_ZC_PREMIUM_CAMPAIGN_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short Count;
  /* this+0x6 */ unsigned long PremiumValue;
}

struct PACKET_SC_NOTIFY_BAN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ErrorCode;
}

struct PACKET_AC_REQUEST_SECOND_PASSWORD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
  /* this+0x4 */ unsigned long dwSeed;
}

struct _IMAGE_TLS_DIRECTORY64 {
  /* this+0x0 */ unsigned __int64 StartAddressOfRawData;
  /* this+0x8 */ unsigned __int64 EndAddressOfRawData;
  /* this+0x10 */ unsigned __int64 AddressOfIndex;
  /* this+0x18 */ unsigned __int64 AddressOfCallBacks;
  /* this+0x20 */ unsigned long SizeOfZeroFill;
  /* this+0x24 */ unsigned long Characteristics;
}

struct stat {
  /* this+0x0 */ unsigned int st_dev;
  /* this+0x4 */ unsigned short st_ino;
  /* this+0x6 */ unsigned short st_mode;
  /* this+0x8 */ short st_nlink;
  /* this+0xa */ short st_uid;
  /* this+0xc */ short st_gid;
  /* this+0x10 */ unsigned int st_rdev;
  /* this+0x14 */ long st_size;
  /* this+0x18 */ long st_atime;
  /* this+0x1c */ long st_mtime;
  /* this+0x20 */ long st_ctime;
}

struct PACKET_ZC_SKILL_DISAPPEAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_ACK_LEAVE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] charName;
  /* this+0x1a */ char[0x28] reasonDesc;
}

struct PACKET_CA_OTP_AUTH_REQ {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x7] OTPCode;
}

struct PACKET_ZC_READ_BOOK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long bookID;
  /* this+0x6 */ unsigned long page;
}

struct ALL_QUEST_LIST2_INFO {
  /* this+0x0 */ unsigned long questID;
  /* this+0x4 */ bool active;
  /* this+0x5 */ long quest_svrTime;
  /* this+0x9 */ long quest_endTime;
  /* this+0xd */ short hunting_count;
}

struct HWAVEOUT__ {
  /* this+0x0 */ int unused;
}

struct _FILE_END_OF_FILE_INFO {
  /* this+0x0 */ union _LARGE_INTEGER EndOfFile;
}

struct tagEMRGRADIENTFILL {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long nVer;
  /* this+0x1c */ unsigned long nTri;
  /* this+0x20 */ unsigned long ulMode;
  /* this+0x24 */ struct _TRIVERTEX[0x1] Ver;
}

struct PACKET_ZC_MEMORIALDUNGEON_NOTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum PACKET_ZC_MEMORIALDUNGEON_NOTIFY::enumTYPE Type;
  /* this+0x6 */ unsigned long EnterLimitDate;
}

struct PACKET_ZC_REQ_STORE_PASSWORD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Info;
}

struct PACKET_CH_AVAILABLE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct _RGNDATAHEADER {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ unsigned long iType;
  /* this+0x8 */ unsigned long nCount;
  /* this+0xc */ unsigned long nRgnSize;
  /* this+0x10 */ struct tagRECT rcBound;
}

struct PACKET_HC_ACK_CHARINFO_PER_PAGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct tMIXERCONTROLDETAILS {
  /* this+0x0 */ unsigned long cbStruct;
  /* this+0x4 */ unsigned long dwControlID;
  /* this+0x8 */ unsigned long cChannels;
  /* this+0xc */ struct HWND__ * hwndOwner;
  /* this+0xc */ unsigned long cMultipleItems;
  /* this+0x10 */ unsigned long cbDetails;
  /* this+0x14 */ void * paDetails;
}

struct PACKET_ZC_ACK_SCHEDULER_CASHITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short ItemCount;
  /* this+0x6 */ short TabCode;
}

struct _SE_IMPERSONATION_STATE {
  /* this+0x0 */ void * Token;
  /* this+0x4 */ unsigned char CopyOnOpen;
  /* this+0x5 */ unsigned char EffectiveOnly;
  /* this+0x8 */ enum _SECURITY_IMPERSONATION_LEVEL Level;
}

struct PACKET_CZ_REQUEST_QUIT {
  /* this+0x0 */ short PacketType;
}

struct tagEMREXTFLOODFILL {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _POINTL ptlStart;
  /* this+0x10 */ unsigned long crColor;
  /* this+0x14 */ unsigned long iMode;
}

union tagMIXERCONTROLW::<unnamed-type-Bounds> {
  /* this+0x0 */ long lMinimum;
  /* this+0x4 */ long lMaximum;
  /* this+0x0 */ unsigned long dwMinimum;
  /* this+0x4 */ unsigned long dwMaximum;
  /* this+0x0 */ unsigned long[0x6] dwReserved;
}

union tagMIXERCONTROLW::<unnamed-type-Metrics> {
  /* this+0x0 */ unsigned long cSteps;
  /* this+0x0 */ unsigned long cbCustomData;
  /* this+0x0 */ unsigned long[0x6] dwReserved;
}

struct _ACCESS_ALLOWED_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header;
  /* this+0x4 */ unsigned long Mask;
  /* this+0x8 */ unsigned long SidStart;
}

struct PACKET_ZC_ACK_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct _EVENTLOG_FULL_INFORMATION {
  /* this+0x0 */ unsigned long dwFull;
}

struct tagWAVEINCAPS2W {
  /* this+0x0 */ unsigned short wMid;
  /* this+0x2 */ unsigned short wPid;
  /* this+0x4 */ unsigned int vDriverVersion;
  /* this+0x8 */ wchar_t[0x20] szPname;
  /* this+0x48 */ unsigned long dwFormats;
  /* this+0x4c */ unsigned short wChannels;
  /* this+0x4e */ unsigned short wReserved1;
  /* this+0x50 */ struct _GUID ManufacturerGuid;
  /* this+0x60 */ struct _GUID ProductGuid;
  /* this+0x70 */ struct _GUID NameGuid;
}

struct PACKET_ZC_MSG_STATE_CHANGE2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ bool state;
  /* this+0x9 */ unsigned long RemainMS;
  /* this+0xd */ int[0x3] val;
}

struct PACKET_ZC_MVP_GETTING_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short ITID;
}

struct PACKET_CZ_PARTY_BOOKING_REQ_DELETE {
  /* this+0x0 */ short PacketType;
}

struct tagCBT_CREATEWNDA {
  /* this+0x0 */ struct tagCREATESTRUCTA * lpcs;
  /* this+0x4 */ struct HWND__ * hwndInsertAfter;
}

struct PACKET_HC_ACCEPT_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP::ITEM {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ unsigned short location;
  /* this+0x7 */ unsigned short WearState;
  /* this+0x9 */ unsigned char RefiningLevel;
  /* this+0xa */ struct EQUIPSLOTINFO slot;
  /* this+0x12 */ long HireExpireDate;
  /* this+0x16 */ unsigned short bindOnEquipType;
  /* this+0x18 */ unsigned short wItemSpriteNumber;
  /* this+0x1a */ struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP::ITEM::<unnamed-type-Flag> Flag;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP::ITEM::<unnamed-type-Flag> {
      }

struct PACKET_SC_ACK_ENCRYPTION {
  /* this+0x0 */ short PacketType;
}

struct HHOOK__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_NOTIFY_ACT_POSITION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long targetGID;
  /* this+0xa */ unsigned long startTime;
  /* this+0xe */ short xPos;
  /* this+0x10 */ short yPos;
  /* this+0x12 */ short damage;
  /* this+0x14 */ short count;
  /* this+0x16 */ unsigned char action;
}

struct PACKET_ZC_REQ_WEAR_EQUIP_ACK2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned short wearLocation;
  /* this+0x6 */ unsigned short wItemSpriteNumber;
  /* this+0x8 */ unsigned char result;
}

struct PACKET_CZ_REQ_OPENSTORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ char[0x50] storeName;
}

struct _REPARSE_GUID_DATA_BUFFER {
  /* this+0x0 */ unsigned long ReparseTag;
  /* this+0x4 */ unsigned short ReparseDataLength;
  /* this+0x6 */ unsigned short Reserved;
  /* this+0x8 */ struct _GUID ReparseGuid;
  /* this+0x18 */ struct _REPARSE_GUID_DATA_BUFFER::<unnamed-type-GenericReparseBuffer> GenericReparseBuffer;
}

struct PACKET_ZC_CASH_ITEM_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ unsigned short ITID;
}

struct PACKET_CZ_ALLY_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long otherAID;
  /* this+0x6 */ int answer;
}

struct _SECURITY_DESCRIPTOR {
  /* this+0x0 */ unsigned char Revision;
  /* this+0x1 */ unsigned char Sbz1;
  /* this+0x2 */ unsigned short Control;
  /* this+0x4 */ void * Owner;
  /* this+0x8 */ void * Group;
  /* this+0xc */ struct _ACL * Sacl;
  /* this+0x10 */ struct _ACL * Dacl;
}

struct _WIN32_FIND_STREAM_DATA {
  /* this+0x0 */ union _LARGE_INTEGER StreamSize;
  /* this+0x8 */ wchar_t[0x128] cStreamName;
}

struct PACKET_ZC_ACK_REMEMBER_WARPPOINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char errorCode;
}

struct PACKET_ZC_CART_NORMAL_ITEMLIST3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_GPK_AUTH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct _TP_WAIT {
}

struct PACKET_ZC_SHOW_IMAGE2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x40] imageName;
  /* this+0x42 */ unsigned char type;
}

struct PACKET_ZC_ITEM_PICKUP_ACK3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ unsigned short count;
  /* this+0x6 */ unsigned short ITID;
  /* this+0x8 */ bool IsIdentified;
  /* this+0x9 */ bool IsDamaged;
  /* this+0xa */ unsigned char refiningLevel;
  /* this+0xb */ struct EQUIPSLOTINFO slot;
  /* this+0x13 */ unsigned short location;
  /* this+0x15 */ unsigned char type;
  /* this+0x16 */ unsigned char result;
  /* this+0x17 */ long HireExpireDate;
  /* this+0x1b */ unsigned short bindOnEquipType;
}

struct HSPRITE__ {
  /* this+0x0 */ int unused;
}

struct tagTTPOLYCURVE {
  /* this+0x0 */ unsigned short wType;
  /* this+0x2 */ unsigned short cpfx;
  /* this+0x4 */ struct tagPOINTFX[0x1] apfx;
}

struct PACKET_CZ_SELECT_WARPPOINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ char[0x10] mapName;
}

struct PACKET_CZ_GANGSI_RANK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketSwitch;
}

struct tagHW_PROFILE_INFOW {
  /* this+0x0 */ unsigned long dwDockInfo;
  /* this+0x4 */ wchar_t[0x27] szHwProfileGuid;
  /* this+0x52 */ wchar_t[0x50] szHwProfileName;
}

struct PACKET_ZC_ENTER_ROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long roomID;
}

struct PACKET_CZ_REQ_BEFORE_WORLD_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_PAR_CHANGE_USER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned short varID;
  /* this+0x8 */ int count;
}

struct _TAPE_PREPARE {
  /* this+0x0 */ unsigned long Operation;
  /* this+0x4 */ unsigned char Immediate;
}

struct PACKET_HC_ACCEPT_DELETECHAR {
  /* this+0x0 */ short PacketType;
}

struct _CHAR_INFO {
  /* this+0x0 */ union _CHAR_INFO::<unnamed-type-Char> Char;
  /* this+0x2 */ unsigned short Attributes;
}

struct PACKET_ZC_SEARCH_STORE_INFO_FAILED {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Reason;
}

struct PACKET_AC_SHUTDOWN_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ long Time;
}

struct PETEGGITEM_INFO {
  /* this+0x0 */ short index;
}

struct PACKET_CZ_AUCTION_REQ_MY_SELL_STOP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AuctionID;
}

struct DISPLAYCONFIG_SOURCE_DEVICE_NAME {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header;
  /* this+0x14 */ wchar_t[0x20] viewGdiDeviceName;
}

struct PACKET_ZC_USER_COUNT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int count;
}

struct PACKET_CZ_REQ_ROLE_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long role;
  /* this+0x6 */ char[0x18] name;
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_VOLUNTEER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Index;
}

struct tagEMRCREATEPALETTE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihPal;
  /* this+0xc */ struct tagLOGPALETTE lgpl;
}

struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
  /* this+0x0 */ unsigned long UIRestrictionsClass;
}

struct PACKET_ZC_MAKINGARROW_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_ZC_DISPEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PPM_WMI_IDLE_STATES_EX {
  /* this+0x0 */ unsigned long Type;
  /* this+0x4 */ unsigned long Count;
  /* this+0x8 */ unsigned long TargetState;
  /* this+0xc */ unsigned long OldState;
  /* this+0x10 */ void * TargetProcessors;
  /* this+0x14 */ struct PPM_WMI_IDLE_STATE[0x1] State;
}

struct PACKET_CZ_REQ_OPEN_MEMBER_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int AID;
}

struct PPM_PERFSTATE_EVENT {
  /* this+0x0 */ unsigned long State;
  /* this+0x4 */ unsigned long Status;
  /* this+0x8 */ unsigned long Latency;
  /* this+0xc */ unsigned long Speed;
  /* this+0x10 */ unsigned long Processor;
}

struct PACKET_ZC_NOTIFY_ACT2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long targetGID;
  /* this+0xa */ unsigned long startTime;
  /* this+0xe */ int attackMT;
  /* this+0x12 */ int attackedMT;
  /* this+0x16 */ int damage;
  /* this+0x1a */ short count;
  /* this+0x1c */ unsigned char action;
  /* this+0x1d */ int leftDamage;
}

struct PACKET_HC_ACCEPT_ENTER_FRANCE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned short wExtInfo;
}

struct PACKET_ZC_ACK_REQMAKINGITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short result;
  /* this+0x4 */ unsigned short ITID;
}

struct LIST_ENTRY64 {
  /* this+0x0 */ unsigned __int64 Flink;
  /* this+0x8 */ unsigned __int64 Blink;
}

struct _REPARSE_GUID_DATA_BUFFER::<unnamed-type-GenericReparseBuffer> {
  /* this+0x0 */ unsigned char[0x1] DataBuffer;
}

struct PACKET_CZ_CHOOSE_MENU {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ unsigned char num;
}

struct PACKET_ZC_GUILD_NOTICE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3c] subject;
  /* this+0x3e */ char[0x78] notice;
}

struct PACKET_ZC_STATUS_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short statusID;
  /* this+0x4 */ unsigned char value;
}

struct PACKET_ZC_MAIL_REQ_SEND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char Result;
}

struct PACKET_ZC_ENTRY_QUEUE_INIT {
  /* this+0x0 */ short PacketType;
}

struct HPEN__ {
  /* this+0x0 */ int unused;
}

union __m128i {
  /* this+0x0 */ char[0x10] m128i_i8;
  /* this+0x0 */ short[0x8] m128i_i16;
  /* this+0x0 */ int[0x4] m128i_i32;
  /* this+0x0 */ __int64[0x2] m128i_i64;
  /* this+0x0 */ unsigned char[0x10] m128i_u8;
  /* this+0x0 */ unsigned short[0x8] m128i_u16;
  /* this+0x0 */ unsigned int[0x4] m128i_u32;
  /* this+0x0 */ unsigned __int64[0x2] m128i_u64;
}

struct PACKET_ZC_SKILL_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_NOTIFY_MOVEENTRY9 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char objecttype;
  /* this+0x5 */ unsigned long GID;
  /* this+0x9 */ short speed;
  /* this+0xb */ short bodyState;
  /* this+0xd */ short healthState;
  /* this+0xf */ int effectState;
  /* this+0x13 */ short job;
  /* this+0x15 */ short head;
  /* this+0x17 */ int weapon;
  /* this+0x1b */ short accessory;
  /* this+0x1d */ unsigned long moveStartTime;
  /* this+0x21 */ short accessory2;
  /* this+0x23 */ short accessory3;
  /* this+0x25 */ short headpalette;
  /* this+0x27 */ short bodypalette;
  /* this+0x29 */ short headDir;
  /* this+0x2b */ short robe;
  /* this+0x2d */ unsigned long GUID;
  /* this+0x31 */ short GEmblemVer;
  /* this+0x33 */ short honor;
  /* this+0x35 */ int virtue;
  /* this+0x39 */ bool isPKModeON;
  /* this+0x3a */ unsigned char sex;
  /* this+0x3b */ unsigned char[0x6] MoveData;
  /* this+0x41 */ unsigned char xSize;
  /* this+0x42 */ unsigned char ySize;
  /* this+0x43 */ short clevel;
  /* this+0x45 */ short font;
  /* this+0x47 */ int maxHP;
  /* this+0x4b */ int HP;
  /* this+0x4f */ unsigned char isBoss;
}

struct _SECURITY_QUALITY_OF_SERVICE {
  /* this+0x0 */ unsigned long Length;
  /* this+0x4 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* this+0x8 */ unsigned char ContextTrackingMode;
  /* this+0x9 */ unsigned char EffectiveOnly;
}

struct PACKET_AC_REFUSE_LOGIN_R2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int ErrorCode;
  /* this+0x6 */ char[0x14] blockDate;
}

struct PACKET_CZ_EXEC_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQUEST_CHAT_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_BODY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc> {
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz> LnSz;
  /* this+0x0 */ unsigned long TotalSize;
}

union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry> {
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function> Function;
  /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array> Array;
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function> {
  /* this+0x0 */ unsigned long PointerToLinenumber;
  /* this+0x4 */ unsigned long PointerToNextFunction;
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array> {
  /* this+0x0 */ unsigned short[0x4] Dimension;
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz> {
  /* this+0x0 */ unsigned short Linenumber;
  /* this+0x2 */ unsigned short Size;
}

struct tagDRAWITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType;
  /* this+0x4 */ unsigned int CtlID;
  /* this+0x8 */ unsigned int itemID;
  /* this+0xc */ unsigned int itemAction;
  /* this+0x10 */ unsigned int itemState;
  /* this+0x14 */ struct HWND__ * hwndItem;
  /* this+0x18 */ struct HDC__ * hDC;
  /* this+0x1c */ struct tagRECT rcItem;
  /* this+0x2c */ unsigned long itemData;
}

struct PACKET_ZC_MEMBERMGR_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_MICROSCOPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
  /* this+0x4 */ char[0x18] characterName;
  /* this+0x1c */ short job;
  /* this+0x1e */ short head;
  /* this+0x20 */ short accessory;
  /* this+0x22 */ short accessory2;
  /* this+0x24 */ short accessory3;
  /* this+0x26 */ short robe;
  /* this+0x28 */ short headpalette;
  /* this+0x2a */ short bodypalette;
  /* this+0x2c */ unsigned char sex;
}

struct PACKET_HC_ACCEPT_ENTER_BILL_EXT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ char[0x14] m_extension;
}

struct PACKET_ZC_STOPMOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
}

struct PACKET_ZC_GUILD_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_SRPACKETR2_START {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short ProtectFactor;
}

struct PACKET_ZC_MILLENNIUMSHIELD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short num;
  /* this+0x8 */ short state;
}

struct PACKET_ZC_NOTIFY_HP_TO_GROUPM_R2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int hp;
  /* this+0xa */ int maxhp;
}

struct PACKET_CZ_USE_SKILL_TOGROUND_WITHTALKBOX {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short selectedLevel;
  /* this+0x4 */ unsigned short SKID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
  /* this+0xa */ char[0x50] contents;
}

struct PACKET_CZ_RESTART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
}

struct PACKET_CZ_REQ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long OpponentGDID;
  /* this+0x6 */ int Relation;
}

struct NORMALITEM_EXTRAINFO {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ bool IsIdentified;
  /* this+0x6 */ short count;
  /* this+0x8 */ unsigned short WearState;
}

struct PACKET_ZC_NOTIFY_STANDENTRY3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ int effectState;
  /* this+0x10 */ short job;
  /* this+0x12 */ short head;
  /* this+0x14 */ int weapon;
  /* this+0x18 */ short accessory;
  /* this+0x1a */ short accessory2;
  /* this+0x1c */ short accessory3;
  /* this+0x1e */ short headpalette;
  /* this+0x20 */ short bodypalette;
  /* this+0x22 */ short headDir;
  /* this+0x24 */ unsigned long GUID;
  /* this+0x28 */ short GEmblemVer;
  /* this+0x2a */ short honor;
  /* this+0x2c */ int virtue;
  /* this+0x30 */ bool isPKModeON;
  /* this+0x31 */ unsigned char sex;
  /* this+0x32 */ unsigned char[0x3] PosDir;
  /* this+0x35 */ unsigned char xSize;
  /* this+0x36 */ unsigned char ySize;
  /* this+0x37 */ unsigned char state;
  /* this+0x38 */ short clevel;
}

struct PROCESSOR_PERFSTATE_POLICY {
  /* this+0x0 */ unsigned long Revision;
  /* this+0x4 */ unsigned char MaxThrottle;
  /* this+0x5 */ unsigned char MinThrottle;
  /* this+0x6 */ unsigned char BusyAdjThreshold;
  /* this+0x7 */ unsigned char Spare;
  /* this+0x7 */ union PROCESSOR_PERFSTATE_POLICY::<unnamed-tag>::<unnamed-type-Flags> Flags;
  /* this+0x8 */ unsigned long TimeCheck;
  /* this+0xc */ unsigned long IncreaseTime;
  /* this+0x10 */ unsigned long DecreaseTime;
  /* this+0x14 */ unsigned long IncreasePercent;
  /* this+0x18 */ unsigned long DecreasePercent;
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long UniqueID;
}

struct PACKET_CZ_AUCTION_BUY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AuctionID;
  /* this+0x6 */ unsigned long Money;
}

struct PACKET_CZ_PARTY_CONFIG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ bool bRefuseJoinMsg;
}

struct PACKET_ZC_EFST_SET_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short hEFST;
  /* this+0x8 */ unsigned long Time;
  /* this+0xc */ int Val1;
  /* this+0x10 */ int Val2;
  /* this+0x14 */ int Val3;
}

struct PACKET_CZ_USE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned long AID;
}

struct PACKET_ZC_SETTING_WHISPER_PC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
  /* this+0x3 */ unsigned char result;
}

struct PACKET_CZ_ITEMLISTWIN_RES {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ enum ItemListWinPacket::Type Type;
  /* this+0x8 */ enum ItemListWinPacket::Action Action;
}

struct PACKET_ZC_NOTIFY_FONT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short font;
}

struct PACKET_CZ_GUILD_ZENY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int zeny;
}

struct PACKET_ZC_NOTIFY_CRAZYKILLER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int isCrazyKiller;
}

struct _TAPE_GET_DRIVE_PARAMETERS {
  /* this+0x0 */ unsigned char ECC;
  /* this+0x1 */ unsigned char Compression;
  /* this+0x2 */ unsigned char DataPadding;
  /* this+0x3 */ unsigned char ReportSetmarks;
  /* this+0x4 */ unsigned long DefaultBlockSize;
  /* this+0x8 */ unsigned long MaximumBlockSize;
  /* this+0xc */ unsigned long MinimumBlockSize;
  /* this+0x10 */ unsigned long MaximumPartitionCount;
  /* this+0x14 */ unsigned long FeaturesLow;
  /* this+0x18 */ unsigned long FeaturesHigh;
  /* this+0x1c */ unsigned long EOTWarningZoneSize;
}

struct ROOM_MEMBER_DATA {
  /* this+0x0 */ unsigned long role;
  /* this+0x4 */ char[0x18] name;
}

struct PACKET_CZ_RESET {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
}

struct PACKET_ZC_CHANGESTATE_MER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char type;
  /* this+0x3 */ char state;
  /* this+0x4 */ int GID;
  /* this+0x8 */ int data;
}

struct PACKET_CZ_REQ_ENTRY_QUEUE_RANKING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] EntryQueueName;
}

struct PACKET_ZC_ACK_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char answer;
}

struct PACKET_ZC_PROPERTY_MERCE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] name;
  /* this+0x1a */ short level;
  /* this+0x1c */ short faith;
  /* this+0x1e */ short summonCount;
  /* this+0x20 */ short atk;
  /* this+0x22 */ short Matk;
  /* this+0x24 */ short hit;
  /* this+0x26 */ short critical;
  /* this+0x28 */ short def;
  /* this+0x2a */ short Mdef;
  /* this+0x2c */ short flee;
  /* this+0x2e */ short aspd;
  /* this+0x30 */ short hp;
  /* this+0x32 */ short maxHP;
  /* this+0x34 */ short sp;
  /* this+0x36 */ short maxSP;
  /* this+0x38 */ short ATKRange;
  /* this+0x3a */ int exp;
}

struct PACKET_ZC_MAPPROPERTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ short type;
}

struct ANON_OBJECT_HEADER_V2 {
  /* this+0x0 */ unsigned short Sig1;
  /* this+0x2 */ unsigned short Sig2;
  /* this+0x4 */ unsigned short Version;
  /* this+0x6 */ unsigned short Machine;
  /* this+0x8 */ unsigned long TimeDateStamp;
  /* this+0xc */ struct _GUID ClassID;
  /* this+0x1c */ unsigned long SizeOfData;
  /* this+0x20 */ unsigned long Flags;
  /* this+0x24 */ unsigned long MetaDataSize;
  /* this+0x28 */ unsigned long MetaDataOffset;
}

struct PACKET_CZ_REQ_OPENSTORE2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ char[0x50] storeName;
  /* this+0x54 */ bool result;
}

struct PACKET_ZC_ACK_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x28] reasonDesc;
}

struct PACKET_ZC_REQ_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long expOption;
  /* this+0x6 */ unsigned char ItemPickupRule;
  /* this+0x7 */ unsigned char ItemDivisionRule;
}

struct PACKET_CZ_REQNAME2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_WARPLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ char[0x10][0x4] mapName;
}

struct PACKET_ZC_PARTY_RECRUIT_RECALL_COST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Money;
  /* this+0x6 */ char[0x10] mapName;
}

struct PACKET_ZC_ITEM_THROW_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ short count;
}

struct PACKET_ZC_PROGRESS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long color;
  /* this+0x6 */ unsigned long time;
}

struct PACKET_ZC_CLANINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ int EmblemNum;
  /* this+0x8 */ char[0x18] ClanName;
  /* this+0x20 */ char[0x18] Mastername;
  /* this+0x38 */ char[0x10] ManageMap;
  /* this+0x48 */ unsigned char Num_AllyClan;
  /* this+0x49 */ unsigned char Num_HostileClan;
}

struct PACKET_CA_ACK_NEW_USER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Sex;
}

struct _CrtMemBlockHeader {
}

struct _CrtMemState {
  /* this+0x0 */ struct _CrtMemBlockHeader * pBlockHeader;
  /* this+0x4 */ unsigned int[0x5] lCounts;
  /* this+0x18 */ unsigned int[0x5] lSizes;
  /* this+0x2c */ unsigned int lHighWaterCount;
  /* this+0x30 */ unsigned int lTotalCount;
}

struct _TAPE_SET_MEDIA_PARAMETERS {
  /* this+0x0 */ unsigned long BlockSize;
}

struct PACKET_ZC_CONGRATULATION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_CAMPINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long accountID;
  /* this+0x6 */ char[0x18] name;
  /* this+0x1e */ short camp;
}

struct PACKET_CZ_AUCTION_ITEM_SEARCH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
  /* this+0x4 */ unsigned long AuctionID;
  /* this+0x8 */ char[0x18] Name;
  /* this+0x20 */ unsigned short Page;
}

struct PPM_WMI_IDLE_STATE {
  /* this+0x0 */ unsigned long Latency;
  /* this+0x4 */ unsigned long Power;
  /* this+0x8 */ unsigned long TimeCheck;
  /* this+0xc */ unsigned char PromotePercent;
  /* this+0xd */ unsigned char DemotePercent;
  /* this+0xe */ unsigned char StateType;
  /* this+0xf */ unsigned char Reserved;
  /* this+0x10 */ unsigned long StateFlags;
  /* this+0x14 */ unsigned long Context;
  /* this+0x18 */ unsigned long IdleHandler;
  /* this+0x1c */ unsigned long Reserved1;
}

struct PACKET_ZC_AUCTION_ITEM_REQ_SEARCH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ int MaxPage;
  /* this+0x8 */ int Number;
}

struct PACKET_HC_BLOCK_CHARACTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct tagMDICREATESTRUCTW {
  /* this+0x0 */ const wchar_t * szClass;
  /* this+0x4 */ const wchar_t * szTitle;
  /* this+0x8 */ void * hOwner;
  /* this+0xc */ int x;
  /* this+0x10 */ int y;
  /* this+0x14 */ int cx;
  /* this+0x18 */ int cy;
  /* this+0x1c */ unsigned long style;
  /* this+0x20 */ long lParam;
}

struct tagMCI_ANIM_PLAY_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ unsigned long dwFrom;
  /* this+0x8 */ unsigned long dwTo;
  /* this+0xc */ unsigned long dwSpeed;
}

struct PACKET_CZ_REQUEST_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_HC_CHARACTER_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_ZC_SKILLINFO_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
}

struct DISPLAYCONFIG_PATH_TARGET_INFO {
  /* this+0x0 */ struct _LUID adapterId;
  /* this+0x8 */ unsigned int id;
  /* this+0xc */ unsigned int modeInfoIdx;
  /* this+0x10 */ enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
  /* this+0x14 */ enum DISPLAYCONFIG_ROTATION rotation;
  /* this+0x18 */ enum DISPLAYCONFIG_SCALING scaling;
  /* this+0x1c */ struct DISPLAYCONFIG_RATIONAL refreshRate;
  /* this+0x24 */ enum DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
  /* this+0x28 */ int targetAvailable;
  /* this+0x2c */ unsigned int statusFlags;
}

struct DISPLAYCONFIG_PATH_INFO {
  /* this+0x0 */ struct DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
  /* this+0x14 */ struct DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
  /* this+0x44 */ unsigned int flags;
}

struct PACKET_CZ_HACKSH_CPX_MSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short nLength;
  /* this+0x6 */ int Ident;
}

struct PACKET_ZC_MAIL_REQ_GET_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ int MailNumber;
}

struct _CONSOLE_SELECTION_INFO {
  /* this+0x0 */ unsigned long dwFlags;
  /* this+0x4 */ struct _COORD dwSelectionAnchor;
  /* this+0x8 */ struct _SMALL_RECT srSelection;
}

struct PACKET_AC_SHUTDOWN_NOTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ long Time;
  /* this+0x6 */ long ServerTime;
}

struct SYSTEM_POWER_CAPABILITIES {
  /* this+0x0 */ unsigned char PowerButtonPresent;
  /* this+0x1 */ unsigned char SleepButtonPresent;
  /* this+0x2 */ unsigned char LidPresent;
  /* this+0x3 */ unsigned char SystemS1;
  /* this+0x4 */ unsigned char SystemS2;
  /* this+0x5 */ unsigned char SystemS3;
  /* this+0x6 */ unsigned char SystemS4;
  /* this+0x7 */ unsigned char SystemS5;
  /* this+0x8 */ unsigned char HiberFilePresent;
  /* this+0x9 */ unsigned char FullWake;
  /* this+0xa */ unsigned char VideoDimPresent;
  /* this+0xb */ unsigned char ApmPresent;
  /* this+0xc */ unsigned char UpsPresent;
  /* this+0xd */ unsigned char ThermalControl;
  /* this+0xe */ unsigned char ProcessorThrottle;
  /* this+0xf */ unsigned char ProcessorMinThrottle;
  /* this+0x10 */ unsigned char ProcessorMaxThrottle;
  /* this+0x11 */ unsigned char FastSystemS4;
  /* this+0x12 */ unsigned char[0x3] spare2;
  /* this+0x15 */ unsigned char DiskSpinDown;
  /* this+0x16 */ unsigned char[0x8] spare3;
  /* this+0x1e */ unsigned char SystemBatteriesPresent;
  /* this+0x1f */ unsigned char BatteriesAreShortTerm;
  /* this+0x20 */ struct BATTERY_REPORTING_SCALE[0x3] BatteryScale;
  /* this+0x38 */ enum _SYSTEM_POWER_STATE AcOnLineWake;
  /* this+0x3c */ enum _SYSTEM_POWER_STATE SoftLidWake;
  /* this+0x40 */ enum _SYSTEM_POWER_STATE RtcWake;
  /* this+0x44 */ enum _SYSTEM_POWER_STATE MinDeviceWakeState;
  /* this+0x48 */ enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;
}

struct PACKET_ZC_SAY_DIALOG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long NAID;
}

struct PACKET_CZ_REQ_ITEMREPAIR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct REPAIRITEM_INFO TargetItemInfo;
}

struct __JUMP_BUFFER {
  /* this+0x0 */ unsigned long Ebp;
  /* this+0x4 */ unsigned long Ebx;
  /* this+0x8 */ unsigned long Edi;
  /* this+0xc */ unsigned long Esi;
  /* this+0x10 */ unsigned long Esp;
  /* this+0x14 */ unsigned long Eip;
  /* this+0x18 */ unsigned long Registration;
  /* this+0x1c */ unsigned long TryLevel;
  /* this+0x20 */ unsigned long Cookie;
  /* this+0x24 */ unsigned long UnwindFunc;
  /* this+0x28 */ unsigned long[0x6] UnwindData;
}

struct PACKET_CZ_GM_FULLSTRIP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long TargetAID;
}

struct tagEMRGLSBOUNDEDRECORD {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ unsigned long cbData;
  /* this+0x1c */ unsigned char[0x1] Data;
}

struct PACKET_ZC_STATE_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short bodyState;
  /* this+0x8 */ short healthState;
  /* this+0xa */ short effectState;
  /* this+0xc */ bool isPKModeON;
}

struct PACKET_ZC_NOTIFY_STANDENTRY7 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char objecttype;
  /* this+0x5 */ unsigned long GID;
  /* this+0x9 */ short speed;
  /* this+0xb */ short bodyState;
  /* this+0xd */ short healthState;
  /* this+0xf */ int effectState;
  /* this+0x13 */ short job;
  /* this+0x15 */ short head;
  /* this+0x17 */ int weapon;
  /* this+0x1b */ short accessory;
  /* this+0x1d */ short accessory2;
  /* this+0x1f */ short accessory3;
  /* this+0x21 */ short headpalette;
  /* this+0x23 */ short bodypalette;
  /* this+0x25 */ short headDir;
  /* this+0x27 */ short robe;
  /* this+0x29 */ unsigned long GUID;
  /* this+0x2d */ short GEmblemVer;
  /* this+0x2f */ short honor;
  /* this+0x31 */ int virtue;
  /* this+0x35 */ bool isPKModeON;
  /* this+0x36 */ unsigned char sex;
  /* this+0x37 */ unsigned char[0x3] PosDir;
  /* this+0x3a */ unsigned char xSize;
  /* this+0x3b */ unsigned char ySize;
  /* this+0x3c */ unsigned char state;
  /* this+0x3d */ short clevel;
  /* this+0x3f */ short font;
}

struct PACKET_CA_REQ_GAME_GUARD_CHECK {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_DISAPPEAR_ENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long makerAID;
}

struct PACKET_ZC_NAVIGATION_ACTIVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Type;
  /* this+0x3 */ unsigned char SetType;
  /* this+0x4 */ bool Hide;
  /* this+0x5 */ char[0x10] MapName;
  /* this+0x15 */ short xPos;
  /* this+0x17 */ short yPos;
  /* this+0x19 */ short sprIndex;
}

struct PACKET_ZC_CART_ITEMLIST_EQUIP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_CH_EDIT_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x4] oldSecondPWIdx;
  /* this+0xa */ char[0x4] newSecondPWIdx;
}

struct PACKET_ZC_NOTIFY_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] EntryQueueName;
  /* this+0x1a */ int Ranking;
}

struct _IMAGE_IMPORT_DESCRIPTOR {
  /* this+0x0 */ unsigned long Characteristics;
  /* this+0x0 */ unsigned long OriginalFirstThunk;
  /* this+0x4 */ unsigned long TimeDateStamp;
  /* this+0x8 */ unsigned long ForwarderChain;
  /* this+0xc */ unsigned long Name;
  /* this+0x10 */ unsigned long FirstThunk;
}

union __m256i {
  /* this+0x0 */ char[0x20] m256i_i8;
  /* this+0x0 */ short[0x10] m256i_i16;
  /* this+0x0 */ int[0x8] m256i_i32;
  /* this+0x0 */ __int64[0x4] m256i_i64;
  /* this+0x0 */ unsigned char[0x20] m256i_u8;
  /* this+0x0 */ unsigned short[0x10] m256i_u16;
  /* this+0x0 */ unsigned int[0x8] m256i_u32;
  /* this+0x0 */ unsigned __int64[0x4] m256i_u64;
}

struct _EXCEPTION_REGISTRATION_RECORD {
  /* this+0x0 */ struct _EXCEPTION_REGISTRATION_RECORD * Next;
  /* this+0x4 */ function  * Handler;
}

struct PACKET_AC_PT_ACCOUNT_INFO {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_ACK_BAN_GUILD_SSO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] charName;
  /* this+0x1a */ char[0x28] reasonDesc;
}

struct _DRAWPATRECT {
  /* this+0x0 */ struct tagPOINT ptPosition;
  /* this+0x8 */ struct tagPOINT ptSize;
  /* this+0x10 */ unsigned short wStyle;
  /* this+0x12 */ unsigned short wPattern;
}

struct DISPLAYCONFIG_MODE_INFO {
  /* this+0x0 */ enum DISPLAYCONFIG_MODE_INFO_TYPE infoType;
  /* this+0x4 */ unsigned int id;
  /* this+0x8 */ struct _LUID adapterId;
  /* this+0x10 */ struct DISPLAYCONFIG_TARGET_MODE targetMode;
  /* this+0x10 */ struct DISPLAYCONFIG_SOURCE_MODE sourceMode;
}

struct PACKET_CZ_MAIL_RESET_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
}

struct PACKET_CA_CONNECT_INFO_CHANGED {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x18] ID;
}

struct tagEMRBITBLT {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ struct _RECTL rclBounds;
  /* this+0x18 */ long xDest;
  /* this+0x1c */ long yDest;
  /* this+0x20 */ long cxDest;
  /* this+0x24 */ long cyDest;
  /* this+0x28 */ unsigned long dwRop;
  /* this+0x2c */ long xSrc;
  /* this+0x30 */ long ySrc;
  /* this+0x34 */ struct tagXFORM xformSrc;
  /* this+0x4c */ unsigned long crBkColorSrc;
  /* this+0x50 */ unsigned long iUsageSrc;
  /* this+0x54 */ unsigned long offBmiSrc;
  /* this+0x58 */ unsigned long cbBmiSrc;
  /* this+0x5c */ unsigned long offBitsSrc;
  /* this+0x60 */ unsigned long cbBitsSrc;
}

struct PACKET_HC_ACCEPT_ENTER_ORG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ char[0x14] m_extension;
}

struct _SERVICE_FAILURE_ACTIONSW {
  /* this+0x0 */ unsigned long dwResetPeriod;
  /* this+0x4 */ wchar_t * lpRebootMsg;
  /* this+0x8 */ wchar_t * lpCommand;
  /* this+0xc */ unsigned long cActions;
  /* this+0x10 */ struct _SC_ACTION * lpsaActions;
}

struct PACKET_CZ_MACRO_STOP {
  /* this+0x0 */ short PacketType;
}

struct _SID {
  /* this+0x0 */ unsigned char Revision;
  /* this+0x1 */ unsigned char SubAuthorityCount;
  /* this+0x2 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  /* this+0x8 */ unsigned long[0x1] SubAuthority;
}

struct tagEMRSETMAPPERFLAGS {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long dwFlags;
}

struct PACKET_ZC_PARTY_RECRUIT_ADD_FILTERLINGLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x18] CharName;
}

struct tagMDINEXTMENU {
  /* this+0x0 */ struct HMENU__ * hmenuIn;
  /* this+0x4 */ struct HMENU__ * hmenuNext;
  /* this+0x8 */ struct HWND__ * hwndNext;
}

struct PACKET_CZ_PET_ACT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int data;
}

struct PACKET_ZC_PC_CASH_POINT_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long CashPoint;
  /* this+0x6 */ short Error;
}

struct PACKET_ZC_MEMBER_ADD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct GUILD_MEMBER_INFO Info;
}

struct PACKET_CZ_AUCTION_ADD_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_ZC_NOTIFY_PCBANG {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_UPDATE_ITEM_FROM_BUYING_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ short count;
  /* this+0x6 */ int limitZeny;
}

struct PROCESSOR_IDLESTATE_INFO {
  /* this+0x0 */ unsigned long TimeCheck;
  /* this+0x4 */ unsigned char DemotePercent;
  /* this+0x5 */ unsigned char PromotePercent;
  /* this+0x6 */ unsigned char[0x2] Spare;
}

struct PACKET_ZC_NOTIFY_MANNER_POINT_GIVEN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
  /* this+0x3 */ char[0x18] otherCharName;
}

struct PACKET_ZC_STORE_ITEMLIST_NORMAL_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ char[0x18] StoreName;
}

struct _wfinddata32_t {
  /* this+0x0 */ unsigned int attrib;
  /* this+0x4 */ long time_create;
  /* this+0x8 */ long time_access;
  /* this+0xc */ long time_write;
  /* this+0x10 */ unsigned long size;
  /* this+0x14 */ wchar_t[0x104] name;
}

struct PACKET_ZC_PERSONAL_INFOMATION_CHN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short Exp;
  /* this+0x6 */ short Death;
  /* this+0x8 */ short Drop;
  /* this+0xa */ short ActivityRate;
}

struct PACKET_CZ_JOIN_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GRID;
  /* this+0x6 */ int answer;
}

struct PACKET_ZC_MER_INIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int AID;
  /* this+0x6 */ short atk;
  /* this+0x8 */ short Matk;
  /* this+0xa */ short hit;
  /* this+0xc */ short critical;
  /* this+0xe */ short def;
  /* this+0x10 */ short Mdef;
  /* this+0x12 */ short flee;
  /* this+0x14 */ short aspd;
  /* this+0x16 */ char[0x18] name;
  /* this+0x2e */ short level;
  /* this+0x30 */ int hp;
  /* this+0x34 */ int maxHP;
  /* this+0x38 */ int sp;
  /* this+0x3c */ int maxSP;
  /* this+0x40 */ long ExpireDate;
  /* this+0x44 */ short faith;
  /* this+0x46 */ int toal_call_num;
  /* this+0x4a */ int approval_monster_kill_counter;
  /* this+0x4e */ short ATKRange;
}

struct PACKET_ZC_ACK_PARTY_NAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long PartyID;
  /* this+0x6 */ char[0x18] szPartyName;
}

struct tagEMRSETPALETTEENTRIES {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihPal;
  /* this+0xc */ unsigned long iStart;
  /* this+0x10 */ unsigned long cEntries;
  /* this+0x14 */ struct tagPALETTEENTRY[0x1] aPalEntries;
}

struct PACKET_ZC_ACK_GUILD_MEMBER_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct GUILD_MEMBER_INFO Info;
}

struct PACKET_ZC_UPDATE_MAPINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short xPos;
  /* this+0x4 */ short yPos;
  /* this+0x6 */ short type;
  /* this+0x8 */ char[0x10] mapName;
}

struct PACKET_AC_REQ_NEW_USER {
  /* this+0x0 */ short PacketType;
}

struct PACKET_HC_QUEUE_ORDER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long m_AID;
  /* this+0x8 */ unsigned long m_QueueOrder;
}

struct PACKET_ZC_MEMORIALDUNGEON_SUBSCRIPTION_NOTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PriorityOrderNum;
}

struct PACKET_CZ_PARTY_BOOKING_REQ_SEARCH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Level;
  /* this+0x4 */ short MapID;
  /* this+0x6 */ short Job;
  /* this+0x8 */ unsigned long LastIndex;
  /* this+0xc */ short ResultCount;
}

struct PACKET_CZ_REQ_STATUS {
  /* this+0x0 */ short PacketType;
}

struct _EXCEPTION_RECORD64 {
  /* this+0x0 */ unsigned long ExceptionCode;
  /* this+0x4 */ unsigned long ExceptionFlags;
  /* this+0x8 */ unsigned __int64 ExceptionRecord;
  /* this+0x10 */ unsigned __int64 ExceptionAddress;
  /* this+0x18 */ unsigned long NumberParameters;
  /* this+0x1c */ unsigned long __unusedAlignment;
  /* this+0x20 */ unsigned __int64[0xf] ExceptionInformation;
}

struct PACKET_ZC_NOTIFY_MOVEENTRY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ short effectState;
  /* this+0xe */ short job;
  /* this+0x10 */ short head;
  /* this+0x12 */ short weapon;
  /* this+0x14 */ short accessory;
  /* this+0x16 */ unsigned long moveStartTime;
  /* this+0x1a */ short shield;
  /* this+0x1c */ short accessory2;
  /* this+0x1e */ short accessory3;
  /* this+0x20 */ short headpalette;
  /* this+0x22 */ short bodypalette;
  /* this+0x24 */ short headDir;
  /* this+0x26 */ unsigned long GUID;
  /* this+0x2a */ short GEmblemVer;
  /* this+0x2c */ short honor;
  /* this+0x2e */ short virtue;
  /* this+0x30 */ bool isPKModeON;
  /* this+0x31 */ unsigned char sex;
  /* this+0x32 */ unsigned char[0x6] MoveData;
  /* this+0x38 */ unsigned char xSize;
  /* this+0x39 */ unsigned char ySize;
  /* this+0x3a */ short clevel;
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct tagEMRRESIZEPALETTE {
  /* this+0x0 */ struct tagEMR emr;
  /* this+0x8 */ unsigned long ihPal;
  /* this+0xc */ unsigned long cEntries;
}

struct PACKET_CZ_MAKE_GROUP2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] groupName;
  /* this+0x1a */ unsigned char ItemPickupRule;
  /* this+0x1b */ unsigned char ItemDivisionRule;
}

union _IMAGE_SYMBOL_EX::<unnamed-type-N> {
  /* this+0x0 */ unsigned char[0x8] ShortName;
  /* this+0x0 */ struct _IMAGE_SYMBOL_EX::<unnamed-type-N>::<unnamed-type-Name> Name;
  /* this+0x0 */ unsigned long[0x2] LongName;
}

struct PACKET_AC_REFUSE_LOGIN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ErrorCode;
  /* this+0x3 */ char[0x14] blockDate;
}

struct PACKET_ZC_EQUIPWIN_MICROSCOPE2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
  /* this+0x4 */ char[0x18] characterName;
  /* this+0x1c */ short job;
  /* this+0x1e */ short head;
  /* this+0x20 */ short accessory;
  /* this+0x22 */ short accessory2;
  /* this+0x24 */ short accessory3;
  /* this+0x26 */ short robe;
  /* this+0x28 */ short headpalette;
  /* this+0x2a */ short bodypalette;
  /* this+0x2c */ unsigned char sex;
}

struct PACKET_ZC_BATTLEFIELD_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long accountID;
  /* this+0x8 */ char[0x18] name;
}

struct PACKET_AC_REALNAME_AUTH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned short AccountArea;
}

struct PACKET_CZ_REQNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct _TIME_ZONE_INFORMATION {
  /* this+0x0 */ long Bias;
  /* this+0x4 */ wchar_t[0x20] StandardName;
  /* this+0x44 */ struct _SYSTEMTIME StandardDate;
  /* this+0x54 */ long StandardBias;
  /* this+0x58 */ wchar_t[0x20] DaylightName;
  /* this+0x98 */ struct _SYSTEMTIME DaylightDate;
  /* this+0xa8 */ long DaylightBias;
}

struct PACKET_ZC_RESULT_STORE_PASSWORD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
  /* this+0x4 */ short ErrorCount;
}

struct PACKET_ZC_EQUIPWIN_MICROSCOPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
  /* this+0x4 */ char[0x18] characterName;
  /* this+0x1c */ short job;
  /* this+0x1e */ short head;
  /* this+0x20 */ short accessory;
  /* this+0x22 */ short accessory2;
  /* this+0x24 */ short accessory3;
  /* this+0x26 */ short headpalette;
  /* this+0x28 */ short bodypalette;
  /* this+0x2a */ unsigned char sex;
}

struct PACKET_ZC_QUEST_NOTIFY_EFFECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long npcID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
  /* this+0xa */ short effect;
  /* this+0xc */ short type;
}

struct PACKET_CZ_REQUEST_TIME2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long clientTime;
}

struct PACKET_ZC_PERSONAL_INFOMATION::DETAIL_EXP_INFO {
  /* this+0x0 */ unsigned char InfoType;
  /* this+0x1 */ short Exp;
  /* this+0x3 */ short Death;
  /* this+0x5 */ short Drop;
}

struct PACKET_ZC_PERSONAL_INFOMATION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short Exp;
  /* this+0x6 */ short Death;
  /* this+0x8 */ short Drop;
}

struct PACKET_ZC_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ReqAID;
  /* this+0x6 */ unsigned long ReqGID;
  /* this+0xa */ char[0x18] Name;
}

struct PACKET_ZC_FAILED_GET_ITEM_FROM_ZONEDA {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_NOTIFY_CHAT_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long AID;
}

struct PACKET_ZH_MOVE_PVPWORLD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
}

struct tagTPMPARAMS {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ struct tagRECT rcExclude;
}

struct pvalueW {
  /* this+0x0 */ wchar_t * pv_valuename;
  /* this+0x4 */ int pv_valuelen;
  /* this+0x8 */ void * pv_value_context;
  /* this+0xc */ unsigned long pv_type;
}

struct tagMCI_INFO_PARMSA {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ char * lpstrReturn;
  /* this+0x8 */ unsigned long dwRetSize;
}

struct PACKET_ZC_OPEN_EDITDLG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct PACKET_ZC_REQ_TAKEOFF_EQUIP_ACK2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned short wearLocation;
  /* this+0x6 */ unsigned char result;
}

struct PACKET_CZ_CLIENT_VERSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ long clientVer;
}

struct PACKET_CZ_REQ_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int GDID;
}

struct PGG_LINGO_KEY_TEMP {
  /* this+0x0 */ unsigned long dwAlgNum;
  /* this+0x4 */ unsigned long dwAlgKey1;
  /* this+0x8 */ unsigned long dwAlgKey2;
  /* this+0xc */ unsigned long dwSeed;
}

struct PACKET_CZ_REASSEMBLY_IDENTITY::<unnamed-type-ImportAddressTableModify> {
          }

struct PACKET_CZ_REASSEMBLY_IDENTITY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ struct PACKET_CZ_REASSEMBLY_IDENTITY::<unnamed-type-ImportAddressTableModify> ImportAddressTableModify;
}

struct PACKET_CZ_COMMAND_MER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
  /* this+0x4 */ char command;
}

struct PACKET_CZ_AUCTION_REQ_MY_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
}

union _INPUT_RECORD::<unnamed-type-Event> {
  /* this+0x0 */ struct _KEY_EVENT_RECORD KeyEvent;
  /* this+0x0 */ struct _MOUSE_EVENT_RECORD MouseEvent;
  /* this+0x0 */ struct _WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
  /* this+0x0 */ struct _MENU_EVENT_RECORD MenuEvent;
  /* this+0x0 */ struct _FOCUS_EVENT_RECORD FocusEvent;
}

struct _INPUT_RECORD {
  /* this+0x0 */ unsigned short EventType;
  /* this+0x4 */ union _INPUT_RECORD::<unnamed-type-Event> Event;
}

struct PACKET_ZC_ACK_SE_CASH_ITEM_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short item_count;
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x25] Notice;
}

struct PACKET_CH_DELETE_CHAR3_CANCEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
}

struct PPM_IDLE_STATE_ACCOUNTING_EX {
  /* this+0x0 */ unsigned __int64 TotalTime;
  /* this+0x8 */ unsigned long IdleTransitions;
  /* this+0xc */ unsigned long FailedTransitions;
  /* this+0x10 */ unsigned long InvalidBucketIndex;
  /* this+0x14 */ unsigned long MinTimeUs;
  /* this+0x18 */ unsigned long MaxTimeUs;
  /* this+0x20 */ struct PPM_IDLE_STATE_BUCKET_EX[0x10] IdleTimeBuckets;
}

struct PACKET_ZC_DEATH_QUESTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Qcategory;
  /* this+0x4 */ short Qnum;
}

struct PACKET_ZC_SEEK_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] Name;
  /* this+0x1a */ unsigned long Job;
  /* this+0x1e */ unsigned long Level;
  /* this+0x22 */ char[0x10] mapName;
  /* this+0x32 */ unsigned long Option;
}

struct PACKET_ZC_CONFIG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum PACKET_CZ_CONFIG::enumConfig Config;
  /* this+0x6 */ int Value;
}

struct PACKET_HC_UPDATE_CHARINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct CHARACTER_INFO charinfo;
}

struct PPM_THERMAL_POLICY_EVENT {
  /* this+0x0 */ unsigned char Mode;
  /* this+0x8 */ unsigned __int64 Processors;
}

struct PACKET_ZC_GANGSI_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Point;
  /* this+0x6 */ int TotalPoint;
  /* this+0xa */ short PacketSwitch;
}

struct PACKET_ZC_STORE_ITEMLIST_NORMAL_V2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ char[0x18] StoreName;
}

struct PACKET_ZC_ACK_ACCOUNTNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x18] name;
}

struct PACKET_CZ_CHANGE_DIRECTION2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short headDir;
  /* this+0x4 */ unsigned char dir;
}

struct PACKET_CZ_USE_SKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short selectedLevel;
  /* this+0x4 */ unsigned short SKID;
  /* this+0x6 */ unsigned long targetID;
}

struct PACKET_ZC_THROW_MVPITEM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_FAILED_TRADE_BUYING_STORE_TO_BUYER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
}

struct _WINDOW_BUFFER_SIZE_RECORD {
  /* this+0x0 */ struct _COORD dwSize;
}

struct PACKET_ZC_REQ_COUPLE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] name;
}

struct PACKET_CZ_REASSEMBLY_AUTH {
  /* this+0x0 */ short PacketType;
}

struct PPM_IDLE_STATE_BUCKET_EX {
  /* this+0x0 */ unsigned __int64 TotalTimeUs;
  /* this+0x8 */ unsigned long MinTimeUs;
  /* this+0xc */ unsigned long MaxTimeUs;
  /* this+0x10 */ unsigned long Count;
}

struct _PSFEATURE_CUSTPAPER {
  /* this+0x0 */ long lOrientation;
  /* this+0x4 */ long lWidth;
  /* this+0x8 */ long lHeight;
  /* this+0xc */ long lWidthOffset;
  /* this+0x10 */ long lHeightOffset;
}

struct PACKET_ZC_STARPLACE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char which;
}

struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_CZ_REQ_WHISPER_LIST {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CA_PT_ACCOUNT_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short sex;
  /* this+0x4 */ short bPoint;
  /* this+0x6 */ char[0x22] E_mail;
}

struct PACKET_HC_ACK_CHANGE_CHARACTER_SLOT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short Reason;
  /* this+0x6 */ short AfterChrSlotCnt;
}

struct PACKET_ZC_STORE_EQUIPMENT_ITEMLIST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_MAIL_REQ_GET_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char Result;
}

struct PACKET_ZC_NOTIFY_MOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char[0x6] MoveData;
  /* this+0xc */ unsigned long moveStartTime;
}

struct _IMAGE_THUNK_DATA64 {
  /* this+0x0 */ union _IMAGE_THUNK_DATA64::<unnamed-type-u1> u1;
}

struct PACKET_CZ_GPK_DYNCODE_RELOAD {
  /* this+0x0 */ short PacketType;
}

struct protoent {
  /* this+0x0 */ char * p_name;
  /* this+0x4 */ char * * p_aliases;
  /* this+0x8 */ short p_proto;
}

struct PACKET_CZ_MACRO_ITEM_PICKUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ITAID;
}

struct PACKET_ZC_PARTY_RECRUIT_FAILED_RECALL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long CallerAID;
  /* this+0x6 */ unsigned char Reason;
}

struct HDESK__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_ACK_MAKE_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_CZ_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Job;
  /* this+0x6 */ unsigned long Level;
  /* this+0xa */ char[0x10] mapName;
  /* this+0x1a */ unsigned long Option;
}

struct _QOS_SD_MODE {
  /* this+0x0 */ struct QOS_OBJECT_HDR ObjectHdr;
  /* this+0x8 */ unsigned long ShapeDiscardMode;
}

struct PACKET_CZ_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] characterName;
}

struct PACKET_ZC_START_COUPLE {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_NOTIFY_SKILL2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long targetID;
  /* this+0xc */ unsigned long startTime;
  /* this+0x10 */ int attackMT;
  /* this+0x14 */ int attackedMT;
  /* this+0x18 */ int damage;
  /* this+0x1c */ short level;
  /* this+0x1e */ short count;
  /* this+0x20 */ unsigned char action;
}

struct PACKET_ZC_AID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_SERVER_ENTRY_ACK {
  /* this+0x0 */ short Header;
  /* this+0x2 */ int AID;
}

struct EQUIPMENTITEM_EXTRAINFO {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ bool IsIdentified;
  /* this+0x6 */ unsigned short location;
  /* this+0x8 */ unsigned short WearState;
  /* this+0xa */ bool IsDamaged;
  /* this+0xb */ unsigned char RefiningLevel;
  /* this+0xc */ struct EQUIPSLOTINFO slot;
}

struct PACKET_AC_ACCEPT_LOGIN2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ int AuthCode;
  /* this+0x8 */ unsigned long AID;
  /* this+0xc */ unsigned long userLevel;
  /* this+0x10 */ unsigned long lastLoginIP;
  /* this+0x14 */ char[0x1a] lastLoginTime;
  /* this+0x2e */ unsigned char Sex;
  /* this+0x2f */ int iAccountSID;
}

struct PACKET_CZ_INVENTORY_TAB {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ bool NORMALorPRIVATE;
}

struct PACKET_ZC_SKILL_ENTRY3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long creatorAID;
  /* this+0xc */ short xPos;
  /* this+0xe */ short yPos;
  /* this+0x10 */ unsigned char job;
  /* this+0x11 */ char RadiusRange;
  /* this+0x12 */ bool isVisible;
}

struct PACKET_CZ_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long expOption;
  /* this+0x6 */ unsigned char ItemPickupRule;
  /* this+0x7 */ unsigned char ItemDivisionRule;
}

struct PACKET_ZC_ACK_DISORGANIZE_GUILD_RESULT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int reason;
}

struct PACKET_ZC_WAIT_DIALOG2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
  /* this+0x6 */ unsigned char type;
}

struct PACKET_ZC_HUNTING_QUEST_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_NOTIFY_SKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long targetID;
  /* this+0xc */ unsigned long startTime;
  /* this+0x10 */ int attackMT;
  /* this+0x14 */ int attackedMT;
  /* this+0x18 */ short damage;
  /* this+0x1a */ short level;
  /* this+0x1c */ short count;
  /* this+0x1e */ unsigned char action;
}

struct PACKET_AC_ASK_PNGAMEROOM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_MAIL_RECEIVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long MailID;
  /* this+0x6 */ char[0x28] Header;
  /* this+0x2e */ char[0x18] FromName;
}

struct GUILD_MEMBER_INFO_SHORT {
  /* this+0x0 */ int AID;
  /* this+0x4 */ int GID;
}

struct ANON_OBJECT_HEADER_BIGOBJ {
  /* this+0x0 */ unsigned short Sig1;
  /* this+0x2 */ unsigned short Sig2;
  /* this+0x4 */ unsigned short Version;
  /* this+0x6 */ unsigned short Machine;
  /* this+0x8 */ unsigned long TimeDateStamp;
  /* this+0xc */ struct _GUID ClassID;
  /* this+0x1c */ unsigned long SizeOfData;
  /* this+0x20 */ unsigned long Flags;
  /* this+0x24 */ unsigned long MetaDataSize;
  /* this+0x28 */ unsigned long MetaDataOffset;
  /* this+0x2c */ unsigned long NumberOfSections;
  /* this+0x30 */ unsigned long PointerToSymbolTable;
  /* this+0x34 */ unsigned long NumberOfSymbols;
}

struct PACKET_ZC_PARTY_BOOKING_NOTIFY_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Index;
}

struct PACKET_ZC_MONSTER_INFO::<unnamed-type-propertyTable> {
  /* this+0x0 */ unsigned char water;
  /* this+0x1 */ unsigned char earth;
  /* this+0x2 */ unsigned char fire;
  /* this+0x3 */ unsigned char wind;
  /* this+0x4 */ unsigned char poison;
  /* this+0x5 */ unsigned char saint;
  /* this+0x6 */ unsigned char dark;
  /* this+0x7 */ unsigned char mental;
  /* this+0x8 */ unsigned char undead;
}

struct PACKET_ZC_MONSTER_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short job;
  /* this+0x4 */ short level;
  /* this+0x6 */ short size;
  /* this+0x8 */ int hp;
  /* this+0xc */ short def;
  /* this+0xe */ short raceType;
  /* this+0x10 */ short mdefPower;
  /* this+0x12 */ short property;
  /* this+0x14 */ struct PACKET_ZC_MONSTER_INFO::<unnamed-type-propertyTable> propertyTable;
}

struct PACKET_ZC_ACK_WHISPER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_CZ_JOIN_BABY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int answer;
}

struct PACKET_ZC_REPLY_ACK_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Result;
  /* this+0x3 */ char[0x18] EntryQueueName;
}

struct PACKET_CA_LOGIN2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x10] PasswdMD5;
  /* this+0x2e */ unsigned char clienttype;
}

struct PACKET_ZC_ACK_RANKING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short RankingType;
  /* this+0x4 */ char[0x18][0xa] CharName;
  /* this+0xf4 */ int[0xa] Point;
  /* this+0x11c */ int myPoint;
}

struct PACKET_ZC_ADD_FRIENDS_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long GID;
  /* this+0xc */ char[0x18] Name;
}

struct BSMINFO {
  /* this+0x0 */ unsigned int cbSize;
  /* this+0x4 */ struct HDESK__ * hdesk;
  /* this+0x8 */ struct HWND__ * hwnd;
  /* this+0xc */ struct _LUID luid;
}

struct PACKET_ZC_ACK_ITEMREFINING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short result;
  /* this+0x4 */ short itemIndex;
  /* this+0x6 */ short refiningLevel;
}

struct PACKET_ZC_NOTIFY_NEWENTRY5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char objecttype;
  /* this+0x5 */ unsigned long GID;
  /* this+0x9 */ short speed;
  /* this+0xb */ short bodyState;
  /* this+0xd */ short healthState;
  /* this+0xf */ int effectState;
  /* this+0x13 */ short job;
  /* this+0x15 */ short head;
  /* this+0x17 */ int weapon;
  /* this+0x1b */ short accessory;
  /* this+0x1d */ short accessory2;
  /* this+0x1f */ short accessory3;
  /* this+0x21 */ short headpalette;
  /* this+0x23 */ short bodypalette;
  /* this+0x25 */ short headDir;
  /* this+0x27 */ unsigned long GUID;
  /* this+0x2b */ short GEmblemVer;
  /* this+0x2d */ short honor;
  /* this+0x2f */ int virtue;
  /* this+0x33 */ bool isPKModeON;
  /* this+0x34 */ unsigned char sex;
  /* this+0x35 */ unsigned char[0x3] PosDir;
  /* this+0x38 */ unsigned char xSize;
  /* this+0x39 */ unsigned char ySize;
  /* this+0x3a */ short clevel;
  /* this+0x3c */ short font;
}

struct PACKET_CH_MAKE_CHAR_NOT_STATS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x18] name;
  /* this+0x1a */ unsigned char CharNum;
  /* this+0x1b */ short headPal;
  /* this+0x1d */ short head;
}

struct PACKET_ZC_FASTMOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short targetXpos;
  /* this+0x8 */ short targetYpos;
}

struct PACKET_CZ_PC_BUY_CASH_POINT_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ short count;
}

struct PACKET_CZ_PETEGG_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
}

struct PACKET_CZ_REMOVE_AID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] AccountName;
}

struct DISPLAYCONFIG_ADAPTER_NAME {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header;
  /* this+0x14 */ wchar_t[0x80] adapterDevicePath;
}

struct tagGCP_RESULTSW {
  /* this+0x0 */ unsigned long lStructSize;
  /* this+0x4 */ wchar_t * lpOutString;
  /* this+0x8 */ unsigned int * lpOrder;
  /* this+0xc */ int * lpDx;
  /* this+0x10 */ int * lpCaretPos;
  /* this+0x14 */ char * lpClass;
  /* this+0x18 */ wchar_t * lpGlyphs;
  /* this+0x1c */ unsigned int nGlyphs;
  /* this+0x20 */ int nMaxFit;
}

struct tagHARDWAREHOOKSTRUCT {
  /* this+0x0 */ struct HWND__ * hwnd;
  /* this+0x4 */ unsigned int message;
  /* this+0x8 */ unsigned int wParam;
  /* this+0xc */ long lParam;
}

struct PACKET_ZC_PET_ACT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int GID;
  /* this+0x6 */ int data;
}

struct PACKET_ZC_MER_PAR_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short var;
  /* this+0x4 */ int value;
}

struct _QUOTA_LIMITS_EX {
  /* this+0x0 */ unsigned long PagedPoolLimit;
  /* this+0x4 */ unsigned long NonPagedPoolLimit;
  /* this+0x8 */ unsigned long MinimumWorkingSetSize;
  /* this+0xc */ unsigned long MaximumWorkingSetSize;
  /* this+0x10 */ unsigned long PagefileLimit;
  /* this+0x18 */ union _LARGE_INTEGER TimeLimit;
  /* this+0x20 */ unsigned long WorkingSetLimit;
  /* this+0x24 */ unsigned long Reserved2;
  /* this+0x28 */ unsigned long Reserved3;
  /* this+0x2c */ unsigned long Reserved4;
  /* this+0x30 */ unsigned long Flags;
  /* this+0x34 */ union _RATE_QUOTA_LIMIT CpuRateLimit;
}

struct _IMAGE_IMPORT_BY_NAME {
  /* this+0x0 */ unsigned short Hint;
  /* this+0x2 */ unsigned char[0x1] Name;
}

struct PACKET_ZC_SPIRITS_ATTRIBUTE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short SpritsType;
  /* this+0x8 */ short Num;
}

struct PACKET_CZ_REQUEST_MOVENPC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char[0x3] dest;
}

struct PACKET_CA_PT_EKEY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x9] m_SeedValue;
  /* this+0xb */ char[0x9] m_EKey;
}

struct PACKET_ZC_PARTY_RECRUIT_PERSONAL_SETTING {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ int Cost;
}

struct PACKET_HC_REFUSE_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ErrorCode;
}

struct PACKET_CH_WAITING_LOGIN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int AuthCode;
  /* this+0xa */ unsigned long userLevel;
  /* this+0xe */ unsigned short clientType;
  /* this+0x10 */ unsigned char Sex;
}

struct PACKET_ZC_STORE_NORMAL_ITEMLIST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_CZ_PROGRESS {
  /* this+0x0 */ short PacketType;
}

struct PACKET_AC_OTP_AUTH_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned short LoginResult;
}

struct PACKET_HC_REFUSE_MAKECHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ErrorCode;
}

struct PACKET_CZ_REQ_ENTER_ROOM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long roomID;
  /* this+0x6 */ char[0x8] passwd;
}

struct PACKET_ZC_NOTIFY_STANDENTRY4 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ int effectState;
  /* this+0x10 */ short job;
  /* this+0x12 */ short head;
  /* this+0x14 */ int weapon;
  /* this+0x18 */ short accessory;
  /* this+0x1a */ short accessory2;
  /* this+0x1c */ short accessory3;
  /* this+0x1e */ short headpalette;
  /* this+0x20 */ short bodypalette;
  /* this+0x22 */ short headDir;
  /* this+0x24 */ unsigned long GUID;
  /* this+0x28 */ short GEmblemVer;
  /* this+0x2a */ short honor;
  /* this+0x2c */ int virtue;
  /* this+0x30 */ bool isPKModeON;
  /* this+0x31 */ unsigned char sex;
  /* this+0x32 */ unsigned char[0x3] PosDir;
  /* this+0x35 */ unsigned char xSize;
  /* this+0x36 */ unsigned char ySize;
  /* this+0x37 */ unsigned char state;
  /* this+0x38 */ short clevel;
  /* this+0x3a */ short font;
}

struct PACKET_ZC_SHOW_IMAGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x10] imageName;
  /* this+0x12 */ unsigned char type;
}

struct PACKET_ZC_SIMPLE_CASH_BTNSHOW {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ bool show;
}

struct PACKET_ZC_BROADCAST4 {
  /* this+0x0 */ short PakcetType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char Msgtype;
  /* this+0x5 */ unsigned long ColorRGB;
}

struct PACKET_CZ_REQ_NEXT_SCRIPT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct _IMAGE_SYMBOL::<unnamed-type-N>::<unnamed-type-Name> {
  /* this+0x0 */ unsigned long Short;
  /* this+0x4 */ unsigned long Long;
}

struct PACKET_CS_REQ_ENCRYPTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char encCount;
  /* this+0x3 */ char decCount;
}

struct PACKET_ZC_ITEM_PICKUP_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ unsigned short count;
  /* this+0x6 */ unsigned short ITID;
  /* this+0x8 */ bool IsIdentified;
  /* this+0x9 */ bool IsDamaged;
  /* this+0xa */ unsigned char refiningLevel;
  /* this+0xb */ struct EQUIPSLOTINFO slot;
  /* this+0x13 */ unsigned short location;
  /* this+0x15 */ unsigned char type;
  /* this+0x16 */ unsigned char result;
}

struct PACKET_CZ_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_ZC_ITEMIDENTIFY_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_ZC_NOTIFY_HP_TO_GROUPM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short hp;
  /* this+0x8 */ short maxhp;
}

struct PACKET_CZ_TRYCOLLECTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long targetAID;
}

struct PACKET_CZ_REQ_CHANGECART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short num;
}

struct PACKET_AC_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ucAnswer;
}

struct PPM_WMI_LEGACY_PERFSTATE {
  /* this+0x0 */ unsigned long Frequency;
  /* this+0x4 */ unsigned long Flags;
  /* this+0x8 */ unsigned long PercentFrequency;
}

struct PPM_IDLESTATE_EVENT {
  /* this+0x0 */ unsigned long NewState;
  /* this+0x4 */ unsigned long OldState;
  /* this+0x8 */ unsigned __int64 Processors;
}

struct PPM_THERMALCHANGE_EVENT {
  /* this+0x0 */ unsigned long ThermalConstraint;
  /* this+0x8 */ unsigned __int64 Processors;
}

union PROCESSOR_IDLESTATE_POLICY::<unnamed-type-Flags> {
  /* this+0x0 */ unsigned short AsWORD;
      }

union PROCESSOR_PERFSTATE_POLICY::<unnamed-tag>::<unnamed-type-Flags> {
  /* this+0x0 */ unsigned char AsBYTE;
        }

struct SYSTEM_BATTERY_STATE {
  /* this+0x0 */ unsigned char AcOnLine;
  /* this+0x1 */ unsigned char BatteryPresent;
  /* this+0x2 */ unsigned char Charging;
  /* this+0x3 */ unsigned char Discharging;
  /* this+0x4 */ unsigned char[0x4] Spare1;
  /* this+0x8 */ unsigned long MaxCapacity;
  /* this+0xc */ unsigned long RemainingCapacity;
  /* this+0x10 */ unsigned long Rate;
  /* this+0x14 */ unsigned long EstimatedTime;
  /* this+0x18 */ unsigned long DefaultAlert1;
  /* this+0x1c */ unsigned long DefaultAlert2;
}

struct SCOPE_ID {
      /* this+0x0 */ unsigned long Value;
}

struct _LDOUBLE {
  /* this+0x0 */ unsigned char[0xa] ld;
}

struct _CRT_DOUBLE {
  /* this+0x0 */ double x;
}

struct _CRT_FLOAT {
  /* this+0x0 */ float f;
}

struct _LONGDOUBLE {
  /* this+0x0 */ double x;
}

struct __m256d {
  /* this+0x0 */ double[0x4] m256d_f64;
}

struct PACKET_ZC_NOTIFY_EFFECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int effectID;
}

struct PACKET_CA_LOGIN_PCBANG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x18] Passwd;
  /* this+0x36 */ unsigned char clienttype;
  /* this+0x37 */ char[0x10] IP;
  /* this+0x47 */ unsigned char[0xd] MacAdress;
}

struct PACKET_ZC_FEED_PET {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char cRet;
  /* this+0x3 */ unsigned short ITID;
}

struct PURCHASE_ITEM {
  /* this+0x0 */ int price;
  /* this+0x4 */ int discountprice;
  /* this+0x8 */ unsigned char type;
  /* this+0x9 */ unsigned short ITID;
}

struct CZ_SELL_ITEM {
  /* this+0x0 */ short index;
  /* this+0x2 */ short count;
}

struct PACKET_CZ_ACK_CASH_PASSWORD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Type;
  /* this+0x4 */ unsigned char[0x10] Password;
  /* this+0x14 */ unsigned char[0x10] NewPassword;
}

struct PACKET_ZC_TRYCOLLECTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_ZC_NORMAL_ITEMLIST3::ITEM {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ bool IsIdentified;
  /* this+0x6 */ short count;
  /* this+0x8 */ unsigned short WearState;
  /* this+0xa */ struct EQUIPSLOTINFO slot;
  /* this+0x12 */ long HireExpireDate;
}

struct PACKET_ZC_ADD_MEMBER_TO_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long Role;
  /* this+0xa */ short xPos;
  /* this+0xc */ short yPos;
  /* this+0xe */ unsigned char state;
  /* this+0xf */ char[0x18] groupName;
  /* this+0x27 */ char[0x18] characterName;
  /* this+0x3f */ char[0x10] mapName;
}

struct PACKET_ZC_NOTIFY_PKINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int winPoint;
  /* this+0x6 */ int losePoint;
  /* this+0xa */ char[0x18] killName;
  /* this+0x22 */ char[0x18] killedName;
  /* this+0x3a */ struct _FILETIME expireTime;
}

struct PACKET_ZC_NOTIFY_GROUNDSKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ short level;
  /* this+0xa */ short xPos;
  /* this+0xc */ short yPos;
  /* this+0xe */ unsigned long startTime;
}

struct PACKET_ZC_NOTIFY_MAPPROPERTY2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short type;
}

struct PACKET_ZC_NOTIFY_MOVEENTRY7 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char objecttype;
  /* this+0x5 */ unsigned long GID;
  /* this+0x9 */ short speed;
  /* this+0xb */ short bodyState;
  /* this+0xd */ short healthState;
  /* this+0xf */ int effectState;
  /* this+0x13 */ short job;
  /* this+0x15 */ short head;
  /* this+0x17 */ int weapon;
  /* this+0x1b */ short accessory;
  /* this+0x1d */ unsigned long moveStartTime;
  /* this+0x21 */ short accessory2;
  /* this+0x23 */ short accessory3;
  /* this+0x25 */ short headpalette;
  /* this+0x27 */ short bodypalette;
  /* this+0x29 */ short headDir;
  /* this+0x2b */ unsigned long GUID;
  /* this+0x2f */ short GEmblemVer;
  /* this+0x31 */ short honor;
  /* this+0x33 */ int virtue;
  /* this+0x37 */ bool isPKModeON;
  /* this+0x38 */ unsigned char sex;
  /* this+0x39 */ unsigned char[0x6] MoveData;
  /* this+0x3f */ unsigned char xSize;
  /* this+0x40 */ unsigned char ySize;
  /* this+0x41 */ short clevel;
  /* this+0x43 */ short font;
}

struct PACKET_HC_ACK_CHANGE_CHARNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short sResult;
}

struct PACKET_ZC_SELECTCART {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ int Identity;
}

union _CHAR_INFO::<unnamed-type-Char> {
  /* this+0x0 */ wchar_t UnicodeChar;
  /* this+0x0 */ char AsciiChar;
}

struct PACKET_CZ_ITEM_PICKUP2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ITAID;
}

struct _LDBL12 {
  /* this+0x0 */ unsigned char[0xc] ld12;
}

struct PACKET_CZ_RECALL_GID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] CharacterName;
}

struct MENUITEMTEMPLATE {
  /* this+0x0 */ unsigned short mtOption;
  /* this+0x2 */ unsigned short mtID;
  /* this+0x4 */ wchar_t[0x1] mtString;
}

struct PACKET_ZC_REFUSE_QUIT {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_ITEMCOMPOSITION_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CH_DELETE_CHAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x28] key;
}

struct PACKET_ZC_ES_NOTI_MYINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short esNo;
  /* this+0x4 */ char[0x36] esname;
}

struct PACKET_CZ_BLACKSMITH_RANK {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CA_CLIENT_TYPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short ClientType;
  /* this+0x4 */ int nVer;
}

struct PACKET_CZ_STATUS_CHANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short statusID;
  /* this+0x4 */ unsigned char changeAmount;
}

struct PACKET_CZ_REQ_JOIN_COUPLE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

union _WSACOMPLETION::<unnamed-type-Parameters> {
  /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-WindowMessage> WindowMessage;
  /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Event> Event;
  /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Apc> Apc;
  /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Port> Port;
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-WindowMessage> {
  /* this+0x0 */ struct HWND__ * hWnd;
  /* this+0x4 */ unsigned int uMsg;
  /* this+0x8 */ unsigned int context;
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Event> {
  /* this+0x0 */ struct _OVERLAPPED * lpOverlapped;
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Apc> {
  /* this+0x0 */ struct _OVERLAPPED * lpOverlapped;
  /* this+0x4 */ function  * lpfnCompletionProc;
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Port> {
  /* this+0x0 */ struct _OVERLAPPED * lpOverlapped;
  /* this+0x4 */ void * hPort;
  /* this+0x8 */ unsigned long Key;
}

struct PACKET_ZC_CONFIG_NOTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ bool bOpenEquipmentWin;
}

struct PACKET_HC_CHECKBOT_RESULT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char Resut;
}

struct BATTLE_FIELD_INFO {
  /* this+0x0 */ unsigned long BFNO;
  /* this+0x4 */ char[0x38] BattleFieldName;
  /* this+0x3c */ short JoinTeam;
}

struct CHARINFO_TO_CHARACTERDB::tagParty {
  /* this+0x0 */ unsigned char Config;
}

struct CHARINFO_TO_CHARACTERDB {
  /* this+0x0 */ int exp;
  /* this+0x4 */ int GuildID;
  /* this+0x8 */ int money;
  /* this+0xc */ int jobexp;
  /* this+0x10 */ int joblevel;
  /* this+0x14 */ int bodystate;
  /* this+0x18 */ int healthstate;
  /* this+0x1c */ int effectstate;
  /* this+0x20 */ int virtue;
  /* this+0x24 */ int honor;
  /* this+0x28 */ int hp;
  /* this+0x2c */ short maxhp;
  /* this+0x2e */ short sp;
  /* this+0x30 */ short maxsp;
  /* this+0x32 */ short xPos;
  /* this+0x34 */ short yPos;
  /* this+0x36 */ short speed;
  /* this+0x38 */ short jobpoint;
  /* this+0x3a */ short sxPos;
  /* this+0x3c */ short syPos;
  /* this+0x3e */ short job;
  /* this+0x40 */ short clevel;
  /* this+0x42 */ short sppoint;
  /* this+0x44 */ short head;
  /* this+0x46 */ short weapon;
  /* this+0x48 */ short accessory;
  /* this+0x4a */ short accessory2;
  /* this+0x4c */ short accessory3;
  /* this+0x4e */ short headpalette;
  /* this+0x50 */ short bodypalette;
  /* this+0x52 */ short cookMastery;
  /* this+0x54 */ char[0x10] mapname;
  /* this+0x64 */ char[0x10] restartMapName;
  /* this+0x74 */ unsigned char Str;
  /* this+0x75 */ unsigned char Agi;
  /* this+0x76 */ unsigned char Vit;
  /* this+0x77 */ unsigned char Int;
  /* this+0x78 */ unsigned char Dex;
  /* this+0x79 */ unsigned char Luk;
  /* this+0x7a */ unsigned char haircolor;
  /* this+0x7b */ struct CHARINFO_TO_CHARACTERDB::tagParty Party;
  /* this+0x7c */ bool bOpenEquipmentWin;
  /* this+0x7d */ short font;
  /* this+0x7f */ short robe;
  /* this+0x81 */ int chrSlotChange;
  /* this+0x85 */ int charNameChangeCnt;
}

struct __s_GUID {
  /* this+0x0 */ unsigned long Data1;
  /* this+0x4 */ unsigned short Data2;
  /* this+0x6 */ unsigned short Data3;
  /* this+0x8 */ unsigned char[0x8] Data4;
}

struct PACKET_ZC_RESURRECTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short type;
}

struct tagMCI_ANIM_UPDATE_PARMS {
  /* this+0x0 */ unsigned long dwCallback;
  /* this+0x4 */ struct tagRECT rc;
  /* this+0x14 */ struct HDC__ * hDC;
}

struct PACKET_ZC_SHANDA_PROTECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Len;
  /* this+0x4 */ short CodeLen;
}

struct PACKET_ZC_FATIGUE_CHN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Level;
  /* this+0x3 */ unsigned long TotalPlayTime;
}

struct PACKET_ZC_USE_ITEM_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ short count;
  /* this+0x6 */ bool result;
}

struct PACKET_CZ_REQ_BUY_FROMMC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_PROPERTY_HOMUN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] szName;
  /* this+0x1a */ unsigned char bModified;
  /* this+0x1b */ short nLevel;
  /* this+0x1d */ short nFullness;
  /* this+0x1f */ short nRelationship;
  /* this+0x21 */ unsigned short ITID;
  /* this+0x23 */ short atk;
  /* this+0x25 */ short Matk;
  /* this+0x27 */ short hit;
  /* this+0x29 */ short critical;
  /* this+0x2b */ short def;
  /* this+0x2d */ short Mdef;
  /* this+0x2f */ short flee;
  /* this+0x31 */ short aspd;
  /* this+0x33 */ short hp;
  /* this+0x35 */ short maxHP;
  /* this+0x37 */ short sp;
  /* this+0x39 */ short maxSP;
  /* this+0x3b */ int exp;
  /* this+0x3f */ int maxEXP;
  /* this+0x43 */ short SKPoint;
  /* this+0x45 */ short ATKRange;
}

struct _FILE_REMOTE_PROTOCOL_INFO {
  /* this+0x0 */ unsigned short StructureVersion;
  /* this+0x2 */ unsigned short StructureSize;
  /* this+0x4 */ unsigned long Protocol;
  /* this+0x8 */ unsigned short ProtocolMajorVersion;
  /* this+0xa */ unsigned short ProtocolMinorVersion;
  /* this+0xc */ unsigned short ProtocolRevision;
  /* this+0xe */ unsigned short Reserved;
  /* this+0x10 */ unsigned long Flags;
  /* this+0x14 */ struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-GenericReserved> GenericReserved;
  /* this+0x34 */ struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-ProtocolSpecificReserved> ProtocolSpecificReserved;
}

struct PACKET_ZC_SOUND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] fileName;
  /* this+0x1a */ unsigned char act;
  /* this+0x1b */ unsigned long term;
  /* this+0x1f */ unsigned long NAID;
}

struct PACKET_ZC_PARTY_RECRUIT_VOLUNTEER_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int Job;
  /* this+0xa */ short Level;
  /* this+0xc */ char[0x18] CharName;
}

struct PACKET_ZC_NOTIFY_PLAYERMOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long moveStartTime;
  /* this+0x6 */ unsigned char[0x6] MoveData;
}

struct PACKET_ZC_CART_EQUIPMENT_ITEMLIST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_CLOSE_DIALOG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long NAID;
}

struct PACKET_ZC_CART_EQUIPMENT_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_SHORTCUT_KEY_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct tagShortCutKey[0x1b] ShortCutKey;
}

struct PACKET_ZC_NOTIFY_STOREITEM_COUNTINFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short curCount;
  /* this+0x4 */ short maxCount;
}

struct PACKET_CZ_MACRO_REQUEST_MOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x3] dest;
}

struct PACKET_HC_ACK_CHANGE_CHARACTERNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwResult;
}

struct PACKET_CZ_REQ_CLICK_TO_BUYING_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long makerAID;
}

struct PACKET_CZ_REQ_TRADE_BUYING_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long makerAID;
  /* this+0x8 */ unsigned long StoreID;
}

struct PACKET_CZ_USE_SKILL_TOGROUND2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short selectedLevel;
  /* this+0x4 */ unsigned short SKID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
}

struct PACKET_ZC_PARTY_BOOKING_ACK_SEARCH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ bool IsExistMoreResult;
}

struct PACKET_CA_LOGIN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Version;
  /* this+0x6 */ unsigned char[0x18] ID;
  /* this+0x1e */ unsigned char[0x18] Passwd;
  /* this+0x36 */ unsigned char clienttype;
}

struct PACKET_ZC_ALL_QUEST_LIST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ int QuestCount;
}

struct PURCHASE_ITEM_FROMMC {
  /* this+0x0 */ int price;
  /* this+0x4 */ short count;
  /* this+0x6 */ short index;
  /* this+0x8 */ unsigned char type;
  /* this+0x9 */ unsigned short ITID;
  /* this+0xb */ bool IsIdentified;
  /* this+0xc */ bool IsDamaged;
  /* this+0xd */ unsigned char refiningLevel;
  /* this+0xe */ struct EQUIPSLOTINFO slot;
}

struct PACKET_ZC_SKILL_POSTDELAY_LIST::tagSkillPostDelay {
  /* this+0x0 */ unsigned short SKID;
  /* this+0x2 */ unsigned long DelayTM;
}

struct PACKET_ZC_SKILL_POSTDELAY_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CH_MAKE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x4] SecondPWIdx;
}

struct PACKET_CZ_MAIL_GET_LIST {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_ACTIVE_QUEST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long questID;
  /* this+0x6 */ bool active;
}

struct PACKET_ZC_SE_PC_BUY_CASHITEM_RESULT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long item_id;
  /* this+0x6 */ short result;
  /* this+0x8 */ int update_cash_point;
}

struct PACKET_ZC_ITEMLISTWIN_OPEN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ enum ItemListWinPacket::Type Type;
}

struct FILE_ID_DESCRIPTOR {
  /* this+0x0 */ unsigned long dwSize;
  /* this+0x4 */ enum _FILE_ID_TYPE Type;
  /* this+0x8 */ union _LARGE_INTEGER FileId;
  /* this+0x8 */ struct _GUID ObjectId;
}

struct PACKET_CZ_LESSEFFECT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int isLess;
}

struct PACKET_CZ_REQ_JOIN_BABY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_BLACKSMITH_POINT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Point;
  /* this+0x6 */ int TotalPoint;
}

struct _stat32 {
  /* this+0x0 */ unsigned int st_dev;
  /* this+0x4 */ unsigned short st_ino;
  /* this+0x6 */ unsigned short st_mode;
  /* this+0x8 */ short st_nlink;
  /* this+0xa */ short st_uid;
  /* this+0xc */ short st_gid;
  /* this+0x10 */ unsigned int st_rdev;
  /* this+0x14 */ long st_size;
  /* this+0x18 */ long st_atime;
  /* this+0x1c */ long st_mtime;
  /* this+0x20 */ long st_ctime;
}

struct PACKET_CZ_MAKE_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] groupName;
}

struct CHARACTER_LIST {
  /* this+0x0 */ unsigned long dwGID;
  /* this+0x4 */ unsigned char SlotIdx;
}

struct PACKET_CZ_SEEK_PARTY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Option;
}

struct PACKET_CZ_ITEM_THROW {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ short count;
}

struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-GenericReserved> {
  /* this+0x0 */ unsigned long[0x8] Reserved;
}

struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-ProtocolSpecificReserved> {
  /* this+0x0 */ unsigned long[0x10] Reserved;
}

struct PACKET_CZ_SIMPLE_BUY_CASH_POINT_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ short count;
}

union _IMAGE_THUNK_DATA64::<unnamed-type-u1> {
  /* this+0x0 */ unsigned __int64 ForwarderString;
  /* this+0x0 */ unsigned __int64 Function;
  /* this+0x0 */ unsigned __int64 Ordinal;
  /* this+0x0 */ unsigned __int64 AddressOfData;
}

struct PACKET_CZ_MACRO_USE_SKILL_TOGROUND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ short selectedLevel;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
}

struct PACKET_ZC_MSG_SKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ int MSGID;
}

struct PACKET_ZC_REFUSE_ENTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ErrorCode;
}

struct __m128d {
  /* this+0x0 */ double[0x2] m128d_f64;
}

struct PACKET_CZ_REQ_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ int GDID;
  /* this+0x8 */ int emblemVersion;
}

struct PACKET_ZC_CHANGESTATE_PET {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char type;
  /* this+0x3 */ int GID;
  /* this+0x7 */ int data;
}

struct PACKET_ZC_ALCHEMIST_RANK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18][0xa] Name;
  /* this+0xf2 */ int[0xa] Point;
}

struct PACKET_CZ_SEARCH_STORE_INFO_NEXT_PAGE {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_PARTY_RECRUIT_NOTIFY_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Index;
}

struct PACKET_ZC_MENU_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long NAID;
}

struct PACKET_CZ_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_MONSTER_TALK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char stateId;
  /* this+0x7 */ unsigned char skillId;
  /* this+0x8 */ unsigned char arg1;
}

struct PACKET_ZC_PARTY_BOOKING_ACK_REGISTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
}

struct _IMAGE_SYMBOL_EX::<unnamed-type-N>::<unnamed-type-Name> {
  /* this+0x0 */ unsigned long Short;
  /* this+0x4 */ unsigned long Long;
}

struct PACKET_ZC_SHOWSCRIPT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
}

struct PACKET_ZC_UPDATE_CHARSTAT2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int status;
  /* this+0xe */ short sex;
  /* this+0x10 */ short head;
  /* this+0x12 */ short headPalette;
}

struct PACKET_ZC_IRMAIL_NOTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct IRMAILID MailID;
}

struct PACKET_ZC_AUCTION_WINDOWS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Type;
}

struct PACKET_CZ_REQ_STATUS_GM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] CharName;
}

struct PACKET_CH_DELETE_CHAR3_RESERVED {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
}

struct PACKET_CZ_REQUEST_ACTNPC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned long targetGID;
  /* this+0xa */ unsigned char action;
}

struct PACKET_ZC_START_BABY {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_NOTIFY_MOVEENTRY8 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char objecttype;
  /* this+0x5 */ unsigned long GID;
  /* this+0x9 */ short speed;
  /* this+0xb */ short bodyState;
  /* this+0xd */ short healthState;
  /* this+0xf */ int effectState;
  /* this+0x13 */ short job;
  /* this+0x15 */ short head;
  /* this+0x17 */ int weapon;
  /* this+0x1b */ short accessory;
  /* this+0x1d */ unsigned long moveStartTime;
  /* this+0x21 */ short accessory2;
  /* this+0x23 */ short accessory3;
  /* this+0x25 */ short headpalette;
  /* this+0x27 */ short bodypalette;
  /* this+0x29 */ short headDir;
  /* this+0x2b */ short robe;
  /* this+0x2d */ unsigned long GUID;
  /* this+0x31 */ short GEmblemVer;
  /* this+0x33 */ short honor;
  /* this+0x35 */ int virtue;
  /* this+0x39 */ bool isPKModeON;
  /* this+0x3a */ unsigned char sex;
  /* this+0x3b */ unsigned char[0x6] MoveData;
  /* this+0x41 */ unsigned char xSize;
  /* this+0x42 */ unsigned char ySize;
  /* this+0x43 */ short clevel;
  /* this+0x45 */ short font;
}

struct PACKET_CZ_MAIL_ADD_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
}

struct PACKET_ZC_UPDATE_CHARSTAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ int status;
}

struct PACKET_ZC_ACK_MAIL_DELETE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MailID;
  /* this+0x6 */ unsigned short Result;
}

struct PACKET_CZ_REQ_GUILD_MENU {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Type;
}

struct PACKET_ZC_EL_INIT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int AID;
  /* this+0x6 */ int hp;
  /* this+0xa */ int maxHP;
  /* this+0xe */ int sp;
  /* this+0x12 */ int maxSP;
}

struct PACKET_ZC_NOTIFY_VANISH {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ unsigned char type;
}

struct PACKET_CZ_REPLY_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Result;
  /* this+0x3 */ char[0x18] EntryQueueName;
  /* this+0x1b */ char[0x18] LobbyName;
}

struct PACKET_CZ_REQ_MAKE_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x18] GName;
}

struct PACKET_ZC_CASH_TIME_COUNTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned long RemainSecond;
}

struct PACKET_ZC_HIGHJUMP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
}

struct PACKET_CZ_USE_SKILL_TOGROUND_WITHTALKBOX2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short selectedLevel;
  /* this+0x4 */ unsigned short SKID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
  /* this+0xa */ char[0x50] contents;
}

struct PACKET_CH_REQ_IS_VALID_CHARNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long dwAID;
  /* this+0x6 */ unsigned long dwGID;
  /* this+0xa */ char[0x18] szCharName;
}

struct PACKET_ZC_TRYCAPTURE_MONSTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_CH_DELETE_CHAR3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ char[0x6] Birth;
}

struct PACKET_ZC_BATTLE_FIELD_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short Count;
  /* this+0x6 */ short ack_type;
}

struct PACKET_ZC_BLACKSMITH_RANK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18][0xa] Name;
  /* this+0xf2 */ int[0xa] Point;
}

struct PACKET_ZC_MYGUILD_BASIC_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_ACK_SE_CASH_ITEM_LIST2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long OpenIdentity;
  /* this+0x8 */ short item_count;
}

struct PACKET_ZC_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GRID;
  /* this+0x6 */ char[0x18] groupName;
}

struct PACKET_ZC_ACK_TAKEOFF_EQUIP_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short index;
  /* this+0x4 */ unsigned long wearLocation;
  /* this+0x8 */ unsigned char result;
}

struct HSTR__ {
  /* this+0x0 */ int unused;
}

struct PACKET_CZ_REQUEST_MOVETOOWNER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
}

struct PACKET_ZC_SEARCH_STORE_INFO_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ bool IsFirstPage;
  /* this+0x5 */ bool IsNexPage;
  /* this+0x6 */ unsigned char RemainedSearchCnt;
}

struct PACKET_ZC_SPIRITS2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short num;
}

struct PACKET_ZC_NPC_SHOWEFST_UPDATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int effectState;
  /* this+0xa */ int clevel;
  /* this+0xe */ int showEFST;
}

struct PACKET_ZC_IRMAIL_SEND_RES {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char Result;
}

struct PACKET_CZ_WHISPER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ char[0x18] receiver;
}

struct PACKET_CZ_CHANGE_GROUPEXPOPTION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long expOption;
}

struct PACKET_CZ_CANCEL_BATTLE_FIELD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long BFNO;
}

struct PACKET_ZC_UPDATE_GDID {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ int emblemVersion;
  /* this+0xa */ int right;
  /* this+0xe */ bool isMaster;
  /* this+0xf */ int InterSID;
  /* this+0x13 */ char[0x18] GName;
}

struct PACKET_ZC_MSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short msg;
}

struct PACKET_ZC_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] characterName;
  /* this+0x1a */ enum PACKET_ZC_PARTY_JOIN_REQ_ACK::enumAnswer answer;
}

struct PACKET_CZ_ITEM_CREATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] itemName;
}

struct PACKET_ZC_BABYMSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int MsgNo;
}

struct PACKET_ZC_PROGRESS_CANCEL {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_NOTIFY_SKILL_POSITION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long targetID;
  /* this+0xc */ unsigned long startTime;
  /* this+0x10 */ int attackMT;
  /* this+0x14 */ int attackedMT;
  /* this+0x18 */ short xPos;
  /* this+0x1a */ short yPos;
  /* this+0x1c */ short damage;
  /* this+0x1e */ short level;
  /* this+0x20 */ short count;
  /* this+0x22 */ unsigned char action;
}

struct PACKET_CZ_GUILD_NOTICE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ char[0x3c] subject;
  /* this+0x42 */ char[0x78] notice;
}

struct PACKET_ZC_ACK_ITEMLIST_BUYING_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long makerAID;
  /* this+0x8 */ unsigned long StoreID;
  /* this+0xc */ int limitZeny;
}

struct PACKET_ZC_CANCEL_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQ_ITEMCOMPOSITION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short cardIndex;
  /* this+0x4 */ short equipIndex;
}

struct PACKET_CZ_GUILD_CHAT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct _ACL_REVISION_INFORMATION {
  /* this+0x0 */ unsigned long AclRevision;
}

struct PACKET_ZC_ACK_STATUS_GM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char str;
  /* this+0x3 */ unsigned char standardStr;
  /* this+0x4 */ unsigned char agi;
  /* this+0x5 */ unsigned char standardAgi;
  /* this+0x6 */ unsigned char vit;
  /* this+0x7 */ unsigned char standardVit;
  /* this+0x8 */ unsigned char Int;
  /* this+0x9 */ unsigned char standardInt;
  /* this+0xa */ unsigned char dex;
  /* this+0xb */ unsigned char standardDex;
  /* this+0xc */ unsigned char luk;
  /* this+0xd */ unsigned char standardLuk;
  /* this+0xe */ short attPower;
  /* this+0x10 */ short refiningPower;
  /* this+0x12 */ short max_mattPower;
  /* this+0x14 */ short min_mattPower;
  /* this+0x16 */ short itemdefPower;
  /* this+0x18 */ short plusdefPower;
  /* this+0x1a */ short mdefPower;
  /* this+0x1c */ short plusmdefPower;
  /* this+0x1e */ short hitSuccessValue;
  /* this+0x20 */ short avoidSuccessValue;
  /* this+0x22 */ short plusAvoidSuccessValue;
  /* this+0x24 */ short criticalSuccessValue;
  /* this+0x26 */ short ASPD;
  /* this+0x28 */ short plusASPD;
}

struct PACKET_ZC_ADD_ITEM_TO_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
  /* this+0x8 */ unsigned short ITID;
  /* this+0xa */ bool IsIdentified;
  /* this+0xb */ bool IsDamaged;
  /* this+0xc */ unsigned char refiningLevel;
  /* this+0xd */ struct EQUIPSLOTINFO slot;
}

struct PACKET_CZ_REQ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType;
}

struct PACKET_ZC_FAILED_OPEN_BUYING_STORE_TO_BUYER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
  /* this+0x4 */ int total_weight;
}

struct _wfinddata32i64_t {
  /* this+0x0 */ unsigned int attrib;
  /* this+0x4 */ long time_create;
  /* this+0x8 */ long time_access;
  /* this+0xc */ long time_write;
  /* this+0x10 */ __int64 size;
  /* this+0x18 */ wchar_t[0x104] name;
}

struct PACKET_ZC_ACK_BEFORE_WORLD_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] WorldName;
  /* this+0x1a */ char[0x18] CharName;
}

struct PACKET_ZC_BATTLE_JOIN_NOTI_DEFER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long BFNO;
}

struct PACKET_ZC_RESTART_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
}

struct PACKET_ZC_POSITION_ID_NAME_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct GUILD_POSITION_INFO {
  /* this+0x0 */ int positionID;
  /* this+0x4 */ int right;
  /* this+0x8 */ int ranking;
  /* this+0xc */ int payRate;
}

struct PACKET_ZC_STORE_NORMAL_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_ADD_ITEM_TO_STORE2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ int count;
  /* this+0x8 */ unsigned short ITID;
  /* this+0xa */ unsigned char type;
  /* this+0xb */ bool IsIdentified;
  /* this+0xc */ bool IsDamaged;
  /* this+0xd */ unsigned char refiningLevel;
  /* this+0xe */ struct EQUIPSLOTINFO slot;
}

struct PACKET_HC_WAITING_LOGIN {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ int CurWaitingNum;
}

struct PACKET_ZC_ACK_ITEMREPAIR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ unsigned char result;
}

struct PACKET_CZ_PC_SELL_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
}

struct PACKET_ZC_CART_ITEMLIST_EQUIP_V5 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_AUTOSPELLLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int[0x7] SKID;
}

struct PACKET_CZ_REQ_CLOSESTORE {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CA_PT_ID_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x15] szPTID;
  /* this+0x17 */ char[0x15] szPTNumID;
}

struct PACKET_ZC_ACK_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Index;
  /* this+0x4 */ unsigned char result;
}

struct EQUIPMENTITEM_EXTRAINFO301 {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ bool IsIdentified;
  /* this+0x6 */ unsigned short location;
  /* this+0x8 */ unsigned short WearState;
  /* this+0xa */ bool IsDamaged;
  /* this+0xb */ unsigned char RefiningLevel;
  /* this+0xc */ struct EQUIPSLOTINFO slot;
  /* this+0x14 */ long HireExpireDate;
  /* this+0x18 */ unsigned short bindOnEquipType;
  /* this+0x1a */ unsigned short wItemSpriteNumber;
}

struct PACKET_ZC_EQUIPMENT_ITEMLIST3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_ZC_NOTIFY_NEWENTRY4 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ short speed;
  /* this+0x8 */ short bodyState;
  /* this+0xa */ short healthState;
  /* this+0xc */ int effectState;
  /* this+0x10 */ short job;
  /* this+0x12 */ short head;
  /* this+0x14 */ int weapon;
  /* this+0x18 */ short accessory;
  /* this+0x1a */ short accessory2;
  /* this+0x1c */ short accessory3;
  /* this+0x1e */ short headpalette;
  /* this+0x20 */ short bodypalette;
  /* this+0x22 */ short headDir;
  /* this+0x24 */ unsigned long GUID;
  /* this+0x28 */ short GEmblemVer;
  /* this+0x2a */ short honor;
  /* this+0x2c */ int virtue;
  /* this+0x30 */ bool isPKModeON;
  /* this+0x31 */ unsigned char sex;
  /* this+0x32 */ unsigned char[0x3] PosDir;
  /* this+0x35 */ unsigned char xSize;
  /* this+0x36 */ unsigned char ySize;
  /* this+0x37 */ short clevel;
  /* this+0x39 */ short font;
}

struct PACKET_ZC_NOTIFY_NEWENTRY7 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned char objecttype;
  /* this+0x5 */ unsigned long GID;
  /* this+0x9 */ short speed;
  /* this+0xb */ short bodyState;
  /* this+0xd */ short healthState;
  /* this+0xf */ int effectState;
  /* this+0x13 */ short job;
  /* this+0x15 */ short head;
  /* this+0x17 */ int weapon;
  /* this+0x1b */ short accessory;
  /* this+0x1d */ short accessory2;
  /* this+0x1f */ short accessory3;
  /* this+0x21 */ short headpalette;
  /* this+0x23 */ short bodypalette;
  /* this+0x25 */ short headDir;
  /* this+0x27 */ short robe;
  /* this+0x29 */ unsigned long GUID;
  /* this+0x2d */ short GEmblemVer;
  /* this+0x2f */ short honor;
  /* this+0x31 */ int virtue;
  /* this+0x35 */ bool isPKModeON;
  /* this+0x36 */ unsigned char sex;
  /* this+0x37 */ unsigned char[0x3] PosDir;
  /* this+0x3a */ unsigned char xSize;
  /* this+0x3b */ unsigned char ySize;
  /* this+0x3c */ short clevel;
  /* this+0x3e */ short font;
  /* this+0x40 */ int maxHP;
  /* this+0x44 */ int HP;
  /* this+0x48 */ unsigned char isBoss;
}

struct PACKET_COLLECTORDEAD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ServerID;
}

struct PACKET_ZC_INVENTORY_TAB {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Index;
  /* this+0x4 */ bool NORMALorPRIVATE;
}

struct HMIXEROBJ__ {
  /* this+0x0 */ int unused;
}

struct PACKET_ZC_COUPLENAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] CoupleName;
}

struct PACKET_HC_NOTIFY_ACCESSIBLE_MAPNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
}

struct PACKET_CZ_REQUEST_MOVE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char[0x3] dest;
}

struct PACKET_CZ_DISCONNECT_ALL_CHARACTER {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_SE_PC_BUY_CASHITEM_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short item_count;
}

struct PACKET_ZC_GAMEGUARD_LINGO_KEY {
  /* this+0x0 */ short packetType;
  /* this+0x2 */ struct PGG_LINGO_KEY_TEMP lingoKey;
}

struct PACKET_ZC_MSG_STATE_CHANGE3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ bool state;
  /* this+0x9 */ unsigned long MaxMS;
  /* this+0xd */ unsigned long RemainMS;
  /* this+0x11 */ int[0x3] val;
}

struct PACKET_ZC_SHORTCUT_KEY_LIST_V2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct tagShortCutKey[0x26] ShortCutKey;
}

struct PACKET_ZC_ACK_REQNAME {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x18] CName;
}

struct PACKET_ZC_DELETE_MEMBER_FROM_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ char[0x18] characterName;
  /* this+0x1e */ unsigned char result;
}

struct PACKET_CZ_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char ClientType;
  /* this+0x3 */ unsigned char[0x10] HashValue;
}

struct PACKET_HC_DELETE_CHAR3_CANCEL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ int Result;
}

struct PACKET_CZ_RENAME_PET {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x18] szName;
}

struct PACKET_ZC_MYITEMLIST_BUYING_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ int limitZeny;
}

struct PACKET_ZC_ACK_EXCHANGE_ITEM2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
  /* this+0x3 */ unsigned long GID;
  /* this+0x7 */ short level;
}

struct PACKET_ZC_REQ_BABY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long GID;
  /* this+0xa */ char[0x18] name;
}

struct PACKET_ZC_ITEM_DISAPPEAR {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long ITAID;
}

struct PACKET_ZC_MVP_GETTING_SPECIAL_EXP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long exp;
}

struct PACKET_ZC_FORMATSTRING_MSG {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned short msg;
}

struct DISPLAYCONFIG_TARGET_DEVICE_NAME {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header;
  /* this+0x14 */ struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
  /* this+0x18 */ enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
  /* this+0x1c */ unsigned short edidManufactureId;
  /* this+0x1e */ unsigned short edidProductCodeId;
  /* this+0x20 */ unsigned int connectorInstance;
  /* this+0x24 */ wchar_t[0x40] monitorFriendlyDeviceName;
  /* this+0xa4 */ wchar_t[0x80] monitorDevicePath;
}

struct PACKET_ZC_MEMORIALDUNGEON_SUBSCRIPTION_INFO {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ char[0x3d] MemorialDungeonName;
  /* this+0x3f */ short PriorityOrderNum;
}

struct PACKET_ZC_EQUIPMENT_ITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Length;
}

struct PACKET_CZ_EQUIPWIN_MICROSCOPE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_ZC_RECOVERY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short varID;
  /* this+0x4 */ short amount;
}

struct PACKET_ZC_OTHER_GUILD_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_REGISTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ struct PARTY_RECRUIT_DETAIL regsiterInfo;
}

struct PACKET_ZC_MAIL_WINDOWS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Type;
}

struct PACKET_CZ_SETTING_WHISPER_STATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char type;
}

struct PACKET_AC_SSO_LOGIN_ACK {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short Result;
}

struct PACKET_CA_REQ_HASH {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_MAIL_SEND {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ char[0x18] ReceiveName;
  /* this+0x1c */ char[0x28] Header;
}

struct PACKET_CZ_MACRO_REQUEST_ACT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char action;
  /* this+0x3 */ unsigned long targetGID;
}

struct PACKET_ZC_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GRID;
  /* this+0x6 */ char[0x18] groupName;
}

struct PACKET_ZC_QUEST_MISSION_INFO {
  /* this+0x0 */ unsigned long questID;
  /* this+0x4 */ long quest_svrTime;
  /* this+0x8 */ long quest_endTime;
  /* this+0xc */ short count;
  /* this+0xe */ struct PACKET_ZC_MISSION_HUNT[0x3] hunt;
}

struct PACKET_HC_DELETE_CHAR3 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GID;
  /* this+0x6 */ int Result;
}

struct PACKET_ZC_PC_PURCHASE_MYITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long AID;
}

struct PACKET_CZ_REQ_BAN_GUILD {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long GDID;
  /* this+0x6 */ int AID;
  /* this+0xa */ int GID;
  /* this+0xe */ char[0x28] reasonDesc;
}

struct _stat64i32 {
  /* this+0x0 */ unsigned int st_dev;
  /* this+0x4 */ unsigned short st_ino;
  /* this+0x6 */ unsigned short st_mode;
  /* this+0x8 */ short st_nlink;
  /* this+0xa */ short st_uid;
  /* this+0xc */ short st_gid;
  /* this+0x10 */ unsigned int st_rdev;
  /* this+0x14 */ long st_size;
  /* this+0x18 */ __int64 st_atime;
  /* this+0x20 */ __int64 st_mtime;
  /* this+0x28 */ __int64 st_ctime;
}

struct PACKET_ZC_NOTIFY_POSITION_TO_GROUPM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ short xPos;
  /* this+0x8 */ short yPos;
}

struct PACKET_CZ_OPEN_SIMPLE_CASHSHOP_ITEMLIST {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CZ_REQ_OPEN_BUYING_STORE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long LimitZeny;
  /* this+0x8 */ unsigned char result;
  /* this+0x9 */ char[0x50] storeName;
}

struct PACKET_ZC_BLADESTOP {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long srcAID;
  /* this+0x6 */ unsigned long destAID;
  /* this+0xa */ int flag;
}

struct PACKET_ZC_REPAIRITEMLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
}

struct PACKET_ZC_HUNTINGLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Len;
}

struct PACKET_CZ_REQ_ITEMIDENTIFY {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short index;
}

struct PACKET_ZC_UPDATE_MISSION_HUNT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ short count;
}

struct PACKET_CZ_MACRO_USE_SKILL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short SKID;
  /* this+0x4 */ short selectedLevel;
  /* this+0x6 */ unsigned long targetID;
}

struct PACKET_ZC_PC_PURCHASE_RESULT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_ZC_ACK_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char result;
}

struct PACKET_ZC_DEVOTIONLIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long myAID;
  /* this+0x6 */ unsigned long[0x5] AID;
  /* this+0x1a */ short range;
}

struct PACKET_ZC_ATTACK_RANGE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short currentAttRange;
}

struct PACKET_CZ_REQUEST_ACT2 {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long targetGID;
  /* this+0x6 */ unsigned char action;
}

struct PACKET_CZ_PARTY_RECRUIT_ACK_RECALL {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned char Result;
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_POSITION {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long accountID;
  /* this+0x6 */ char[0x18] name;
  /* this+0x1e */ unsigned short job;
  /* this+0x20 */ short x;
  /* this+0x22 */ short y;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5::ITEM {
  /* this+0x0 */ short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ unsigned char type;
  /* this+0x5 */ short count;
  /* this+0x7 */ unsigned long WearState;
  /* this+0xb */ struct EQUIPSLOTINFO slot;
  /* this+0x13 */ long HireExpireDate;
  /* this+0x17 */ struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5::ITEM::<unnamed-type-Flag> Flag;
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5::ITEM::<unnamed-type-Flag> {
    }

struct PACKET_ZC_START_CAPTURE {
  /* this+0x0 */ short PacketType;
}

struct PACKET_CH_DELETE_CHAR3_EXT {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short PacketLength;
  /* this+0x4 */ unsigned long GID;
}

union __m256 {
  /* this+0x0 */ float[0x8] m256_f32;
}

struct PACKET_CZ_REQ_WEAPONREFINE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ int Index;
}

struct TRADE_ITEM_BUYING_STORE {
  /* this+0x0 */ unsigned short index;
  /* this+0x2 */ unsigned short ITID;
  /* this+0x4 */ short count;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *>,int,std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> const *,std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ struct CUserMgr::SERVER_MOVE_USER * second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned long const ,USER_STRING_MAP_DATA *>,int,std::pair<unsigned long const ,USER_STRING_MAP_DATA *> const *,std::pair<unsigned long const ,USER_STRING_MAP_DATA *> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > > {
}

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> {
  /* this+0x0 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* this+0x1c */ struct USER_STRING_MAP_DATA * second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<unsigned long const ,USER_STRING_MAP_DATA *> {
  /* this+0x0 */ const unsigned long first;
  /* this+0x4 */ struct USER_STRING_MAP_DATA * second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> >,0> > > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *>,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> >,0> > > {
}

struct PACKET_IZ_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long FriendAID;
  /* this+0xa */ unsigned long FriendGID;
}

struct PACKET_IZ_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
}

struct PACKET_IZ_FRIENDS_STATE {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long AID;
  /* this+0x6 */ unsigned long FriendAID;
  /* this+0xa */ unsigned long FriendGID;
  /* this+0xe */ bool State;
}

struct PACKET_IZ_ACK_LOGON {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned long Type;
  /* this+0x6 */ unsigned long AID;
  /* this+0xa */ unsigned long GID;
}

struct PACKET_IZ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ short Result;
  /* this+0x4 */ unsigned long AID;
  /* this+0x8 */ unsigned long FriendAID;
  /* this+0xc */ unsigned long FriendGID;
  /* this+0x10 */ char[0x18] Name;
}

struct PACKET_IZ_FRIENDS_LIST {
  /* this+0x0 */ short PacketType;
  /* this+0x2 */ unsigned short PacketLength;
  /* this+0x4 */ unsigned long AID;
}

struct std::_Pair_base<int const ,_SERVERINFO *> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct _SERVERINFO * second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,_SERVERINFO *>,int,std::pair<int const ,_SERVERINFO *> const *,std::pair<int const ,_SERVERINFO *> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> >,0> > > {
}

class CODBCHandler {
  /* this+0x4 */ bool m_bOK;
  /* this+0x8 */ class CODBC * m_cpODBC;
  /* this+0xc */ void * m_hStmt;
}

class `anonymous-namespace'::lcDataTransferKeyGenerator {
  /* this+0x4 */ unsigned int m_Cnt;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,N3DataTransferMgr::lcData>,int,std::pair<unsigned int const ,N3DataTransferMgr::lcData> const *,std::pair<unsigned int const ,N3DataTransferMgr::lcData> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<unsigned int const ,N3DataTransferMgr::lcData> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class N3DataTransferMgr::lcData second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> >,0> > > {
}

struct std::_Pair_base<unsigned int,N3Inter *> {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ class N3Inter * second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,N3Inter *>,int,std::pair<unsigned int const ,N3Inter *> const *,std::pair<unsigned int const ,N3Inter *> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<unsigned int const ,N3Inter *> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class N3Inter * second;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct NIPAddapter::__l2::threadBuffer second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,`NIPAddapter'::`2'::threadBuffer>,int,std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> const *,std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> const &,std::_Iterator_base0> {
}

struct std::pair<int,`NIPAddapter'::`2'::threadBuffer> {
  /* this+0x0 */ int first;
  /* this+0x4 */ struct NIPAddapter::__l2::threadBuffer second;
}

class std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> > {
}

class std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0>::value_compare {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Ptr;
}

struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> _Myval;
  /* this+0x20 */ char _Color;
  /* this+0x21 */ char _Isnil;
}

class std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> > _Alval;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > > {
}

class std::_Tree<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> > _Alval;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > > > {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<int,`NIPAddapter'::`2'::threadBuffer> {
  /* this+0x0 */ int first;
  /* this+0x4 */ struct NIPAddapter::__l2::threadBuffer second;
}

struct NIPAddapter::__l2::threadBuffer {
}

struct std::_Allocator_base<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> > {
}

struct std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >::rebind<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> > {
}

struct std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node> {
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node> {
}

class std::map<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> > _Alval;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Ptr;
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node> {
}

struct std::_Pair_base<int const ,`NIPAddapter'::`2'::threadBuffer> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct NIPAddapter::__l2::threadBuffer second;
}

class std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`NIPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,`NIPAddapter'::`2'::threadBuffer> > _Alval;
}

struct std::_Pair_base<unsigned int const ,std::vector<char,std::allocator<char> > > {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class std::vector<char,std::allocator<char> > second;
}

struct std::_Pair_base<unsigned int,std::vector<char,std::allocator<char> > > {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ class std::vector<char,std::allocator<char> > second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,std::vector<char,std::allocator<char> > >,int,std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > const *,std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> >::_Node * _Ptr;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > > {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > >,0> > > first;
  /* this+0x4 */ bool second;
}

class `anonymous-namespace'::N3ObjectIDGenerator {
  /* this+0x4 */ unsigned int m_Num;
}

struct $_TypeDescriptor$_extraBytes_39 {
  /* this+0x0 */ const void * pVFTable;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x27] name;
}

struct std::_Allocator_base<std::_Container_proxy> {
}

class std::allocator<std::_Container_proxy> {
}

struct std::allocator<N3MessageQueue::lcData>::rebind<std::_Container_proxy> {
}

class std::_Deque_unchecked_const_iterator<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > {
}

class std::_Deque_unchecked_iterator<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > {
}

struct std::_Pair_base<bool,char *> {
  /* this+0x0 */ bool first;
  /* this+0x4 */ char * second;
}

struct std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,CMapInfo>,int,std::pair<unsigned int const ,CMapInfo> const *,std::pair<unsigned int const ,CMapInfo> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > {
}

struct std::pair<bool,char *> {
  /* this+0x0 */ bool first;
  /* this+0x4 */ char * second;
}

struct std::_Pair_base<int,bool> {
  /* this+0x0 */ int first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned int const ,CMapInfo> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class CMapInfo second;
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<int,CPacketLengthExMgr::CData> {
  /* this+0x0 */ int first;
  /* this+0x4 */ class CPacketLengthExMgr::CData second;
}

struct std::_Pair_base<int const ,CPacketLengthExMgr::CData> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class CPacketLengthExMgr::CData second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,CPacketLengthExMgr::CData>,int,std::pair<int const ,CPacketLengthExMgr::CData> const *,std::pair<int const ,CPacketLengthExMgr::CData> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > > {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> >,0> > > first;
  /* this+0x4 */ bool second;
}

union Value {
  /* this+0x0 */ union GCObject * gc;
  /* this+0x0 */ void * p;
  /* this+0x0 */ double n;
  /* this+0x0 */ int b;
}

struct Node {
  /* this+0x0 */ struct lua_TValue i_val;
  /* this+0x10 */ union TKey i_key;
}

struct <unnamed-tag> {
  /* this+0x0 */ union Value value;
  /* this+0x8 */ int tt;
  /* this+0xc */ struct Node * next;
}

struct lua_TValue {
  /* this+0x0 */ union Value value;
  /* this+0x8 */ int tt;
}

union TKey {
  /* this+0x0 */ struct <unnamed-tag> nk;
  /* this+0x0 */ struct lua_TValue tvk;
}

union GCObject {
  /* this+0x0 */ struct GCheader gch;
  /* this+0x0 */ union TString ts;
  /* this+0x0 */ union Udata u;
  /* this+0x0 */ union Closure cl;
  /* this+0x0 */ struct Table h;
  /* this+0x0 */ struct Proto p;
  /* this+0x0 */ struct UpVal uv;
  /* this+0x0 */ struct lua_State th;
}

struct global_State {
  /* this+0x0 */ struct stringtable strt;
  /* this+0xc */ function  * frealloc;
  /* this+0x10 */ void * ud;
  /* this+0x14 */ unsigned char currentwhite;
  /* this+0x15 */ unsigned char gcstate;
  /* this+0x18 */ int sweepstrgc;
  /* this+0x1c */ union GCObject * rootgc;
  /* this+0x20 */ union GCObject * * sweepgc;
  /* this+0x24 */ union GCObject * gray;
  /* this+0x28 */ union GCObject * grayagain;
  /* this+0x2c */ union GCObject * weak;
  /* this+0x30 */ union GCObject * tmudata;
  /* this+0x34 */ struct Mbuffer buff;
  /* this+0x40 */ unsigned int GCthreshold;
  /* this+0x44 */ unsigned int totalbytes;
  /* this+0x48 */ unsigned int estimate;
  /* this+0x4c */ unsigned int gcdept;
  /* this+0x50 */ int gcpause;
  /* this+0x54 */ int gcstepmul;
  /* this+0x58 */ function  * panic;
  /* this+0x60 */ struct lua_TValue l_registry;
  /* this+0x70 */ struct lua_State * mainthread;
  /* this+0x78 */ struct UpVal uvhead;
  /* this+0x98 */ struct Table *[0x9] mt;
  /* this+0xbc */ union TString *[0x11] tmname;
}

struct CallInfo {
  /* this+0x0 */ struct lua_TValue * base;
  /* this+0x4 */ struct lua_TValue * func;
  /* this+0x8 */ struct lua_TValue * top;
  /* this+0xc */ const unsigned int * savedpc;
  /* this+0x10 */ int nresults;
  /* this+0x14 */ int tailcalls;
}

struct lua_Debug {
  /* this+0x0 */ int event;
  /* this+0x4 */ const char * name;
  /* this+0x8 */ const char * namewhat;
  /* this+0xc */ const char * what;
  /* this+0x10 */ const char * source;
  /* this+0x14 */ int currentline;
  /* this+0x18 */ int nups;
  /* this+0x1c */ int linedefined;
  /* this+0x20 */ int lastlinedefined;
  /* this+0x24 */ char[0x3c] short_src;
  /* this+0x60 */ int i_ci;
}

struct lua_longjmp {
  /* this+0x0 */ struct lua_longjmp * previous;
  /* this+0x4 */ int[0x10] b;
  /* this+0x44 */ volatile int status;
}

struct CClosure {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x6 */ unsigned char isC;
  /* this+0x7 */ unsigned char nupvalues;
  /* this+0x8 */ union GCObject * gclist;
  /* this+0xc */ struct Table * env;
  /* this+0x10 */ function  * f;
  /* this+0x18 */ struct lua_TValue[0x1] upvalue;
}

struct LClosure {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x6 */ unsigned char isC;
  /* this+0x7 */ unsigned char nupvalues;
  /* this+0x8 */ union GCObject * gclist;
  /* this+0xc */ struct Table * env;
  /* this+0x10 */ struct Proto * p;
  /* this+0x14 */ struct UpVal *[0x1] upvals;
}

union Closure {
  /* this+0x0 */ struct CClosure c;
  /* this+0x0 */ struct LClosure l;
}

struct stringtable {
  /* this+0x0 */ union GCObject * * hash;
  /* this+0x4 */ unsigned int nuse;
  /* this+0x8 */ int size;
}

struct Mbuffer {
  /* this+0x0 */ char * buffer;
  /* this+0x4 */ unsigned int n;
  /* this+0x8 */ unsigned int buffsize;
}

struct UpVal {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x8 */ struct lua_TValue * v;
  /* this+0x10 */ union <unnamed-tag> u;
}

struct Table {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x6 */ unsigned char flags;
  /* this+0x7 */ unsigned char lsizenode;
  /* this+0x8 */ struct Table * metatable;
  /* this+0xc */ struct lua_TValue * array;
  /* this+0x10 */ struct Node * node;
  /* this+0x14 */ struct Node * lastfree;
  /* this+0x18 */ union GCObject * gclist;
  /* this+0x1c */ int sizearray;
}

union TString {
  /* this+0x0 */ union L_Umaxalign dummy;
  /* this+0x0 */ struct <unnamed-tag> tsv;
}

union L_Umaxalign {
  /* this+0x0 */ double u;
  /* this+0x0 */ void * s;
  /* this+0x0 */ long l;
}

struct LocVar {
  /* this+0x0 */ union TString * varname;
  /* this+0x4 */ int startpc;
  /* this+0x8 */ int endpc;
}

struct Proto {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
  /* this+0x8 */ struct lua_TValue * k;
  /* this+0xc */ unsigned int * code;
  /* this+0x10 */ struct Proto * * p;
  /* this+0x14 */ int * lineinfo;
  /* this+0x18 */ struct LocVar * locvars;
  /* this+0x1c */ union TString * * upvalues;
  /* this+0x20 */ union TString * source;
  /* this+0x24 */ int sizeupvalues;
  /* this+0x28 */ int sizek;
  /* this+0x2c */ int sizecode;
  /* this+0x30 */ int sizelineinfo;
  /* this+0x34 */ int sizep;
  /* this+0x38 */ int sizelocvars;
  /* this+0x3c */ int linedefined;
  /* this+0x40 */ int lastlinedefined;
  /* this+0x44 */ union GCObject * gclist;
  /* this+0x48 */ unsigned char nups;
  /* this+0x49 */ unsigned char numparams;
  /* this+0x4a */ unsigned char is_vararg;
  /* this+0x4b */ unsigned char maxstacksize;
}

struct GCheader {
  /* this+0x0 */ union GCObject * next;
  /* this+0x4 */ unsigned char tt;
  /* this+0x5 */ unsigned char marked;
}

struct Zio {
  /* this+0x0 */ unsigned int n;
  /* this+0x4 */ const char * p;
  /* this+0x8 */ function  * reader;
  /* this+0xc */ void * data;
  /* this+0x10 */ struct lua_State * L;
}

union Udata {
  /* this+0x0 */ union L_Umaxalign dummy;
  /* this+0x0 */ struct <unnamed-tag> uv;
}

struct CallS {
  /* this+0x0 */ struct lua_TValue * func;
  /* this+0x4 */ int nresults;
}

struct CCallS {
  /* this+0x0 */ function  * func;
  /* this+0x4 */ void * ud;
}

struct luaL_Reg {
  /* this+0x0 */ const char * name;
  /* this+0x4 */ function  * func;
}

struct LoadF {
  /* this+0x0 */ int extraline;
  /* this+0x4 */ struct _iobuf * f;
  /* this+0x8 */ char[0x200] buff;
}

struct luaL_Buffer {
  /* this+0x0 */ char * p;
  /* this+0x4 */ int lvl;
  /* this+0x8 */ struct lua_State * L;
  /* this+0xc */ char[0x200] buffer;
}

struct LoadS {
  /* this+0x0 */ const char * s;
  /* this+0x4 */ unsigned int size;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned long,CGuild *> {
  /* this+0x0 */ unsigned long first;
  /* this+0x4 */ class CGuild * second;
}

class std::_Deque_unchecked_iterator<unsigned int,std::allocator<unsigned int> > {
  /* this+0x0 */ const class std::deque<unsigned int,std::allocator<unsigned int> > * _Mycont;
  /* this+0x4 */ unsigned int _Myoff;
}

class std::_Deque_unchecked_const_iterator<unsigned int,std::allocator<unsigned int> > {
  /* this+0x0 */ const class std::deque<unsigned int,std::allocator<unsigned int> > * _Mycont;
  /* this+0x4 */ unsigned int _Myoff;
}

struct std::allocator<unsigned int>::rebind<std::_Container_proxy> {
}

class std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}

struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node * _Right;
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Myval;
  /* this+0x28 */ char _Color;
  /* this+0x29 */ char _Isnil;
}

class std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node * _Ptr;
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node * _Ptr;
}

class std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Alval;
}

class std::_Tree<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Alval;
}

class std::set<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > {
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Alval;
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > > > {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node> {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > > > {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::_Iterator_base0> {
}

struct std::_Pair_base<std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_const_iterator<std::_Tree_val<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::rebind<std::_Tree_nod<std::_Tset_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,0> >::_Node> {
}

class DES {
  /* this+0x0 */ unsigned char[0x40] key;
  /* this+0x40 */ unsigned char[0x30][0x10] K;
}

struct std::_Pair_base<int,N2FTAFile::CLineInfo> {
  /* this+0x0 */ int first;
  /* this+0x4 */ class N2FTAFile::CLineInfo second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> >::_Node * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,N2FTAFile::CLineInfo>,int,std::pair<int const ,N2FTAFile::CLineInfo> const *,std::pair<int const ,N2FTAFile::CLineInfo> const &,std::_Iterator_base0> {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> >,0> > > {
}

struct std::_Pair_base<int const ,N2FTAFile::CLineInfo> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ class N2FTAFile::CLineInfo second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,N2FTALexicalAnalyzer::FTARet,int,N2FTALexicalAnalyzer::FTARet const *,N2FTALexicalAnalyzer::FTARet const &,std::_Iterator_base0> {
}

class std::_List_unchecked_const_iterator<std::_List_val<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_List_nod<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> >::_Node * _Ptr;
}

class std::_List_unchecked_iterator<std::_List_val<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > > {
}

struct std::_Iterator012<std::random_access_iterator_tag,N2DBLogThread *,int,N2DBLogThread * const *,N2DBLogThread * const &,std::_Iterator_base0> {
}

struct std::_Iterator012<std::bidirectional_iterator_tag,N2DBLog *,int,N2DBLog * const *,N2DBLog * const &,std::_Iterator_base0> {
}

class std::_List_unchecked_const_iterator<std::_List_val<N2DBLog *,std::allocator<N2DBLog *> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_List_nod<N2DBLog *,std::allocator<N2DBLog *> >::_Node * _Ptr;
}

class std::_List_unchecked_iterator<std::_List_val<N2DBLog *,std::allocator<N2DBLog *> > > {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned short const ,N2IDGenerator *> {
  /* this+0x0 */ const unsigned short first;
  /* this+0x4 */ class N2IDGenerator * second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned short const ,N2IDGenerator *>,int,std::pair<unsigned short const ,N2IDGenerator *> const *,std::pair<unsigned short const ,N2IDGenerator *> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> > > {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> >,0> >::_Node * _Ptr;
}

struct std::_Pair_base<unsigned short,N2IDGenerator *> {
  /* this+0x0 */ unsigned short first;
  /* this+0x4 */ class N2IDGenerator * second;
}

struct LG {
  /* this+0x0 */ struct lua_State l;
  /* this+0x78 */ struct global_State g;
}

class std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> > _Alval;
}

class std::_Tree<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> > _Alval;
}

struct std::pair<int,`N3IPAddapter'::`2'::threadBuffer> {
  /* this+0x0 */ int first;
  /* this+0x4 */ struct N3IPAddapter::__l2::threadBuffer second;
}

struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Left;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Parent;
  /* this+0x8 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Right;
  /* this+0xc */ struct std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> _Myval;
  /* this+0x20 */ char _Color;
  /* this+0x21 */ char _Isnil;
}

class std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0>::value_compare {
}

struct std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct N3IPAddapter::__l2::threadBuffer second;
}

class std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> > {
}

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Ptr;
}

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > > {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Ptr;
}

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > > > {
}

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > > > {
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > > > {
}

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > > > {
}

struct std::_Pair_base<int const ,`N3IPAddapter'::`2'::threadBuffer> {
  /* this+0x0 */ const int first;
  /* this+0x4 */ struct N3IPAddapter::__l2::threadBuffer second;
}

struct N3IPAddapter::__l2::threadBuffer {
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> {
  /* this+0x0 */ struct std::less<int> comp;
}

class std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> > _Alval;
}

class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node> {
}

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node> {
}

struct std::_Pair_base<int,`N3IPAddapter'::`2'::threadBuffer> {
  /* this+0x0 */ int first;
  /* this+0x4 */ struct N3IPAddapter::__l2::threadBuffer second;
}

class std::map<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> > > {
  /* this+0x0 */ struct std::less<int> comp;
  /* this+0x4 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Myhead;
  /* this+0x8 */ unsigned int _Mysize;
  /* this+0xc */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node> _Alnod;
  /* this+0xd */ class std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> > _Alval;
}

struct std::_Allocator_base<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> > {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer>,int,std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> const *,std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> const &,std::_Iterator_base0> {
}

struct std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >::rebind<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> > {
}

struct std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >::rebind<std::_Tree_nod<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> >::_Node> {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<int,`N3IPAddapter'::`2'::threadBuffer,std::less<int>,std::allocator<std::pair<int const ,`N3IPAddapter'::`2'::threadBuffer> >,0> > > {
}

struct _MINIDUMP_MODULE_CALLBACK {
  /* this+0x0 */ wchar_t * FullPath;
  /* this+0x4 */ unsigned __int64 BaseOfImage;
  /* this+0xc */ unsigned long SizeOfImage;
  /* this+0x10 */ unsigned long CheckSum;
  /* this+0x14 */ unsigned long TimeDateStamp;
  /* this+0x18 */ struct tagVS_FIXEDFILEINFO VersionInfo;
  /* this+0x4c */ void * CvRecord;
  /* this+0x50 */ unsigned long SizeOfCvRecord;
  /* this+0x54 */ void * MiscRecord;
  /* this+0x58 */ unsigned long SizeOfMiscRecord;
}

struct _MINIDUMP_MEMORY_INFO {
  /* this+0x0 */ unsigned __int64 BaseAddress;
  /* this+0x8 */ unsigned __int64 AllocationBase;
  /* this+0x10 */ unsigned int AllocationProtect;
  /* this+0x14 */ unsigned int __alignment1;
  /* this+0x18 */ unsigned __int64 RegionSize;
  /* this+0x20 */ unsigned int State;
  /* this+0x24 */ unsigned int Protect;
  /* this+0x28 */ unsigned int Type;
  /* this+0x2c */ unsigned int __alignment2;
}

struct _tagSTACKFRAME {
  /* this+0x0 */ struct _tagADDRESS AddrPC;
  /* this+0xc */ struct _tagADDRESS AddrReturn;
  /* this+0x18 */ struct _tagADDRESS AddrFrame;
  /* this+0x24 */ struct _tagADDRESS AddrStack;
  /* this+0x30 */ void * FuncTableEntry;
  /* this+0x34 */ unsigned long[0x4] Params;
  /* this+0x44 */ int Far;
  /* this+0x48 */ int Virtual;
  /* this+0x4c */ unsigned long[0x3] Reserved;
  /* this+0x58 */ struct _KDHELP KdHelp;
  /* this+0x98 */ struct _tagADDRESS AddrBStore;
}

class `anonymous-namespace'::CMyFile {
  /* this+0x0 */ void * m_hFile;
}

struct _IMAGEHLP_MODULE {
  /* this+0x0 */ unsigned long SizeOfStruct;
  /* this+0x4 */ unsigned long BaseOfImage;
  /* this+0x8 */ unsigned long ImageSize;
  /* this+0xc */ unsigned long TimeDateStamp;
  /* this+0x10 */ unsigned long CheckSum;
  /* this+0x14 */ unsigned long NumSyms;
  /* this+0x18 */ enum SYM_TYPE SymType;
  /* this+0x1c */ char[0x20] ModuleName;
  /* this+0x3c */ char[0x100] ImageName;
  /* this+0x13c */ char[0x100] LoadedImageName;
}

struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {
  /* this+0x0 */ unsigned __int64 Offset;
  /* this+0x8 */ unsigned long Bytes;
  /* this+0xc */ HRESULT FailureStatus;
}

struct _MINIDUMP_EXCEPTION_INFORMATION {
  /* this+0x0 */ unsigned long ThreadId;
  /* this+0x4 */ struct _EXCEPTION_POINTERS * ExceptionPointers;
  /* this+0x8 */ int ClientPointers;
}

struct _IMAGEHLP_SYMBOL {
  /* this+0x0 */ unsigned long SizeOfStruct;
  /* this+0x4 */ unsigned long Address;
  /* this+0x8 */ unsigned long Size;
  /* this+0xc */ unsigned long Flags;
  /* this+0x10 */ unsigned long MaxNameLength;
  /* this+0x14 */ char[0x1] Name;
}

struct _IMAGEHLP_LINE {
  /* this+0x0 */ unsigned long SizeOfStruct;
  /* this+0x4 */ void * Key;
  /* this+0x8 */ unsigned long LineNumber;
  /* this+0xc */ char * FileName;
  /* this+0x10 */ unsigned long Address;
}

struct _MINIDUMP_USER_STREAM {
  /* this+0x0 */ unsigned int Type;
  /* this+0x4 */ unsigned long BufferSize;
  /* this+0x8 */ void * Buffer;
}

struct _MINIDUMP_THREAD_CALLBACK {
  /* this+0x0 */ unsigned long ThreadId;
  /* this+0x4 */ void * ThreadHandle;
  /* this+0x8 */ struct _CONTEXT Context;
  /* this+0x2d4 */ unsigned long SizeOfContext;
  /* this+0x2d8 */ unsigned __int64 StackBase;
  /* this+0x2e0 */ unsigned __int64 StackEnd;
}

struct _MINIDUMP_THREAD_EX_CALLBACK {
  /* this+0x0 */ unsigned long ThreadId;
  /* this+0x4 */ void * ThreadHandle;
  /* this+0x8 */ struct _CONTEXT Context;
  /* this+0x2d4 */ unsigned long SizeOfContext;
  /* this+0x2d8 */ unsigned __int64 StackBase;
  /* this+0x2e0 */ unsigned __int64 StackEnd;
  /* this+0x2e8 */ unsigned __int64 BackingStoreBase;
  /* this+0x2f0 */ unsigned __int64 BackingStoreEnd;
}

struct _MINIDUMP_INCLUDE_THREAD_CALLBACK {
  /* this+0x0 */ unsigned long ThreadId;
}

struct _MINIDUMP_INCLUDE_MODULE_CALLBACK {
  /* this+0x0 */ unsigned __int64 BaseOfImage;
}

struct _MINIDUMP_IO_CALLBACK {
  /* this+0x0 */ void * Handle;
  /* this+0x4 */ unsigned __int64 Offset;
  /* this+0xc */ void * Buffer;
  /* this+0x10 */ unsigned long BufferBytes;
}

struct _MINIDUMP_CALLBACK_INPUT {
  /* this+0x0 */ unsigned long ProcessId;
  /* this+0x4 */ void * ProcessHandle;
  /* this+0x8 */ unsigned long CallbackType;
  /* this+0xc */ HRESULT Status;
  /* this+0xc */ struct _MINIDUMP_THREAD_CALLBACK Thread;
  /* this+0xc */ struct _MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
  /* this+0xc */ struct _MINIDUMP_MODULE_CALLBACK Module;
  /* this+0xc */ struct _MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
  /* this+0xc */ struct _MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
  /* this+0xc */ struct _MINIDUMP_IO_CALLBACK Io;
  /* this+0xc */ struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
  /* this+0xc */ unsigned long SecondaryFlags;
}

struct _MINIDUMP_CALLBACK_OUTPUT {
  /* this+0x0 */ unsigned long ModuleWriteFlags;
  /* this+0x0 */ unsigned long ThreadWriteFlags;
  /* this+0x0 */ unsigned long SecondaryFlags;
  /* this+0x0 */ unsigned __int64 MemoryBase;
  /* this+0x8 */ unsigned long MemorySize;
  /* this+0x0 */ int CheckCancel;
  /* this+0x4 */ int Cancel;
  /* this+0x0 */ void * Handle;
  /* this+0x0 */ struct _MINIDUMP_MEMORY_INFO VmRegion;
  /* this+0x30 */ int Continue;
  /* this+0x0 */ HRESULT Status;
}

struct _MINIDUMP_CALLBACK_INFORMATION {
  /* this+0x0 */ function  * CallbackRoutine;
  /* this+0x4 */ void * CallbackParam;
}

struct _MINIDUMP_USER_STREAM_INFORMATION {
  /* this+0x0 */ unsigned long UserStreamCount;
  /* this+0x4 */ struct _MINIDUMP_USER_STREAM * UserStreamArray;
}

struct DumpState {
  /* this+0x0 */ struct lua_State * L;
  /* this+0x4 */ function  * writer;
  /* this+0x8 */ void * data;
  /* this+0xc */ int strip;
  /* this+0x10 */ int status;
}

struct SParser {
  /* this+0x0 */ struct Zio * z;
  /* this+0x4 */ struct Mbuffer buff;
  /* this+0x10 */ const char * name;
}

struct MatchState {
  /* this+0x0 */ const char * src_init;
  /* this+0x4 */ const char * src_end;
  /* this+0x8 */ struct lua_State * L;
  /* this+0xc */ int level;
  /* this+0x10 */ struct <unnamed-tag>[0x20] capture;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > > first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned int const ,bool> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ bool second;
}

struct std::_Pair_base<unsigned int,bool> {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> >::_Node * _Ptr;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,bool>,int,std::pair<unsigned int const ,bool> const *,std::pair<unsigned int const ,bool> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> >,0> > > {
}

struct upvaldesc {
  /* this+0x0 */ unsigned char k;
  /* this+0x1 */ unsigned char info;
}

union SemInfo {
  /* this+0x0 */ double r;
  /* this+0x0 */ union TString * ts;
}

struct Token {
  /* this+0x0 */ int token;
  /* this+0x8 */ union SemInfo seminfo;
}

struct FuncState {
  /* this+0x0 */ struct Proto * f;
  /* this+0x4 */ struct Table * h;
  /* this+0x8 */ struct FuncState * prev;
  /* this+0xc */ struct LexState * ls;
  /* this+0x10 */ struct lua_State * L;
  /* this+0x14 */ struct BlockCnt * bl;
  /* this+0x18 */ int pc;
  /* this+0x1c */ int lasttarget;
  /* this+0x20 */ int jpc;
  /* this+0x24 */ int freereg;
  /* this+0x28 */ int nk;
  /* this+0x2c */ int np;
  /* this+0x30 */ short nlocvars;
  /* this+0x32 */ unsigned char nactvar;
  /* this+0x33 */ struct upvaldesc[0x3c] upvalues;
  /* this+0xac */ unsigned short[0xc8] actvar;
}

struct LexState {
  /* this+0x0 */ int current;
  /* this+0x4 */ int linenumber;
  /* this+0x8 */ int lastline;
  /* this+0x10 */ struct Token t;
  /* this+0x20 */ struct Token lookahead;
  /* this+0x30 */ struct FuncState * fs;
  /* this+0x34 */ struct lua_State * L;
  /* this+0x38 */ struct Zio * z;
  /* this+0x3c */ struct Mbuffer * buff;
  /* this+0x40 */ union TString * source;
  /* this+0x44 */ char decpoint;
}

struct BlockCnt {
  /* this+0x0 */ struct BlockCnt * previous;
  /* this+0x4 */ int breaklist;
  /* this+0x8 */ unsigned char nactvar;
  /* this+0x9 */ unsigned char upval;
  /* this+0xa */ unsigned char isbreakable;
}

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > >,bool> {
  /* this+0x0 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > > first;
  /* this+0x4 */ bool second;
}

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> > > {
}

struct std::_Pair_base<unsigned int const ,N2Inter *> {
  /* this+0x0 */ const unsigned int first;
  /* this+0x4 */ class N2Inter * second;
}

struct std::_Pair_base<unsigned int,N2Inter *> {
  /* this+0x0 */ unsigned int first;
  /* this+0x4 */ class N2Inter * second;
}

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,N2Inter *>,int,std::pair<unsigned int const ,N2Inter *> const *,std::pair<unsigned int const ,N2Inter *> const &,std::_Iterator_base0> {
}

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >,std::_Iterator_base0> {
  /* this+0x0 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> >,0> >::_Node * _Ptr;
}

struct LoadState {
  /* this+0x0 */ struct lua_State * L;
  /* this+0x4 */ struct Zio * Z;
  /* this+0x8 */ struct Mbuffer * b;
  /* this+0xc */ const char * name;
}

struct LHS_assign {
  /* this+0x0 */ struct LHS_assign * prev;
  /* this+0x8 */ struct expdesc v;
}

struct expdesc {
  /* this+0x0 */ enum expkind k;
  /* this+0x8 */ union <unnamed-tag> u;
  /* this+0x10 */ int t;
  /* this+0x14 */ int f;
}

struct ConsControl {
  /* this+0x0 */ struct expdesc v;
  /* this+0x18 */ struct expdesc * t;
  /* this+0x1c */ int nh;
  /* this+0x20 */ int na;
  /* this+0x24 */ int tostore;
}

struct $_s__CatchableTypeArray$_extraBytes_12 {
  /* this+0x0 */ int nCatchableTypes;
  /* this+0x4 */ const struct _s__CatchableType *[0x3] arrayOfCatchableTypes;
}

struct _TEB_ACTIVE_FRAME_CONTEXT {
  /* this+0x0 */ unsigned long Flags;
  /* this+0x4 */ const char * FrameName;
}

struct _PEB_FREE_BLOCK {
  /* this+0x0 */ struct _PEB_FREE_BLOCK * Next;
  /* this+0x4 */ unsigned long Size;
}

struct _Wx86ThreadState {
  /* this+0x0 */ unsigned long * CallBx86Eip;
  /* this+0x4 */ void * DeallocationCpu;
  /* this+0x8 */ unsigned char UseKnownWx86Dll;
  /* this+0x9 */ char OleStubInvoked;
}

struct _TEB_ACTIVE_FRAME {
  /* this+0x0 */ unsigned long Flags;
  /* this+0x4 */ struct _TEB_ACTIVE_FRAME * Previous;
  /* this+0x8 */ const struct _TEB_ACTIVE_FRAME_CONTEXT * Context;
}

struct _UNICODE_STRING {
  /* this+0x0 */ unsigned short Length;
  /* this+0x2 */ unsigned short MaximumLength;
  /* this+0x4 */ unsigned short * Buffer;
}

struct _EH4_SCOPETABLE_RECORD {
  /* this+0x0 */ unsigned long EnclosingLevel;
  /* this+0x4 */ function  * FilterFunc;
  /* this+0x8 */ union <unnamed-tag> u;
}

struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
}

struct _ACTIVATION_CONTEXT_STACK {
  /* this+0x0 */ unsigned long Flags;
  /* this+0x4 */ unsigned long NextCookieSequenceNumber;
  /* this+0x8 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME * ActiveFrame;
  /* this+0xc */ struct _LIST_ENTRY FrameListCache;
}

struct _PEB_LDR_DATA {
  /* this+0x0 */ unsigned long Length;
  /* this+0x4 */ unsigned char Initialized;
  /* this+0x8 */ void * SsHandle;
  /* this+0xc */ struct _LIST_ENTRY InLoadOrderModuleList;
  /* this+0x14 */ struct _LIST_ENTRY InMemoryOrderModuleList;
  /* this+0x1c */ struct _LIST_ENTRY InInitializationOrderModuleList;
  /* this+0x24 */ void * EntryInProgress;
}

struct _CLIENT_ID {
  /* this+0x0 */ void * UniqueProcess;
  /* this+0x4 */ void * UniqueThread;
}

struct _EH4_EXCEPTION_REGISTRATION_RECORD {
  /* this+0x0 */ void * SavedESP;
  /* this+0x4 */ struct _EXCEPTION_POINTERS * ExceptionPointers;
  /* this+0x8 */ struct _EXCEPTION_REGISTRATION_RECORD SubRecord;
  /* this+0x10 */ unsigned int EncodedScopeTable;
  /* this+0x14 */ unsigned long TryLevel;
}

struct _KSYSTEM_TIME {
  /* this+0x0 */ unsigned long LowPart;
  /* this+0x4 */ long High1Time;
  /* this+0x8 */ long High2Time;
}

struct _GDI_TEB_BATCH {
  /* this+0x0 */ unsigned long Offset;
  /* this+0x4 */ unsigned long HDC;
  /* this+0x8 */ unsigned long[0x136] Buffer;
}

struct _KUSER_SHARED_DATA {
  /* this+0x0 */ unsigned long TickCountLowDeprecated;
  /* this+0x4 */ unsigned long TickCountMultiplier;
  /* this+0x8 */ volatile struct _KSYSTEM_TIME InterruptTime;
  /* this+0x14 */ volatile struct _KSYSTEM_TIME SystemTime;
  /* this+0x20 */ volatile struct _KSYSTEM_TIME TimeZoneBias;
  /* this+0x2c */ unsigned short ImageNumberLow;
  /* this+0x2e */ unsigned short ImageNumberHigh;
  /* this+0x30 */ wchar_t[0x104] NtSystemRoot;
  /* this+0x238 */ unsigned long MaxStackTraceDepth;
  /* this+0x23c */ unsigned long CryptoExponent;
  /* this+0x240 */ unsigned long TimeZoneId;
  /* this+0x244 */ unsigned long LargePageMinimum;
  /* this+0x248 */ unsigned long[0x7] Reserved2;
  /* this+0x264 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* this+0x268 */ unsigned char ProductTypeIsValid;
  /* this+0x26c */ unsigned long NtMajorVersion;
  /* this+0x270 */ unsigned long NtMinorVersion;
  /* this+0x274 */ unsigned char[0x40] ProcessorFeatures;
  /* this+0x2b4 */ unsigned long Reserved1;
  /* this+0x2b8 */ unsigned long Reserved3;
  /* this+0x2bc */ volatile unsigned long TimeSlip;
  /* this+0x2c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  /* this+0x2c8 */ union _LARGE_INTEGER SystemExpirationDate;
  /* this+0x2d0 */ unsigned long SuiteMask;
  /* this+0x2d4 */ unsigned char KdDebuggerEnabled;
  /* this+0x2d8 */ volatile unsigned long ActiveConsoleId;
  /* this+0x2dc */ volatile unsigned long DismountCount;
  /* this+0x2e0 */ unsigned long ComPlusPackage;
  /* this+0x2e4 */ unsigned long LastSystemRITEventTickCount;
  /* this+0x2e8 */ unsigned long NumberOfPhysicalPages;
  /* this+0x2ec */ unsigned char SafeBootMode;
  /* this+0x2f0 */ unsigned long TraceLogging;
  /* this+0x2f8 */ unsigned __int64 Fill0;
  /* this+0x300 */ unsigned __int64[0x4] SystemCall;
  /* this+0x320 */ volatile struct _KSYSTEM_TIME TickCount;
  /* this+0x320 */ volatile unsigned __int64 TickCountQuad;
}

struct _EH4_SCOPETABLE {
  /* this+0x0 */ unsigned long GSCookieOffset;
  /* this+0x4 */ unsigned long GSCookieXOROffset;
  /* this+0x8 */ unsigned long EHCookieOffset;
  /* this+0xc */ unsigned long EHCookieXOROffset;
  /* this+0x10 */ struct _EH4_SCOPETABLE_RECORD[0x1] ScopeRecord;
}

struct _RTL_USER_PROCESS_PARAMETERS {
}

struct _ACTIVATION_CONTEXT_DATA {
}

struct _ASSEMBLY_STORAGE_MAP {
}

struct _PEB {
  /* this+0x0 */ unsigned char InheritedAddressSpace;
  /* this+0x1 */ unsigned char ReadImageFileExecOptions;
  /* this+0x2 */ unsigned char BeingDebugged;
  /* this+0x3 */ unsigned char SpareBool;
  /* this+0x4 */ void * Mutant;
  /* this+0x8 */ void * ImageBaseAddress;
  /* this+0xc */ struct _PEB_LDR_DATA * Ldr;
  /* this+0x10 */ struct _RTL_USER_PROCESS_PARAMETERS * ProcessParameters;
  /* this+0x14 */ void * SubSystemData;
  /* this+0x18 */ void * ProcessHeap;
  /* this+0x1c */ struct _RTL_CRITICAL_SECTION * FastPebLock;
  /* this+0x20 */ void * SparePtr1;
  /* this+0x24 */ void * SparePtr2;
  /* this+0x28 */ unsigned long EnvironmentUpdateCount;
  /* this+0x2c */ void * KernelCallbackTable;
  /* this+0x30 */ unsigned long[0x1] SystemReserved;
      /* this+0x38 */ struct _PEB_FREE_BLOCK * FreeList;
  /* this+0x3c */ unsigned long TlsExpansionCounter;
  /* this+0x40 */ void * TlsBitmap;
  /* this+0x44 */ unsigned long[0x2] TlsBitmapBits;
  /* this+0x4c */ void * ReadOnlySharedMemoryBase;
  /* this+0x50 */ void * ReadOnlySharedMemoryHeap;
  /* this+0x54 */ void * * ReadOnlyStaticServerData;
  /* this+0x58 */ void * AnsiCodePageData;
  /* this+0x5c */ void * OemCodePageData;
  /* this+0x60 */ void * UnicodeCaseTableData;
  /* this+0x64 */ unsigned long NumberOfProcessors;
  /* this+0x68 */ unsigned long NtGlobalFlag;
  /* this+0x70 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* this+0x78 */ unsigned long HeapSegmentReserve;
  /* this+0x7c */ unsigned long HeapSegmentCommit;
  /* this+0x80 */ unsigned long HeapDeCommitTotalFreeThreshold;
  /* this+0x84 */ unsigned long HeapDeCommitFreeBlockThreshold;
  /* this+0x88 */ unsigned long NumberOfHeaps;
  /* this+0x8c */ unsigned long MaximumNumberOfHeaps;
  /* this+0x90 */ void * * ProcessHeaps;
  /* this+0x94 */ void * GdiSharedHandleTable;
  /* this+0x98 */ void * ProcessStarterHelper;
  /* this+0x9c */ unsigned long GdiDCAttributeList;
  /* this+0xa0 */ struct _RTL_CRITICAL_SECTION * LoaderLock;
  /* this+0xa4 */ unsigned long OSMajorVersion;
  /* this+0xa8 */ unsigned long OSMinorVersion;
  /* this+0xac */ unsigned short OSBuildNumber;
  /* this+0xae */ unsigned short OSCSDVersion;
  /* this+0xb0 */ unsigned long OSPlatformId;
  /* this+0xb4 */ unsigned long ImageSubsystem;
  /* this+0xb8 */ unsigned long ImageSubsystemMajorVersion;
  /* this+0xbc */ unsigned long ImageSubsystemMinorVersion;
  /* this+0xc0 */ unsigned long ImageProcessAffinityMask;
  /* this+0xc4 */ unsigned long[0x22] GdiHandleBuffer;
  /* this+0x14c */ function  * PostProcessInitRoutine;
  /* this+0x150 */ void * TlsExpansionBitmap;
  /* this+0x154 */ unsigned long[0x20] TlsExpansionBitmapBits;
  /* this+0x1d4 */ unsigned long SessionId;
  /* this+0x1d8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* this+0x1e0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* this+0x1e8 */ void * pShimData;
  /* this+0x1ec */ void * AppCompatInfo;
  /* this+0x1f0 */ struct _UNICODE_STRING CSDVersion;
  /* this+0x1f8 */ const struct _ACTIVATION_CONTEXT_DATA * ActivationContextData;
  /* this+0x1fc */ struct _ASSEMBLY_STORAGE_MAP * ProcessAssemblyStorageMap;
  /* this+0x200 */ const struct _ACTIVATION_CONTEXT_DATA * SystemDefaultActivationContextData;
  /* this+0x204 */ struct _ASSEMBLY_STORAGE_MAP * SystemAssemblyStorageMap;
  /* this+0x208 */ unsigned long MinimumStackCommit;
  /* this+0x20c */ void * * FlsCallback;
  /* this+0x210 */ struct _LIST_ENTRY FlsListHead;
  /* this+0x218 */ void * FlsBitmap;
  /* this+0x21c */ unsigned long[0x4] FlsBitmapBits;
  /* this+0x22c */ unsigned long FlsHighIndex;
}

struct _TEB {
  /* this+0x0 */ struct _NT_TIB NtTib;
  /* this+0x1c */ void * EnvironmentPointer;
  /* this+0x20 */ struct _CLIENT_ID ClientId;
  /* this+0x28 */ void * ActiveRpcHandle;
  /* this+0x2c */ void * ThreadLocalStoragePointer;
  /* this+0x30 */ struct _PEB * ProcessEnvironmentBlock;
  /* this+0x34 */ unsigned long LastErrorValue;
  /* this+0x38 */ unsigned long CountOfOwnedCriticalSections;
  /* this+0x3c */ void * CsrClientThread;
  /* this+0x40 */ void * Win32ThreadInfo;
  /* this+0x44 */ unsigned long[0x1a] User32Reserved;
  /* this+0xac */ unsigned long[0x5] UserReserved;
  /* this+0xc0 */ void * WOW32Reserved;
  /* this+0xc4 */ unsigned long CurrentLocale;
  /* this+0xc8 */ unsigned long FpSoftwareStatusRegister;
  /* this+0xcc */ void *[0x36] SystemReserved1;
  /* this+0x1a4 */ long ExceptionCode;
  /* this+0x1a8 */ struct _ACTIVATION_CONTEXT_STACK ActivationContextStack;
  /* this+0x1bc */ unsigned char[0x18] SpareBytes1;
  /* this+0x1d4 */ struct _GDI_TEB_BATCH GdiTebBatch;
  /* this+0x6b4 */ struct _CLIENT_ID RealClientId;
  /* this+0x6bc */ void * GdiCachedProcessHandle;
  /* this+0x6c0 */ unsigned long GdiClientPID;
  /* this+0x6c4 */ unsigned long GdiClientTID;
  /* this+0x6c8 */ void * GdiThreadLocalInfo;
  /* this+0x6cc */ unsigned long[0x3e] Win32ClientInfo;
  /* this+0x7c4 */ void *[0xe9] glDispatchTable;
  /* this+0xb68 */ unsigned long[0x1d] glReserved1;
  /* this+0xbdc */ void * glReserved2;
  /* this+0xbe0 */ void * glSectionInfo;
  /* this+0xbe4 */ void * glSection;
  /* this+0xbe8 */ void * glTable;
  /* this+0xbec */ void * glCurrentRC;
  /* this+0xbf0 */ void * glContext;
  /* this+0xbf4 */ unsigned long LastStatusValue;
  /* this+0xbf8 */ struct _UNICODE_STRING StaticUnicodeString;
  /* this+0xc00 */ wchar_t[0x105] StaticUnicodeBuffer;
  /* this+0xe0c */ void * DeallocationStack;
  /* this+0xe10 */ void *[0x40] TlsSlots;
  /* this+0xf10 */ struct _LIST_ENTRY TlsLinks;
  /* this+0xf18 */ void * Vdm;
  /* this+0xf1c */ void * ReservedForNtRpc;
  /* this+0xf20 */ void *[0x2] DbgSsReserved;
  /* this+0xf28 */ unsigned long HardErrorMode;
  /* this+0xf2c */ void *[0x10] Instrumentation;
  /* this+0xf6c */ void * WinSockData;
  /* this+0xf70 */ unsigned long GdiBatchCount;
  /* this+0xf74 */ unsigned char InDbgPrint;
  /* this+0xf75 */ unsigned char FreeStackOnTermination;
  /* this+0xf76 */ unsigned char HasFiberData;
  /* this+0xf77 */ unsigned char IdealProcessor;
  /* this+0xf78 */ unsigned long Spare3;
  /* this+0xf7c */ void * ReservedForPerf;
  /* this+0xf80 */ void * ReservedForOle;
  /* this+0xf84 */ unsigned long WaitingOnLoaderLock;
  /* this+0xf88 */ struct _Wx86ThreadState Wx86Thread;
  /* this+0xf94 */ void * * TlsExpansionSlots;
  /* this+0xf98 */ unsigned long ImpersonationLocale;
  /* this+0xf9c */ unsigned long IsImpersonating;
  /* this+0xfa0 */ void * NlsCache;
  /* this+0xfa4 */ void * pShimData;
  /* this+0xfa8 */ unsigned long HeapVirtualAffinity;
  /* this+0xfac */ void * CurrentTransactionHandle;
  /* this+0xfb0 */ struct _TEB_ACTIVE_FRAME * ActiveFrame;
  /* this+0xfb4 */ void * FlsData;
}

struct _JMP_BUF {
  /* this+0x0 */ unsigned long saved_ebp;
  /* this+0x4 */ unsigned long saved_ebx;
  /* this+0x8 */ unsigned long saved_edi;
  /* this+0xc */ unsigned long saved_esi;
  /* this+0x10 */ unsigned long saved_esp;
  /* this+0x14 */ unsigned long saved_return;
  /* this+0x18 */ unsigned long saved_xregistration;
  /* this+0x1c */ unsigned long saved_trylevel;
  /* this+0x20 */ unsigned long version_cookie;
  /* this+0x24 */ unsigned long unwind_func;
  /* this+0x28 */ unsigned long unwind_data;
}

struct _NLG_INFO {
  /* this+0x0 */ unsigned long dwSig;
  /* this+0x4 */ unsigned long uoffDestination;
  /* this+0x8 */ unsigned long dwCode;
  /* this+0xc */ unsigned long uoffFramePointer;
}

struct _EXCEPTION_RECORD_CRT {
  /* this+0x0 */ unsigned long exception_number;
  /* this+0x4 */ unsigned long exception_flags;
  /* this+0x8 */ unsigned long exception_record;
  /* this+0xc */ unsigned long exception_address;
  /* this+0x10 */ unsigned long number_parameters;
  /* this+0x14 */ unsigned long exception_information;
}

struct _EXCEPTION_REGISTRATION_COMMON {
  /* this+0x8 */ unsigned long scopetable;
  /* this+0xc */ unsigned long trylevel;
}

struct _SCOPETABLE_ENTRY {
  /* this+0x0 */ unsigned long enclosing_level;
  /* this+0x4 */ unsigned long filter;
  /* this+0x8 */ unsigned long specific_handler;
}

struct _EXCEPTION_REGISTRATION {
  /* this+0x0 */ unsigned long prev;
  /* this+0x4 */ unsigned long handler;
}

struct ExceptionRecordStruct {
  /* this+0x0 */ unsigned long ExceptionCode;
  /* this+0x4 */ unsigned long ExceptionFlags;
  /* this+0x8 */ unsigned long ExceptionRecord_;
  /* this+0xc */ unsigned long ExceptionAddress;
  /* this+0x10 */ unsigned long NumberParameters;
  /* this+0x14 */ unsigned long ExceptionInfo;
}

struct RegistrationNode {
  /* this+0x0 */ unsigned long Next;
  /* this+0x4 */ unsigned long Handler;
  /* this+0x8 */ unsigned long EH4ScopeTable;
  /* this+0xc */ unsigned long TryLevel;
}

struct ScopeTableRecord {
  /* this+0x0 */ unsigned long EnclosingLevel;
  /* this+0x4 */ unsigned long FilterFunc;
  /* this+0x8 */ unsigned long HandlerAddress;
  /* this+0x8 */ unsigned long FinallyFunc;
}

struct UnwindGuardNode {
  /* this+0x0 */ unsigned long Next;
  /* this+0x4 */ unsigned long Handler;
  /* this+0x8 */ unsigned long SecurityCookie;
  /* this+0xc */ unsigned long OrigTargetLevel;
  /* this+0x10 */ unsigned long OrigEstablisher;
  /* this+0x14 */ unsigned long OrigCookiePointer;
  /* this+0x18 */ unsigned long FramePointer;
}

struct ScopeTable {
  /* this+0x0 */ unsigned long GSCookieOffset;
  /* this+0x4 */ unsigned long GSCookieXOROffset;
  /* this+0x8 */ unsigned long EHCookieOffset;
  /* this+0xc */ unsigned long EHCookieXOROffset;
  /* this+0x10 */ unsigned long ScopeRecord;
}

struct _TP_CALLBACK_ENVIRON_V1 {
  /* this+0x0 */ unsigned long Version;
  /* this+0x4 */ struct _TP_POOL * Pool;
  /* this+0x8 */ struct _TP_CLEANUP_GROUP * CleanupGroup;
  /* this+0xc */ function  * CleanupGroupCancelCallback;
  /* this+0x10 */ void * RaceDll;
  /* this+0x14 */ struct _ACTIVATION_CONTEXT * ActivationContext;
  /* this+0x18 */ function  * FinalizationCallback;
  /* this+0x1c */ union <unnamed-tag> u;
}

struct _strflt {
  /* this+0x0 */ int sign;
  /* this+0x4 */ int decpt;
  /* this+0x8 */ int flag;
  /* this+0xc */ char * mantissa;
}

struct errentry {
  /* this+0x0 */ unsigned long oscode;
  /* this+0x4 */ int errnocode;
}

struct _tiddata {
  /* this+0x0 */ unsigned long _tid;
  /* this+0x4 */ unsigned int _thandle;
  /* this+0x8 */ int _terrno;
  /* this+0xc */ unsigned long _tdoserrno;
  /* this+0x10 */ unsigned int _fpds;
  /* this+0x14 */ unsigned long _holdrand;
  /* this+0x18 */ char * _token;
  /* this+0x1c */ wchar_t * _wtoken;
  /* this+0x20 */ unsigned char * _mtoken;
  /* this+0x24 */ char * _errmsg;
  /* this+0x28 */ wchar_t * _werrmsg;
  /* this+0x2c */ char * _namebuf0;
  /* this+0x30 */ wchar_t * _wnamebuf0;
  /* this+0x34 */ char * _namebuf1;
  /* this+0x38 */ wchar_t * _wnamebuf1;
  /* this+0x3c */ char * _asctimebuf;
  /* this+0x40 */ wchar_t * _wasctimebuf;
  /* this+0x44 */ void * _gmtimebuf;
  /* this+0x48 */ char * _cvtbuf;
  /* this+0x4c */ unsigned char[0x5] _con_ch_buf;
  /* this+0x52 */ unsigned short _ch_buf_used;
  /* this+0x54 */ void * _initaddr;
  /* this+0x58 */ void * _initarg;
  /* this+0x5c */ void * _pxcptacttab;
  /* this+0x60 */ void * _tpxcptinfoptrs;
  /* this+0x64 */ int _tfpecode;
  /* this+0x68 */ struct threadmbcinfostruct * ptmbcinfo;
  /* this+0x6c */ struct threadlocaleinfostruct * ptlocinfo;
  /* this+0x70 */ int _ownlocale;
  /* this+0x74 */ unsigned long _NLG_dwCode;
  /* this+0x78 */ void * _terminate;
  /* this+0x7c */ void * _unexpected;
  /* this+0x80 */ void * _translator;
  /* this+0x84 */ void * _purecall;
  /* this+0x88 */ void * _curexception;
  /* this+0x8c */ void * _curcontext;
  /* this+0x90 */ int _ProcessingThrow;
  /* this+0x94 */ void * _curexcspec;
  /* this+0x98 */ void * _pFrameInfoChain;
  /* this+0x9c */ struct setloc_struct _setloc_data;
  /* this+0x1f8 */ void * _reserved1;
  /* this+0x1fc */ void * _reserved2;
  /* this+0x200 */ void * _reserved3;
  /* this+0x204 */ void * _reserved4;
  /* this+0x208 */ void * _reserved5;
  /* this+0x20c */ int _cxxReThrow;
  /* this+0x210 */ unsigned long __initDomain;
}

struct _is_ctype_compatible {
  /* this+0x0 */ unsigned long id;
  /* this+0x4 */ int is_clike;
}

struct setloc_struct {
  /* this+0x0 */ char * pchLanguage;
  /* this+0x4 */ char * pchCountry;
  /* this+0x8 */ int iLcidState;
  /* this+0xc */ int iPrimaryLen;
  /* this+0x10 */ int bAbbrevLanguage;
  /* this+0x14 */ int bAbbrevCountry;
  /* this+0x18 */ unsigned long lcidLanguage;
  /* this+0x1c */ unsigned long lcidCountry;
  /* this+0x20 */ struct tagLC_ID _cacheid;
  /* this+0x28 */ unsigned int _cachecp;
  /* this+0x2c */ char[0x83] _cachein;
  /* this+0xaf */ char[0x83] _cacheout;
  /* this+0x134 */ struct _is_ctype_compatible[0x5] _Lcid_c;
}

struct ioinfo {
  /* this+0x0 */ int osfhnd;
  /* this+0x4 */ char osfile;
  /* this+0x5 */ char pipech;
  /* this+0x8 */ int lockinitflag;
  /* this+0xc */ struct _RTL_CRITICAL_SECTION lock;
      /* this+0x25 */ char[0x2] pipech2;
  /* this+0x28 */ __int64 startpos;
  /* this+0x30 */ int utf8translations;
  /* this+0x34 */ char dbcsBuffer;
  /* this+0x38 */ int dbcsBufferUsed;
}

union doubleint {
  /* this+0x0 */ __int64 bigint;
  /* this+0x0 */ struct <unnamed-tag> twoints;
}

struct IMAGE_LOAD_CONFIG_DIRECTORY32_2 {
  /* this+0x0 */ unsigned long Size;
  /* this+0x4 */ unsigned long TimeDateStamp;
  /* this+0x8 */ unsigned short MajorVersion;
  /* this+0xa */ unsigned short MinorVersion;
  /* this+0xc */ unsigned long GlobalFlagsClear;
  /* this+0x10 */ unsigned long GlobalFlagsSet;
  /* this+0x14 */ unsigned long CriticalSectionDefaultTimeout;
  /* this+0x18 */ unsigned long DeCommitFreeBlockThreshold;
  /* this+0x1c */ unsigned long DeCommitTotalFreeThreshold;
  /* this+0x20 */ unsigned long LockPrefixTable;
  /* this+0x24 */ unsigned long MaximumAllocationSize;
  /* this+0x28 */ unsigned long VirtualMemoryThreshold;
  /* this+0x2c */ unsigned long ProcessHeapFlags;
  /* this+0x30 */ unsigned long ProcessAffinityMask;
  /* this+0x34 */ unsigned short CSDVersion;
  /* this+0x36 */ unsigned short Reserved1;
  /* this+0x38 */ unsigned long EditList;
  /* this+0x3c */ unsigned int * SecurityCookie;
  /* this+0x40 */ void * * SEHandlerTable;
  /* this+0x44 */ unsigned long SEHandlerCount;
}

struct tagLC_STRINGS {
  /* this+0x0 */ char[0x40] szLanguage;
  /* this+0x40 */ char[0x40] szCountry;
  /* this+0x80 */ char[0x10] szCodePage;
}

struct tagLOCALETAB {
  /* this+0x0 */ char * szName;
  /* this+0x4 */ char[0x4] chAbbrev;
}

union FT {
  /* this+0x0 */ unsigned __int64 ft_scalar;
  /* this+0x0 */ struct _FILETIME ft_struct;
}

struct _XCPT_ACTION {
  /* this+0x0 */ unsigned long XcptNum;
  /* this+0x4 */ int SigNum;
  /* this+0x8 */ function  * XcptAction;
}

struct _FILEX {
  /* this+0x0 */ struct _iobuf f;
  /* this+0x20 */ struct _RTL_CRITICAL_SECTION lock;
}

struct IDpair {
  /* this+0x0 */ struct _iobuf * stream;
  /* this+0x4 */ int prochnd;
}

struct __timeb64 {
  /* this+0x0 */ __int64 time;
  /* this+0x8 */ unsigned short millitm;
  /* this+0xa */ short timezone;
  /* this+0xc */ short dstflag;
}

struct timeb {
  /* this+0x0 */ __int64 time;
  /* this+0x8 */ unsigned short millitm;
  /* this+0xa */ short timezone;
  /* this+0xc */ short dstflag;
}

struct transitiondate {
  /* this+0x0 */ int yr;
  /* this+0x4 */ int yd;
  /* this+0x8 */ int ms;
}

union _TP_CALLBACK_ENVIRON_V1::<unnamed-type-u> {
  /* this+0x0 */ unsigned long Flags;
  /* this+0x0 */ struct _TP_CALLBACK_ENVIRON_V1::<unnamed-type-u>::<unnamed-type-s> s;
}

struct _TP_CALLBACK_ENVIRON_V1::<unnamed-type-u>::<unnamed-type-s> {
      }

class <CrtImplementationDetails>::NativeDll {
          }

class _LocaleUpdate {
  /* this+0x0 */ struct localeinfo_struct localeinfo;
  /* this+0x8 */ struct _tiddata * ptd;
  /* this+0xc */ bool updated;
}

struct _flt {
  /* this+0x0 */ int flags;
  /* this+0x4 */ int nbytes;
  /* this+0x8 */ long lval;
  /* this+0x10 */ double dval;
}

struct code_page_info {
  /* this+0x0 */ int code_page;
  /* this+0x4 */ unsigned short[0x6] mbulinfo;
  /* this+0x10 */ unsigned char[0x8][0x4] rgrange;
}

union _output_l::__l2::<unnamed-type-buffer> {
  /* this+0x0 */ char[0x200] sz;
}

union _output_l::__l2::<unnamed-type-text> {
  /* this+0x0 */ char * sz;
  /* this+0x0 */ wchar_t * wz;
}

struct _output_l::__l77::_count_string {
}

struct positional_param {
  /* this+0x0 */ enum ARG_TYPE arg_type;
  /* this+0x4 */ char * arg_ptr;
  /* this+0x8 */ char type;
  /* this+0xc */ int flags;
}

union _output_s_l::__l2::<unnamed-type-buffer> {
  /* this+0x0 */ char[0x200] sz;
}

union _output_s_l::__l2::<unnamed-type-text> {
  /* this+0x0 */ char * sz;
  /* this+0x0 */ wchar_t * wz;
}

struct _output_s_l::__l83::_count_string {
}

struct rterrmsgs {
  /* this+0x0 */ int rterrno;
  /* this+0x4 */ const wchar_t * rterrtxt;
}

struct _FloatOutStruct {
  /* this+0x0 */ short exp;
  /* this+0x2 */ char sign;
  /* this+0x3 */ char ManLen;
  /* this+0x4 */ char[0x16] man;
}

struct FpFormatDescriptor {
  /* this+0x0 */ int max_exp;
  /* this+0x4 */ int min_exp;
  /* this+0x8 */ int precision;
  /* this+0xc */ int exp_width;
  /* this+0x10 */ int format_width;
  /* this+0x14 */ int bias;
}

union _CRT_DOUBLE_COMPONENTS {
  /* this+0x0 */ double d;
      }

struct DispLocals {
  /* this+0x0 */ unsigned short wUser1;
  /* this+0x2 */ unsigned short wUser2;
  /* this+0x4 */ unsigned short savCntrl;
  /* this+0x6 */ unsigned short setCntrl;
  /* this+0x8 */ unsigned short StatusWord;
  /* this+0xa */  Fac;
  /* this+0x14 */ unsigned long Function;
  /* this+0x18 */ unsigned char ErrorType;
  /* this+0x19 */ unsigned char bUser3;
  /* this+0x1a */ unsigned long typ;
  /* this+0x1e */ unsigned long nam;
  /* this+0x22 */ unsigned __int64 arg1;
  /* this+0x2a */ unsigned __int64 arg2;
  /* this+0x32 */ unsigned __int64 retval;
  /* this+0x3a */ unsigned char savebuf;
}

struct funtab {
  /* this+0x0 */ unsigned char fnamlen;
  /* this+0x1 */ unsigned char fnam;
  /* this+0x7 */ unsigned char fuseval;
  /* this+0xd */ unsigned char fnumarg;
  /* this+0xe */ unsigned char fnumber;
}

struct MTStackFrame {
  /* this+0x0 */ unsigned __int64 MTS_LocalFac;
  /* this+0x8 */ unsigned char MTS_cdispflags;
}

struct _U32ARRAY {
  /* this+0x0 */ unsigned long[0x4] W;
}

struct _U64 {
  /* this+0x0 */ unsigned long[0x2] W;
}

struct _FP128 {
  /* this+0x0 */ unsigned long[0x4] W;
}

struct _FPIEEE_EXCEPTION_FLAGS {
          }

struct _FPIEEE_VALUE {
  /* this+0x0 */ union <unnamed-tag> Value;
    }

struct _FPIEEE_RECORD {
        /* this+0x4 */ struct _FPIEEE_EXCEPTION_FLAGS Cause;
  /* this+0x8 */ struct _FPIEEE_EXCEPTION_FLAGS Enable;
  /* this+0xc */ struct _FPIEEE_EXCEPTION_FLAGS Status;
  /* this+0x10 */ struct _FPIEEE_VALUE Operand1;
  /* this+0x30 */ struct _FPIEEE_VALUE Operand2;
  /* this+0x50 */ struct _FPIEEE_VALUE Result;
}

struct _FPQ64 {
  /* this+0x0 */ __int64[0x2] W;
}

struct _FP80 {
  /* this+0x0 */ unsigned short[0x5] W;
}

struct _I64 {
  /* this+0x0 */ unsigned long[0x2] W;
}

struct _BCD80 {
  /* this+0x0 */ unsigned short[0x5] W;
}

union _dbl {
  /* this+0x0 */ long[0x2] lng;
  /* this+0x0 */ double dbl;
}

struct TypeDescriptor {
  /* this+0x0 */ unsigned long hash;
  /* this+0x4 */ void * spare;
  /* this+0x8 */ char[0x0] name;
}

struct PMD {
  /* this+0x0 */ int mdisp;
  /* this+0x4 */ int pdisp;
  /* this+0x8 */ int vdisp;
}

struct _s_CatchableType {
  /* this+0x0 */ unsigned int properties;
  /* this+0x4 */ struct TypeDescriptor * pType;
  /* this+0x8 */ struct PMD thisDisplacement;
  /* this+0x14 */ int sizeOrOffset;
  /* this+0x18 */ function  * copyFunction;
}

struct _s_CatchableTypeArray {
  /* this+0x0 */ int nCatchableTypes;
  /* this+0x4 */ const struct _s_CatchableType *[0x0] arrayOfCatchableTypes;
}

struct _s_HandlerType {
  /* this+0x0 */ unsigned int adjectives;
  /* this+0x4 */ struct TypeDescriptor * pType;
  /* this+0x8 */ int dispCatchObj;
  /* this+0xc */ void * addressOfHandler;
}

struct _s_ESTypeList {
  /* this+0x0 */ int nCount;
  /* this+0x4 */ const struct _s_HandlerType * pTypeArray;
}

struct _s_ThrowInfo {
  /* this+0x0 */ unsigned int attributes;
  /* this+0x4 */ function  * pmfnUnwind;
  /* this+0x8 */ function  * pForwardCompat;
  /* this+0xc */ const struct _s_CatchableTypeArray * pCatchableTypeArray;
}

struct _s_UnwindMapEntry {
  /* this+0x0 */ int toState;
  /* this+0x4 */ function  * action;
}

struct _s_TryBlockMapEntry {
  /* this+0x0 */ int tryLow;
  /* this+0x4 */ int tryHigh;
  /* this+0x8 */ int catchHigh;
  /* this+0xc */ int nCatches;
  /* this+0x10 */ const struct _s_HandlerType * pHandlerArray;
}

struct _s_FuncInfo {
      /* this+0x4 */ int maxState;
  /* this+0x8 */ const struct _s_UnwindMapEntry * pUnwindMap;
  /* this+0xc */ unsigned int nTryBlocks;
  /* this+0x10 */ const struct _s_TryBlockMapEntry * pTryBlockMap;
  /* this+0x14 */ unsigned int nIPMapEntries;
  /* this+0x18 */ void * pIPtoStateMap;
  /* this+0x1c */ const struct _s_ESTypeList * pESTypeList;
  /* this+0x20 */ int EHFlags;
}

struct EHExceptionRecord::EHParameters {
  /* this+0x0 */ unsigned long magicNumber;
  /* this+0x4 */ void * pExceptionObject;
  /* this+0x8 */ const struct _s_ThrowInfo * pThrowInfo;
}

struct EHExceptionRecord {
  /* this+0x0 */ unsigned long ExceptionCode;
  /* this+0x4 */ unsigned long ExceptionFlags;
  /* this+0x8 */ struct _EXCEPTION_RECORD * ExceptionRecord;
  /* this+0xc */ void * ExceptionAddress;
  /* this+0x10 */ unsigned long NumberParameters;
  /* this+0x14 */ struct EHExceptionRecord::EHParameters params;
}

struct EHRegistrationNode {
  /* this+0x0 */ struct EHRegistrationNode * pNext;
  /* this+0x4 */ void * frameHandler;
  /* this+0x8 */ int state;
}

struct CatchGuardRN {
  /* this+0x0 */ struct EHRegistrationNode * pNext;
  /* this+0x4 */ void * pFrameHandler;
  /* this+0x8 */ unsigned int RandomCookie;
  /* this+0xc */ const struct _s_FuncInfo * pFuncInfo;
  /* this+0x10 */ struct EHRegistrationNode * pRN;
  /* this+0x14 */ int CatchDepth;
}

struct TranslatorGuardRN {
  /* this+0x0 */ struct EHRegistrationNode * pNext;
  /* this+0x4 */ void * pFrameHandler;
  /* this+0x8 */ unsigned int RandomCookie;
  /* this+0xc */ const struct _s_FuncInfo * pFuncInfo;
  /* this+0x10 */ struct EHRegistrationNode * pRN;
  /* this+0x14 */ int CatchDepth;
  /* this+0x18 */ struct EHRegistrationNode * pMarkerRN;
  /* this+0x1c */ void * ESP;
  /* this+0x20 */ void * EBP;
  /* this+0x24 */ int DidUnwind;
}

struct FrameInfo {
  /* this+0x0 */ void * pExceptionObject;
  /* this+0x4 */ struct FrameInfo * pNext;
}

struct _HeapManager::Block {
  /* this+0x0 */ struct _HeapManager::Block * next;
  /* this+0x4 */ char[0x1000] memBlock;
}

class _HeapManager {
  /* this+0x0 */ function  * pOpNew;
  /* this+0x4 */ function  * pOpDelete;
  /* this+0x8 */ struct _HeapManager::Block * head;
  /* this+0xc */ struct _HeapManager::Block * tail;
  /* this+0x10 */ unsigned int blockLeft;
}

class Replicator {
  /* this+0x0 */ int index;
  /* this+0x4 */ class DName *[0xa] dNameBuffer;
}

class DName {
  /* this+0x0 */ class DNameNode * node;
                  }

class DNameNode {
}

class charNode {
  /* this+0x4 */ char me;
}

class pcharNode {
  /* this+0x4 */ char * me;
  /* this+0x8 */ int myLen;
}

class UnDecorator {
  /* this+0x0 */ class Replicator ArgList;
    /* this+0x2c */ class Replicator ZNameList;
                    }

class pDNameNode {
  /* this+0x4 */ class DName * me;
}

class pairNode {
  /* this+0x4 */ class DNameNode * left;
  /* this+0x8 */ class DNameNode * right;
  /* this+0xc */ int myLen;
}

class DNameStatusNode {
  /* this+0x4 */ enum DNameStatus me;
  /* this+0x8 */ int myLen;
}


