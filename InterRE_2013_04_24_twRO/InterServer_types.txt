struct $_TypeDescriptor$_extraBytes_11 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xb] name
}

struct $_TypeDescriptor$_extraBytes_12 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xc] name
}

struct $_TypeDescriptor$_extraBytes_14 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xe] name
}

struct $_TypeDescriptor$_extraBytes_15 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0xf] name
}

struct $_TypeDescriptor$_extraBytes_17 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x11] name
}

struct $_TypeDescriptor$_extraBytes_18 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x12] name
}

struct $_TypeDescriptor$_extraBytes_19 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x13] name
}

struct $_TypeDescriptor$_extraBytes_20 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x14] name
}

struct $_TypeDescriptor$_extraBytes_21 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x15] name
}

struct $_TypeDescriptor$_extraBytes_22 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x16] name
}

struct $_TypeDescriptor$_extraBytes_23 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x17] name
}

struct $_TypeDescriptor$_extraBytes_24 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x18] name
}

struct $_TypeDescriptor$_extraBytes_25 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x19] name
}

struct $_TypeDescriptor$_extraBytes_26 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1a] name
}

struct $_TypeDescriptor$_extraBytes_27 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1b] name
}

struct $_TypeDescriptor$_extraBytes_28 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1c] name
}

struct $_TypeDescriptor$_extraBytes_30 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1e] name
}

struct $_TypeDescriptor$_extraBytes_31 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x1f] name
}

struct $_TypeDescriptor$_extraBytes_33 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x21] name
}

struct $_TypeDescriptor$_extraBytes_34 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x22] name
}

struct $_TypeDescriptor$_extraBytes_35 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x23] name
}

struct $_TypeDescriptor$_extraBytes_36 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x24] name
}

struct $_TypeDescriptor$_extraBytes_37 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x25] name
}

struct $_TypeDescriptor$_extraBytes_39 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x27] name
}

struct $_TypeDescriptor$_extraBytes_40 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x28] name
}

struct $_TypeDescriptor$_extraBytes_42 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2a] name
}

struct $_TypeDescriptor$_extraBytes_43 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2b] name
}

struct $_TypeDescriptor$_extraBytes_45 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2d] name
}

struct $_TypeDescriptor$_extraBytes_46 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2e] name
}

struct $_TypeDescriptor$_extraBytes_47 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x2f] name
}

struct $_TypeDescriptor$_extraBytes_48 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x30] name
}

struct $_TypeDescriptor$_extraBytes_49 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x31] name
}

struct $_TypeDescriptor$_extraBytes_50 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x32] name
}

struct $_TypeDescriptor$_extraBytes_52 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x34] name
}

struct $_TypeDescriptor$_extraBytes_53 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x35] name
}

struct $_TypeDescriptor$_extraBytes_58 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x3a] name
}

struct $_TypeDescriptor$_extraBytes_65 {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x41] name
}

struct $_s__CatchableTypeArray$_extraBytes_12 {
  /* this+0x0 */ int nCatchableTypes
  /* this+0x4 */ const struct _s__CatchableType *[0x3] arrayOfCatchableTypes
}

struct $_s__CatchableTypeArray$_extraBytes_8 {
  /* this+0x0 */ int nCatchableTypes
  /* this+0x4 */ const struct _s__CatchableType *[0x2] arrayOfCatchableTypes
}

struct $_s__RTTIBaseClassArray$_extraBytes_12 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x3] arrayOfBaseClassDescriptors
}

struct $_s__RTTIBaseClassArray$_extraBytes_16 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x4] arrayOfBaseClassDescriptors
}

struct $_s__RTTIBaseClassArray$_extraBytes_4 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x1] arrayOfBaseClassDescriptors
}

struct $_s__RTTIBaseClassArray$_extraBytes_8 {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x2] arrayOfBaseClassDescriptors
}

class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *> {
    *
            /* this+0x4 */ class std::map<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> > > m_DataMap

  /* this+0x14 */ class std::map<unsigned int,unsigned long,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,unsigned long> > > m_IndexMap

    public class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::begin()
  public class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::end()
  public class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::findPrimaryKey(const unsigned long)
  public class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::findSecondaryKey(const unsigned int)
  public class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::erase(class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator)
  public bool N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::insert(unsigned long, unsigned int, class CMemorialDungeon *)
  public bool empty()
  public int size()
  public void clear()
  public void N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>(const class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *> &)
  public void N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>()
  public void N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::~N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>()
  public class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *> & operator=(const class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject {
    *
  /* this+0x4 */ class CMemorialDungeon * m_Object
  /* this+0x8 */ unsigned int m_SecondaryKey
  public void CObject(const class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject &)
  public void CObject(class CMemorialDungeon *, unsigned int)
  public void N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject::~CObject()
  public class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject & operator=(const class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject &)
  public void * __vecDelDtor(unsigned int)
}

class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator {
    *
  /* this+0x4 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > m_Iter

  public bool operator!=(const class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator &)
  public bool operator==(const class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator &)
  public void operator++()
  public class CMemorialDungeon * & GetObj()
  public void Iterator(const class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator &)
  public void Iterator(class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::CObject> >,0> > > &)
  public void N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator::~Iterator()
  public class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator & operator=(const class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *>::Iterator &)
  public void * __vecDelDtor(unsigned int)
}

class <CrtImplementationDetails>::NativeDll {
  /* [0x0000:0x00000000] */ static  const unsigned int ProcessDetach
  /* [0x0000:0x00000000] */ static  const unsigned int ProcessAttach
  /* [0x0000:0x00000000] */ static  const unsigned int ThreadAttach
  /* [0x0000:0x00000000] */ static  const unsigned int ThreadDetach
  /* [0x0000:0x00000000] */ static  const unsigned int ProcessVerifier
  public static bool IsInDllMain()
  public static bool IsInProcessAttach()
  public static bool IsInProcessDetach()
  public static bool IsInVcclrit()
  public static bool IsSafeForManagedCode()
}

struct <unnamed-tag> {
  /* this+0x0 */ union Value value

  /* this+0x8 */ int tt
  /* this+0xc */ struct Node * next
}

class stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > {
    public void hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >(struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >)
  public void hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >()
  public bool operator()(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public unsigned int operator()(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  /* this+0x0 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp

}

struct AID_GID_INFO {
  public void AID_GID_INFO(const unsigned long, const unsigned long)
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long GID
}

struct ALL_QUEST_LIST2_INFO {
  /* this+0x0 */ unsigned long questID
  /* this+0x4 */ bool active
  /* this+0x5 */ long quest_svrTime
  /* this+0x9 */ long quest_endTime
  /* this+0xd */ short hunting_count
}

struct ANON_OBJECT_HEADER {
  /* this+0x0 */ unsigned short Sig1
  /* this+0x2 */ unsigned short Sig2
  /* this+0x4 */ unsigned short Version
  /* this+0x6 */ unsigned short Machine
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ struct _GUID ClassID

  /* this+0x1c */ unsigned long SizeOfData
}

struct ANON_OBJECT_HEADER_BIGOBJ {
  /* this+0x0 */ unsigned short Sig1
  /* this+0x2 */ unsigned short Sig2
  /* this+0x4 */ unsigned short Version
  /* this+0x6 */ unsigned short Machine
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ struct _GUID ClassID

  /* this+0x1c */ unsigned long SizeOfData
  /* this+0x20 */ unsigned long Flags
  /* this+0x24 */ unsigned long MetaDataSize
  /* this+0x28 */ unsigned long MetaDataOffset
  /* this+0x2c */ unsigned long NumberOfSections
  /* this+0x30 */ unsigned long PointerToSymbolTable
  /* this+0x34 */ unsigned long NumberOfSymbols
}

struct ANON_OBJECT_HEADER_V2 {
  /* this+0x0 */ unsigned short Sig1
  /* this+0x2 */ unsigned short Sig2
  /* this+0x4 */ unsigned short Version
  /* this+0x6 */ unsigned short Machine
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ struct _GUID ClassID

  /* this+0x1c */ unsigned long SizeOfData
  /* this+0x20 */ unsigned long Flags
  /* this+0x24 */ unsigned long MetaDataSize
  /* this+0x28 */ unsigned long MetaDataOffset
}

struct AUCTION_ITEM_SEARCH_INFO {
  /* this+0x0 */ unsigned long AuctionID
  /* this+0x4 */ char[0x18] SellerName
  /* this+0x1c */ unsigned short ITID
  /* this+0x1e */ int Type
  /* this+0x22 */ short count
  /* this+0x24 */ bool IsIdentified
  /* this+0x25 */ bool IsDamaged
  /* this+0x26 */ unsigned char refiningLevel
  /* this+0x27 */ struct EQUIPSLOTINFO slot

  /* this+0x2f */ int NowPrice
  /* this+0x33 */ int MaxPrice
  /* this+0x37 */ char[0x18] BuyerName
  /* this+0x4f */ long DeleteTime
}

struct Addr {
  /* this+0x0 */ unsigned long ip
  /* this+0x4 */ int port
  public void GetIp(char *)
  public void SetIp(const char *)
}

struct BATTERY_REPORTING_SCALE {
  /* this+0x0 */ unsigned long Granularity
  /* this+0x4 */ unsigned long Capacity
}

struct BATTLE_FIELD_INFO {
  /* this+0x0 */ unsigned long BFNO
  /* this+0x4 */ char[0x38] BattleFieldName
  /* this+0x3c */ short JoinTeam
}

struct BILLING_EXTENSION {
  /* this+0x0 */ unsigned char m_byAllowDeny
  /* this+0x1 */ unsigned long m_dw_1st
  /* this+0x5 */ unsigned long m_dw_2nd
  /* this+0x9 */ unsigned long m_dw_3rd
  /* this+0xd */ unsigned char[0x7] m_byReserved
}

struct BITMAPV4HEADER {
  /* this+0x0 */ unsigned long bV4Size
  /* this+0x4 */ long bV4Width
  /* this+0x8 */ long bV4Height
  /* this+0xc */ unsigned short bV4Planes
  /* this+0xe */ unsigned short bV4BitCount
  /* this+0x10 */ unsigned long bV4V4Compression
  /* this+0x14 */ unsigned long bV4SizeImage
  /* this+0x18 */ long bV4XPelsPerMeter
  /* this+0x1c */ long bV4YPelsPerMeter
  /* this+0x20 */ unsigned long bV4ClrUsed
  /* this+0x24 */ unsigned long bV4ClrImportant
  /* this+0x28 */ unsigned long bV4RedMask
  /* this+0x2c */ unsigned long bV4GreenMask
  /* this+0x30 */ unsigned long bV4BlueMask
  /* this+0x34 */ unsigned long bV4AlphaMask
  /* this+0x38 */ unsigned long bV4CSType
  /* this+0x3c */ struct tagICEXYZTRIPLE bV4Endpoints

  /* this+0x60 */ unsigned long bV4GammaRed
  /* this+0x64 */ unsigned long bV4GammaGreen
  /* this+0x68 */ unsigned long bV4GammaBlue
}

struct BITMAPV5HEADER {
  /* this+0x0 */ unsigned long bV5Size
  /* this+0x4 */ long bV5Width
  /* this+0x8 */ long bV5Height
  /* this+0xc */ unsigned short bV5Planes
  /* this+0xe */ unsigned short bV5BitCount
  /* this+0x10 */ unsigned long bV5Compression
  /* this+0x14 */ unsigned long bV5SizeImage
  /* this+0x18 */ long bV5XPelsPerMeter
  /* this+0x1c */ long bV5YPelsPerMeter
  /* this+0x20 */ unsigned long bV5ClrUsed
  /* this+0x24 */ unsigned long bV5ClrImportant
  /* this+0x28 */ unsigned long bV5RedMask
  /* this+0x2c */ unsigned long bV5GreenMask
  /* this+0x30 */ unsigned long bV5BlueMask
  /* this+0x34 */ unsigned long bV5AlphaMask
  /* this+0x38 */ unsigned long bV5CSType
  /* this+0x3c */ struct tagICEXYZTRIPLE bV5Endpoints

  /* this+0x60 */ unsigned long bV5GammaRed
  /* this+0x64 */ unsigned long bV5GammaGreen
  /* this+0x68 */ unsigned long bV5GammaBlue
  /* this+0x6c */ unsigned long bV5Intent
  /* this+0x70 */ unsigned long bV5ProfileData
  /* this+0x74 */ unsigned long bV5ProfileSize
  /* this+0x78 */ unsigned long bV5Reserved
}

struct BSMINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct HDESK__ * hdesk
  /* this+0x8 */ struct HWND__ * hwnd
  /* this+0xc */ struct _LUID luid

}

struct BUYING_STORE_ITEMLIST {
  /* this+0x0 */ int price
  /* this+0x4 */ short count
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ unsigned short ITID
  public void BUYING_STORE_ITEMLIST(const unsigned short, const int, const short, const unsigned char)
  public void BUYING_STORE_ITEMLIST()
}

struct BlockCnt {
  /* this+0x0 */ struct BlockCnt * previous
  /* this+0x4 */ int breaklist
  /* this+0x8 */ unsigned char nactvar
  /* this+0x9 */ unsigned char upval
  /* this+0xa */ unsigned char isbreakable
}

struct CASH_BUY_ITEM {
  /* this+0x0 */ unsigned long item_id
  /* this+0x4 */ int count
  /* this+0x8 */ short tab_code
}

struct CASH_ITEM_LIST {
  public void CASH_ITEM_LIST(const unsigned long, const int)
  /* this+0x0 */ unsigned long item_id
  /* this+0x4 */ int price
}

struct CASH_ITEM_LIST2 {
  public bool operator==(const struct CASH_ITEM_LIST2 &)
  public void CASH_ITEM_LIST2()
  public void CASH_ITEM_LIST2(const unsigned short, const int)
  /* this+0x0 */ unsigned short item_id
  /* this+0x2 */ int price
}

class CAcceptHandler {
    *
  public void CAcceptHandler(const class CAcceptHandler &)
  public void CAcceptHandler()
  public void ~CAcceptHandler()
  public int OnConnect(unsigned int, unsigned long)
  public class CAcceptHandler & operator=(const class CAcceptHandler &)
  public void * __vecDelDtor(unsigned int)
}

class CAcceptThread {
  N2Thread, offset = 0x0

  /* this+0x30 */ bool m_bOK
  /* this+0x31 */ bool m_bReqExit
  /* this+0x34 */ class CAcceptHandler * m_cpHandler
  /* this+0x38 */ const unsigned long m_IPaddr
  /* this+0x3c */ const short m_Port
  /* this+0x40 */ const int m_Backlog
  /* this+0x44 */ unsigned int m_Socket
  /* this+0x48 */ unsigned int m_ipLog
  private unsigned int ThreadFunction()
  private void PostThreadQuitMessage()
  private bool Create()
  private void Destory()
  public const bool isOK()
  public bool Start()
  public void Stop()
  public void CAcceptThread(const class CAcceptThread &)
  public void CAcceptThread(const char *, class CAcceptHandler * const, const unsigned long, const short, const int, const unsigned int)
  public void ~CAcceptThread()
  /* this+0x4c */ const char * m_Name
  public void * __vecDelDtor(unsigned int)
}

class CAcceptor {
}

struct CAsyncOperation {
  _OVERLAPPED, offset = 0x0

  /* this+0x14 */ struct _WSABUF m_dataBuf

  /* this+0x1c */ char[0x2800] m_buffer
    /* this+0x281c */ int m_type
  /* this+0x2820 */ unsigned int m_socket
  /* this+0x2824 */ class CAsyncStream * m_stream
}

class CAsyncStream {
    *
  public void CAsyncStream(const class CAsyncStream &)
  public void CAsyncStream(int, int)
  public void CAsyncStream::CAsyncStream()
  public void CAsyncStream::~CAsyncStream()
  public void CAsyncStream::Init(class CPacketHandler *)
  public bool CAsyncStream::Open(unsigned int)
  public void CAsyncStream::Send(int, const char *)
  public bool Send2(const unsigned char *, const int)
  public bool IsSendable2(const int)
  public int CAsyncStream::Close(const bool)
  public unsigned int GetSocket()
  public void CAsyncStream::SetRecvQueueSize(int)
  public void CAsyncStream::SetSendQueueSize(int)
  public unsigned long CAsyncStream::GetIP()
  public void CAsyncStream::OnComplete(int, unsigned long, struct CAsyncOperation *)
  public unsigned long GetLastError()
  public class CPacketQueue * GetRecvQueuePtr()
  /* this+0x4 */ unsigned long m_completionKey
    /* [0x0003:0x0000387c] */ static  unsigned long m_newCompletionKey
  protected int CAsyncStream::SendDataInQueue(int)
  protected int CAsyncStream::OnRecvCompletion(long)
  protected int CAsyncStream::OnSendCompletion(long)
  protected unsigned long CAsyncStream::GenerateCompletionKey()
  /* this+0x8 */ unsigned int m_socket
  /* this+0xc */ class CPacketQueue m_sendQueue

  /* this+0x38 */ class CPacketQueue m_recvQueue

  /* this+0x64 */ struct _RTL_CRITICAL_SECTION m_csLock

  /* this+0x7c */ struct CAsyncOperation m_recvOperation

  /* this+0x28a4 */ struct CAsyncOperation m_sendOperation

  /* this+0x50cc */ class CPacketHandler * m_packetHandler
  /* this+0x50d0 */ unsigned long m_lastError
  public class CAsyncStream & operator=(const class CAsyncStream &)
  public void * __vecDelDtor(unsigned int)
}

class CBuyingStoreItemList {
  public bool OpenFileBuyingStoreItemList()
  public bool IsPossibleTradeItem(const unsigned short)
  /* this+0x0 */ class std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > m_BuyingStoreItemList

  public void CBuyingStoreItemList(const class CBuyingStoreItemList &)
  public void CBuyingStoreItemList()
  public void ~CBuyingStoreItemList()
  public class CBuyingStoreItemList & operator=(const class CBuyingStoreItemList &)
  public void * __vecDelDtor(unsigned int)
}

struct CCallS {
  /* this+0x0 */ function  * func
  /* this+0x4 */ void * ud
}

class CClient {
    *
  public void CClient(const class CClient &)
  public void CClient::CClient()
  public void CClient::~CClient()
  public int CClient::GetType()
  public void CClient::AddErrorCnt(const char *, const int, const unsigned long, const unsigned long)
  public void CClient::Init()
  public int IsErrorClient()
  public int IsErrorServer()
  public int Close()
  public void CClient::Send(int, const char *)
  public int GetErrorCount()
  /* this+0x4 */ class CAsyncStream * m_asyncStream
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_disconnector_cs

  /* this+0x20 */ unsigned long m_dwErrorCount
  /* this+0x24 */ unsigned long m_nBanTime
  public class CClient & operator=(const class CClient &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CClosure {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x6 */ unsigned char isC
  /* this+0x7 */ unsigned char nupvalues
  /* this+0x8 */ union GCObject * gclist
  /* this+0xc */ struct Table * env
  /* this+0x10 */ function  * f
  /* this+0x18 */ struct lua_TValue[0x1] upvalue
}

class CDBStatement {
  public void CDBStatement()
  public void CDBStatement::~CDBStatement()
  public void * operator void *()
  public bool CDBStatement::Init(void *)
  /* this+0x0 */ void * m_hStmt
  public void * __vecDelDtor(unsigned int)
}

class CDateTime {
  public void CDateTime::AddTime(int, int, int)
  public int CheckTimeOut(long)
  public int CheckTimeOut()
  public void CDateTime::GetNowTime()
  public void CDateTime::SetTime(short, short, short, short)
  public void CDateTime::GetTime(short &, short &, short &, short &)
  public long GetTime_t()
  public struct tagTIMESTAMP_STRUCT operator struct tagTIMESTAMP_STRUCT()
  public long operator __w64 long()
  public int GetYear()
  public int GetMonth()
  public int GetDay()
  public int GetHour()
  public int GetMin()
  public int GetSec()
  /* this+0x0 */ long m_time
  public void CDateTime(int, int, int, int, int, int, int)
  public void CDateTime()
  public void CDateTime::CDateTime(const long)
  public void ~CDateTime()
  public void * __vecDelDtor(unsigned int)
}

class CErrorLog {
    *
  public void CErrorLog(const class CErrorLog &)
  public void CErrorLog::CErrorLog()
  public void CErrorLog::~CErrorLog()
  public void CmtLog(const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int, const int)
  public void CErrorLog::KillAllLog(char *)
  public void MoveLog(char *)
  public void MoveLogFmt(const char *, <NoType>)
  public void CreateLog(char *)
  public void PacketErrorLog(char *, unsigned long)
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_csCriticalError

  public class CErrorLog & operator=(const class CErrorLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CExpParameter {
  CODBC, offset = 0x0

  public void CExpParameter(const class CExpParameter &)
  public void CExpParameter::CExpParameter()
  public void CExpParameter::~CExpParameter()
  public void CExpParameter::Init(const char *, const char *)
  public void CExpParameter::GetGuildExpParameter()
  public int CExpParameter::GetGuildNextExp(short)
  /* this+0x14 */ class std::map<short,int,std::less<short>,std::allocator<std::pair<short const ,int> > > m_guildexpValue

  public class CExpParameter & operator=(const class CExpParameter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CFriendDB {
  CODBC, offset = 0x0

  public void CFriendDB::DropFriend(unsigned long)
  public int CFriendDB::LoadFriend(unsigned long, struct STRUCT_FRIEND *)
  public void CFriendDB::SaveFriend(unsigned long, struct STRUCT_FRIEND *, int)
  public void CFriendDB(const class CFriendDB &)
  public void CFriendDB::CFriendDB()
  public void CFriendDB::~CFriendDB()
  public class CFriendDB & operator=(const class CFriendDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CGVar {
  public bool isOK()
  public int GetAsyncDBThreadNum()
  public void SetGlobalDBPwd(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void SetCharacterDBPwd(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetGlobalDBPwd()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetCharacterDBPwd()
  private bool CGVar::Create()
  private void Destroy()
  public static bool CGVar::CreateInstance()
  public static void CGVar::DestroyInstance()
  public void CGVar(const class CGVar &)
  private void CGVar::CGVar()
  private void CGVar::~CGVar()
  /* [0x0003:0x000038e8] */ static  class CGVar * m_cpSelf
  /* this+0x0 */ bool m_bOK
  /* this+0x4 */ int m_AsyncDBThreadNum
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_GlobalDBPwd

  /* this+0x24 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_CharacterDBPwd

  public class CGVar & operator=(const class CGVar &)
  private void * __vecDelDtor(unsigned int)
}

class CGuild {
    *
  public int CGuild::FindBanishMember(int)
  public void CGuild::UpdateMemberStatus(int, int, short, int, short, short, short)
  public void UpdateMemberJob_Level(int, int, int)
  public void CGuild::UpdateMemberChangePos(unsigned long, unsigned long)
  public void CGuild::UpdateMemberPosition(unsigned long, char *, int, int, int)
  public int CGuild::FindAllyGuild(unsigned long)
  public int CGuild::FindHostileGuild(unsigned long)
  public int CGuild::IsMaster(unsigned long)
  public int CGuild::GetPosJoinRight(unsigned long)
  public int CGuild::GetPosPenaltyRight(unsigned long)
  public int CGuild::GetAllyCount()
  public int CGuild::GetHostileCount()
  public void GetGuildInfo(struct GUILDINFO &)
  public void CGuild(class CGuild &)
  public void CGuild::CGuild()
  public void CGuild::~CGuild()
  public void CGuild::Init()
  public void CGuild::DeleteMPosition()
  public void CGuild::DeleteBanishInfo()
  public void CGuild::DeleteMInfo()
  public void CGuild::DeleteAllyInfo()
  public int CGuild::DeleteFirstBanishInfo()
  public void CGuild::ClearAll()
  public void CGuild::SetGuildMasterName(char *)
  public void CGuild::SetGuildName(char *)
  public void CGuild::SetGuildInfo(struct GUILDINFO *)
  public void SetGuildLevel(int)
  public void SetMaxUserNum(int)
  public void SetGuildExp(int)
  public void SetGDID(unsigned long)
  public void SetLevel(int)
  public void SetSkillPoint(int)
  public void SetSkillData(const unsigned char *, const int)
  public int CGuild::GetGuildMemberOnline()
  public char * GetPosName(unsigned long)
  public char * CGuild::GetMemberName(unsigned long)
  public int CGuild::GetMemberExp(unsigned long)
  public int CGuild::GetMemberLevel(unsigned long)
  public int CGuild::GetMemberClass(unsigned long)
  public void GetGuildPosID(char *, const int)
  public int CGuild::GetGuildPosID(unsigned long)
  public int isJoinRight(unsigned long)
  public int isPenaltyRight(unsigned long)
  public void CGuild::AddGuildMInfo(struct GUILDMINFO *)
  public void CGuild::AddGuildAllyInfo(struct GUILDALLYINFO *)
  public void CGuild::AddGuildBanishInfo(struct GUILDBANISHINFO *)
  public void CGuild::AddGuildMPosition(struct GUILDMPOSITION *)
  public int GetAverageLevel()
  public int CGuild::GetGuildMSize()
  public int GetGuildMAllocSize()
  public int FindMember(unsigned long)
  public int GetGuildAllySize()
  public int CGuild::GetGuildBanishSize()
  public int GetGuildMPosSize()
  public int CGuild::UpdateMoney(int, int)
  public struct GUILDMINFO * CGuild::AllocGuildMInfo()
  public struct GUILDALLYINFO * CGuild::AllocGuildAllyInfo()
  public struct GUILDBANISHINFO * AllocGuildBanishInfo()
  public struct GUILDMPOSITION * CGuild::AllocGuildMPosition()
  public void CGuild::DeleteGuildAllyInfo(unsigned long, int)
  public void DeleteGuildBanishInfo(unsigned long)
  public void CGuild::DeleteGuildMInfo(unsigned long)
  public int CGuild::AddGuildExp(unsigned long, int)
  public int GetServiceRate(unsigned long)
  public void GetGuildMemberInfo(unsigned long, struct GUILD_MEMBER_INFO &)
  public void GetGuildBanishInfo(char *, const int)
  public void GetGuildAllyInfo(char *, const int)
  public void GetGuildMPosition(char *, const int)
  public void InitGuildMInfo(struct GUILDMINFO *, char *, char *, unsigned long, unsigned long, unsigned long, int, int, int, int)
  public void CGuild::InitGuildMInfo(struct GUILDMINFO *, char *, char *, unsigned long, unsigned long, unsigned long, int, int, int, int, int, int, int)
  public int GetGDID()
  public int GetLevel()
  public char * GetGuildName()
  public char * GetMasterName()
  public int GetMaxUserNum()
  public int GetHonor()
  public int GetVirtue()
  public int GetType()
  public int GetClass()
  public int GetMoney()
  public int GetArenaWin()
  public int GetArenaLose()
  public int GetArenaDrawn()
  public char * GetManageLand()
  public int GetExp()
  public int GetPoint()
  public char * GetDesc()
  public char * GetNotice()
  public char * GetNoticeSubject()
  public void UpdateNotice(const unsigned long, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &, class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  public void SetEmblemVersion(int)
  public void SetEmblemLoad(int)
  public char * GetEmblem()
  public int GetEmblemVersion()
  public int IsEmblemLoad()
  public int GetEmblemSize()
  /* this+0x4 */ int m_GDID
  /* this+0x8 */ int m_level
  /* this+0xc */ char[0x18] m_guildName
  /* this+0x24 */ char[0x18] m_guildMasterName
  /* this+0x3c */ int m_maxUserNum
  /* this+0x40 */ int m_userNum
  /* this+0x44 */ int m_honor
  /* this+0x48 */ int m_virtue
  /* this+0x4c */ int m_type
  /* this+0x50 */ int m_class
  /* this+0x54 */ int m_money
  /* this+0x58 */ int m_arenaWin
  /* this+0x5c */ int m_arenaLose
  /* this+0x60 */ int m_arenaDrawn
  /* this+0x64 */ char[0x18] m_manageLand
  /* this+0x7c */ int m_exp
  /* this+0x80 */ int m_point
  /* this+0x84 */ char[0x50] m_desc
  /* this+0xd4 */ struct GUILDNOTICE m_guildNotice

  /* this+0x18c */ char[0xc00] m_guildEmblem
  /* this+0xd8c */ int m_isEmblemLoad
  /* this+0xd90 */ int m_emblemSize
  /* this+0xd94 */ int m_emblemVersion
  /* this+0xd98 */ class std::vector<GUILDMINFO *,std::allocator<GUILDMINFO *> > m_guildMInfo

  /* this+0xda8 */ class std::vector<GUILDALLYINFO *,std::allocator<GUILDALLYINFO *> > m_guildAllyInfo

  /* this+0xdb8 */ class std::vector<GUILDBANISHINFO *,std::allocator<GUILDBANISHINFO *> > m_guildBanishInfo

  /* this+0xdc8 */ class std::vector<GUILDMPOSITION *,std::allocator<GUILDMPOSITION *> > m_guildMPosition

  /* this+0xdd8 */ class CMemoryMgr<GUILDMINFO> m_GuildMInfoMPool

  /* this+0xdfc */ class CMemoryMgr<GUILDALLYINFO> m_GuildAllyInfoMPool

  /* this+0xe20 */ class CMemoryMgr<GUILDBANISHINFO> m_GuildBanishInfoMPool

  /* this+0xe44 */ class CMemoryMgr<GUILDMPOSITION> m_GuildMPositionMPool

  protected void SetMoney(int)
  protected int AddMoney(int)
  /* this+0xe68 */ int m_skillDataLength
  /* this+0xe6c */ int m_skillPoint
  /* this+0xe70 */ unsigned char[0x12c] m_skillData
  public class CGuild & operator=(class CGuild &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CGuildDB {
  CODBC, offset = 0x0

  public void CGuildDB(const class CGuildDB &)
  public void CGuildDB::CGuildDB()
  public void CGuildDB::~CGuildDB()
  public int CGuildDB::Init(const char *, const char *)
  public unsigned long GetTableDWORD(unsigned long, int)
  public void CGuildDB::GetTableChar(unsigned long, int, char *, int)
  public int UpdateTableChar(unsigned long, char *, int)
  public int UpdateTableDWORD(unsigned long, unsigned long, int)
  public int GetGuildList(int, int, int, int &, char *, int)
  public int CGuildDB::GetGuildID(char *)
  private unsigned long GetDWORD(unsigned long, char *)
  private void CGuildDB::GetChar(unsigned long, char *, char *, int)
  private void CGuildDB::InitStoredProcTable()
  /* this+0x14 */ class std::map<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> > > m_getProcTable

  public class CGuildDB & operator=(const class CGuildDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CGuildMgr {
    *
  public class CGuild * CGuildMgr::SearchGuild(unsigned long)
  public void CGuildMgr(const class CGuildMgr &)
  public void CGuildMgr::CGuildMgr()
  public void CGuildMgr::~CGuildMgr()
  public void CGuildMgr::Init()
  public void CGuildMgr::ClearGuildInfo()
  public int CGuildMgr::AddGuild(class CGuild *)
  public unsigned long GetGuildSize()
  /* this+0x4 */ class std::map<unsigned long,CGuild *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CGuild *> > > m_guildInfo

  public class CGuildMgr & operator=(const class CGuildMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CHARACTER_INFO {
  /* this+0x0 */ unsigned long GID
  /* this+0x4 */ int exp
  /* this+0x8 */ int money
  /* this+0xc */ int jobexp
  /* this+0x10 */ int joblevel
  /* this+0x14 */ int bodystate
  /* this+0x18 */ int healthstate
  /* this+0x1c */ int effectstate
  /* this+0x20 */ int virtue
  /* this+0x24 */ int honor
  /* this+0x28 */ short jobpoint
  /* this+0x2a */ int hp
  /* this+0x2e */ int maxhp
  /* this+0x32 */ short sp
  /* this+0x34 */ short maxsp
  /* this+0x36 */ short speed
  /* this+0x38 */ short job
  /* this+0x3a */ short head
  /* this+0x3c */ short weapon
  /* this+0x3e */ short level
  /* this+0x40 */ short sppoint
  /* this+0x42 */ short accessory
  /* this+0x44 */ short shield
  /* this+0x46 */ short accessory2
  /* this+0x48 */ short accessory3
  /* this+0x4a */ short headpalette
  /* this+0x4c */ short bodypalette
  /* this+0x4e */ unsigned char[0x18] name
  /* this+0x66 */ unsigned char Str
  /* this+0x67 */ unsigned char Agi
  /* this+0x68 */ unsigned char Vit
  /* this+0x69 */ unsigned char Int
  /* this+0x6a */ unsigned char Dex
  /* this+0x6b */ unsigned char Luk
  /* this+0x6c */ unsigned char CharNum
  /* this+0x6d */ unsigned char haircolor
  /* this+0x6e */ short bIsChangedCharName
  /* this+0x70 */ unsigned char[0x10] mapName
  /* this+0x80 */ long DeleteReservedDate
  /* this+0x84 */ int nRobe
  /* this+0x88 */ int m_nchrSlotCnt
  /* this+0x8c */ int nCharNameChangeCnt
}

struct CHARACTER_LIST {
  /* this+0x0 */ unsigned long dwGID
  /* this+0x4 */ unsigned char SlotIdx
}

struct CHARINFO_FROM_CHARACTERDB {
  /* this+0x0 */ int GID
  /* this+0x4 */ int exp
  /* this+0x8 */ int AID
  /* this+0xc */ int GuildID
  /* this+0x10 */ int money
  /* this+0x14 */ int jobexp
  /* this+0x18 */ int joblevel
  /* this+0x1c */ int bodystate
  /* this+0x20 */ int healthstate
  /* this+0x24 */ int effectstate
  /* this+0x28 */ int virtue
  /* this+0x2c */ int honor
  /* this+0x30 */ int hp
  /* this+0x34 */ short maxhp
  /* this+0x36 */ short sp
  /* this+0x38 */ short maxsp
  /* this+0x3a */ short xPos
  /* this+0x3c */ short yPos
  /* this+0x3e */ short speed
  /* this+0x40 */ short jobpoint
  /* this+0x42 */ short sxPos
  /* this+0x44 */ short syPos
  /* this+0x46 */ short head
  /* this+0x48 */ short weapon
  /* this+0x4a */ short accessory
  /* this+0x4c */ short accessory2
  /* this+0x4e */ short accessory3
  /* this+0x50 */ short headpalette
  /* this+0x52 */ short bodypalette
  /* this+0x54 */ short cookMastery
  /* this+0x56 */ char[0x18] name
  /* this+0x6e */ char[0x10] mapname
  /* this+0x7e */ char[0x10] restartMapName
  /* this+0x8e */ short job
  /* this+0x90 */ short clevel
  /* this+0x92 */ short sppoint
  /* this+0x94 */ char Str
  /* this+0x95 */ char Agi
  /* this+0x96 */ char Vit
  /* this+0x97 */ char Int
  /* this+0x98 */ char Dex
  /* this+0x99 */ char Luk
  /* this+0x9a */ char CharNum
  /* this+0x9b */ unsigned char haircolor
    /* this+0x9c */ struct CHARINFO_FROM_CHARACTERDB::tagParty Party

  /* this+0x9d */ bool bOpenEquipmentWin
  /* this+0x9e */ short font
  /* this+0xa0 */ short robe
  /* this+0xa2 */ int chrSlotChangeCnt
  /* this+0xa6 */ int charNameChangeCnt
}

struct CHARINFO_FROM_CHARACTERDB::tagParty {
  /* this+0x0 */ unsigned char Config
}

struct CHARINFO_IN_GROUP {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ char[0x18] charName
  /* this+0x20 */ unsigned char Role
  /* this+0x21 */ unsigned char curState
}

struct CHARINFO_TO_CHARACTERDB {
  /* this+0x0 */ int exp
  /* this+0x4 */ int GuildID
  /* this+0x8 */ int money
  /* this+0xc */ int jobexp
  /* this+0x10 */ int joblevel
  /* this+0x14 */ int bodystate
  /* this+0x18 */ int healthstate
  /* this+0x1c */ int effectstate
  /* this+0x20 */ int virtue
  /* this+0x24 */ int honor
  /* this+0x28 */ int hp
  /* this+0x2c */ short maxhp
  /* this+0x2e */ short sp
  /* this+0x30 */ short maxsp
  /* this+0x32 */ short xPos
  /* this+0x34 */ short yPos
  /* this+0x36 */ short speed
  /* this+0x38 */ short jobpoint
  /* this+0x3a */ short sxPos
  /* this+0x3c */ short syPos
  /* this+0x3e */ short job
  /* this+0x40 */ short clevel
  /* this+0x42 */ short sppoint
  /* this+0x44 */ short head
  /* this+0x46 */ short weapon
  /* this+0x48 */ short accessory
  /* this+0x4a */ short accessory2
  /* this+0x4c */ short accessory3
  /* this+0x4e */ short headpalette
  /* this+0x50 */ short bodypalette
  /* this+0x52 */ short cookMastery
  /* this+0x54 */ char[0x10] mapname
  /* this+0x64 */ char[0x10] restartMapName
  /* this+0x74 */ unsigned char Str
  /* this+0x75 */ unsigned char Agi
  /* this+0x76 */ unsigned char Vit
  /* this+0x77 */ unsigned char Int
  /* this+0x78 */ unsigned char Dex
  /* this+0x79 */ unsigned char Luk
  /* this+0x7a */ unsigned char haircolor
    /* this+0x7b */ struct CHARINFO_TO_CHARACTERDB::tagParty Party

  /* this+0x7c */ bool bOpenEquipmentWin
  /* this+0x7d */ short font
  /* this+0x7f */ short robe
  /* this+0x81 */ int chrSlotChange
  /* this+0x85 */ int charNameChangeCnt
}

struct CHARINFO_TO_CHARACTERDB::tagParty {
  /* this+0x0 */ unsigned char Config
}

class CIGuildInfo {
  CGuild, offset = 0x0

  public void CIGuildInfo(class CIGuildInfo &)
  public void CIGuildInfo::CIGuildInfo()
  public void CIGuildInfo::~CIGuildInfo()
  public int CIGuildInfo::DisOrganizeGuild(unsigned long, int, int, int)
  public void CIGuildInfo::BanMember(const struct PACKET_ZI_REQ_BAN_GUILD *)
  public void CIGuildInfo::GetGuildNotice(char *)
  public void CIGuildInfo::RegisterGuildEmblem(char *, unsigned short)
  public int CIGuildInfo::AllLoadDB(unsigned long)
  public int CIGuildInfo::ReLoadDB()
  public int CIGuildInfo::GetMInfo(unsigned long)
  public void CIGuildInfo::GetAllyInfo(unsigned long)
  public void CIGuildInfo::GetBanishInfo(unsigned long)
  public int CIGuildInfo::GetMPosition(unsigned long)
  public int CIGuildInfo::DeleteMember(unsigned long)
  public int CIGuildInfo::DeleteMember(unsigned long, char *)
  public void CIGuildInfo::OnReqGuildPositionInfo(char *, unsigned short)
  public int CIGuildInfo::LoadSkill(int)
  public void CIGuildInfo::OnReqChangePosition(char *, unsigned short)
  public void CIGuildInfo::OnGuildSkillUpdate(char *)
  public void CIGuildInfo::SaveSkillDB()
  public void CIGuildInfo::Init()
  public void CIGuildInfo::OnProcess(const unsigned long)
  public void CIGuildInfo::OnAddExp(char *)
  public void CIGuildInfo::OnUpdateGuildZeny(char *)
  public void CIGuildInfo::UpdateCharGDID(unsigned char, unsigned long, unsigned long, unsigned long, unsigned long, int)
  public int CIGuildInfo::DeleteRelatedGuild(unsigned long, unsigned long, int)
  public void CIGuildInfo::JoinGuild(unsigned long, unsigned long, unsigned long, char *, char *, unsigned char)
  public void CIGuildInfo::GuildErrorLog(char *, int, char *)
  public void CIGuildInfo::Send(int, short, char *)
  /* this+0xf9c */ class CIGuildInfoPacketDispatcher m_packetDispatcher

  public void CIGuildInfo::NotifyGuildSkillInfo(unsigned long)
  public void CIGuildInfo::NotifyAllInfo(int)
  public void CIGuildInfo::UpdateMapName(const unsigned long, const char *)
  public void CIGuildInfo::SetAllNotifyInfo(int)
  public int CIGuildInfo::ChangeMemberInfo(unsigned long, unsigned long, unsigned long, int)
  public void CIGuildInfo::ResetZoneServer(unsigned long)
  public int CIGuildInfo::FindZoneServer(unsigned long)
  public void SetUseInfo(int)
  public int GetUseInfo()
  public void CIGuildInfo::AddZoneServer(unsigned long)
  public void CIGuildInfo::RemoveZoneServer(unsigned long)
  public void CIGuildInfo::OutPutGuildInfo(int)
  public int CIGuildInfo::ReloadGuildInfo()
  public int CIGuildInfo::ReloadAllyGuildInfo()
  /* this+0xfa4 */ int m_bSkillSave
    /* this+0xfa8 */ struct CIGuildInfo::ServerInfo[0x28] m_ZServerInfo
  /* this+0x10e8 */ class std::list<int,std::allocator<int> > m_ZServerList

  /* this+0x10f4 */ class std::map<int,int,std::less<int>,std::allocator<std::pair<int const ,int> > > m_MemberZSID

  /* this+0x1104 */ int m_bAllNotifyInfo
  /* this+0x1108 */ unsigned long m_lastSaveTime
  /* this+0x110c */ int m_DBInfoChange
  /* this+0x1110 */ int m_InfoUse
  public class CIGuildInfo & operator=(class CIGuildInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CIGuildInfo::ServerInfo {
  /* this+0x0 */ unsigned long ServerID
  /* this+0x4 */ int MemberNumber
}

class CIGuildInfoDB {
  CGuildDB, offset = 0x0

  public int CIGuildInfoDB::DeleteAllGuildMPosition(unsigned long)
  public int CIGuildInfoDB::DeleteAllGuildBanish(unsigned long)
  public int CIGuildInfoDB::DeleteAllGuildAllyInfo(unsigned long)
  public int CIGuildInfoDB::DeleteGuildMInfo(unsigned long)
  public int CIGuildInfoDB::DeleteGuildInfoDB(unsigned long)
  public int CIGuildInfoDB::DeleteGuildNotice(unsigned long)
  public int CIGuildInfoDB::DeleteGuildAllyInfo(unsigned long, unsigned long, int)
  public int CIGuildInfoDB::DeleteGuildBanishInfo(unsigned long, unsigned long)
  public int CIGuildInfoDB::DeleteGuildSkill(unsigned long)
  public unsigned long CIGuildInfoDB::GetGDID(unsigned long)
  public void CIGuildInfoDB(const class CIGuildInfoDB &)
  public void CIGuildInfoDB::CIGuildInfoDB()
  public void CIGuildInfoDB::~CIGuildInfoDB()
  public void CIGuildInfoDB::InitStoredProcTable()
  public int CIGuildInfoDB::MakeGuild(unsigned long, unsigned long, unsigned long &, char *, char *)
  public int UpdateTableDWORD(unsigned long, unsigned long, int)
  public int UpdateTableChar(unsigned long, char *, int)
  public int CIGuildInfoDB::UpdateGuildInfoDB(class CIGuildInfo &)
  public int UpdateGuildMInfo(struct GUILDMINFO &)
  public int CIGuildInfoDB::UpdateMemberPos(unsigned long, struct GUILD_REG_POSITION_INFO &, int, int)
  public int CIGuildInfoDB::UpdateMemberChangePos(unsigned long, unsigned long, unsigned long)
  public int CIGuildInfoDB::UpdateGuildEmblem(unsigned long, unsigned long)
  public int CIGuildInfoDB::UpdateGuildNotice(unsigned long, char *, char *)
  public int CIGuildInfoDB::UpdateGuildMember(unsigned long, unsigned long, unsigned long, unsigned long, int, int)
  public int CIGuildInfoDB::InsertGuildMember(struct GUILDMINFO &)
  public int CIGuildInfoDB::InsertGuildNotice(unsigned long)
  public int CIGuildInfoDB::InsertGuildBanishInfo(struct GUILDBANISHINFO &)
  public int CIGuildInfoDB::InsertGuildAlly(struct GUILDALLYINFO &)
  public int CIGuildInfoDB::InsertGuildMPosition(struct GUILDMPOSITION &)
  public int CIGuildInfoDB::GetGuildInfoDB(unsigned long, struct GUILDINFO &)
  public int CIGuildInfoDB::GetGuildMInfoDB(unsigned long, int &, char *)
  public int CIGuildInfoDB::GetGuildAllyInfoDB(unsigned long, int &, char *)
  public int CIGuildInfoDB::GetGuildNoticeDB(unsigned long, struct GUILDNOTICE &)
  public int CIGuildInfoDB::GetGuildBanishInfoDB(unsigned long, int &, char *)
  public int CIGuildInfoDB::GetGuildMemberPositionDB(unsigned long, int &, char *)
  public bool CIGuildInfoDB::GetGuildAgitDB(class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > &)
  /* this+0x24 */ class std::map<int,char *,std::less<int>,std::allocator<std::pair<int const ,char *> > > m_inputProcTable

  public class CIGuildInfoDB & operator=(const class CIGuildInfoDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CIGuildInfoPacketDispatcher {
    *
  public void CIGuildInfoPacketDispatcher(const class CIGuildInfoPacketDispatcher &)
  public void CIGuildInfoPacketDispatcher::CIGuildInfoPacketDispatcher()
  public void CIGuildInfoPacketDispatcher::~CIGuildInfoPacketDispatcher()
  public void OnAllyGuild(unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnChangeMaxUser(unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnGuildNotice(unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnRegisterGuildEmblem(unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnReqGuildPositionInfo(unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnReqChangePosition(unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnGuildSkillUpdate(unsigned long, short, unsigned short, char *)
  public void OnZI_LIST_JOIN_GUILD_INSERT_GID(char *)
  public void CIGuildInfoPacketDispatcher::OnAddExp(unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnGuildChat(unsigned long, unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnReqLeaveGuild(unsigned long, unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnReqBanGuild(unsigned long, unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnJoinGuild(unsigned long, unsigned long, short, unsigned short, char *)
  public void CIGuildInfoPacketDispatcher::OnUpdateGuildZeny(unsigned long, short, unsigned short, char *)
  public void SetGuildInfo(class CIGuildInfo *)
  /* this+0x4 */ class CIGuildInfo * m_guildInfo
  public int OnProcess()
  public int CIGuildInfoPacketDispatcher::DispatchPacket(unsigned long, unsigned long, short, unsigned short, char *)
  public class CIGuildInfoPacketDispatcher & operator=(const class CIGuildInfoPacketDispatcher &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CIGuildMgr {
  CGuildMgr, offset = 0x0

  public void CIGuildMgr::Init(int)
  public class CGuild * CIGuildMgr::AllocGuild()
  public void CIGuildMgr::LogonUserA(unsigned long, unsigned long, unsigned long)
  public void ChangeZoneServer(unsigned long, unsigned long, unsigned long, unsigned long)
  public void CIGuildMgr::AllyGuild(unsigned long, unsigned long, char *)
  public void CIGuildMgr::HostileGuild(unsigned long, char *)
  public void CIGuildMgr::OnDeleteRelatedGuild(unsigned long, unsigned long, int, int)
  public void CIGuildMgr::OnReqDisorganizeGuild(unsigned long, int, int, int)
  public void CIGuildMgr::GuildAllSave()
  public void CIGuildMgr::ExitUser(unsigned long, unsigned long, unsigned long)
  public void ServerMoveUser(unsigned long, unsigned long, unsigned long, int)
  public void MapMove(unsigned long, char *)
  public void CIGuildMgr::ReqJoinGuild(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
  public int CIGuildMgr::MakeGuild(unsigned long, unsigned long, unsigned long, unsigned long &, char *, char *, char *)
  public class CIGuildInfo * CIGuildMgr::LoadGuild(unsigned long, int)
  public void CIGuildMgr::SendPacket(unsigned long, short, unsigned long, int, char *)
  public void CIGuildMgr::ProcessAllGuild()
  public void CIGuildMgr::FreeGuild(class CIGuildInfo *, int)
  public void CIGuildMgr::RemoveGuildInfo(unsigned long)
  public unsigned long CIGuildMgr::SearchAIDMap(unsigned long)
  public unsigned long GetFreeSize()
  public void CIGuildMgr::OnChangeAgitGuild(unsigned long, unsigned long)
  public void CIGuildMgr::GetGuildAgitDB()
  public void CIGuildMgr::SendGuildMakeResult(unsigned long, unsigned long, unsigned long, int)
  public void CIGuildMgr::InitZServerGuild(unsigned long, class std::list<unsigned long,std::allocator<unsigned long> > *)
  public void CIGuildMgr::NotifyGuild(unsigned long, unsigned long)
  public void CIGuildMgr::OutPutGuildInfo(unsigned long)
  public int CIGuildMgr::GetGuildInfo(unsigned long, struct PACKET_IM_REQ_GUILD_INFO *)
  public int CIGuildMgr::GuildInfoInit(unsigned long)
  public int CIGuildMgr::AllyGuildInfoInit(unsigned long)
  /* this+0x14 */ unsigned long m_lastSaveTime
  /* this+0x18 */ class CMemoryMgr<CIGuildInfo> m_iGuildMPool

  /* this+0x3c */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_guildAIDQueue

      /* this+0x4c */ class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_AgitOwnerGuildIDList

  /* this+0x5c */ class std::list<unsigned long,std::allocator<unsigned long> > m_GarbageGDID

  /* [0x0003:0x000038b0] */ static  class CIGuildMgr * m_cpSelf
  /* this+0x68 */ bool m_bOK
  private bool isOK()
  private bool CIGuildMgr::Create()
  private void Destroy()
  public void CIGuildMgr(class CIGuildMgr &)
  private void CIGuildMgr::CIGuildMgr()
  private void CIGuildMgr::~CIGuildMgr()
  public static bool CIGuildMgr::CreateInstance()
  public static void CIGuildMgr::DestroyInstance()
  public class CIGuildMgr & operator=(class CIGuildMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CIGuildSkillDB {
  CGuildDB, offset = 0x0

  public void CIGuildSkillDB(const class CIGuildSkillDB &)
  public void CIGuildSkillDB()
  public void ~CIGuildSkillDB()
  public void LoadSkill()
  public int CIGuildSkillDB::GetSkill(int, unsigned char *, int &)
  public int CIGuildSkillDB::UpdateSkill(int, char *, int, int)
  public void CIGuildSkillDB::InsertSkill(int, int)
  public class CIGuildSkillDB & operator=(const class CIGuildSkillDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CITP {
    *
  public void CITP(const class CITP &)
  public void CITP()
  public void Init()
  public unsigned short GetType()
  public void GetAttackValue(short &)
  public void GetDefence(short &)
  public unsigned short GetLocation(short)
  public int IsApparel()
  public short PlusDexValue()
  public short PlusStrValue()
  public short PlusIntValue()
  public short PlusLukValue()
  public short PlusAgiValue()
  public short PlusVitValue()
  public void GetMagicDefence(short &)
  public int GetStatus()
  public int GetAttRange()
  public short GetClass()
  public int GetItemLevel()
  public int IsRefinable()
  public int IsDamagable()
  public int GetMaxSlot()
  public int GetProperty()
  public int IsMovable()
  public unsigned long GetAvailableJobCode()
  public bool IsCashItem()
  public bool IsWeapon()
  public bool IsRangeWeapon()
  public bool IsPickUpNotifyParty()
  public short GetMATK()
  public bool IsBothHandWeapon()
  public void SetUseEvent(bool)
  public bool IsUsableLevel(const int)
  public unsigned long GetBitExpressionJob(short)
  public void SetBindOnEquip()
  public bool IsBindOnEquip()
  /* this+0x4 */ unsigned short m_ITID
  /* this+0x8 */ int m_weight
  /* this+0xc */ int m_price
  /* this+0x10 */ int m_location
  /* this+0x14 */ char[0x18] m_name
  /* this+0x2c */ int m_isRefinable
  /* this+0x30 */ int m_isDamagable
  /* this+0x34 */ int m_isMovable
  /* this+0x38 */ unsigned long m_availableJob
  /* this+0x3c */ bool m_bCashItem
  /* this+0x3d */ bool m_isUseEvent
  /* this+0x3e */ bool m_isBindOnEquip
  /* this+0x40 */ short m_minLevel
  /* this+0x42 */ short m_maxLevel
  public class CITP & operator=(const class CITP &)
}

class CITPAmmo {
  CITP, offset = 0x0

  public unsigned short GetType()
  public int IsApparel()
  public void GetAttackValue(short &)
  public unsigned short GetLocation(short)
  public int GetProperty()
  public unsigned long GetAvailableJobCode()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_property
  public void CITPAmmo(const class CITPAmmo &)
  public void CITPAmmo()
  public class CITPAmmo & operator=(const class CITPAmmo &)
}

class CITPArmor {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public void GetDefence(short &)
  public int IsApparel()
  public short GetClass()
  public unsigned short GetLocation(short)
  public short PlusDexValue()
  public short PlusStrValue()
  public short PlusIntValue()
  public short PlusLukValue()
  public short PlusAgiValue()
  public short PlusVitValue()
  public void GetMagicDefence(short &)
  public int GetMaxSlot()
  public bool IsPickUpNotifyParty()
  /* this+0x44 */ int m_defencePower
  /* this+0x48 */ int m_maxSlot
  /* this+0x4c */ int m_str
  /* this+0x50 */ int m_int
  /* this+0x54 */ int m_vit
  /* this+0x58 */ int m_dex
  /* this+0x5c */ int m_agi
  /* this+0x60 */ int m_luk
  /* this+0x64 */ int m_mdef
  /* this+0x68 */ int m_maxHp
  /* this+0x6c */ int m_effect
  /* this+0x70 */ int m_maxSp
  /* this+0x74 */ int m_sex
  /* this+0x78 */ short m_class
  public void CITPArmor(const class CITPArmor &)
  public void CITPArmor()
  public class CITPArmor & operator=(const class CITPArmor &)
}

class CITPArmorMB {
  CITPArmor, offset = 0x0

  public unsigned short GetType()
  public unsigned short GetLocation(short)
  public void CITPArmorMB(const class CITPArmorMB &)
  public void CITPArmorMB()
  public class CITPArmorMB & operator=(const class CITPArmorMB &)
}

class CITPArmorTB {
  CITPArmor, offset = 0x0

  public unsigned short GetType()
  public unsigned short GetLocation(short)
  public void CITPArmorTB(const class CITPArmorTB &)
  public void CITPArmorTB()
  public class CITPArmorTB & operator=(const class CITPArmorTB &)
}

class CITPArmorTM {
  CITPArmor, offset = 0x0

  public unsigned short GetType()
  public unsigned short GetLocation(short)
  public void CITPArmorTM(const class CITPArmorTM &)
  public void CITPArmorTM()
  public class CITPArmorTM & operator=(const class CITPArmorTM &)
}

class CITPArmorTMB {
  CITPArmor, offset = 0x0

  public unsigned short GetType()
  public unsigned short GetLocation(short)
  public void CITPArmorTMB(const class CITPArmorTMB &)
  public void CITPArmorTMB()
  public class CITPArmorTMB & operator=(const class CITPArmorTMB &)
}

class CITPArrow {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public int IsApparel()
  public void GetAttackValue(short &)
  public unsigned short GetLocation(short)
  public int GetProperty()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_property
  public void CITPArrow(const class CITPArrow &)
  public void CITPArrow()
  public class CITPArrow & operator=(const class CITPArrow &)
}

class CITPBothhand {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public void GetAttackValue(short &)
  public int IsApparel()
  public short GetClass()
  public unsigned short GetLocation(short)
  public short PlusDexValue()
  public short PlusStrValue()
  public short PlusIntValue()
  public short PlusLukValue()
  public short PlusAgiValue()
  public short PlusVitValue()
  public int GetAttRange()
  public int GetProperty()
  public int GetItemLevel()
  public int GetMaxSlot()
  public bool IsWeapon()
  public bool IsRangeWeapon()
  public bool IsPickUpNotifyParty()
  public short GetMATK()
  public bool IsBothHandWeapon()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ short m_MATK
  /* this+0x4c */ int m_AR
  /* this+0x50 */ int m_maxSlot
  /* this+0x54 */ int m_str
  /* this+0x58 */ int m_int
  /* this+0x5c */ int m_vit
  /* this+0x60 */ int m_dex
  /* this+0x64 */ int m_agi
  /* this+0x68 */ int m_luk
  /* this+0x6c */ int m_effect
  /* this+0x70 */ int m_sex
  /* this+0x74 */ int m_level
  /* this+0x78 */ short m_class
  /* this+0x7c */ int m_property
  public void CITPBothhand(const class CITPBothhand &)
  public void CITPBothhand()
  public class CITPBothhand & operator=(const class CITPBothhand &)
}

class CITPBow {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public void GetAttackValue(short &)
  public int IsApparel()
  public short GetClass()
  public unsigned short GetLocation(short)
  public short PlusDexValue()
  public short PlusStrValue()
  public short PlusIntValue()
  public short PlusLukValue()
  public short PlusAgiValue()
  public short PlusVitValue()
  public int GetAttRange()
  public int GetProperty()
  public int GetItemLevel()
  public int GetMaxSlot()
  public bool IsWeapon()
  public bool IsRangeWeapon()
  public bool IsPickUpNotifyParty()
  public bool IsBothHandWeapon()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_AR
  /* this+0x4c */ int m_maxSlot
  /* this+0x50 */ int m_str
  /* this+0x54 */ int m_int
  /* this+0x58 */ int m_vit
  /* this+0x5c */ int m_dex
  /* this+0x60 */ int m_agi
  /* this+0x64 */ int m_luk
  /* this+0x68 */ int m_effect
  /* this+0x6c */ int m_sex
  /* this+0x70 */ int m_level
  /* this+0x74 */ short m_class
  /* this+0x78 */ int m_property
  public void CITPBow(const class CITPBow &)
  public void CITPBow()
  public class CITPBow & operator=(const class CITPBow &)
}

class CITPCannonball {
  CITP, offset = 0x0

  public unsigned short GetType()
  public int IsApparel()
  public void GetAttackValue(short &)
  public unsigned short GetLocation(short)
  public int GetProperty()
  public unsigned long GetAvailableJobCode()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_property
  public void CITPCannonball(const class CITPCannonball &)
  public void CITPCannonball()
  public class CITPCannonball & operator=(const class CITPCannonball &)
}

class CITPCard {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public int IsApparel()
  public int GetProperty()
  /* this+0x44 */ unsigned long m_effect
  public int GetCompositionType()
  public int GetCompositionPos()
  public int IsCompositionable(class CITP *)
  public bool IsPickUpNotifyParty()
  /* this+0x48 */ int m_property
  /* this+0x4c */ int m_class
  /* this+0x50 */ int m_compositionType
  /* this+0x54 */ int m_compositionPos
  public void CITPCard(const class CITPCard &)
  public void CITPCard()
  public class CITPCard & operator=(const class CITPCard &)
}

class CITPCashPointItem {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public int IsApparel()
  public short GetChangeItemID()
  public short GetCount()
  /* this+0x44 */ unsigned short m_ChangeItemID
  /* this+0x48 */ int m_Count
  public void CITPCashPointItem(const class CITPCashPointItem &)
  public void CITPCashPointItem()
  public void ~CITPCashPointItem()
  public class CITPCashPointItem & operator=(const class CITPCashPointItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CITPEvent {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public int IsApparel()
  public void CITPEvent(const class CITPEvent &)
  public void CITPEvent()
  public class CITPEvent & operator=(const class CITPEvent &)
}

class CITPGun {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public void GetAttackValue(short &)
  public int IsApparel()
  public short GetClass()
  public unsigned short GetLocation(short)
  public short PlusDexValue()
  public short PlusStrValue()
  public short PlusIntValue()
  public short PlusLukValue()
  public short PlusAgiValue()
  public short PlusVitValue()
  public int GetAttRange()
  public int GetProperty()
  public int GetItemLevel()
  public int GetMaxSlot()
  public bool IsWeapon()
  public bool IsRangeWeapon()
  public bool IsPickUpNotifyParty()
  public bool IsBothHandWeapon()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_AR
  /* this+0x4c */ int m_maxSlot
  /* this+0x50 */ int m_str
  /* this+0x54 */ int m_int
  /* this+0x58 */ int m_vit
  /* this+0x5c */ int m_dex
  /* this+0x60 */ int m_agi
  /* this+0x64 */ int m_luk
  /* this+0x68 */ int m_effect
  /* this+0x6c */ int m_sex
  /* this+0x70 */ int m_level
  /* this+0x74 */ short m_class
  /* this+0x78 */ int m_property
  public void CITPGun(const class CITPGun &)
  public void CITPGun()
  public class CITPGun & operator=(const class CITPGun &)
}

class CITPHeal {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public int IsApparel()
  public int GetStatus()
  /* this+0x44 */ int m_minHp
  /* this+0x48 */ int m_maxHp
  /* this+0x4c */ int m_minSp
  /* this+0x50 */ int m_maxSp
  /* this+0x54 */ int m_abuse_gause
  /* this+0x58 */ int m_states
  public void CITPHeal(const class CITPHeal &)
  public void CITPHeal()
  public class CITPHeal & operator=(const class CITPHeal &)
}

class CITPMgr {
  CODBC, offset = 0x0

  public void CITPMgr(const class CITPMgr &)
  public void CITPMgr::CITPMgr()
  public void CITPMgr::~CITPMgr()
  public bool Save(const char *)
  public void Init(const char *, const char *)
  public void LoadITP()
  public class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > > & GetNameMap()
  public class std::map<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > > & GetCombiItemList()
  public void InsertITP()
  public class CITP * GetITP(unsigned short)
  public enum enumInventoryItemType GetInventoryItemType(const unsigned short)
  public unsigned long GetEffectID(const char *)
  public unsigned short GetITID(const char *)
  public int FindITID(const char *, unsigned long *)
  public short GetItemWeight(unsigned short)
  public int IsApparel(unsigned short)
  public int IsCashPointItem(unsigned short)
  public char * GetItemName(unsigned short)
  public void DBClose()
  public bool IsScrollItem(unsigned short)
  public const bool IsCostumeItem(const unsigned long)
  private void GetQuest()
  private void GetArmor(unsigned long)
  private void GetCannonball()
  private void GetArrow()
  private void GetAmmo()
  private void GetGun()
  private void GetWeapon()
  private void GetBothhand()
  private void GetBow()
  private void GetEvent()
  private void GetSpecial()
  private void GetHeal()
  private void GetCard()
  private void GetCashPointItem()
  private bool GetThrow()
  private void LoadItemMoveInfo()
  private bool LoadCashItemList()
  private int LoadCombiItemList(const char *)
  private void LoadScrollItemList()
  private void LoadItemBindOnEquip()
  private int AddITP(class CITP *)
          /* this+0x14 */ class std::map<unsigned short,CITP *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CITP *> > > m_itp

  /* this+0x24 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned short,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned short> > > m_itemName

  /* this+0x34 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned long,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned long> > > m_effect

  /* this+0x44 */ class std::map<unsigned short,std::vector<unsigned short,std::allocator<unsigned short> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<unsigned short,std::allocator<unsigned short> > > > > m_combiItem

  /* this+0x54 */ class std::map<unsigned short,unsigned short,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,unsigned short> > > m_scrollItem

  public class CITPMgr & operator=(const class CITPMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CITPQuest {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public int IsApparel()
  public void CITPQuest(const class CITPQuest &)
  public void CITPQuest()
  public class CITPQuest & operator=(const class CITPQuest &)
}

class CITPSpecial {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public int IsApparel()
  /* this+0x44 */ unsigned long m_effect
  public void CITPSpecial(const class CITPSpecial &)
  public void CITPSpecial()
  public class CITPSpecial & operator=(const class CITPSpecial &)
}

class CITPThrow {
  CITP, offset = 0x0

  public unsigned short GetType()
  public int IsApparel()
  public void GetAttackValue(short &)
  public unsigned short GetLocation(short)
  public int GetProperty()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ int m_property
  public void CITPThrow(const class CITPThrow &)
  public void CITPThrow()
  public class CITPThrow & operator=(const class CITPThrow &)
}

class CITPWeapon {
  CITP, offset = 0x0

  public void Init()
  public unsigned short GetType()
  public void GetAttackValue(short &)
  public int IsApparel()
  public short GetClass()
  public unsigned short GetLocation(short)
  public short PlusDexValue()
  public short PlusStrValue()
  public short PlusIntValue()
  public short PlusLukValue()
  public short PlusAgiValue()
  public short PlusVitValue()
  public int GetAttRange()
  public int GetProperty()
  public int GetItemLevel()
  public int GetMaxSlot()
  public bool IsWeapon()
  public bool IsRangeWeapon()
  public bool IsPickUpNotifyParty()
  public short GetMATK()
  /* this+0x44 */ int m_ATK
  /* this+0x48 */ short m_MATK
  /* this+0x4c */ int m_AR
  /* this+0x50 */ int m_maxSlot
  /* this+0x54 */ int m_str
  /* this+0x58 */ int m_int
  /* this+0x5c */ int m_vit
  /* this+0x60 */ int m_dex
  /* this+0x64 */ int m_agi
  /* this+0x68 */ int m_luk
  /* this+0x6c */ int m_effect
  /* this+0x70 */ int m_sex
  /* this+0x74 */ int m_level
  /* this+0x78 */ short m_class
  /* this+0x7c */ int m_property
  public void CITPWeapon(const class CITPWeapon &)
  public void CITPWeapon()
  public class CITPWeapon & operator=(const class CITPWeapon &)
}

class CInstantMap {
  N3Object, offset = 0x0

  N3Inter, offset = 0x8

      /* this+0xc */ bool m_bOK
  /* this+0x10 */ const int m_ZSID
  /* this+0x14 */ const int m_MapType
  /* this+0x18 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name

  /* this+0x34 */ int m_MapID
  /* this+0x38 */ const unsigned int m_RequestCreateInter
  /* this+0x3c */ unsigned long m_ZSVRregisteredFUCnt
  /* this+0x40 */ class N3MessageQueue m_MessageQueue

    /* this+0x7c */ enum CInstantMap::enumSTATE m_State
        /* this+0x80 */ class std::multimap<unsigned long,enum CInstantMap::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CInstantMap::enumSCHEDULE> > > m_ScheduleContainer

  private void CInstantMap::Schedule_Add(const unsigned long, const enum CInstantMap::enumSCHEDULE)
  private void CInstantMap::Schedule_Remove(const enum CInstantMap::enumSCHEDULE)
  private void CInstantMap::Schedule_Process()
  /* this+0x90 */ function  * m_ProcessFuncPtr
  private void CInstantMap::Process_PROCSTEP_TARGETZSVR_CREATE(const int, const int, const int)
  private void CInstantMap::Process_PROCSTEP_OPERATION(const int, const int, const int)
  public const bool isOK()
  public void CInstantMap::Process()
  public const unsigned int GetReqeustCreateInter()
  public const bool IsDestoryReady()
  public const bool IsOperation()
  public const unsigned long GetZSVRregisteredFUCnt()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CInstantMap::GetMapName()
  public const int GetMapID()
  public const int GetMapType()
  public const int GetZSID()
  public void CInstantMap::Receive(const unsigned int, const unsigned int, const unsigned int)
  public void CInstantMap(const class CInstantMap &)
  public void CInstantMap::CInstantMap(const unsigned int, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void CInstantMap::~CInstantMap()
  public void * __vecDelDtor(unsigned int)
}

class CInstantMap::InstantMap_MSGwparam_TARGETZSVR_CREATE_RESPONSE {
  public void InstantMap_MSGwparam_TARGETZSVR_CREATE_RESPONSE(const class CInstantMap::InstantMap_MSGwparam_TARGETZSVR_CREATE_RESPONSE &)
  public void InstantMap_MSGwparam_TARGETZSVR_CREATE_RESPONSE(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const bool)
  public void ~InstantMap_MSGwparam_TARGETZSVR_CREATE_RESPONSE()
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_mapName

  /* this+0x1c */ int m_mapID
  /* this+0x20 */ bool m_bSuccess
  public class CInstantMap::InstantMap_MSGwparam_TARGETZSVR_CREATE_RESPONSE & operator=(const class CInstantMap::InstantMap_MSGwparam_TARGETZSVR_CREATE_RESPONSE &)
  public void * __vecDelDtor(unsigned int)
}

class CInstantMapConfiguration {
    *
  /* [0x0003:0x000038b4] */ static  class CInstantMapConfiguration * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ int m_DestroyWaitSecond
  /* this+0xc */ int m_CreateResponseWaitSecond_fromZSVR
  /* this+0x10 */ bool m_bOpen
  private bool CInstantMapConfiguration::Create()
  private void Destroy()
  public bool isOK()
  public int GetDestroyWiatSecond()
  public int GetCreateResponseWaitSecond_fromZSVR()
  public bool IsOpen()
  public static bool CInstantMapConfiguration::CreateInstance()
  public static void CInstantMapConfiguration::DestroyInstance()
  public void CInstantMapConfiguration(const class CInstantMapConfiguration &)
  private void CInstantMapConfiguration::CInstantMapConfiguration()
  private void CInstantMapConfiguration::~CInstantMapConfiguration()
  public class CInstantMapConfiguration & operator=(const class CInstantMapConfiguration &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CInstantMapIDGenerator {
  CN3RecycleIDGenerator, offset = 0x0

  public static bool CInstantMapIDGenerator::CreateInstance()
  public static void CInstantMapIDGenerator::DestoryInstance()
  private void CInstantMapIDGenerator(class CInstantMapIDGenerator &)
  private void CInstantMapIDGenerator::CInstantMapIDGenerator()
  private void CInstantMapIDGenerator::~CInstantMapIDGenerator()
  private class CInstantMapIDGenerator & operator=(class CInstantMapIDGenerator &)
  /* [0x0003:0x000038b8] */ static  class CInstantMapIDGenerator * m_cpSelf
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CInstantMapMgr {
    *
  /* this+0x4 */ bool m_bOK
  /* [0x0003:0x000038c0] */ static  class CInstantMapMgr * m_cpSelf
      /* this+0x8 */ class std::map<unsigned int,CInstantMap *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CInstantMap *> > > m_Container

      /* this+0x18 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > m_IndexMap

  private bool CInstantMapMgr::Create()
  private void CInstantMapMgr::Destroy()
  public const bool isOK()
  public void CInstantMapMgr::Process()
  public const int GetNum()
  public struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CInstantMapMgr::InstantMapCreate(const unsigned int, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public bool CInstantMapMgr::InstantMapDestory(const unsigned int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CInstantMapMgr::GetInstantMapName(const unsigned int)
  public void CInstantMapMgr::NotifyAllInstantMap(const int, const unsigned long &)
  public static bool CInstantMapMgr::CreateInstance()
  public static void CInstantMapMgr::DestroyInstance()
  public void CInstantMapMgr(const class CInstantMapMgr &)
  private void CInstantMapMgr::CInstantMapMgr()
  private void CInstantMapMgr::~CInstantMapMgr()
  public class CInstantMapMgr & operator=(const class CInstantMapMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CIsvrSchedulerIdentity {
    *
  public bool isOK()
    public unsigned int Get()
  public static bool CIsvrSchedulerIdentity::CreateInstance()
  public static void CIsvrSchedulerIdentity::DestroyInstance()
  private void CIsvrSchedulerIdentity(class CIsvrSchedulerIdentity &)
  private void CIsvrSchedulerIdentity::CIsvrSchedulerIdentity()
  private class CIsvrSchedulerIdentity & operator=(const class CIsvrSchedulerIdentity &)
  private void CIsvrSchedulerIdentity::~CIsvrSchedulerIdentity()
  /* [0x0003:0x000038ec] */ static  class CIsvrSchedulerIdentity * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ unsigned int m_IdentityCnt
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CItemList {
  public void CItemList()
  public void ~CItemList()
    public void LoadFromFile(const char *, int)
  public int GetNth(int)
  /* this+0x0 */ int m_itemNum
  /* this+0x4 */ int[0x3e8] m_itemArray
  public void * __vecDelDtor(unsigned int)
}

class CItemListV2 {
  public void CItemListV2(const class CItemListV2 &)
  public void CItemListV2()
  public void ~CItemListV2()
  public bool Load(const char *)
  public bool IsPartOfItemList(const unsigned short)
  /* this+0x0 */ class std::set<unsigned short,std::less<unsigned short>,std::allocator<unsigned short> > m_ItemList

  public class CItemListV2 & operator=(const class CItemListV2 &)
  public void * __vecDelDtor(unsigned int)
}

class CMAPStatisticLog {
  N2DBLog, offset = 0x0

      /* this+0x8 */ long m_Date
  /* this+0xc */ const int m_ZSID
  /* this+0x10 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > m_MapInfoContainer

  private bool CMAPStatisticLog::Run(class N2ODBCCtrl &)
  public void CMAPStatisticLog(const class CMAPStatisticLog &)
  public void CMAPStatisticLog::CMAPStatisticLog(const long, const int, const class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > &)
  public void CMAPStatisticLog::~CMAPStatisticLog()
  public void * __vecDelDtor(unsigned int)
}

class CMAPStatisticLogMgr {
    *
  /* [0x0003:0x000038d8] */ static  class CMAPStatisticLogMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x5 */ bool m_bOutputLog
  public bool isOK()
  public void CMAPStatisticLogMgr::Add(const long, const int, const class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > &)
  public static bool CMAPStatisticLogMgr::CreateInstance()
  public static void CMAPStatisticLogMgr::DestroyInstance()
  public void CMAPStatisticLogMgr(const class CMAPStatisticLogMgr &)
  private void CMAPStatisticLogMgr::CMAPStatisticLogMgr()
  private void CMAPStatisticLogMgr::~CMAPStatisticLogMgr()
  public class CMAPStatisticLogMgr & operator=(const class CMAPStatisticLogMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMCPacketHandler {
  CPacketHandler, offset = 0x0

  public void CMCPacketHandler(const class CMCPacketHandler &)
  public void CMCPacketHandler::CMCPacketHandler()
  public void CMCPacketHandler::~CMCPacketHandler()
  public void CMCPacketHandler::OnClose()
  public int CMCPacketHandler::OnProcess()
  public void CMCPacketHandler::SetMyOwner(class CMClient *)
  /* this+0x8 */ short OldHeader
  private int CMCPacketHandler::DispatchPacket(short, int)
  private void CMCPacketHandler::OnMIEnter(int)
  private void CMCPacketHandler::OnMIReqServerState(int)
  private void CMCPacketHandler::OnMI_MSG(const struct PACKET_MI_MSG *)
  private void CMCPacketHandler::OnMIShotDown(int)
  private void CMCPacketHandler::OnMIGetGuildInfo(int)
  private void CMCPacketHandler::OnMIGuildInfoInit(int)
  private void CMCPacketHandler::OnMIAllyGuildInfoInit(int)
  private void CMCPacketHandler::OnMI_REQ_EDIT_EXP(const struct PACKET_MI_REQ_EDIT_EXP &)
  /* this+0xc */ class CMClient * m_mServer
  public class CMCPacketHandler & operator=(const class CMCPacketHandler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMClient {
  CClient, offset = 0x0

  public void CMClient::Init(class CAsyncStream *, unsigned long)
  public unsigned long GetAccountID()
  public void CMClient::SetLastCommunicationTime(unsigned long)
  public void CMClient::SetServerID(int)
  public int CMClient::GetServerID()
  public int CMClient::OnProcess()
  public int CMClient::GetType()
  public void CMClient::SetValid(int)
  public int CMClient::IsValid()
  public char * CMClient::GetID()
  public int CMClient::CheckPasswd(char *, char *)
  public int ChangePasswd(char *, char *, char *)
  /* this+0x28 */ class CMCPacketHandler m_packetHandler

  public class CAsyncStream * GetAsyncStream()
  public unsigned long GetIPaddr()
  public void CMClient(const class CMClient &)
  public void CMClient::CMClient()
  public void CMClient::~CMClient()
  /* this+0x38 */ unsigned long m_lastCommunicationTime
  /* this+0x3c */ int m_isValid
  /* this+0x40 */ char[0x18] m_ID
  /* this+0x58 */ char[0x18] m_passwd
  /* this+0x70 */ int m_SID
  /* this+0x74 */ unsigned long m_IPaddr
  public class CMClient & operator=(const class CMClient &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMClientMgr {
    *
  public void CMClientMgr(class CMClientMgr &)
  public void CMClientMgr::CMClientMgr()
  public void CMClientMgr::~CMClientMgr()
  public void CMClientMgr::Init(int)
  public void CMClientMgr::SendMsgToMServer(int, short, const char *)
  public void BroadCast(short, const char *)
  public class CMClient * CMClientMgr::AllocServer()
  public void CMClientMgr::FreeServer(class CMClient *)
  public int CMClientMgr::AddServer(class CMClient *)
  public int IsConnectedServer(int)
  /* this+0x4 */ int m_serverIDcounter
  /* this+0x8 */ class std::map<int,CMClient *,std::less<int>,std::allocator<std::pair<int const ,CMClient *> > > m_mServerMap

  /* this+0x18 */ class CMemoryMgr<CMClient> m_mserverMemoryPool

  /* this+0x3c */ struct _RTL_CRITICAL_SECTION m_mserverMgr_cs

  public class CMClientMgr & operator=(class CMClientMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMServerLog {
    *
  public bool isOK()
  public void CMServerLog::LogFmt(const char *, <NoType>)
  public static bool CMServerLog::CreateInstance()
  public static void CMServerLog::DestroyInstance()
  private void CMServerLog(const class CMServerLog &)
  private void CMServerLog::CMServerLog()
  private class CMServerLog & operator=(const class CMServerLog &)
  private void CMServerLog::~CMServerLog()
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* [0x0003:0x000038a8] */ static  class CMServerLog * m_cpSelf
  /* this+0x1c */ bool m_bOK
  /* this+0x1d */ char[0x104] m_LogFileName
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct CM_Power_Data_s {
  /* this+0x0 */ unsigned long PD_Size
  /* this+0x4 */ enum _DEVICE_POWER_STATE PD_MostRecentPowerState
  /* this+0x8 */ unsigned long PD_Capabilities
  /* this+0xc */ unsigned long PD_D1Latency
  /* this+0x10 */ unsigned long PD_D2Latency
  /* this+0x14 */ unsigned long PD_D3Latency
  /* this+0x18 */ enum _DEVICE_POWER_STATE[0x7] PD_PowerStateMapping
  /* this+0x34 */ enum _SYSTEM_POWER_STATE PD_DeepestSystemWake
}

class CMailCtrl {
    *
  public void CMailCtrl::Process()
  public void CMailCtrl::GetMaillist(unsigned long, unsigned long)
  public void CMailCtrl::MailOpen(unsigned long, unsigned long, unsigned long)
  public void CMailCtrl::GetMailItem(unsigned long, unsigned long, unsigned long)
  public void CMailCtrl::SendMail(unsigned long, unsigned long, unsigned long, char *, char *, int, unsigned long, char *, unsigned long, char *, int)
  public void DeleteMail(unsigned long, unsigned long)
  public int CMailCtrl::DeleteMail(unsigned long, unsigned long, unsigned long)
  public int CMailCtrl::ReturnMail(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
  public int CMailCtrl::GetMail(unsigned long, unsigned long, struct DBMAILINFO *)
  public void CMailCtrl::Init(const char *, const char *)
  /* this+0x4 */ class CMailDB m_MailDB

  /* this+0x16 */ struct MAILTIME m_DeleteTime

  /* this+0x20 */ unsigned long m_lastTime
  /* this+0x24 */ class CDateTime m_DateTime

  public void CMailCtrl(const class CMailCtrl &)
  public void CMailCtrl::CMailCtrl()
  public void CMailCtrl::~CMailCtrl()
  public class CMailCtrl & operator=(const class CMailCtrl &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMailDB {
  CODBC, offset = 0x0

  public int GetCharacterID(char *, unsigned long &, unsigned long &)
  public unsigned long CMailDB::SendMail(struct DBMAILINFO *)
  public int CMailDB::DeleteMail(int)
  public int CMailDB::UpdateMail(struct DBMAILINFO *)
  public int CMailDB::GetMail(int, struct DBMAILINFO *)
  public int CMailDB::DeleteMailItem(int)
  public void CMailDB(const class CMailDB &)
  public void CMailDB::CMailDB()
  public void CMailDB::~CMailDB()
  public class CMailDB & operator=(const class CMailDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMakerRankDB {
  CODBC, offset = 0x0

  public int CMakerRankDB::Get_TOP_MakerRank(int, struct MAKER_RANKING *)
  public void CMakerRankDB(const class CMakerRankDB &)
  public void CMakerRankDB::CMakerRankDB()
  public void CMakerRankDB::~CMakerRankDB()
  public class CMakerRankDB & operator=(const class CMakerRankDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMakerRankMgr {
    *
    /* this+0x4 */ class CMakerRankDB m_MakerRankDB

  /* this+0x18 */ struct MAKER_RANKING[0xc] m_BlackSmith
  /* this+0x198 */ struct MAKER_RANKING[0xc] m_Alchemist
  /* this+0x318 */ struct MAKER_RANKING[0xc] m_Taekwon
  /* this+0x498 */ struct MAKER_RANKING[0xc] m_Killer
  public int CMakerRankMgr::Init(const char *, const char *)
  public int CMakerRankMgr::Setup()
  public void CMakerRankMgr::Sort(int)
  public void CMakerRankMgr::UpdateMakeRank(int, unsigned long, char *, int)
  public void CMakerRankMgr::SendZoneMakerRanking(int)
  public void CMakerRankMgr(const class CMakerRankMgr &)
  public void CMakerRankMgr::CMakerRankMgr()
  public void CMakerRankMgr::~CMakerRankMgr()
  public class CMakerRankMgr & operator=(const class CMakerRankMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMapInfo {
    *
  /* this+0x4 */ int MapID
  /* this+0x8 */ char[0x18] Name
  /* this+0x20 */ int type
  /* this+0x24 */ bool bPlayerEnter
  /* this+0x28 */ int ZSID
  public void CMapInfo::CMapInfo(const class CMapInfo &)
  public void CMapInfo()
  public void CMapInfo::~CMapInfo()
  public class CMapInfo & operator=(const class CMapInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMapInfoMgr {
    *
  public bool isOK()
  public int CMapInfoMgr::GetServerID(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public int GetMapID(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public int GetMapType(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool IsSiege(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool CMapInfoMgr::InstantMapAdd2(const class CMapInfo &)
  public void CMapInfoMgr::InstantMapRemove(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool GetPlayerEnter(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void SetPlayerEnter(const unsigned int, const bool)
  public void SetPlayerEnter(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const bool)
  public struct std::pair<int,bool> GetZSVRandPlayerEnter(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public class std::vector<int,std::allocator<int> > CMapInfoMgr::GetMapIDList()
  public struct std::pair<bool,CMapInfo> CMapInfoMgr::GetMapInfo(const int)
  private bool CMapInfoMgr::Create(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private void Destroy()
  private struct std::pair<bool,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > CMapInfoMgr::LoadMapInfo(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public static bool CMapInfoMgr::CreateInstance(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public static void CMapInfoMgr::DestroyInstance()
  public void CMapInfoMgr(class CMapInfoMgr &)
  public void CMapInfoMgr::CMapInfoMgr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMapInfoMgr::~CMapInfoMgr()
  public class CMapInfoMgr & operator=(class CMapInfoMgr &)
  /* [0x0003:0x0000396c] */ static  class CMapInfoMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
    /* this+0x8 */ class std::map<unsigned int,CMapInfo,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CMapInfo> > > m_MapInfoTbl

    /* this+0x18 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,unsigned int> > > m_MappingTbl

  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeon {
  N3Object, offset = 0x0

  N3Inter, offset = 0x8

          /* this+0xc */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeon::tagInstantMapInfo,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeon::tagInstantMapInfo> > > m_InstantMapList

  /* this+0x1c */ bool m_bOK
  /* this+0x20 */ class N3MessageQueue m_MessageQueue

  /* this+0x5c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name

  /* this+0x78 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_NickName

  /* this+0x94 */ int m_hParty
  /* this+0x98 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_PartyName

  /* this+0xb4 */ const int m_Factor
  /* this+0xb8 */ const int m_TargetZSID
  /* this+0xbc */ unsigned long m_ZSVRregisteredFUCnt
  /* this+0xc0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_EnterInstantMapName

  /* this+0xdc */ int m_EnterPosX
  /* this+0xe0 */ int m_EnterPosY
  /* this+0xe4 */ int m_LiveTimeMinute
  /* this+0xe8 */ const int m_HsvrID
    /* this+0xec */ enum CMemorialDungeon::enumSTATE m_State
        /* this+0xf0 */ class std::map<unsigned long,CMemorialDungeon::CPlayer,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CMemorialDungeon::CPlayer> > > m_PlayerContainer

  public void CMemorialDungeon::OnEnter(const unsigned long, const unsigned long)
  public void CMemorialDungeon::OnLeave(const unsigned long, const unsigned long)
  public int GetHsvrID()
  public int GetZsvrID()
        /* this+0x100 */ class std::multimap<unsigned long,enum CMemorialDungeon::enumSCHEDULE,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,enum CMemorialDungeon::enumSCHEDULE> > > m_ScheduleContainer

  private void CMemorialDungeon::Schedule_Add(const unsigned long, const enum CMemorialDungeon::enumSCHEDULE)
  private unsigned long CMemorialDungeon::Schedule_GetDate(const enum CMemorialDungeon::enumSCHEDULE)
  private void CMemorialDungeon::Schedule_Process()
  /* this+0x110 */ function  * m_ProcessFuncPtr
  private void CMemorialDungeon::Process_PROCSTEP_CREATE_INSTANTMAP(const int, const int, const int)
  private void CMemorialDungeon::Process_PROCSTEP_DYING_WISH(const int, const int, const int)
  private void CMemorialDungeon::Process_PROCSTEP_OPERATION(const int, const int, const int)
  public const bool isOK()
  public void CMemorialDungeon::Process()
  public const bool IsDestroyReady()
  public const bool isActive()
  public const int GetTargetZSID()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CMemorialDungeon::GetName()
  public const unsigned long GetPartyID()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CMemorialDungeon::GetPartyName()
  public const unsigned long GetLiveDate()
  public const unsigned long GetEnterLimitDate()
  public const unsigned long GetZSVRregisteredFUCnt()
  public const int GetFactor()
  public void CMemorialDungeon::PartyLeave(const unsigned long, const unsigned long)
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CMemorialDungeon::GetEnterInstantMapName()
  public const int GetEnterInstantMapX()
  public const int GetEnterInstantMapY()
  public const enum CMemorialDungeon::enumSTATE GetState()
  public void CMemorialDungeon::Receive(const unsigned int, const unsigned int, const unsigned int)
  public void CMemorialDungeon(class CMemorialDungeon &)
  public void CMemorialDungeon::CMemorialDungeon(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int)
  public void CMemorialDungeon::~CMemorialDungeon()
  public class CMemorialDungeon & operator=(class CMemorialDungeon &)
  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeon::CPlayer {
    *
  /* this+0x4 */ unsigned long m_AID
  /* this+0x8 */ unsigned long m_GID
  public void CPlayer(const class CMemorialDungeon::CPlayer &)
  public void CPlayer(const unsigned long, const unsigned long)
  public void CMemorialDungeon::CPlayer::~CPlayer()
  public class CMemorialDungeon::CPlayer & operator=(const class CMemorialDungeon::CPlayer &)
  public void * __vecDelDtor(unsigned int)
}

struct CMemorialDungeon::tagInstantMapInfo {
  /* this+0x0 */ bool bCreateRequest
  /* this+0x4 */ int mapType
  public void tagInstantMapInfo(const int)
}

class CMemorialDungeonConfig {
    public bool isOK()
  public bool CMemorialDungeonConfig::Init()
  private bool CMemorialDungeonConfig::LoadTbl()
  /* this+0x0 */ bool m_bOK
  /* [0x0003:0x000038d4] */ static  class CMemorialDungeonConfig * m_cpSelf
    /* this+0x4 */ class stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfig::lcMDConfigData,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > m_MDConfigInfo

  /* this+0x30 */ int m_nMaxMemoryBytes
  /* this+0x34 */ int m_nEnterLimitMinute
  /* this+0x38 */ int m_nSubscriptionMinimumDelaySecond
  /* this+0x3c */ int m_nDatabaseLogOutput
  /* this+0x40 */ bool m_bOpen
  public bool CMemorialDungeonConfig::SetBaseConfig(const int, const int, const int, const int, const int)
  public bool CMemorialDungeonConfig::RegisterMemorialDungeon(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool CMemorialDungeonConfig::InsertMDMap(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public bool CMemorialDungeonConfig::InsertMDLiveTimeMinute(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public bool CMemorialDungeonConfig::InsertMDEnterMap(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int)
  public bool CMemorialDungeonConfig::InsertMDPlaceWithMap(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public struct std::pair<bool,CMemorialDungeonConfig::lcMDConfigData> CMemorialDungeonConfig::GetOnceMDObj(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public class stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfig::lcMDConfigData,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfig::lcMDConfigData> > > GetMDObj()
  public int GetMaximumZoneResourceMemory()
  public int GetEnterLimitMinute()
  public int GetSubscriptionMinimumDelaySecond()
  public int GetDatabaseLogOutput()
  public bool isOpen()
  public static bool CMemorialDungeonConfig::CreateInstance()
  public static void CMemorialDungeonConfig::DestroyInstance()
  private void CMemorialDungeonConfig(class CMemorialDungeonConfig &)
  private void CMemorialDungeonConfig::CMemorialDungeonConfig()
  private void CMemorialDungeonConfig::~CMemorialDungeonConfig()
  private class CMemorialDungeonConfig & operator=(class CMemorialDungeonConfig &)
  private void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonConfig::lcMDConfigData {
  public void CMemorialDungeonConfig::lcMDConfigData::lcMDConfigData(const class CMemorialDungeonConfig::lcMDConfigData &)
  public void CMemorialDungeonConfig::lcMDConfigData::lcMDConfigData(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMemorialDungeonConfig::lcMDConfigData::lcMDConfigData()
  public void CMemorialDungeonConfig::lcMDConfigData::~lcMDConfigData()
      /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_szTitle

  /* this+0x1c */ class std::list<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo,std::allocator<CMemorialDungeonConfig::lcMDConfigData::MDMapInfo> > m_MapInfoObj

  /* this+0x28 */ class CMemorialDungeonConfig::lcMDConfigData::MDEnterMapInfo m_lcEnterMapInfo

  /* this+0x4c */ int m_nLiveTimeMinute
  /* this+0x50 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_szPlaceWithMap

  public class CMemorialDungeonConfig::lcMDConfigData & operator=(const class CMemorialDungeonConfig::lcMDConfigData &)
  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonConfig::lcMDConfigData::MDEnterMapInfo {
  public void MDEnterMapInfo(const class CMemorialDungeonConfig::lcMDConfigData::MDEnterMapInfo &)
  public void MDEnterMapInfo()
  public void CMemorialDungeonConfig::lcMDConfigData::MDEnterMapInfo::~MDEnterMapInfo()
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_szMapName

  /* this+0x1c */ int m_nXpos
  /* this+0x20 */ int m_nYpos
  public class CMemorialDungeonConfig::lcMDConfigData::MDEnterMapInfo & operator=(const class CMemorialDungeonConfig::lcMDConfigData::MDEnterMapInfo &)
  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonConfig::lcMDConfigData::MDMapInfo {
  public void MDMapInfo(const class CMemorialDungeonConfig::lcMDConfigData::MDMapInfo &)
  public void MDMapInfo(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void CMemorialDungeonConfig::lcMDConfigData::MDMapInfo::~MDMapInfo()
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_szMapName

  /* this+0x1c */ int m_nMapType
  public class CMemorialDungeonConfig::lcMDConfigData::MDMapInfo & operator=(const class CMemorialDungeonConfig::lcMDConfigData::MDMapInfo &)
  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonConfiguration {
    *
    /* [0x0003:0x00001ca4] */ static  const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_szConfigFileName

      /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CMemorialDungeonConfiguration::LCMemorialDungeon,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CMemorialDungeonConfiguration::LCMemorialDungeon> > > m_MemorialDungeonContainer

  /* this+0x14 */ int m_EnterLimitMinute
  /* this+0x18 */ bool m_bDataBaseLogOutput
  /* this+0x1c */ int m_SubscriptionMinimumDelaySecond
  /* this+0x20 */ unsigned int m_under_zsvr_memory_mbytes
  /* this+0x24 */ bool m_bOpen
  /* this+0x25 */ bool m_bOK
  /* [0x0003:0x000038c4] */ static  class CMemorialDungeonConfiguration * m_cpSelf
  private bool CMemorialDungeonConfiguration::Create()
  private void Destroy()
  public const bool isOK()
  public class CMemorialDungeonConfiguration::LCMemorialDungeon * GetConfigurationPtr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public unsigned long GetEnterLimitMinute()
  public unsigned long GetSubscriptionMinimumDelaySecond()
  public unsigned int Get_under_zsvr_memory_mbytes()
  public bool IsDBLogOutput()
  public bool IsOpen()
  private bool CMemorialDungeonConfiguration::Anaysis(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private bool CMemorialDungeonConfiguration::Anaysis_Dungeon(class N2FTAFile &, class N2FTALexicalAnalyzer &, class CMemorialDungeonConfiguration::LCMemorialDungeon &, class N2FTALexicalAnalyzer::FTARet &)
  private void CMemorialDungeonConfiguration::ErrorMessageBox(const char *, <NoType>)
  private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > CMemorialDungeonConfiguration::GetTokenInfoStr(class N2FTAToken &, class N2FTAFile &)
  private bool CMemorialDungeonConfiguration::GetFTAToken(class N2FTALexicalAnalyzer &, class N2FTALexicalAnalyzer::FTARet &, enum N2FTAToken::enumTYPE)
  private bool CMemorialDungeonConfiguration::PeekFTAToken(class N2FTALexicalAnalyzer &, class N2FTALexicalAnalyzer::FTARet &, enum N2FTAToken::enumTYPE)
  public static bool CMemorialDungeonConfiguration::CreateInstance()
  public static void CMemorialDungeonConfiguration::DestroyInstance()
  public void CMemorialDungeonConfiguration(const class CMemorialDungeonConfiguration &)
  private void CMemorialDungeonConfiguration::CMemorialDungeonConfiguration()
  private void CMemorialDungeonConfiguration::~CMemorialDungeonConfiguration()
  public class CMemorialDungeonConfiguration & operator=(const class CMemorialDungeonConfiguration &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonConfiguration::LCMemorialDungeon {
        /* this+0x0 */ class std::vector<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap,std::allocator<CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap> > m_MapList

  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strPlaceWithMap

  /* this+0x2c */ int m_LiveTimeMinute
  /* this+0x30 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strName

    /* this+0x4c */ struct CMemorialDungeonConfiguration::LCMemorialDungeon::tagEnter m_Enter

  public void CMemorialDungeonConfiguration::LCMemorialDungeon::LCMemorialDungeon(const class CMemorialDungeonConfiguration::LCMemorialDungeon &)
  public void LCMemorialDungeon()
  public void LCMemorialDungeon(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMemorialDungeonConfiguration::LCMemorialDungeon::~LCMemorialDungeon()
  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap {
  /* this+0x0 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_PhysicalMapName

  /* this+0x1c */ int m_Type
  public void lcInstantMap(const class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap &)
  public void lcInstantMap(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap::~lcInstantMap()
  public class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap & operator=(const class CMemorialDungeonConfiguration::LCMemorialDungeon::lcInstantMap &)
  public void * __vecDelDtor(unsigned int)
}

struct CMemorialDungeonConfiguration::LCMemorialDungeon::tagEnter {
  /* this+0x0 */ int X
  /* this+0x4 */ int Y
  /* this+0x8 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > PhysicalMapName

  public void tagEnter(const struct CMemorialDungeonConfiguration::LCMemorialDungeon::tagEnter &)
  public void tagEnter()
  public void CMemorialDungeonConfiguration::LCMemorialDungeon::tagEnter::~tagEnter()
  public struct CMemorialDungeonConfiguration::LCMemorialDungeon::tagEnter & operator=(const struct CMemorialDungeonConfiguration::LCMemorialDungeon::tagEnter &)
  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonDBLog {
  N2DBLog, offset = 0x0

    /* this+0x8 */ bool m_bOK
  /* this+0xc */ const enum CMemorialDungeonDBLog::enumTYPE m_Type
  /* this+0x10 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_MemorialDungeonName

  /* this+0x2c */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_PartyName

  /* this+0x48 */ const int m_PartyID
  /* this+0x4c */ const int m_CreateZSID
  private bool CMemorialDungeonDBLog::Run(class N2ODBCCtrl &)
  public bool isOK()
  public void CMemorialDungeonDBLog(const class CMemorialDungeonDBLog &)
  public void CMemorialDungeonDBLog::CMemorialDungeonDBLog(const enum CMemorialDungeonDBLog::enumTYPE, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int)
  public void CMemorialDungeonDBLog::~CMemorialDungeonDBLog()
  public void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonDBLogMgr {
    *
  /* [0x0003:0x000038c8] */ static  class CMemorialDungeonDBLogMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class N2ODBCCtrl m_ODBCCtrl

  private bool CMemorialDungeonDBLogMgr::Create()
  private void Destroy()
  public bool isOK()
  public void CMemorialDungeonDBLogMgr::Add(const enum CMemorialDungeonDBLog::enumTYPE, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int)
  public static bool CMemorialDungeonDBLogMgr::CreateInstance()
  public static void CMemorialDungeonDBLogMgr::DestroyInstance()
  public void CMemorialDungeonDBLogMgr(const class CMemorialDungeonDBLogMgr &)
  private void CMemorialDungeonDBLogMgr::CMemorialDungeonDBLogMgr()
  private void CMemorialDungeonDBLogMgr::~CMemorialDungeonDBLogMgr()
  public class CMemorialDungeonDBLogMgr & operator=(const class CMemorialDungeonDBLogMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonFactorGenerator {
  CN3RecycleIDGenerator, offset = 0x0

  public static bool CMemorialDungeonFactorGenerator::CreateInstance()
  public static void CMemorialDungeonFactorGenerator::DestoryInstance()
  private void CMemorialDungeonFactorGenerator(class CMemorialDungeonFactorGenerator &)
  private void CMemorialDungeonFactorGenerator::CMemorialDungeonFactorGenerator()
  private void CMemorialDungeonFactorGenerator::~CMemorialDungeonFactorGenerator()
  private class CMemorialDungeonFactorGenerator & operator=(class CMemorialDungeonFactorGenerator &)
  /* [0x0003:0x000038cc] */ static  class CMemorialDungeonFactorGenerator * m_cpSelf
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonMgr {
    *
  /* [0x0003:0x000038d0] */ static  class CMemorialDungeonMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x5 */ bool m_bOpen
  /* this+0x8 */ unsigned long m_Previous_Create_RequestTM
      /* this+0xc */ class N2DualKeyMap<unsigned long,unsigned int,CMemorialDungeon *> m_MemorialDungeonContainer2

      /* this+0x30 */ class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer> m_SubscriptionPlayerContainer

  private bool CMemorialDungeonMgr::Create()
  private void CMemorialDungeonMgr::Destroy()
  private int CMemorialDungeonMgr::CreateMemorialDungeonR2(class CMemorialDungeonReservedPlayer &)
  private void CMemorialDungeonMgr::NotifySubscriptionPriority()
  private void CMemorialDungeonMgr::Command_SubscriptionCancel(const unsigned long)
  private void CMemorialDungeonMgr::Command_Destroy(const unsigned long)
  public const bool isOK()
  public void CMemorialDungeonMgr::Process()
  public const int GetNum()
  public void CMemorialDungeonMgr::Subscription(const int, const int, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMemorialDungeonMgr::CreateResult(const unsigned long, const bool)
  public void CMemorialDungeonMgr::DisconnectZSVR(const int)
  public void CMemorialDungeonMgr::Command(const unsigned long, const enum PACKET_CZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND)
  public void CMemorialDungeonMgr::NotifyAllMemorialDunbeon(const int, const unsigned long &)
  public void CMemorialDungeonMgr::Visa(const unsigned long, const unsigned long, const unsigned long)
  public void CMemorialDungeonMgr::OnNewbie(const int, const unsigned long, const unsigned long, const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMemorialDungeonMgr::OnEnter(const unsigned long, const unsigned long, const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMemorialDungeonMgr::OnLeave(const unsigned long, const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool CMemorialDungeonMgr::isSubscription(const unsigned long)
  public bool isOpen()
  public void Open()
  public void Close()
  public void CMemorialDungeonMgr::PartyLeave(const unsigned long, const unsigned long, const unsigned long)
  public void CMemorialDungeonMgr::PartyDestroy(const unsigned long)
  public static bool CMemorialDungeonMgr::CreateInstance()
  public static void CMemorialDungeonMgr::DestroyInstance()
  public void CMemorialDungeonMgr(const class CMemorialDungeonMgr &)
  private void CMemorialDungeonMgr::CMemorialDungeonMgr()
  private void CMemorialDungeonMgr::~CMemorialDungeonMgr()
  public class CMemorialDungeonMgr & operator=(const class CMemorialDungeonMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMemorialDungeonReservedPlayer {
    *
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name

  /* this+0x20 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_NickName

  /* this+0x3c */ int m_hParty
  /* this+0x40 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_PartyName

  /* this+0x5c */ bool m_bCreateDoing
  /* this+0x60 */ int m_PriorityNum
  /* this+0x64 */ unsigned long m_PriorityNumNotifyTM
  /* this+0x68 */ unsigned long m_RequestTM
  /* this+0x6c */ int m_HsvrID
  public void CMemorialDungeonReservedPlayer::CMemorialDungeonReservedPlayer(const class CMemorialDungeonReservedPlayer &)
  public void CMemorialDungeonReservedPlayer::CMemorialDungeonReservedPlayer(const int, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CMemorialDungeonReservedPlayer::~CMemorialDungeonReservedPlayer()
  public class CMemorialDungeonReservedPlayer & operator=(const class CMemorialDungeonReservedPlayer &)
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CAsyncStream> {
    *
  public bool CMemoryMgr<CAsyncStream>::Init(const int)
  public class CAsyncStream * CMemoryMgr<CAsyncStream>::Alloc()
  public void CMemoryMgr<CAsyncStream>::Free(class CAsyncStream *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CAsyncStream>(class CMemoryMgr<CAsyncStream> &)
  public void CMemoryMgr<CAsyncStream>::CMemoryMgr<CAsyncStream>()
  public void CMemoryMgr<CAsyncStream>::~CMemoryMgr<CAsyncStream>()
  public class CMemoryMgr<CAsyncStream> & operator=(class CMemoryMgr<CAsyncStream> &)
    /* this+0x4 */ class CMemoryMgr<CAsyncStream>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CAsyncStream>::lcMemory {
    *
  /* this+0x4 */ class CAsyncStream * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CAsyncStream>::lcMemory &)
  public void CMemoryMgr<CAsyncStream>::lcMemory::lcMemory()
  public void CMemoryMgr<CAsyncStream>::lcMemory::~lcMemory()
  public class CMemoryMgr<CAsyncStream>::lcMemory & operator=(const class CMemoryMgr<CAsyncStream>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CHARINFO_IN_GROUP> {
    *
  public bool CMemoryMgr<CHARINFO_IN_GROUP>::Init(const int)
  public struct CHARINFO_IN_GROUP * CMemoryMgr<CHARINFO_IN_GROUP>::Alloc()
  public void CMemoryMgr<CHARINFO_IN_GROUP>::Free(struct CHARINFO_IN_GROUP *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CHARINFO_IN_GROUP>(class CMemoryMgr<CHARINFO_IN_GROUP> &)
  public void CMemoryMgr<CHARINFO_IN_GROUP>::CMemoryMgr<CHARINFO_IN_GROUP>()
  public void CMemoryMgr<CHARINFO_IN_GROUP>::~CMemoryMgr<CHARINFO_IN_GROUP>()
  public class CMemoryMgr<CHARINFO_IN_GROUP> & operator=(class CMemoryMgr<CHARINFO_IN_GROUP> &)
    /* this+0x4 */ class CMemoryMgr<CHARINFO_IN_GROUP>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CHARINFO_IN_GROUP>::lcMemory {
    *
  /* this+0x4 */ struct CHARINFO_IN_GROUP * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CHARINFO_IN_GROUP>::lcMemory &)
  public void CMemoryMgr<CHARINFO_IN_GROUP>::lcMemory::lcMemory()
  public void CMemoryMgr<CHARINFO_IN_GROUP>::lcMemory::~lcMemory()
  public class CMemoryMgr<CHARINFO_IN_GROUP>::lcMemory & operator=(const class CMemoryMgr<CHARINFO_IN_GROUP>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CIGuildInfo> {
    *
  public bool CMemoryMgr<CIGuildInfo>::Init(const int)
  public class CIGuildInfo * CMemoryMgr<CIGuildInfo>::Alloc()
  public void CMemoryMgr<CIGuildInfo>::Free(class CIGuildInfo *)
  public int CMemoryMgr<CIGuildInfo>::GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CIGuildInfo>(class CMemoryMgr<CIGuildInfo> &)
  public void CMemoryMgr<CIGuildInfo>::CMemoryMgr<CIGuildInfo>()
  public void CMemoryMgr<CIGuildInfo>::~CMemoryMgr<CIGuildInfo>()
  public class CMemoryMgr<CIGuildInfo> & operator=(class CMemoryMgr<CIGuildInfo> &)
    /* this+0x4 */ class CMemoryMgr<CIGuildInfo>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CIGuildInfo>::lcMemory {
    *
  /* this+0x4 */ class CIGuildInfo * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CIGuildInfo>::lcMemory &)
  public void CMemoryMgr<CIGuildInfo>::lcMemory::lcMemory()
  public void CMemoryMgr<CIGuildInfo>::lcMemory::~lcMemory()
  public class CMemoryMgr<CIGuildInfo>::lcMemory & operator=(const class CMemoryMgr<CIGuildInfo>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CMClient> {
    *
  public bool CMemoryMgr<CMClient>::Init(const int)
  public class CMClient * CMemoryMgr<CMClient>::Alloc()
  public void CMemoryMgr<CMClient>::Free(class CMClient *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CMClient>(class CMemoryMgr<CMClient> &)
  public void CMemoryMgr<CMClient>::CMemoryMgr<CMClient>()
  public void CMemoryMgr<CMClient>::~CMemoryMgr<CMClient>()
  public class CMemoryMgr<CMClient> & operator=(class CMemoryMgr<CMClient> &)
    /* this+0x4 */ class CMemoryMgr<CMClient>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CMClient>::lcMemory {
    *
  /* this+0x4 */ class CMClient * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CMClient>::lcMemory &)
  public void CMemoryMgr<CMClient>::lcMemory::lcMemory()
  public void CMemoryMgr<CMClient>::lcMemory::~lcMemory()
  public class CMemoryMgr<CMClient>::lcMemory & operator=(const class CMemoryMgr<CMClient>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CParty> {
    *
  public bool CMemoryMgr<CParty>::Init(const int)
  public class CParty * CMemoryMgr<CParty>::Alloc()
  public void CMemoryMgr<CParty>::Free(class CParty *)
  public int CMemoryMgr<CParty>::GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CParty>(class CMemoryMgr<CParty> &)
  public void CMemoryMgr<CParty>::CMemoryMgr<CParty>()
  public void CMemoryMgr<CParty>::~CMemoryMgr<CParty>()
  public class CMemoryMgr<CParty> & operator=(class CMemoryMgr<CParty> &)
    /* this+0x4 */ class CMemoryMgr<CParty>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CParty>::lcMemory {
    *
  /* this+0x4 */ class CParty * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CParty>::lcMemory &)
  public void CMemoryMgr<CParty>::lcMemory::lcMemory()
  public void CMemoryMgr<CParty>::lcMemory::~lcMemory()
  public class CMemoryMgr<CParty>::lcMemory & operator=(const class CMemoryMgr<CParty>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CUserMgr::SERVER_MOVE_USER> {
    *
  public bool CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::Init(const int)
  public struct CUserMgr::SERVER_MOVE_USER * Alloc()
  public void Free(struct CUserMgr::SERVER_MOVE_USER *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CUserMgr::SERVER_MOVE_USER>(class CMemoryMgr<CUserMgr::SERVER_MOVE_USER> &)
  public void CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::CMemoryMgr<CUserMgr::SERVER_MOVE_USER>()
  public void CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::~CMemoryMgr<CUserMgr::SERVER_MOVE_USER>()
  public class CMemoryMgr<CUserMgr::SERVER_MOVE_USER> & operator=(class CMemoryMgr<CUserMgr::SERVER_MOVE_USER> &)
    /* this+0x4 */ class CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::lcMemory {
    *
  /* this+0x4 */ struct CUserMgr::SERVER_MOVE_USER * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::lcMemory &)
  public void CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::lcMemory::lcMemory()
  public void CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::lcMemory::~lcMemory()
  public class CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::lcMemory & operator=(const class CMemoryMgr<CUserMgr::SERVER_MOVE_USER>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CZServer> {
    *
  public bool CMemoryMgr<CZServer>::Init(const int)
  public class CZServer * CMemoryMgr<CZServer>::Alloc()
  public void CMemoryMgr<CZServer>::Free(class CZServer *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<CZServer>(class CMemoryMgr<CZServer> &)
  public void CMemoryMgr<CZServer>::CMemoryMgr<CZServer>()
  public void CMemoryMgr<CZServer>::~CMemoryMgr<CZServer>()
  public class CMemoryMgr<CZServer> & operator=(class CMemoryMgr<CZServer> &)
    /* this+0x4 */ class CMemoryMgr<CZServer>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<CZServer>::lcMemory {
    *
  /* this+0x4 */ class CZServer * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<CZServer>::lcMemory &)
  public void CMemoryMgr<CZServer>::lcMemory::lcMemory()
  public void CMemoryMgr<CZServer>::lcMemory::~lcMemory()
  public class CMemoryMgr<CZServer>::lcMemory & operator=(const class CMemoryMgr<CZServer>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDALLYINFO> {
    *
  public bool CMemoryMgr<GUILDALLYINFO>::Init(const int)
  public struct GUILDALLYINFO * CMemoryMgr<GUILDALLYINFO>::Alloc()
  public void CMemoryMgr<GUILDALLYINFO>::Free(struct GUILDALLYINFO *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void CMemoryMgr<GUILDALLYINFO>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<GUILDALLYINFO>(class CMemoryMgr<GUILDALLYINFO> &)
  public void CMemoryMgr<GUILDALLYINFO>::CMemoryMgr<GUILDALLYINFO>()
  public void CMemoryMgr<GUILDALLYINFO>::~CMemoryMgr<GUILDALLYINFO>()
  public class CMemoryMgr<GUILDALLYINFO> & operator=(class CMemoryMgr<GUILDALLYINFO> &)
    /* this+0x4 */ class CMemoryMgr<GUILDALLYINFO>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDALLYINFO>::lcMemory {
    *
  /* this+0x4 */ struct GUILDALLYINFO * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<GUILDALLYINFO>::lcMemory &)
  public void CMemoryMgr<GUILDALLYINFO>::lcMemory::lcMemory()
  public void CMemoryMgr<GUILDALLYINFO>::lcMemory::~lcMemory()
  public class CMemoryMgr<GUILDALLYINFO>::lcMemory & operator=(const class CMemoryMgr<GUILDALLYINFO>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDBANISHINFO> {
    *
  public bool CMemoryMgr<GUILDBANISHINFO>::Init(const int)
  public struct GUILDBANISHINFO * CMemoryMgr<GUILDBANISHINFO>::Alloc()
  public void CMemoryMgr<GUILDBANISHINFO>::Free(struct GUILDBANISHINFO *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<GUILDBANISHINFO>(class CMemoryMgr<GUILDBANISHINFO> &)
  public void CMemoryMgr<GUILDBANISHINFO>::CMemoryMgr<GUILDBANISHINFO>()
  public void CMemoryMgr<GUILDBANISHINFO>::~CMemoryMgr<GUILDBANISHINFO>()
  public class CMemoryMgr<GUILDBANISHINFO> & operator=(class CMemoryMgr<GUILDBANISHINFO> &)
    /* this+0x4 */ class CMemoryMgr<GUILDBANISHINFO>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDBANISHINFO>::lcMemory {
    *
  /* this+0x4 */ struct GUILDBANISHINFO * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<GUILDBANISHINFO>::lcMemory &)
  public void CMemoryMgr<GUILDBANISHINFO>::lcMemory::lcMemory()
  public void CMemoryMgr<GUILDBANISHINFO>::lcMemory::~lcMemory()
  public class CMemoryMgr<GUILDBANISHINFO>::lcMemory & operator=(const class CMemoryMgr<GUILDBANISHINFO>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDMINFO> {
    *
  public bool CMemoryMgr<GUILDMINFO>::Init(const int)
  public struct GUILDMINFO * CMemoryMgr<GUILDMINFO>::Alloc()
  public void CMemoryMgr<GUILDMINFO>::Free(struct GUILDMINFO *)
  public int GetFreeSize()
  public int CMemoryMgr<GUILDMINFO>::GetAllocSize()
  public void CMemoryMgr<GUILDMINFO>::Reset()
  public int GetCapacity()
  public void CMemoryMgr<GUILDMINFO>(class CMemoryMgr<GUILDMINFO> &)
  public void CMemoryMgr<GUILDMINFO>::CMemoryMgr<GUILDMINFO>()
  public void CMemoryMgr<GUILDMINFO>::~CMemoryMgr<GUILDMINFO>()
  public class CMemoryMgr<GUILDMINFO> & operator=(class CMemoryMgr<GUILDMINFO> &)
    /* this+0x4 */ class CMemoryMgr<GUILDMINFO>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDMINFO>::lcMemory {
    *
  /* this+0x4 */ struct GUILDMINFO * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<GUILDMINFO>::lcMemory &)
  public void CMemoryMgr<GUILDMINFO>::lcMemory::lcMemory()
  public void CMemoryMgr<GUILDMINFO>::lcMemory::~lcMemory()
  public class CMemoryMgr<GUILDMINFO>::lcMemory & operator=(const class CMemoryMgr<GUILDMINFO>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDMPOSITION> {
    *
  public bool CMemoryMgr<GUILDMPOSITION>::Init(const int)
  public struct GUILDMPOSITION * CMemoryMgr<GUILDMPOSITION>::Alloc()
  public void CMemoryMgr<GUILDMPOSITION>::Free(struct GUILDMPOSITION *)
  public int GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<GUILDMPOSITION>(class CMemoryMgr<GUILDMPOSITION> &)
  public void CMemoryMgr<GUILDMPOSITION>::CMemoryMgr<GUILDMPOSITION>()
  public void CMemoryMgr<GUILDMPOSITION>::~CMemoryMgr<GUILDMPOSITION>()
  public class CMemoryMgr<GUILDMPOSITION> & operator=(class CMemoryMgr<GUILDMPOSITION> &)
    /* this+0x4 */ class CMemoryMgr<GUILDMPOSITION>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<GUILDMPOSITION>::lcMemory {
    *
  /* this+0x4 */ struct GUILDMPOSITION * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<GUILDMPOSITION>::lcMemory &)
  public void CMemoryMgr<GUILDMPOSITION>::lcMemory::lcMemory()
  public void CMemoryMgr<GUILDMPOSITION>::lcMemory::~lcMemory()
  public class CMemoryMgr<GUILDMPOSITION>::lcMemory & operator=(const class CMemoryMgr<GUILDMPOSITION>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<USER_STRING_MAP_DATA> {
    *
  public bool CMemoryMgr<USER_STRING_MAP_DATA>::Init(const int)
  public struct USER_STRING_MAP_DATA * CMemoryMgr<USER_STRING_MAP_DATA>::Alloc()
  public void CMemoryMgr<USER_STRING_MAP_DATA>::Free(struct USER_STRING_MAP_DATA *)
  public int CMemoryMgr<USER_STRING_MAP_DATA>::GetFreeSize()
  public int GetAllocSize()
  public void Reset()
  public int GetCapacity()
  public void CMemoryMgr<USER_STRING_MAP_DATA>(class CMemoryMgr<USER_STRING_MAP_DATA> &)
  public void CMemoryMgr<USER_STRING_MAP_DATA>::CMemoryMgr<USER_STRING_MAP_DATA>()
  public void CMemoryMgr<USER_STRING_MAP_DATA>::~CMemoryMgr<USER_STRING_MAP_DATA>()
  public class CMemoryMgr<USER_STRING_MAP_DATA> & operator=(class CMemoryMgr<USER_STRING_MAP_DATA> &)
    /* this+0x4 */ class CMemoryMgr<USER_STRING_MAP_DATA>::lcMemory * m_MemoryPool
  /* this+0x8 */ int m_MemoryCnt
  /* this+0xc */ struct _RTL_CRITICAL_SECTION m_cs

  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMemoryMgr<USER_STRING_MAP_DATA>::lcMemory {
    *
  /* this+0x4 */ struct USER_STRING_MAP_DATA * m_pObject
  /* this+0x8 */ bool m_bUsed
  public void lcMemory(const class CMemoryMgr<USER_STRING_MAP_DATA>::lcMemory &)
  public void CMemoryMgr<USER_STRING_MAP_DATA>::lcMemory::lcMemory()
  public void CMemoryMgr<USER_STRING_MAP_DATA>::lcMemory::~lcMemory()
  public class CMemoryMgr<USER_STRING_MAP_DATA>::lcMemory & operator=(const class CMemoryMgr<USER_STRING_MAP_DATA>::lcMemory &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CMsvrAcceptHandler {
    *
  public bool isOK()
  public int CMsvrAcceptHandler::Init(int)
  public class CAsyncStream * AllocStream()
  public void FreeStream(class CAsyncStream *)
  public int CMsvrAcceptHandler::OnConnect(unsigned int, unsigned long)
  public static bool CMsvrAcceptHandler::CreateInstance()
  public static void CMsvrAcceptHandler::DestroyInstance()
  private void CMsvrAcceptHandler(class CMsvrAcceptHandler &)
  private void CMsvrAcceptHandler::CMsvrAcceptHandler()
  private void CMsvrAcceptHandler::~CMsvrAcceptHandler()
  private class CMsvrAcceptHandler & operator=(class CMsvrAcceptHandler &)
  /* [0x0003:0x0000389c] */ static  class CMsvrAcceptHandler * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class CMemoryMgr<CAsyncStream> m_streamPool

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMsvrAcceptThread {
  N3Thread, offset = 0x0

  N3Inter, offset = 0x30

  N3Object, offset = 0x34

    public bool isOK()
  public bool CMsvrAcceptThread::Start()
  public void CMsvrAcceptThread::Stop()
  private unsigned int CMsvrAcceptThread::ThreadFunction()
  private void CMsvrAcceptThread::PostThreadQuitMessage()
  public void CMsvrAcceptThread::Receive(const unsigned int, const unsigned int, const unsigned int)
  private bool CMsvrAcceptThread::Create()
  private void CMsvrAcceptThread::Destory()
  public static bool CMsvrAcceptThread::CreateInstance(class NIPAddr, int)
  public static void CMsvrAcceptThread::DestroyInstance()
  private void CMsvrAcceptThread(class CMsvrAcceptThread &)
  private void CMsvrAcceptThread::CMsvrAcceptThread(const unsigned long, const short)
  private void CMsvrAcceptThread::~CMsvrAcceptThread()
  private class CMsvrAcceptThread & operator=(class CMsvrAcceptThread &)
  /* [0x0003:0x000038a0] */ static  class CMsvrAcceptThread * m_cpSelf
  /* this+0x3c */ bool m_bOK
  /* this+0x40 */ class N3MessageQueue m_MessageQueue

  /* this+0x7c */ unsigned int m_Socket
  /* this+0x80 */ const unsigned long m_IPaddr
  /* this+0x84 */ const short m_Port
  private void * __vecDelDtor(unsigned int)
}

class CMsvrMgr {
  CMClientMgr, offset = 0x0

  N3Inter, offset = 0x54

  N3Object, offset = 0x58

    public bool isOK()
  public void CMsvrMgr::Process()
  public int CMsvrMgr::GetClientNumber()
  public void CMsvrMgr::DeleteServer(int)
  private void CMsvrMgr::ProcessMSG()
  public void CMsvrMgr::Receive(const unsigned int, const unsigned int, const unsigned int)
  public static bool CMsvrMgr::CreateInstance()
  public static void CMsvrMgr::DestroyInstance()
  private void CMsvrMgr(class CMsvrMgr &)
  private void CMsvrMgr::CMsvrMgr()
  private void CMsvrMgr::~CMsvrMgr()
  private class CMsvrMgr & operator=(class CMsvrMgr &)
  /* [0x0003:0x000038a4] */ static  class CMsvrMgr * m_cpSelf
  /* this+0x60 */ bool m_bOK
  /* this+0x64 */ class N3MessageQueue m_MessageQueue

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CMyMiniDumpUnhandledExceptionHandler {
  private static long CMyMiniDumpUnhandledExceptionHandler::UnhandledExceptionHandler(struct _EXCEPTION_POINTERS *)
  private static void MyStackWalk(const struct _SYSTEMTIME &, struct _EXCEPTION_POINTERS *)
  public static bool CMyMiniDumpUnhandledExceptionHandler::CreateInstance(function  *)
  public static void CMyMiniDumpUnhandledExceptionHandler::DestroyInstance()
  private bool isOK()
  private void CMyMiniDumpUnhandledExceptionHandler::CMyMiniDumpUnhandledExceptionHandler(function  *)
  private void ~CMyMiniDumpUnhandledExceptionHandler()
  /* [0x0003:0x00003a7c] */ static  class CMyMiniDumpUnhandledExceptionHandler * m_cpSelf
  /* this+0x0 */ bool m_bOK
  /* [0x0003:0x00003978] */ static  char[0x104] m_MoudleFilePath
  /* [0x0003:0x00003a80] */ static  char[0x104] m_MoudleFileName
  /* [0x0003:0x00003b84] */ static  function  * m_pOutputFunc
  private void * __vecDelDtor(unsigned int)
}

class CN3RecycleIDGenerator {
    *
  public bool isOK()
  public int CN3RecycleIDGenerator::Alloc()
  public void CN3RecycleIDGenerator::Free(const unsigned int)
  public void CN3RecycleIDGenerator(class CN3RecycleIDGenerator &)
  public void CN3RecycleIDGenerator::CN3RecycleIDGenerator(const unsigned int, const unsigned int, const unsigned int)
  public void CN3RecycleIDGenerator::~CN3RecycleIDGenerator()
  public class CN3RecycleIDGenerator & operator=(class CN3RecycleIDGenerator &)
  /* this+0x4 */ bool m_bOK
    /* this+0x8 */ class std::deque<unsigned int,std::allocator<unsigned int> > m_RecycleIDContainer

  /* this+0x20 */ const unsigned int m_nFirstIDValue
  /* this+0x24 */ const unsigned int m_nLastIDValue
  /* this+0x28 */ const unsigned int m_nMinimumObjCnt
  /* this+0x2c */ unsigned int m_nNextID
  public void * __vecDelDtor(unsigned int)
}

class CODBC {
    *
  public void * operator void *()
  public void CODBC(const class CODBC &)
  public void CODBC::CODBC()
  public void CODBC::~CODBC()
  public void CODBC::Reset()
  public void CODBC::GetErrorString(void *, char *)
  public int CODBC::Init(const char *, const char *)
  /* this+0x4 */ void * m_henv
  /* this+0x8 */ void * m_hdbc
  /* this+0xc */ void * m_hstmt
  /* this+0x10 */ short m_retcode
  public class CODBC & operator=(const class CODBC &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CODBCHandler {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class CODBC * m_cpODBC
  /* this+0xc */ void * m_hStmt
  private bool Init()
  public bool isOK()
  public short ExecDirect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public short UnBind()
  public short BindCol(unsigned short, short, void *, long, long *)
  public short BindParameter(unsigned short, short, short, short, unsigned long, short, void *, long, long *)
  public short GetData(unsigned short, short, void *, long, long *)
  public short CloseCursor()
  public short PutData(void *, long)
  public short Fetch()
  public short ParamData(void * *)
  public void * operator void *()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetErrorString()
  public void OutputErrorString(const char *, const int, const char *)
  public void CODBCHandler(const class CODBCHandler &)
  public void CODBCHandler(class CODBC *)
  public void ~CODBCHandler()
  public class CODBCHandler & operator=(const class CODBCHandler &)
  public void * __vecDelDtor(unsigned int)
}

class CPacketHandler {
    *
  public int CPacketHandler::OnProcess()
  public void CPacketHandler(const class CPacketHandler &)
  public void CPacketHandler::CPacketHandler()
  public int CPacketHandler::OnRecvHook(int, char *)
  public void CPacketHandler::OnRecvOverflow(int)
  public void CPacketHandler::OnRecv(int)
  public void CPacketHandler::OnClose()
  public void CPacketHandler::SetLastError(unsigned long)
  public void CPacketHandler::AddSendBytes(int)
  public void Reset()
  public void CPacketHandler::SetQueue(class CPacketQueue *)
  /* this+0x4 */ class CPacketQueue * m_recvQueue
  public class CPacketHandler & operator=(const class CPacketHandler &)
}

class CPacketLengthExMgr {
    public struct std::pair<enum CPacketLengthExMgr::enumFixedPacketRet,int> CPacketLengthExMgr::IsFixedPacket(const int)
  public int GetReplayFactor(const int)
  private void CPacketLengthExMgr::Add(const int, const int, const int, const int)
  private void CPacketLengthExMgr::InitPacketLenWithClient()
  private void CPacketLengthExMgr::InitPacketLenWithClientSecure()
  private void CPacketLengthExMgr::InitPacketLen()
      /* this+0x0 */ class std::map<int,CPacketLengthExMgr::CData,std::less<int>,std::allocator<std::pair<int const ,CPacketLengthExMgr::CData> > > m_LengthMap

  public void CPacketLengthExMgr(const class CPacketLengthExMgr &)
  public void CPacketLengthExMgr::CPacketLengthExMgr()
  public void CPacketLengthExMgr::~CPacketLengthExMgr()
  public class CPacketLengthExMgr & operator=(const class CPacketLengthExMgr &)
  public void * __vecDelDtor(unsigned int)
}

class CPacketLengthExMgr::CData {
  /* this+0x0 */ const int m_Len
  /* this+0x4 */ const int m_Min
  /* this+0x8 */ const int m_ReplayFactor
  public void CData(const int, const int, const int)
  public void CData(const int, const int)
}

class CPacketQueue {
  public void CPacketQueue::Init(int)
  public void CPacketQueue::Reset()
  public int CPacketQueue::InsertData(int, const char *)
  public int CPacketQueue::RemoveData(int)
  public void CPacketQueue::PeekData(int, char *)
  public int CPacketQueue::GetData(int, char *)
  public int CPacketQueue::GetSize()
  public int CPacketQueue::GetFreeSize()
  public int CPacketQueue::resetANDinsert(const int, const char *)
  public void CPacketQueue(int)
  public void CPacketQueue::CPacketQueue()
  public void CPacketQueue::~CPacketQueue()
  /* this+0x0 */ char * m_buf
  /* this+0x4 */ int m_capacity
  /* this+0x8 */ int m_front
  /* this+0xc */ int m_rear
  /* this+0x10 */ int m_size
  /* this+0x14 */ struct _RTL_CRITICAL_SECTION m_cs

  public void * __vecDelDtor(unsigned int)
}

class CParty {
    *
  public void CParty(class CParty &)
  public void CParty::CParty()
  public void CParty::~CParty()
  public int CParty::IsDupeMember(unsigned long)
  public void CParty::Init()
  public int CParty::GetMemberCount()
  public int CParty::AddMember(struct CHARINFO_IN_GROUP *, int)
  public int CParty::DeleteMember(unsigned long, unsigned long, unsigned char)
  public int CParty::UpdateState(unsigned long, unsigned char)
  public void CParty::SetGroupID(unsigned long)
  public unsigned long CParty::GetGroupID()
  public void CParty::SetGroupName(const char *)
  public char * CParty::GetGroupName()
  public void CParty::SetPartyRole(unsigned char, unsigned char)
  public unsigned long CParty::SearchGID(char *)
  public unsigned long SearchGID(unsigned long)
  public unsigned long CParty::GetMaster()
  public struct CHARINFO_IN_GROUP * GetGroupInfo(unsigned long)
  public int CParty::GetConnectedMember()
  public void CParty::NotifyGroupMembers(unsigned long)
  public void UpdateMapName(unsigned long, char *)
  public void CParty::UpdateMapName2(unsigned long, const char *)
  public void CParty::OnChat(unsigned long, int, char *)
  public unsigned long CParty::GetGroupEXPOption()
  public void CParty::UpdateExpOption(const unsigned long, const bool)
  public int CParty::IsExpSharable()
  public void CParty::NotifyUpdateExpOption(unsigned long, unsigned long)
  public void CParty::CheckExpSharableInfo()
  public void CParty::ChangeGroupInfo(struct GROUP_INFO)
  public void CParty::OnChangeGroupMaster(unsigned long, unsigned long)
  public void Send(const int, struct PACKET_IZ_PARTY_BROADCAST_VAR *)
  public void CParty::Send(const int, const int, struct PACKET_IZ_PARTY_BROADCAST_VAR *)
  public void Send(const int, struct PACKET_IZ_PARTY_BROADCAST *)
  public void CParty::Send(const int, const int, struct PACKET_IZ_PARTY_BROADCAST *)
  private void CParty::DeleteAll()
  private void CParty::BroadCast(int, char *)
  /* this+0x4 */ unsigned long m_groupID
  /* this+0x8 */ struct GROUP_INFO m_groupInfo

  /* this+0xe */ char[0x18] m_groupName
  private struct CHARINFO_IN_GROUP * CParty::SearchMember(unsigned long)
      /* this+0x28 */ class std::vector<CHARINFO_IN_GROUP *,std::allocator<CHARINFO_IN_GROUP *> > m_users

  /* this+0x38 */ class CMemoryMgr<CHARINFO_IN_GROUP> m_userMPool

  public class CParty & operator=(class CParty &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CPartyDB {
  CODBC, offset = 0x0

      public unsigned long CPartyDB::MakeGroup(unsigned long, unsigned long, const char *, unsigned char, unsigned char)
  public unsigned long CPartyDB::MakeGroup(unsigned long, unsigned long, const char *)
  public void CPartyDB::GetGroupName(unsigned long, char *)
  public void CPartyDB::GetGroupInfo(unsigned long, char *, unsigned char &, unsigned char &)
  public int CPartyDB::DeleteGroup(char *)
  public int CPartyDB::DeleteGroup(unsigned long)
  public unsigned long CPartyDB::GetGroupID(const char *)
  public int CPartyDB::GetGroupMembers(const unsigned long, struct DBGROUPINFO * const, const int)
  public int CPartyDB::InsertMember(unsigned long, unsigned long, unsigned long, char *, int)
  public int CPartyDB::DeleteMember(unsigned long)
  public int CPartyDB::DeleteMemberByName(char *)
  public unsigned long CPartyDB::SearchMember(unsigned long)
  public void CPartyDB::UpdateMemberRole(unsigned long, unsigned long, int, unsigned long, int)
  public static bool CPartyDB::CreateInstance()
  public static void CPartyDB::DestroyInstance()
  public void CPartyDB(const class CPartyDB &)
  private void CPartyDB::CPartyDB()
  private void CPartyDB::~CPartyDB()
  /* [0x0003:0x0000388c] */ static  class CPartyDB * m_cpSelf
  public class CPartyDB & operator=(const class CPartyDB &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct CPartyDB::PARTY_RULE_VALUE {
  /* this+0x0 */ struct CPartyDB::RULE_VALUE RuleValue

  /* this+0x0 */ int DBValue
}

struct CPartyDB::RULE_VALUE {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned int ItemPickupRule
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned int ItemDivisionRule
  /* this(bf)+0x0:0x2 len(0x2) */ unsigned int expOption
}

class CPartyMgr {
    *
  private bool CPartyMgr::DeleteMember(const unsigned long, const struct USER_STRING_MAP_DATA *, const unsigned long)
  public void Send(const unsigned long, const int, struct PACKET_IZ_PARTY_BROADCAST_VAR *)
  public void CPartyMgr::Send(const int, const unsigned long, const int, struct PACKET_IZ_PARTY_BROADCAST_VAR *)
  public void Send(const unsigned long, const int, struct PACKET_IZ_PARTY_BROADCAST *)
  public void CPartyMgr::Send(const int, const unsigned long, const int, struct PACKET_IZ_PARTY_BROADCAST *)
  public void CPartyMgr::MapMove2(const unsigned long, const unsigned long, const char *)
  public class CParty * CPartyMgr::SearchGroup(unsigned long)
  public class CParty * CPartyMgr::SearchGroup(const char *)
  public void CPartyMgr(class CPartyMgr &)
  public void CPartyMgr::CPartyMgr()
  public void CPartyMgr::~CPartyMgr()
  public void CPartyMgr::Init(int, const char *, const char *)
  public const int GetMaxMemberNum()
    public unsigned long CPartyMgr::MakeGroup(unsigned long, unsigned long, unsigned long &, char *)
  public unsigned long CPartyMgr::MakeGroup2(unsigned long, unsigned long, unsigned long &, char *, unsigned char, unsigned char)
  public void CPartyMgr::GetGroupName(unsigned long, char *)
  public void GetGroupInfo(unsigned long, char *, unsigned char &, unsigned char &)
  public int CPartyMgr::DeleteGroup(unsigned long)
  public int CPartyMgr::InsertNewMember(unsigned long, unsigned long)
  public unsigned long CPartyMgr::SearchMember(unsigned long)
  public unsigned long CPartyMgr::GetGroupOwner(unsigned long)
  public void CPartyMgr::LogonNewUser(unsigned long, unsigned long)
  public void CPartyMgr::LoadGroupInfoFromDB(unsigned long, unsigned long)
  public void CPartyMgr::UserExit(unsigned long, unsigned long)
  public int CPartyMgr::FreeGroup(unsigned long)
  public void CPartyMgr::NotifyGroupMembers(unsigned long, unsigned long)
  public bool CPartyMgr::LeaveGroup(const unsigned long, const unsigned long)
  public void CPartyMgr::ExpelGroupMember(unsigned long, unsigned long, char *)
  public void ServerMoveUser(unsigned long, unsigned long, int)
  public int CPartyMgr::GetGroupSize()
  public unsigned long GetFreeSize()
    public enum CPartyMgr::enumResultINM CPartyMgr::InsertNewMemberV2(class CParty * const, const struct USER_STRING_MAP_DATA *)
  /* this+0x4 */ class std::map<unsigned long,CParty *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CParty *> > > m_group

  /* this+0x14 */ class CMemoryMgr<CParty> m_groupMPool

  /* this+0x38 */ int m_MaxPartyMemberNum
  public class CPartyMgr & operator=(class CPartyMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CProcessThread {
  N2Thread, offset = 0x0

  /* this+0x30 */ bool m_bOK
  /* this+0x31 */ bool m_bReqExit
  /* [0x0003:0x00003958] */ static  class CProcessThread * m_cpSelf
  private unsigned int CProcessThread::ThreadFunction()
  private void CProcessThread::PostThreadQuitMessage()
  public bool CProcessThread::Start()
  public void CProcessThread::Stop()
  public const bool isOK()
  public static bool CProcessThread::CreateInstance()
  public static void CProcessThread::DestoryInstance()
  public static class CProcessThread * CProcessThread::GetObj()
  public void CProcessThread(const class CProcessThread &)
  private void CProcessThread::CProcessThread()
  private void CProcessThread::~CProcessThread()
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CProgrammerSupportLog {
  NFileLog, offset = 0x0

  public bool isOK()
  public static bool CProgrammerSupportLog::CreateInstance()
  public static void CProgrammerSupportLog::DestroyInstance()
  private void CProgrammerSupportLog(class CProgrammerSupportLog &)
  private void CProgrammerSupportLog::CProgrammerSupportLog()
  private void CProgrammerSupportLog::~CProgrammerSupportLog()
  private class CProgrammerSupportLog & operator=(class CProgrammerSupportLog &)
  /* [0x0003:0x00003b88] */ static  class CProgrammerSupportLog * m_cpSelf
  /* this+0x828 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CRecycleObject {
    *
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetClassNameA()
  public void RecycleInit()
  public void CRecycleObject(const class CRecycleObject &)
  public void CRecycleObject()
  public void ~CRecycleObject()
  protected void RegisterClassName(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &)
  /* this+0x4 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_className

  public class CRecycleObject & operator=(const class CRecycleObject &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CRecycleObjectMemoryPoolInter {
    *
  public class CRecycleObject * Alloc()
  public void Free(class CRecycleObject *)
  public void CRecycleObjectMemoryPoolInter(const class CRecycleObjectMemoryPoolInter &)
  public void CRecycleObjectMemoryPoolInter()
  public void ~CRecycleObjectMemoryPoolInter()
  public class CRecycleObjectMemoryPoolInter & operator=(const class CRecycleObjectMemoryPoolInter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CRecycleObjectMgrInter {
    *
  public void Free(class CRecycleObject *)
  public void CRecycleObjectMgrInter(const class CRecycleObjectMgrInter &)
  public void CRecycleObjectMgrInter()
  public void ~CRecycleObjectMgrInter()
  public class CRecycleObjectMgrInter & operator=(const class CRecycleObjectMgrInter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CServerExpInfoMgr {
    public bool CServerExpInfoMgr::Init()
  public bool CServerExpInfoMgr::SetExpIAuthenticate(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool CServerExpInfoMgr::SetServerEXPInfo(const int, const int, const int)
  public void CServerExpInfoMgr::CreateServerEXPFile(const int, const int, const int)
  public bool CServerExpInfoMgr::SetRestrictEXPInfo(const int, const int, const int, const int, const int, const int)
  public int GetExp()
  public int GetDeath()
  public int GetDrop()
  public bool CServerExpInfoMgr::IsAuthenticate(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool isOK()
  public static bool CServerExpInfoMgr::CreateInstance()
  public static void CServerExpInfoMgr::DestroyInstance()
  private bool CServerExpInfoMgr::LoadTbl()
  private void CServerExpInfoMgr(class CServerExpInfoMgr &)
  private void CServerExpInfoMgr::CServerExpInfoMgr()
  private void CServerExpInfoMgr::~CServerExpInfoMgr()
  private class CServerExpInfoMgr & operator=(class CServerExpInfoMgr &)
    /* this+0x0 */ class CServerExpInfoMgr::lcFactor m_Exp

  /* this+0x10 */ class CServerExpInfoMgr::lcFactor m_Death

  /* this+0x20 */ class CServerExpInfoMgr::lcFactor m_Drop

  /* this+0x30 */ bool m_bOK
  /* this+0x34 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strID

  /* this+0x50 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strPW

  /* [0x0003:0x000038ac] */ static  class CServerExpInfoMgr * m_cpSelf
  private void * __vecDelDtor(unsigned int)
}

class CServerExpInfoMgr::lcFactor {
    *
  /* this+0x4 */ int m_Max
  /* this+0x8 */ int m_Min
  /* this+0xc */ int m_Value
  public void lcFactor(const class CServerExpInfoMgr::lcFactor &)
  public void lcFactor()
  public void CServerExpInfoMgr::lcFactor::~lcFactor()
  public int operator()()
  public class CServerExpInfoMgr::lcFactor & operator=(const class CServerExpInfoMgr::lcFactor &)
  public void operator=(const int)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CServerInfo {
  CODBC, offset = 0x0

  public int CServerInfo::IsExistColumn()
  public int CServerInfo::Init(const char *, const char *, int, const int)
  public int CServerInfo::GetSvrInfoFromDB(const int, const int)
  public int CServerInfo::GetServerPort(int)
  public void SetServerPort(int, int)
  public unsigned long CServerInfo::GetServerIPAddr(int)
  public int GetLocalPort()
  public int CServerInfo::GetCharacterServerInfoLength()
  public char * GetCharacterServerInfo()
  public int IsValidServer(unsigned long, int)
  public const char * GetSVRName(const int)
  public int GetDestinationSID(int)
  public int CServerInfo::GetDestinationSID(const int, const int)
  public int GetLocalServerID()
  public int GetServerID(unsigned long, int)
  public int GetServerIDPrivate(unsigned long, int)
  public void CServerInfo::GetZServerIDList(int, int &, char *, const int)
  public int GetInterServerID()
  public void CServerInfo::GetZoneServerIP(class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > &)
  public void CServerInfo::GetZoneServerIPPrivate(class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > &)
  public unsigned long CServerInfo::GetLocalIPAddr(int)
  public bool CServerInfo::isSameServerSet(int, int)
  public unsigned long CServerInfo::GetServerPrivateIPAddr(int)
  public int CServerInfo::GetServerPrivatePort(int)
  public void Set(const int, const bool, const bool)
  public bool IsActive(const int)
  public const unsigned long GetLocalIP()
  public void SetLocalServerIpAddr(const unsigned long)
  public void CServerInfo(const class CServerInfo &)
  public void CServerInfo::CServerInfo()
  public void CServerInfo::~CServerInfo()
  /* this+0x12 */ int m_localServerType
  /* this+0x16 */ int m_characterServerCount
  /* this+0x1a */ class std::map<int,_SERVERINFO *,std::less<int>,std::allocator<std::pair<int const ,_SERVERINFO *> > > m_serverInfoMap

  /* this+0x2a */ struct _SERVERINFO m_localServerInfo

  /* this+0x98 */ class std::list<int,std::allocator<int> > m_MyServerSet

  /* this+0xa4 */ char[0x400] m_characterServerInfo
  private void CServerInfo::SetCharacterServerInfo()
  private void CharacterServerRegister(class CAcceptor *)
  public class CServerInfo & operator=(const class CServerInfo &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CStatisticsMgr {
    *
  /* [0x0003:0x000038dc] */ static  class CStatisticsMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class CDateTime m_LogOutputEvnetDT

  /* this+0xc */ int m_ReportPerMinute
  private bool CStatisticsMgr::Create()
  private void CStatisticsMgr::Destroy()
  public bool isOK()
  public void CStatisticsMgr::Process()
  public static bool CStatisticsMgr::CreateInstance()
  public static void CStatisticsMgr::DestroyInstance()
  public void CStatisticsMgr(const class CStatisticsMgr &)
  private void CStatisticsMgr::CStatisticsMgr()
  private void CStatisticsMgr::~CStatisticsMgr()
  public class CStatisticsMgr & operator=(const class CStatisticsMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CTestButton {
  /* this+0x0 */ struct HWND__ * m_hWnd
  /* this+0x4 */ struct HMENU__ * const m_hMenu
  /* this+0x8 */ int m_X
  /* this+0xc */ int m_Y
  /* this+0x10 */ int m_Width
  /* this+0x14 */ int m_Height
  public void CTestButton::OnCreate(struct HWND__ *, struct HINSTANCE__ *, const int, const int, const int, const int, const char *)
  public void EnableWindow(const bool)
  public bool IsWindowEnabled()
  public int GetX()
  public int GetWidth()
  public int GetY()
  public void CTestButton::CTestButton(struct HMENU__ * const)
  public void ~CTestButton()
  public void * __vecDelDtor(unsigned int)
}

class CUserLogDB {
  CODBC, offset = 0x0

  public void CUserLogDB(const class CUserLogDB &)
  public void CUserLogDB::CUserLogDB()
  public void CUserLogDB::~CUserLogDB()
  public int InsertZoneUserLog(int, int, int)
  public int InsertInterUserLog(int, int)
  public class CUserLogDB & operator=(const class CUserLogDB &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CUserLogMgr {
    *
  public void OnProcess()
  public void Init()
  public void CUserLogMgr(const class CUserLogMgr &)
  public void CUserLogMgr::CUserLogMgr()
  public void CUserLogMgr::~CUserLogMgr()
  /* this+0x4 */ unsigned long m_LogIdleTime
  public class CUserLogMgr & operator=(const class CUserLogMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CUserMgr {
    *
      public void CUserMgr(class CUserMgr &)
  public void CUserMgr::CUserMgr()
  public void CUserMgr::~CUserMgr()
  public void CUserMgr::Init(int)
  public unsigned long SearchUserServerID(const unsigned long, const unsigned long)
  public unsigned long CUserMgr::SearchUserServerID(unsigned long)
  public unsigned long CUserMgr::SearchUserServerID(const char *, unsigned long &)
  public struct USER_STRING_MAP_DATA * CUserMgr::AllocUser()
  public void CUserMgr::FreeUser(struct USER_STRING_MAP_DATA *)
  public int CUserMgr::GetUserCount()
  public int CUserMgr::AddUser(unsigned long, struct USER_STRING_MAP_DATA *)
  public void CUserMgr::DeleteUser(unsigned long, const char *)
  public void CUserMgr::MoveServerUser(unsigned long, unsigned long, unsigned long, const char *)
  public void DeleteUsers(unsigned long)
  public void CUserMgr::SendMsg(const int, const unsigned long, const int, const char *)
  public void CUserMgr::SendMsg(unsigned long, short, char *)
  public struct USER_STRING_MAP_DATA * CUserMgr::SearchUser(unsigned long, unsigned long)
  public struct USER_STRING_MAP_DATA * CUserMgr::SearchUserByAccount(char *, unsigned long)
  public struct USER_STRING_MAP_DATA * CUserMgr::SearchUserByName(const char *, unsigned long)
  public unsigned long GetUserGRID(unsigned long)
  public unsigned long CUserMgr::GetFreeSize()
  public void CUserMgr::AddFriend(unsigned long, unsigned long, unsigned long, unsigned long)
  public void CUserMgr::DeleteFriend(unsigned long, unsigned long, unsigned long)
  public void Process()
  private void CUserMgr::SendFriendList(int, unsigned long, struct STRUCT_FRIEND *, int)
  private void CUserMgr::SendFriendState(int, unsigned long, unsigned long, unsigned long, bool)
  private void CUserMgr::SendDeleteFriend(int, unsigned long, unsigned long, unsigned long)
  private void CUserMgr::SendAddFriend(int, unsigned long, short, unsigned long, unsigned long, char *)
  private int CUserMgr::AddFriendList(unsigned long, unsigned long, char *, struct STRUCT_FRIEND *, int &)
  private void CUserMgr::DeleteFriendList(unsigned long, unsigned long, struct STRUCT_FRIEND *, int &)
  /* this+0x4 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,USER_STRING_MAP_DATA *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,USER_STRING_MAP_DATA *> > > m_userStringMap

  /* this+0x14 */ class std::map<unsigned long,USER_STRING_MAP_DATA *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,USER_STRING_MAP_DATA *> > > m_userAIDMap

  /* this+0x24 */ class CMemoryMgr<USER_STRING_MAP_DATA> m_userData

  /* this+0x48 */ class CMemoryMgr<CUserMgr::SERVER_MOVE_USER> m_ServerMoveUserPool

  /* this+0x6c */ class std::map<unsigned long,CUserMgr::SERVER_MOVE_USER *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CUserMgr::SERVER_MOVE_USER *> > > m_ServerMoveUser

  public class CUserMgr & operator=(class CUserMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CUserMgr::SERVER_MOVE_USER {
  /* this+0x0 */ unsigned long DisConnectTime
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GID
  /* this+0xc */ unsigned long ServerID
  /* this+0x10 */ char[0x18] Name
}

class CVTBLErrorLog {
  NFileLog, offset = 0x0

  public bool isOK()
  public static bool CreateInstance()
  public static void DestroyInstance()
  private void CVTBLErrorLog(const class CVTBLErrorLog &)
  private void CVTBLErrorLog()
  private class CVTBLErrorLog & operator=(const class CVTBLErrorLog &)
  private void ~CVTBLErrorLog()
  /* [0x0000:0x00000000] */ static  class CVTBLErrorLog * m_cpSelf
  /* this+0x828 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CZSPacketHandler {
  CPacketHandler, offset = 0x0

  public unsigned int GetLastPacketRecvTM()
  public void SetLastPacketRecvTM(unsigned int)
  public void CZSPacketHandler::OnReqHostileGuild(int)
  public void CZSPacketHandler::OnAllyGuild(int)
  public void CZSPacketHandler::OnMakeGuild(int)
  public void CZSPacketHandler::OnReqJoinGuild(int)
  public void CZSPacketHandler::OnActorInit(int)
  public void CZSPacketHandler(const class CZSPacketHandler &)
  public void CZSPacketHandler::CZSPacketHandler()
  public void CZSPacketHandler::~CZSPacketHandler()
  public void CZSPacketHandler::OnRecvOverflow(int)
  public void CZSPacketHandler::OnRecv(int)
  public void CZSPacketHandler::OnClose()
  public int CZSPacketHandler::OnProcess()
  public void CZSPacketHandler::SetMyOwner(class CZServer *)
  public void CZSPacketHandler::AddSendBytes(int)
  private int CZSPacketHandler::DispatchPacket(short, int)
  private void CZSPacketHandler::OnZI_MEMORIALDUNGEON_SUBSCRIPTION2(const int)
  private void OnZI_PING_LIVE(const struct PACKET_ZI_PING_LIVE &)
  private void CZSPacketHandler::OnZI_STATEINFO(const struct PACKET_ZI_STATEINFO &)
  private void OnZI_MEMORIALDUNGEON_DESTROY(const struct PACKET_ZI_MEMORIALDUNGEON_DESTROY &)
  private void CZSPacketHandler::OnZI_MEMORIALDUNGEON_SUBSCRIPTION(const struct PACKET_ZI_MEMORIALDUNGEON_SUBSCRIPTION &)
  private void CZSPacketHandler::OnZI_INSTANTMAP_CREATE_RES(const struct PACKET_ZI_INSTANTMAP_CREATE_RES &)
  private void CZSPacketHandler::OnZI_INSTANTMAP_ERROR(const struct PACKET_ZI_INSTANTMAP_ERROR &)
  private void CZSPacketHandler::OnZI_PING(const struct PACKET_ZI_PING &)
  private void CZSPacketHandler::OnZI_INSTANTMAP_ALLOW(const struct PACKET_ZI_INSTANTMAP_ALLOW &)
  private void CZSPacketHandler::OnXX_DISCONNECT(const struct PACKET_XX_DISCONNECT &)
  private void CZSPacketHandler::OnXX_CONNECT(const struct PACKET_XX_CONNECT &)
  private void CZSPacketHandler::OnZI_PARTY_JOIN_REQ(const struct PACKET_ZI_PARTY_JOIN_REQ &)
  private void CZSPacketHandler::OnZI_PARTY_JOIN_REQ_ACK(const struct PACKET_ZI_PARTY_JOIN_REQ_ACK &)
  private void CZSPacketHandler::OnZI_MEMORIALDUNGEON_COMMAND(const struct PACKET_ZI_MEMORIALDUNGEON_COMMAND &)
  private void CZSPacketHandler::OnZI_MEMORIALDUNGEON_VISA(const struct PACKET_ZI_MEMORIALDUNGEON_VISA &)
  private void OnZI_REQ_LEAVE_GROUP(const struct PACKET_ZI_REQ_LEAVE_GROUP &)
  private void CZSPacketHandler::OnZI_MEMORIALDUNGEON_OPENSTATE(const struct PACKET_ZI_MEMORIALDUNGEON_OPENSTATE &)
  private void CZSPacketHandler::OnZI_BROADCASTING_SPECIAL_ITEM_OBTAIN(const class std::vector<unsigned char,std::allocator<unsigned char> > &)
  private void CZSPacketHandler::OnBroadcastPartyBookingPacket(const short, const short)
  private void OnZI_GPK_DYNCODE_RELOAD(const struct PACKET_ZI_GPK_DYNCODE_RELOAD &)
  private void OnZI_INFO_ENTRY_QUEUE_APPLY(const struct PACKET_ZI_INFO_ENTRY_QUEUE_APPLY *)
  private void OnZI_REQ_ENTRY_QUEUE_APPLY(const struct PACKET_ZI_REQ_ENTRY_QUEUE_APPLY &)
  private void OnZI_RESULT_ENTRY_QUEUE_APPLY(const struct PACKET_ZI_RESULT_ENTRY_QUEUE_APPLY &)
  private void OnZI_REQ_ENTRY_QUEUE_CANCEL(const struct PACKET_ZI_REQ_ENTRY_QUEUE_CANCEL &)
  private void OnZI_RESULT_ENTRY_QUEUE_CANCEL(const struct PACKET_ZI_RESULT_ENTRY_QUEUE_CANCEL &)
  private void OnZI_ENTRY_QUEUE_ADMISSION(const struct PACKET_ZI_ENTRY_QUEUE_ADMISSION &)
  private void OnZI_ENTRY_QUEUE_ADMISSION_ACCEPT(const struct PACKET_ZI_ENTRY_QUEUE_ADMISSION_ACCEPT &)
  private void OnZI_RESULT_ENTRY_QUEUE_ADMISSION_ACCEPT(const struct PACKET_ZI_RESULT_ENTRY_QUEUE_ADMISSION_ACCEPT &)
  private void OnZI_ENTRY_QUEUE_ADMISSION_REFUSE(const struct PACKET_ZI_ENTRY_QUEUE_ADMISSION_REFUSE &)
  private void OnZI_RESULT_ENTRY_QUEUE_ADMISSION_REFUSE(const struct PACKET_ZI_RESULT_ENTRY_QUEUE_ADMISSION_REFUSE &)
  private void OnZI_LOBBY_ADMISSION(const struct PACKET_ZI_LOBBY_ADMISSION &)
  private void OnZI_LOBBY_ADMISSION_V2(const struct PACKET_ZI_LOBBY_ADMISSION_V2 &)
  private void OnZI_LOBBY_ADMISSION_ACCEPT(const struct PACKET_ZI_LOBBY_ADMISSION_ACCEPT &)
  private void OnZI_RESULT_LOBBY_ADMISSION_ACCEPT(const struct PACKET_ZI_RESULT_LOBBY_ADMISSION_ACCEPT &)
  private void OnZI_LOBBY_ADMISSION_REFUSE(const struct PACKET_ZI_LOBBY_ADMISSION_REFUSE &)
  private void OnZI_RESULT_LOBBY_ADMISSION_REFUSE(const struct PACKET_ZI_RESULT_LOBBY_ADMISSION_REFUSE &)
  private void OnZI_ENTRY_QUEUE_MOVE_ROOM(const struct PACKET_ZI_ENTRY_QUEUE_MOVE_ROOM &)
  private void OnZI_LOBBY_MOVE_ROOM(const struct PACKET_ZI_LOBBY_MOVE_ROOM &)
  private void OnZI_ENTRY_QUEUE_NAME(const struct PACKET_ZI_ENTRY_QUEUE_NAME *)
  private void OnZI_ENTRY_QUEUE_DELETE_GID(const struct PACKET_ZI_ENTRY_QUEUE_DELETE_GID &)
  private void OnZI_ENTRY_QUEUE_RANKING(const struct PACKET_ZI_ENTRY_QUEUE_RANKING &)
  private void OnZI_NOTIFY_ENTRY_QUEUE_RANKING(const struct PACKET_ZI_NOTIFY_ENTRY_QUEUE_RANKING &)
  private void OnZI_JOB_CHANGE(const struct PACKET_ZI_JOB_CHANGE &)
  private void CZSPacketHandler::OnServerEntry(int)
  private void CZSPacketHandler::OnBroadCast(int)
  private void CZSPacketHandler::OnWhisper(const struct PACKET_ZI_WHISPER *)
  private void OnOTHER_ZONE_PC_SEND_MSG(const struct PACKET_ZI_OTHER_ZONE_PC_SEND_MSG &)
  private void CZSPacketHandler::OnWhisperAck(int)
  private void CZSPacketHandler::OnReqUserCount(int)
  private void CZSPacketHandler::OnVersion(int)
  private void CZSPacketHandler::OnLogon(int)
  private void CZSPacketHandler::OnExit(int)
  private void CZSPacketHandler::OnMapMove(int)
  private void CZSPacketHandler::OnServerMove(int)
  private void CZSPacketHandler::OnMakeGroup(int)
  private void CZSPacketHandler::OnMakeGroup2(int)
  private void CZSPacketHandler::OnReqJoinGroup(int)
  private void CZSPacketHandler::OnJoinGroup(int)
  private void OnZI_REQ_JOIN_GUILD2(const struct PACKET_ZI_REQ_JOIN_GUILD2 &)
  private void CZSPacketHandler::OnExpelGroupMember(int)
  private void CZSPacketHandler::OnChatParty(int)
  private void CZSPacketHandler::OnDisconnectAllPC(int)
  private void CZSPacketHandler::OnServerState(int)
  private void CZSPacketHandler::OnServerStateChanneling(const int)
  private void CZSPacketHandler::OnChangeExpOption(int)
  private void CZSPacketHandler::OnChangeExpOption2(int)
  private void CZSPacketHandler::OnLevelUp(int)
  private void OnGuildPreload(int, unsigned short, char *)
  private void CZSPacketHandler::OnChangeOwnerAgit(int)
  private void CZSPacketHandler::OnDeleteRelatedGuild(int)
  private void CZSPacketHandler::OnSpecialMove(int)
  private void CZSPacketHandler::OnSpecialMove_SSO(const int)
  private void CZSPacketHandler::OnSpecialGIDMove(int)
  private void CZSPacketHandler::OnReqDisorganizeGuild(int)
  private void CZSPacketHandler::OnDivorce(int)
  private void CZSPacketHandler::OnDeleteFriend(int)
  private void CZSPacketHandler::OnAckReqAddFriends(int)
  private void CZSPacketHandler::OnUpDateMakeRank(int)
  private void CZSPacketHandler::OnMailGetList(int)
  private void CZSPacketHandler::OnMailOpen(int)
  private void CZSPacketHandler::OnMailDelete(int)
  private void CZSPacketHandler::OnMailGetItem(int)
  private void CZSPacketHandler::OnMailSend(int)
  private void CZSPacketHandler::OnMailReturn(int)
  private void CZSPacketHandler::OnEpisodeVersion(int)
  private void CZSPacketHandler::OnAckProcessTime(int)
  private void CZSPacketHandler::OnServerStateHanGame(int)
  private void CZSPacketHandler::OnGroupInfoChangeV2(int)
  private void CZSPacketHandler::OnChangeGroupMaster(int)
  private void CZSPacketHandler::OnSeekParty(int)
  private void CZSPacketHandler::OnSeekPartyMember(int)
  /* this+0x8 */ class CZServer * m_zServer
  /* this+0xc */ unsigned int m_LastPacketRecvTM
  public class CZSPacketHandler & operator=(const class CZSPacketHandler &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CZSPacketHandler::DispatchPacket::__l49::TEMPHEADER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
}

struct CZSPacketHandler::DispatchPacket::__l50::TEMPHEADER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
}

struct CZSPacketHandler::DispatchPacket::__l51::TEMPHEADER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
}

class CZSVRStatisticLog {
  N2DBLog, offset = 0x0

  /* this+0x8 */ const long m_Date
  /* this+0xc */ const int m_ZSID
  /* this+0x10 */ const int m_PlayerNum
  /* this+0x14 */ const int m_NPCNum
  /* this+0x18 */ const int m_MemoryKBytes
  /* this+0x1c */ const int m_TotalServiceMapNum
  /* this+0x20 */ const int m_ServiceInstantMapNum
  private bool CZSVRStatisticLog::Run(class N2ODBCCtrl &)
  public void CZSVRStatisticLog(const class CZSVRStatisticLog &)
  public void CZSVRStatisticLog::CZSVRStatisticLog(const long, const int, const int, const int, const int, const int, const int)
  public void CZSVRStatisticLog::~CZSVRStatisticLog()
  public void * __vecDelDtor(unsigned int)
}

class CZSVRStatisticLogMgr {
    *
  /* [0x0003:0x000038e0] */ static  class CZSVRStatisticLogMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x5 */ bool m_bOutputLog
  public bool isOK()
  public void CZSVRStatisticLogMgr::Add(const long, const int, const int, const int, const int, const int, const int)
  public static bool CZSVRStatisticLogMgr::CreateInstance()
  public static void CZSVRStatisticLogMgr::DestroyInstance()
  public void CZSVRStatisticLogMgr(const class CZSVRStatisticLogMgr &)
  private void CZSVRStatisticLogMgr::CZSVRStatisticLogMgr()
  private void CZSVRStatisticLogMgr::~CZSVRStatisticLogMgr()
  public class CZSVRStatisticLogMgr & operator=(const class CZSVRStatisticLogMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CZServer {
  CClient, offset = 0x0

  public void CZServer(const class CZServer &)
  public void CZServer::CZServer()
  public void CZServer::~CZServer()
  public void CZServer::Cleanup()
  public unsigned int GetLastPacketRecvTM()
  public unsigned int GetLastPacketSendTM()
  public void CZServer::Init(const int, class CAsyncStream *)
  public void CZServer::SetZServerID(const int, const unsigned long)
  public void CZServer::AddErrorCnt(const char *, const int, const unsigned long, const unsigned long)
  public void CZServer::Send(int, const char *)
  /* this+0x28 */ class CZSPacketHandler m_packetHandler

  public int CZServer::OnProcess()
  public int CZServer::GetType()
  public unsigned long GetAccountID()
  public class CAsyncStream * GetAsyncStream()
  public int CZServer::GetZServerID()
  public unsigned long GetIP()
  public int GetHsvrID()
  /* this+0x38 */ int m_ZServerID
  /* this+0x3c */ unsigned long m_IP
  /* this+0x40 */ int m_first
  /* this+0x44 */ unsigned long m_firstTick
  /* this+0x48 */ class std::list<unsigned long,std::allocator<unsigned long> > m_SendListGDID

  /* this+0x54 */ int m_bSendInfo
  /* this+0x58 */ int m_HsvrID
  /* this+0x5c */ class N3Scheduler<CZServer> m_Scheduler

  /* this+0x70 */ unsigned int m_LastPacketSendTM
      /* this+0x74 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > m_ServiceMap

  /* this+0x84 */ int m_TotalPlayerNum
  /* this+0x88 */ int m_UsedMemoryKBytes
  /* this+0x8c */ int m_TotalNPCNum
  /* this+0x90 */ int m_InstantMapNum
  /* this+0x94 */ int m_InstantMapBlockCnt
  /* this+0x98 */ unsigned long m_RegisteredMgrFUCnt
  public void CZServer::AddPlayer(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CZServer::RemovePlayer(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public const int GetServiceMapNum()
  public const int GetPlayerNum()
  public const int GetNPCNum()
  public const int GetUsedMemoryKBytes()
  public const int GetInstantMapNum()
  public const unsigned long GetRegisteredMgrFUCnt()
  public const bool isInstantMapAllow()
  public const int GetInstantMapBlockCnt()
  public void CZServer::AddInstantMap(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void CZServer::RemoveInstantMap(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void CZServer::OnMgrRegistered()
  public void CZServer::OutputZSVRStatisticLog(const long)
  public void CZServer::OutputMAPStatisticLog(const long)
  public class CZServer & operator=(const class CZServer &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class CZServerMgr {
    *
  public void CZServerMgr(class CZServerMgr &)
  public void CZServerMgr::CZServerMgr()
  public void CZServerMgr::~CZServerMgr()
  public void CZServerMgr::Init(int)
  public void CZServerMgr::SendMsgToZServer(int, short, const char *)
  public void CZServerMgr::SendMsgToZServer(const int, const int, const int, const char *)
  public void CZServerMgr::BroadCast(const int, const int, const char *)
  public void CZServerMgr::BroadCast(short, const char *)
  public void CZServerMgr::AddServer(const int, class CZServer *, const unsigned long)
  public int CZServerMgr::IsConnectedServer(int)
  public class CZServer * CZServerMgr::AllocServer()
  public class CAsyncStream * CZServerMgr::FindServer(int)
  public int GetVerMessage()
  public void SetVerMessage()
  public int GetEpisodeMessage()
  public void SetEpisodeMessage()
  public unsigned long CZServerMgr::GetZoneNumber()
  public void OnPaintZoneServerInfo(struct HDC__ *, int &)
  public void CZServerMgr::AddInstantMapZSVR(const int, const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int)
  public void CZServerMgr::RemoveInstantMapZSVR(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void OutputZSvrInfo(struct HDC__ * const &, int &, int &)
  public int CZServerMgr::SelectInstantMapTargetZSVR(const int, const int)
  public void CZServerMgr::OutputZSVRStatisticLog(const long)
  public void CZServerMgr::OutputMAPStatisticLog(const long)
  public void AddPlayer(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  /* this+0x4 */ class CMemoryMgr<CZServer> m_serverMapMemoryPool

  /* this+0x28 */ struct _RTL_CRITICAL_SECTION m_serverMap_cs

  protected void CZServerMgr::FreeServer(class CZServer *)
  /* this+0x40 */ int m_bVerMessage
  /* this+0x44 */ int m_bEpisodeMessage
  /* this+0x48 */ class std::map<int,CZServer *,std::less<int>,std::allocator<std::pair<int const ,CZServer *> > > m_serverMap

  public class CZServerMgr & operator=(class CZServerMgr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct CZ_PURCHASE_ITEM {
  /* this+0x0 */ short count
  /* this+0x2 */ unsigned short ITID
}

struct CZ_PURCHASE_ITEM_FROMMC {
  /* this+0x0 */ short count
  /* this+0x2 */ short index
}

struct CZ_SELL_ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ short count
}

class CZsvrAcceptHandler {
    *
  public bool isOK()
  public int CZsvrAcceptHandler::Init(bool, int)
  public class CAsyncStream * AllocStream()
  public void FreeStream(class CAsyncStream *)
  public bool CZsvrAcceptHandler::OnConnect(const unsigned int, const int, const unsigned long)
  public static bool CZsvrAcceptHandler::CreateInstance()
  public static void CZsvrAcceptHandler::DestroyInstance()
  private void CZsvrAcceptHandler(class CZsvrAcceptHandler &)
  private void CZsvrAcceptHandler::CZsvrAcceptHandler()
  private void CZsvrAcceptHandler::~CZsvrAcceptHandler()
  private class CZsvrAcceptHandler & operator=(class CZsvrAcceptHandler &)
  /* [0x0003:0x00003890] */ static  class CZsvrAcceptHandler * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class CMemoryMgr<CAsyncStream> m_streamPool

  /* this+0x2c */ class std::set<unsigned long,std::less<unsigned long>,std::allocator<unsigned long> > m_set

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class CZsvrAcceptThread {
  N3Thread, offset = 0x0

  N3Inter, offset = 0x30

  N3Object, offset = 0x34

    public bool isOK()
  public bool CZsvrAcceptThread::Start()
  public void CZsvrAcceptThread::Stop()
  public class NIPAddr CZsvrAcceptThread::GetIPAddr()
  public int GetPort()
  private unsigned int CZsvrAcceptThread::ThreadFunction()
  private void CZsvrAcceptThread::PostThreadQuitMessage()
  public void CZsvrAcceptThread::Receive(const unsigned int, const unsigned int, const unsigned int)
  private bool CZsvrAcceptThread::Create()
  private void CZsvrAcceptThread::Destory()
  public static bool CZsvrAcceptThread::CreateInstance(const unsigned long, const short)
  public static void CZsvrAcceptThread::DestroyInstance()
  private void CZsvrAcceptThread(class CZsvrAcceptThread &)
  private void CZsvrAcceptThread::CZsvrAcceptThread(const unsigned long, const short)
  private void CZsvrAcceptThread::~CZsvrAcceptThread()
  private class CZsvrAcceptThread & operator=(class CZsvrAcceptThread &)
  /* [0x0003:0x00003894] */ static  class CZsvrAcceptThread * m_cpSelf
  /* this+0x3c */ bool m_bOK
  /* this+0x40 */ class N3MessageQueue m_MessageQueue

  /* this+0x7c */ unsigned int m_Socket
  /* this+0x80 */ struct fd_set m_Readfdset

  /* this+0x184 */ const unsigned long m_IPaddr
  /* this+0x188 */ const short m_Port
      /* this+0x18c */ class std::map<unsigned int,CZsvrAcceptThread::lCSession,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CZsvrAcceptThread::lCSession> > > m_SessionMap

  private void * __vecDelDtor(unsigned int)
}

class CZsvrAcceptThread::lCSession {
    *
  public void AddRequestDisconnectCnt()
  public void CZsvrAcceptThread::lCSession::lCSession(const class CZsvrAcceptThread::lCSession &)
  public void lCSession(const unsigned int, const unsigned long)
  public void CZsvrAcceptThread::lCSession::~lCSession()
  /* this+0x4 */ unsigned int m_Socket
  /* this+0x8 */ const unsigned long m_AcceptTM
  /* this+0xc */ unsigned long m_IPaddr
  /* this+0x10 */ bool m_bAuth
  /* this+0x14 */ int m_ZSID
  /* this+0x18 */ int m_RequestDisconnectCnt
  /* this+0x1c */ class std::vector<unsigned char,std::allocator<unsigned char> > m_packetbuffer

  public void * __vecDelDtor(unsigned int)
}

class CZsvrMgr {
  CZServerMgr, offset = 0x0

  N3Inter, offset = 0x58

  N3Object, offset = 0x5c

    public bool isOK()
  public void CZsvrMgr::Process()
  public void CZsvrMgr::DeleteServer(int)
  private void CZsvrMgr::ProcessMSG()
  public void CZsvrMgr::Receive(const unsigned int, const unsigned int, const unsigned int)
  public static bool CZsvrMgr::CreateInstance()
  public static void CZsvrMgr::DestroyInstance()
  private void CZsvrMgr(class CZsvrMgr &)
  private void CZsvrMgr::CZsvrMgr()
  private void CZsvrMgr::~CZsvrMgr()
  private class CZsvrMgr & operator=(class CZsvrMgr &)
  /* [0x0003:0x00003898] */ static  class CZsvrMgr * m_cpSelf
  /* this+0x64 */ bool m_bOK
  /* this+0x68 */ class N3MessageQueue m_MessageQueue

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct CallInfo {
  /* this+0x0 */ struct lua_TValue * base
  /* this+0x4 */ struct lua_TValue * func
  /* this+0x8 */ struct lua_TValue * top
  /* this+0xc */ const unsigned int * savedpc
  /* this+0x10 */ int nresults
  /* this+0x14 */ int tailcalls
}

struct CallS {
  /* this+0x0 */ struct lua_TValue * func
  /* this+0x4 */ int nresults
}

struct CatchGuardRN {
  /* this+0x0 */ struct EHRegistrationNode * pNext
  /* this+0x4 */ void * pFrameHandler
  /* this+0x8 */ unsigned int RandomCookie
  /* this+0xc */ const struct _s_FuncInfo * pFuncInfo
  /* this+0x10 */ struct EHRegistrationNode * pRN
  /* this+0x14 */ int CatchDepth
}

union Closure {
  /* this+0x0 */ struct CClosure c

  /* this+0x0 */ struct LClosure l

}

struct ConsControl {
  /* this+0x0 */ struct expdesc v

  /* this+0x18 */ struct expdesc * t
  /* this+0x1c */ int nh
  /* this+0x20 */ int na
  /* this+0x24 */ int tostore
}

struct DBGROUPINFO {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ unsigned long GRID
  /* this+0xc */ char[0x18] name
  /* this+0x24 */ unsigned long Role
}

struct DBMAILINFO {
  /* this+0x0 */ unsigned long MailID
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GID
  /* this+0xc */ char[0x28] Header
  /* this+0x34 */ int Reading
  /* this+0x38 */ char[0x28] ItemInfo
  /* this+0x60 */ int ItemLen
  /* this+0x64 */ unsigned long Money
  /* this+0x68 */ char[0x18] FromName
  /* this+0x80 */ char[0xc8] Text
  /* this+0x148 */ struct MAILTIME DeleteTime

}

class DES {
  /* this+0x0 */ unsigned char[0x40] key
  /* this+0x40 */ unsigned char[0x30][0x10] K
  protected void DES::doIt(unsigned char *, const unsigned long, int)
  public void DES::DES(const unsigned char *)
  public void ~DES()
  public void DES::setKey(const unsigned char *)
  public void encrypt(unsigned char *, const unsigned long)
  public void DES::decrypt(unsigned char *, const unsigned long)
  public void __dflt_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct DISPLAYCONFIG_2DREGION {
  /* this+0x0 */ unsigned int cx
  /* this+0x4 */ unsigned int cy
}

struct DISPLAYCONFIG_ADAPTER_NAME {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this+0x14 */ wchar_t[0x80] adapterDevicePath
}

struct DISPLAYCONFIG_DEVICE_INFO_HEADER {
  /* this+0x0 */ enum DISPLAYCONFIG_DEVICE_INFO_TYPE type
  /* this+0x4 */ unsigned int size
  /* this+0x8 */ struct _LUID adapterId

  /* this+0x10 */ unsigned int id
}

struct DISPLAYCONFIG_MODE_INFO {
  /* this+0x0 */ enum DISPLAYCONFIG_MODE_INFO_TYPE infoType
  /* this+0x4 */ unsigned int id
  /* this+0x8 */ struct _LUID adapterId

  /* this+0x10 */ struct DISPLAYCONFIG_TARGET_MODE targetMode

  /* this+0x10 */ struct DISPLAYCONFIG_SOURCE_MODE sourceMode

}

struct DISPLAYCONFIG_PATH_INFO {
  /* this+0x0 */ struct DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo

  /* this+0x14 */ struct DISPLAYCONFIG_PATH_TARGET_INFO targetInfo

  /* this+0x44 */ unsigned int flags
}

struct DISPLAYCONFIG_PATH_SOURCE_INFO {
  /* this+0x0 */ struct _LUID adapterId

  /* this+0x8 */ unsigned int id
  /* this+0xc */ unsigned int modeInfoIdx
  /* this+0x10 */ unsigned int statusFlags
}

struct DISPLAYCONFIG_PATH_TARGET_INFO {
  /* this+0x0 */ struct _LUID adapterId

  /* this+0x8 */ unsigned int id
  /* this+0xc */ unsigned int modeInfoIdx
  /* this+0x10 */ enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology
  /* this+0x14 */ enum DISPLAYCONFIG_ROTATION rotation
  /* this+0x18 */ enum DISPLAYCONFIG_SCALING scaling
  /* this+0x1c */ struct DISPLAYCONFIG_RATIONAL refreshRate

  /* this+0x24 */ enum DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering
  /* this+0x28 */ int targetAvailable
  /* this+0x2c */ unsigned int statusFlags
}

struct DISPLAYCONFIG_RATIONAL {
  /* this+0x0 */ unsigned int Numerator
  /* this+0x4 */ unsigned int Denominator
}

struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this(bf)+0x14:0x0 len(0x1) */ unsigned int bootPersistenceOn
  /* this(bf)+0x14:0x1 len(0x1f) */ unsigned int reserved
  /* this+0x14 */ unsigned int value
}

struct DISPLAYCONFIG_SOURCE_DEVICE_NAME {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this+0x14 */ wchar_t[0x20] viewGdiDeviceName
}

struct DISPLAYCONFIG_SOURCE_MODE {
  /* this+0x0 */ unsigned int width
  /* this+0x4 */ unsigned int height
  /* this+0x8 */ enum DISPLAYCONFIG_PIXELFORMAT pixelFormat
  /* this+0xc */ struct _POINTL position

}

struct DISPLAYCONFIG_TARGET_DEVICE_NAME {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this+0x14 */ struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags

  /* this+0x18 */ enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology
  /* this+0x1c */ unsigned short edidManufactureId
  /* this+0x1e */ unsigned short edidProductCodeId
  /* this+0x20 */ unsigned int connectorInstance
  /* this+0x24 */ wchar_t[0x40] monitorFriendlyDeviceName
  /* this+0xa4 */ wchar_t[0x80] monitorDevicePath
}

struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned int friendlyNameFromEdid
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned int friendlyNameForced
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned int edidIdsValid
  /* this(bf)+0x0:0x3 len(0x1d) */ unsigned int reserved
  /* this+0x0 */ unsigned int value
}

struct DISPLAYCONFIG_TARGET_MODE {
  /* this+0x0 */ struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo

}

struct DISPLAYCONFIG_TARGET_PREFERRED_MODE {
  /* this+0x0 */ struct DISPLAYCONFIG_DEVICE_INFO_HEADER header

  /* this+0x14 */ unsigned int width
  /* this+0x18 */ unsigned int height
  /* this+0x20 */ struct DISPLAYCONFIG_TARGET_MODE targetMode

}

struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
  /* this+0x0 */ unsigned __int64 pixelRate
  /* this+0x8 */ struct DISPLAYCONFIG_RATIONAL hSyncFreq

  /* this+0x10 */ struct DISPLAYCONFIG_RATIONAL vSyncFreq

  /* this+0x18 */ struct DISPLAYCONFIG_2DREGION activeSize

  /* this+0x20 */ struct DISPLAYCONFIG_2DREGION totalSize

  /* this+0x28 */ unsigned int videoStandard
  /* this+0x2c */ enum DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering
}

struct DLGITEMTEMPLATE {
  /* this+0x0 */ unsigned long style
  /* this+0x4 */ unsigned long dwExtendedStyle
  /* this+0x8 */ short x
  /* this+0xa */ short y
  /* this+0xc */ short cx
  /* this+0xe */ short cy
  /* this+0x10 */ unsigned short id
}

struct DLGTEMPLATE {
  /* this+0x0 */ unsigned long style
  /* this+0x4 */ unsigned long dwExtendedStyle
  /* this+0x8 */ unsigned short cdit
  /* this+0xa */ short x
  /* this+0xc */ short y
  /* this+0xe */ short cx
  /* this+0x10 */ short cy
}

class DName {
  public void DName(__int64)
  public void DName(unsigned __int64)
  public void DName(class DName *)
  public void DName(enum DNameStatus)
  public void DName(const char * &, char)
  public void DName(const char *)
  public void DName(const class DName &)
  public void DName(char)
  public void DName()
  public int isValid()
  public int isEmpty()
  public enum DNameStatus status()
  public void clearStatus()
  public class DName & setPtrRef()
  public int isPtrRef()
  public int isUDC()
  public void setIsUDC()
  public int isUDTThunk()
  public void setIsUDTThunk()
  public int isArray()
  public void setIsArray()
  public int isNoTE()
  public void setIsNoTE()
  public int isPinPtr()
  public void setIsPinPtr()
  public int isComArray()
  public void setIsComArray()
  public int isVCallThunk()
  public void setIsVCallThunk()
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public char * getString(char *, int)
  public class DName operator+(enum DNameStatus)
  public class DName operator+(class DName *)
  public class DName operator+(char)
  public class DName operator+(const class DName &)
  public class DName operator+(const char *)
  public class DName & operator+=(const class DName &)
  public class DName & operator+=(enum DNameStatus)
  public class DName & operator+=(class DName *)
  public class DName & operator+=(const char *)
  public class DName & operator+=(char)
  public class DName & operator|=(const class DName &)
  public class DName & operator=(enum DNameStatus)
  public class DName & operator=(class DName *)
  public class DName & operator=(char)
  public class DName & operator=(const class DName &)
  public class DName & operator=(const char *)
  /* this+0x0 */ class DNameNode * node
  /* this(bf)+0x4:0x0 len(0x8) */ enum DNameStatus stat
  /* this(bf)+0x4:0x8 len(0x1) */ unsigned int isIndir
  /* this(bf)+0x4:0x9 len(0x1) */ unsigned int isAUDC
  /* this(bf)+0x4:0xa len(0x1) */ unsigned int isAUDTThunk
  /* this(bf)+0x4:0xb len(0x1) */ unsigned int isArrayType
  /* this(bf)+0x4:0xc len(0x1) */ unsigned int NoTE
  /* this(bf)+0x4:0xd len(0x1) */ unsigned int pinPtr
  /* this(bf)+0x4:0xe len(0x1) */ unsigned int comArray
  /* this(bf)+0x4:0xf len(0x1) */ unsigned int vcallThunk
  private void append(class DNameNode *)
  private void doPchar(const char *, int)
}

class DNameNode {
    *
  protected void DNameNode(const class DNameNode &)
  protected void DNameNode()
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class DNameNode & operator=(const class DNameNode &)
}

class DNameStatusNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ enum DNameStatus me
  /* this+0x8 */ int myLen
  public void DNameStatusNode(const class DNameStatusNode &)
  private void DNameStatusNode(enum DNameStatus)
  public static class DNameStatusNode * make(enum DNameStatus)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class DNameStatusNode & operator=(const class DNameStatusNode &)
}

struct DRVCONFIGINFOEX {
  /* this+0x0 */ unsigned long dwDCISize
  /* this+0x4 */ const wchar_t * lpszDCISectionName
  /* this+0x8 */ const wchar_t * lpszDCIAliasName
  /* this+0xc */ unsigned long dnDevNode
}

struct DispLocals {
  /* this+0x0 */ unsigned short wUser1
  /* this+0x2 */ unsigned short wUser2
  /* this+0x4 */ unsigned short savCntrl
  /* this+0x6 */ unsigned short setCntrl
  /* this+0x8 */ unsigned short StatusWord
  /* this+0xa */  Fac
  /* this+0x14 */ unsigned long Function
  /* this+0x18 */ unsigned char ErrorType
  /* this+0x19 */ unsigned char bUser3
  /* this+0x1a */ unsigned long typ
  /* this+0x1e */ unsigned long nam
  /* this+0x22 */ unsigned __int64 arg1
  /* this+0x2a */ unsigned __int64 arg2
  /* this+0x32 */ unsigned __int64 retval
  /* this+0x3a */ unsigned char savebuf
}

struct DumpState {
  /* this+0x0 */ struct lua_State * L
  /* this+0x4 */ function  * writer
  /* this+0x8 */ void * data
  /* this+0xc */ int strip
  /* this+0x10 */ int status
}

struct EHExceptionRecord {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ struct _EXCEPTION_RECORD * ExceptionRecord
  /* this+0xc */ void * ExceptionAddress
  /* this+0x10 */ unsigned long NumberParameters
    /* this+0x14 */ struct EHExceptionRecord::EHParameters params

}

struct EHExceptionRecord::EHParameters {
  /* this+0x0 */ unsigned long magicNumber
  /* this+0x4 */ void * pExceptionObject
  /* this+0x8 */ const struct _s_ThrowInfo * pThrowInfo
}

struct EHRegistrationNode {
  /* this+0x0 */ struct EHRegistrationNode * pNext
  /* this+0x4 */ void * frameHandler
  /* this+0x8 */ int state
}

struct ENTRY_QUEUE_APPLY_INFO {
  public void ENTRY_QUEUE_APPLY_INFO(const unsigned long, const unsigned long, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const short, const short)
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ char[0x18] charName
  /* this+0x20 */ short job
  /* this+0x22 */ short level
}

struct EQUIPMENTITEM_EXTRAINFO {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ unsigned short location
  /* this+0x8 */ unsigned short WearState
  /* this+0xa */ bool IsDamaged
  /* this+0xb */ unsigned char RefiningLevel
  /* this+0xc */ struct EQUIPSLOTINFO slot

}

struct EQUIPMENTITEM_EXTRAINFO2 {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ unsigned short location
  /* this+0x8 */ unsigned short WearState
  /* this+0xa */ bool IsDamaged
  /* this+0xb */ unsigned char RefiningLevel
  /* this+0xc */ struct EQUIPSLOTINFO slot

  /* this+0x14 */ long HireExpireDate
}

struct EQUIPMENTITEM_EXTRAINFO3 {
  EQUIPMENTITEM_EXTRAINFO2, offset = 0x0

  /* this+0x18 */ unsigned short bindOnEquipType
}

struct EQUIPMENTITEM_EXTRAINFO301 {
  EQUIPMENTITEM_EXTRAINFO3, offset = 0x0

  /* this+0x1a */ unsigned short wItemSpriteNumber
}

struct EQUIPSLOTINFO {
  /* this+0x0 */ unsigned short[0x4] info
}

struct ExceptionRecordStruct {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ unsigned long ExceptionRecord_
  /* this+0xc */ unsigned long ExceptionAddress
  /* this+0x10 */ unsigned long NumberParameters
  /* this+0x14 */ unsigned long ExceptionInfo
}

struct FILE_ID_DESCRIPTOR {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ enum _FILE_ID_TYPE Type
  /* this+0x8 */ union _LARGE_INTEGER FileId

  /* this+0x8 */ struct _GUID ObjectId

}

struct FLASHWINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct HWND__ * hwnd
  /* this+0x8 */ unsigned long dwFlags
  /* this+0xc */ unsigned int uCount
  /* this+0x10 */ unsigned long dwTimeout
}

union FT {
  /* this+0x0 */ unsigned __int64 ft_scalar
  /* this+0x0 */ struct _FILETIME ft_struct

}

struct FillteringInfo {
  /* this+0x0 */ unsigned long GID
  /* this+0x4 */ char[0x18] CharName
}

struct FpFormatDescriptor {
  /* this+0x0 */ int max_exp
  /* this+0x4 */ int min_exp
  /* this+0x8 */ int precision
  /* this+0xc */ int exp_width
  /* this+0x10 */ int format_width
  /* this+0x14 */ int bias
}

struct FrameInfo {
  /* this+0x0 */ void * pExceptionObject
  /* this+0x4 */ struct FrameInfo * pNext
}

struct FuncState {
  /* this+0x0 */ struct Proto * f
  /* this+0x4 */ struct Table * h
  /* this+0x8 */ struct FuncState * prev
  /* this+0xc */ struct LexState * ls
  /* this+0x10 */ struct lua_State * L
  /* this+0x14 */ struct BlockCnt * bl
  /* this+0x18 */ int pc
  /* this+0x1c */ int lasttarget
  /* this+0x20 */ int jpc
  /* this+0x24 */ int freereg
  /* this+0x28 */ int nk
  /* this+0x2c */ int np
  /* this+0x30 */ short nlocvars
  /* this+0x32 */ unsigned char nactvar
  /* this+0x33 */ struct upvaldesc[0x3c] upvalues
  /* this+0xac */ unsigned short[0xc8] actvar
}

union GCObject {
  /* this+0x0 */ struct GCheader gch

  /* this+0x0 */ union TString ts

  /* this+0x0 */ union Udata u

  /* this+0x0 */ union Closure cl

  /* this+0x0 */ struct Table h

  /* this+0x0 */ struct Proto p

  /* this+0x0 */ struct UpVal uv

  /* this+0x0 */ struct lua_State th

}

struct GCheader {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
}

struct GROUPMEMBER_INFO {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ char[0x10] mapName
  /* this+0x2c */ unsigned char role
  /* this+0x2d */ unsigned char state
}

struct GROUP_INFO {
  /* this+0x0 */ unsigned long expOption
  /* this+0x4 */ unsigned char ItemPickupRule
  /* this+0x5 */ unsigned char ItemDivisionRule
}

struct GUILDALLYINFO {
  /* this+0x0 */ int GDID
  /* this+0x4 */ int OpponentGDID
  /* this+0x8 */ char[0x18] GuildName
  /* this+0x20 */ int Relation
}

struct GUILDBANISHINFO {
  /* this+0x0 */ int GDID
  /* this+0x4 */ char[0x18] MemberName
  /* this+0x1c */ char[0x18] MemberAccount
  /* this+0x34 */ char[0x32] Reason
  /* this+0x66 */ int GID
  /* this+0x6a */ int AID
}

struct GUILDINFO {
  /* this+0x0 */ int GDID
  /* this+0x4 */ int Level
  /* this+0x8 */ char[0x18] Name
  /* this+0x20 */ char[0x18] MName
  /* this+0x38 */ int MaxUserNum
  /* this+0x3c */ int UserNum
  /* this+0x40 */ int Honor
  /* this+0x44 */ int Virtue
  /* this+0x48 */ int Type
  /* this+0x4c */ int Class
  /* this+0x50 */ int Money
  /* this+0x54 */ int ArenaWin
  /* this+0x58 */ int ArenaLose
  /* this+0x5c */ int ArenaDrawn
  /* this+0x60 */ char[0x18] ManageLand
  /* this+0x78 */ int Exp
  /* this+0x7c */ int EmblemVersion
  /* this+0x80 */ int Point
  /* this+0x84 */ char[0x50] Desc
}

struct GUILDINFO_LIST {
  /* this+0x0 */ char[0x18] GName
  /* this+0x18 */ char[0x18] MName
  /* this+0x30 */ int Level
  /* this+0x34 */ int Ranking
}

struct GUILDMINFO {
  /* this+0x0 */ int GID
  /* this+0x4 */ char[0x18] CharName
  /* this+0x1c */ char[0x18] AccountName
  /* this+0x34 */ int Level
  /* this+0x38 */ char[0x32] Memo
  /* this+0x6a */ int Service
  /* this+0x6e */ int MemberExp
  /* this+0x72 */ int GDID
  /* this+0x76 */ int AID
  /* this+0x7a */ int PositionID
  /* this+0x7e */ short head
  /* this+0x80 */ short headPalette
  /* this+0x82 */ short sex
  /* this+0x84 */ int job
  /* this+0x88 */ int status
}

struct GUILDMPOSITION {
  /* this+0x0 */ int GDID
  /* this+0x4 */ int Grade
  /* this+0x8 */ char[0x18] PosName
  /* this+0x20 */ int JoinRight
  /* this+0x24 */ int PenaltyRight
  /* this+0x28 */ int PositionID
  /* this+0x2c */ int Service
}

struct GUILDNOTICE {
  /* this+0x0 */ int GDID
  /* this+0x4 */ char[0x3c] Subject
  /* this+0x40 */ char[0x78] Notice
}

struct GUILD_BAN_INFO {
  /* this+0x0 */ char[0x18] charname
  /* this+0x18 */ char[0x18] account
  /* this+0x30 */ char[0x28] reason
}

struct GUILD_MEMBER_INFO {
  /* this+0x0 */ int AID
  /* this+0x4 */ int GID
  /* this+0x8 */ short head
  /* this+0xa */ short headPalette
  /* this+0xc */ short sex
  /* this+0xe */ short job
  /* this+0x10 */ short level
  /* this+0x12 */ int contributionExp
  /* this+0x16 */ int currentState
  /* this+0x1a */ int positionID
  /* this+0x1e */ char[0x32] intro
  /* this+0x50 */ char[0x18] charname
}

struct GUILD_MEMBER_INFO_SHORT {
  /* this+0x0 */ int AID
  /* this+0x4 */ int GID
}

struct GUILD_POSITION_INFO {
  /* this+0x0 */ int positionID
  /* this+0x4 */ int right
  /* this+0x8 */ int ranking
  /* this+0xc */ int payRate
}

struct GUILD_REG_POSITION_INFO {
  /* this+0x0 */ int positionID
  /* this+0x4 */ int right
  /* this+0x8 */ int ranking
  /* this+0xc */ int payRate
  /* this+0x10 */ char[0x18] posName
}

struct GUILD_SKILL_INFO {
  /* this+0x0 */ unsigned short SKID
}

struct HACCEL__ {
  /* this+0x0 */ int unused
}

struct HBITMAP__ {
  /* this+0x0 */ int unused
}

struct HBRUSH__ {
  /* this+0x0 */ int unused
}

struct HCOLORSPACE__ {
  /* this+0x0 */ int unused
}

struct HDC__ {
  /* this+0x0 */ int unused
}

struct HDESK__ {
  /* this+0x0 */ int unused
}

struct HDRVR__ {
  /* this+0x0 */ int unused
}

struct HENHMETAFILE__ {
  /* this+0x0 */ int unused
}

struct HFONT__ {
  /* this+0x0 */ int unused
}

struct HGESTUREINFO__ {
  /* this+0x0 */ int unused
}

struct HGLRC__ {
  /* this+0x0 */ int unused
}

struct HHOOK__ {
  /* this+0x0 */ int unused
}

struct HICON__ {
  /* this+0x0 */ int unused
}

struct HIMCC__ {
  /* this+0x0 */ int unused
}

struct HIMC__ {
  /* this+0x0 */ int unused
}

struct HINSTANCE__ {
  /* this+0x0 */ int unused
}

struct HKEY__ {
  /* this+0x0 */ int unused
}

struct HKL__ {
  /* this+0x0 */ int unused
}

struct HLSURF__ {
  /* this+0x0 */ int unused
}

struct HMENU__ {
  /* this+0x0 */ int unused
}

struct HMETAFILE__ {
  /* this+0x0 */ int unused
}

struct HMIDIIN__ {
  /* this+0x0 */ int unused
}

struct HMIDIOUT__ {
  /* this+0x0 */ int unused
}

struct HMIDISTRM__ {
  /* this+0x0 */ int unused
}

struct HMIDI__ {
  /* this+0x0 */ int unused
}

struct HMIXEROBJ__ {
  /* this+0x0 */ int unused
}

struct HMIXER__ {
  /* this+0x0 */ int unused
}

struct HMMIO__ {
  /* this+0x0 */ int unused
}

struct HMONITOR__ {
  /* this+0x0 */ int unused
}

struct HPALETTE__ {
  /* this+0x0 */ int unused
}

struct HPEN__ {
  /* this+0x0 */ int unused
}

struct HRAWINPUT__ {
  /* this+0x0 */ int unused
}

struct HRGN__ {
  /* this+0x0 */ int unused
}

struct HRSRC__ {
  /* this+0x0 */ int unused
}

struct HSPRITE__ {
  /* this+0x0 */ int unused
}

struct HSTR__ {
  /* this+0x0 */ int unused
}

struct HTASK__ {
  /* this+0x0 */ int unused
}

struct HTOUCHINPUT__ {
  /* this+0x0 */ int unused
}

struct HUMPD__ {
  /* this+0x0 */ int unused
}

struct HWAVEIN__ {
  /* this+0x0 */ int unused
}

struct HWAVEOUT__ {
  /* this+0x0 */ int unused
}

struct HWAVE__ {
  /* this+0x0 */ int unused
}

struct HWINEVENTHOOK__ {
  /* this+0x0 */ int unused
}

struct HWINSTA__ {
  /* this+0x0 */ int unused
}

struct HWND__ {
  /* this+0x0 */ int unused
}

struct IDpair {
  /* this+0x0 */ struct _iobuf * stream
  /* this+0x4 */ int prochnd
}

struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
  /* this+0x0 */ unsigned char bAuxType
  /* this+0x1 */ unsigned char bReserved
  /* this+0x2 */ unsigned long SymbolTableIndex
  /* this+0x6 */ unsigned char[0xc] rgbReserved
}

struct IMAGE_COR20_HEADER {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ unsigned short MajorRuntimeVersion
  /* this+0x6 */ unsigned short MinorRuntimeVersion
  /* this+0x8 */ struct _IMAGE_DATA_DIRECTORY MetaData

  /* this+0x10 */ unsigned long Flags
  /* this+0x14 */ unsigned long EntryPointToken
  /* this+0x14 */ unsigned long EntryPointRVA
  /* this+0x18 */ struct _IMAGE_DATA_DIRECTORY Resources

  /* this+0x20 */ struct _IMAGE_DATA_DIRECTORY StrongNameSignature

  /* this+0x28 */ struct _IMAGE_DATA_DIRECTORY CodeManagerTable

  /* this+0x30 */ struct _IMAGE_DATA_DIRECTORY VTableFixups

  /* this+0x38 */ struct _IMAGE_DATA_DIRECTORY ExportAddressTableJumps

  /* this+0x40 */ struct _IMAGE_DATA_DIRECTORY ManagedNativeHeader

}

struct IMAGE_LOAD_CONFIG_DIRECTORY32 {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned long GlobalFlagsClear
  /* this+0x10 */ unsigned long GlobalFlagsSet
  /* this+0x14 */ unsigned long CriticalSectionDefaultTimeout
  /* this+0x18 */ unsigned long DeCommitFreeBlockThreshold
  /* this+0x1c */ unsigned long DeCommitTotalFreeThreshold
  /* this+0x20 */ unsigned long LockPrefixTable
  /* this+0x24 */ unsigned long MaximumAllocationSize
  /* this+0x28 */ unsigned long VirtualMemoryThreshold
  /* this+0x2c */ unsigned long ProcessHeapFlags
  /* this+0x30 */ unsigned long ProcessAffinityMask
  /* this+0x34 */ unsigned short CSDVersion
  /* this+0x36 */ unsigned short Reserved1
  /* this+0x38 */ unsigned long EditList
  /* this+0x3c */ unsigned long SecurityCookie
  /* this+0x40 */ unsigned long SEHandlerTable
  /* this+0x44 */ unsigned long SEHandlerCount
}

struct IMAGE_LOAD_CONFIG_DIRECTORY32_2 {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned long GlobalFlagsClear
  /* this+0x10 */ unsigned long GlobalFlagsSet
  /* this+0x14 */ unsigned long CriticalSectionDefaultTimeout
  /* this+0x18 */ unsigned long DeCommitFreeBlockThreshold
  /* this+0x1c */ unsigned long DeCommitTotalFreeThreshold
  /* this+0x20 */ unsigned long LockPrefixTable
  /* this+0x24 */ unsigned long MaximumAllocationSize
  /* this+0x28 */ unsigned long VirtualMemoryThreshold
  /* this+0x2c */ unsigned long ProcessHeapFlags
  /* this+0x30 */ unsigned long ProcessAffinityMask
  /* this+0x34 */ unsigned short CSDVersion
  /* this+0x36 */ unsigned short Reserved1
  /* this+0x38 */ unsigned long EditList
  /* this+0x3c */ unsigned int * SecurityCookie
  /* this+0x40 */ void * * SEHandlerTable
  /* this+0x44 */ unsigned long SEHandlerCount
}

struct IMAGE_LOAD_CONFIG_DIRECTORY64 {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned long GlobalFlagsClear
  /* this+0x10 */ unsigned long GlobalFlagsSet
  /* this+0x14 */ unsigned long CriticalSectionDefaultTimeout
  /* this+0x18 */ unsigned __int64 DeCommitFreeBlockThreshold
  /* this+0x20 */ unsigned __int64 DeCommitTotalFreeThreshold
  /* this+0x28 */ unsigned __int64 LockPrefixTable
  /* this+0x30 */ unsigned __int64 MaximumAllocationSize
  /* this+0x38 */ unsigned __int64 VirtualMemoryThreshold
  /* this+0x40 */ unsigned __int64 ProcessAffinityMask
  /* this+0x48 */ unsigned long ProcessHeapFlags
  /* this+0x4c */ unsigned short CSDVersion
  /* this+0x4e */ unsigned short Reserved1
  /* this+0x50 */ unsigned __int64 EditList
  /* this+0x58 */ unsigned __int64 SecurityCookie
  /* this+0x60 */ unsigned __int64 SEHandlerTable
  /* this+0x68 */ unsigned __int64 SEHandlerCount
}

struct IMPORT_OBJECT_HEADER {
  /* this+0x0 */ unsigned short Sig1
  /* this+0x2 */ unsigned short Sig2
  /* this+0x4 */ unsigned short Version
  /* this+0x6 */ unsigned short Machine
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ unsigned long SizeOfData
  /* this+0x10 */ unsigned short Ordinal
  /* this+0x10 */ unsigned short Hint
  /* this(bf)+0x12:0x0 len(0x2) */ unsigned short Type
  /* this(bf)+0x12:0x2 len(0x3) */ unsigned short NameType
  /* this(bf)+0x12:0x5 len(0xb) */ unsigned short Reserved
}

struct IM_SERVER_STATE {
  /* this+0x0 */ int serverID
  /* this+0x4 */ int packetNumber
  /* this+0x8 */ int userCounter
  /* this+0xc */ int loopcountPerSec
}

struct IM_SERVER_STATE_CHANNELING {
  /* this+0x0 */ int serverID
  /* this+0x4 */ int packetNumber
  /* this+0x8 */ int userCounter
  /* this+0xc */ int loopcountPerSec
  /* this+0x10 */ short[0xa] Channeling_UserCounter
}

struct IM_SERVER_STATE_HAN_GAME {
  /* this+0x0 */ int serverID
  /* this+0x4 */ int packetNumber
  /* this+0x8 */ int userCounter
  /* this+0xc */ int loopcountPerSec
  /* this+0x10 */ int hangameUserCounter
}

struct IRMAILID {
    /* this+0x0 */ unsigned char office
  /* this+0x1 */ unsigned int id
  public void IRMAILID()
  public void IRMAILID(const unsigned char, const unsigned int)
}

class InventoryItem {
    *
  public void InitReal()
  public unsigned long GetType()
  public void SetID(unsigned short)
  public unsigned short GetID()
  public void InventoryItem(const class InventoryItem &)
  public void InventoryItem()
  public void ~InventoryItem()
  /* this+0x4 */ unsigned short m_ID
  public class InventoryItem & operator=(const class InventoryItem &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct LClosure {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x6 */ unsigned char isC
  /* this+0x7 */ unsigned char nupvalues
  /* this+0x8 */ union GCObject * gclist
  /* this+0xc */ struct Table * env
  /* this+0x10 */ struct Proto * p
  /* this+0x14 */ struct UpVal *[0x1] upvals
}

struct LG {
  /* this+0x0 */ struct lua_State l

  /* this+0x78 */ struct global_State g

}

struct LHS_assign {
  /* this+0x0 */ struct LHS_assign * prev
  /* this+0x8 */ struct expdesc v

}

struct LIST_ENTRY32 {
  /* this+0x0 */ unsigned long Flink
  /* this+0x4 */ unsigned long Blink
}

struct LIST_ENTRY64 {
  /* this+0x0 */ unsigned __int64 Flink
  /* this+0x8 */ unsigned __int64 Blink
}

union L_Umaxalign {
  /* this+0x0 */ double u
  /* this+0x0 */ void * s
  /* this+0x0 */ long l
}

struct LexState {
  /* this+0x0 */ int current
  /* this+0x4 */ int linenumber
  /* this+0x8 */ int lastline
  /* this+0x10 */ struct Token t

  /* this+0x20 */ struct Token lookahead

  /* this+0x30 */ struct FuncState * fs
  /* this+0x34 */ struct lua_State * L
  /* this+0x38 */ struct Zio * z
  /* this+0x3c */ struct Mbuffer * buff
  /* this+0x40 */ union TString * source
  /* this+0x44 */ char decpoint
}

struct LoadF {
  /* this+0x0 */ int extraline
  /* this+0x4 */ struct _iobuf * f
  /* this+0x8 */ char[0x200] buff
}

struct LoadS {
  /* this+0x0 */ const char * s
  /* this+0x4 */ unsigned int size
}

struct LoadState {
  /* this+0x0 */ struct lua_State * L
  /* this+0x4 */ struct Zio * Z
  /* this+0x8 */ struct Mbuffer * b
  /* this+0xc */ const char * name
}

struct LocVar {
  /* this+0x0 */ union TString * varname
  /* this+0x4 */ int startpc
  /* this+0x8 */ int endpc
}

struct MAILTIME {
  /* this+0x0 */ short Year
  /* this+0x2 */ short Month
  /* this+0x4 */ short Day
  /* this+0x6 */ short Hour
}

struct MAIL_LIST {
  /* this+0x0 */ unsigned long MailID
  /* this+0x4 */ char[0x28] HEADER
  /* this+0x2c */ char isOpen
  /* this+0x2d */ char[0x18] FromName
  /* this+0x45 */ long DeleteTime
}

struct MAIL_OPEN {
  /* this+0x0 */ unsigned long MailID
  /* this+0x4 */ char[0x28] HEADER
  /* this+0x2c */ char[0x18] FromName
  /* this+0x44 */ long DeleteTime
  /* this+0x48 */ unsigned long Money
  /* this+0x4c */ int count
  /* this+0x50 */ unsigned short ITID
  /* this+0x52 */ unsigned short Type
  /* this+0x54 */ bool IsIdentified
  /* this+0x55 */ bool IsDamaged
  /* this+0x56 */ unsigned char refiningLevel
  /* this+0x57 */ struct EQUIPSLOTINFO slot

}

struct MAKABLEITEM_INFO {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ unsigned short[0x3] material_ID
}

struct MAKER_RANKING {
  /* this+0x0 */ unsigned long GID
  /* this+0x4 */ char[0x18] charname
  /* this+0x1c */ int point
}

struct MAP_STATE {
  public void MAP_STATE()
  /* this+0x0 */ int ZsvrState
  /* this+0x4 */ unsigned char[0x10] mapName
}

struct MEMBER_POSITION_ID_NAME_INFO {
  /* this+0x0 */ int positionID
  /* this+0x4 */ char[0x18] posName
}

struct MEMBER_POSITION_INFO {
  /* this+0x0 */ int AID
  /* this+0x4 */ int GID
  /* this+0x8 */ int positionID
}

struct MENUITEMTEMPLATE {
  /* this+0x0 */ unsigned short mtOption
  /* this+0x2 */ unsigned short mtID
  /* this+0x4 */ wchar_t[0x1] mtString
}

struct MENUITEMTEMPLATEHEADER {
  /* this+0x0 */ unsigned short versionNumber
  /* this+0x2 */ unsigned short offset
}

struct MENU_INTERFACE {
  /* this+0x0 */ short Type
}

struct MISSION_HUNT_INFO {
  /* this+0x0 */ unsigned long mobGID
  /* this+0x4 */ short huntCount
  /* this+0x6 */ short maxCount
  /* this+0x8 */ char[0x18] mobName
}

struct MTStackFrame {
  /* this+0x0 */ unsigned __int64 MTS_LocalFac
  /* this+0x8 */ unsigned char MTS_cdispflags
}

struct MatchState {
  /* this+0x0 */ const char * src_init
  /* this+0x4 */ const char * src_end
  /* this+0x8 */ struct lua_State * L
  /* this+0xc */ int level
  /* this+0x10 */ struct <unnamed-tag>[0x20] capture
}

struct Mbuffer {
  /* this+0x0 */ char * buffer
  /* this+0x4 */ unsigned int n
  /* this+0x8 */ unsigned int buffsize
}

class MyMemoryMgrPtr<GUILDBANISHINFO> {
  private void MyMemoryMgrPtr<GUILDBANISHINFO>(const class MyMemoryMgrPtr<GUILDBANISHINFO> &)
  public void MyMemoryMgrPtr<GUILDBANISHINFO>(class CMemoryMgr<GUILDBANISHINFO> &)
  public void MyMemoryMgrPtr<GUILDBANISHINFO>::~MyMemoryMgrPtr<GUILDBANISHINFO>()
  public void release()
  public struct GUILDBANISHINFO * operator->()
  public struct GUILDBANISHINFO * get()
  private class MyMemoryMgrPtr<GUILDBANISHINFO> & operator=(const class MyMemoryMgrPtr<GUILDBANISHINFO> &)
  /* this+0x0 */ class CMemoryMgr<GUILDBANISHINFO> & m_cpMemoryMgr
  /* this+0x4 */ struct GUILDBANISHINFO * m_myptr
  public void * __vecDelDtor(unsigned int)
}

class N2DBLog {
    *
  /* this+0x4 */ bool m_bOK
  public bool isOK()
  private bool N2DBLog::Run(class N2ODBCCtrl &)
  public void N2DBLog(const class N2DBLog &)
  public void N2DBLog::N2DBLog()
  public void N2DBLog::~N2DBLog()
  public class N2DBLog & operator=(const class N2DBLog &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2DBLogMgr {
    *
  /* [0x0003:0x00003970] */ static  class N2DBLogMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
      /* this+0x8 */ class std::vector<N2DBLogThread *,std::allocator<N2DBLogThread *> > m_ThreadContainer

  /* this+0x18 */ class N2DBLogRequestQueue m_RequestQueue

  private bool N2DBLogMgr::Create(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private void N2DBLogMgr::Destroy()
  public const bool isOK()
  public bool N2DBLogMgr::Start()
  public void N2DBLogMgr::Stop()
  public bool Add(class N2DBLog * const)
  public static bool N2DBLogMgr::CreateInstance(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public static void N2DBLogMgr::DestroyInstance()
  public void N2DBLogMgr(const class N2DBLogMgr &)
  private void N2DBLogMgr::N2DBLogMgr(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  private void N2DBLogMgr::~N2DBLogMgr()
  public class N2DBLogMgr & operator=(const class N2DBLogMgr &)
  private void * __vecDelDtor(unsigned int)
}

class N2DBLogRequestQueue {
    *
      /* this+0x4 */ class std::list<N2DBLog *,std::allocator<N2DBLog *> > m_Container

  /* this+0x10 */ bool m_bOK
  /* this+0x14 */ void * m_hSemaphore
  /* this+0x18 */ struct _RTL_CRITICAL_SECTION m_CS

  private bool N2DBLogRequestQueue::Create()
  private void N2DBLogRequestQueue::Destroy()
  private class N2DBLog * N2DBLogRequestQueue::Get()
  private void * & GetEventObject()
  public bool isOK()
  public bool N2DBLogRequestQueue::Add(class N2DBLog * const)
  public void N2DBLogRequestQueue(const class N2DBLogRequestQueue &)
  private void N2DBLogRequestQueue::N2DBLogRequestQueue()
  private void N2DBLogRequestQueue::~N2DBLogRequestQueue()
  public class N2DBLogRequestQueue & operator=(const class N2DBLogRequestQueue &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class N2DBLogThread {
  N2Thread, offset = 0x0

  N2MessageQueue<int>, offset = 0x30

  /* this+0x5c */ bool m_bOK
  /* this+0x60 */ class N2ODBCCtrl m_ODBCCtrl

  /* this+0x74 */ class N2DBLogRequestQueue * m_cpRequestQueue
  /* this+0x78 */ void * m_hMessageSemaphore
  /* this+0x7c */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_ConnectStr

    private bool N2DBLogThread::Create()
  private void N2DBLogThread::Destroy()
  private bool N2DBLogThread::MessageProcessor()
  private void N2DBLogThread::PostMessageA(const enum N2DBLogThread::enumMessage)
  private const enum N2DBLogThread::enumMessage N2DBLogThread::GetMessageA()
  private unsigned int N2DBLogThread::ThreadFunction()
  private void N2DBLogThread::PostThreadQuitMessage()
  public bool isOK()
  public void N2DBLogThread(const class N2DBLogThread &)
  public void N2DBLogThread::N2DBLogThread(class N2DBLogRequestQueue *, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void N2DBLogThread::~N2DBLogThread()
  public void * __vecDelDtor(unsigned int)
}

class N2FTAFile {
    *
  /* this+0x4 */ const int m_TABSIZE
  /* this+0x8 */ unsigned char * m_pBuffer
  /* this+0xc */ int m_TotalBytes
  /* this+0x10 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strFileName

    /* this+0x2c */ struct N2FTAFile::tagCur m_Cur

        /* this+0x38 */ class std::map<int,N2FTAFile::CLineInfo,std::less<int>,std::allocator<std::pair<int const ,N2FTAFile::CLineInfo> > > m_LineInfoContainer

  private void N2FTAFile::Clear()
  private bool N2FTAFile::ParseLine()
  public bool N2FTAFile::Load(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool Write(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public bool N2FTAFile::isEOF()
  public bool N2FTAFile::GetByte(char &)
  public const int GetCurIdx()
  public const bool N2FTAFile::ViewByte(char &, const int)
  public const bool N2FTAFile::ViewByte(char &)
  public const int N2FTAFile::GetLine()
  public const int N2FTAFile::GetCol()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > N2FTAFile::GetLineStr(const int)
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > N2FTAFile::GetFileName()
  public void N2FTAFile(const class N2FTAFile &)
  public void N2FTAFile::N2FTAFile(const int)
  public void N2FTAFile::~N2FTAFile()
  public void __dflt_ctor_closure()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2FTAFile::CLineInfo {
  /* this+0x0 */ unsigned char * m_pBuffer
  /* this+0x4 */ int m_Bytes
  public void CLineInfo(unsigned char *, int)
  public void ~CLineInfo()
  public void * __vecDelDtor(unsigned int)
}

struct N2FTAFile::tagCur {
  /* this+0x0 */ int Idx
  /* this+0x4 */ int Line
  /* this+0x8 */ int Col
}

class N2FTALexicalAnalyzer {
    *
    /* this+0x4 */ class N2FTAFile & m_SourceFile
  /* this+0x8 */ bool m_bOK
    /* this+0xc */ class std::list<N2FTALexicalAnalyzer::FTARet,std::allocator<N2FTALexicalAnalyzer::FTARet> > m_Container

  private int N2FTALexicalAnalyzer::isLetter(const char)
  private bool N2FTALexicalAnalyzer::isAlpha(const char)
  private bool N2FTALexicalAnalyzer::isDelimiter(const char)
  private bool N2FTALexicalAnalyzer::isNumeric(const char)
  private int N2FTALexicalAnalyzer::RemoveGarbage()
  private int N2FTALexicalAnalyzer::RemoveComment()
  private class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::Anaysis()
  private class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::StringAnaysis()
  private class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::SymbolAnaysis()
  private class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::NumberAnaysis()
  public const bool N2FTALexicalAnalyzer::isOK()
  public class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::GetToken()
  public class N2FTALexicalAnalyzer::FTARet N2FTALexicalAnalyzer::ViewToken()
  public const int GetLine()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetLineStr(const int)
  public void N2FTALexicalAnalyzer(const class N2FTALexicalAnalyzer &)
  public void N2FTALexicalAnalyzer::N2FTALexicalAnalyzer(class N2FTAFile &)
  public void N2FTALexicalAnalyzer::~N2FTALexicalAnalyzer()
  public void * __vecDelDtor(unsigned int)
}

class N2FTALexicalAnalyzer::FTARet {
    /* this+0x0 */ enum N2FTALexicalAnalyzer::FTARet::enumReturnCode m_Code
  /* this+0x8 */ class N2FTAToken m_Token

  /* this+0x78 */ int m_SourceFileLine
  /* this+0x7c */ int m_SourceFileCol
  /* this+0x80 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_SourceFileName

  public const enum N2FTALexicalAnalyzer::FTARet::enumReturnCode GetResult()
  public class N2FTAToken N2FTALexicalAnalyzer::FTARet::GetToken()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetSourceFileName()
  public void N2FTALexicalAnalyzer::FTARet::FTARet(const class N2FTALexicalAnalyzer::FTARet &)
  public void FTARet()
  public void N2FTALexicalAnalyzer::FTARet::FTARet(const enum N2FTALexicalAnalyzer::FTARet::enumReturnCode, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int)
  public void N2FTALexicalAnalyzer::FTARet::FTARet(const enum N2FTALexicalAnalyzer::FTARet::enumReturnCode, class N2FTAToken)
  public void N2FTALexicalAnalyzer::FTARet::~FTARet()
  public class N2FTALexicalAnalyzer::FTARet & N2FTALexicalAnalyzer::FTARet::operator=(const class N2FTALexicalAnalyzer::FTARet &)
  public void * __vecDelDtor(unsigned int)
}

class N2FTAToken {
    *
    /* this+0x8 */ enum N2FTAToken::enumTYPE m_Type
  /* this+0x10 */ class N2FTAVar m_Value

  /* this+0x48 */ int m_SourceFileLine
  /* this+0x4c */ int m_SourceFileCol
  /* this+0x50 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_SourceFileName

  public const int GetSourceFileCol()
  public const int GetSourceFileLine()
  public const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > N2FTAToken::GetSourceFileName()
  public const enum N2FTAToken::enumTYPE GetType()
  public class N2FTAVar N2FTAToken::GetValue()
  public void N2FTAToken::N2FTAToken(const class N2FTAToken &)
  public void N2FTAToken::N2FTAToken(const enum N2FTAToken::enumTYPE, class N2FTAVar, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >, const int, const int)
  public void N2FTAToken::N2FTAToken()
  public void N2FTAToken::~N2FTAToken()
  public class N2FTAToken & operator=(const class N2FTAToken &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2FTAVar {
    *
      /* this+0x8 */ enum N2FTAVar::enumType m_Type
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strData

  /* this+0x28 */ __int64 m_intData
  /* this+0x30 */ double m_floatData
  public int N2FTAVar::operator int()
  public float operator float()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > operator class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >()
  public class N2FTAVar & operator=(const class N2FTAVar &)
  public void operator=(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void operator=(const float)
  public void operator=(const int)
  public bool N2FTAVar::operator==(const class N2FTAVar &)
  public bool operator!=(const class N2FTAVar &)
  public class N2FTAVar operator+(class N2FTAVar &)
  public class N2FTAVar operator-(class N2FTAVar &)
  public class N2FTAVar operator*(class N2FTAVar &)
  public class N2FTAVar operator/(class N2FTAVar &)
  public class N2FTAVar operator%(class N2FTAVar &)
  public void N2FTAVar::N2FTAVar(const class N2FTAVar &)
  public void N2FTAVar::N2FTAVar(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void N2FTAVar(const float)
  public void N2FTAVar(const int)
  public void N2FTAVar::N2FTAVar()
  public void N2FTAVar::~N2FTAVar()
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2IDAllocator {
    *
  /* [0x0003:0x00003974] */ static  class N2IDAllocator * m_cpSelf
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ bool m_bOK
      /* this+0x20 */ class std::map<unsigned short,N2IDGenerator *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,N2IDGenerator *> > > m_GroupContainer

  private bool N2IDAllocator::Create()
  private void N2IDAllocator::Destroy()
  public bool isOK()
  public bool N2IDAllocator::RegisterGroup(const unsigned short, const unsigned short, const unsigned short)
  public unsigned int Alloc(const unsigned short)
  public static unsigned short GetGroupID(const unsigned int)
  public void Free(const unsigned int)
  public static bool N2IDAllocator::CreateInstance()
  public static void N2IDAllocator::DestoryInstance()
  public void N2IDAllocator(const class N2IDAllocator &)
  protected void N2IDAllocator::N2IDAllocator()
  protected void N2IDAllocator::~N2IDAllocator()
  public class N2IDAllocator & operator=(const class N2IDAllocator &)
  public void __local_vftable_ctor_closure()
  protected void * __vecDelDtor(unsigned int)
}

class N2IDGenerator {
    *
  /* this+0x4 */ const unsigned short m_MinID
  /* this+0x6 */ const unsigned short m_MaxID
  /* this+0x8 */ const unsigned short m_GroupID
        /* this+0xc */ class std::queue<unsigned int,std::deque<unsigned int,std::allocator<unsigned int> > > m_StandbyIDqueue

  /* this+0x24 */ class std::map<unsigned int,bool,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,bool> > > m_IDContainer

  /* this+0x34 */ bool m_bOK
  public const bool isOK()
  public unsigned int Alloc()
  public void Free(const unsigned int)
  public const int GetGroupID()
  public void N2IDGenerator(const class N2IDGenerator &)
  public void N2IDGenerator::N2IDGenerator(const unsigned short, const unsigned short, const unsigned short)
  public void N2IDGenerator::~N2IDGenerator()
  public void * __vecDelDtor(unsigned int)
}

class N2IDGenerator36 {
  public bool isOK()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > N2IDGenerator36::Generate36(const unsigned long)
  public int N2IDGenerator36::ReverseDecimal(const char *)
  public static bool N2IDGenerator36::CreateInstance()
  public static void N2IDGenerator36::DestroyInstance()
  private void N2IDGenerator36(class N2IDGenerator36 &)
  private void N2IDGenerator36::N2IDGenerator36()
  private void ~N2IDGenerator36()
  private class N2IDGenerator36 & operator=(class N2IDGenerator36 &)
  /* this+0x0 */ bool m_bOK
  /* [0x0003:0x00003b8c] */ static  class N2IDGenerator36 * m_cpSelf
  private void * __vecDelDtor(unsigned int)
}

class N2Inter {
    *
  public void PostInterMessage(const unsigned int, const int, const int, const int)
  public bool PeekInterMessage(unsigned int &, int &, int &, int &, const bool)
  public void N2Inter(const class N2Inter &)
  public void N2Inter()
  public void ~N2Inter()
  public class N2Inter & operator=(const class N2Inter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2InterMessageQueue {
    *
        /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ class std::list<N2InterMessageQueue::Message,std::allocator<N2InterMessageQueue::Message> > m_Container

  public void Post(const unsigned int, const int, const int, const int)
  public bool Peek(unsigned int &, int &, int &, int &, const bool)
  public void N2InterMessageQueue(const class N2InterMessageQueue &)
  public void N2InterMessageQueue()
  public void ~N2InterMessageQueue()
  public class N2InterMessageQueue & operator=(const class N2InterMessageQueue &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2InterMessageQueue::Message {
  /* this+0x0 */ unsigned int m_FromInter
  /* this+0x4 */ int m_Message
  /* this+0x8 */ int m_wParam
  /* this+0xc */ int m_lParam
  public void Message(const unsigned int, const int, const int, const int)
  public void Message()
}

class N2InterMessageSystem {
    *
  /* [0x0003:0x00003b98] */ static  class N2InterMessageSystem * m_cpSelf
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ bool m_bOK
      /* this+0x20 */ class std::map<unsigned int,N2Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N2Inter *> > > m_InterObjContainer

  public bool N2InterMessageSystem::isOK()
  public bool Insert(const unsigned int, class N2Inter *)
  public void Remove(const unsigned int, class N2Inter *)
  public bool PostInterMessage(const unsigned int, const unsigned int, const int, const int, const int)
  public static bool N2InterMessageSystem::CreateInstance()
  public static void N2InterMessageSystem::DestoryInstance()
  public void N2InterMessageSystem(const class N2InterMessageSystem &)
  protected void N2InterMessageSystem::N2InterMessageSystem()
  protected void N2InterMessageSystem::~N2InterMessageSystem()
  public class N2InterMessageSystem & operator=(const class N2InterMessageSystem &)
  public void __local_vftable_ctor_closure()
  protected void * __vecDelDtor(unsigned int)
}

class N2MessageQueue<int> {
    *
      /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ class std::list<int,std::allocator<int> > m_Container

  /* this+0x28 */ bool m_bOK
  public bool isOK()
  public void N2MessageQueue<int>::Post(const int)
  public bool Peek(int &)
  public bool N2MessageQueue<int>::Get(int &)
  public void N2MessageQueue<int>(const class N2MessageQueue<int> &)
  public void N2MessageQueue<int>::N2MessageQueue<int>()
  public void N2MessageQueue<int>::~N2MessageQueue<int>()
  public class N2MessageQueue<int> & operator=(const class N2MessageQueue<int> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2ODBCCtrl {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ void * m_hEnv
  /* this+0xc */ void * m_hDbc
  /* this+0x10 */ bool m_bConnect
  private bool N2ODBCCtrl::Init()
  public bool isOK()
  public bool N2ODBCCtrl::Connect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void N2ODBCCtrl::Disconnect()
  public void * operator void *()
  public const bool isConnect()
  public void N2ODBCCtrl::OutputErrorString(const short, void * const, const char *, const int, const char *)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetErrorString(const short, void * const)
  public void N2ODBCCtrl(const class N2ODBCCtrl &)
  public void N2ODBCCtrl::N2ODBCCtrl()
  public void N2ODBCCtrl::~N2ODBCCtrl()
  public class N2ODBCCtrl & operator=(const class N2ODBCCtrl &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2ODBCHandler {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class N2ODBCCtrl & m_vcODBCCtrl
  /* this+0xc */ void * m_hStmt
  private bool N2ODBCHandler::Init()
  public bool isOK()
  public short N2ODBCHandler::ExecDirect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public short UnBind()
  public short BindCol(unsigned short, short, void *, long, long *)
  public short N2ODBCHandler::BindParameter(unsigned short, short, short, short, unsigned long, short, void *, long, long *)
  public short GetData(unsigned short, short, void *, long, long *)
  public short CloseCursor()
  public short PutData(void *, long)
  public short Fetch()
  public short ParamData(void * *)
  public void * operator void *()
  public void N2ODBCHandler::OutputErrorString(const char *, const int, const char *)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetErrorString()
  public void N2ODBCHandler(const class N2ODBCHandler &)
  public void N2ODBCHandler::N2ODBCHandler(class N2ODBCCtrl &)
  public void N2ODBCHandler::~N2ODBCHandler()
  public void * __vecDelDtor(unsigned int)
}

class N2Object {
    *
  /* this+0x4 */ const unsigned int m_MyID
  public const unsigned int GetMyID()
  public const unsigned short GetMyGroupID()
  public void N2Object(const class N2Object &)
  public void N2Object(const unsigned short)
  public void ~N2Object()
  public void * __vecDelDtor(unsigned int)
}

class N2SyncObject {
    *
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION & m_CS
  public void N2SyncObject::N2SyncObject(struct _RTL_CRITICAL_SECTION &)
  private void N2SyncObject(const class N2SyncObject &)
  private class N2SyncObject & operator=(const class N2SyncObject &)
  public void N2SyncObject::~N2SyncObject()
  public void * __vecDelDtor(unsigned int)
}

class N2SystemMgr {
    *
  /* [0x0003:0x00003b94] */ static  class N2SystemMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  private bool N2SystemMgr::Create()
  private void N2SystemMgr::Destory()
  public const bool N2SystemMgr::isOK()
  public static bool N2SystemMgr::CreateInstance()
  public static void N2SystemMgr::DestoryInstance()
  public void N2SystemMgr(const class N2SystemMgr &)
  private void N2SystemMgr::N2SystemMgr()
  private void N2SystemMgr::~N2SystemMgr()
  public class N2SystemMgr & operator=(const class N2SystemMgr &)
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class N2Thread {
    *
  public const bool isOK()
  public bool N2Thread::Begin()
  public void N2Thread::End()
  public void N2Thread::Resume()
  public void Suspend()
  public unsigned long SetThreadAffinityMask(const unsigned long)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetName()
  public void N2Thread(const class N2Thread &)
  public void N2Thread::N2Thread(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void N2Thread::~N2Thread()
  private static unsigned int N2Thread::ThreadFunctionCaller(void *)
  private unsigned int ThreadFunction()
  private void PostThreadQuitMessage()
  /* this+0x4 */ unsigned long m_ThreadID
  /* this+0x8 */ bool m_bOK
    /* this+0xc */ enum N2Thread::enumState m_State
  /* this+0x10 */ void * m_hThread
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name

  public void * __vecDelDtor(unsigned int)
}

class N3DataTransferMgr {
    *
  public bool isOK()
  public unsigned int Put(class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public unsigned int N3DataTransferMgr::Put(class std::vector<unsigned char,std::allocator<unsigned char> > &)
  public class std::vector<unsigned char,std::allocator<unsigned char> > N3DataTransferMgr::Get(unsigned int)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetStr(unsigned int)
  public static bool N3DataTransferMgr::CreateInstance()
  public static void N3DataTransferMgr::DestroyInstance()
  private void N3DataTransferMgr(class N3DataTransferMgr &)
  private void N3DataTransferMgr::N3DataTransferMgr()
  private void N3DataTransferMgr::~N3DataTransferMgr()
  private class N3DataTransferMgr & operator=(class N3DataTransferMgr &)
  /* [0x0003:0x00003960] */ static  class N3DataTransferMgr * m_cpSelf
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS

      /* this+0x20 */ class std::map<unsigned int,N3DataTransferMgr::lcData,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3DataTransferMgr::lcData> > > m_DataMap

    public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class N3DataTransferMgr::lcData {
    *
  public void N3DataTransferMgr::lcData::lcData(const class N3DataTransferMgr::lcData &)
  public void lcData(class std::vector<unsigned char,std::allocator<unsigned char> > &, unsigned long)
  public void lcData()
  public void N3DataTransferMgr::lcData::~lcData()
  /* this+0x4 */ class std::vector<unsigned char,std::allocator<unsigned char> > m_data

  /* this+0x14 */ unsigned long m_Time
  public class N3DataTransferMgr::lcData & operator=(const class N3DataTransferMgr::lcData &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct N3IPAddapter::__l2::threadBuffer {
}

class N3IPAddr {
    *
  public static bool IsPrivateIP(unsigned long)
  public static unsigned long GetHostIP(bool)
  public unsigned long operator unsigned long()
  public void Set(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void Set(const unsigned long)
  public void N3IPAddr(const class N3IPAddr &)
  public void N3IPAddr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void N3IPAddr(const unsigned long)
  public void N3IPAddr()
  public void ~N3IPAddr()
  /* this+0x4 */ unsigned long m_IPAddr
  public class N3IPAddr & operator=(const class N3IPAddr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3Inter {
    *
  public void Receive(const unsigned int, const unsigned int, const unsigned int)
  public void N3Inter(const class N3Inter &)
  public void N3Inter()
  public void N3Inter::~N3Inter()
  public class N3Inter & operator=(const class N3Inter &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3MessageMgr {
    *
  public bool isOK()
  public bool N3MessageMgr::Insert(const unsigned int, class N3Inter *)
  public void N3MessageMgr::Remove(const unsigned int, class N3Inter *)
  public bool N3MessageMgr::Post(const unsigned int, const unsigned int, const unsigned int, const unsigned int)
  public static bool N3MessageMgr::CreateInstance()
  public static void N3MessageMgr::DestroyInstance()
  private void N3MessageMgr(const class N3MessageMgr &)
  private void N3MessageMgr::N3MessageMgr()
  private class N3MessageMgr & operator=(const class N3MessageMgr &)
  private void N3MessageMgr::~N3MessageMgr()
  /* [0x0003:0x00003964] */ static  class N3MessageMgr * m_cpSelf
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ bool m_bOK
    /* this+0x20 */ class std::map<unsigned int,N3Inter *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,N3Inter *> > > m_ObjContainer

  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

class N3MessageQueue {
    *
  public bool isOK()
  public void * GetEventObj()
  public void N3MessageQueue::Put(const unsigned int, const unsigned int, const unsigned int)
    public class std::tr1::tuple<bool,unsigned int const ,unsigned int const ,unsigned int const ,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil,std::tr1::_Nil> N3MessageQueue::Get()
  public void Init()
  public void N3MessageQueue(const class N3MessageQueue &)
  public void N3MessageQueue::N3MessageQueue()
  public void N3MessageQueue::~N3MessageQueue()
  public class N3MessageQueue & operator=(const class N3MessageQueue &)
    /* this+0x4 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x1c */ class std::deque<N3MessageQueue::lcData,std::allocator<N3MessageQueue::lcData> > m_Queue

  /* this+0x34 */ void * m_hSemaphore
  /* this+0x38 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3MessageQueue::lcData {
  /* this+0x0 */ unsigned int m_Message
  /* this+0x4 */ unsigned int m_wParam
  /* this+0x8 */ unsigned int m_lParam
  public void lcData(const unsigned int, const unsigned int, const unsigned int)
  public void lcData()
}

class N3ODBCCtrl {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ void * m_hEnv
  /* this+0xc */ void * m_hDbc
  /* this+0x10 */ bool m_bConnect
  private bool N3ODBCCtrl::Init()
  public bool isOK()
  public bool N3ODBCCtrl::Connect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void Disconnect()
  public void * operator void *()
  public const bool isConnect()
  public void N3ODBCCtrl::OutputErrorString(const short, void * const, const char *, const int, const char *)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetErrorString(const short, void * const)
  public void N3ODBCCtrl(const class N3ODBCCtrl &)
  public void N3ODBCCtrl::N3ODBCCtrl()
  public void N3ODBCCtrl::~N3ODBCCtrl()
  public class N3ODBCCtrl & operator=(const class N3ODBCCtrl &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3ODBCHandler {
    *
  /* this+0x4 */ bool m_bOK
  /* this+0x8 */ class N3ODBCCtrl & m_vcODBCCtrl
  /* this+0xc */ void * m_hStmt
  private bool N3ODBCHandler::Init()
  public bool isOK()
  public short N3ODBCHandler::ExecDirect(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public short UnBind()
  public short N3ODBCHandler::BindCol(unsigned short, short, void *, long, long *)
  public short BindParameter(unsigned short, short, short, short, unsigned long, short, void *, long, long *)
  public short GetData(unsigned short, short, void *, long, long *)
  public short CloseCursor()
  public short PutData(void *, long)
  public short N3ODBCHandler::Fetch()
  public short ParamData(void * *)
  public short MoreResults()
  public void * operator void *()
  public void N3ODBCHandler::OutputErrorString(const char *, const int, const char *)
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetErrorString()
  public void N3ODBCHandler(const class N3ODBCHandler &)
  public void N3ODBCHandler::N3ODBCHandler(class N3ODBCCtrl &)
  public void N3ODBCHandler::~N3ODBCHandler()
  public void * __vecDelDtor(unsigned int)
}

class N3Object {
    *
    public unsigned int GetMyID()
  public void N3Object(const class N3Object &)
  public void N3Object::N3Object()
  public class N3Object & operator=(const class N3Object &)
  public void N3Object::~N3Object()
  /* this+0x4 */ const unsigned int m_MyID
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3Scheduler<CZServer> {
    *
    public void N3Scheduler<CZServer>::Process(class CZServer *)
  public void N3Scheduler<CZServer>::Insert(const class std::tr1::shared_ptr<N3SchedulerTask<CZServer> > &)
  public void N3Scheduler<CZServer>::Init()
  public bool IsSchedul(const unsigned long)
  public void N3Scheduler<CZServer>::Delete(const unsigned long)
  public void N3Scheduler<CZServer>(const class N3Scheduler<CZServer> &)
  public void N3Scheduler<CZServer>()
  public void N3Scheduler<CZServer>::~N3Scheduler<CZServer>()
      /* this+0x4 */ class std::multiset<std::tr1::shared_ptr<N3SchedulerTask<CZServer> >,N3Scheduler<CZServer>::lcTaskPriority,std::allocator<std::tr1::shared_ptr<N3SchedulerTask<CZServer> > > > m_Tasks

  public class N3Scheduler<CZServer> & operator=(const class N3Scheduler<CZServer> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3Scheduler<CZServer>::Delete::__l2::CTaskCompare {
}

class N3Scheduler<CZServer>::lcTaskPriority {
  public bool operator()(const class std::tr1::shared_ptr<N3SchedulerTask<CZServer> > &, const class std::tr1::shared_ptr<N3SchedulerTask<CZServer> > &)
}

class N3SchedulerTask<CZServer> {
    *
  /* this+0x4 */ const unsigned long m_Identity
  /* this+0x8 */ unsigned long m_Time
  public unsigned long GetExecuteTime()
  public unsigned long GetIdentity()
  public bool N3SchedulerTask<CZServer>::operator()(class CZServer *)
  private void N3SchedulerTask<CZServer>(const class N3SchedulerTask<CZServer> &)
  private void N3SchedulerTask<CZServer>()
  public void N3SchedulerTask<CZServer>(const unsigned long, const unsigned long)
  public void N3SchedulerTask<CZServer>::~N3SchedulerTask<CZServer>()
  private class N3SchedulerTask<CZServer> & operator=(class N3SchedulerTask<CZServer> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N3SyncObject {
    *
  public void N3SyncObject(const class N3SyncObject &)
  public void N3SyncObject::N3SyncObject(struct _RTL_CRITICAL_SECTION &)
  public void N3SyncObject::~N3SyncObject()
  public class N3SyncObject & operator=(const class N3SyncObject &)
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION & m_CS
  public void * __vecDelDtor(unsigned int)
}

class N3Thread {
    *
  public const bool isOK()
  public bool N3Thread::Begin()
  public void N3Thread::End()
  public void N3Thread::Resume()
  public void Suspend()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > GetName()
  public unsigned long SetThreadAffinityMask(const unsigned long)
  public void N3Thread(const class N3Thread &)
  public void N3Thread::N3Thread(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void N3Thread::~N3Thread()
  public class N3Thread & operator=(const class N3Thread &)
  private static unsigned int N3Thread::ThreadFunctionCaller(void *)
  private unsigned int ThreadFunction()
  private void PostThreadQuitMessage()
  /* this+0x4 */ unsigned long m_ThreadID
  /* this+0x8 */ bool m_bOK
    /* this+0xc */ enum N3Thread::enumState m_State
  /* this+0x10 */ void * m_hThread
  /* this+0x14 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_Name

  public void * __vecDelDtor(unsigned int)
}

class NCriticalErrorLog {
  NFileLog, offset = 0x0

  public bool isOK()
  public static bool NCriticalErrorLog::CreateInstance()
  public static void NCriticalErrorLog::DestroyInstance()
  private void NCriticalErrorLog(const class NCriticalErrorLog &)
  private void NCriticalErrorLog::NCriticalErrorLog()
  private class NCriticalErrorLog & operator=(const class NCriticalErrorLog &)
  private void NCriticalErrorLog::~NCriticalErrorLog()
  /* [0x0003:0x0000395c] */ static  class NCriticalErrorLog * m_cpSelf
  /* this+0x828 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct NEO_PACKAGEITEM::BaseItem {
  /* this+0x0 */ int ITID
  /* this+0x4 */ int Cnt
  /* this+0x8 */ int HireHour
  /* this+0xc */ bool bBroadcasting
  /* this+0xd */ bool bGUID
  public void BaseItem()
  public void BaseItem(const int, const int, const int, const bool, const bool)
}

class NEO_PACKAGEITEM::Box {
  public void Box(const class NEO_PACKAGEITEM::Box &)
  public void Box()
  /* this+0x0 */ const unsigned int BoxID
  public bool operator()(const struct NEO_PACKAGEITEM::InItem &, const struct NEO_PACKAGEITEM::InItem &)
  /* this+0x4 */ int Gift_Number
  /* this+0x8 */ int MaxRandomRate
  /* this+0xc */ class std::vector<NEO_PACKAGEITEM::InItem,std::allocator<NEO_PACKAGEITEM::InItem> > ItemList

  public void ~Box()
  public void * __vecDelDtor(unsigned int)
}

class NEO_PACKAGEITEM::CNeoPackageItem {
  public bool IsCreateInstance()
  public static bool CreateInstance()
  public static void DestroyInstance()
  public void InsertItem(const int, const char *, const struct NEO_PACKAGEITEM::InItem &)
  public enum NEO_PACKAGEITEM::RESULT_VALUES Init()
  public bool IsPackageItem(const int)
  public bool ConvertLua_AddPackageItem(const int, struct NEO_PACKAGEITEM::InItem *, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > UnPack_PackageItem(const int, class NEO_PACKAGEITEM::CPseudoRandom &)
  public const int GetTotalRandom(const int)
  public int GetMaxItem(const int)
  public int GetMaxWeight(const int)
  public bool IsExistLuaFile()
  public bool MakeLuaFile2()
  public void PackageListClear()
  public int PackageItemCount()
  public bool SaveGift_NumberInfo()
  public void SetGiftNumber(const int, const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > &, const int, const int)
  public void UpdatePackageItem(const unsigned short, const class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > &)
  /* this+0x0 */ class NEO_PACKAGEITEM::CPseudoRandom m_Random2

  /* this+0x4 */ bool m_bCreateInstance
  /* [0x0003:0x000038e4] */ static  class NEO_PACKAGEITEM::CNeoPackageItem * m_cpSelf
  public void CNeoPackageItem(const class NEO_PACKAGEITEM::CNeoPackageItem &)
  private void CNeoPackageItem()
  private void ~CNeoPackageItem()
  /* this+0x8 */ class std::map<int,NEO_PACKAGEITEM::Package,std::less<int>,std::allocator<std::pair<int const ,NEO_PACKAGEITEM::Package> > > m_PackageList

  private void DoReset()
  private bool DoMaxRandom()
  private void DoSort()
  private void DoGetMaxCount()
  private void DoGetMaxWeight()
  private void DoGetMaxKind()
  private void convertLua(struct _iobuf *)
  private void UnPack_RandomPackageItem(const class NEO_PACKAGEITEM::Box &, const unsigned int, class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > &)
  private void UnPack_RandomPackageItemV2(const class NEO_PACKAGEITEM::Box &, const unsigned int, class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > &)
  private void UnPack_MustPackageItem(const class NEO_PACKAGEITEM::Box &, class std::vector<NEO_PACKAGEITEM::ProvideItem,std::allocator<NEO_PACKAGEITEM::ProvideItem> > &)
  public class NEO_PACKAGEITEM::CNeoPackageItem & operator=(const class NEO_PACKAGEITEM::CNeoPackageItem &)
  private void * __vecDelDtor(unsigned int)
}

class NEO_PACKAGEITEM::CNeoPackageItem_Lua {
  public void CNeoPackageItem_Lua()
  public void ~CNeoPackageItem_Lua()
  public bool Load_PackageItem()
  public bool Load_Gift_NumberInfo()
  public void * __vecDelDtor(unsigned int)
}

class NEO_PACKAGEITEM::CPseudoRandom {
  public void CPseudoRandom(const unsigned long)
  public void ~CPseudoRandom()
  public int operator()()
  /* this+0x0 */ unsigned long m_seed
  public void __dflt_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

struct NEO_PACKAGEITEM::InItem {
  NEO_PACKAGEITEM::BaseItem, offset = 0x0

  /* this+0x10 */ int Rndrate
  /* this+0x14 */ int Gift_Number
  public void InItem()
}

struct NEO_PACKAGEITEM::Package {
  /* this+0x0 */ int nGetMaxCount
  /* this+0x4 */ int nTotalWeight
  /* this+0x8 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,NEO_PACKAGEITEM::Box,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,NEO_PACKAGEITEM::Box> > > BoxList

  public class NEO_PACKAGEITEM::Box * GetBox(const unsigned int)
  public void Package(const struct NEO_PACKAGEITEM::Package &)
  public void Package()
  public void ~Package()
  public struct NEO_PACKAGEITEM::Package & operator=(const struct NEO_PACKAGEITEM::Package &)
  public void * __vecDelDtor(unsigned int)
}

struct NEO_PACKAGEITEM::ProvideItem {
  NEO_PACKAGEITEM::BaseItem, offset = 0x0

  public void ProvideItem(const int, const int, const int, const bool, const bool, const unsigned int)
  /* this+0x10 */ unsigned int BoxID
}

struct NEO_PACKAGEITEM::`anonymous-namespace'::Randomcmp {
  public const bool operator()(const int, const int)
}

class NFileLog {
    *
  public bool isOK()
  public void NFileLog::SetOutput(const bool)
  public bool NFileLog::GetOutput()
  public void NFileLog::WriteFmt(const char *, const int, const char *, <NoType>)
  private bool NFileLog::Create(const char *, const char *)
  private void NFileLog::DeleteLogFile(const char *, const char *, const int)
  private void MakeCurLogFileName(char *, const int, const unsigned int)
  private unsigned int GetLastSqeucenCnt()
  public void NFileLog(const class NFileLog &)
  public void NFileLog::NFileLog(const char *, const char *, const bool)
  public class NFileLog & operator=(const class NFileLog &)
  public void NFileLog::~NFileLog()
    /* this+0x4 */ bool m_bOK
  /* this+0x5 */ bool m_bOutput
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS

  /* this+0x20 */ char[0x400] m_szLogDir
  /* this+0x420 */ char[0x400] m_szLogFilePrefix
  /* this+0x820 */ unsigned int m_SequenceFileCnt
  /* this+0x824 */ int m_BytesOfWritten
  public void * __vecDelDtor(unsigned int)
}

struct NIPAddapter::__l2::threadBuffer {
}

class NIPAddr {
    *
  public static bool IsPrivateIP(unsigned long)
  public static unsigned long GetHostIP(bool)
  public unsigned long operator unsigned long()
  public void NIPAddr::Set(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void Set(const unsigned long)
  public void NIPAddr(const class NIPAddr &)
  public void NIPAddr::NIPAddr(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void NIPAddr::NIPAddr(const unsigned long)
  public void NIPAddr()
  public void NIPAddr::~NIPAddr()
  /* this+0x4 */ unsigned long m_IPAddr
  public class NIPAddr & operator=(const class NIPAddr &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NLuaState {
    *
  /* this+0x4 */ struct lua_State * m_pLuaState
  /* this+0x8 */ bool m_bOK
  private bool NLuaState::Create()
  private void NLuaState::Destroy()
  public bool isOK()
  public struct lua_State * operator struct lua_State *()
  public struct lua_State * operator()()
  public void NLuaState(const class NLuaState &)
  public void NLuaState::NLuaState()
  public void NLuaState::~NLuaState()
  public class NLuaState & operator=(const class NLuaState &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class NMemoryHelper {
    *
  public void * NMemoryHelper::Get(const int)
  public int GetUsedBytes()
  public void NMemoryHelper(class NMemoryHelper &)
  public void NMemoryHelper(void *, const unsigned int)
  public void NMemoryHelper::~NMemoryHelper()
  public class NMemoryHelper & operator=(class NMemoryHelper &)
  /* this+0x4 */ unsigned char * m_pBuffer
  /* this+0x8 */ int m_maxbytes
  /* this+0xc */ int m_usedbytes
  public void * __vecDelDtor(unsigned int)
}

struct NORMALITEM_EXTRAINFO {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ short count
  /* this+0x8 */ unsigned short WearState
}

struct NORMALITEM_EXTRAINFO2 {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ short count
  /* this+0x8 */ unsigned short WearState
  /* this+0xa */ struct EQUIPSLOTINFO slot

}

struct NOTIFY_USER_POWER_SETTING {
  /* this+0x0 */ struct _GUID Guid

}

class NOutputTextMgr {
  public bool isOK()
  public void NOutputTextMgr::Insert(const class std::basic_string<char,std::char_traits<char>,std::allocator<char> >)
  public void NOutputTextMgr::InsertFmt(const char *, <NoType>)
  public unsigned int NOutputTextMgr::GetMaxLineCnt()
  public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > NOutputTextMgr::GetText(const unsigned int)
  public static bool NOutputTextMgr::CreateInstance()
  public static void NOutputTextMgr::DestroyInstance()
  public void NOutputTextMgr(const class NOutputTextMgr &)
  private void NOutputTextMgr::NOutputTextMgr()
  private void NOutputTextMgr::~NOutputTextMgr()
  /* this+0x0 */ bool m_bOK
  /* this+0x4 */ unsigned int m_LineCnt
  /* this+0x8 */ struct _RTL_CRITICAL_SECTION m_CS

  /* [0x0003:0x00003968] */ static  class NOutputTextMgr * m_cpSelf
  /* this+0x20 */ class std::map<unsigned int,std::vector<char,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::vector<char,std::allocator<char> > > > > m_Note

  public class NOutputTextMgr & operator=(const class NOutputTextMgr &)
  private void * __vecDelDtor(unsigned int)
}

class NSyncObject {
    *
  public void NSyncObject(const class NSyncObject &)
  public void NSyncObject::NSyncObject(struct _RTL_CRITICAL_SECTION &)
  public void NSyncObject::~NSyncObject()
  public class NSyncObject & operator=(const class NSyncObject &)
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION & m_CS
  public void * __vecDelDtor(unsigned int)
}

class NTraceLog {
  NFileLog, offset = 0x0

  public bool isOK()
  public static bool NTraceLog::CreateInstance()
  public static void NTraceLog::DestroyInstance()
  private void NTraceLog(const class NTraceLog &)
  private void NTraceLog::NTraceLog()
  private class NTraceLog & operator=(const class NTraceLog &)
  private void NTraceLog::~NTraceLog()
  /* [0x0003:0x00003b90] */ static  class NTraceLog * m_cpSelf
  /* this+0x828 */ bool m_bOK
  public void __local_vftable_ctor_closure()
  private void * __vecDelDtor(unsigned int)
}

struct Node {
  /* this+0x0 */ struct lua_TValue i_val

  /* this+0x10 */ union TKey i_key

}

struct OTHER_GUILD_INFO {
  /* this+0x0 */ char[0x18] guildname
  /* this+0x18 */ int guildLevel
  /* this+0x1c */ int guildMemberSize
  /* this+0x20 */ int guildRanking
}

struct PACKET_AC_ACCEPT_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ int AuthCode
  /* this+0x8 */ unsigned long AID
  /* this+0xc */ unsigned long userLevel
  /* this+0x10 */ unsigned long lastLoginIP
  /* this+0x14 */ char[0x1a] lastLoginTime
  /* this+0x2e */ unsigned char Sex
}

struct PACKET_AC_ACCEPT_LOGIN2 {
  PACKET_AC_ACCEPT_LOGIN, offset = 0x0

  /* this+0x2f */ int iAccountSID
}

struct PACKET_AC_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ucAnswer
}

struct PACKET_AC_ACK_HASH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_AC_ASK_PNGAMEROOM {
  /* this+0x0 */ short PacketType
}

struct PACKET_AC_EVENT_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long EventItemCount
}

struct PACKET_AC_NOTIFY_ERROR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_AC_OTP_AUTH_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned short LoginResult
}

struct PACKET_AC_OTP_USER {
  /* this+0x0 */ short PacketType
}

struct PACKET_AC_PT_ACCOUNT_INFO {
  /* this+0x0 */ short PacketType
}

struct PACKET_AC_PT_LOGIN_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x9] m_SeedValue
}

struct PACKET_AC_REALNAME_AUTH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned short AccountArea
}

struct PACKET_AC_REFUSE_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
  /* this+0x3 */ char[0x14] blockDate
}

struct PACKET_AC_REFUSE_LOGIN_R2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int ErrorCode
  /* this+0x6 */ char[0x14] blockDate
}

struct PACKET_AC_REQUEST_SECOND_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned long dwSeed
}

struct PACKET_AC_REQ_NEW_USER {
  /* this+0x0 */ short PacketType
}

struct PACKET_AC_SHUTDOWN_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ long Time
}

struct PACKET_AC_SHUTDOWN_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ long Time
  /* this+0x6 */ long ServerTime
}

struct PACKET_AC_SSO_LOGIN_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
}

struct PACKET_AHC_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long[0x4] AuthData
}

struct PACKET_CAH_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long[0x4] AuthData
}

struct PACKET_CA_ACK_NEW_USER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Sex
}

struct PACKET_CA_CLIENT_TYPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short ClientType
  /* this+0x4 */ int nVer
}

struct PACKET_CA_CONNECT_INFO_CHANGED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x18] ID
}

struct PACKET_CA_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x10] HashValue
}

struct PACKET_CA_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x18] Passwd
  /* this+0x36 */ unsigned char clienttype
}

struct PACKET_CA_LOGIN2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x10] PasswdMD5
  /* this+0x2e */ unsigned char clienttype
}

struct PACKET_CA_LOGIN3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x10] PasswdMD5
  /* this+0x2e */ unsigned char clienttype
  /* this+0x2f */ unsigned char ClientInfo
}

struct PACKET_CA_LOGIN4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x10] PasswdMD5
  /* this+0x2e */ unsigned char clienttype
  /* this+0x2f */ char[0xd] macData
}

struct PACKET_CA_LOGIN5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x33] ID
  /* this+0x39 */ unsigned char[0x33] Passwd
  /* this+0x6c */ unsigned char clienttype
}

struct PACKET_CA_LOGIN_CHANNEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x18] Passwd
  /* this+0x36 */ unsigned char clienttype
  /* this+0x37 */ char[0x10] m_szIP
  /* this+0x47 */ unsigned char[0xd] m_szMacAddr
  /* this+0x54 */ unsigned char Channeling_Corp
}

struct PACKET_CA_LOGIN_CHN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long Version
  /* this+0x8 */ unsigned char[0x20] PasswdMD5
  /* this+0x28 */ unsigned char clienttype
}

struct PACKET_CA_LOGIN_PCBANG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
  /* this+0x6 */ unsigned char[0x18] ID
  /* this+0x1e */ unsigned char[0x18] Passwd
  /* this+0x36 */ unsigned char clienttype
  /* this+0x37 */ char[0x10] IP
  /* this+0x47 */ unsigned char[0xd] MacAdress
}

struct PACKET_CA_OTP_AUTH_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x7] OTPCode
}

struct PACKET_CA_PT_ACCOUNT_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short sex
  /* this+0x4 */ short bPoint
  /* this+0x6 */ char[0x22] E_mail
}

struct PACKET_CA_PT_CARDPASS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x1c] m_cardPass
}

struct PACKET_CA_PT_EKEY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x9] m_SeedValue
  /* this+0xb */ char[0x9] m_EKey
}

struct PACKET_CA_PT_EKEY_FAIL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short errorCode
}

struct PACKET_CA_PT_ID_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x15] szPTID
  /* this+0x17 */ char[0x15] szPTNumID
}

struct PACKET_CA_REPLY_PNGAMEROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Permission
}

struct PACKET_CA_REQ_GAME_GUARD_CHECK {
  /* this+0x0 */ short PacketType
}

struct PACKET_CA_REQ_HASH {
  /* this+0x0 */ short PacketType
}

struct PACKET_CA_SSO_LOGIN_REQ {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long Version
  /* this+0x8 */ unsigned char clienttype
  /* this+0x9 */ char[0x18] ID
  /* this+0x21 */ char[0x11] MacAddr
  /* this+0x32 */ char[0xf] IpAddr
}

struct PACKET_CH_AVAILABLE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CH_CHARLIST_REQ {
  /* this+0x0 */ short PacketType
}

struct PACKET_CH_CHECKBOT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long dwAID
  /* this+0x8 */ char[0x18] szStringInfo
}

struct PACKET_CH_DELETE_CHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x28] key
}

struct PACKET_CH_DELETE_CHAR2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x32] key
}

struct PACKET_CH_DELETE_CHAR3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x6] Birth
}

struct PACKET_CH_DELETE_CHAR3_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CH_DELETE_CHAR3_EXT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long GID
}

struct PACKET_CH_DELETE_CHAR3_RESERVED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CH_DELETE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] SecondPWIdx
}

struct PACKET_CH_EDIT_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] oldSecondPWIdx
  /* this+0xa */ char[0x4] newSecondPWIdx
}

struct PACKET_CH_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int AuthCode
  /* this+0xa */ unsigned long userLevel
  /* this+0xe */ unsigned short clientType
  /* this+0x10 */ unsigned char Sex
}

struct PACKET_CH_ENTER2 {
  PACKET_CH_ENTER, offset = 0x0

  /* this+0x11 */ char[0x10] macData
  /* this+0x21 */ int iAccountSID
}

struct PACKET_CH_ENTER_CHECKBOT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CH_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ClientType
  /* this+0x3 */ unsigned char[0x10] HashValue
}

struct PACKET_CH_MAKE_CHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x18] name
  /* this+0x1a */ unsigned char Str
  /* this+0x1b */ unsigned char Agi
  /* this+0x1c */ unsigned char Vit
  /* this+0x1d */ unsigned char Int
  /* this+0x1e */ unsigned char Dex
  /* this+0x1f */ unsigned char Luk
  /* this+0x20 */ unsigned char CharNum
  /* this+0x21 */ short headPal
  /* this+0x23 */ short head
}

struct PACKET_CH_MAKE_CHAR_NOT_STATS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x18] name
  /* this+0x1a */ unsigned char CharNum
  /* this+0x1b */ short headPal
  /* this+0x1d */ short head
}

struct PACKET_CH_MAKE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] SecondPWIdx
}

struct PACKET_CH_NOT_AVAILABLE_SECOND_PASSWD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] SecondPWIdx
}

struct PACKET_CH_REQ_CHANGE_CHARACTERNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwGID
  /* this+0x6 */ char[0x18] szCharName
}

struct PACKET_CH_REQ_CHANGE_CHARACTER_SLOT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short beforeCharNum
  /* this+0x4 */ short AfterCharNum
  /* this+0x6 */ short CurChrSlotCnt
}

struct PACKET_CH_REQ_CHANGE_CHARNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwGID
}

struct PACKET_CH_REQ_CHARINFO_PER_PAGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long SeqNum
}

struct PACKET_CH_REQ_IS_VALID_CHARNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwAID
  /* this+0x6 */ unsigned long dwGID
  /* this+0xa */ char[0x18] szCharName
}

struct PACKET_CH_SECOND_PASSWD_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x4] SecondPWIdx
}

struct PACKET_CH_SELECT_ACCESSIBLE_MAPNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char CharNum
  /* this+0x3 */ unsigned char mapListNum
}

struct PACKET_CH_SELECT_CHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char CharNum
}

struct PACKET_CH_SELECT_CHAR_GOINGTOBEUSED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwAID
  /* this+0x6 */ int nCountSelectedChar
  /* this+0xa */ unsigned long[0x9] ardwSelectedGID
}

struct PACKET_CH_WAITING_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int AuthCode
  /* this+0xa */ unsigned long userLevel
  /* this+0xe */ unsigned short clientType
  /* this+0x10 */ unsigned char Sex
}

struct PACKET_COLLECTORDEAD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ServerID
}

struct PACKET_CS_REQ_ENCRYPTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char encCount
  /* this+0x3 */ char decCount
}

struct PACKET_CZ_ACK_CASH_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
  /* this+0x4 */ unsigned char[0x10] Password
  /* this+0x14 */ unsigned char[0x10] NewPassword
}

struct PACKET_CZ_ACK_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_CZ_ACK_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long[0x4] AuthData
}

struct PACKET_CZ_ACK_GUILD_NAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GuildID
  /* this+0x6 */ char[0x18] szGuildName
}

struct PACKET_CZ_ACK_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ReqAID
  /* this+0x6 */ unsigned long ReqGID
  /* this+0xa */ int Result
}

struct PACKET_CZ_ACK_SELECT_DEALTYPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned char type
}

struct PACKET_CZ_ACK_STORE_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
  /* this+0x4 */ unsigned char[0x10] Password
  /* this+0x14 */ unsigned char[0x10] NewPassword
}

struct PACKET_CZ_ACTIVE_QUEST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long questID
  /* this+0x6 */ bool active
}

struct PACKET_CZ_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
}

struct PACKET_CZ_AGREE_STARPLACE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char which
}

struct PACKET_CZ_ALCHEMIST_RANK {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long otherAID
  /* this+0x6 */ int answer
}

struct PACKET_CZ_AUCTION_ADD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NowMoney
  /* this+0x6 */ unsigned long MaxMoney
  /* this+0xa */ short DeleteHour
}

struct PACKET_CZ_AUCTION_ADD_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AuctionID
}

struct PACKET_CZ_AUCTION_ADD_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_AUCTION_BUY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AuctionID
  /* this+0x6 */ unsigned long Money
}

struct PACKET_CZ_AUCTION_CREATE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
}

struct PACKET_CZ_AUCTION_ITEM_SEARCH {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
  /* this+0x4 */ unsigned long AuctionID
  /* this+0x8 */ char[0x18] Name
  /* this+0x20 */ unsigned short Page
}

struct PACKET_CZ_AUCTION_REQ_MY_INFO {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
}

struct PACKET_CZ_AUCTION_REQ_MY_SELL_STOP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AuctionID
}

struct PACKET_CZ_BATTLEFIELD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_BATTLE_FIELD_LIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_BLACKSMITH_RANK {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_BLOCKING_PLAY_CANCEL {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_BOT_CHECK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int IsBot
}

struct PACKET_CZ_BROADCAST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_CANCEL_BATTLE_FIELD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
}

struct PACKET_CZ_CANCEL_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CANCEL_LOCKON {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CANCEL_MERGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CHANGE_CHATROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short size
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ char[0x8] passwd
}

struct PACKET_CZ_CHANGE_DIRECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short headDir
  /* this+0x4 */ unsigned char dir
}

struct PACKET_CZ_CHANGE_DIRECTION2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short headDir
  /* this+0x4 */ unsigned char dir
}

struct PACKET_CZ_CHANGE_EFFECTSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int EffectState
}

struct PACKET_CZ_CHANGE_GROUPEXPOPTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long expOption
}

struct PACKET_CZ_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_CHANGE_MAPTYPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short xPos
  /* this+0x4 */ short yPos
  /* this+0x6 */ short type
}

struct PACKET_CZ_CHOOSE_MENU {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned char num
}

struct PACKET_CZ_CHOPOKGI {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CLAN_CHAT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_CLIENT_VERSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ long clientVer
}

struct PACKET_CZ_CLOSE_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_CZ_CLOSE_SEARCH_STORE_INFO {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CLOSE_SIMPLECASH_SHOP {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CLOSE_STORE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CLOSE_WINDOW {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_COMMAND_MER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
  /* this+0x4 */ char command
}

struct PACKET_CZ_COMMAND_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char cSub
}

struct PACKET_CZ_CONCLUDE_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_CONFIG {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_CZ_CONFIG::enumConfig Config
  /* this+0x6 */ int Value
}

struct PACKET_CZ_CONTACTNPC {
      /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned char type
  public void Crypt(unsigned int)
}

struct PACKET_CZ_CREATE_CHATROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short size
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ char[0x8] passwd
}

struct PACKET_CZ_DEATH_QUESTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Qanswer
}

struct PACKET_CZ_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_CZ_DISCONNECT_ALL_CHARACTER {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_DORIDORI {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int AuthCode
  /* this+0xe */ unsigned long clientTime
  /* this+0x12 */ unsigned char Sex
}

struct PACKET_CZ_ENTER2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int AuthCode
  /* this+0xe */ unsigned long clientTime
  /* this+0x12 */ unsigned char Sex
}

struct PACKET_CZ_EQUIPWIN_MICROSCOPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_EXEC_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_EXE_HASHCHECK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ClientType
  /* this+0x3 */ unsigned char[0x10] HashValue
}

struct PACKET_CZ_EXIT_ROOM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_GANGSI_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketSwitch
}

struct PACKET_CZ_GM_FULLSTRIP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long TargetAID
}

struct PACKET_CZ_GPK_AUTH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_GPK_DYNCODE_RELOAD {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long expOption
  /* this+0x6 */ unsigned char ItemPickupRule
  /* this+0x7 */ unsigned char ItemDivisionRule
}

struct PACKET_CZ_GUILD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_GUILD_NOTICE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x3c] subject
  /* this+0x42 */ char[0x78] notice
}

struct PACKET_CZ_GUILD_ZENY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int zeny
}

struct PACKET_CZ_HACKSH_CPX_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short nLength
  /* this+0x6 */ int Ident
}

struct PACKET_CZ_HUNTINGLIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_INPUT_EDITDLG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ int value
}

struct PACKET_CZ_INPUT_EDITDLGSTR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long NAID
}

struct PACKET_CZ_INVENTORY_TAB {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ bool NORMALorPRIVATE
}

struct PACKET_CZ_IRMAIL_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct IRMAILID MailID

  public void PACKET_CZ_IRMAIL_LIST()
}

struct PACKET_CZ_IRMAIL_SEND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
      /* this+0x4 */ char[0x18] ReceiveName
  /* this+0x1c */ char[0x28] Title
  /* this+0x44 */ int Zeny
  /* this+0x48 */ struct PACKET_CZ_IRMAIL_SEND::tagItem[0xa] Item
}

struct PACKET_CZ_IRMAIL_SEND::tagItem {
  /* this+0x0 */ short index
  /* this+0x2 */ short id
  /* this+0x4 */ short cnt
}

struct PACKET_CZ_ITEMLISTWIN_RES {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ enum ItemListWinPacket::Type Type
  /* this+0x8 */ enum ItemListWinPacket::Action Action
}

struct PACKET_CZ_ITEM_CREATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] itemName
}

struct PACKET_CZ_ITEM_PICKUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_CZ_ITEM_PICKUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_CZ_ITEM_THROW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ short count
}

struct PACKET_CZ_ITEM_THROW2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ short count
}

struct PACKET_CZ_JOIN_BABY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int answer
}

struct PACKET_CZ_JOIN_BATTLE_FIELD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short JoinTeam
}

struct PACKET_CZ_JOIN_COUPLE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int answer
}

struct PACKET_CZ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ int answer
}

struct PACKET_CZ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int answer
}

struct PACKET_CZ_KSY_EVENT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_LESSEFFECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int isLess
}

struct PACKET_CZ_MACRO_ITEM_PICKUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_CZ_MACRO_REQUEST_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char action
  /* this+0x3 */ unsigned long targetGID
}

struct PACKET_CZ_MACRO_REQUEST_MOVE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x3] dest
}

struct PACKET_CZ_MACRO_START {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_MACRO_STOP {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_MACRO_USE_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ short selectedLevel
  /* this+0x6 */ unsigned long targetID
}

struct PACKET_CZ_MACRO_USE_SKILL_TOGROUND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ short selectedLevel
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_CZ_MAIL_ADD_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MAIL_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
}

struct PACKET_CZ_MAIL_GET_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
}

struct PACKET_CZ_MAIL_GET_LIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_MAIL_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
}

struct PACKET_CZ_MAIL_RESET_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Type
}

struct PACKET_CZ_MAIL_SEND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x18] ReceiveName
  /* this+0x1c */ char[0x28] Header
}

struct PACKET_CZ_MAKE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] groupName
}

struct PACKET_CZ_MAKE_GROUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] groupName
  /* this+0x1a */ unsigned char ItemPickupRule
  /* this+0x1b */ unsigned char ItemDivisionRule
}

struct PACKET_CZ_MEMORIALDUNGEON_COMMAND {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_CZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command
}

struct PACKET_CZ_MER_COMMAND {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char command
}

struct PACKET_CZ_MONSTER_TALK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char stateId
  /* this+0x7 */ unsigned char skillId
  /* this+0x8 */ unsigned char arg1
}

struct PACKET_CZ_MOVETO_MAP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] mapName
  /* this+0x12 */ short xPos
  /* this+0x14 */ short yPos
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_STORE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_BODY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_BODY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_BODY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_CZ_NOTIFY_ACTORINIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_OPEN_SIMPLE_CASHSHOP_ITEMLIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_PARTY_BOOKING_REQ_DELETE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_PARTY_BOOKING_REQ_REGISTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct PARTY_BOOKING_DETAIL RegisterInfo

}

struct PACKET_CZ_PARTY_BOOKING_REQ_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Level
  /* this+0x4 */ short MapID
  /* this+0x6 */ short Job
  /* this+0x8 */ unsigned long LastIndex
  /* this+0xc */ short ResultCount
}

struct PACKET_CZ_PARTY_BOOKING_REQ_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short[0x6] Job
}

struct PACKET_CZ_PARTY_CONFIG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bRefuseJoinMsg
}

struct PACKET_CZ_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] characterName
}

struct PACKET_CZ_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ bool bAccept
}

struct PACKET_CZ_PARTY_RECRUIT_ACK_RECALL {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
}

struct PACKET_CZ_PARTY_RECRUIT_ADD_FILTERLINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_CZ_PARTY_RECRUIT_CANCEL_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_CZ_PARTY_RECRUIT_REFUSE_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long REFUSE_AID
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_DELETE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_RECALL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_REGISTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct PARTY_RECRUIT_DETAIL regsiterInfo

}

struct PACKET_CZ_PARTY_RECRUIT_REQ_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Level
  /* this+0x4 */ unsigned long LastIndex
  /* this+0x8 */ short ResultCount
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x25] Notice
}

struct PACKET_CZ_PARTY_RECRUIT_REQ_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_CZ_PARTY_RECRUIT_SHOW_EQUIPMENT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long TargetGID
}

struct PACKET_CZ_PARTY_RECRUIT_SUB_FILTERLINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CZ_PC_BUY_CASH_POINT_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ short count
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long UniqueID
}

struct PACKET_CZ_PC_SELL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_PETEGG_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
}

struct PACKET_CZ_PET_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int data
}

struct PACKET_CZ_PKMODE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool isTurnOn
}

struct PACKET_CZ_PROGRESS {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REASSEMBLY_AUTH {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REASSEMBLY_IDENTITY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
    /* this+0x4 */ struct PACKET_CZ_REASSEMBLY_IDENTITY::<unnamed-type-ImportAddressTableModify> ImportAddressTableModify

}

struct PACKET_CZ_REASSEMBLY_IDENTITY::<unnamed-type-ImportAddressTableModify> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char Winsock
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char GDI32
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned char Debugging
  /* this(bf)+0x0:0x3 len(0x1) */ unsigned char ClientCheckSumError
  /* this(bf)+0x0:0x4 len(0x4) */ unsigned char Unused
}

struct PACKET_CZ_RECALL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] AccountName
}

struct PACKET_CZ_RECALL_GID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CharacterName
}

struct PACKET_CZ_RECALL_SSO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long aid
}

struct PACKET_CZ_REGISTER_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_REG_CHANGE_GUILD_POSITIONINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_REMEMBER_WARPPOINT {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REMOVE_AID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] AccountName
}

struct PACKET_CZ_REMOVE_AID_SSO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long aid
}

struct PACKET_CZ_RENAME_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] szName
}

struct PACKET_CZ_REPLY_ENTRY_QUEUE_ADMISSION {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
}

struct PACKET_CZ_REPLY_LOBBY_ADMISSION {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
  /* this+0x1b */ char[0x18] LobbyName
}

struct PACKET_CZ_REQMAKINGHOMUN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool result
}

struct PACKET_CZ_REQMAKINGITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct MAKABLEITEM_INFO info

}

struct PACKET_CZ_REQNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQNAME2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQNAME_BYGID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CZ_REQNAME_BYGID2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CZ_REQUEST_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetGID
  /* this+0x6 */ unsigned char action
}

struct PACKET_CZ_REQUEST_ACT2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetGID
  /* this+0x6 */ unsigned char action
}

struct PACKET_CZ_REQUEST_ACTNPC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned char action
}

struct PACKET_CZ_REQUEST_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_REQUEST_CHAT_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_CZ_REQUEST_MOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x3] dest
}

struct PACKET_CZ_REQUEST_MOVE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char[0x3] dest
}

struct PACKET_CZ_REQUEST_MOVENPC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char[0x3] dest
}

struct PACKET_CZ_REQUEST_MOVETOOWNER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_CZ_REQUEST_QUIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQUEST_TIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long clientTime
}

struct PACKET_CZ_REQUEST_TIME2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long clientTime
}

struct PACKET_CZ_REQ_ACCOUNTNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long MyAID
  /* this+0xa */ unsigned long MyGID
}

struct PACKET_CZ_REQ_BAN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int AID
  /* this+0xa */ int GID
  /* this+0xe */ char[0x28] reasonDesc
}

struct PACKET_CZ_REQ_BATTLE_STATE_MONITOR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
}

struct PACKET_CZ_REQ_BEFORE_WORLD_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_BUY_FROMMC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_CARTOFF {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_CHANGECART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short num
}

struct PACKET_CZ_REQ_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_REQ_CLICK_TO_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
}

struct PACKET_CZ_REQ_CLOSESTORE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_CLOSE_BUYING_STORE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long OpponentGDID
  /* this+0x6 */ int Relation
}

struct PACKET_CZ_REQ_DISCONNECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_CZ_REQ_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x28] key
}

struct PACKET_CZ_REQ_EMOTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
}

struct PACKET_CZ_REQ_ENTER_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long roomID
  /* this+0x6 */ char[0x8] passwd
}

struct PACKET_CZ_REQ_ENTRY_QUEUE_APPLY {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short ApplyType
  /* this+0x4 */ char[0x18] EntryQueueName
}

struct PACKET_CZ_REQ_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
}

struct PACKET_CZ_REQ_ENTRY_QUEUE_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
}

struct PACKET_CZ_REQ_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_EXPEL_GROUP_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] characterName
}

struct PACKET_CZ_REQ_EXPEL_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
}

struct PACKET_CZ_REQ_GIVE_MANNER_BYNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CharName
}

struct PACKET_CZ_REQ_GIVE_MANNER_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long otherAID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ short point
}

struct PACKET_CZ_REQ_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GDID
}

struct PACKET_CZ_REQ_GUILD_MEMBER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GID
}

struct PACKET_CZ_REQ_GUILD_MENU {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Type
}

struct PACKET_CZ_REQ_GUILD_MENUINTERFACE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_GUILD_NAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GuildID
}

struct PACKET_CZ_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_ITEMCOMPOSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short cardIndex
  /* this+0x4 */ short equipIndex
}

struct PACKET_CZ_REQ_ITEMCOMPOSITION_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short cardIndex
}

struct PACKET_CZ_REQ_ITEMIDENTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
}

struct PACKET_CZ_REQ_ITEMREPAIR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct REPAIRITEM_INFO TargetItemInfo

}

struct PACKET_CZ_REQ_JOIN_BABY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_JOIN_COUPLE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_CZ_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long MyAID
  /* this+0xa */ unsigned long MyGID
}

struct PACKET_CZ_REQ_JOIN_GUILD2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] characterName
}

struct PACKET_CZ_REQ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_LEAVE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int AID
  /* this+0xa */ int GID
  /* this+0xe */ char[0x28] reasonDesc
}

struct PACKET_CZ_REQ_MAIL_RETURN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
  /* this+0x6 */ char[0x18] ReceiveName
}

struct PACKET_CZ_REQ_MAKE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] GName
}

struct PACKET_CZ_REQ_MAKINGARROW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short id
}

struct PACKET_CZ_REQ_MAKINGITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short mkType
  /* this+0x4 */ unsigned short id
}

struct PACKET_CZ_REQ_MERGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_CZ_REQ_NEXT_SCRIPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_CZ_REQ_OPENSTORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x50] storeName
}

struct PACKET_CZ_REQ_OPENSTORE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x50] storeName
  /* this+0x54 */ bool result
}

struct PACKET_CZ_REQ_OPEN_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long LimitZeny
  /* this+0x8 */ unsigned char result
  /* this+0x9 */ char[0x50] storeName
}

struct PACKET_CZ_REQ_OPEN_MEMBER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int AID
}

struct PACKET_CZ_REQ_PARTY_NAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long PartyID
}

struct PACKET_CZ_REQ_PVPPOINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_CZ_REQ_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short RankingType
}

struct PACKET_CZ_REQ_REMAINTIME {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_ROLE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long role
  /* this+0x6 */ char[0x18] name
}

struct PACKET_CZ_REQ_SCHEDULER_CASHITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_SE_CASH_TAB_CODE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short tab_code
}

struct PACKET_CZ_REQ_STATUS {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_STATUS_GM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CharName
}

struct PACKET_CZ_REQ_TAKEOFF_EQUIP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
}

struct PACKET_CZ_REQ_TRADE_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long makerAID
  /* this+0x8 */ unsigned long StoreID
}

struct PACKET_CZ_REQ_USER_COUNT {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_REQ_WEAPONREFINE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Index
}

struct PACKET_CZ_REQ_WEAR_EQUIP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
}

struct PACKET_CZ_REQ_WEAR_EQUIP_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long wearLocation
}

struct PACKET_CZ_REQ_WHISPER_LIST {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_RESET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_CZ_RESTART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
}

struct PACKET_CZ_SEARCH_STORE_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char StoreType
  /* this+0x5 */ unsigned long maxPrice
  /* this+0x9 */ unsigned long minPrice
  /* this+0xd */ unsigned char ItemIDListSize
  /* this+0xe */ unsigned char CardIDListSize
}

struct PACKET_CZ_SEARCH_STORE_INFO_NEXT_PAGE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_SEEK_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Option
}

struct PACKET_CZ_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Job
  /* this+0x6 */ unsigned long Level
  /* this+0xa */ char[0x10] mapName
  /* this+0x1a */ unsigned long Option
}

struct PACKET_CZ_SELECTAUTOSPELL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int SKID
}

struct PACKET_CZ_SELECTCART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Identity
  /* this+0x6 */ unsigned char type
}

struct PACKET_CZ_SELECT_PETEGG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
}

struct PACKET_CZ_SELECT_WARPPOINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ char[0x10] mapName
}

struct PACKET_CZ_SETTING_WHISPER_PC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
  /* this+0x1a */ unsigned char type
}

struct PACKET_CZ_SETTING_WHISPER_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
}

struct PACKET_CZ_SE_CASHSHOP_CLOSE {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_SE_CASHSHOP_OPEN {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_SE_PC_BUY_CASHITEM_LIST {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short item_count
}

struct PACKET_CZ_SHIFT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CharacterName
}

struct PACKET_CZ_SHORTCUT_KEY_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ struct tagShortCutKey ShortCutKey

}

struct PACKET_CZ_SIMPLE_BUY_CASH_POINT_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ short count
}

struct PACKET_CZ_SIMPLE_CASH_BTNSHOW {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_SKILL_SELECT_RESPONSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_ZC_SKILL_SELECT_REQUEST::enumWHY why
  /* this+0x6 */ unsigned short SKID
}

struct PACKET_CZ_SRPACKETR2_START {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ProtectFactor
}

struct PACKET_CZ_SSILIST_ITEM_CLICK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long SSI_ID
  /* this+0xa */ unsigned short ITID
}

struct PACKET_CZ_STANDING_RESURRECTION {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_STATUS_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short statusID
  /* this+0x4 */ unsigned char changeAmount
}

struct PACKET_CZ_TAEKWON_RANK {
  /* this+0x0 */ short PacketType
}

struct PACKET_CZ_TRYCAPTURE_MONSTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
}

struct PACKET_CZ_TRYCOLLECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
}

struct PACKET_CZ_UPGRADE_SKILLLEVEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
}

struct PACKET_CZ_USE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long AID
}

struct PACKET_CZ_USE_ITEM2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long AID
}

struct PACKET_CZ_USE_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ unsigned long targetID
}

struct PACKET_CZ_USE_SKILL2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ unsigned long targetID
}

struct PACKET_CZ_USE_SKILL_TOGROUND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_CZ_USE_SKILL_TOGROUND2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_CZ_USE_SKILL_TOGROUND_WITHTALKBOX {
  PACKET_CZ_USE_SKILL_TOGROUND, offset = 0x0

  /* this+0xa */ char[0x50] contents
}

struct PACKET_CZ_USE_SKILL_TOGROUND_WITHTALKBOX2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short selectedLevel
  /* this+0x4 */ unsigned short SKID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
  /* this+0xa */ char[0x50] contents
}

struct PACKET_CZ_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x18] receiver
}

struct PACKET_HC_ACCEPT_DELETECHAR {
  /* this+0x0 */ short PacketType
}

struct PACKET_HC_ACCEPT_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_HC_ACCEPT_ENTER2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned char NormalSlotNum
  /* this+0x5 */ unsigned char PremiumSlotNum
  /* this+0x6 */ unsigned char BillingSlotNum
  /* this+0x7 */ unsigned char ProducibleSlotNum
  /* this+0x8 */ unsigned char ValidSlotNum
  /* this+0x9 */ char[0x14] m_extension
}

struct PACKET_HC_ACCEPT_ENTER_BILL_EXT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x14] m_extension
}

struct PACKET_HC_ACCEPT_ENTER_FRANCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned short wExtInfo
}

struct PACKET_HC_ACCEPT_ENTER_NEO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned char TotalSlotNum
  /* this+0x5 */ unsigned char PremiumStartSlot
  /* this+0x6 */ unsigned char PremiumEndSlot
}

struct PACKET_HC_ACCEPT_ENTER_ORG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x14] m_extension
}

struct PACKET_HC_ACCEPT_MAKECHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct CHARACTER_INFO charinfo

}

struct PACKET_HC_ACK_CHANGE_CHARACTERNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwResult
}

struct PACKET_HC_ACK_CHANGE_CHARACTER_SLOT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Reason
  /* this+0x6 */ short AfterChrSlotCnt
}

struct PACKET_HC_ACK_CHANGE_CHARNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short sResult
}

struct PACKET_HC_ACK_CHARINFO_PER_PAGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_HC_ACK_IS_VALID_CHARNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short sResult
}

struct PACKET_HC_AVAILABLE_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
}

struct PACKET_HC_BLOCK_CHARACTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_HC_CHARACTER_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_HC_CHARLIST_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int TotalCnt
}

struct PACKET_HC_CHECKBOT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_HC_CHECKBOT_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char Resut
}

struct PACKET_HC_DELETE_CHAR3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ int Result
  }

struct PACKET_HC_DELETE_CHAR3_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ int Result
  }

struct PACKET_HC_DELETE_CHAR3_RESERVED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ int Result
  /* this+0xa */ long DeleteReservedDate
  }

struct PACKET_HC_DELETE_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
  /* this+0x4 */ unsigned long Seed
}

struct PACKET_HC_EDIT_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
  /* this+0x4 */ unsigned long Seed
}

struct PACKET_HC_MAKE_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
  /* this+0x4 */ unsigned long Seed
}

struct PACKET_HC_NOTIFY_ACCESSIBLE_MAPNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_HC_NOTIFY_ZONESVR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char[0x10] mapName
  /* this+0x16 */ struct ZSERVER_ADDR addr

}

struct PACKET_HC_NOT_AVAILABLE_SECOND_PASSWD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Result
  /* this+0x4 */ unsigned long Seed
}

struct PACKET_HC_QUEUE_ORDER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long m_AID
  /* this+0x8 */ unsigned long m_QueueOrder
}

struct PACKET_HC_REFUSE_DELETECHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_HC_REFUSE_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_HC_REFUSE_MAKECHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_HC_REFUSE_SELECTCHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_HC_REQUEST_CHARACTER_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned long dummyValue
}

struct PACKET_HC_SECOND_PASSWD_LOGIN {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Seed
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned short Result
}

struct PACKET_HC_UPDATE_CHARINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct CHARACTER_INFO charinfo

}

struct PACKET_HC_WAITING_LOGIN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int CurWaitingNum
}

struct PACKET_IM_ACK_EDIT_EXP {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ int Result
  /* this+0x6 */ int Exp
  /* this+0xa */ int Death
  /* this+0xe */ int Drop
}

struct PACKET_IM_CONTROLFAIL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int errorCode
}

struct PACKET_IM_REQ_ALLY_GUILD_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_IM_REQ_GUILD_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GuildID
  /* this+0x6 */ char[0x18] GuildName
  /* this+0x1e */ char GuildLevel
  /* this+0x1f */ int GuildExp
}

struct PACKET_IM_RESULT_GUILD_INFO_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_IM_SERVERLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_IM_SERVERSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct IM_SERVER_STATE serverState

}

struct PACKET_IM_SERVERSTATE_CHANNELING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct IM_SERVER_STATE_CHANNELING serverState

}

struct PACKET_IM_SERVERSTATE_HAN_GAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct IM_SERVER_STATE_HAN_GAME serverState

}

struct PACKET_IZ_ACK_BAN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x18] charName
  /* this+0x26 */ char[0x18] AccountName
  /* this+0x3e */ char[0x28] reasonDesc
}

struct PACKET_IZ_ACK_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_ACK_GUILD_POSITION_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_ACK_LEAVE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x18] charName
  /* this+0x26 */ char[0x28] reasonDesc
}

struct PACKET_IZ_ACK_LOGON {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Type
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
}

struct PACKET_IZ_ACK_MAIL_DELETE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int MailID
  /* this+0xe */ unsigned short Result
}

struct PACKET_IZ_ACK_MAIL_RETURN {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long MailID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ short Result
  /* this+0x10 */ char[0x28] ItemInfo
  /* this+0x38 */ char ItemLen
  /* this+0x39 */ unsigned long Money
  /* this+0x3d */ char[0x18] FromName
}

struct PACKET_IZ_ACK_MAKE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] groupName
  /* this+0x22 */ unsigned char result
}

struct PACKET_IZ_ACK_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] characterName
  /* this+0x1e */ unsigned char answer
}

struct PACKET_IZ_ACK_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long ReqAID
  /* this+0xa */ unsigned long GDID
  /* this+0xe */ unsigned char answer
}

struct PACKET_IZ_ACK_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ unsigned char result
}

struct PACKET_IZ_ADD_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned char answer
  /* this+0xb */ struct GUILDALLYINFO Ally

}

struct PACKET_IZ_ADD_EXP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int Exp
  /* this+0xe */ int MaxUserNum
}

struct PACKET_IZ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long FriendAID
  /* this+0xc */ unsigned long FriendGID
  /* this+0x10 */ char[0x18] Name
}

struct PACKET_IZ_ADD_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned char answer
  /* this+0xb */ struct GUILDALLYINFO Hostile

}

struct PACKET_IZ_ADD_MEMBER_TO_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long receiverAID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long Role
  /* this+0xe */ unsigned char state
  /* this+0xf */ char[0x18] groupName
  /* this+0x27 */ char[0x18] characterName
  /* this+0x3f */ char[0x10] mapName
}

struct PACKET_IZ_ADD_MEMBER_TO_GROUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long receiverAID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long Role
  /* this+0xe */ unsigned char state
  /* this+0xf */ char[0x18] groupName
  /* this+0x27 */ char[0x18] characterName
  /* this+0x3f */ char[0x10] mapName
  /* this+0x4f */ unsigned char ItemPickupRule
  /* this+0x50 */ unsigned char ItemDivisionRule
}

struct PACKET_IZ_AUTH_ACK {
  /* this+0x0 */ short PacketType
}

struct PACKET_IZ_BROADCAST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLen
}

struct PACKET_IZ_BROADCASTING_SPECIAL_ITEM_OBTAIN {
  PACKET_ZC_BROADCASTING_SPECIAL_ITEM_OBTAIN, offset = 0x0

}

struct PACKET_IZ_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long receiverAID
  /* this+0x6 */ unsigned long OldMasterAID
  /* this+0xa */ unsigned long NewMasterAID
}

struct PACKET_IZ_CHAT_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long receiverAID
  /* this+0x8 */ unsigned long senderAID
}

struct PACKET_IZ_CHK_PROCESSTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long InterProcessTime
}

struct PACKET_IZ_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long FriendAID
  /* this+0xa */ unsigned long FriendGID
}

struct PACKET_IZ_DELETE_MEMBER_FROM_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long receiverAID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x18] characterName
  /* this+0x22 */ unsigned char result
}

struct PACKET_IZ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long OpponentGDID
  /* this+0xa */ int Relation
}

struct PACKET_IZ_DISCONNECT_ALL {
  /* this+0x0 */ short PacketType
}

struct PACKET_IZ_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_IZ_DIVORCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] name
}

struct PACKET_IZ_FREE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
}

struct PACKET_IZ_FRIENDS_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_IZ_FRIENDS_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long FriendAID
  /* this+0xa */ unsigned long FriendGID
  /* this+0xe */ bool State
}

struct PACKET_IZ_GET_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
  /* this+0xc */ short emblemVersion
}

struct PACKET_IZ_GROUP_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long expOption
  /* this+0xc */ char[0x18] groupName
}

struct PACKET_IZ_GUILDINFO_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ struct GUILDINFO Data

}

struct PACKET_IZ_GUILD_ALLYINFO_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_GUILD_BANISHINFO_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_GUILD_CHANGEMAXUSER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int maxNum
}

struct PACKET_IZ_GUILD_CHANGEOWNER_AGIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long oldGDID
  /* this+0x6 */ unsigned long newGDID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_IZ_GUILD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
}

struct PACKET_IZ_GUILD_MAP_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_IZ_GUILD_MEMBERINFO_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_GUILD_MEMBER_ADD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ struct GUILDMINFO Info

}

struct PACKET_IZ_GUILD_MPOSITION_TOD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_GUILD_NOTICE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x3c] subject
  /* this+0x42 */ char[0x78] notice
}

struct PACKET_IZ_GUILD_NOTIFYSKILLDATA {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ int isForceSend
  /* this+0xc */ int SkillPoint
}

struct PACKET_IZ_GUILD_ZENY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x10] mapName
  /* this+0x1e */ unsigned char type
  /* this+0x1f */ int zeny
  /* this+0x23 */ unsigned char ret
}

struct PACKET_IZ_GUILD_ZENY_UPDATE_ALL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long Zeny
}

struct PACKET_IZ_INSTANTMAP_ADD3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int ZSID
  /* this+0x6 */ char[0x10] mapName
  /* this+0x16 */ int mapID
  /* this+0x1a */ int mapType
  /* this+0x1e */ bool bPlayerEnter
}

struct PACKET_IZ_INSTANTMAP_CREATE_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int hRequestN2Obj
  /* this+0x6 */ char[0x10] mapName
  /* this+0x16 */ int mapID
  /* this+0x1a */ int mapType
}

struct PACKET_IZ_INSTANTMAP_PLAYER_ENTER3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int mapID
  /* this+0x6 */ bool bPlayerEnter
}

struct PACKET_IZ_INSTANTMAP_REMOVE3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int ZSID
  /* this+0x6 */ int mapID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_IZ_INSTNATMAP_DESTROY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] mapName
  /* this+0x12 */ int mapID
}

struct PACKET_IZ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_IZ_MAIL_RECEIVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long MailID
  /* this+0xa */ char[0x28] Header
  /* this+0x32 */ char[0x18] FromName
}

struct PACKET_IZ_MAIL_REQ_GET_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int MailID
  /* this+0xa */ char[0x28] ItemInfo
  /* this+0x32 */ char ItemLen
  /* this+0x33 */ unsigned long Money
  /* this+0x37 */ char[0x18] FromName
}

struct PACKET_IZ_MAIL_REQ_GET_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ int MailNumber
}

struct PACKET_IZ_MAIL_REQ_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ int MailID
  /* this+0xc */ char[0x28] Header
  /* this+0x34 */ char[0x28] ItemInfo
  /* this+0x5c */ char ItemLen
  /* this+0x5d */ unsigned long Money
  /* this+0x61 */ char[0x18] FromName
  /* this+0x79 */ unsigned long DeleteTime
}

struct PACKET_IZ_MAIL_REQ_SEND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char Result
}

struct PACKET_IZ_MEMORIALDUNGEON_COMMAND {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ enum PACKET_IZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command
}

struct PACKET_IZ_MEMORIALDUNGEON_INFO {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

  /* this+0xa */ char[0x3d] MemorialDungeonName
  /* this+0x47 */ unsigned long DestroyDate
  /* this+0x4b */ unsigned long EnterTimeOutDate
}

struct PACKET_IZ_MEMORIALDUNGEON_INFO2 {
  PACKET_IZ_PARTY_BROADCAST_VAR, offset = 0x0

  /* this+0xc */ unsigned long DestroyDate
  /* this+0x10 */ unsigned long EnterTimeOutDate
}

struct PACKET_IZ_MEMORIALDUNGEON_MSG {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

    /* this+0xa */ enum PACKET_IZ_MEMORIALDUNGEON_MSG::enumNotify Notify
  /* this+0xe */ char[0x3d] MemorialDungeonName
}

struct PACKET_IZ_MEMORIALDUNGEON_MSG2 {
  PACKET_IZ_PARTY_BROADCAST_VAR, offset = 0x0

    /* this+0xc */ enum PACKET_IZ_MEMORIALDUNGEON_MSG2::enumNotify Notify
}

struct PACKET_IZ_MEMORIALDUNGEON_NOTIFY {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

  /* this+0xa */ enum PACKET_ZC_MEMORIALDUNGEON_NOTIFY::enumTYPE Type
  /* this+0xe */ unsigned long EnterLimitDate
}

struct PACKET_IZ_MEMORIALDUNGEON_OPENSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bOpen
  /* this+0x3 */ unsigned long ToGID
  /* this+0x7 */ unsigned long ToAID
}

struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_INFO {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

  /* this+0xa */ char[0x3d] MemorialDungeonName
  /* this+0x47 */ short PriorityOrderNum
}

struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_INFO2 {
  PACKET_IZ_PARTY_BROADCAST_VAR, offset = 0x0

  /* this+0xc */ short PriorityOrderNum
}

struct PACKET_IZ_MEMORIALDUNGEON_SUBSCRIPTION_NOTIFY {
  PACKET_IZ_PARTY_BROADCAST, offset = 0x0

  /* this+0xa */ short PriorityOrderNum
}

struct PACKET_IZ_MEMORIALDUNGEON_SYNC {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x3d] MemorialDungeonName
  /* this+0x3f */ unsigned long hPartyID
  /* this+0x43 */ char[0x18] partyName
  /* this+0x5b */ unsigned long ExistZSID
  /* this+0x5f */ unsigned long hMemorialDungeonID
  /* this+0x63 */ int Factor
  /* this+0x67 */ enum PACKET_IZ_MEMORIALDUNGEON_SYNC::enumEVENT Event
}

struct PACKET_IZ_MEMORIALDUNGEON_SYNC2 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long hPartyID
  /* this+0x8 */ char[0x18] partyName
  /* this+0x20 */ unsigned long ExistZSID
  /* this+0x24 */ unsigned long hMemorialDungeonID
  /* this+0x28 */ int Factor
  /* this+0x2c */ enum PACKET_IZ_MEMORIALDUNGEON_SYNC2::enumEVENT Event
}

struct PACKET_IZ_MEMORIALDUNGEON_VISA {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long ZSID
  /* this+0xe */ char[0x10] mapName
  /* this+0x1e */ int x
  /* this+0x22 */ int y
}

struct PACKET_IZ_MOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MoveType
  /* this+0x6 */ unsigned long SrcID
  /* this+0xa */ unsigned long DestID
  /* this+0xe */ int DestX
  /* this+0x12 */ int DestY
  /* this+0x16 */ char[0x10] MapName
  /* this+0x26 */ char[0x18] CharName
}

struct PACKET_IZ_NOTIFY_MAKERRANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
  /* this+0x4 */ unsigned long[0xa] GID
  /* this+0x2c */ char[0x18][0xa] charname
  /* this+0x11c */ int[0xa] point
}

struct PACKET_IZ_PARTY_BROADCAST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
}

struct PACKET_IZ_PARTY_BROADCAST_VAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_IZ_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] groupName
}

struct PACKET_IZ_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long requestAID
  /* this+0x6 */ char[0x18] characterName
  /* this+0x1e */ enum PACKET_ZC_PARTY_JOIN_REQ_ACK::enumAnswer answer
}

struct PACKET_IZ_PING_LIVE {
  /* this+0x0 */ short PacketType
}

struct PACKET_IZ_REQ_DISORGANIZE_GUILD_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ int result
}

struct PACKET_IZ_REQ_EDIT_EXP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int monitornum
  /* this+0x6 */ int Exp
  /* this+0xa */ int Death
  /* this+0xe */ int Drop
}

struct PACKET_IZ_REQ_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ unsigned long expOption
  /* this+0xe */ unsigned char ItemPickupRule
  /* this+0xf */ unsigned char ItemDivisionRule
}

struct PACKET_IZ_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] groupName
}

struct PACKET_IZ_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x18] guildName
}

struct PACKET_IZ_REQ_SERVERSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int packetNumber
  /* this+0x6 */ int monitorNum
}

struct PACKET_IZ_RESULT_MAKE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned char result
}

struct PACKET_IZ_SEEK_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_IZ_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_IZ_UPDATE_CHARGDID {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Type
  /* this+0x3 */ unsigned long GDID
  /* this+0x7 */ int emblemVer
  /* this+0xb */ int InterSID
  /* this+0xf */ unsigned long GID
  /* this+0x13 */ unsigned long AID
  /* this+0x17 */ int right
  /* this+0x1b */ bool isMaster
  /* this+0x1c */ char[0x18] GuildName
}

struct PACKET_IZ_UPDATE_CHARSTAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned long AID
  /* this+0xe */ int status
  /* this+0x12 */ short sex
  /* this+0x14 */ short head
  /* this+0x16 */ short headPalette
  /* this+0x18 */ short job
  /* this+0x1a */ int Level
}

struct PACKET_IZ_USER_COUNT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int count
}

struct PACKET_IZ_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long receiverAID
  /* this+0x8 */ unsigned long senderAID
  /* this+0xc */ char[0x18] sender
  /* this+0x24 */ char[0x18] senderAccountName
}

struct PACKET_MI_ALLY_GUILD_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GuildID
}

struct PACKET_MI_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] ID
  /* this+0x1a */ char[0x18] Password
}

struct PACKET_MI_GET_GUILD_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GuildID
}

struct PACKET_MI_GUILD_INFO_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GuildID
}

struct PACKET_MI_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long type
}

struct PACKET_MI_REQ_EDIT_EXP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] ID
  /* this+0x1a */ char[0x18] Passwd
  /* this+0x32 */ int Exp
  /* this+0x36 */ int Death
  /* this+0x3a */ int Drop
}

struct PACKET_MI_REQ_SERVERSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int serverID
  /* this+0x6 */ int packetNumber
}

struct PACKET_MI_SHOTDOWN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int serverID
  /* this+0x6 */ char[0x18] password
}

struct PACKET_MOB_HUNTING {
  /* this+0x0 */ unsigned long questID
  /* this+0x4 */ unsigned long mobGID
  /* this+0x8 */ short maxCount
  /* this+0xa */ short count
}

struct PACKET_PING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_SC_ACK_ENCRYPTION {
  /* this+0x0 */ short PacketType
}

struct PACKET_SC_BILLING_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwAmountRemain
  /* this+0x6 */ unsigned long dwQuantityRemain
  /* this+0xa */ unsigned long dwReserved1
  /* this+0xe */ unsigned long dwReserved2
}

struct PACKET_SC_NOTIFY_BAN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_SERVER_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int SID
}

struct PACKET_SERVER_ENTRY_ACK {
  /* this+0x0 */ short Header
  /* this+0x2 */ int AID
}

struct PACKET_XX_CONNECT {
  /* this+0x0 */ short PacketType
}

struct PACKET_XX_DISCONNECT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_ACCEPT_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long startTime
  /* this+0x6 */ unsigned char[0x3] PosDir
  /* this+0x9 */ unsigned char xSize
  /* this+0xa */ unsigned char ySize
}

struct PACKET_ZC_ACCEPT_ENTER2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long startTime
  /* this+0x6 */ unsigned char[0x3] PosDir
  /* this+0x9 */ unsigned char xSize
  /* this+0xa */ unsigned char ySize
  /* this+0xb */ short font
}

struct PACKET_ZC_ACCEPT_QUIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_ACK_ACCOUNTNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] name
}

struct PACKET_ZC_ACK_ADDITEM_TO_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_AUCTION_ADD_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_BAN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] charName
  /* this+0x1a */ char[0x28] reasonDesc
  /* this+0x42 */ char[0x18] account
}

struct PACKET_ZC_ACK_BAN_GUILD_SSO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] charName
  /* this+0x1a */ char[0x28] reasonDesc
}

struct PACKET_ZC_ACK_BATTLE_STATE_MONITOR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short PlayCount
  /* this+0x8 */ short BattleState
  /* this+0xa */ short TeamCount_A
  /* this+0xc */ short TeamCount_B
  /* this+0xe */ short MyCount
  /* this+0x10 */ short JoinTeam
}

struct PACKET_ZC_ACK_BEFORE_WORLD_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] WorldName
  /* this+0x1a */ char[0x18] CharName
}

struct PACKET_ZC_ACK_CHANGE_GUILD_POSITIONINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_ACK_CLAN_LEAVE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_ACK_CREATE_CHATROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_DISCONNECT_CHARACTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x28] reasonDesc
}

struct PACKET_ZC_ACK_DISORGANIZE_GUILD_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int reason
}

struct PACKET_ZC_ACK_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
}

struct PACKET_ZC_ACK_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
}

struct PACKET_ZC_ACK_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_EXCHANGE_ITEM2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short level
}

struct PACKET_ZC_ACK_GIVE_MANNER_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long result
}

struct PACKET_ZC_ACK_GUILD_MEMBER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct GUILD_MEMBER_INFO Info

}

struct PACKET_ZC_ACK_GUILD_MENUINTERFACE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int guildMemuFlag
}

struct PACKET_ZC_ACK_ITEMCOMPOSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short equipIndex
  /* this+0x4 */ short cardIndex
  /* this+0x6 */ unsigned char result
}

struct PACKET_ZC_ACK_ITEMIDENTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_ITEMLIST_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long makerAID
  /* this+0x8 */ unsigned long StoreID
  /* this+0xc */ int limitZeny
}

struct PACKET_ZC_ACK_ITEMREFINING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short result
  /* this+0x4 */ short itemIndex
  /* this+0x6 */ short refiningLevel
}

struct PACKET_ZC_ACK_ITEMREPAIR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_LEAVE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] charName
  /* this+0x1a */ char[0x28] reasonDesc
}

struct PACKET_ZC_ACK_MAIL_ADD_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Index
  /* this+0x4 */ unsigned char result
}

struct PACKET_ZC_ACK_MAIL_DELETE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
  /* this+0x6 */ unsigned short Result
}

struct PACKET_ZC_ACK_MAIL_RETURN {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ int MailID
  /* this+0x6 */ short Result
}

struct PACKET_ZC_ACK_MAKE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_MERGE_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short item_index
  /* this+0x4 */ unsigned short item_count
  /* this+0x6 */ unsigned char Result
}

struct PACKET_ZC_ACK_PARTY_NAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long PartyID
  /* this+0x6 */ char[0x18] szPartyName
}

struct PACKET_ZC_ACK_PVPPOINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ struct PVPINFO PVP

}

struct PACKET_ZC_ACK_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short RankingType
  /* this+0x4 */ char[0x18][0xa] CharName
  /* this+0xf4 */ int[0xa] Point
  /* this+0x11c */ int myPoint
}

struct PACKET_ZC_ACK_REMEMBER_WARPPOINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char errorCode
}

struct PACKET_ZC_ACK_REQMAKINGITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short result
  /* this+0x4 */ unsigned short ITID
}

struct PACKET_ZC_ACK_REQNAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] CName
}

struct PACKET_ZC_ACK_REQNAMEALL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] CName
  /* this+0x1e */ char[0x18] PName
  /* this+0x36 */ char[0x18] GName
  /* this+0x4e */ char[0x18] RName
}

struct PACKET_ZC_ACK_REQNAME_BYGID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] CName
}

struct PACKET_ZC_ACK_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char answer
}

struct PACKET_ZC_ACK_REQ_CHANGE_MEMBERS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_ACK_REQ_DISCONNECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short result
}

struct PACKET_ZC_ACK_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACK_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] characterName
  /* this+0x1a */ unsigned char answer
}

struct PACKET_ZC_ACK_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char answer
}

struct PACKET_ZC_ACK_SCHEDULER_CASHITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short ItemCount
  /* this+0x6 */ short TabCode
}

struct PACKET_ZC_ACK_SE_CASH_ITEM_LIST {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short item_count
}

struct PACKET_ZC_ACK_SE_CASH_ITEM_LIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long OpenIdentity
  /* this+0x8 */ short item_count
}

struct PACKET_ZC_ACK_STATUS_GM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char str
  /* this+0x3 */ unsigned char standardStr
  /* this+0x4 */ unsigned char agi
  /* this+0x5 */ unsigned char standardAgi
  /* this+0x6 */ unsigned char vit
  /* this+0x7 */ unsigned char standardVit
  /* this+0x8 */ unsigned char Int
  /* this+0x9 */ unsigned char standardInt
  /* this+0xa */ unsigned char dex
  /* this+0xb */ unsigned char standardDex
  /* this+0xc */ unsigned char luk
  /* this+0xd */ unsigned char standardLuk
  /* this+0xe */ short attPower
  /* this+0x10 */ short refiningPower
  /* this+0x12 */ short max_mattPower
  /* this+0x14 */ short min_mattPower
  /* this+0x16 */ short itemdefPower
  /* this+0x18 */ short plusdefPower
  /* this+0x1a */ short mdefPower
  /* this+0x1c */ short plusmdefPower
  /* this+0x1e */ short hitSuccessValue
  /* this+0x20 */ short avoidSuccessValue
  /* this+0x22 */ short plusAvoidSuccessValue
  /* this+0x24 */ short criticalSuccessValue
  /* this+0x26 */ short ASPD
  /* this+0x28 */ short plusASPD
}

struct PACKET_ZC_ACK_TAKEOFF_EQUIP_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long wearLocation
    /* this+0x8 */ unsigned char result
}

struct PACKET_ZC_ACK_TOUSESKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long NUM
  /* this+0x8 */ bool result
  /* this+0x9 */ unsigned char cause
  public int GetItemID()
  public int GetItemNum()
  public void SetItem(const int, const int)
  public int GetComboSKID()
  public void SetComboSkillID(const int)
  public void SetSpiritsNum(const int)
  public int GetSpiritsNum()
  public void SetWeaponClass(const int)
  public int GetWeaponClass()
}

struct PACKET_ZC_ACK_WEAPONREFINE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int msg
  /* this+0x6 */ unsigned short ITID
}

struct PACKET_ZC_ACK_WEAR_EQUIP_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned long wearLocation
  /* this+0x8 */ unsigned short wItemSpriteNumber
    /* this+0xa */ unsigned char result
}

struct PACKET_ZC_ACK_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_ACTION_FAILURE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short errorCode
}

struct PACKET_ZC_ACTIVE_QUEST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long questID
  /* this+0x6 */ bool active
}

struct PACKET_ZC_ADD_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int count
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_EXCHANGE_ITEM2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ int count
  /* this+0x9 */ bool IsIdentified
  /* this+0xa */ bool IsDamaged
  /* this+0xb */ unsigned char refiningLevel
  /* this+0xc */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_FRIENDS_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GID
  /* this+0xc */ char[0x18] Name
}

struct PACKET_ZC_ADD_ITEM_TO_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
  /* this+0x8 */ unsigned short ITID
  /* this+0xa */ bool IsIdentified
  /* this+0xb */ bool IsDamaged
  /* this+0xc */ unsigned char refiningLevel
  /* this+0xd */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_ITEM_TO_CART2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
  /* this+0x8 */ unsigned short ITID
  /* this+0xa */ unsigned char type
  /* this+0xb */ bool IsIdentified
  /* this+0xc */ bool IsDamaged
  /* this+0xd */ unsigned char refiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_ITEM_TO_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
  /* this+0x8 */ unsigned short ITID
  /* this+0xa */ bool IsIdentified
  /* this+0xb */ bool IsDamaged
  /* this+0xc */ unsigned char refiningLevel
  /* this+0xd */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_ITEM_TO_STORE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
  /* this+0x8 */ unsigned short ITID
  /* this+0xa */ unsigned char type
  /* this+0xb */ bool IsIdentified
  /* this+0xc */ bool IsDamaged
  /* this+0xd */ unsigned char refiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_ADD_MEMBER_TO_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long Role
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned char state
  /* this+0xf */ char[0x18] groupName
  /* this+0x27 */ char[0x18] characterName
  /* this+0x3f */ char[0x10] mapName
}

struct PACKET_ZC_ADD_MEMBER_TO_GROUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long Role
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned char state
  /* this+0xf */ char[0x18] groupName
  /* this+0x27 */ char[0x18] characterName
  /* this+0x3f */ char[0x10] mapName
  /* this+0x4f */ unsigned char ItemPickupRule
  /* this+0x50 */ unsigned char ItemDivisionRule
}

struct PACKET_ZC_ADD_QUEST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long questID
  /* this+0x6 */ bool active
  /* this+0x7 */ long quest_svrTime
  /* this+0xb */ long quest_endTime
  /* this+0xf */ short count
  /* this+0x11 */ struct PACKET_ZC_MISSION_HUNT[0x3] hunt
}

struct PACKET_ZC_ADD_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct RELATED_GUILD_INFO Info

}

struct PACKET_ZC_ADD_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct SKILLINFO data

}

struct PACKET_ZC_AID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_ALCHEMIST_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Point
  /* this+0x6 */ int TotalPoint
}

struct PACKET_ZC_ALCHEMIST_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18][0xa] Name
  /* this+0xf2 */ int[0xa] Point
}

struct PACKET_ZC_ALL_QUEST_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int questCount
}

struct PACKET_ZC_ALL_QUEST_LIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int QuestCount
}

struct PACKET_ZC_ALL_QUEST_MISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int count
}

struct PACKET_ZC_ATTACK_FAILURE_FOR_DISTANCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
  /* this+0x6 */ short targetXPos
  /* this+0x8 */ short targetYPos
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ short currentAttRange
}

struct PACKET_ZC_ATTACK_RANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short currentAttRange
}

struct PACKET_ZC_AUCTION_ACK_MY_SELL_STOP {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_AUCTION_ITEM_REQ_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ int MaxPage
  /* this+0x8 */ int Number
}

struct PACKET_ZC_AUCTION_RESULT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_ZC_AUCTION_WINDOWS {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ int Type
}

struct PACKET_ZC_AUTORUN_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct SKILLINFO data

}

struct PACKET_ZC_AUTOSPELLLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int[0x7] SKID
}

struct PACKET_ZC_BABYMSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MsgNo
}

struct PACKET_ZC_BAN_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_BATTLEFIELD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long accountID
  /* this+0x8 */ char[0x18] name
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_CAMPINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long accountID
  /* this+0x6 */ char[0x18] name
  /* this+0x1e */ short camp
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_HP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long accountID
  /* this+0x6 */ char[0x18] name
  /* this+0x1e */ short hp
  /* this+0x20 */ short maxHp
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short pointCampA
  /* this+0x4 */ short pointCampB
}

struct PACKET_ZC_BATTLEFIELD_NOTIFY_POSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long accountID
  /* this+0x6 */ char[0x18] name
  /* this+0x1e */ unsigned short job
  /* this+0x20 */ short x
  /* this+0x22 */ short y
}

struct PACKET_ZC_BATTLE_FIELD_LIST {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Count
  /* this+0x6 */ short ack_type
}

struct PACKET_ZC_BATTLE_JOIN_DISABLE_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool Enable
}

struct PACKET_ZC_BATTLE_JOIN_NOTI_DEFER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
}

struct PACKET_ZC_BATTLE_NOTI_START_STEP {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short Result
}

struct PACKET_ZC_BLACKSMITH_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Point
  /* this+0x6 */ int TotalPoint
}

struct PACKET_ZC_BLACKSMITH_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18][0xa] Name
  /* this+0xf2 */ int[0xa] Point
}

struct PACKET_ZC_BLADESTOP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long srcAID
  /* this+0x6 */ unsigned long destAID
  /* this+0xa */ int flag
}

struct PACKET_ZC_BOSS_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char infoType
  /* this+0x3 */ int xPos
  /* this+0x7 */ int yPos
  /* this+0xb */ unsigned short minHour
  /* this+0xd */ unsigned short minMinute
  /* this+0xf */ unsigned short maxHour
  /* this+0x11 */ unsigned short maxMinute
  /* this+0x13 */ char[0x33] name
}

struct PACKET_ZC_BROADCAST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_BROADCAST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long fontColor
  /* this+0x8 */ short fontType
  /* this+0xa */ short fontSize
  /* this+0xc */ short fontAlign
  /* this+0xe */ short fontY
}

struct PACKET_ZC_BROADCAST4 {
  /* this+0x0 */ short PakcetType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char Msgtype
  /* this+0x5 */ unsigned long ColorRGB
}

struct PACKET_ZC_BROADCASTING_SPECIAL_ITEM_OBTAIN {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ unsigned short ItemID
}

struct PACKET_ZC_BUYING_STORE_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
  /* this+0x6 */ char[0x50] storeName
}

struct PACKET_ZC_CANCEL_BATTLE_FIELD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short Result
}

struct PACKET_ZC_CANCEL_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_CARTOFF {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_CART_EQUIPMENT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_EQUIPMENT_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_EQUIPMENT_ITEMLIST3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_ITEMLIST_EQUIP {
  PACKET_ZC_INVENTORY_ITEMLIST_EQUIP, offset = 0x0

}

struct PACKET_ZC_CART_ITEMLIST_EQUIP_V5 {
  PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5, offset = 0x0

}

struct PACKET_ZC_CART_ITEMLIST_NORMAL {
  PACKET_ZC_INVENTORY_ITEMLIST_NORMAL, offset = 0x0

}

struct PACKET_ZC_CART_ITEMLIST_NORMAL_V5 {
  PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5, offset = 0x0

}

struct PACKET_ZC_CART_NORMAL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_NORMAL_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_CART_NORMAL_ITEMLIST3 {
  PACKET_ZC_NORMAL_ITEMLIST3, offset = 0x0

}

struct PACKET_ZC_CASH_ITEM_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned short ITID
}

struct PACKET_ZC_CASH_TIME_COUNTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned long RemainSecond
}

struct PACKET_ZC_CHANGESTATE_MER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char type
  /* this+0x3 */ char state
  /* this+0x4 */ int GID
  /* this+0x8 */ int data
}

struct PACKET_ZC_CHANGESTATE_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char type
  /* this+0x3 */ int GID
  /* this+0x7 */ int data
}

struct PACKET_ZC_CHANGE_CHATROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long roomID
  /* this+0xc */ short maxcount
  /* this+0xe */ short curcount
  /* this+0x10 */ unsigned char type
}

struct PACKET_ZC_CHANGE_DIRECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short headDir
  /* this+0x8 */ unsigned char dir
}

struct PACKET_ZC_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long OldMasterAID
  /* this+0x6 */ unsigned long NewMasterAID
}

struct PACKET_ZC_CHANGE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GDID
  /* this+0xa */ short emblemVersion
}

struct PACKET_ZC_CLANINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int EmblemNum
  /* this+0x8 */ char[0x18] ClanName
  /* this+0x20 */ char[0x18] Mastername
  /* this+0x38 */ char[0x10] ManageMap
  /* this+0x48 */ unsigned char Num_AllyClan
  /* this+0x49 */ unsigned char Num_HostileClan
}

struct PACKET_ZC_CLEAR_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_CLOSE_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_CLOSE_STORE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_COMBODELAY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long delayTime
}

struct PACKET_ZC_COMPASS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ int type
  /* this+0xa */ int xPos
  /* this+0xe */ int yPos
  /* this+0x12 */ unsigned char id
  /* this+0x13 */ unsigned long color
}

struct PACKET_ZC_CONCLUDE_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char who
}

struct PACKET_ZC_CONFIG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_CZ_CONFIG::enumConfig Config
  /* this+0x6 */ int Value
}

struct PACKET_ZC_CONFIG_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bOpenEquipmentWin
}

struct PACKET_ZC_CONGRATULATION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_COSTUME_SPRITE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ int value
}

struct PACKET_ZC_COUPLENAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] CoupleName
}

struct PACKET_ZC_COUPLESTATUS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long statusType
  /* this+0x6 */ int defaultStatus
  /* this+0xa */ int plusStatus
}

struct PACKET_ZC_DEATH_QUESTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Qcategory
  /* this+0x4 */ short Qnum
}

struct PACKET_ZC_DELETEITEM_FROM_MCSTORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ short count
}

struct PACKET_ZC_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_ZC_DELETE_ITEM_FROM_BODY {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short DeleteType
  /* this+0x4 */ unsigned short Index
  /* this+0x6 */ short Count
}

struct PACKET_ZC_DELETE_ITEM_FROM_CART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_ZC_DELETE_ITEM_FROM_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ int count
}

struct PACKET_ZC_DELETE_MEMBER_FROM_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x18] characterName
  /* this+0x1e */ unsigned char result
}

struct PACKET_ZC_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long OpponentGDID
  /* this+0x6 */ int Relation
}

struct PACKET_ZC_DEL_QUEST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long questID
}

struct PACKET_ZC_DESTROY_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long roomID
}

struct PACKET_ZC_DEVOTIONLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long myAID
  /* this+0x6 */ unsigned long[0x5] AID
  /* this+0x1a */ short range
}

struct PACKET_ZC_DISAPPEAR_BUYING_STORE_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
}

struct PACKET_ZC_DISAPPEAR_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
}

struct PACKET_ZC_DISPEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_DIVORCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
}

struct PACKET_ZC_EFST_SET_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short hEFST
  /* this+0x8 */ unsigned long Time
  /* this+0xc */ int Val1
  /* this+0x10 */ int Val2
  /* this+0x14 */ int Val3
}

struct PACKET_ZC_EFST_SET_ENTER2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short hEFST
  /* this+0x8 */ unsigned long MaxMS
  /* this+0xc */ unsigned long Time
  /* this+0x10 */ int Val1
  /* this+0x14 */ int Val2
  /* this+0x18 */ int Val3
}

struct PACKET_ZC_EL_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int AID
  /* this+0x6 */ int hp
  /* this+0xa */ int maxHP
  /* this+0xe */ int sp
  /* this+0x12 */ int maxSP
}

struct PACKET_ZC_EL_PAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short var
  /* this+0x4 */ int value
}

struct PACKET_ZC_EMOTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
}

struct PACKET_ZC_ENTER_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long roomID
}

struct PACKET_ZC_ENTRY_QUEUE_INIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_EQUIPITEM_DAMAGED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short wearLocation
  /* this+0x4 */ unsigned long accountID
}

struct PACKET_ZC_EQUIPMENT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_EQUIPMENT_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_EQUIPMENT_ITEMLIST3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_EQUIPWIN_MICROSCOPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ short job
  /* this+0x1e */ short head
  /* this+0x20 */ short accessory
  /* this+0x22 */ short accessory2
  /* this+0x24 */ short accessory3
  /* this+0x26 */ short headpalette
  /* this+0x28 */ short bodypalette
  /* this+0x2a */ unsigned char sex
}

struct PACKET_ZC_EQUIPWIN_MICROSCOPE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ short job
  /* this+0x1e */ short head
  /* this+0x20 */ short accessory
  /* this+0x22 */ short accessory2
  /* this+0x24 */ short accessory3
  /* this+0x26 */ short robe
  /* this+0x28 */ short headpalette
  /* this+0x2a */ short bodypalette
  /* this+0x2c */ unsigned char sex
}

struct PACKET_ZC_EQUIPWIN_MICROSCOPE_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ short job
  /* this+0x1e */ short head
  /* this+0x20 */ short accessory
  /* this+0x22 */ short accessory2
  /* this+0x24 */ short accessory3
  /* this+0x26 */ short robe
  /* this+0x28 */ short headpalette
  /* this+0x2a */ short bodypalette
  /* this+0x2c */ unsigned char sex
}

struct PACKET_ZC_EQUIP_ARROW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
}

struct PACKET_ZC_ES_NOTI_MYINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short esNo
  /* this+0x4 */ char[0x36] esname
}

struct PACKET_ZC_EXCHANGEITEM_UNDO {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_EXEC_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_FAILED_GET_ITEM_FROM_ZONEDA {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_FAILED_OPEN_BUYING_STORE_TO_BUYER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ int total_weight
}

struct PACKET_ZC_FAILED_TRADE_BUYING_STORE_TO_BUYER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_FAILED_TRADE_BUYING_STORE_TO_SELLER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ unsigned short ITID
}

struct PACKET_ZC_FASTMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short targetXpos
  /* this+0x8 */ short targetYpos
}

struct PACKET_ZC_FATIGUE_CHN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Level
  /* this+0x3 */ unsigned long TotalPlayTime
}

struct PACKET_ZC_FEED_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char cRet
  /* this+0x3 */ unsigned short ITID
}

struct PACKET_ZC_FORMATSTRING_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned short msg
}

struct PACKET_ZC_FRIENDS_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_FRIENDS_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ bool State
}

struct PACKET_ZC_GAMEGUARD_LINGO_KEY {
  /* this+0x0 */ short packetType
  /* this+0x2 */ struct PGG_LINGO_KEY_TEMP lingoKey

}

struct PACKET_ZC_GAME_GUARD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long[0x4] AuthData
}

struct PACKET_ZC_GANGSI_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Point
  /* this+0x6 */ int TotalPoint
  /* this+0xa */ short PacketSwitch
}

struct PACKET_ZC_GANGSI_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18][0xa] Name
  /* this+0xf2 */ int[0xa] Point
  /* this+0x11a */ short PacketSwitch
}

struct PACKET_ZC_GPK_AUTH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_GPK_DYNCODE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_GROUPINFO_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long expOption
}

struct PACKET_ZC_GROUP_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] groupName
}

struct PACKET_ZC_GUILD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int GDID
  /* this+0x8 */ int emblemVersion
}

struct PACKET_ZC_GUILD_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GDID
  /* this+0x6 */ int level
  /* this+0xa */ int userNum
  /* this+0xe */ int maxUserNum
  /* this+0x12 */ int userAverageLevel
  /* this+0x16 */ int exp
  /* this+0x1a */ int maxExp
  /* this+0x1e */ int point
  /* this+0x22 */ int honor
  /* this+0x26 */ int virtue
  /* this+0x2a */ int emblemVersion
  /* this+0x2e */ char[0x18] guildname
  /* this+0x46 */ char[0x18] masterName
  /* this+0x5e */ char[0x10] manageLand
}

struct PACKET_ZC_GUILD_INFO2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GDID
  /* this+0x6 */ int level
  /* this+0xa */ int userNum
  /* this+0xe */ int maxUserNum
  /* this+0x12 */ int userAverageLevel
  /* this+0x16 */ int exp
  /* this+0x1a */ int maxExp
  /* this+0x1e */ int point
  /* this+0x22 */ int honor
  /* this+0x26 */ int virtue
  /* this+0x2a */ int emblemVersion
  /* this+0x2e */ char[0x18] guildname
  /* this+0x46 */ char[0x18] masterName
  /* this+0x5e */ char[0x10] manageLand
  /* this+0x6e */ int zeny
}

struct PACKET_ZC_GUILD_MEMBER_MAP_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_ZC_GUILD_NOTICE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x3c] subject
  /* this+0x3e */ char[0x78] notice
}

struct PACKET_ZC_GUILD_SKILLINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short skillPoint
}

struct PACKET_ZC_GUILD_ZENY_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ret
}

struct PACKET_ZC_HACKSH_CPX_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short nLength
  /* this+0x6 */ int Ident
}

struct PACKET_ZC_HACKSH_ERROR_MSG {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short errorType
}

struct PACKET_ZC_HIGHJUMP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_HO_PAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short var
  /* this+0x4 */ int value
}

struct PACKET_ZC_HP_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int HP
  /* this+0xa */ int MaxHP
}

struct PACKET_ZC_HUNTINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Len
}

struct PACKET_ZC_HUNTING_QUEST_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_INFO_REMAINTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Type
  /* this+0x6 */ int RemainTime
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ unsigned short location
  /* this+0x7 */ unsigned short WearState
  /* this+0x9 */ unsigned char RefiningLevel
  /* this+0xa */ struct EQUIPSLOTINFO slot

  /* this+0x12 */ long HireExpireDate
  /* this+0x16 */ unsigned short bindOnEquipType
  /* this+0x18 */ unsigned short wItemSpriteNumber
    /* this+0x1a */ struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP::ITEM::<unnamed-type-Flag> Flag

}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP::ITEM::<unnamed-type-Flag> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char IsIdentified
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char IsDamaged
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned char bPlaceETCTab
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ unsigned long location
  /* this+0x9 */ unsigned long WearState
  /* this+0xd */ unsigned char RefiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

  /* this+0x16 */ long HireExpireDate
  /* this+0x1a */ unsigned short bindOnEquipType
  /* this+0x1c */ unsigned short wItemSpriteNumber
    /* this+0x1e */ struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5::ITEM::<unnamed-type-Flag> Flag

}

struct PACKET_ZC_INVENTORY_ITEMLIST_EQUIP_V5::ITEM::<unnamed-type-Flag> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char IsIdentified
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char IsDamaged
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned char bPlaceETCTab
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ short count
  /* this+0x7 */ unsigned short WearState
  /* this+0x9 */ struct EQUIPSLOTINFO slot

  /* this+0x11 */ long HireExpireDate
    /* this+0x15 */ struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL::ITEM::<unnamed-type-Flag> Flag

}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL::ITEM::<unnamed-type-Flag> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char IsIdentified
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char PlaceETCTab
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ short count
  /* this+0x7 */ unsigned long WearState
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ long HireExpireDate
    /* this+0x17 */ struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5::ITEM::<unnamed-type-Flag> Flag

}

struct PACKET_ZC_INVENTORY_ITEMLIST_NORMAL_V5::ITEM::<unnamed-type-Flag> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char IsIdentified
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned char PlaceETCTab
}

struct PACKET_ZC_INVENTORY_TAB {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ bool NORMALorPRIVATE
}

struct PACKET_ZC_IRMAIL_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct IRMAILID MailID

  public void PACKET_ZC_IRMAIL_NOTIFY()
}

struct PACKET_ZC_IRMAIL_SEND_RES {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_ZC_ISVR_DISCONNECT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_ITEMCOMPOSITION_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_ITEMIDENTIFY_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_ITEMLISTWIN_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ enum ItemListWinPacket::Type Type
}

struct PACKET_ZC_ITEM_DELETE_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ short count
  /* this+0x6 */ int zeny
}

struct PACKET_ZC_ITEM_DISAPPEAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_ZC_ITEM_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ short xPos
  /* this+0xb */ short yPos
  /* this+0xd */ short count
  /* this+0xf */ unsigned char subX
  /* this+0x10 */ unsigned char subY
  public void Crypt()
}

struct PACKET_ZC_ITEM_FALL_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ short xPos
  /* this+0xb */ short yPos
  /* this+0xd */ unsigned char subX
  /* this+0xe */ unsigned char subY
  /* this+0xf */ short count
  public void Crypt()
}

struct PACKET_ZC_ITEM_FALL_ENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ unsigned short type
  /* this+0xa */ bool IsIdentified
  /* this+0xb */ short xPos
  /* this+0xd */ short yPos
  /* this+0xf */ unsigned char subX
  /* this+0x10 */ unsigned char subY
  /* this+0x11 */ short count
}

struct PACKET_ZC_ITEM_PICKUP_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ unsigned short count
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ unsigned short location
  /* this+0x15 */ unsigned char type
  /* this+0x16 */ unsigned char result
}

struct PACKET_ZC_ITEM_PICKUP_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ unsigned short count
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ unsigned short location
  /* this+0x15 */ unsigned char type
  /* this+0x16 */ unsigned char result
  /* this+0x17 */ long HireExpireDate
}

struct PACKET_ZC_ITEM_PICKUP_ACK3 {
  PACKET_ZC_ITEM_PICKUP_ACK2, offset = 0x0

  /* this+0x1b */ unsigned short bindOnEquipType
}

struct PACKET_ZC_ITEM_PICKUP_ACK_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ unsigned short count
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ unsigned long location
  /* this+0x17 */ unsigned char type
  /* this+0x18 */ unsigned char result
  /* this+0x19 */ long HireExpireDate
  /* this+0x1d */ unsigned short bindOnEquipType
}

struct PACKET_ZC_ITEM_PICKUP_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long accountID
  /* this+0x6 */ unsigned short ITID
  /* this+0x8 */ bool IsIdentified
  /* this+0x9 */ bool IsDamaged
  /* this+0xa */ unsigned char refiningLevel
  /* this+0xb */ struct EQUIPSLOTINFO slot

  /* this+0x13 */ unsigned short location
  /* this+0x15 */ unsigned char type
}

struct PACKET_ZC_ITEM_THROW_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short Index
  /* this+0x4 */ short count
}

struct PACKET_ZC_JOIN_BATTLE_FIELD {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long BFNO
  /* this+0x6 */ short JoinTeam
  /* this+0x8 */ short Result
}

struct PACKET_ZC_LESSEFFECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int isLess
}

struct PACKET_ZC_LONGPAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short varID
  /* this+0x4 */ int amount
}

struct PACKET_ZC_MACRO_ITEMPICKUP_FAIL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ITAID
}

struct PACKET_ZC_MAIL_RECEIVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long MailID
  /* this+0x6 */ char[0x28] Header
  /* this+0x2e */ char[0x18] FromName
}

struct PACKET_ZC_MAIL_REQ_GET_ITEM {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_ZC_MAIL_REQ_GET_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ int MailNumber
}

struct PACKET_ZC_MAIL_REQ_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ int MailID
  /* this+0x8 */ char[0x28] Header
  /* this+0x30 */ char[0x18] FromName
  /* this+0x48 */ long DeleteTime
  /* this+0x4c */ unsigned long Money
  /* this+0x50 */ int count
  /* this+0x54 */ unsigned short ITID
  /* this+0x56 */ unsigned short Type
  /* this+0x58 */ bool IsIdentified
  /* this+0x59 */ bool IsDamaged
  /* this+0x5a */ unsigned char refiningLevel
  /* this+0x5b */ struct EQUIPSLOTINFO slot

}

struct PACKET_ZC_MAIL_REQ_SEND {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char Result
}

struct PACKET_ZC_MAIL_WINDOWS {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ int Type
}

struct PACKET_ZC_MAKABLEITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MAKINGARROW_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_MAKINGITEM_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_MAPPROPERTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ short type
}

struct PACKET_ZC_MAPPROPERTY_R2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
    /* this+0x4 */ struct PACKET_ZC_MAPPROPERTY_R2::tagNotifyProperty NotifyProperty

}

struct PACKET_ZC_MAPPROPERTY_R2::tagNotifyProperty {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned int bPARTY
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned int bGUILD
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned int bSIEGE
  /* this(bf)+0x0:0x3 len(0x1) */ unsigned int bUSE_SIMPLE_EFFECT
  /* this(bf)+0x0:0x4 len(0x1) */ unsigned int bDISABLE_LOCKON
  /* this(bf)+0x0:0x5 len(0x1) */ unsigned int bCOUNT_PK
  /* this(bf)+0x0:0x6 len(0x1) */ unsigned int bNO_PARTY_FORMATION
  /* this(bf)+0x0:0x7 len(0x1) */ unsigned int bBATTLEFIELD
  /* this(bf)+0x0:0x8 len(0x1) */ unsigned int bDISABLE_COSTUMEITEM
  /* this(bf)+0x0:0x9 len(0x1) */ unsigned int bUSECART
  /* this(bf)+0x0:0xa len(0x1) */ unsigned int bSUNMOONSTAR_MIRACLE
  /* this(bf)+0x0:0xb len(0x15) */ unsigned int unused
}

struct PACKET_ZC_MCSTORE_NOTMOVEITEM_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MEMBERMGR_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MEMBER_ADD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct GUILD_MEMBER_INFO Info

}

struct PACKET_ZC_MEMBER_EXIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short curcount
  /* this+0x4 */ char[0x18] name
  /* this+0x1c */ unsigned char type
}

struct PACKET_ZC_MEMBER_NEWENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short curcount
  /* this+0x4 */ char[0x18] name
}

struct PACKET_ZC_MEMORIALDUNGEON_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x3d] MemorialDungeonName
  /* this+0x3f */ unsigned long DestroyDate
  /* this+0x43 */ unsigned long EnterTimeOutDate
}

struct PACKET_ZC_MEMORIALDUNGEON_NOTIFY {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_ZC_MEMORIALDUNGEON_NOTIFY::enumTYPE Type
  /* this+0x6 */ unsigned long EnterLimitDate
}

struct PACKET_ZC_MEMORIALDUNGEON_SUBSCRIPTION_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x3d] MemorialDungeonName
  /* this+0x3f */ short PriorityOrderNum
}

struct PACKET_ZC_MEMORIALDUNGEON_SUBSCRIPTION_NOTIFY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PriorityOrderNum
}

struct PACKET_ZC_MENU_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long NAID
}

struct PACKET_ZC_MERGE_ITEM_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MER_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int AID
  /* this+0x6 */ short atk
  /* this+0x8 */ short Matk
  /* this+0xa */ short hit
  /* this+0xc */ short critical
  /* this+0xe */ short def
  /* this+0x10 */ short Mdef
  /* this+0x12 */ short flee
  /* this+0x14 */ short aspd
  /* this+0x16 */ char[0x18] name
  /* this+0x2e */ short level
  /* this+0x30 */ int hp
  /* this+0x34 */ int maxHP
  /* this+0x38 */ int sp
  /* this+0x3c */ int maxSP
  /* this+0x40 */ long ExpireDate
  /* this+0x44 */ short faith
  /* this+0x46 */ int toal_call_num
  /* this+0x4a */ int approval_monster_kill_counter
  /* this+0x4e */ short ATKRange
}

struct PACKET_ZC_MER_PAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short var
  /* this+0x4 */ int value
}

struct PACKET_ZC_MER_PROPERTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short atk
  /* this+0x4 */ short Matk
  /* this+0x6 */ short hit
  /* this+0x8 */ short critical
  /* this+0xa */ short def
  /* this+0xc */ short Mdef
  /* this+0xe */ short flee
  /* this+0x10 */ short aspd
  /* this+0x12 */ char[0x18] name
  /* this+0x2a */ short level
  /* this+0x2c */ short hp
  /* this+0x2e */ short maxHP
  /* this+0x30 */ short sp
  /* this+0x32 */ short maxSP
  /* this+0x34 */ long ExpireDate
  /* this+0x38 */ short faith
  /* this+0x3a */ int toal_call_num
  /* this+0x3e */ int approval_monster_kill_counter
}

struct PACKET_ZC_MICROSCOPE {
  PACKET_ZC_INVENTORY_ITEMLIST_EQUIP, offset = 0x0

  /* this+0x4 */ char[0x18] characterName
  /* this+0x1c */ short job
  /* this+0x1e */ short head
  /* this+0x20 */ short accessory
  /* this+0x22 */ short accessory2
  /* this+0x24 */ short accessory3
  /* this+0x26 */ short robe
  /* this+0x28 */ short headpalette
  /* this+0x2a */ short bodypalette
  /* this+0x2c */ unsigned char sex
}

struct PACKET_ZC_MILLENNIUMSHIELD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short num
  /* this+0x8 */ short state
}

struct PACKET_ZC_MISSION_HUNT {
  /* this+0x0 */ unsigned long mobGID
  /* this+0x4 */ short huntCount
  /* this+0x6 */ char[0x18] mobName
}

struct PACKET_ZC_MONSTER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short job
  /* this+0x4 */ short level
  /* this+0x6 */ short size
  /* this+0x8 */ int hp
  /* this+0xc */ short def
  /* this+0xe */ short raceType
  /* this+0x10 */ short mdefPower
  /* this+0x12 */ short property
    /* this+0x14 */ struct PACKET_ZC_MONSTER_INFO::<unnamed-type-propertyTable> propertyTable

}

struct PACKET_ZC_MONSTER_INFO::<unnamed-type-propertyTable> {
  /* this+0x0 */ unsigned char water
  /* this+0x1 */ unsigned char earth
  /* this+0x2 */ unsigned char fire
  /* this+0x3 */ unsigned char wind
  /* this+0x4 */ unsigned char poison
  /* this+0x5 */ unsigned char saint
  /* this+0x6 */ unsigned char dark
  /* this+0x7 */ unsigned char mental
  /* this+0x8 */ unsigned char undead
}

struct PACKET_ZC_MONSTER_TALK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char stateId
  /* this+0x7 */ unsigned char skillId
  /* this+0x8 */ unsigned char arg1
}

struct PACKET_ZC_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short msg
}

struct PACKET_ZC_MSG_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ int MSGID
}

struct PACKET_ZC_MSG_STATE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ bool state
}

struct PACKET_ZC_MSG_STATE_CHANGE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ bool state
  /* this+0x9 */ unsigned long RemainMS
  /* this+0xd */ int[0x3] val
}

struct PACKET_ZC_MSG_STATE_CHANGE3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ bool state
  /* this+0x9 */ unsigned long MaxMS
  /* this+0xd */ unsigned long RemainMS
  /* this+0x11 */ int[0x3] val
}

struct PACKET_ZC_MSG_VALUE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short msg
  /* this+0x4 */ int value
}

struct PACKET_ZC_MVP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_MVP_GETTING_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
}

struct PACKET_ZC_MVP_GETTING_SPECIAL_EXP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long exp
}

struct PACKET_ZC_MYGUILD_BASIC_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_MYITEMLIST_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ int limitZeny
}

struct PACKET_ZC_NAVIGATION_ACTIVE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Type
  /* this+0x3 */ unsigned char SetType
  /* this+0x4 */ bool Hide
  /* this+0x5 */ char[0x10] MapName
  /* this+0x15 */ short xPos
  /* this+0x17 */ short yPos
  /* this+0x19 */ short sprIndex
}

struct PACKET_ZC_NORMAL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_NORMAL_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_NORMAL_ITEMLIST3 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_NORMAL_ITEMLIST3::ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char type
  /* this+0x5 */ bool IsIdentified
  /* this+0x6 */ short count
  /* this+0x8 */ unsigned short WearState
  /* this+0xa */ struct EQUIPSLOTINFO slot

  /* this+0x12 */ long HireExpireDate
}

struct PACKET_ZC_NOTIFY_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned long startTime
  /* this+0xe */ int attackMT
  /* this+0x12 */ int attackedMT
  /* this+0x16 */ short damage
  /* this+0x18 */ short count
  /* this+0x1a */ unsigned char action
  /* this+0x1b */ short leftDamage
}

struct PACKET_ZC_NOTIFY_ACT2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned long startTime
  /* this+0xe */ int attackMT
  /* this+0x12 */ int attackedMT
  /* this+0x16 */ int damage
  /* this+0x1a */ short count
  /* this+0x1c */ unsigned char action
  /* this+0x1d */ int leftDamage
}

struct PACKET_ZC_NOTIFY_ACT3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned long startTime
  /* this+0xe */ int attackMT
  /* this+0x12 */ int attackedMT
  /* this+0x16 */ int damage
  /* this+0x1a */ unsigned char IsSPDamage
  /* this+0x1b */ short count
  /* this+0x1d */ unsigned char action
  /* this+0x1e */ int leftDamage
}

struct PACKET_ZC_NOTIFY_ACTENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ short weapon
  /* this+0x14 */ short accessory
  /* this+0x16 */ short shield
  /* this+0x18 */ short accessory2
  /* this+0x1a */ short accessory3
  /* this+0x1c */ short headpalette
  /* this+0x1e */ short bodypalette
  /* this+0x20 */ short headDir
  /* this+0x22 */ unsigned long GUID
  /* this+0x26 */ short GEmblemVer
  /* this+0x28 */ short honor
  /* this+0x2a */ short virtue
  /* this+0x2c */ bool isPKModeON
  /* this+0x2d */ unsigned char sex
  /* this+0x2e */ unsigned char[0x3] PosDir
  /* this+0x31 */ unsigned char xSize
  /* this+0x32 */ unsigned char ySize
  /* this+0x33 */ unsigned char action
  /* this+0x34 */ unsigned long actStartTime
  /* this+0x38 */ short clevel
}

struct PACKET_ZC_NOTIFY_ACT_POSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long targetGID
  /* this+0xa */ unsigned long startTime
  /* this+0xe */ short xPos
  /* this+0x10 */ short yPos
  /* this+0x12 */ short damage
  /* this+0x14 */ short count
  /* this+0x16 */ unsigned char action
}

struct PACKET_ZC_NOTIFY_BIND_ON_EQUIP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
}

struct PACKET_ZC_NOTIFY_CARTITEM_COUNTINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short curCount
  /* this+0x4 */ short maxCount
  /* this+0x6 */ int curWeight
  /* this+0xa */ int maxWeight
}

struct PACKET_ZC_NOTIFY_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GID
}

struct PACKET_ZC_NOTIFY_CHAT_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_ZC_NOTIFY_CLAN_CHAT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] charName
}

struct PACKET_ZC_NOTIFY_CLAN_CONNECTINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short NumConnect
  /* this+0x4 */ unsigned short NumTotal
}

struct PACKET_ZC_NOTIFY_CRAZYKILLER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int isCrazyKiller
}

struct PACKET_ZC_NOTIFY_EFFECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int effectID
}

struct PACKET_ZC_NOTIFY_EFFECT2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int effectID
}

struct PACKET_ZC_NOTIFY_EFFECT3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int effectID
  /* this+0xa */ int numdata
}

struct PACKET_ZC_NOTIFY_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
}

struct PACKET_ZC_NOTIFY_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
  /* this+0x1a */ int Ranking
}

struct PACKET_ZC_NOTIFY_EXP {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int amount
  /* this+0xa */ unsigned short varID
  /* this+0xc */ short expType
}

struct PACKET_ZC_NOTIFY_FONT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short font
}

struct PACKET_ZC_NOTIFY_GROUNDSKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ short level
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned long startTime
}

struct PACKET_ZC_NOTIFY_HP_TO_GROUPM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short hp
  /* this+0x8 */ short maxhp
}

struct PACKET_ZC_NOTIFY_HP_TO_GROUPM_R2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int hp
  /* this+0xa */ int maxhp
}

struct PACKET_ZC_NOTIFY_INITCHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ short Style
  /* this+0xa */ unsigned char Item
}

struct PACKET_ZC_NOTIFY_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] EntryQueueName
  /* this+0x1a */ char[0x18] LobbyName
}

struct PACKET_ZC_NOTIFY_MANNER_POINT_GIVEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
  /* this+0x3 */ char[0x18] otherCharName
}

struct PACKET_ZC_NOTIFY_MAPINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_ZC_NOTIFY_MAPPROPERTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_ZC_NOTIFY_MAPPROPERTY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
}

struct PACKET_ZC_NOTIFY_MOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char[0x6] MoveData
  /* this+0xc */ unsigned long moveStartTime
}

struct PACKET_ZC_NOTIFY_MOVEENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ short weapon
  /* this+0x14 */ short accessory
  /* this+0x16 */ unsigned long moveStartTime
  /* this+0x1a */ short shield
  /* this+0x1c */ short accessory2
  /* this+0x1e */ short accessory3
  /* this+0x20 */ short headpalette
  /* this+0x22 */ short bodypalette
  /* this+0x24 */ short headDir
  /* this+0x26 */ unsigned long GUID
  /* this+0x2a */ short GEmblemVer
  /* this+0x2c */ short honor
  /* this+0x2e */ short virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x6] MoveData
  /* this+0x38 */ unsigned char xSize
  /* this+0x39 */ unsigned char ySize
  /* this+0x3a */ short clevel
}

struct PACKET_ZC_NOTIFY_MOVEENTRY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ int weapon
  /* this+0x16 */ short accessory
  /* this+0x18 */ unsigned long moveStartTime
  /* this+0x1c */ short accessory2
  /* this+0x1e */ short accessory3
  /* this+0x20 */ short headpalette
  /* this+0x22 */ short bodypalette
  /* this+0x24 */ short headDir
  /* this+0x26 */ unsigned long GUID
  /* this+0x2a */ short GEmblemVer
  /* this+0x2c */ short honor
  /* this+0x2e */ short virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x6] MoveData
  /* this+0x38 */ unsigned char xSize
  /* this+0x39 */ unsigned char ySize
  /* this+0x3a */ short clevel
}

struct PACKET_ZC_NOTIFY_MOVEENTRY3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char objecttype
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short speed
  /* this+0x9 */ short bodyState
  /* this+0xb */ short healthState
  /* this+0xd */ int effectState
  /* this+0x11 */ short job
  /* this+0x13 */ short head
  /* this+0x15 */ int weapon
  /* this+0x19 */ short accessory
  /* this+0x1b */ unsigned long moveStartTime
  /* this+0x1f */ short accessory2
  /* this+0x21 */ short accessory3
  /* this+0x23 */ short headpalette
  /* this+0x25 */ short bodypalette
  /* this+0x27 */ short headDir
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x6] MoveData
  /* this+0x3d */ unsigned char xSize
  /* this+0x3e */ unsigned char ySize
  /* this+0x3f */ short clevel
}

struct PACKET_ZC_NOTIFY_MOVEENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char objecttype
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short speed
  /* this+0x9 */ short bodyState
  /* this+0xb */ short healthState
  /* this+0xd */ int effectState
  /* this+0x11 */ short job
  /* this+0x13 */ short head
  /* this+0x15 */ int weapon
  /* this+0x19 */ short accessory
  /* this+0x1b */ unsigned long moveStartTime
  /* this+0x1f */ short accessory2
  /* this+0x21 */ short accessory3
  /* this+0x23 */ short headpalette
  /* this+0x25 */ short bodypalette
  /* this+0x27 */ short headDir
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x6] MoveData
  /* this+0x3d */ unsigned char xSize
  /* this+0x3e */ unsigned char ySize
  /* this+0x3f */ short clevel
  /* this+0x41 */ short font
}

struct PACKET_ZC_NOTIFY_MOVEENTRY7 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ unsigned long moveStartTime
  /* this+0x21 */ short accessory2
  /* this+0x23 */ short accessory3
  /* this+0x25 */ short headpalette
  /* this+0x27 */ short bodypalette
  /* this+0x29 */ short headDir
  /* this+0x2b */ unsigned long GUID
  /* this+0x2f */ short GEmblemVer
  /* this+0x31 */ short honor
  /* this+0x33 */ int virtue
  /* this+0x37 */ bool isPKModeON
  /* this+0x38 */ unsigned char sex
  /* this+0x39 */ unsigned char[0x6] MoveData
  /* this+0x3f */ unsigned char xSize
  /* this+0x40 */ unsigned char ySize
  /* this+0x41 */ short clevel
  /* this+0x43 */ short font
}

struct PACKET_ZC_NOTIFY_MOVEENTRY8 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ unsigned long moveStartTime
  /* this+0x21 */ short accessory2
  /* this+0x23 */ short accessory3
  /* this+0x25 */ short headpalette
  /* this+0x27 */ short bodypalette
  /* this+0x29 */ short headDir
  /* this+0x2b */ short robe
  /* this+0x2d */ unsigned long GUID
  /* this+0x31 */ short GEmblemVer
  /* this+0x33 */ short honor
  /* this+0x35 */ int virtue
  /* this+0x39 */ bool isPKModeON
  /* this+0x3a */ unsigned char sex
  /* this+0x3b */ unsigned char[0x6] MoveData
  /* this+0x41 */ unsigned char xSize
  /* this+0x42 */ unsigned char ySize
  /* this+0x43 */ short clevel
  /* this+0x45 */ short font
}

struct PACKET_ZC_NOTIFY_MOVEENTRY9 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ unsigned long moveStartTime
  /* this+0x21 */ short accessory2
  /* this+0x23 */ short accessory3
  /* this+0x25 */ short headpalette
  /* this+0x27 */ short bodypalette
  /* this+0x29 */ short headDir
  /* this+0x2b */ short robe
  /* this+0x2d */ unsigned long GUID
  /* this+0x31 */ short GEmblemVer
  /* this+0x33 */ short honor
  /* this+0x35 */ int virtue
  /* this+0x39 */ bool isPKModeON
  /* this+0x3a */ unsigned char sex
  /* this+0x3b */ unsigned char[0x6] MoveData
  /* this+0x41 */ unsigned char xSize
  /* this+0x42 */ unsigned char ySize
  /* this+0x43 */ short clevel
  /* this+0x45 */ short font
  /* this+0x47 */ int maxHP
  /* this+0x4b */ int HP
  /* this+0x4f */ unsigned char isBoss
}

struct PACKET_ZC_NOTIFY_NEWENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ short weapon
  /* this+0x14 */ short accessory
  /* this+0x16 */ short shield
  /* this+0x18 */ short accessory2
  /* this+0x1a */ short accessory3
  /* this+0x1c */ short headpalette
  /* this+0x1e */ short bodypalette
  /* this+0x20 */ short headDir
  /* this+0x22 */ unsigned long GUID
  /* this+0x26 */ short GEmblemVer
  /* this+0x28 */ short honor
  /* this+0x2a */ short virtue
  /* this+0x2c */ bool isPKModeON
  /* this+0x2d */ unsigned char sex
  /* this+0x2e */ unsigned char[0x3] PosDir
  /* this+0x31 */ unsigned char xSize
  /* this+0x32 */ unsigned char ySize
  /* this+0x33 */ short clevel
}

struct PACKET_ZC_NOTIFY_NEWENTRY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ int weapon
  /* this+0x16 */ short accessory
  /* this+0x18 */ short accessory2
  /* this+0x1a */ short accessory3
  /* this+0x1c */ short headpalette
  /* this+0x1e */ short bodypalette
  /* this+0x20 */ short headDir
  /* this+0x22 */ unsigned long GUID
  /* this+0x26 */ short GEmblemVer
  /* this+0x28 */ short honor
  /* this+0x2a */ short virtue
  /* this+0x2c */ bool isPKModeON
  /* this+0x2d */ unsigned char sex
  /* this+0x2e */ unsigned char[0x3] PosDir
  /* this+0x31 */ unsigned char xSize
  /* this+0x32 */ unsigned char ySize
  /* this+0x33 */ short clevel
}

struct PACKET_ZC_NOTIFY_NEWENTRY3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ int effectState
  /* this+0x10 */ short job
  /* this+0x12 */ short head
  /* this+0x14 */ int weapon
  /* this+0x18 */ short accessory
  /* this+0x1a */ short accessory2
  /* this+0x1c */ short accessory3
  /* this+0x1e */ short headpalette
  /* this+0x20 */ short bodypalette
  /* this+0x22 */ short headDir
  /* this+0x24 */ unsigned long GUID
  /* this+0x28 */ short GEmblemVer
  /* this+0x2a */ short honor
  /* this+0x2c */ int virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x3] PosDir
  /* this+0x35 */ unsigned char xSize
  /* this+0x36 */ unsigned char ySize
  /* this+0x37 */ short clevel
}

struct PACKET_ZC_NOTIFY_NEWENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ int effectState
  /* this+0x10 */ short job
  /* this+0x12 */ short head
  /* this+0x14 */ int weapon
  /* this+0x18 */ short accessory
  /* this+0x1a */ short accessory2
  /* this+0x1c */ short accessory3
  /* this+0x1e */ short headpalette
  /* this+0x20 */ short bodypalette
  /* this+0x22 */ short headDir
  /* this+0x24 */ unsigned long GUID
  /* this+0x28 */ short GEmblemVer
  /* this+0x2a */ short honor
  /* this+0x2c */ int virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x3] PosDir
  /* this+0x35 */ unsigned char xSize
  /* this+0x36 */ unsigned char ySize
  /* this+0x37 */ short clevel
  /* this+0x39 */ short font
}

struct PACKET_ZC_NOTIFY_NEWENTRY5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ unsigned long GUID
  /* this+0x2b */ short GEmblemVer
  /* this+0x2d */ short honor
  /* this+0x2f */ int virtue
  /* this+0x33 */ bool isPKModeON
  /* this+0x34 */ unsigned char sex
  /* this+0x35 */ unsigned char[0x3] PosDir
  /* this+0x38 */ unsigned char xSize
  /* this+0x39 */ unsigned char ySize
  /* this+0x3a */ short clevel
  /* this+0x3c */ short font
}

struct PACKET_ZC_NOTIFY_NEWENTRY6 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ short robe
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x3] PosDir
  /* this+0x3a */ unsigned char xSize
  /* this+0x3b */ unsigned char ySize
  /* this+0x3c */ short clevel
  /* this+0x3e */ short font
}

struct PACKET_ZC_NOTIFY_NEWENTRY7 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ short robe
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x3] PosDir
  /* this+0x3a */ unsigned char xSize
  /* this+0x3b */ unsigned char ySize
  /* this+0x3c */ short clevel
  /* this+0x3e */ short font
  /* this+0x40 */ int maxHP
  /* this+0x44 */ int HP
  /* this+0x48 */ unsigned char isBoss
}

struct PACKET_ZC_NOTIFY_PCBANG {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_NOTIFY_PCBANG_PLAYING_TIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int TimeMinute
}

struct PACKET_ZC_NOTIFY_PKINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int winPoint
  /* this+0x6 */ int losePoint
  /* this+0xa */ char[0x18] killName
  /* this+0x22 */ char[0x18] killedName
  /* this+0x3a */ struct _FILETIME expireTime

}

struct PACKET_ZC_NOTIFY_PLAYERCHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_NOTIFY_PLAYERMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long moveStartTime
  /* this+0x6 */ unsigned char[0x6] MoveData
}

struct PACKET_ZC_NOTIFY_POSITION_TO_GROUPM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_NOTIFY_POSITION_TO_GUILDM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_NOTIFY_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int ranking
  /* this+0xa */ int total
}

struct PACKET_ZC_NOTIFY_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long targetID
  /* this+0xc */ unsigned long startTime
  /* this+0x10 */ int attackMT
  /* this+0x14 */ int attackedMT
  /* this+0x18 */ short damage
  /* this+0x1a */ short level
  /* this+0x1c */ short count
  /* this+0x1e */ unsigned char action
}

struct PACKET_ZC_NOTIFY_SKILL2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long targetID
  /* this+0xc */ unsigned long startTime
  /* this+0x10 */ int attackMT
  /* this+0x14 */ int attackedMT
  /* this+0x18 */ int damage
  /* this+0x1c */ short level
  /* this+0x1e */ short count
  /* this+0x20 */ unsigned char action
}

struct PACKET_ZC_NOTIFY_SKILL_POSITION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long targetID
  /* this+0xc */ unsigned long startTime
  /* this+0x10 */ int attackMT
  /* this+0x14 */ int attackedMT
  /* this+0x18 */ short xPos
  /* this+0x1a */ short yPos
  /* this+0x1c */ short damage
  /* this+0x1e */ short level
  /* this+0x20 */ short count
  /* this+0x22 */ unsigned char action
}

struct PACKET_ZC_NOTIFY_STANDENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char objecttype
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short speed
  /* this+0x9 */ short bodyState
  /* this+0xb */ short healthState
  /* this+0xd */ short effectState
  /* this+0xf */ short job
  /* this+0x11 */ short head
  /* this+0x13 */ short weapon
  /* this+0x15 */ short accessory
  /* this+0x17 */ short shield
  /* this+0x19 */ short accessory2
  /* this+0x1b */ short accessory3
  /* this+0x1d */ short headpalette
  /* this+0x1f */ short bodypalette
  /* this+0x21 */ short headDir
  /* this+0x23 */ unsigned long GUID
  /* this+0x27 */ short GEmblemVer
  /* this+0x29 */ short honor
  /* this+0x2b */ short virtue
  /* this+0x2d */ bool isPKModeON
  /* this+0x2e */ unsigned char sex
  /* this+0x2f */ unsigned char[0x3] PosDir
  /* this+0x32 */ unsigned char xSize
  /* this+0x33 */ unsigned char ySize
  /* this+0x34 */ unsigned char state
  /* this+0x35 */ short clevel
}

struct PACKET_ZC_NOTIFY_STANDENTRY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ short effectState
  /* this+0xe */ short job
  /* this+0x10 */ short head
  /* this+0x12 */ int weapon
  /* this+0x16 */ short accessory
  /* this+0x18 */ short accessory2
  /* this+0x1a */ short accessory3
  /* this+0x1c */ short headpalette
  /* this+0x1e */ short bodypalette
  /* this+0x20 */ short headDir
  /* this+0x22 */ unsigned long GUID
  /* this+0x26 */ short GEmblemVer
  /* this+0x28 */ short honor
  /* this+0x2a */ short virtue
  /* this+0x2c */ bool isPKModeON
  /* this+0x2d */ unsigned char sex
  /* this+0x2e */ unsigned char[0x3] PosDir
  /* this+0x31 */ unsigned char xSize
  /* this+0x32 */ unsigned char ySize
  /* this+0x33 */ unsigned char state
  /* this+0x34 */ short clevel
}

struct PACKET_ZC_NOTIFY_STANDENTRY3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ int effectState
  /* this+0x10 */ short job
  /* this+0x12 */ short head
  /* this+0x14 */ int weapon
  /* this+0x18 */ short accessory
  /* this+0x1a */ short accessory2
  /* this+0x1c */ short accessory3
  /* this+0x1e */ short headpalette
  /* this+0x20 */ short bodypalette
  /* this+0x22 */ short headDir
  /* this+0x24 */ unsigned long GUID
  /* this+0x28 */ short GEmblemVer
  /* this+0x2a */ short honor
  /* this+0x2c */ int virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x3] PosDir
  /* this+0x35 */ unsigned char xSize
  /* this+0x36 */ unsigned char ySize
  /* this+0x37 */ unsigned char state
  /* this+0x38 */ short clevel
}

struct PACKET_ZC_NOTIFY_STANDENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short speed
  /* this+0x8 */ short bodyState
  /* this+0xa */ short healthState
  /* this+0xc */ int effectState
  /* this+0x10 */ short job
  /* this+0x12 */ short head
  /* this+0x14 */ int weapon
  /* this+0x18 */ short accessory
  /* this+0x1a */ short accessory2
  /* this+0x1c */ short accessory3
  /* this+0x1e */ short headpalette
  /* this+0x20 */ short bodypalette
  /* this+0x22 */ short headDir
  /* this+0x24 */ unsigned long GUID
  /* this+0x28 */ short GEmblemVer
  /* this+0x2a */ short honor
  /* this+0x2c */ int virtue
  /* this+0x30 */ bool isPKModeON
  /* this+0x31 */ unsigned char sex
  /* this+0x32 */ unsigned char[0x3] PosDir
  /* this+0x35 */ unsigned char xSize
  /* this+0x36 */ unsigned char ySize
  /* this+0x37 */ unsigned char state
  /* this+0x38 */ short clevel
  /* this+0x3a */ short font
}

struct PACKET_ZC_NOTIFY_STANDENTRY5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ unsigned long GUID
  /* this+0x2b */ short GEmblemVer
  /* this+0x2d */ short honor
  /* this+0x2f */ int virtue
  /* this+0x33 */ bool isPKModeON
  /* this+0x34 */ unsigned char sex
  /* this+0x35 */ unsigned char[0x3] PosDir
  /* this+0x38 */ unsigned char xSize
  /* this+0x39 */ unsigned char ySize
  /* this+0x3a */ unsigned char state
  /* this+0x3b */ short clevel
  /* this+0x3d */ short font
}

struct PACKET_ZC_NOTIFY_STANDENTRY7 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ short robe
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x3] PosDir
  /* this+0x3a */ unsigned char xSize
  /* this+0x3b */ unsigned char ySize
  /* this+0x3c */ unsigned char state
  /* this+0x3d */ short clevel
  /* this+0x3f */ short font
}

struct PACKET_ZC_NOTIFY_STANDENTRY8 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char objecttype
  /* this+0x5 */ unsigned long GID
  /* this+0x9 */ short speed
  /* this+0xb */ short bodyState
  /* this+0xd */ short healthState
  /* this+0xf */ int effectState
  /* this+0x13 */ short job
  /* this+0x15 */ short head
  /* this+0x17 */ int weapon
  /* this+0x1b */ short accessory
  /* this+0x1d */ short accessory2
  /* this+0x1f */ short accessory3
  /* this+0x21 */ short headpalette
  /* this+0x23 */ short bodypalette
  /* this+0x25 */ short headDir
  /* this+0x27 */ short robe
  /* this+0x29 */ unsigned long GUID
  /* this+0x2d */ short GEmblemVer
  /* this+0x2f */ short honor
  /* this+0x31 */ int virtue
  /* this+0x35 */ bool isPKModeON
  /* this+0x36 */ unsigned char sex
  /* this+0x37 */ unsigned char[0x3] PosDir
  /* this+0x3a */ unsigned char xSize
  /* this+0x3b */ unsigned char ySize
  /* this+0x3c */ unsigned char state
  /* this+0x3d */ short clevel
  /* this+0x3f */ short font
  /* this+0x41 */ int maxHP
  /* this+0x45 */ int HP
  /* this+0x49 */ unsigned char isBoss
}

struct PACKET_ZC_NOTIFY_STANDENTRY_NPC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char objecttype
  /* this+0x3 */ unsigned long GID
  /* this+0x7 */ short speed
  /* this+0x9 */ short bodyState
  /* this+0xb */ short healthState
  /* this+0xd */ short effectState
  /* this+0xf */ short head
  /* this+0x11 */ short weapon
  /* this+0x13 */ short accessory
  /* this+0x15 */ short job
  /* this+0x17 */ short shield
  /* this+0x19 */ short accessory2
  /* this+0x1b */ short accessory3
  /* this+0x1d */ short headpalette
  /* this+0x1f */ short bodypalette
  /* this+0x21 */ short headDir
  /* this+0x23 */ bool isPKModeON
  /* this+0x24 */ unsigned char sex
  /* this+0x25 */ unsigned char[0x3] PosDir
  /* this+0x28 */ unsigned char xSize
  /* this+0x29 */ unsigned char ySize
  /* this+0x2a */ short clevel
  public void Crypt()
}

struct PACKET_ZC_NOTIFY_STOREITEM_COUNTINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short curCount
  /* this+0x4 */ short maxCount
}

struct PACKET_ZC_NOTIFY_TIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long time
}

struct PACKET_ZC_NOTIFY_UPDATECHAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ short Style
  /* this+0x8 */ unsigned char Item
}

struct PACKET_ZC_NOTIFY_UPDATEPLAYER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Style
  /* this+0x4 */ unsigned char Item
}

struct PACKET_ZC_NOTIFY_VANISH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
}

struct PACKET_ZC_NOTIFY_WEAPONITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_NPCACK_ENABLE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_NPCACK_MAPMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] mapName
  /* this+0x12 */ short xPos
  /* this+0x14 */ short yPos
}

struct PACKET_ZC_NPCACK_SERVERMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] mapName
  /* this+0x12 */ short xPos
  /* this+0x14 */ short yPos
  /* this+0x16 */ struct ZSERVER_ADDR addr

}

struct PACKET_ZC_NPCSPRITE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ unsigned long value
}

struct PACKET_ZC_NPC_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short packetLength
  /* this+0x4 */ unsigned long accountID
  /* this+0x8 */ unsigned long color
}

struct PACKET_ZC_NPC_SHOWEFST_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int effectState
  /* this+0xa */ int clevel
  /* this+0xe */ int showEFST
}

struct PACKET_ZC_OPENSTORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short itemcount
}

struct PACKET_ZC_OPEN_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char count
}

struct PACKET_ZC_OPEN_EDITDLG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_OPEN_EDITDLGSTR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_OPEN_SEARCH_STORE_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short OpenType
  /* this+0x4 */ unsigned char SearchCntMax
}

struct PACKET_ZC_OTHER_GUILD_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PARTY_BOOKING_ACK_DELETE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_PARTY_BOOKING_ACK_REGISTER {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_PARTY_BOOKING_ACK_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ bool IsExistMoreResult
}

struct PACKET_ZC_PARTY_BOOKING_NOTIFY_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_ZC_PARTY_BOOKING_NOTIFY_INSERT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct PARTY_BOOKING_AD_INFO Info

}

struct PACKET_ZC_PARTY_BOOKING_NOTIFY_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
  /* this+0x6 */ short[0x6] Job
}

struct PACKET_ZC_PARTY_CONFIG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool bRefuseJoinMsg
}

struct PACKET_ZC_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ char[0x18] groupName
}

struct PACKET_ZC_PARTY_JOIN_REQ_ACK {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] characterName
  /* this+0x1a */ enum PACKET_ZC_PARTY_JOIN_REQ_ACK::enumAnswer answer
}

struct PACKET_ZC_PARTY_RECRUIT_ACK_DELETE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_PARTY_RECRUIT_ACK_REGISTER {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
}

struct PACKET_ZC_PARTY_RECRUIT_ACK_SEARCH {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ bool IsExistMoreResult
}

struct PACKET_ZC_PARTY_RECRUIT_ADD_FILTERLINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] CharName
}

struct PACKET_ZC_PARTY_RECRUIT_CANCEL_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long index
}

struct PACKET_ZC_PARTY_RECRUIT_CANCEL_VOLUNTEER_TO_PM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_PARTY_RECRUIT_FAILED_RECALL {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long CallerAID
  /* this+0x6 */ unsigned char Reason
}

struct PACKET_ZC_PARTY_RECRUIT_NOTIFY_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_ZC_PARTY_RECRUIT_NOTIFY_INSERT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct PARTY_RECRUIT_AD_INFO Info

}

struct PACKET_ZC_PARTY_RECRUIT_NOTIFY_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
  /* this+0x6 */ char[0x25] Notice
}

struct PACKET_ZC_PARTY_RECRUIT_PERSONAL_SETTING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int Cost
}

struct PACKET_ZC_PARTY_RECRUIT_RECALL_COST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Money
  /* this+0x6 */ char[0x10] mapName
}

struct PACKET_ZC_PARTY_RECRUIT_REFUSE_VOLUNTEER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Index
}

struct PACKET_ZC_PARTY_RECRUIT_REFUSE_VOLUNTEER_TO_PM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long PM_AID
}

struct PACKET_ZC_PARTY_RECRUIT_SUB_FILTERLINGLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] CharName
}

struct PACKET_ZC_PARTY_RECRUIT_VOLUNTEER_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ int Job
  /* this+0xa */ short Level
  /* this+0xc */ char[0x18] CharName
}

struct PACKET_ZC_PAR_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short varID
  /* this+0x4 */ int count
}

struct PACKET_ZC_PAR_CHANGE_USER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned short varID
  /* this+0x8 */ int count
}

struct PACKET_ZC_PCBANG_EFFECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int ExpFactor
  /* this+0x6 */ int ExpFactor2
  /* this+0xa */ int DropFactor
}

struct PACKET_ZC_PC_CASH_POINT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long CashPoint
}

struct PACKET_ZC_PC_CASH_POINT_UPDATE {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long CashPoint
  /* this+0x6 */ short Error
}

struct PACKET_ZC_PC_PURCHASE_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long UniqueID
}

struct PACKET_ZC_PC_PURCHASE_MYITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_ZC_PC_PURCHASE_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_PC_PURCHASE_RESULT_FROMMC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short index
  /* this+0x4 */ short curcount
  /* this+0x6 */ unsigned char result
}

struct PACKET_ZC_PC_SELL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PC_SELL_RESULT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_PERSONAL_INFOMATION {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Exp
  /* this+0x6 */ short Death
  /* this+0x8 */ short Drop
}

struct PACKET_ZC_PERSONAL_INFOMATION2 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int Exp
  /* this+0x8 */ int Death
  /* this+0xc */ int Drop
}

struct PACKET_ZC_PERSONAL_INFOMATION2::DETAIL_EXP_INFO {
    /* this+0x0 */ unsigned char InfoType
  /* this+0x1 */ int Exp
  /* this+0x5 */ int Death
  /* this+0x9 */ int Drop
}

struct PACKET_ZC_PERSONAL_INFOMATION::DETAIL_EXP_INFO {
    /* this+0x0 */ unsigned char InfoType
  /* this+0x1 */ short Exp
  /* this+0x3 */ short Death
  /* this+0x5 */ short Drop
}

struct PACKET_ZC_PERSONAL_INFOMATION_CHN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Exp
  /* this+0x6 */ short Death
  /* this+0x8 */ short Drop
  /* this+0xa */ short ActivityRate
}

struct PACKET_ZC_PETEGG_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PET_ACT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int GID
  /* this+0x6 */ int data
}

struct PACKET_ZC_PLAY_NPC_BGM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Bgm
}

struct PACKET_ZC_POSITION_ID_NAME_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_POSITION_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_PREMIUM_CAMPAIGN_INFO {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short Count
  /* this+0x6 */ unsigned long PremiumValue
}

class PACKET_ZC_PREMIUM_CAMPAIGN_INFO::PREMIUM_CAMPAIGN_INFO {
  /* this+0x0 */ short Grade
  /* this+0x2 */ float Exp
  /* this+0x6 */ float Death
  /* this+0xa */ float Drp
}

struct PACKET_ZC_PRNPC_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Winner
  /* this+0x3 */ unsigned char Point
}

struct PACKET_ZC_PROGRESS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long color
  /* this+0x6 */ unsigned long time
}

struct PACKET_ZC_PROGRESS_CANCEL {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_PROPERTY_HOMUN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] szName
  /* this+0x1a */ unsigned char bModified
  /* this+0x1b */ short nLevel
  /* this+0x1d */ short nFullness
  /* this+0x1f */ short nRelationship
  /* this+0x21 */ unsigned short ITID
  /* this+0x23 */ short atk
  /* this+0x25 */ short Matk
  /* this+0x27 */ short hit
  /* this+0x29 */ short critical
  /* this+0x2b */ short def
  /* this+0x2d */ short Mdef
  /* this+0x2f */ short flee
  /* this+0x31 */ short aspd
  /* this+0x33 */ short hp
  /* this+0x35 */ short maxHP
  /* this+0x37 */ short sp
  /* this+0x39 */ short maxSP
  /* this+0x3b */ int exp
  /* this+0x3f */ int maxEXP
  /* this+0x43 */ short SKPoint
  /* this+0x45 */ short ATKRange
}

struct PACKET_ZC_PROPERTY_MERCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
  /* this+0x1a */ short level
  /* this+0x1c */ short faith
  /* this+0x1e */ short summonCount
  /* this+0x20 */ short atk
  /* this+0x22 */ short Matk
  /* this+0x24 */ short hit
  /* this+0x26 */ short critical
  /* this+0x28 */ short def
  /* this+0x2a */ short Mdef
  /* this+0x2c */ short flee
  /* this+0x2e */ short aspd
  /* this+0x30 */ short hp
  /* this+0x32 */ short maxHP
  /* this+0x34 */ short sp
  /* this+0x36 */ short maxSP
  /* this+0x38 */ short ATKRange
  /* this+0x3a */ int exp
}

struct PACKET_ZC_PROPERTY_PET {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] szName
  /* this+0x1a */ unsigned char bModified
  /* this+0x1b */ short nLevel
  /* this+0x1d */ short nFullness
  /* this+0x1f */ short nRelationship
  /* this+0x21 */ unsigned short ITID
  /* this+0x23 */ short job
}

struct PACKET_ZC_QUEST_INFO {
  /* this+0x0 */ unsigned long questID
  /* this+0x4 */ bool active
  public void PACKET_ZC_QUEST_INFO()
  public void PACKET_ZC_QUEST_INFO(const unsigned long, const bool)
}

struct PACKET_ZC_QUEST_MISSION_INFO {
  /* this+0x0 */ unsigned long questID
  /* this+0x4 */ long quest_svrTime
  /* this+0x8 */ long quest_endTime
  /* this+0xc */ short count
  /* this+0xe */ struct PACKET_ZC_MISSION_HUNT[0x3] hunt
}

struct PACKET_ZC_QUEST_NOTIFY_EFFECT {
      /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long npcID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
  /* this+0xa */ short effect
  /* this+0xc */ short type
}

struct PACKET_ZC_READ_BOOK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long bookID
  /* this+0x6 */ unsigned long page
}

struct PACKET_ZC_REASSEMBLY_AUTH {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_RECOVERY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short varID
  /* this+0x4 */ short amount
}

struct PACKET_ZC_REFUSE_ENTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char ErrorCode
}

struct PACKET_ZC_REFUSE_ENTER_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_REFUSE_QUIT {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_REPAIRITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZC_REPLY_ACK_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
}

struct PACKET_ZC_REPLY_ACK_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Result
  /* this+0x3 */ char[0x18] EntryQueueName
  /* this+0x1b */ char[0x18] LobbyName
}

struct PACKET_ZC_REPLY_REMAINTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Result
  /* this+0x6 */ int ExpirationDate
  /* this+0xa */ int RemainTime
}

struct PACKET_ZC_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ReqAID
  /* this+0x6 */ unsigned long ReqGID
  /* this+0xa */ char[0x18] Name
}

struct PACKET_ZC_REQ_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long otherAID
  /* this+0x6 */ char[0x18] guildName
}

struct PACKET_ZC_REQ_BABY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] name
}

struct PACKET_ZC_REQ_CASH_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Info
}

struct PACKET_ZC_REQ_COUPLE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] name
}

struct PACKET_ZC_REQ_EXCHANGE_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
}

struct PACKET_ZC_REQ_EXCHANGE_ITEM2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] name
  /* this+0x1a */ unsigned long GID
  /* this+0x1e */ short level
}

struct PACKET_ZC_REQ_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long expOption
  /* this+0x6 */ unsigned char ItemPickupRule
  /* this+0x7 */ unsigned char ItemDivisionRule
}

struct PACKET_ZC_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ char[0x18] groupName
}

struct PACKET_ZC_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x18] guildName
}

struct PACKET_ZC_REQ_STORE_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Info
}

struct PACKET_ZC_REQ_TAKEOFF_EQUIP_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
  /* this+0x6 */ bool result
}

struct PACKET_ZC_REQ_TAKEOFF_EQUIP_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
    /* this+0x6 */ unsigned char result
}

struct PACKET_ZC_REQ_WEAR_EQUIP_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
  /* this+0x6 */ unsigned short wItemSpriteNumber
  /* this+0x8 */ unsigned char result
}

struct PACKET_ZC_REQ_WEAR_EQUIP_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short wearLocation
  /* this+0x6 */ unsigned short wItemSpriteNumber
    /* this+0x8 */ unsigned char result
}

struct PACKET_ZC_RESTART_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
}

struct PACKET_ZC_RESULT_CASH_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ short ErrorCount
}

struct PACKET_ZC_RESULT_MAKE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_RESULT_STORE_PASSWORD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Result
  /* this+0x4 */ short ErrorCount
}

struct PACKET_ZC_RESURRECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short type
}

struct PACKET_ZC_ROLE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long role
  /* this+0x6 */ char[0x18] name
}

struct PACKET_ZC_ROOM_NEWENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long roomID
  /* this+0xc */ short maxcount
  /* this+0xe */ short curcount
  /* this+0x10 */ unsigned char type
}

struct PACKET_ZC_SAY_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long NAID
}

struct PACKET_ZC_SAY_DIALOG2 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long NAID
  /* this+0x8 */ unsigned char type
}

struct PACKET_ZC_SEARCH_STORE_INFO_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ bool IsFirstPage
  /* this+0x5 */ bool IsNexPage
  /* this+0x6 */ unsigned char RemainedSearchCnt
}

struct PACKET_ZC_SEARCH_STORE_INFO_FAILED {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char Reason
}

struct PACKET_ZC_SEEK_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_ZC_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_ZC_SELECTCART {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ int Identity
}

struct PACKET_ZC_SELECT_DEALTYPE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_SETTING_WHISPER_PC {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
  /* this+0x3 */ unsigned char result
}

struct PACKET_ZC_SETTING_WHISPER_STATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
  /* this+0x3 */ unsigned char result
}

struct PACKET_ZC_SE_CASHSHOP_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int cash_point
}

struct PACKET_ZC_SE_CASHSHOP_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int cash_point
  /* this+0x6 */ int free_point
}

struct PACKET_ZC_SE_PC_BUY_CASHITEM_RESULT {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long item_id
  /* this+0x6 */ short result
  /* this+0x8 */ int update_cash_point
}

struct PACKET_ZC_SHANDA_PROTECT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Len
  /* this+0x4 */ short CodeLen
}

struct PACKET_ZC_SHORTCUT_KEY_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct tagShortCutKey[0x1b] ShortCutKey
}

struct PACKET_ZC_SHORTCUT_KEY_LIST_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ struct tagShortCutKey[0x26] ShortCutKey
}

struct PACKET_ZC_SHOWDIGIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char type
  /* this+0x3 */ int value
}

struct PACKET_ZC_SHOWSCRIPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
}

struct PACKET_ZC_SHOW_IMAGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x10] imageName
  /* this+0x12 */ unsigned char type
}

struct PACKET_ZC_SHOW_IMAGE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x40] imageName
  /* this+0x42 */ unsigned char type
}

struct PACKET_ZC_SIMPLE_CASHSHOP_POINT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long CashPoint
  /* this+0x8 */ short md_itemcount
  /* this+0xa */ short md_itemSize
  /* this+0xc */ short best_itemcount
  /* this+0xe */ short best_itemsize
}

struct PACKET_ZC_SIMPLE_CASH_BTNSHOW {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ bool show
}

struct PACKET_ZC_SIMPLE_CASH_POINT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long CashPoint
}

struct PACKET_ZC_SKILLINFO_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
}

struct PACKET_ZC_SKILLINFO_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
}

struct PACKET_ZC_SKILLINFO_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ short level
  /* this+0x6 */ short spcost
  /* this+0x8 */ short attackRange
  /* this+0xa */ bool upgradable
}

struct PACKET_ZC_SKILLINFO_UPDATE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ int type
  /* this+0x8 */ short level
  /* this+0xa */ short spcost
  /* this+0xc */ short attackRange
  /* this+0xe */ bool upgradable
}

struct PACKET_ZC_SKILLMSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MsgNo
}

struct PACKET_ZC_SKILL_DISAPPEAR {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_SKILL_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long creatorAID
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned char job
  /* this+0xf */ bool isVisible
}

struct PACKET_ZC_SKILL_ENTRY2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long creatorAID
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned char job
  /* this+0xf */ bool isVisible
  /* this+0x10 */ bool isContens
  /* this+0x11 */ char[0x50] msg
}

struct PACKET_ZC_SKILL_ENTRY3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long creatorAID
  /* this+0xc */ short xPos
  /* this+0xe */ short yPos
  /* this+0x10 */ unsigned char job
  /* this+0x11 */ char RadiusRange
  /* this+0x12 */ bool isVisible
}

struct PACKET_ZC_SKILL_ENTRY4 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long creatorAID
  /* this+0xc */ short xPos
  /* this+0xe */ short yPos
  /* this+0x10 */ int job
  /* this+0x14 */ char RadiusRange
  /* this+0x15 */ bool isVisible
}

struct PACKET_ZC_SKILL_POSTDELAY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ unsigned long DelayTM
}

struct PACKET_ZC_SKILL_POSTDELAY_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  }

struct PACKET_ZC_SKILL_POSTDELAY_LIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  }

struct PACKET_ZC_SKILL_POSTDELAY_LIST2::tagSkillPostDelay {
  /* this+0x0 */ unsigned short SKID
  /* this+0x2 */ unsigned long MaxDelayTM
  /* this+0x6 */ unsigned long DelayTM
}

struct PACKET_ZC_SKILL_POSTDELAY_LIST::tagSkillPostDelay {
  /* this+0x0 */ unsigned short SKID
  /* this+0x2 */ unsigned long DelayTM
}

struct PACKET_ZC_SKILL_SELECT_REQUEST {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ enum PACKET_ZC_SKILL_SELECT_REQUEST::enumWHY why
}

struct PACKET_ZC_SKILL_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZC_SOUND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] fileName
  /* this+0x1a */ unsigned char act
  /* this+0x1b */ unsigned long term
  /* this+0x1f */ unsigned long NAID
}

struct PACKET_ZC_SPIRITS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short num
}

struct PACKET_ZC_SPIRITS2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short num
}

struct PACKET_ZC_SPIRITS_ATTRIBUTE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short SpritsType
  /* this+0x8 */ short Num
}

struct PACKET_ZC_SPRITE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ unsigned char value
}

struct PACKET_ZC_SPRITE_CHANGE2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned char type
  /* this+0x7 */ int value
}

struct PACKET_ZC_SRPACKETR2_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ProtectFactor
  /* this+0x4 */ unsigned int DeformSeedFactor
  /* this+0x8 */ unsigned int DeformAddFactor
  public void Crypt()
}

struct PACKET_ZC_SSILIST_ITEM_CLICK_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short x
  /* this+0x4 */ short y
}

struct PACKET_ZC_STARPLACE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char which
}

struct PACKET_ZC_STARSKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] mapName
  /* this+0x1a */ int monsterID
  /* this+0x1e */ unsigned char star
  /* this+0x1f */ unsigned char result
}

struct PACKET_ZC_START_BABY {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_START_CAPTURE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_START_COLLECTION {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_START_COUPLE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_STATE_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short bodyState
  /* this+0x8 */ short healthState
  /* this+0xa */ short effectState
  /* this+0xc */ bool isPKModeON
}

struct PACKET_ZC_STATE_CHANGE3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short bodyState
  /* this+0x8 */ short healthState
  /* this+0xa */ int effectState
  /* this+0xe */ bool isPKModeON
}

struct PACKET_ZC_STATUS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short point
  /* this+0x4 */ unsigned char str
  /* this+0x5 */ unsigned char standardStr
  /* this+0x6 */ unsigned char agi
  /* this+0x7 */ unsigned char standardAgi
  /* this+0x8 */ unsigned char vit
  /* this+0x9 */ unsigned char standardVit
  /* this+0xa */ unsigned char Int
  /* this+0xb */ unsigned char standardInt
  /* this+0xc */ unsigned char dex
  /* this+0xd */ unsigned char standardDex
  /* this+0xe */ unsigned char luk
  /* this+0xf */ unsigned char standardLuk
  /* this+0x10 */ short attPower
  /* this+0x12 */ short refiningPower
  /* this+0x14 */ short max_mattPower
  /* this+0x16 */ short min_mattPower
  /* this+0x18 */ short itemdefPower
  /* this+0x1a */ short plusdefPower
  /* this+0x1c */ short mdefPower
  /* this+0x1e */ short plusmdefPower
  /* this+0x20 */ short hitSuccessValue
  /* this+0x22 */ short avoidSuccessValue
  /* this+0x24 */ short plusAvoidSuccessValue
  /* this+0x26 */ short criticalSuccessValue
  /* this+0x28 */ short ASPD
  /* this+0x2a */ short plusASPD
}

struct PACKET_ZC_STATUS_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short statusID
  /* this+0x4 */ unsigned char value
}

struct PACKET_ZC_STATUS_CHANGE_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short statusID
  /* this+0x4 */ bool result
  /* this+0x5 */ unsigned char value
}

struct PACKET_ZC_STOPMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_STOPMOVE_FORCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ short xPos
  /* this+0x8 */ short yPos
}

struct PACKET_ZC_STORE_ENTRY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long makerAID
  /* this+0x6 */ char[0x50] storeName
}

struct PACKET_ZC_STORE_EQUIPMENT_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_EQUIPMENT_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_EQUIPMENT_ITEMLIST3 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_ITEMLIST_EQUIP {
  PACKET_ZC_INVENTORY_ITEMLIST_EQUIP, offset = 0x0

}

struct PACKET_ZC_STORE_ITEMLIST_EQUIP_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] StoreName
}

struct PACKET_ZC_STORE_ITEMLIST_EQUIP_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] StoreName
}

struct PACKET_ZC_STORE_ITEMLIST_NORMAL {
  PACKET_ZC_INVENTORY_ITEMLIST_NORMAL, offset = 0x0

}

struct PACKET_ZC_STORE_ITEMLIST_NORMAL_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] StoreName
}

struct PACKET_ZC_STORE_ITEMLIST_NORMAL_V5 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x18] StoreName
}

struct PACKET_ZC_STORE_NORMAL_ITEMLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_NORMAL_ITEMLIST2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short Length
}

struct PACKET_ZC_STORE_NORMAL_ITEMLIST3 {
  PACKET_ZC_NORMAL_ITEMLIST3, offset = 0x0

}

struct PACKET_ZC_TAEKWON_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int Point
  /* this+0x6 */ int TotalPoint
}

struct PACKET_ZC_TAEKWON_RANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18][0xa] Name
  /* this+0xf2 */ int[0xa] Point
}

struct PACKET_ZC_TALKBOX_CHATCONTENTS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x50] contents
}

struct PACKET_ZC_THROW_MVPITEM {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZC_TRYCAPTURE_MONSTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_TRYCOLLECTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned char result
}

struct PACKET_ZC_UPDATE_CHARSTAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int status
}

struct PACKET_ZC_UPDATE_CHARSTAT2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int status
  /* this+0xe */ short sex
  /* this+0x10 */ short head
  /* this+0x12 */ short headPalette
}

struct PACKET_ZC_UPDATE_GDID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int emblemVersion
  /* this+0xa */ int right
  /* this+0xe */ bool isMaster
  /* this+0xf */ int InterSID
  /* this+0x13 */ char[0x18] GName
}

struct PACKET_ZC_UPDATE_ITEM_FROM_BUYING_STORE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ short count
  /* this+0x6 */ int limitZeny
}

struct PACKET_ZC_UPDATE_MAPINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short xPos
  /* this+0x4 */ short yPos
  /* this+0x6 */ short type
  /* this+0x8 */ char[0x10] mapName
}

struct PACKET_ZC_UPDATE_MISSION_HUNT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ short count
}

struct PACKET_ZC_UPDATE_RANKING_POINT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short RankingType
  /* this+0x4 */ int Point
  /* this+0x8 */ int TotalPoint
}

struct PACKET_ZC_USER_COUNT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int count
}

struct PACKET_ZC_USESKILL_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long targetID
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned short SKID
  /* this+0x10 */ unsigned long property
  /* this+0x14 */ unsigned long delayTime
}

struct PACKET_ZC_USESKILL_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long targetID
  /* this+0xa */ short xPos
  /* this+0xc */ short yPos
  /* this+0xe */ unsigned short SKID
  /* this+0x10 */ unsigned long property
  /* this+0x14 */ unsigned long delayTime
  /* this+0x18 */ bool isDisposable
}

struct PACKET_ZC_USE_ITEM_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ short count
  /* this+0x6 */ bool result
}

struct PACKET_ZC_USE_ITEM_ACK2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short index
  /* this+0x4 */ unsigned short id
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ short count
  /* this+0xc */ bool result
}

struct PACKET_ZC_USE_SKILL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ short level
  /* this+0x6 */ unsigned long targetAID
  /* this+0xa */ unsigned long srcAID
  /* this+0xe */ bool result
  public void Crypt()
}

struct PACKET_ZC_WAIT_DIALOG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
}

struct PACKET_ZC_WAIT_DIALOG2 {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long NAID
  /* this+0x6 */ unsigned char type
}

struct PACKET_ZC_WARPLIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short SKID
  /* this+0x4 */ char[0x10][0x4] mapName
}

struct PACKET_ZC_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ char[0x18] sender
  /* this+0x1c */ int isAdmin
}

struct PACKET_ZC_WHISPER_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZH_MOVE_PVPWORLD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_ZI_ACK_CHK_PROCESSTIME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ long InterProcessTime
  /* this+0x6 */ long ZoneProcessTime
}

struct PACKET_ZI_ACK_REQ_ADD_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long ReqAID
  /* this+0x6 */ unsigned long ReqGID
  /* this+0xa */ unsigned long AckAID
  /* this+0xe */ unsigned long AckGID
}

struct PACKET_ZI_ACK_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ char[0x18] sender
  /* this+0x1e */ unsigned char result
}

struct PACKET_ZI_ACTOR_INIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_ZI_ADD_EXP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int Exp
}

struct PACKET_ZI_ALLY_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long otherGDID
  /* this+0xa */ unsigned long myAID
  /* this+0xe */ unsigned long myGID
  /* this+0x12 */ unsigned long otherAID
  /* this+0x16 */ unsigned long otherGID
  /* this+0x1a */ int answer
}

struct PACKET_ZI_AUTH_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long dwIP
  /* this+0x6 */ short sPort
  /* this+0x8 */ int ZSID
}

struct PACKET_ZI_CHANGE_EXPOPTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long expOption
}

struct PACKET_ZI_CHANGE_GROUP_MASTER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ unsigned long MasterAID
  /* this+0xa */ unsigned long AID
}

struct PACKET_ZI_CHAR_LEVEL_UP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_ZI_CHAT_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GRID
}

struct PACKET_ZI_DELETE_FRIENDS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long FriendAID
  /* this+0xa */ unsigned long FriendGID
}

struct PACKET_ZI_DISCONNECT_ALL {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZI_DIVORCE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ char[0x18] name
}

struct PACKET_ZI_ENTRY_QUEUE_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
}

struct PACKET_ZI_ENTRY_QUEUE_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ int xPos
  /* this+0x36 */ int yPos
}

struct PACKET_ZI_ENTRY_QUEUE_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
}

struct PACKET_ZI_ENTRY_QUEUE_DELETE_GID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
}

struct PACKET_ZI_ENTRY_QUEUE_MOVE_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x10] mapName
  /* this+0x1a */ int xPos
  /* this+0x1e */ int yPos
}

struct PACKET_ZI_ENTRY_QUEUE_NAME {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
}

struct PACKET_ZI_ENTRY_QUEUE_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
}

struct PACKET_ZI_EPISODE_VERSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Episode_Ver
  /* this+0x6 */ unsigned long Minor_Ver
}

struct PACKET_ZI_EXIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] charName
}

struct PACKET_ZI_GDSKILL_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ int SkillPoint
}

struct PACKET_ZI_GPK_DYNCODE_RELOAD {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZI_GRID_UPDATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ unsigned long expOption
}

struct PACKET_ZI_GROUPINFO_CHANGE_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
  /* this+0x6 */ unsigned long MasterAID
  /* this+0xa */ int FamilyGroup
  /* this+0xe */ unsigned long expOption
  /* this+0x12 */ unsigned char ItemPickupRule
  /* this+0x13 */ unsigned char ItemDivisionRule
}

struct PACKET_ZI_GUILD_CHANGEMAXUSER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ int maxNum
}

struct PACKET_ZI_GUILD_CHANGEOWNER_AGIT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long oldGDID
  /* this+0x6 */ unsigned long newGDID
  /* this+0xa */ char[0x10] mapName
}

struct PACKET_ZI_GUILD_CHAT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
}

struct PACKET_ZI_GUILD_NOTICE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x3c] subject
  /* this+0x42 */ char[0x78] notice
}

struct PACKET_ZI_GUILD_ZENY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x10] mapName
  /* this+0x1e */ unsigned char type
  /* this+0x1f */ int zeny
}

struct PACKET_ZI_INFO_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ unsigned char Result
  /* this+0x5 */ char[0x18] EntryQueueName
  /* this+0x1d */ int Ranking
}

struct PACKET_ZI_INSTANTMAP_ALLOW {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ enum PACKET_ZI_INSTANTMAP_ALLOW::enumWhy why
  /* this+0x6 */ bool bAllow
}

struct PACKET_ZI_INSTANTMAP_CREATE_RES {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int hRequestN2Obj
  /* this+0x6 */ char[0x10] mapName
  /* this+0x16 */ int mapID
  /* this+0x1a */ bool bSuccess
}

struct PACKET_ZI_INSTANTMAP_ERROR {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int hRequestN2Obj
  /* this+0x6 */ int mapID
  /* this+0xa */ enum PACKET_ZI_INSTANTMAP_ERROR::enumWhy why
}

struct PACKET_ZI_JOB_CHANGE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ short job
}

struct PACKET_ZI_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ int answer
}

struct PACKET_ZI_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ char[0x18] Name
  /* this+0x1e */ char[0x18] AccountName
  /* this+0x36 */ unsigned long AID
  /* this+0x3a */ unsigned long GID
  /* this+0x3e */ int answer
}

struct PACKET_ZI_LOBBY_ADMISSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ char[0x18] LobbyName
}

struct PACKET_ZI_LOBBY_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ char[0x18] LobbyName
  /* this+0x3a */ char[0x10] mapName
  /* this+0x4a */ int xPos
  /* this+0x4e */ int yPos
}

struct PACKET_ZI_LOBBY_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ char[0x18] LobbyName
}

struct PACKET_ZI_LOBBY_ADMISSION_V2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ char[0x18] LobbyName
  /* this+0x3a */ char CampCode
  /* this+0x3b */ short xPos
  /* this+0x3d */ short yPos
}

struct PACKET_ZI_LOBBY_MOVE_ROOM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x10] mapName
  /* this+0x1a */ int xPos
  /* this+0x1e */ int yPos
}

struct PACKET_ZI_LOGON {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int sex
  /* this+0xe */ short head
  /* this+0x10 */ short headpalette
  /* this+0x12 */ short level
  /* this+0x14 */ short job
  /* this+0x16 */ char[0x18] accountName
  /* this+0x2e */ char[0x18] charName
  /* this+0x46 */ char[0x10] mapName
}

struct PACKET_ZI_MAIL_DELETE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int MailID
}

struct PACKET_ZI_MAIL_GET_ITEM {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int MailID
}

struct PACKET_ZI_MAIL_GET_LIST {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_ZI_MAIL_OPEN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ int MailID
}

struct PACKET_ZI_MAIL_SEND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long AID
  /* this+0x8 */ unsigned long GID
  /* this+0xc */ char[0x28] Header
  /* this+0x34 */ char[0x28] ItemInfo
  /* this+0x5c */ char ItemLen
  /* this+0x5d */ unsigned long Money
  /* this+0x61 */ char[0x18] SendName
  /* this+0x79 */ unsigned long SendAID
}

struct PACKET_ZI_MAKE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] groupName
}

struct PACKET_ZI_MAKE_GROUP2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] groupName
  /* this+0x22 */ unsigned char ItemPickupRule
  /* this+0x23 */ unsigned char ItemDivisionRule
}

struct PACKET_ZI_MAPMOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ char[0x10] mapName
}

struct PACKET_ZI_MEMORIALDUNGEON_COMMAND {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ char[0x18] partyName
  /* this+0x22 */ enum PACKET_CZ_MEMORIALDUNGEON_COMMAND::enumCOMMAND Command
}

struct PACKET_ZI_MEMORIALDUNGEON_DESTROY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GRID
}

struct PACKET_ZI_MEMORIALDUNGEON_OPENSTATE {
  /* this+0x0 */ short PacketType
    /* this+0x2 */ enum PACKET_ZI_MEMORIALDUNGEON_OPENSTATE::enumRequest Request
  /* this+0x6 */ unsigned long RequestGID
  /* this+0xa */ unsigned long RequestAID
}

struct PACKET_ZI_MEMORIALDUNGEON_SUBSCRIPTION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x3d] Name
  /* this+0x3f */ char[0x3d] NickName
  /* this+0x7c */ unsigned long GRID
  /* this+0x80 */ unsigned long AID
  /* this+0x84 */ unsigned long GID
}

struct PACKET_ZI_MEMORIALDUNGEON_SUBSCRIPTION2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short PacketLength
  /* this+0x4 */ char[0x3d] NickName
  /* this+0x41 */ unsigned long GRID
  /* this+0x45 */ unsigned long AID
  /* this+0x49 */ unsigned long GID
}

struct PACKET_ZI_MEMORIALDUNGEON_VISA {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GID
  /* this+0x6 */ unsigned long AID
}

struct PACKET_ZI_MOVE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MoveType
  /* this+0x6 */ unsigned long SrcID
  /* this+0xa */ int DestX
  /* this+0xe */ int DestY
  /* this+0x12 */ char[0x18] DestName
}

struct PACKET_ZI_MOVE_2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MoveType
  /* this+0x6 */ unsigned long SrcID
  /* this+0xa */ int DestX
  /* this+0xe */ int DestY
  /* this+0x12 */ unsigned long DestAID
  /* this+0x16 */ unsigned long DestGID
  /* this+0x1a */ char[0x18] DestName
}

struct PACKET_ZI_MOVE_GID {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int MoveType
  /* this+0x6 */ unsigned long SrcID
  /* this+0xa */ int DestX
  /* this+0xe */ int DestY
  /* this+0x12 */ char[0x18] DestName
  /* this+0x2a */ unsigned long DestGID
}

struct PACKET_ZI_MOVE_SERVER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] charName
}

struct PACKET_ZI_NOTIFY_ENTRY_QUEUE_RANKING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ int Ranking
}

struct PACKET_ZI_OTHER_ZONE_PC_SEND_MSG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short msg
  /* this+0x4 */ unsigned long TargetAID
}

struct PACKET_ZI_PARTY_JOIN_REQ {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] TargetCharName
}

struct PACKET_ZI_PARTY_JOIN_REQ_ACK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long targetAID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ enum PACKET_ZC_PARTY_JOIN_REQ_ACK::enumAnswer answer
}

struct PACKET_ZI_PING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int UsedKBytesMemory
  /* this+0x6 */ unsigned int NumTotalNPC
}

struct PACKET_ZI_PING_LIVE {
  /* this+0x0 */ short PacketType
}

struct PACKET_ZI_REGISTER_GUILD_EMBLEM_IMG {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
  /* this+0xc */ unsigned long GID
}

struct PACKET_ZI_REQ_BAN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ unsigned long MyGID
  /* this+0x12 */ char[0x18] AccountName
  /* this+0x2a */ char[0x28] reasonDesc
}

struct PACKET_ZI_REQ_CHANGE_MEMBERPOS {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
  /* this+0xc */ unsigned long GID
}

struct PACKET_ZI_REQ_DELETE_RELATED_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long OpponentGDID
  /* this+0xa */ int Relation
}

struct PACKET_ZI_REQ_DISORGANIZE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x28] key
}

struct PACKET_ZI_REQ_ENTRY_QUEUE_APPLY {
    /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
  /* this+0x22 */ short ApplyType
  /* this+0x24 */ unsigned long GDID
}

struct PACKET_ZI_REQ_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ char[0x18] EntryQueueName
}

struct PACKET_ZI_REQ_EXPEL_GROUP_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GRID
  /* this+0xa */ char[0x18] characterName
}

struct PACKET_ZI_REQ_GUILD_POSITION_INFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long GDID
  /* this+0x8 */ unsigned long AID
}

struct PACKET_ZI_REQ_HOSTILE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long OtherGDID
  /* this+0xa */ unsigned long MyAID
}

struct PACKET_ZI_REQ_JOIN_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long senderAID
  /* this+0x6 */ unsigned long receiverAID
  /* this+0xa */ unsigned long GRID
}

struct PACKET_ZI_REQ_JOIN_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long myGID
  /* this+0xa */ unsigned long myAID
  /* this+0xe */ unsigned long GID
}

struct PACKET_ZI_REQ_JOIN_GUILD2 {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long myAID
  /* this+0x6 */ unsigned long myGID
  /* this+0xa */ char[0x18] receiverName
}

struct PACKET_ZI_REQ_LEAVE_GROUP {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
}

struct PACKET_ZI_REQ_LEAVE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x28] reasonDesc
}

struct PACKET_ZI_REQ_MAIL_RETURN {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long MailID
  /* this+0x6 */ unsigned long AID
  /* this+0xa */ unsigned long GID
  /* this+0xe */ char[0x18] FromName
  /* this+0x26 */ unsigned long ReceiveAID
  /* this+0x2a */ unsigned long ReceiveGID
}

struct PACKET_ZI_REQ_MAKE_GUILD {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long GDID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned long AID
  /* this+0xe */ char[0x18] GName
  /* this+0x26 */ char[0x18] MName
  /* this+0x3e */ char[0x18] AccountName
}

struct PACKET_ZI_REQ_USER_COUNT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
}

struct PACKET_ZI_RESULT_ENTRY_QUEUE_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned char Result
  /* this+0xb */ char[0x18] EntryQueueName
}

struct PACKET_ZI_RESULT_ENTRY_QUEUE_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned char Result
  /* this+0xb */ char[0x18] EntryQueueName
}

struct PACKET_ZI_RESULT_ENTRY_QUEUE_APPLY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned char Result
  /* this+0xb */ char[0x18] EntryQueueName
}

struct PACKET_ZI_RESULT_ENTRY_QUEUE_CANCEL {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned char Result
  /* this+0xb */ char[0x18] EntryQueueName
}

struct PACKET_ZI_RESULT_LOBBY_ADMISSION_ACCEPT {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned char Result
  /* this+0xb */ char[0x18] EntryQueueName
  /* this+0x23 */ char[0x18] LobbyName
}

struct PACKET_ZI_RESULT_LOBBY_ADMISSION_REFUSE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long AID
  /* this+0x6 */ unsigned long GID
  /* this+0xa */ unsigned char Result
  /* this+0xb */ char[0x18] EntryQueueName
  /* this+0x23 */ char[0x18] LobbyName
}

struct PACKET_ZI_SEEK_PARTY {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_ZI_SEEK_PARTY_MEMBER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ char[0x18] Name
  /* this+0x1a */ unsigned long Job
  /* this+0x1e */ unsigned long Level
  /* this+0x22 */ char[0x10] mapName
  /* this+0x32 */ unsigned long Option
}

struct PACKET_ZI_SERVERSTATE {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int monitorNum
  /* this+0x6 */ struct IM_SERVER_STATE state

}

struct PACKET_ZI_SERVERSTATE_CHANNELING {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ int monitorNum
  /* this+0x6 */ struct IM_SERVER_STATE_CHANNELING state

}

struct PACKET_ZI_STATEINFO {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned int UsedKBytesMemory
  /* this+0x6 */ unsigned int NumTotalNPC
}

struct PACKET_ZI_UPDATE_MAKERRANK {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ short type
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ int point
  /* this+0xc */ char[0x18] charname
}

struct PACKET_ZI_VERSION {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned long Version
}

struct PACKET_ZI_WHISPER {
  /* this+0x0 */ short PacketType
  /* this+0x2 */ unsigned short PacketLength
  /* this+0x4 */ unsigned long senderAID
  /* this+0x8 */ char[0x18] sender
  /* this+0x20 */ char[0x18] receiver
  /* this+0x38 */ char[0x18] senderAccountName
}

struct PARTY_BOOKING_AD_INFO {
  /* this+0x0 */ unsigned long Index
  /* this+0x4 */ char[0x18] CharName
  /* this+0x1c */ long ExpireTime
  /* this+0x20 */ struct PARTY_BOOKING_DETAIL Detail

}

struct PARTY_BOOKING_DETAIL {
  /* this+0x0 */ short Level
  /* this+0x2 */ short MapID
  /* this+0x4 */ short[0x6] Job
}

struct PARTY_RECRUIT_AD_INFO {
  /* this+0x0 */ unsigned long Index
  /* this+0x4 */ long ExpireTime
  /* this+0x8 */ char[0x18] CharName
  /* this+0x20 */ struct PARTY_RECRUIT_DETAIL Detail

}

struct PARTY_RECRUIT_DETAIL {
  /* this+0x0 */ short Level
  /* this+0x2 */ char[0x25] Notice
}

struct PETEGGITEM_INFO {
  /* this+0x0 */ short index
}

struct PGG_LINGO_KEY_TEMP {
  /* this+0x0 */ unsigned long dwAlgNum
  /* this+0x4 */ unsigned long dwAlgKey1
  /* this+0x8 */ unsigned long dwAlgKey2
  /* this+0xc */ unsigned long dwSeed
}

struct PMD {
  /* this+0x0 */ int mdisp
  /* this+0x4 */ int pdisp
  /* this+0x8 */ int vdisp
}

struct POWERBROADCAST_SETTING {
  /* this+0x0 */ struct _GUID PowerSetting

  /* this+0x10 */ unsigned long DataLength
  /* this+0x14 */ unsigned char[0x1] Data
}

struct POWER_ACTION_POLICY {
  /* this+0x0 */ enum POWER_ACTION Action
  /* this+0x4 */ unsigned long Flags
  /* this+0x8 */ unsigned long EventCode
}

struct PPM_IDLESTATE_EVENT {
  /* this+0x0 */ unsigned long NewState
  /* this+0x4 */ unsigned long OldState
  /* this+0x8 */ unsigned __int64 Processors
}

struct PPM_IDLE_ACCOUNTING {
  /* this+0x0 */ unsigned long StateCount
  /* this+0x4 */ unsigned long TotalTransitions
  /* this+0x8 */ unsigned long ResetCount
  /* this+0x10 */ unsigned __int64 StartTime
  /* this+0x18 */ struct PPM_IDLE_STATE_ACCOUNTING[0x1] State
}

struct PPM_IDLE_ACCOUNTING_EX {
  /* this+0x0 */ unsigned long StateCount
  /* this+0x4 */ unsigned long TotalTransitions
  /* this+0x8 */ unsigned long ResetCount
  /* this+0x10 */ unsigned __int64 StartTime
  /* this+0x18 */ struct PPM_IDLE_STATE_ACCOUNTING_EX[0x1] State
}

struct PPM_IDLE_STATE_ACCOUNTING {
  /* this+0x0 */ unsigned long IdleTransitions
  /* this+0x4 */ unsigned long FailedTransitions
  /* this+0x8 */ unsigned long InvalidBucketIndex
  /* this+0x10 */ unsigned __int64 TotalTime
  /* this+0x18 */ unsigned long[0x6] IdleTimeBuckets
}

struct PPM_IDLE_STATE_ACCOUNTING_EX {
  /* this+0x0 */ unsigned __int64 TotalTime
  /* this+0x8 */ unsigned long IdleTransitions
  /* this+0xc */ unsigned long FailedTransitions
  /* this+0x10 */ unsigned long InvalidBucketIndex
  /* this+0x14 */ unsigned long MinTimeUs
  /* this+0x18 */ unsigned long MaxTimeUs
  /* this+0x20 */ struct PPM_IDLE_STATE_BUCKET_EX[0x10] IdleTimeBuckets
}

struct PPM_IDLE_STATE_BUCKET_EX {
  /* this+0x0 */ unsigned __int64 TotalTimeUs
  /* this+0x8 */ unsigned long MinTimeUs
  /* this+0xc */ unsigned long MaxTimeUs
  /* this+0x10 */ unsigned long Count
}

struct PPM_PERFSTATE_DOMAIN_EVENT {
  /* this+0x0 */ unsigned long State
  /* this+0x4 */ unsigned long Latency
  /* this+0x8 */ unsigned long Speed
  /* this+0x10 */ unsigned __int64 Processors
}

struct PPM_PERFSTATE_EVENT {
  /* this+0x0 */ unsigned long State
  /* this+0x4 */ unsigned long Status
  /* this+0x8 */ unsigned long Latency
  /* this+0xc */ unsigned long Speed
  /* this+0x10 */ unsigned long Processor
}

struct PPM_THERMALCHANGE_EVENT {
  /* this+0x0 */ unsigned long ThermalConstraint
  /* this+0x8 */ unsigned __int64 Processors
}

struct PPM_THERMAL_POLICY_EVENT {
  /* this+0x0 */ unsigned char Mode
  /* this+0x8 */ unsigned __int64 Processors
}

struct PPM_WMI_IDLE_STATE {
  /* this+0x0 */ unsigned long Latency
  /* this+0x4 */ unsigned long Power
  /* this+0x8 */ unsigned long TimeCheck
  /* this+0xc */ unsigned char PromotePercent
  /* this+0xd */ unsigned char DemotePercent
  /* this+0xe */ unsigned char StateType
  /* this+0xf */ unsigned char Reserved
  /* this+0x10 */ unsigned long StateFlags
  /* this+0x14 */ unsigned long Context
  /* this+0x18 */ unsigned long IdleHandler
  /* this+0x1c */ unsigned long Reserved1
}

struct PPM_WMI_IDLE_STATES {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned long Count
  /* this+0x8 */ unsigned long TargetState
  /* this+0xc */ unsigned long OldState
  /* this+0x10 */ unsigned __int64 TargetProcessors
  /* this+0x18 */ struct PPM_WMI_IDLE_STATE[0x1] State
}

struct PPM_WMI_IDLE_STATES_EX {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned long Count
  /* this+0x8 */ unsigned long TargetState
  /* this+0xc */ unsigned long OldState
  /* this+0x10 */ void * TargetProcessors
  /* this+0x14 */ struct PPM_WMI_IDLE_STATE[0x1] State
}

struct PPM_WMI_LEGACY_PERFSTATE {
  /* this+0x0 */ unsigned long Frequency
  /* this+0x4 */ unsigned long Flags
  /* this+0x8 */ unsigned long PercentFrequency
}

struct PPM_WMI_PERF_STATE {
  /* this+0x0 */ unsigned long Frequency
  /* this+0x4 */ unsigned long Power
  /* this+0x8 */ unsigned char PercentFrequency
  /* this+0x9 */ unsigned char IncreaseLevel
  /* this+0xa */ unsigned char DecreaseLevel
  /* this+0xb */ unsigned char Type
  /* this+0xc */ unsigned long IncreaseTime
  /* this+0x10 */ unsigned long DecreaseTime
  /* this+0x18 */ unsigned __int64 Control
  /* this+0x20 */ unsigned __int64 Status
  /* this+0x28 */ unsigned long HitCount
  /* this+0x2c */ unsigned long Reserved1
  /* this+0x30 */ unsigned __int64 Reserved2
  /* this+0x38 */ unsigned __int64 Reserved3
}

struct PPM_WMI_PERF_STATES {
  /* this+0x0 */ unsigned long Count
  /* this+0x4 */ unsigned long MaxFrequency
  /* this+0x8 */ unsigned long CurrentState
  /* this+0xc */ unsigned long MaxPerfState
  /* this+0x10 */ unsigned long MinPerfState
  /* this+0x14 */ unsigned long LowestPerfState
  /* this+0x18 */ unsigned long ThermalConstraint
  /* this+0x1c */ unsigned char BusyAdjThreshold
  /* this+0x1d */ unsigned char PolicyType
  /* this+0x1e */ unsigned char Type
  /* this+0x1f */ unsigned char Reserved
  /* this+0x20 */ unsigned long TimerInterval
  /* this+0x28 */ unsigned __int64 TargetProcessors
  /* this+0x30 */ unsigned long PStateHandler
  /* this+0x34 */ unsigned long PStateContext
  /* this+0x38 */ unsigned long TStateHandler
  /* this+0x3c */ unsigned long TStateContext
  /* this+0x40 */ unsigned long FeedbackHandler
  /* this+0x44 */ unsigned long Reserved1
  /* this+0x48 */ unsigned __int64 Reserved2
  /* this+0x50 */ struct PPM_WMI_PERF_STATE[0x1] State
}

struct PPM_WMI_PERF_STATES_EX {
  /* this+0x0 */ unsigned long Count
  /* this+0x4 */ unsigned long MaxFrequency
  /* this+0x8 */ unsigned long CurrentState
  /* this+0xc */ unsigned long MaxPerfState
  /* this+0x10 */ unsigned long MinPerfState
  /* this+0x14 */ unsigned long LowestPerfState
  /* this+0x18 */ unsigned long ThermalConstraint
  /* this+0x1c */ unsigned char BusyAdjThreshold
  /* this+0x1d */ unsigned char PolicyType
  /* this+0x1e */ unsigned char Type
  /* this+0x1f */ unsigned char Reserved
  /* this+0x20 */ unsigned long TimerInterval
  /* this+0x24 */ void * TargetProcessors
  /* this+0x28 */ unsigned long PStateHandler
  /* this+0x2c */ unsigned long PStateContext
  /* this+0x30 */ unsigned long TStateHandler
  /* this+0x34 */ unsigned long TStateContext
  /* this+0x38 */ unsigned long FeedbackHandler
  /* this+0x3c */ unsigned long Reserved1
  /* this+0x40 */ unsigned __int64 Reserved2
  /* this+0x48 */ struct PPM_WMI_PERF_STATE[0x1] State
}

struct PROCESSOR_IDLESTATE_INFO {
  /* this+0x0 */ unsigned long TimeCheck
  /* this+0x4 */ unsigned char DemotePercent
  /* this+0x5 */ unsigned char PromotePercent
  /* this+0x6 */ unsigned char[0x2] Spare
}

struct PROCESSOR_IDLESTATE_POLICY {
  /* this+0x0 */ unsigned short Revision
    /* this+0x2 */ union PROCESSOR_IDLESTATE_POLICY::<unnamed-type-Flags> Flags

  /* this+0x4 */ unsigned long PolicyCount
  /* this+0x8 */ struct PROCESSOR_IDLESTATE_INFO[0x3] Policy
}

union PROCESSOR_IDLESTATE_POLICY::<unnamed-type-Flags> {
  /* this+0x0 */ unsigned short AsWORD
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned short AllowScaling
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned short Disabled
  /* this(bf)+0x0:0x2 len(0xe) */ unsigned short Reserved
}

struct PROCESSOR_PERFSTATE_POLICY {
  /* this+0x0 */ unsigned long Revision
  /* this+0x4 */ unsigned char MaxThrottle
  /* this+0x5 */ unsigned char MinThrottle
  /* this+0x6 */ unsigned char BusyAdjThreshold
  /* this+0x7 */ unsigned char Spare
  /* this+0x7 */ union PROCESSOR_PERFSTATE_POLICY::<unnamed-tag>::<unnamed-type-Flags> Flags

  /* this+0x8 */ unsigned long TimeCheck
  /* this+0xc */ unsigned long IncreaseTime
  /* this+0x10 */ unsigned long DecreaseTime
  /* this+0x14 */ unsigned long IncreasePercent
  /* this+0x18 */ unsigned long DecreasePercent
}

union PROCESSOR_PERFSTATE_POLICY::<unnamed-tag>::<unnamed-type-Flags> {
  /* this+0x0 */ unsigned char AsBYTE
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned char NoDomainAccounting
  /* this(bf)+0x0:0x1 len(0x2) */ unsigned char IncreasePolicy
  /* this(bf)+0x0:0x3 len(0x2) */ unsigned char DecreasePolicy
  /* this(bf)+0x0:0x5 len(0x3) */ unsigned char Reserved
}

struct PRODUCTINFO_INSTORE {
  /* this+0x0 */ short index
  /* this+0x2 */ short count
  /* this+0x4 */ int price
}

struct PRODUCTINFO_IN_BUYING_STORE {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ short count
  /* this+0x4 */ int price
}

struct PURCHASE_ITEM {
  /* this+0x0 */ int price
  /* this+0x4 */ int discountprice
  /* this+0x8 */ unsigned char type
  /* this+0x9 */ unsigned short ITID
}

struct PURCHASE_ITEM_FROMMC {
  /* this+0x0 */ int price
  /* this+0x4 */ short count
  /* this+0x6 */ short index
  /* this+0x8 */ unsigned char type
  /* this+0x9 */ unsigned short ITID
  /* this+0xb */ bool IsIdentified
  /* this+0xc */ bool IsDamaged
  /* this+0xd */ unsigned char refiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

}

struct PURCHASE_MYITEM {
  /* this+0x0 */ int price
  /* this+0x4 */ short index
  /* this+0x6 */ short count
  /* this+0x8 */ unsigned char type
  /* this+0x9 */ unsigned short ITID
  /* this+0xb */ bool IsIdentified
  /* this+0xc */ bool IsDamaged
  /* this+0xd */ unsigned char refiningLevel
  /* this+0xe */ struct EQUIPSLOTINFO slot

}

struct PVPINFO {
  /* this+0x0 */ int WinPoint
  /* this+0x4 */ int LosePoint
  /* this+0x8 */ int Point
}

struct Proto {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x8 */ struct lua_TValue * k
  /* this+0xc */ unsigned int * code
  /* this+0x10 */ struct Proto * * p
  /* this+0x14 */ int * lineinfo
  /* this+0x18 */ struct LocVar * locvars
  /* this+0x1c */ union TString * * upvalues
  /* this+0x20 */ union TString * source
  /* this+0x24 */ int sizeupvalues
  /* this+0x28 */ int sizek
  /* this+0x2c */ int sizecode
  /* this+0x30 */ int sizelineinfo
  /* this+0x34 */ int sizep
  /* this+0x38 */ int sizelocvars
  /* this+0x3c */ int linedefined
  /* this+0x40 */ int lastlinedefined
  /* this+0x44 */ union GCObject * gclist
  /* this+0x48 */ unsigned char nups
  /* this+0x49 */ unsigned char numparams
  /* this+0x4a */ unsigned char is_vararg
  /* this+0x4b */ unsigned char maxstacksize
}

struct QOS_OBJECT_HDR {
  /* this+0x0 */ unsigned long ObjectType
  /* this+0x4 */ unsigned long ObjectLength
}

struct RELATED_GUILD_INFO {
  /* this+0x0 */ int relation
  /* this+0x4 */ int GDID
  /* this+0x8 */ char[0x18] guildname
}

struct REPAIRITEM_INFO {
  /* this+0x0 */ short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ unsigned char refiningLevel
  /* this+0x5 */ struct EQUIPSLOTINFO slot

}

struct ROOM_MEMBER_DATA {
  /* this+0x0 */ unsigned long role
  /* this+0x4 */ char[0x18] name
}

struct RegistrationNode {
  /* this+0x0 */ unsigned long Next
  /* this+0x4 */ unsigned long Handler
  /* this+0x8 */ unsigned long EH4ScopeTable
  /* this+0xc */ unsigned long TryLevel
}

class Replicator {
  private void operator=(const class Replicator &)
  /* this+0x0 */ int index
  /* this+0x4 */ class DName *[0xa] dNameBuffer
  public void Replicator()
  public int isFull()
  public class Replicator & operator+=(const class DName &)
  public class DName operator[](int)
}

struct ResultItemInfo {
  /* this+0x0 */ unsigned int SSI_ID
  /* this+0x4 */ unsigned int AID
  /* this+0x8 */ char[0x50] StoreName
  /* this+0x58 */ unsigned short ITID
  /* this+0x5a */ unsigned char ItemType
  /* this+0x5b */ int price
  /* this+0x5f */ unsigned short count
  /* this+0x61 */ unsigned char refiningLevel
  /* this+0x62 */ struct EQUIPSLOTINFO CardSlot

  public struct ResultItemInfo & operator=(const struct ResultItemInfo &)
  public void ResultItemInfo(const struct ResultItemInfo &)
  public void ResultItemInfo()
}

struct SCOPE_ID {
  /* this(bf)+0x0:0x0 len(0x1c) */ unsigned long Zone
  /* this(bf)+0x0:0x1c len(0x4) */ unsigned long Level
  /* this+0x0 */ unsigned long Value
}

struct SC_HANDLE__ {
  /* this+0x0 */ int unused
}

struct SELL_ITEM {
  /* this+0x0 */ short index
  /* this+0x2 */ int price
  /* this+0x6 */ int overchargeprice
}

struct SERVER_ADDR {
  /* this+0x0 */ unsigned long ip
  /* this+0x4 */ short port
  /* this+0x6 */ unsigned char[0x14] name
  /* this+0x1a */ unsigned short usercount
  /* this+0x1c */ unsigned short state
  /* this+0x1e */ unsigned short property
}

struct SERVICE_STATUS_HANDLE__ {
  /* this+0x0 */ int unused
}

struct SET_POWER_SETTING_VALUE {
  /* this+0x0 */ unsigned long Version
  /* this+0x4 */ struct _GUID Guid

  /* this+0x14 */ enum SYSTEM_POWER_CONDITION PowerCondition
  /* this+0x18 */ unsigned long DataLength
  /* this+0x1c */ unsigned char[0x1] Data
}

struct SHELLHOOKINFO {
  /* this+0x0 */ struct HWND__ * hwnd
  /* this+0x4 */ struct tagRECT rc

}

struct SKILLINFO {
  /* this+0x0 */ unsigned short SKID
  /* this+0x2 */ int type
  /* this+0x6 */ short level
  /* this+0x8 */ short spcost
  /* this+0xa */ short attackRange
  /* this+0xc */ char[0x18] skillName
  /* this+0x24 */ bool upgradable
}

struct SParser {
  /* this+0x0 */ struct Zio * z
  /* this+0x4 */ struct Mbuffer buff

  /* this+0x10 */ const char * name
}

struct STRUCT_FRIEND {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ char[0x18] Name
}

struct SYSTEM_BATTERY_STATE {
  /* this+0x0 */ unsigned char AcOnLine
  /* this+0x1 */ unsigned char BatteryPresent
  /* this+0x2 */ unsigned char Charging
  /* this+0x3 */ unsigned char Discharging
  /* this+0x4 */ unsigned char[0x4] Spare1
  /* this+0x8 */ unsigned long MaxCapacity
  /* this+0xc */ unsigned long RemainingCapacity
  /* this+0x10 */ unsigned long Rate
  /* this+0x14 */ unsigned long EstimatedTime
  /* this+0x18 */ unsigned long DefaultAlert1
  /* this+0x1c */ unsigned long DefaultAlert2
}

struct SYSTEM_POWER_CAPABILITIES {
  /* this+0x0 */ unsigned char PowerButtonPresent
  /* this+0x1 */ unsigned char SleepButtonPresent
  /* this+0x2 */ unsigned char LidPresent
  /* this+0x3 */ unsigned char SystemS1
  /* this+0x4 */ unsigned char SystemS2
  /* this+0x5 */ unsigned char SystemS3
  /* this+0x6 */ unsigned char SystemS4
  /* this+0x7 */ unsigned char SystemS5
  /* this+0x8 */ unsigned char HiberFilePresent
  /* this+0x9 */ unsigned char FullWake
  /* this+0xa */ unsigned char VideoDimPresent
  /* this+0xb */ unsigned char ApmPresent
  /* this+0xc */ unsigned char UpsPresent
  /* this+0xd */ unsigned char ThermalControl
  /* this+0xe */ unsigned char ProcessorThrottle
  /* this+0xf */ unsigned char ProcessorMinThrottle
  /* this+0x10 */ unsigned char ProcessorMaxThrottle
  /* this+0x11 */ unsigned char FastSystemS4
  /* this+0x12 */ unsigned char[0x3] spare2
  /* this+0x15 */ unsigned char DiskSpinDown
  /* this+0x16 */ unsigned char[0x8] spare3
  /* this+0x1e */ unsigned char SystemBatteriesPresent
  /* this+0x1f */ unsigned char BatteriesAreShortTerm
  /* this+0x20 */ struct BATTERY_REPORTING_SCALE[0x3] BatteryScale
  /* this+0x38 */ enum _SYSTEM_POWER_STATE AcOnLineWake
  /* this+0x3c */ enum _SYSTEM_POWER_STATE SoftLidWake
  /* this+0x40 */ enum _SYSTEM_POWER_STATE RtcWake
  /* this+0x44 */ enum _SYSTEM_POWER_STATE MinDeviceWakeState
  /* this+0x48 */ enum _SYSTEM_POWER_STATE DefaultLowLatencyWake
}

struct SYSTEM_POWER_LEVEL {
  /* this+0x0 */ unsigned char Enable
  /* this+0x1 */ unsigned char[0x3] Spare
  /* this+0x4 */ unsigned long BatteryLevel
  /* this+0x8 */ struct POWER_ACTION_POLICY PowerPolicy

  /* this+0x14 */ enum _SYSTEM_POWER_STATE MinSystemState
}

struct ScopeTable {
  /* this+0x0 */ unsigned long GSCookieOffset
  /* this+0x4 */ unsigned long GSCookieXOROffset
  /* this+0x8 */ unsigned long EHCookieOffset
  /* this+0xc */ unsigned long EHCookieXOROffset
  /* this+0x10 */ unsigned long ScopeRecord
}

struct ScopeTableRecord {
  /* this+0x0 */ unsigned long EnclosingLevel
  /* this+0x4 */ unsigned long FilterFunc
  /* this+0x8 */ unsigned long HandlerAddress
  /* this+0x8 */ unsigned long FinallyFunc
}

union SemInfo {
  /* this+0x0 */ double r
  /* this+0x0 */ union TString * ts
}

struct TAG_CHARACTER_BLOCK_INFO {
  /* this+0x0 */ unsigned long GID
  /* this+0x4 */ char[0x14] szExpireDate
}

union TKey {
  /* this+0x0 */ struct <unnamed-tag> nk

  /* this+0x0 */ struct lua_TValue tvk

}

struct TRADE_ITEM_BUYING_STORE {
  /* this+0x0 */ unsigned short index
  /* this+0x2 */ unsigned short ITID
  /* this+0x4 */ short count
}

union TString {
  /* this+0x0 */ union L_Umaxalign dummy

  /* this+0x0 */ struct <unnamed-tag> tsv

}

struct Table {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x6 */ unsigned char flags
  /* this+0x7 */ unsigned char lsizenode
  /* this+0x8 */ struct Table * metatable
  /* this+0xc */ struct lua_TValue * array
  /* this+0x10 */ struct Node * node
  /* this+0x14 */ struct Node * lastfree
  /* this+0x18 */ union GCObject * gclist
  /* this+0x1c */ int sizearray
}

struct Token {
  /* this+0x0 */ int token
  /* this+0x8 */ union SemInfo seminfo

}

struct TranslatorGuardRN {
  /* this+0x0 */ struct EHRegistrationNode * pNext
  /* this+0x4 */ void * pFrameHandler
  /* this+0x8 */ unsigned int RandomCookie
  /* this+0xc */ const struct _s_FuncInfo * pFuncInfo
  /* this+0x10 */ struct EHRegistrationNode * pRN
  /* this+0x14 */ int CatchDepth
  /* this+0x18 */ struct EHRegistrationNode * pMarkerRN
  /* this+0x1c */ void * ESP
  /* this+0x20 */ void * EBP
  /* this+0x24 */ int DidUnwind
}

struct TypeDescriptor {
  /* this+0x0 */ unsigned long hash
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x0] name
}

struct USER_STRING_MAP_DATA {
  /* this+0x0 */ unsigned long AID
  /* this+0x4 */ unsigned long GID
  /* this+0x8 */ unsigned long ServerID
  /* this+0xc */ unsigned long GRID
  /* this+0x10 */ int sex
  /* this+0x14 */ short age
  /* this+0x16 */ short level
  /* this+0x18 */ short job
  /* this+0x1a */ short head
  /* this+0x1c */ short headpalette
  /* this+0x1e */ char[0x18] accountName
  /* this+0x36 */ char[0x18] characterName
  /* this+0x4e */ char[0x10] mapName
  /* this+0x5e */ struct STRUCT_FRIEND[0x28] Friends
  /* this+0x55e */ int FriendNumber
  /* this+0x562 */ int MailCounter
  /* this+0x566 */ struct DBMAILINFO[0x3c] MailInfo
}

union Udata {
  /* this+0x0 */ union L_Umaxalign dummy

  /* this+0x0 */ struct <unnamed-tag> uv

}

class UnDecorator {
  private void operator=(const class UnDecorator &)
  /* this+0x0 */ class Replicator ArgList

  /* [0x0003:0x0000382c] */ static  class Replicator * pArgList
  /* this+0x2c */ class Replicator ZNameList

  /* [0x0003:0x00003830] */ static  class Replicator * pZNameList
  /* [0x0003:0x00003834] */ static  class Replicator * pTemplateArgList
  /* [0x0003:0x00003838] */ static  const char * gName
  /* [0x0003:0x0000383c] */ static  const char * name
  /* [0x0003:0x00003840] */ static  char * outputString
  /* [0x0003:0x00003844] */ static  int maxStringLength
  /* [0x0003:0x00003848] */ static  unsigned long disableFlags
  /* [0x0003:0x00003850] */ static  bool fExplicitTemplateParams
  /* [0x0003:0x00003851] */ static  bool fGetTemplateArgumentList
  private static class DName getDecoratedName()
  private static class DName getSymbolName()
  private static class DName getZName(bool, bool)
  private static class DName getOperatorName(bool, bool *)
  private static class DName getScope()
  private static class DName getScopedName()
  private static class DName getSignedDimension()
  private static class DName getDimension(bool)
  private static int getNumberOfDimensions()
  private static class DName getTemplateName(bool)
  private static class DName getTemplateArgumentList()
  private static class DName getTemplateConstant()
  private static class DName composeDeclaration(const class DName &)
  private static int getTypeEncoding()
  private static class DName getBasedType()
  private static class DName getECSUName()
  private static class DName getEnumType()
  private static class DName getCallingConvention()
  private static class DName getReturnType(class DName *)
  private static class DName getDataType(class DName *)
  private static class DName getPrimaryDataType(const class DName &)
  private static class DName getDataIndirectType()
  private static class DName getDataIndirectType(const class DName &, const char *, const class DName &, int)
  private static class DName getExtendedDataIndirectType(const char * &, bool &, int)
  private static class DName getBasicDataType(const class DName &)
  private static class DName getECSUDataType()
  private static class DName getPtrRefType(const class DName &, const class DName &, const char *)
  private static class DName getPtrRefDataType(const class DName &, int)
  private static class DName getArrayType(const class DName &)
  private static class DName getFunctionIndirectType(const class DName &)
  private static class DName getArgumentTypes()
  private static class DName getArgumentList()
  private static class DName getThrowTypes()
  private static class DName getLexicalFrame()
  private static class DName getStorageConvention()
  private static class DName getThisType()
  private static class DName getPointerType(const class DName &, const class DName &)
  private static class DName getPointerTypeArray(const class DName &, const class DName &)
  private static class DName getReferenceType(const class DName &, const class DName &, const char *)
  private static class DName getExternalDataType(const class DName &)
  private static class DName getSegmentName()
  private static class DName getDisplacement()
  private static class DName getCallIndex()
  private static class DName getGuardNumber()
  private static class DName getVfTableType(const class DName &)
  private static class DName getVbTableType(const class DName &)
  private static class DName getVdispMapType(const class DName &)
  private static class DName getVCallThunkType()
  private static class DName getStringEncoding(char *, int)
  /* [0x0003:0x0000384c] */ static  function  * m_pGetParameter
  public void UnDecorator(char *, const char *, int, function  *, unsigned long)
  public static int doUnderScore()
  public static int doMSKeywords()
  public static int doPtr64()
  public static int doFunctionReturns()
  public static int doAllocationModel()
  public static int doAllocationLanguage()
  public static int doThisTypes()
  public static int doAccessSpecifiers()
  public static int doThrowTypes()
  public static int doMemberTypes()
  public static int doReturnUDTModel()
  public static int do32BitNear()
  public static int doNameOnly()
  public static int doTypeOnly()
  public static int haveTemplateParameters()
  public static int doEcsu()
  public static int doNoIdentCharCheck()
  public static int doEllipsis()
  public static const char * UScore(enum Tokens)
  public char * operator char *()
}

struct UnPackItemInfo {
  /* this+0x0 */ unsigned short ITID
  /* this+0x2 */ unsigned int BoxID
  public void UnPackItemInfo(const unsigned short, const unsigned int)
}

struct UnwindGuardNode {
  /* this+0x0 */ unsigned long Next
  /* this+0x4 */ unsigned long Handler
  /* this+0x8 */ unsigned long SecurityCookie
  /* this+0xc */ unsigned long OrigTargetLevel
  /* this+0x10 */ unsigned long OrigEstablisher
  /* this+0x14 */ unsigned long OrigCookiePointer
  /* this+0x18 */ unsigned long FramePointer
}

struct UpVal {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x8 */ struct lua_TValue * v
  /* this+0x10 */ union <unnamed-tag> u

}

union Value {
  /* this+0x0 */ union GCObject * gc
  /* this+0x0 */ void * p
  /* this+0x0 */ double n
  /* this+0x0 */ int b
}

struct WSAData {
  /* this+0x0 */ unsigned short wVersion
  /* this+0x2 */ unsigned short wHighVersion
  /* this+0x4 */ char[0x101] szDescription
  /* this+0x105 */ char[0x81] szSystemStatus
  /* this+0x186 */ unsigned short iMaxSockets
  /* this+0x188 */ unsigned short iMaxUdpDg
  /* this+0x18c */ char * lpVendorInfo
}

struct ZSERVER_ADDR {
  /* this+0x0 */ unsigned long ip
  /* this+0x4 */ short port
}

struct Zio {
  /* this+0x0 */ unsigned int n
  /* this+0x4 */ const char * p
  /* this+0x8 */ function  * reader
  /* this+0xc */ void * data
  /* this+0x10 */ struct lua_State * L
}

struct _ABC {
  /* this+0x0 */ int abcA
  /* this+0x4 */ unsigned int abcB
  /* this+0x8 */ int abcC
}

struct _ABCFLOAT {
  /* this+0x0 */ float abcfA
  /* this+0x4 */ float abcfB
  /* this+0x8 */ float abcfC
}

struct _ACCEPT_PARM {
  /* this+0x0 */ unsigned long ip
  /* this+0x4 */ short port
  /* this+0x8 */ int backlog
  /* this+0xc */ unsigned int ipLog
  /* this+0x10 */ class CAcceptHandler * handler
}

struct _ACCESS_ALLOWED_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _ACCESS_ALLOWED_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _ACCESS_ALLOWED_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _ACCESS_DENIED_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _ACCESS_DENIED_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _ACCESS_DENIED_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _ACCESS_REASONS {
  /* this+0x0 */ unsigned long[0x20] Data
}

struct _ACE_HEADER {
  /* this+0x0 */ unsigned char AceType
  /* this+0x1 */ unsigned char AceFlags
  /* this+0x2 */ unsigned short AceSize
}

struct _ACL {
  /* this+0x0 */ unsigned char AclRevision
  /* this+0x1 */ unsigned char Sbz1
  /* this+0x2 */ unsigned short AclSize
  /* this+0x4 */ unsigned short AceCount
  /* this+0x6 */ unsigned short Sbz2
}

struct _ACL_REVISION_INFORMATION {
  /* this+0x0 */ unsigned long AclRevision
}

struct _ACL_SIZE_INFORMATION {
  /* this+0x0 */ unsigned long AceCount
  /* this+0x4 */ unsigned long AclBytesInUse
  /* this+0x8 */ unsigned long AclBytesFree
}

struct _ACTIVATION_CONTEXT {
}

struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
  /* this+0x0 */ unsigned long ulFlags
  /* this+0x4 */ unsigned long ulEncodedAssemblyIdentityLength
  /* this+0x8 */ unsigned long ulManifestPathType
  /* this+0xc */ unsigned long ulManifestPathLength
  /* this+0x10 */ union _LARGE_INTEGER liManifestLastWriteTime

  /* this+0x18 */ unsigned long ulPolicyPathType
  /* this+0x1c */ unsigned long ulPolicyPathLength
  /* this+0x20 */ union _LARGE_INTEGER liPolicyLastWriteTime

  /* this+0x28 */ unsigned long ulMetadataSatelliteRosterIndex
  /* this+0x2c */ unsigned long ulManifestVersionMajor
  /* this+0x30 */ unsigned long ulManifestVersionMinor
  /* this+0x34 */ unsigned long ulPolicyVersionMajor
  /* this+0x38 */ unsigned long ulPolicyVersionMinor
  /* this+0x3c */ unsigned long ulAssemblyDirectoryNameLength
  /* this+0x40 */ const wchar_t * lpAssemblyEncodedAssemblyIdentity
  /* this+0x44 */ const wchar_t * lpAssemblyManifestPath
  /* this+0x48 */ const wchar_t * lpAssemblyPolicyPath
  /* this+0x4c */ const wchar_t * lpAssemblyDirectoryName
  /* this+0x50 */ unsigned long ulFileCount
}

struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
  /* this+0x0 */ void * hActCtx
  /* this+0x4 */ unsigned long dwFlags
}

struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
  /* this+0x0 */ unsigned long ElementCount
  /* this+0x4 */ struct _COMPATIBILITY_CONTEXT_ELEMENT[0x0] Elements
}

struct _ACTIVATION_CONTEXT_DATA {
}

struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
  /* this+0x0 */ unsigned long dwFlags
  /* this+0x4 */ unsigned long ulFormatVersion
  /* this+0x8 */ unsigned long ulAssemblyCount
  /* this+0xc */ unsigned long ulRootManifestPathType
  /* this+0x10 */ unsigned long ulRootManifestPathChars
  /* this+0x14 */ unsigned long ulRootConfigurationPathType
  /* this+0x18 */ unsigned long ulRootConfigurationPathChars
  /* this+0x1c */ unsigned long ulAppDirPathType
  /* this+0x20 */ unsigned long ulAppDirPathChars
  /* this+0x24 */ const wchar_t * lpRootManifestPath
  /* this+0x28 */ const wchar_t * lpRootConfigurationPath
  /* this+0x2c */ const wchar_t * lpAppDirPath
}

struct _ACTIVATION_CONTEXT_QUERY_INDEX {
  /* this+0x0 */ unsigned long ulAssemblyIndex
  /* this+0x4 */ unsigned long ulFileIndexInAssembly
}

struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
  /* this+0x0 */ unsigned long ulFlags
  /* this+0x4 */ enum ACTCTX_REQUESTED_RUN_LEVEL RunLevel
  /* this+0x8 */ unsigned long UiAccess
}

struct _ACTIVATION_CONTEXT_STACK {
  /* this+0x0 */ unsigned long Flags
  /* this+0x4 */ unsigned long NextCookieSequenceNumber
  /* this+0x8 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME * ActiveFrame
  /* this+0xc */ struct _LIST_ENTRY FrameListCache

}

struct _ADMINISTRATOR_POWER_POLICY {
  /* this+0x0 */ enum _SYSTEM_POWER_STATE MinSleep
  /* this+0x4 */ enum _SYSTEM_POWER_STATE MaxSleep
  /* this+0x8 */ unsigned long MinVideoTimeout
  /* this+0xc */ unsigned long MaxVideoTimeout
  /* this+0x10 */ unsigned long MinSpindownTimeout
  /* this+0x14 */ unsigned long MaxSpindownTimeout
}

struct _AFPROTOCOLS {
  /* this+0x0 */ int iAddressFamily
  /* this+0x4 */ int iProtocol
}

struct _APPLICATIONLAUNCH_SETTING_VALUE {
  /* this+0x0 */ union _LARGE_INTEGER ActivationTime

  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ unsigned long ButtonInstanceID
}

struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
  /* this+0x0 */ unsigned long ulFlags
  /* this+0x4 */ unsigned long ulFilenameLength
  /* this+0x8 */ unsigned long ulPathLength
  /* this+0xc */ const wchar_t * lpFileName
  /* this+0x10 */ const wchar_t * lpFilePath
}

struct _ASSEMBLY_STORAGE_MAP {
}

struct _BCD80 {
  /* this+0x0 */ unsigned short[0x5] W
}

struct _BLENDFUNCTION {
  /* this+0x0 */ unsigned char BlendOp
  /* this+0x1 */ unsigned char BlendFlags
  /* this+0x2 */ unsigned char SourceConstantAlpha
  /* this+0x3 */ unsigned char AlphaFormat
}

struct _BLOB {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned char * pBlobData
}

struct _BY_HANDLE_FILE_INFORMATION {
  /* this+0x0 */ unsigned long dwFileAttributes
  /* this+0x4 */ struct _FILETIME ftCreationTime

  /* this+0xc */ struct _FILETIME ftLastAccessTime

  /* this+0x14 */ struct _FILETIME ftLastWriteTime

  /* this+0x1c */ unsigned long dwVolumeSerialNumber
  /* this+0x20 */ unsigned long nFileSizeHigh
  /* this+0x24 */ unsigned long nFileSizeLow
  /* this+0x28 */ unsigned long nNumberOfLinks
  /* this+0x2c */ unsigned long nFileIndexHigh
  /* this+0x30 */ unsigned long nFileIndexLow
}

struct _CACHE_DESCRIPTOR {
  /* this+0x0 */ unsigned char Level
  /* this+0x1 */ unsigned char Associativity
  /* this+0x2 */ unsigned short LineSize
  /* this+0x4 */ unsigned long Size
  /* this+0x8 */ enum _PROCESSOR_CACHE_TYPE Type
}

struct _CACHE_RELATIONSHIP {
  /* this+0x0 */ unsigned char Level
  /* this+0x1 */ unsigned char Associativity
  /* this+0x2 */ unsigned short LineSize
  /* this+0x4 */ unsigned long CacheSize
  /* this+0x8 */ enum _PROCESSOR_CACHE_TYPE Type
  /* this+0xc */ unsigned char[0x14] Reserved
  /* this+0x20 */ struct _GROUP_AFFINITY GroupMask

}

struct _CHAR_INFO {
    /* this+0x0 */ union _CHAR_INFO::<unnamed-type-Char> Char

  /* this+0x2 */ unsigned short Attributes
}

union _CHAR_INFO::<unnamed-type-Char> {
  /* this+0x0 */ wchar_t UnicodeChar
  /* this+0x0 */ char AsciiChar
}

struct _CLIENT_ID {
  /* this+0x0 */ void * UniqueProcess
  /* this+0x4 */ void * UniqueThread
}

struct _COMMCONFIG {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned short wVersion
  /* this+0x6 */ unsigned short wReserved
  /* this+0x8 */ struct _DCB dcb

  /* this+0x24 */ unsigned long dwProviderSubType
  /* this+0x28 */ unsigned long dwProviderOffset
  /* this+0x2c */ unsigned long dwProviderSize
  /* this+0x30 */ wchar_t[0x1] wcProviderData
}

struct _COMMPROP {
  /* this+0x0 */ unsigned short wPacketLength
  /* this+0x2 */ unsigned short wPacketVersion
  /* this+0x4 */ unsigned long dwServiceMask
  /* this+0x8 */ unsigned long dwReserved1
  /* this+0xc */ unsigned long dwMaxTxQueue
  /* this+0x10 */ unsigned long dwMaxRxQueue
  /* this+0x14 */ unsigned long dwMaxBaud
  /* this+0x18 */ unsigned long dwProvSubType
  /* this+0x1c */ unsigned long dwProvCapabilities
  /* this+0x20 */ unsigned long dwSettableParams
  /* this+0x24 */ unsigned long dwSettableBaud
  /* this+0x28 */ unsigned short wSettableData
  /* this+0x2a */ unsigned short wSettableStopParity
  /* this+0x2c */ unsigned long dwCurrentTxQueue
  /* this+0x30 */ unsigned long dwCurrentRxQueue
  /* this+0x34 */ unsigned long dwProvSpec1
  /* this+0x38 */ unsigned long dwProvSpec2
  /* this+0x3c */ wchar_t[0x1] wcProvChar
}

struct _COMMTIMEOUTS {
  /* this+0x0 */ unsigned long ReadIntervalTimeout
  /* this+0x4 */ unsigned long ReadTotalTimeoutMultiplier
  /* this+0x8 */ unsigned long ReadTotalTimeoutConstant
  /* this+0xc */ unsigned long WriteTotalTimeoutMultiplier
  /* this+0x10 */ unsigned long WriteTotalTimeoutConstant
}

struct _COMPATIBILITY_CONTEXT_ELEMENT {
  /* this+0x0 */ struct _GUID Id

  /* this+0x10 */ enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type
}

struct _COMSTAT {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned long fCtsHold
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned long fDsrHold
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned long fRlsdHold
  /* this(bf)+0x0:0x3 len(0x1) */ unsigned long fXoffHold
  /* this(bf)+0x0:0x4 len(0x1) */ unsigned long fXoffSent
  /* this(bf)+0x0:0x5 len(0x1) */ unsigned long fEof
  /* this(bf)+0x0:0x6 len(0x1) */ unsigned long fTxim
  /* this(bf)+0x0:0x7 len(0x19) */ unsigned long fReserved
  /* this+0x4 */ unsigned long cbInQue
  /* this+0x8 */ unsigned long cbOutQue
}

struct _CONNECTDLGSTRUCTA {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ struct _NETRESOURCEA * lpConnRes
  /* this+0xc */ unsigned long dwFlags
  /* this+0x10 */ unsigned long dwDevNum
}

struct _CONNECTDLGSTRUCTW {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ struct _NETRESOURCEW * lpConnRes
  /* this+0xc */ unsigned long dwFlags
  /* this+0x10 */ unsigned long dwDevNum
}

struct _CONSOLE_CURSOR_INFO {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ int bVisible
}

struct _CONSOLE_FONT_INFO {
  /* this+0x0 */ unsigned long nFont
  /* this+0x4 */ struct _COORD dwFontSize

}

struct _CONSOLE_FONT_INFOEX {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long nFont
  /* this+0x8 */ struct _COORD dwFontSize

  /* this+0xc */ unsigned int FontFamily
  /* this+0x10 */ unsigned int FontWeight
  /* this+0x14 */ wchar_t[0x20] FaceName
}

struct _CONSOLE_HISTORY_INFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int HistoryBufferSize
  /* this+0x8 */ unsigned int NumberOfHistoryBuffers
  /* this+0xc */ unsigned long dwFlags
}

struct _CONSOLE_READCONSOLE_CONTROL {
  /* this+0x0 */ unsigned long nLength
  /* this+0x4 */ unsigned long nInitialChars
  /* this+0x8 */ unsigned long dwCtrlWakeupMask
  /* this+0xc */ unsigned long dwControlKeyState
}

struct _CONSOLE_SCREEN_BUFFER_INFO {
  /* this+0x0 */ struct _COORD dwSize

  /* this+0x4 */ struct _COORD dwCursorPosition

  /* this+0x8 */ unsigned short wAttributes
  /* this+0xa */ struct _SMALL_RECT srWindow

  /* this+0x12 */ struct _COORD dwMaximumWindowSize

}

struct _CONSOLE_SCREEN_BUFFER_INFOEX {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct _COORD dwSize

  /* this+0x8 */ struct _COORD dwCursorPosition

  /* this+0xc */ unsigned short wAttributes
  /* this+0xe */ struct _SMALL_RECT srWindow

  /* this+0x16 */ struct _COORD dwMaximumWindowSize

  /* this+0x1a */ unsigned short wPopupAttributes
  /* this+0x1c */ int bFullscreenSupported
  /* this+0x20 */ unsigned long[0x10] ColorTable
}

struct _CONSOLE_SELECTION_INFO {
  /* this+0x0 */ unsigned long dwFlags
  /* this+0x4 */ struct _COORD dwSelectionAnchor

  /* this+0x8 */ struct _SMALL_RECT srSelection

}

struct _CONTEXT {
  /* this+0x0 */ unsigned long ContextFlags
  /* this+0x4 */ unsigned long Dr0
  /* this+0x8 */ unsigned long Dr1
  /* this+0xc */ unsigned long Dr2
  /* this+0x10 */ unsigned long Dr3
  /* this+0x14 */ unsigned long Dr6
  /* this+0x18 */ unsigned long Dr7
  /* this+0x1c */ struct _FLOATING_SAVE_AREA FloatSave

  /* this+0x8c */ unsigned long SegGs
  /* this+0x90 */ unsigned long SegFs
  /* this+0x94 */ unsigned long SegEs
  /* this+0x98 */ unsigned long SegDs
  /* this+0x9c */ unsigned long Edi
  /* this+0xa0 */ unsigned long Esi
  /* this+0xa4 */ unsigned long Ebx
  /* this+0xa8 */ unsigned long Edx
  /* this+0xac */ unsigned long Ecx
  /* this+0xb0 */ unsigned long Eax
  /* this+0xb4 */ unsigned long Ebp
  /* this+0xb8 */ unsigned long Eip
  /* this+0xbc */ unsigned long SegCs
  /* this+0xc0 */ unsigned long EFlags
  /* this+0xc4 */ unsigned long Esp
  /* this+0xc8 */ unsigned long SegSs
  /* this+0xcc */ unsigned char[0x200] ExtendedRegisters
}

struct _CONTEXT_CHUNK {
  /* this+0x0 */ long Offset
  /* this+0x4 */ unsigned long Length
}

struct _CONTEXT_EX {
  /* this+0x0 */ struct _CONTEXT_CHUNK All

  /* this+0x8 */ struct _CONTEXT_CHUNK Legacy

  /* this+0x10 */ struct _CONTEXT_CHUNK XState

}

struct _COORD {
  /* this+0x0 */ short X
  /* this+0x2 */ short Y
}

struct _CREATE_PROCESS_DEBUG_INFO {
  /* this+0x0 */ void * hFile
  /* this+0x4 */ void * hProcess
  /* this+0x8 */ void * hThread
  /* this+0xc */ void * lpBaseOfImage
  /* this+0x10 */ unsigned long dwDebugInfoFileOffset
  /* this+0x14 */ unsigned long nDebugInfoSize
  /* this+0x18 */ void * lpThreadLocalBase
  /* this+0x1c */ function  * lpStartAddress
  /* this+0x20 */ void * lpImageName
  /* this+0x24 */ unsigned short fUnicode
}

struct _CREATE_THREAD_DEBUG_INFO {
  /* this+0x0 */ void * hThread
  /* this+0x4 */ void * lpThreadLocalBase
  /* this+0x8 */ function  * lpStartAddress
}

struct _CRT_DOUBLE {
  /* this+0x0 */ double x
}

union _CRT_DOUBLE_COMPONENTS {
  /* this+0x0 */ double d
  /* this(bf)+0x0:0x0 len(0x34) */ unsigned __int64 mantissa
  /* this(bf)+0x0:0x34 len(0xb) */ unsigned __int64 exponent
  /* this(bf)+0x0:0x3f len(0x1) */ unsigned __int64 sign
}

struct _CRT_FLOAT {
  /* this+0x0 */ float f
}

struct _CSADDR_INFO {
  /* this+0x0 */ struct _SOCKET_ADDRESS LocalAddr

  /* this+0x8 */ struct _SOCKET_ADDRESS RemoteAddr

  /* this+0x10 */ int iSocketType
  /* this+0x14 */ int iProtocol
}

struct _Collvec {
  /* this+0x0 */ unsigned long _Hand
  /* this+0x4 */ unsigned int _Page
}

struct _CrtMemBlockHeader {
}

struct _CrtMemState {
  /* this+0x0 */ struct _CrtMemBlockHeader * pBlockHeader
  /* this+0x4 */ unsigned int[0x5] lCounts
  /* this+0x18 */ unsigned int[0x5] lSizes
  /* this+0x2c */ unsigned int lHighWaterCount
  /* this+0x30 */ unsigned int lTotalCount
}

struct _Ctypevec {
  /* this+0x0 */ unsigned long _Hand
  /* this+0x4 */ unsigned int _Page
  /* this+0x8 */ const short * _Table
  /* this+0xc */ int _Delfl
}

struct _Cvtvec {
  /* this+0x0 */ unsigned long _Hand
  /* this+0x4 */ unsigned int _Page
}

struct _DCB {
  /* this+0x0 */ unsigned long DCBlength
  /* this+0x4 */ unsigned long BaudRate
  /* this(bf)+0x8:0x0 len(0x1) */ unsigned long fBinary
  /* this(bf)+0x8:0x1 len(0x1) */ unsigned long fParity
  /* this(bf)+0x8:0x2 len(0x1) */ unsigned long fOutxCtsFlow
  /* this(bf)+0x8:0x3 len(0x1) */ unsigned long fOutxDsrFlow
  /* this(bf)+0x8:0x4 len(0x2) */ unsigned long fDtrControl
  /* this(bf)+0x8:0x6 len(0x1) */ unsigned long fDsrSensitivity
  /* this(bf)+0x8:0x7 len(0x1) */ unsigned long fTXContinueOnXoff
  /* this(bf)+0x8:0x8 len(0x1) */ unsigned long fOutX
  /* this(bf)+0x8:0x9 len(0x1) */ unsigned long fInX
  /* this(bf)+0x8:0xa len(0x1) */ unsigned long fErrorChar
  /* this(bf)+0x8:0xb len(0x1) */ unsigned long fNull
  /* this(bf)+0x8:0xc len(0x2) */ unsigned long fRtsControl
  /* this(bf)+0x8:0xe len(0x1) */ unsigned long fAbortOnError
  /* this(bf)+0x8:0xf len(0x11) */ unsigned long fDummy2
  /* this+0xc */ unsigned short wReserved
  /* this+0xe */ unsigned short XonLim
  /* this+0x10 */ unsigned short XoffLim
  /* this+0x12 */ unsigned char ByteSize
  /* this+0x13 */ unsigned char Parity
  /* this+0x14 */ unsigned char StopBits
  /* this+0x15 */ char XonChar
  /* this+0x16 */ char XoffChar
  /* this+0x17 */ char ErrorChar
  /* this+0x18 */ char EofChar
  /* this+0x19 */ char EvtChar
  /* this+0x1a */ unsigned short wReserved1
}

struct _DEBUG_EVENT {
  /* this+0x0 */ unsigned long dwDebugEventCode
  /* this+0x4 */ unsigned long dwProcessId
  /* this+0x8 */ unsigned long dwThreadId
    /* this+0xc */ union _DEBUG_EVENT::<unnamed-type-u> u

}

union _DEBUG_EVENT::<unnamed-type-u> {
  /* this+0x0 */ struct _EXCEPTION_DEBUG_INFO Exception

  /* this+0x0 */ struct _CREATE_THREAD_DEBUG_INFO CreateThread

  /* this+0x0 */ struct _CREATE_PROCESS_DEBUG_INFO CreateProcessInfo

  /* this+0x0 */ struct _EXIT_THREAD_DEBUG_INFO ExitThread

  /* this+0x0 */ struct _EXIT_PROCESS_DEBUG_INFO ExitProcess

  /* this+0x0 */ struct _LOAD_DLL_DEBUG_INFO LoadDll

  /* this+0x0 */ struct _UNLOAD_DLL_DEBUG_INFO UnloadDll

  /* this+0x0 */ struct _OUTPUT_DEBUG_STRING_INFO DebugString

  /* this+0x0 */ struct _RIP_INFO RipInfo

}

struct _DISCDLGSTRUCTA {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ char * lpLocalName
  /* this+0xc */ char * lpRemoteName
  /* this+0x10 */ unsigned long dwFlags
}

struct _DISCDLGSTRUCTW {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ wchar_t * lpLocalName
  /* this+0xc */ wchar_t * lpRemoteName
  /* this+0x10 */ unsigned long dwFlags
}

struct _DISPLAY_DEVICEA {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ char[0x20] DeviceName
  /* this+0x24 */ char[0x80] DeviceString
  /* this+0xa4 */ unsigned long StateFlags
  /* this+0xa8 */ char[0x80] DeviceID
  /* this+0x128 */ char[0x80] DeviceKey
}

struct _DISPLAY_DEVICEW {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ wchar_t[0x20] DeviceName
  /* this+0x44 */ wchar_t[0x80] DeviceString
  /* this+0x144 */ unsigned long StateFlags
  /* this+0x148 */ wchar_t[0x80] DeviceID
  /* this+0x248 */ wchar_t[0x80] DeviceKey
}

struct _DOCINFOA {
  /* this+0x0 */ int cbSize
  /* this+0x4 */ const char * lpszDocName
  /* this+0x8 */ const char * lpszOutput
  /* this+0xc */ const char * lpszDatatype
  /* this+0x10 */ unsigned long fwType
}

struct _DOCINFOW {
  /* this+0x0 */ int cbSize
  /* this+0x4 */ const wchar_t * lpszDocName
  /* this+0x8 */ const wchar_t * lpszOutput
  /* this+0xc */ const wchar_t * lpszDatatype
  /* this+0x10 */ unsigned long fwType
}

struct _DRAWPATRECT {
  /* this+0x0 */ struct tagPOINT ptPosition

  /* this+0x8 */ struct tagPOINT ptSize

  /* this+0x10 */ unsigned short wStyle
  /* this+0x12 */ unsigned short wPattern
}

union _Dconst {
  /* this+0x0 */ unsigned short[0x8] _Word
  /* this+0x0 */ float _Float
  /* this+0x0 */ double _Double
  /* this+0x0 */ double _Long_double
}

struct _EH4_EXCEPTION_REGISTRATION_RECORD {
  /* this+0x0 */ void * SavedESP
  /* this+0x4 */ struct _EXCEPTION_POINTERS * ExceptionPointers
  /* this+0x8 */ struct _EXCEPTION_REGISTRATION_RECORD SubRecord

  /* this+0x10 */ unsigned int EncodedScopeTable
  /* this+0x14 */ unsigned long TryLevel
}

struct _EH4_SCOPETABLE {
  /* this+0x0 */ unsigned long GSCookieOffset
  /* this+0x4 */ unsigned long GSCookieXOROffset
  /* this+0x8 */ unsigned long EHCookieOffset
  /* this+0xc */ unsigned long EHCookieXOROffset
  /* this+0x10 */ struct _EH4_SCOPETABLE_RECORD[0x1] ScopeRecord
}

struct _EH4_SCOPETABLE_RECORD {
  /* this+0x0 */ unsigned long EnclosingLevel
  /* this+0x4 */ function  * FilterFunc
  /* this+0x8 */ union <unnamed-tag> u

}

struct _ENLISTMENT_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID EnlistmentId

  /* this+0x10 */ struct _GUID TransactionId

  /* this+0x20 */ struct _GUID ResourceManagerId

}

struct _ENLISTMENT_CRM_INFORMATION {
  /* this+0x0 */ struct _GUID CrmTransactionManagerId

  /* this+0x10 */ struct _GUID CrmResourceManagerId

  /* this+0x20 */ struct _GUID CrmEnlistmentId

}

struct _ENUM_SERVICE_STATUSA {
  /* this+0x0 */ char * lpServiceName
  /* this+0x4 */ char * lpDisplayName
  /* this+0x8 */ struct _SERVICE_STATUS ServiceStatus

}

struct _ENUM_SERVICE_STATUSW {
  /* this+0x0 */ wchar_t * lpServiceName
  /* this+0x4 */ wchar_t * lpDisplayName
  /* this+0x8 */ struct _SERVICE_STATUS ServiceStatus

}

struct _ENUM_SERVICE_STATUS_PROCESSA {
  /* this+0x0 */ char * lpServiceName
  /* this+0x4 */ char * lpDisplayName
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatusProcess

}

struct _ENUM_SERVICE_STATUS_PROCESSW {
  /* this+0x0 */ wchar_t * lpServiceName
  /* this+0x4 */ wchar_t * lpDisplayName
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatusProcess

}

struct _EVENTLOGRECORD {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ unsigned long Reserved
  /* this+0x8 */ unsigned long RecordNumber
  /* this+0xc */ unsigned long TimeGenerated
  /* this+0x10 */ unsigned long TimeWritten
  /* this+0x14 */ unsigned long EventID
  /* this+0x18 */ unsigned short EventType
  /* this+0x1a */ unsigned short NumStrings
  /* this+0x1c */ unsigned short EventCategory
  /* this+0x1e */ unsigned short ReservedFlags
  /* this+0x20 */ unsigned long ClosingRecordNumber
  /* this+0x24 */ unsigned long StringOffset
  /* this+0x28 */ unsigned long UserSidLength
  /* this+0x2c */ unsigned long UserSidOffset
  /* this+0x30 */ unsigned long DataLength
  /* this+0x34 */ unsigned long DataOffset
}

struct _EVENTLOG_FULL_INFORMATION {
  /* this+0x0 */ unsigned long dwFull
}

struct _EVENTSFORLOGFILE {
  /* this+0x0 */ unsigned long ulSize
  /* this+0x4 */ wchar_t[0x100] szLogicalLogFile
  /* this+0x204 */ unsigned long ulNumRecords
  /* this+0x208 */ struct _EVENTLOGRECORD[0x0] pEventLogRecords
}

struct _EXCEPTION_DEBUG_INFO {
  /* this+0x0 */ struct _EXCEPTION_RECORD ExceptionRecord

  /* this+0x50 */ unsigned long dwFirstChance
}

struct _EXCEPTION_POINTERS {
  /* this+0x0 */ struct _EXCEPTION_RECORD * ExceptionRecord
  /* this+0x4 */ struct _CONTEXT * ContextRecord
}

struct _EXCEPTION_RECORD {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ struct _EXCEPTION_RECORD * ExceptionRecord
  /* this+0xc */ void * ExceptionAddress
  /* this+0x10 */ unsigned long NumberParameters
  /* this+0x14 */ unsigned long[0xf] ExceptionInformation
}

struct _EXCEPTION_RECORD32 {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ unsigned long ExceptionRecord
  /* this+0xc */ unsigned long ExceptionAddress
  /* this+0x10 */ unsigned long NumberParameters
  /* this+0x14 */ unsigned long[0xf] ExceptionInformation
}

struct _EXCEPTION_RECORD64 {
  /* this+0x0 */ unsigned long ExceptionCode
  /* this+0x4 */ unsigned long ExceptionFlags
  /* this+0x8 */ unsigned __int64 ExceptionRecord
  /* this+0x10 */ unsigned __int64 ExceptionAddress
  /* this+0x18 */ unsigned long NumberParameters
  /* this+0x1c */ unsigned long __unusedAlignment
  /* this+0x20 */ unsigned __int64[0xf] ExceptionInformation
}

struct _EXCEPTION_RECORD_CRT {
  /* this+0x0 */ unsigned long exception_number
  /* this+0x4 */ unsigned long exception_flags
  /* this+0x8 */ unsigned long exception_record
  /* this+0xc */ unsigned long exception_address
  /* this+0x10 */ unsigned long number_parameters
  /* this+0x14 */ unsigned long exception_information
}

struct _EXCEPTION_REGISTRATION {
  /* this+0x0 */ unsigned long prev
  /* this+0x4 */ unsigned long handler
}

struct _EXCEPTION_REGISTRATION_COMMON {
  /* this+0x8 */ unsigned long scopetable
  /* this+0xc */ unsigned long trylevel
}

struct _EXCEPTION_REGISTRATION_RECORD {
  /* this+0x0 */ struct _EXCEPTION_REGISTRATION_RECORD * Next
  /* this+0x4 */ function  * Handler
}

struct _EXIT_PROCESS_DEBUG_INFO {
  /* this+0x0 */ unsigned long dwExitCode
}

struct _EXIT_THREAD_DEBUG_INFO {
  /* this+0x0 */ unsigned long dwExitCode
}

struct _FILEMUIINFO {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwVersion
  /* this+0x8 */ unsigned long dwFileType
  /* this+0xc */ unsigned char[0x10] pChecksum
  /* this+0x1c */ unsigned char[0x10] pServiceChecksum
  /* this+0x2c */ unsigned long dwLanguageNameOffset
  /* this+0x30 */ unsigned long dwTypeIDMainSize
  /* this+0x34 */ unsigned long dwTypeIDMainOffset
  /* this+0x38 */ unsigned long dwTypeNameMainOffset
  /* this+0x3c */ unsigned long dwTypeIDMUISize
  /* this+0x40 */ unsigned long dwTypeIDMUIOffset
  /* this+0x44 */ unsigned long dwTypeNameMUIOffset
  /* this+0x48 */ unsigned char[0x8] abBuffer
}

struct _FILETIME {
  /* this+0x0 */ unsigned long dwLowDateTime
  /* this+0x4 */ unsigned long dwHighDateTime
}

struct _FILEX {
  /* this+0x0 */ struct _iobuf f

  /* this+0x20 */ struct _RTL_CRITICAL_SECTION lock

}

struct _FILE_ALLOCATION_INFO {
  /* this+0x0 */ union _LARGE_INTEGER AllocationSize

}

struct _FILE_ATTRIBUTE_TAG_INFO {
  /* this+0x0 */ unsigned long FileAttributes
  /* this+0x4 */ unsigned long ReparseTag
}

struct _FILE_BASIC_INFO {
  /* this+0x0 */ union _LARGE_INTEGER CreationTime

  /* this+0x8 */ union _LARGE_INTEGER LastAccessTime

  /* this+0x10 */ union _LARGE_INTEGER LastWriteTime

  /* this+0x18 */ union _LARGE_INTEGER ChangeTime

  /* this+0x20 */ unsigned long FileAttributes
}

struct _FILE_COMPRESSION_INFO {
  /* this+0x0 */ union _LARGE_INTEGER CompressedFileSize

  /* this+0x8 */ unsigned short CompressionFormat
  /* this+0xa */ unsigned char CompressionUnitShift
  /* this+0xb */ unsigned char ChunkShift
  /* this+0xc */ unsigned char ClusterShift
  /* this+0xd */ unsigned char[0x3] Reserved
}

struct _FILE_DISPOSITION_INFO {
  /* this+0x0 */ unsigned char DeleteFileA
}

struct _FILE_END_OF_FILE_INFO {
  /* this+0x0 */ union _LARGE_INTEGER EndOfFile

}

struct _FILE_ID_BOTH_DIR_INFO {
  /* this+0x0 */ unsigned long NextEntryOffset
  /* this+0x4 */ unsigned long FileIndex
  /* this+0x8 */ union _LARGE_INTEGER CreationTime

  /* this+0x10 */ union _LARGE_INTEGER LastAccessTime

  /* this+0x18 */ union _LARGE_INTEGER LastWriteTime

  /* this+0x20 */ union _LARGE_INTEGER ChangeTime

  /* this+0x28 */ union _LARGE_INTEGER EndOfFile

  /* this+0x30 */ union _LARGE_INTEGER AllocationSize

  /* this+0x38 */ unsigned long FileAttributes
  /* this+0x3c */ unsigned long FileNameLength
  /* this+0x40 */ unsigned long EaSize
  /* this+0x44 */ char ShortNameLength
  /* this+0x46 */ wchar_t[0xc] ShortName
  /* this+0x60 */ union _LARGE_INTEGER FileId

  /* this+0x68 */ wchar_t[0x1] FileName
}

struct _FILE_IO_PRIORITY_HINT_INFO {
  /* this+0x0 */ enum _PRIORITY_HINT PriorityHint
}

struct _FILE_NAME_INFO {
  /* this+0x0 */ unsigned long FileNameLength
  /* this+0x4 */ wchar_t[0x1] FileName
}

struct _FILE_NOTIFY_INFORMATION {
  /* this+0x0 */ unsigned long NextEntryOffset
  /* this+0x4 */ unsigned long Action
  /* this+0x8 */ unsigned long FileNameLength
  /* this+0xc */ wchar_t[0x1] FileName
}

struct _FILE_REMOTE_PROTOCOL_INFO {
  /* this+0x0 */ unsigned short StructureVersion
  /* this+0x2 */ unsigned short StructureSize
  /* this+0x4 */ unsigned long Protocol
  /* this+0x8 */ unsigned short ProtocolMajorVersion
  /* this+0xa */ unsigned short ProtocolMinorVersion
  /* this+0xc */ unsigned short ProtocolRevision
  /* this+0xe */ unsigned short Reserved
  /* this+0x10 */ unsigned long Flags
    /* this+0x14 */ struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-GenericReserved> GenericReserved

    /* this+0x34 */ struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-ProtocolSpecificReserved> ProtocolSpecificReserved

}

struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-GenericReserved> {
  /* this+0x0 */ unsigned long[0x8] Reserved
}

struct _FILE_REMOTE_PROTOCOL_INFO::<unnamed-type-ProtocolSpecificReserved> {
  /* this+0x0 */ unsigned long[0x10] Reserved
}

struct _FILE_RENAME_INFO {
  /* this+0x0 */ unsigned char ReplaceIfExists
  /* this+0x4 */ void * RootDirectory
  /* this+0x8 */ unsigned long FileNameLength
  /* this+0xc */ wchar_t[0x1] FileName
}

union _FILE_SEGMENT_ELEMENT {
  /* this+0x0 */ void * Buffer
  /* this+0x0 */ unsigned __int64 Alignment
}

struct _FILE_STANDARD_INFO {
  /* this+0x0 */ union _LARGE_INTEGER AllocationSize

  /* this+0x8 */ union _LARGE_INTEGER EndOfFile

  /* this+0x10 */ unsigned long NumberOfLinks
  /* this+0x14 */ unsigned char DeletePending
  /* this+0x15 */ unsigned char Directory
}

struct _FILE_STREAM_INFO {
  /* this+0x0 */ unsigned long NextEntryOffset
  /* this+0x4 */ unsigned long StreamNameLength
  /* this+0x8 */ union _LARGE_INTEGER StreamSize

  /* this+0x10 */ union _LARGE_INTEGER StreamAllocationSize

  /* this+0x18 */ wchar_t[0x1] StreamName
}

struct _FIXED {
  /* this+0x0 */ unsigned short fract
  /* this+0x2 */ short value
}

struct _FLOAT128 {
  /* this+0x0 */ __int64 LowPart
  /* this+0x8 */ __int64 HighPart
}

struct _FLOATING_SAVE_AREA {
  /* this+0x0 */ unsigned long ControlWord
  /* this+0x4 */ unsigned long StatusWord
  /* this+0x8 */ unsigned long TagWord
  /* this+0xc */ unsigned long ErrorOffset
  /* this+0x10 */ unsigned long ErrorSelector
  /* this+0x14 */ unsigned long DataOffset
  /* this+0x18 */ unsigned long DataSelector
  /* this+0x1c */ unsigned char[0x50] RegisterArea
  /* this+0x6c */ unsigned long Cr0NpxState
}

struct _FOCUS_EVENT_RECORD {
  /* this+0x0 */ int bSetFocus
}

struct _FP128 {
  /* this+0x0 */ unsigned long[0x4] W
}

struct _FP80 {
  /* this+0x0 */ unsigned short[0x5] W
}

struct _FPIEEE_EXCEPTION_FLAGS {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned int Inexact
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned int Underflow
  /* this(bf)+0x0:0x2 len(0x1) */ unsigned int Overflow
  /* this(bf)+0x0:0x3 len(0x1) */ unsigned int ZeroDivide
  /* this(bf)+0x0:0x4 len(0x1) */ unsigned int InvalidOperation
}

struct _FPIEEE_RECORD {
  /* this(bf)+0x0:0x0 len(0x2) */ unsigned int RoundingMode
  /* this(bf)+0x0:0x2 len(0x3) */ unsigned int Precision
  /* this(bf)+0x0:0x5 len(0xc) */ unsigned int Operation
  /* this+0x4 */ struct _FPIEEE_EXCEPTION_FLAGS Cause

  /* this+0x8 */ struct _FPIEEE_EXCEPTION_FLAGS Enable

  /* this+0xc */ struct _FPIEEE_EXCEPTION_FLAGS Status

  /* this+0x10 */ struct _FPIEEE_VALUE Operand1

  /* this+0x30 */ struct _FPIEEE_VALUE Operand2

  /* this+0x50 */ struct _FPIEEE_VALUE Result

}

struct _FPIEEE_VALUE {
  /* this+0x0 */ union <unnamed-tag> Value

  /* this(bf)+0x10:0x0 len(0x1) */ unsigned int OperandValid
  /* this(bf)+0x10:0x1 len(0x4) */ unsigned int Format
}

struct _FPO_DATA {
  /* this+0x0 */ unsigned long ulOffStart
  /* this+0x4 */ unsigned long cbProcSize
  /* this+0x8 */ unsigned long cdwLocals
  /* this+0xc */ unsigned short cdwParams
  /* this(bf)+0xe:0x0 len(0x8) */ unsigned short cbProlog
  /* this(bf)+0xe:0x8 len(0x3) */ unsigned short cbRegs
  /* this(bf)+0xe:0xb len(0x1) */ unsigned short fHasSEH
  /* this(bf)+0xe:0xc len(0x1) */ unsigned short fUseBP
  /* this(bf)+0xe:0xd len(0x1) */ unsigned short reserved
  /* this(bf)+0xe:0xe len(0x2) */ unsigned short cbFrame
}

struct _FPQ64 {
  /* this+0x0 */ __int64[0x2] W
}

struct _FloatOutStruct {
  /* this+0x0 */ short exp
  /* this+0x2 */ char sign
  /* this+0x3 */ char ManLen
  /* this+0x4 */ char[0x16] man
}

struct _GDI_TEB_BATCH {
  /* this+0x0 */ unsigned long Offset
  /* this+0x4 */ unsigned long HDC
  /* this+0x8 */ unsigned long[0x136] Buffer
}

struct _GENERIC_MAPPING {
  /* this+0x0 */ unsigned long GenericRead
  /* this+0x4 */ unsigned long GenericWrite
  /* this+0x8 */ unsigned long GenericExecute
  /* this+0xc */ unsigned long GenericAll
}

struct _GLYPHMETRICS {
  /* this+0x0 */ unsigned int gmBlackBoxX
  /* this+0x4 */ unsigned int gmBlackBoxY
  /* this+0x8 */ struct tagPOINT gmptGlyphOrigin

  /* this+0x10 */ short gmCellIncX
  /* this+0x12 */ short gmCellIncY
}

struct _GLYPHMETRICSFLOAT {
  /* this+0x0 */ float gmfBlackBoxX
  /* this+0x4 */ float gmfBlackBoxY
  /* this+0x8 */ struct _POINTFLOAT gmfptGlyphOrigin

  /* this+0x10 */ float gmfCellIncX
  /* this+0x14 */ float gmfCellIncY
}

struct _GRADIENT_RECT {
  /* this+0x0 */ unsigned long UpperLeft
  /* this+0x4 */ unsigned long LowerRight
}

struct _GRADIENT_TRIANGLE {
  /* this+0x0 */ unsigned long Vertex1
  /* this+0x4 */ unsigned long Vertex2
  /* this+0x8 */ unsigned long Vertex3
}

struct _GROUP_AFFINITY {
  /* this+0x0 */ unsigned long Mask
  /* this+0x4 */ unsigned short Group
  /* this+0x6 */ unsigned short[0x3] Reserved
}

struct _GROUP_RELATIONSHIP {
  /* this+0x0 */ unsigned short MaximumGroupCount
  /* this+0x2 */ unsigned short ActiveGroupCount
  /* this+0x4 */ unsigned char[0x14] Reserved
  /* this+0x18 */ struct _PROCESSOR_GROUP_INFO[0x1] GroupInfo
}

struct _GUID {
  /* this+0x0 */ unsigned long Data1
  /* this+0x4 */ unsigned short Data2
  /* this+0x6 */ unsigned short Data3
  /* this+0x8 */ unsigned char[0x8] Data4
}

struct _HARDWARE_COUNTER_DATA {
  /* this+0x0 */ enum _HARDWARE_COUNTER_TYPE Type
  /* this+0x4 */ unsigned long Reserved
  /* this+0x8 */ unsigned __int64 Value
}

class _HeapManager {
  /* this+0x0 */ function  * pOpNew
  /* this+0x4 */ function  * pOpDelete
    /* this+0x8 */ struct _HeapManager::Block * head
  /* this+0xc */ struct _HeapManager::Block * tail
  /* this+0x10 */ unsigned int blockLeft
  public void Constructor(function  *, function  *)
  public void * getMemory(unsigned int, int)
  public void Destructor()
}

struct _HeapManager::Block {
  /* this+0x0 */ struct _HeapManager::Block * next
  /* this+0x4 */ char[0x1000] memBlock
  public void Block()
}

struct _I64 {
  /* this+0x0 */ unsigned long[0x2] W
}

struct _ICONINFO {
  /* this+0x0 */ int fIcon
  /* this+0x4 */ unsigned long xHotspot
  /* this+0x8 */ unsigned long yHotspot
  /* this+0xc */ struct HBITMAP__ * hbmMask
  /* this+0x10 */ struct HBITMAP__ * hbmColor
}

struct _ICONINFOEXA {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ int fIcon
  /* this+0x8 */ unsigned long xHotspot
  /* this+0xc */ unsigned long yHotspot
  /* this+0x10 */ struct HBITMAP__ * hbmMask
  /* this+0x14 */ struct HBITMAP__ * hbmColor
  /* this+0x18 */ unsigned short wResID
  /* this+0x1a */ char[0x104] szModName
  /* this+0x11e */ char[0x104] szResName
}

struct _ICONINFOEXW {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ int fIcon
  /* this+0x8 */ unsigned long xHotspot
  /* this+0xc */ unsigned long yHotspot
  /* this+0x10 */ struct HBITMAP__ * hbmMask
  /* this+0x14 */ struct HBITMAP__ * hbmColor
  /* this+0x18 */ unsigned short wResID
  /* this+0x1a */ wchar_t[0x104] szModName
  /* this+0x222 */ wchar_t[0x104] szResName
}

struct _IMAGEHLP_LINE {
  /* this+0x0 */ unsigned long SizeOfStruct
  /* this+0x4 */ void * Key
  /* this+0x8 */ unsigned long LineNumber
  /* this+0xc */ char * FileName
  /* this+0x10 */ unsigned long Address
}

struct _IMAGEHLP_MODULE {
  /* this+0x0 */ unsigned long SizeOfStruct
  /* this+0x4 */ unsigned long BaseOfImage
  /* this+0x8 */ unsigned long ImageSize
  /* this+0xc */ unsigned long TimeDateStamp
  /* this+0x10 */ unsigned long CheckSum
  /* this+0x14 */ unsigned long NumSyms
  /* this+0x18 */ enum SYM_TYPE SymType
  /* this+0x1c */ char[0x20] ModuleName
  /* this+0x3c */ char[0x100] ImageName
  /* this+0x13c */ char[0x100] LoadedImageName
}

struct _IMAGEHLP_SYMBOL {
  /* this+0x0 */ unsigned long SizeOfStruct
  /* this+0x4 */ unsigned long Address
  /* this+0x8 */ unsigned long Size
  /* this+0xc */ unsigned long Flags
  /* this+0x10 */ unsigned long MaxNameLength
  /* this+0x14 */ char[0x1] Name
}

struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned __int64 BeginAddress
  /* this+0x8 */ unsigned __int64 EndAddress
  /* this+0x10 */ unsigned __int64 ExceptionHandler
  /* this+0x18 */ unsigned __int64 HandlerData
  /* this+0x20 */ unsigned __int64 PrologEndAddress
}

struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long BeginAddress
  /* this+0x4 */ unsigned long EndAddress
  /* this+0x8 */ unsigned long ExceptionHandler
  /* this+0xc */ unsigned long HandlerData
  /* this+0x10 */ unsigned long PrologEndAddress
}

struct _IMAGE_ARCHIVE_MEMBER_HEADER {
  /* this+0x0 */ unsigned char[0x10] Name
  /* this+0x10 */ unsigned char[0xc] Date
  /* this+0x1c */ unsigned char[0x6] UserID
  /* this+0x22 */ unsigned char[0x6] GroupID
  /* this+0x28 */ unsigned char[0x8] Mode
  /* this+0x30 */ unsigned char[0xa] Size
  /* this+0x3a */ unsigned char[0x2] EndHeader
}

union _IMAGE_AUX_SYMBOL {
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym> Sym

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-File> File

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Section> Section

  /* this+0x0 */ struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-CRC> CRC

}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-CRC> {
  /* this+0x0 */ unsigned long crc
  /* this+0x4 */ unsigned char[0xe] rgbReserved
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-File> {
  /* this+0x0 */ unsigned char[0x12] Name
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Section> {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ unsigned short NumberOfRelocations
  /* this+0x6 */ unsigned short NumberOfLinenumbers
  /* this+0x8 */ unsigned long CheckSum
  /* this+0xc */ short Number
  /* this+0xe */ unsigned char Selection
  /* this+0xf */ unsigned char bReserved
  /* this+0x10 */ short HighNumber
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym> {
  /* this+0x0 */ unsigned long TagIndex
    /* this+0x4 */ union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc> Misc

    /* this+0x8 */ union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry> FcnAry

  /* this+0x10 */ unsigned short TvIndex
}

union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry> {
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function> Function

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array> Array

}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array> {
  /* this+0x0 */ unsigned short[0x4] Dimension
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function> {
  /* this+0x0 */ unsigned long PointerToLinenumber
  /* this+0x4 */ unsigned long PointerToNextFunction
}

union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc> {
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz> LnSz

  /* this+0x0 */ unsigned long TotalSize
}

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz> {
  /* this+0x0 */ unsigned short Linenumber
  /* this+0x2 */ unsigned short Size
}

union _IMAGE_AUX_SYMBOL_EX {
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Sym> Sym

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-File> File

    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Section> Section

  /* this+0x0 */ struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef

  /* this+0x12 */ unsigned char[0x2] rgbReserved
    /* this+0x0 */ struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-CRC> CRC

}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-CRC> {
  /* this+0x0 */ unsigned long crc
  /* this+0x4 */ unsigned char[0x10] rgbReserved
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-File> {
  /* this+0x0 */ unsigned char[0x14] Name
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Section> {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ unsigned short NumberOfRelocations
  /* this+0x6 */ unsigned short NumberOfLinenumbers
  /* this+0x8 */ unsigned long CheckSum
  /* this+0xc */ short Number
  /* this+0xe */ unsigned char Selection
  /* this+0xf */ unsigned char bReserved
  /* this+0x10 */ short HighNumber
  /* this+0x12 */ unsigned char[0x2] rgbReserved
}

struct _IMAGE_AUX_SYMBOL_EX::<unnamed-type-Sym> {
  /* this+0x0 */ unsigned long WeakDefaultSymIndex
  /* this+0x4 */ unsigned long WeakSearchType
  /* this+0x8 */ unsigned char[0xc] rgbReserved
}

struct _IMAGE_BASE_RELOCATION {
  /* this+0x0 */ unsigned long VirtualAddress
  /* this+0x4 */ unsigned long SizeOfBlock
}

struct _IMAGE_BOUND_FORWARDER_REF {
  /* this+0x0 */ unsigned long TimeDateStamp
  /* this+0x4 */ unsigned short OffsetModuleName
  /* this+0x6 */ unsigned short Reserved
}

struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
  /* this+0x0 */ unsigned long TimeDateStamp
  /* this+0x4 */ unsigned short OffsetModuleName
  /* this+0x6 */ unsigned short NumberOfModuleForwarderRefs
}

struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long FuncStart
  /* this(bf)+0x4:0x0 len(0x8) */ unsigned long PrologLen
  /* this(bf)+0x4:0x8 len(0x16) */ unsigned long FuncLen
  /* this(bf)+0x4:0x1e len(0x1) */ unsigned long ThirtyTwoBit
  /* this(bf)+0x4:0x1f len(0x1) */ unsigned long ExceptionFlag
}

struct _IMAGE_COFF_SYMBOLS_HEADER {
  /* this+0x0 */ unsigned long NumberOfSymbols
  /* this+0x4 */ unsigned long LvaToFirstSymbol
  /* this+0x8 */ unsigned long NumberOfLinenumbers
  /* this+0xc */ unsigned long LvaToFirstLinenumber
  /* this+0x10 */ unsigned long RvaToFirstByteOfCode
  /* this+0x14 */ unsigned long RvaToLastByteOfCode
  /* this+0x18 */ unsigned long RvaToFirstByteOfData
  /* this+0x1c */ unsigned long RvaToLastByteOfData
}

struct _IMAGE_DATA_DIRECTORY {
  /* this+0x0 */ unsigned long VirtualAddress
  /* this+0x4 */ unsigned long Size
}

struct _IMAGE_DEBUG_DIRECTORY {
  /* this+0x0 */ unsigned long Characteristics
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned long Type
  /* this+0x10 */ unsigned long SizeOfData
  /* this+0x14 */ unsigned long AddressOfRawData
  /* this+0x18 */ unsigned long PointerToRawData
}

struct _IMAGE_DEBUG_MISC {
  /* this+0x0 */ unsigned long DataType
  /* this+0x4 */ unsigned long Length
  /* this+0x8 */ unsigned char Unicode
  /* this+0x9 */ unsigned char[0x3] Reserved
  /* this+0xc */ unsigned char[0x1] Data
}

struct _IMAGE_DOS_HEADER {
  /* this+0x0 */ unsigned short e_magic
  /* this+0x2 */ unsigned short e_cblp
  /* this+0x4 */ unsigned short e_cp
  /* this+0x6 */ unsigned short e_crlc
  /* this+0x8 */ unsigned short e_cparhdr
  /* this+0xa */ unsigned short e_minalloc
  /* this+0xc */ unsigned short e_maxalloc
  /* this+0xe */ unsigned short e_ss
  /* this+0x10 */ unsigned short e_sp
  /* this+0x12 */ unsigned short e_csum
  /* this+0x14 */ unsigned short e_ip
  /* this+0x16 */ unsigned short e_cs
  /* this+0x18 */ unsigned short e_lfarlc
  /* this+0x1a */ unsigned short e_ovno
  /* this+0x1c */ unsigned short[0x4] e_res
  /* this+0x24 */ unsigned short e_oemid
  /* this+0x26 */ unsigned short e_oeminfo
  /* this+0x28 */ unsigned short[0xa] e_res2
  /* this+0x3c */ long e_lfanew
}

struct _IMAGE_EXPORT_DIRECTORY {
  /* this+0x0 */ unsigned long Characteristics
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned long Name
  /* this+0x10 */ unsigned long Base
  /* this+0x14 */ unsigned long NumberOfFunctions
  /* this+0x18 */ unsigned long NumberOfNames
  /* this+0x1c */ unsigned long AddressOfFunctions
  /* this+0x20 */ unsigned long AddressOfNames
  /* this+0x24 */ unsigned long AddressOfNameOrdinals
}

struct _IMAGE_FILE_HEADER {
  /* this+0x0 */ unsigned short Machine
  /* this+0x2 */ unsigned short NumberOfSections
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned long PointerToSymbolTable
  /* this+0xc */ unsigned long NumberOfSymbols
  /* this+0x10 */ unsigned short SizeOfOptionalHeader
  /* this+0x12 */ unsigned short Characteristics
}

struct _IMAGE_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long StartingAddress
  /* this+0x4 */ unsigned long EndingAddress
  /* this+0x8 */ unsigned long EndOfPrologue
}

struct _IMAGE_FUNCTION_ENTRY64 {
  /* this+0x0 */ unsigned __int64 StartingAddress
  /* this+0x8 */ unsigned __int64 EndingAddress
  /* this+0x10 */ unsigned __int64 EndOfPrologue
  /* this+0x10 */ unsigned __int64 UnwindInfoAddress
}

struct _IMAGE_IMPORT_BY_NAME {
  /* this+0x0 */ unsigned short Hint
  /* this+0x2 */ unsigned char[0x1] Name
}

struct _IMAGE_IMPORT_DESCRIPTOR {
  /* this+0x0 */ unsigned long Characteristics
  /* this+0x0 */ unsigned long OriginalFirstThunk
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned long ForwarderChain
  /* this+0xc */ unsigned long Name
  /* this+0x10 */ unsigned long FirstThunk
}

struct _IMAGE_LINENUMBER {
    /* this+0x0 */ union _IMAGE_LINENUMBER::<unnamed-type-Type> Type

  /* this+0x4 */ unsigned short Linenumber
}

union _IMAGE_LINENUMBER::<unnamed-type-Type> {
  /* this+0x0 */ unsigned long SymbolTableIndex
  /* this+0x0 */ unsigned long VirtualAddress
}

struct _IMAGE_NT_HEADERS {
  /* this+0x0 */ unsigned long Signature
  /* this+0x4 */ struct _IMAGE_FILE_HEADER FileHeader

  /* this+0x18 */ struct _IMAGE_OPTIONAL_HEADER OptionalHeader

}

struct _IMAGE_NT_HEADERS64 {
  /* this+0x0 */ unsigned long Signature
  /* this+0x4 */ struct _IMAGE_FILE_HEADER FileHeader

  /* this+0x18 */ struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader

}

struct _IMAGE_OPTIONAL_HEADER {
  /* this+0x0 */ unsigned short Magic
  /* this+0x2 */ unsigned char MajorLinkerVersion
  /* this+0x3 */ unsigned char MinorLinkerVersion
  /* this+0x4 */ unsigned long SizeOfCode
  /* this+0x8 */ unsigned long SizeOfInitializedData
  /* this+0xc */ unsigned long SizeOfUninitializedData
  /* this+0x10 */ unsigned long AddressOfEntryPoint
  /* this+0x14 */ unsigned long BaseOfCode
  /* this+0x18 */ unsigned long BaseOfData
  /* this+0x1c */ unsigned long ImageBase
  /* this+0x20 */ unsigned long SectionAlignment
  /* this+0x24 */ unsigned long FileAlignment
  /* this+0x28 */ unsigned short MajorOperatingSystemVersion
  /* this+0x2a */ unsigned short MinorOperatingSystemVersion
  /* this+0x2c */ unsigned short MajorImageVersion
  /* this+0x2e */ unsigned short MinorImageVersion
  /* this+0x30 */ unsigned short MajorSubsystemVersion
  /* this+0x32 */ unsigned short MinorSubsystemVersion
  /* this+0x34 */ unsigned long Win32VersionValue
  /* this+0x38 */ unsigned long SizeOfImage
  /* this+0x3c */ unsigned long SizeOfHeaders
  /* this+0x40 */ unsigned long CheckSum
  /* this+0x44 */ unsigned short Subsystem
  /* this+0x46 */ unsigned short DllCharacteristics
  /* this+0x48 */ unsigned long SizeOfStackReserve
  /* this+0x4c */ unsigned long SizeOfStackCommit
  /* this+0x50 */ unsigned long SizeOfHeapReserve
  /* this+0x54 */ unsigned long SizeOfHeapCommit
  /* this+0x58 */ unsigned long LoaderFlags
  /* this+0x5c */ unsigned long NumberOfRvaAndSizes
  /* this+0x60 */ struct _IMAGE_DATA_DIRECTORY[0x10] DataDirectory
}

struct _IMAGE_OPTIONAL_HEADER64 {
  /* this+0x0 */ unsigned short Magic
  /* this+0x2 */ unsigned char MajorLinkerVersion
  /* this+0x3 */ unsigned char MinorLinkerVersion
  /* this+0x4 */ unsigned long SizeOfCode
  /* this+0x8 */ unsigned long SizeOfInitializedData
  /* this+0xc */ unsigned long SizeOfUninitializedData
  /* this+0x10 */ unsigned long AddressOfEntryPoint
  /* this+0x14 */ unsigned long BaseOfCode
  /* this+0x18 */ unsigned __int64 ImageBase
  /* this+0x20 */ unsigned long SectionAlignment
  /* this+0x24 */ unsigned long FileAlignment
  /* this+0x28 */ unsigned short MajorOperatingSystemVersion
  /* this+0x2a */ unsigned short MinorOperatingSystemVersion
  /* this+0x2c */ unsigned short MajorImageVersion
  /* this+0x2e */ unsigned short MinorImageVersion
  /* this+0x30 */ unsigned short MajorSubsystemVersion
  /* this+0x32 */ unsigned short MinorSubsystemVersion
  /* this+0x34 */ unsigned long Win32VersionValue
  /* this+0x38 */ unsigned long SizeOfImage
  /* this+0x3c */ unsigned long SizeOfHeaders
  /* this+0x40 */ unsigned long CheckSum
  /* this+0x44 */ unsigned short Subsystem
  /* this+0x46 */ unsigned short DllCharacteristics
  /* this+0x48 */ unsigned __int64 SizeOfStackReserve
  /* this+0x50 */ unsigned __int64 SizeOfStackCommit
  /* this+0x58 */ unsigned __int64 SizeOfHeapReserve
  /* this+0x60 */ unsigned __int64 SizeOfHeapCommit
  /* this+0x68 */ unsigned long LoaderFlags
  /* this+0x6c */ unsigned long NumberOfRvaAndSizes
  /* this+0x70 */ struct _IMAGE_DATA_DIRECTORY[0x10] DataDirectory
}

struct _IMAGE_OS2_HEADER {
  /* this+0x0 */ unsigned short ne_magic
  /* this+0x2 */ char ne_ver
  /* this+0x3 */ char ne_rev
  /* this+0x4 */ unsigned short ne_enttab
  /* this+0x6 */ unsigned short ne_cbenttab
  /* this+0x8 */ long ne_crc
  /* this+0xc */ unsigned short ne_flags
  /* this+0xe */ unsigned short ne_autodata
  /* this+0x10 */ unsigned short ne_heap
  /* this+0x12 */ unsigned short ne_stack
  /* this+0x14 */ long ne_csip
  /* this+0x18 */ long ne_sssp
  /* this+0x1c */ unsigned short ne_cseg
  /* this+0x1e */ unsigned short ne_cmod
  /* this+0x20 */ unsigned short ne_cbnrestab
  /* this+0x22 */ unsigned short ne_segtab
  /* this+0x24 */ unsigned short ne_rsrctab
  /* this+0x26 */ unsigned short ne_restab
  /* this+0x28 */ unsigned short ne_modtab
  /* this+0x2a */ unsigned short ne_imptab
  /* this+0x2c */ long ne_nrestab
  /* this+0x30 */ unsigned short ne_cmovent
  /* this+0x32 */ unsigned short ne_align
  /* this+0x34 */ unsigned short ne_cres
  /* this+0x36 */ unsigned char ne_exetyp
  /* this+0x37 */ unsigned char ne_flagsothers
  /* this+0x38 */ unsigned short ne_pretthunks
  /* this+0x3a */ unsigned short ne_psegrefbytes
  /* this+0x3c */ unsigned short ne_swaparea
  /* this+0x3e */ unsigned short ne_expver
}

struct _IMAGE_RELOCATION {
  /* this+0x0 */ unsigned long VirtualAddress
  /* this+0x0 */ unsigned long RelocCount
  /* this+0x4 */ unsigned long SymbolTableIndex
  /* this+0x8 */ unsigned short Type
}

struct _IMAGE_RESOURCE_DATA_ENTRY {
  /* this+0x0 */ unsigned long OffsetToData
  /* this+0x4 */ unsigned long Size
  /* this+0x8 */ unsigned long CodePage
  /* this+0xc */ unsigned long Reserved
}

struct _IMAGE_RESOURCE_DIRECTORY {
  /* this+0x0 */ unsigned long Characteristics
  /* this+0x4 */ unsigned long TimeDateStamp
  /* this+0x8 */ unsigned short MajorVersion
  /* this+0xa */ unsigned short MinorVersion
  /* this+0xc */ unsigned short NumberOfNamedEntries
  /* this+0xe */ unsigned short NumberOfIdEntries
}

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
  /* this(bf)+0x0:0x0 len(0x1f) */ unsigned long NameOffset
  /* this(bf)+0x0:0x1f len(0x1) */ unsigned long NameIsString
  /* this+0x0 */ unsigned long Name
  /* this+0x0 */ unsigned short Id
  /* this+0x4 */ unsigned long OffsetToData
  /* this(bf)+0x4:0x0 len(0x1f) */ unsigned long OffsetToDirectory
  /* this(bf)+0x4:0x1f len(0x1) */ unsigned long DataIsDirectory
}

struct _IMAGE_RESOURCE_DIRECTORY_STRING {
  /* this+0x0 */ unsigned short Length
  /* this+0x2 */ char[0x1] NameString
}

struct _IMAGE_RESOURCE_DIR_STRING_U {
  /* this+0x0 */ unsigned short Length
  /* this+0x2 */ wchar_t[0x1] NameString
}

struct _IMAGE_ROM_HEADERS {
  /* this+0x0 */ struct _IMAGE_FILE_HEADER FileHeader

  /* this+0x14 */ struct _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader

}

struct _IMAGE_ROM_OPTIONAL_HEADER {
  /* this+0x0 */ unsigned short Magic
  /* this+0x2 */ unsigned char MajorLinkerVersion
  /* this+0x3 */ unsigned char MinorLinkerVersion
  /* this+0x4 */ unsigned long SizeOfCode
  /* this+0x8 */ unsigned long SizeOfInitializedData
  /* this+0xc */ unsigned long SizeOfUninitializedData
  /* this+0x10 */ unsigned long AddressOfEntryPoint
  /* this+0x14 */ unsigned long BaseOfCode
  /* this+0x18 */ unsigned long BaseOfData
  /* this+0x1c */ unsigned long BaseOfBss
  /* this+0x20 */ unsigned long GprMask
  /* this+0x24 */ unsigned long[0x4] CprMask
  /* this+0x34 */ unsigned long GpValue
}

struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
  /* this+0x0 */ unsigned long BeginAddress
  /* this+0x4 */ unsigned long EndAddress
  /* this+0x8 */ unsigned long UnwindInfoAddress
}

struct _IMAGE_SECTION_HEADER {
  /* this+0x0 */ unsigned char[0x8] Name
  /* this+0x8 */ union <unnamed-tag> Misc

  /* this+0xc */ unsigned long VirtualAddress
  /* this+0x10 */ unsigned long SizeOfRawData
  /* this+0x14 */ unsigned long PointerToRawData
  /* this+0x18 */ unsigned long PointerToRelocations
  /* this+0x1c */ unsigned long PointerToLinenumbers
  /* this+0x20 */ unsigned short NumberOfRelocations
  /* this+0x22 */ unsigned short NumberOfLinenumbers
  /* this+0x24 */ unsigned long Characteristics
}

union _IMAGE_SECTION_HEADER::<unnamed-type-Misc> {
  /* this+0x0 */ unsigned long PhysicalAddress
  /* this+0x0 */ unsigned long VirtualSize
}

struct _IMAGE_SEPARATE_DEBUG_HEADER {
  /* this+0x0 */ unsigned short Signature
  /* this+0x2 */ unsigned short Flags
  /* this+0x4 */ unsigned short Machine
  /* this+0x6 */ unsigned short Characteristics
  /* this+0x8 */ unsigned long TimeDateStamp
  /* this+0xc */ unsigned long CheckSum
  /* this+0x10 */ unsigned long ImageBase
  /* this+0x14 */ unsigned long SizeOfImage
  /* this+0x18 */ unsigned long NumberOfSections
  /* this+0x1c */ unsigned long ExportedNamesSize
  /* this+0x20 */ unsigned long DebugDirectorySize
  /* this+0x24 */ unsigned long SectionAlignment
  /* this+0x28 */ unsigned long[0x2] Reserved
}

struct _IMAGE_SYMBOL {
    /* this+0x0 */ union _IMAGE_SYMBOL::<unnamed-type-N> N

  /* this+0x8 */ unsigned long Value
  /* this+0xc */ short SectionNumber
  /* this+0xe */ unsigned short Type
  /* this+0x10 */ unsigned char StorageClass
  /* this+0x11 */ unsigned char NumberOfAuxSymbols
}

union _IMAGE_SYMBOL::<unnamed-type-N> {
  /* this+0x0 */ unsigned char[0x8] ShortName
    /* this+0x0 */ struct _IMAGE_SYMBOL::<unnamed-type-N>::<unnamed-type-Name> Name

  /* this+0x0 */ unsigned long[0x2] LongName
}

struct _IMAGE_SYMBOL::<unnamed-type-N>::<unnamed-type-Name> {
  /* this+0x0 */ unsigned long Short
  /* this+0x4 */ unsigned long Long
}

struct _IMAGE_SYMBOL_EX {
    /* this+0x0 */ union _IMAGE_SYMBOL_EX::<unnamed-type-N> N

  /* this+0x8 */ unsigned long Value
  /* this+0xc */ long SectionNumber
  /* this+0x10 */ unsigned short Type
  /* this+0x12 */ unsigned char StorageClass
  /* this+0x13 */ unsigned char NumberOfAuxSymbols
}

union _IMAGE_SYMBOL_EX::<unnamed-type-N> {
  /* this+0x0 */ unsigned char[0x8] ShortName
    /* this+0x0 */ struct _IMAGE_SYMBOL_EX::<unnamed-type-N>::<unnamed-type-Name> Name

  /* this+0x0 */ unsigned long[0x2] LongName
}

struct _IMAGE_SYMBOL_EX::<unnamed-type-N>::<unnamed-type-Name> {
  /* this+0x0 */ unsigned long Short
  /* this+0x4 */ unsigned long Long
}

struct _IMAGE_THUNK_DATA32 {
    /* this+0x0 */ union _IMAGE_THUNK_DATA32::<unnamed-type-u1> u1

}

union _IMAGE_THUNK_DATA32::<unnamed-type-u1> {
  /* this+0x0 */ unsigned long ForwarderString
  /* this+0x0 */ unsigned long Function
  /* this+0x0 */ unsigned long Ordinal
  /* this+0x0 */ unsigned long AddressOfData
}

struct _IMAGE_THUNK_DATA64 {
    /* this+0x0 */ union _IMAGE_THUNK_DATA64::<unnamed-type-u1> u1

}

union _IMAGE_THUNK_DATA64::<unnamed-type-u1> {
  /* this+0x0 */ unsigned __int64 ForwarderString
  /* this+0x0 */ unsigned __int64 Function
  /* this+0x0 */ unsigned __int64 Ordinal
  /* this+0x0 */ unsigned __int64 AddressOfData
}

struct _IMAGE_TLS_DIRECTORY32 {
  /* this+0x0 */ unsigned long StartAddressOfRawData
  /* this+0x4 */ unsigned long EndAddressOfRawData
  /* this+0x8 */ unsigned long AddressOfIndex
  /* this+0xc */ unsigned long AddressOfCallBacks
  /* this+0x10 */ unsigned long SizeOfZeroFill
  /* this+0x14 */ unsigned long Characteristics
}

struct _IMAGE_TLS_DIRECTORY64 {
  /* this+0x0 */ unsigned __int64 StartAddressOfRawData
  /* this+0x8 */ unsigned __int64 EndAddressOfRawData
  /* this+0x10 */ unsigned __int64 AddressOfIndex
  /* this+0x18 */ unsigned __int64 AddressOfCallBacks
  /* this+0x20 */ unsigned long SizeOfZeroFill
  /* this+0x24 */ unsigned long Characteristics
}

struct _IMAGE_VXD_HEADER {
  /* this+0x0 */ unsigned short e32_magic
  /* this+0x2 */ unsigned char e32_border
  /* this+0x3 */ unsigned char e32_worder
  /* this+0x4 */ unsigned long e32_level
  /* this+0x8 */ unsigned short e32_cpu
  /* this+0xa */ unsigned short e32_os
  /* this+0xc */ unsigned long e32_ver
  /* this+0x10 */ unsigned long e32_mflags
  /* this+0x14 */ unsigned long e32_mpages
  /* this+0x18 */ unsigned long e32_startobj
  /* this+0x1c */ unsigned long e32_eip
  /* this+0x20 */ unsigned long e32_stackobj
  /* this+0x24 */ unsigned long e32_esp
  /* this+0x28 */ unsigned long e32_pagesize
  /* this+0x2c */ unsigned long e32_lastpagesize
  /* this+0x30 */ unsigned long e32_fixupsize
  /* this+0x34 */ unsigned long e32_fixupsum
  /* this+0x38 */ unsigned long e32_ldrsize
  /* this+0x3c */ unsigned long e32_ldrsum
  /* this+0x40 */ unsigned long e32_objtab
  /* this+0x44 */ unsigned long e32_objcnt
  /* this+0x48 */ unsigned long e32_objmap
  /* this+0x4c */ unsigned long e32_itermap
  /* this+0x50 */ unsigned long e32_rsrctab
  /* this+0x54 */ unsigned long e32_rsrccnt
  /* this+0x58 */ unsigned long e32_restab
  /* this+0x5c */ unsigned long e32_enttab
  /* this+0x60 */ unsigned long e32_dirtab
  /* this+0x64 */ unsigned long e32_dircnt
  /* this+0x68 */ unsigned long e32_fpagetab
  /* this+0x6c */ unsigned long e32_frectab
  /* this+0x70 */ unsigned long e32_impmod
  /* this+0x74 */ unsigned long e32_impmodcnt
  /* this+0x78 */ unsigned long e32_impproc
  /* this+0x7c */ unsigned long e32_pagesum
  /* this+0x80 */ unsigned long e32_datapage
  /* this+0x84 */ unsigned long e32_preload
  /* this+0x88 */ unsigned long e32_nrestab
  /* this+0x8c */ unsigned long e32_cbnrestab
  /* this+0x90 */ unsigned long e32_nressum
  /* this+0x94 */ unsigned long e32_autodata
  /* this+0x98 */ unsigned long e32_debuginfo
  /* this+0x9c */ unsigned long e32_debuglen
  /* this+0xa0 */ unsigned long e32_instpreload
  /* this+0xa4 */ unsigned long e32_instdemand
  /* this+0xa8 */ unsigned long e32_heapsize
  /* this+0xac */ unsigned char[0xc] e32_res3
  /* this+0xb8 */ unsigned long e32_winresoff
  /* this+0xbc */ unsigned long e32_winreslen
  /* this+0xc0 */ unsigned short e32_devid
  /* this+0xc2 */ unsigned short e32_ddkver
}

struct _INPUT_RECORD {
  /* this+0x0 */ unsigned short EventType
    /* this+0x4 */ union _INPUT_RECORD::<unnamed-type-Event> Event

}

union _INPUT_RECORD::<unnamed-type-Event> {
  /* this+0x0 */ struct _KEY_EVENT_RECORD KeyEvent

  /* this+0x0 */ struct _MOUSE_EVENT_RECORD MouseEvent

  /* this+0x0 */ struct _WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent

  /* this+0x0 */ struct _MENU_EVENT_RECORD MenuEvent

  /* this+0x0 */ struct _FOCUS_EVENT_RECORD FocusEvent

}

struct _IO_COUNTERS {
  /* this+0x0 */ unsigned __int64 ReadOperationCount
  /* this+0x8 */ unsigned __int64 WriteOperationCount
  /* this+0x10 */ unsigned __int64 OtherOperationCount
  /* this+0x18 */ unsigned __int64 ReadTransferCount
  /* this+0x20 */ unsigned __int64 WriteTransferCount
  /* this+0x28 */ unsigned __int64 OtherTransferCount
}

struct _ImageArchitectureEntry {
  /* this+0x0 */ unsigned long FixupInstRVA
  /* this+0x4 */ unsigned long NewInst
}

struct _ImageArchitectureHeader {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned int AmaskValue
  /* this(bf)+0x0:0x8 len(0x8) */ unsigned int AmaskShift
  /* this+0x4 */ unsigned long FirstEntryRVA
}

struct _JIT_DEBUG_INFO {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwProcessorArchitecture
  /* this+0x8 */ unsigned long dwThreadID
  /* this+0xc */ unsigned long dwReserved0
  /* this+0x10 */ unsigned __int64 lpExceptionAddress
  /* this+0x18 */ unsigned __int64 lpExceptionRecord
  /* this+0x20 */ unsigned __int64 lpContextRecord
}

struct _JMP_BUF {
  /* this+0x0 */ unsigned long saved_ebp
  /* this+0x4 */ unsigned long saved_ebx
  /* this+0x8 */ unsigned long saved_edi
  /* this+0xc */ unsigned long saved_esi
  /* this+0x10 */ unsigned long saved_esp
  /* this+0x14 */ unsigned long saved_return
  /* this+0x18 */ unsigned long saved_xregistration
  /* this+0x1c */ unsigned long saved_trylevel
  /* this+0x20 */ unsigned long version_cookie
  /* this+0x24 */ unsigned long unwind_func
  /* this+0x28 */ unsigned long unwind_data
}

struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
  /* this+0x0 */ void * CompletionKey
  /* this+0x4 */ void * CompletionPort
}

struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
  /* this+0x0 */ union _LARGE_INTEGER TotalUserTime

  /* this+0x8 */ union _LARGE_INTEGER TotalKernelTime

  /* this+0x10 */ union _LARGE_INTEGER ThisPeriodTotalUserTime

  /* this+0x18 */ union _LARGE_INTEGER ThisPeriodTotalKernelTime

  /* this+0x20 */ unsigned long TotalPageFaultCount
  /* this+0x24 */ unsigned long TotalProcesses
  /* this+0x28 */ unsigned long ActiveProcesses
  /* this+0x2c */ unsigned long TotalTerminatedProcesses
}

struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
  /* this+0x0 */ struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo

  /* this+0x30 */ struct _IO_COUNTERS IoInfo

}

struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
  /* this+0x0 */ union _LARGE_INTEGER PerProcessUserTimeLimit

  /* this+0x8 */ union _LARGE_INTEGER PerJobUserTimeLimit

  /* this+0x10 */ unsigned long LimitFlags
  /* this+0x14 */ unsigned long MinimumWorkingSetSize
  /* this+0x18 */ unsigned long MaximumWorkingSetSize
  /* this+0x1c */ unsigned long ActiveProcessLimit
  /* this+0x20 */ unsigned long Affinity
  /* this+0x24 */ unsigned long PriorityClass
  /* this+0x28 */ unsigned long SchedulingClass
}

struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
  /* this+0x0 */ unsigned long NumberOfAssignedProcesses
  /* this+0x4 */ unsigned long NumberOfProcessIdsInList
  /* this+0x8 */ unsigned long[0x1] ProcessIdList
}

struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
  /* this+0x0 */ unsigned long UIRestrictionsClass
}

struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
  /* this+0x0 */ unsigned long EndOfJobTimeAction
}

struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
  /* this+0x0 */ struct _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation

  /* this+0x30 */ struct _IO_COUNTERS IoInfo

  /* this+0x60 */ unsigned long ProcessMemoryLimit
  /* this+0x64 */ unsigned long JobMemoryLimit
  /* this+0x68 */ unsigned long PeakProcessMemoryUsed
  /* this+0x6c */ unsigned long PeakJobMemoryUsed
}

struct _JOBOBJECT_JOBSET_INFORMATION {
  /* this+0x0 */ unsigned long MemberLevel
}

struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
  /* this+0x0 */ unsigned long SecurityLimitFlags
  /* this+0x4 */ void * JobToken
  /* this+0x8 */ struct _TOKEN_GROUPS * SidsToDisable
  /* this+0xc */ struct _TOKEN_PRIVILEGES * PrivilegesToDelete
  /* this+0x10 */ struct _TOKEN_GROUPS * RestrictedSids
}

struct _JOB_SET_ARRAY {
  /* this+0x0 */ void * JobHandle
  /* this+0x4 */ unsigned long MemberLevel
  /* this+0x8 */ unsigned long Flags
}

struct _KCRM_MARSHAL_HEADER {
  /* this+0x0 */ unsigned long VersionMajor
  /* this+0x4 */ unsigned long VersionMinor
  /* this+0x8 */ unsigned long NumProtocols
  /* this+0xc */ unsigned long Unused
}

struct _KCRM_PROTOCOL_BLOB {
  /* this+0x0 */ struct _GUID ProtocolId

  /* this+0x10 */ unsigned long StaticInfoLength
  /* this+0x14 */ unsigned long TransactionIdInfoLength
  /* this+0x18 */ unsigned long Unused1
  /* this+0x1c */ unsigned long Unused2
}

struct _KCRM_TRANSACTION_BLOB {
  /* this+0x0 */ struct _GUID UOW

  /* this+0x10 */ struct _GUID TmIdentity

  /* this+0x20 */ unsigned long IsolationLevel
  /* this+0x24 */ unsigned long IsolationFlags
  /* this+0x28 */ unsigned long Timeout
  /* this+0x2c */ wchar_t[0x40] Description
}

struct _KDHELP {
  /* this+0x0 */ unsigned long Thread
  /* this+0x4 */ unsigned long ThCallbackStack
  /* this+0x8 */ unsigned long NextCallback
  /* this+0xc */ unsigned long FramePointer
  /* this+0x10 */ unsigned long KiCallUserMode
  /* this+0x14 */ unsigned long KeUserCallbackDispatcher
  /* this+0x18 */ unsigned long SystemRangeStart
  /* this+0x1c */ unsigned long ThCallbackBStore
  /* this+0x20 */ unsigned long KiUserExceptionDispatcher
  /* this+0x24 */ unsigned long StackBase
  /* this+0x28 */ unsigned long StackLimit
  /* this+0x2c */ unsigned long[0x5] Reserved
}

struct _KDHELP64 {
  /* this+0x0 */ unsigned __int64 Thread
  /* this+0x8 */ unsigned long ThCallbackStack
  /* this+0xc */ unsigned long ThCallbackBStore
  /* this+0x10 */ unsigned long NextCallback
  /* this+0x14 */ unsigned long FramePointer
  /* this+0x18 */ unsigned __int64 KiCallUserMode
  /* this+0x20 */ unsigned __int64 KeUserCallbackDispatcher
  /* this+0x28 */ unsigned __int64 SystemRangeStart
  /* this+0x30 */ unsigned __int64 KiUserExceptionDispatcher
  /* this+0x38 */ unsigned __int64 StackBase
  /* this+0x40 */ unsigned __int64 StackLimit
  /* this+0x48 */ unsigned __int64[0x5] Reserved
}

struct _KEY_EVENT_RECORD {
  /* this+0x0 */ int bKeyDown
  /* this+0x4 */ unsigned short wRepeatCount
  /* this+0x6 */ unsigned short wVirtualKeyCode
  /* this+0x8 */ unsigned short wVirtualScanCode
    /* this+0xa */ union _KEY_EVENT_RECORD::<unnamed-type-uChar> uChar

  /* this+0xc */ unsigned long dwControlKeyState
}

union _KEY_EVENT_RECORD::<unnamed-type-uChar> {
  /* this+0x0 */ wchar_t UnicodeChar
  /* this+0x0 */ char AsciiChar
}

struct _KSYSTEM_TIME {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ long High1Time
  /* this+0x8 */ long High2Time
}

struct _KTMOBJECT_CURSOR {
  /* this+0x0 */ struct _GUID LastQuery

  /* this+0x10 */ unsigned long ObjectIdCount
  /* this+0x14 */ struct _GUID[0x1] ObjectIds
}

struct _KUSER_SHARED_DATA {
  /* this+0x0 */ unsigned long TickCountLowDeprecated
  /* this+0x4 */ unsigned long TickCountMultiplier
  /* this+0x8 */ volatile struct _KSYSTEM_TIME InterruptTime

  /* this+0x14 */ volatile struct _KSYSTEM_TIME SystemTime

  /* this+0x20 */ volatile struct _KSYSTEM_TIME TimeZoneBias

  /* this+0x2c */ unsigned short ImageNumberLow
  /* this+0x2e */ unsigned short ImageNumberHigh
  /* this+0x30 */ wchar_t[0x104] NtSystemRoot
  /* this+0x238 */ unsigned long MaxStackTraceDepth
  /* this+0x23c */ unsigned long CryptoExponent
  /* this+0x240 */ unsigned long TimeZoneId
  /* this+0x244 */ unsigned long LargePageMinimum
  /* this+0x248 */ unsigned long[0x7] Reserved2
  /* this+0x264 */ enum _NT_PRODUCT_TYPE NtProductType
  /* this+0x268 */ unsigned char ProductTypeIsValid
  /* this+0x26c */ unsigned long NtMajorVersion
  /* this+0x270 */ unsigned long NtMinorVersion
  /* this+0x274 */ unsigned char[0x40] ProcessorFeatures
  /* this+0x2b4 */ unsigned long Reserved1
  /* this+0x2b8 */ unsigned long Reserved3
  /* this+0x2bc */ volatile unsigned long TimeSlip
  /* this+0x2c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture
  /* this+0x2c8 */ union _LARGE_INTEGER SystemExpirationDate

  /* this+0x2d0 */ unsigned long SuiteMask
  /* this+0x2d4 */ unsigned char KdDebuggerEnabled
  /* this+0x2d8 */ volatile unsigned long ActiveConsoleId
  /* this+0x2dc */ volatile unsigned long DismountCount
  /* this+0x2e0 */ unsigned long ComPlusPackage
  /* this+0x2e4 */ unsigned long LastSystemRITEventTickCount
  /* this+0x2e8 */ unsigned long NumberOfPhysicalPages
  /* this+0x2ec */ unsigned char SafeBootMode
  /* this+0x2f0 */ unsigned long TraceLogging
  /* this+0x2f8 */ unsigned __int64 Fill0
  /* this+0x300 */ unsigned __int64[0x4] SystemCall
  /* this+0x320 */ volatile struct _KSYSTEM_TIME TickCount

  /* this+0x320 */ volatile unsigned __int64 TickCountQuad
}

union _LARGE_INTEGER {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ long HighPart
  /* this+0x0 */ struct <unnamed-tag> u

  /* this+0x0 */ __int64 QuadPart
}

struct _LARGE_INTEGER::<unnamed-type-u> {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ long HighPart
}

struct _LDBL12 {
  /* this+0x0 */ unsigned char[0xc] ld12
}

struct _LDOUBLE {
  /* this+0x0 */ unsigned char[0xa] ld
}

struct _LDT_ENTRY {
  /* this+0x0 */ unsigned short LimitLow
  /* this+0x2 */ unsigned short BaseLow
    /* this+0x4 */ union _LDT_ENTRY::<unnamed-type-HighWord> HighWord

}

union _LDT_ENTRY::<unnamed-type-HighWord> {
    /* this+0x0 */ struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> Bytes

    /* this+0x0 */ struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> Bits

}

struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> {
  /* this(bf)+0x0:0x0 len(0x8) */ unsigned long BaseMid
  /* this(bf)+0x0:0x8 len(0x5) */ unsigned long Type
  /* this(bf)+0x0:0xd len(0x2) */ unsigned long Dpl
  /* this(bf)+0x0:0xf len(0x1) */ unsigned long Pres
  /* this(bf)+0x0:0x10 len(0x4) */ unsigned long LimitHi
  /* this(bf)+0x0:0x14 len(0x1) */ unsigned long Sys
  /* this(bf)+0x0:0x15 len(0x1) */ unsigned long Reserved_0
  /* this(bf)+0x0:0x16 len(0x1) */ unsigned long Default_Big
  /* this(bf)+0x0:0x17 len(0x1) */ unsigned long Granularity
  /* this(bf)+0x0:0x18 len(0x8) */ unsigned long BaseHi
}

struct _LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> {
  /* this+0x0 */ unsigned char BaseMid
  /* this+0x1 */ unsigned char Flags1
  /* this+0x2 */ unsigned char Flags2
  /* this+0x3 */ unsigned char BaseHi
}

struct _LIST_ENTRY {
  /* this+0x0 */ struct _LIST_ENTRY * Flink
  /* this+0x4 */ struct _LIST_ENTRY * Blink
}

struct _LOAD_DLL_DEBUG_INFO {
  /* this+0x0 */ void * hFile
  /* this+0x4 */ void * lpBaseOfDll
  /* this+0x8 */ unsigned long dwDebugInfoFileOffset
  /* this+0xc */ unsigned long nDebugInfoSize
  /* this+0x10 */ void * lpImageName
  /* this+0x14 */ unsigned short fUnicode
}

struct _LONGDOUBLE {
  /* this+0x0 */ double x
}

struct _LUID {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ long HighPart
}

struct _LUID_AND_ATTRIBUTES {
  /* this+0x0 */ struct _LUID Luid

  /* this+0x8 */ unsigned long Attributes
}

class _LocaleUpdate {
  /* this+0x0 */ struct localeinfo_struct localeinfo

  /* this+0x8 */ struct _tiddata * ptd
  /* this+0xc */ bool updated
  public void _LocaleUpdate::_LocaleUpdate(struct localeinfo_struct *)
  public void ~_LocaleUpdate()
  public struct localeinfo_struct * GetLocaleT()
  public void * __vecDelDtor(unsigned int)
}

struct _M128A {
  /* this+0x0 */ unsigned __int64 Low
  /* this+0x8 */ __int64 High
}

struct _MAT2 {
  /* this+0x0 */ struct _FIXED eM11

  /* this+0x4 */ struct _FIXED eM12

  /* this+0x8 */ struct _FIXED eM21

  /* this+0xc */ struct _FIXED eM22

}

struct _MEMORYSTATUS {
  /* this+0x0 */ unsigned long dwLength
  /* this+0x4 */ unsigned long dwMemoryLoad
  /* this+0x8 */ unsigned long dwTotalPhys
  /* this+0xc */ unsigned long dwAvailPhys
  /* this+0x10 */ unsigned long dwTotalPageFile
  /* this+0x14 */ unsigned long dwAvailPageFile
  /* this+0x18 */ unsigned long dwTotalVirtual
  /* this+0x1c */ unsigned long dwAvailVirtual
}

struct _MEMORYSTATUSEX {
  /* this+0x0 */ unsigned long dwLength
  /* this+0x4 */ unsigned long dwMemoryLoad
  /* this+0x8 */ unsigned __int64 ullTotalPhys
  /* this+0x10 */ unsigned __int64 ullAvailPhys
  /* this+0x18 */ unsigned __int64 ullTotalPageFile
  /* this+0x20 */ unsigned __int64 ullAvailPageFile
  /* this+0x28 */ unsigned __int64 ullTotalVirtual
  /* this+0x30 */ unsigned __int64 ullAvailVirtual
  /* this+0x38 */ unsigned __int64 ullAvailExtendedVirtual
}

struct _MEMORY_BASIC_INFORMATION {
  /* this+0x0 */ void * BaseAddress
  /* this+0x4 */ void * AllocationBase
  /* this+0x8 */ unsigned long AllocationProtect
  /* this+0xc */ unsigned long RegionSize
  /* this+0x10 */ unsigned long State
  /* this+0x14 */ unsigned long Protect
  /* this+0x18 */ unsigned long Type
}

struct _MEMORY_BASIC_INFORMATION32 {
  /* this+0x0 */ unsigned long BaseAddress
  /* this+0x4 */ unsigned long AllocationBase
  /* this+0x8 */ unsigned long AllocationProtect
  /* this+0xc */ unsigned long RegionSize
  /* this+0x10 */ unsigned long State
  /* this+0x14 */ unsigned long Protect
  /* this+0x18 */ unsigned long Type
}

struct _MEMORY_BASIC_INFORMATION64 {
  /* this+0x0 */ unsigned __int64 BaseAddress
  /* this+0x8 */ unsigned __int64 AllocationBase
  /* this+0x10 */ unsigned long AllocationProtect
  /* this+0x14 */ unsigned long __alignment1
  /* this+0x18 */ unsigned __int64 RegionSize
  /* this+0x20 */ unsigned long State
  /* this+0x24 */ unsigned long Protect
  /* this+0x28 */ unsigned long Type
  /* this+0x2c */ unsigned long __alignment2
}

struct _MENU_EVENT_RECORD {
  /* this+0x0 */ unsigned int dwCommandId
}

struct _MESSAGE_RESOURCE_BLOCK {
  /* this+0x0 */ unsigned long LowId
  /* this+0x4 */ unsigned long HighId
  /* this+0x8 */ unsigned long OffsetToEntries
}

struct _MESSAGE_RESOURCE_DATA {
  /* this+0x0 */ unsigned long NumberOfBlocks
  /* this+0x4 */ struct _MESSAGE_RESOURCE_BLOCK[0x1] Blocks
}

struct _MESSAGE_RESOURCE_ENTRY {
  /* this+0x0 */ unsigned short Length
  /* this+0x2 */ unsigned short Flags
  /* this+0x4 */ unsigned char[0x1] Text
}

struct _MINIDUMP_CALLBACK_INFORMATION {
  /* this+0x0 */ function  * CallbackRoutine
  /* this+0x4 */ void * CallbackParam
}

struct _MINIDUMP_CALLBACK_INPUT {
  /* this+0x0 */ unsigned long ProcessId
  /* this+0x4 */ void * ProcessHandle
  /* this+0x8 */ unsigned long CallbackType
  /* this+0xc */ HRESULT Status
  /* this+0xc */ struct _MINIDUMP_THREAD_CALLBACK Thread

  /* this+0xc */ struct _MINIDUMP_THREAD_EX_CALLBACK ThreadEx

  /* this+0xc */ struct _MINIDUMP_MODULE_CALLBACK Module

  /* this+0xc */ struct _MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread

  /* this+0xc */ struct _MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule

  /* this+0xc */ struct _MINIDUMP_IO_CALLBACK Io

  /* this+0xc */ struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure

  /* this+0xc */ unsigned long SecondaryFlags
}

struct _MINIDUMP_CALLBACK_OUTPUT {
  /* this+0x0 */ unsigned long ModuleWriteFlags
  /* this+0x0 */ unsigned long ThreadWriteFlags
  /* this+0x0 */ unsigned long SecondaryFlags
  /* this+0x0 */ unsigned __int64 MemoryBase
  /* this+0x8 */ unsigned long MemorySize
  /* this+0x0 */ int CheckCancel
  /* this+0x4 */ int Cancel
  /* this+0x0 */ void * Handle
  /* this+0x0 */ struct _MINIDUMP_MEMORY_INFO VmRegion

  /* this+0x30 */ int Continue
  /* this+0x0 */ HRESULT Status
}

struct _MINIDUMP_EXCEPTION_INFORMATION {
  /* this+0x0 */ unsigned long ThreadId
  /* this+0x4 */ struct _EXCEPTION_POINTERS * ExceptionPointers
  /* this+0x8 */ int ClientPointers
}

struct _MINIDUMP_INCLUDE_MODULE_CALLBACK {
  /* this+0x0 */ unsigned __int64 BaseOfImage
}

struct _MINIDUMP_INCLUDE_THREAD_CALLBACK {
  /* this+0x0 */ unsigned long ThreadId
}

struct _MINIDUMP_IO_CALLBACK {
  /* this+0x0 */ void * Handle
  /* this+0x4 */ unsigned __int64 Offset
  /* this+0xc */ void * Buffer
  /* this+0x10 */ unsigned long BufferBytes
}

struct _MINIDUMP_MEMORY_INFO {
  /* this+0x0 */ unsigned __int64 BaseAddress
  /* this+0x8 */ unsigned __int64 AllocationBase
  /* this+0x10 */ unsigned int AllocationProtect
  /* this+0x14 */ unsigned int __alignment1
  /* this+0x18 */ unsigned __int64 RegionSize
  /* this+0x20 */ unsigned int State
  /* this+0x24 */ unsigned int Protect
  /* this+0x28 */ unsigned int Type
  /* this+0x2c */ unsigned int __alignment2
}

struct _MINIDUMP_MODULE_CALLBACK {
  /* this+0x0 */ wchar_t * FullPath
  /* this+0x4 */ unsigned __int64 BaseOfImage
  /* this+0xc */ unsigned long SizeOfImage
  /* this+0x10 */ unsigned long CheckSum
  /* this+0x14 */ unsigned long TimeDateStamp
  /* this+0x18 */ struct tagVS_FIXEDFILEINFO VersionInfo

  /* this+0x4c */ void * CvRecord
  /* this+0x50 */ unsigned long SizeOfCvRecord
  /* this+0x54 */ void * MiscRecord
  /* this+0x58 */ unsigned long SizeOfMiscRecord
}

struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK {
  /* this+0x0 */ unsigned __int64 Offset
  /* this+0x8 */ unsigned long Bytes
  /* this+0xc */ HRESULT FailureStatus
}

struct _MINIDUMP_THREAD_CALLBACK {
  /* this+0x0 */ unsigned long ThreadId
  /* this+0x4 */ void * ThreadHandle
  /* this+0x8 */ struct _CONTEXT Context

  /* this+0x2d4 */ unsigned long SizeOfContext
  /* this+0x2d8 */ unsigned __int64 StackBase
  /* this+0x2e0 */ unsigned __int64 StackEnd
}

struct _MINIDUMP_THREAD_EX_CALLBACK {
  /* this+0x0 */ unsigned long ThreadId
  /* this+0x4 */ void * ThreadHandle
  /* this+0x8 */ struct _CONTEXT Context

  /* this+0x2d4 */ unsigned long SizeOfContext
  /* this+0x2d8 */ unsigned __int64 StackBase
  /* this+0x2e0 */ unsigned __int64 StackEnd
  /* this+0x2e8 */ unsigned __int64 BackingStoreBase
  /* this+0x2f0 */ unsigned __int64 BackingStoreEnd
}

struct _MINIDUMP_USER_STREAM {
  /* this+0x0 */ unsigned int Type
  /* this+0x4 */ unsigned long BufferSize
  /* this+0x8 */ void * Buffer
}

struct _MINIDUMP_USER_STREAM_INFORMATION {
  /* this+0x0 */ unsigned long UserStreamCount
  /* this+0x4 */ struct _MINIDUMP_USER_STREAM * UserStreamArray
}

struct _MMCKINFO {
  /* this+0x0 */ unsigned long ckid
  /* this+0x4 */ unsigned long cksize
  /* this+0x8 */ unsigned long fccType
  /* this+0xc */ unsigned long dwDataOffset
  /* this+0x10 */ unsigned long dwFlags
}

struct _MMIOINFO {
  /* this+0x0 */ unsigned long dwFlags
  /* this+0x4 */ unsigned long fccIOProc
  /* this+0x8 */ function  * pIOProc
  /* this+0xc */ unsigned int wErrorRet
  /* this+0x10 */ struct HTASK__ * htask
  /* this+0x14 */ long cchBuffer
  /* this+0x18 */ char * pchBuffer
  /* this+0x1c */ char * pchNext
  /* this+0x20 */ char * pchEndRead
  /* this+0x24 */ char * pchEndWrite
  /* this+0x28 */ long lBufOffset
  /* this+0x2c */ long lDiskOffset
  /* this+0x30 */ unsigned long[0x3] adwInfo
  /* this+0x3c */ unsigned long dwReserved1
  /* this+0x40 */ unsigned long dwReserved2
  /* this+0x44 */ struct HMMIO__ * hmmio
}

struct _MODEMDEVCAPS {
  /* this+0x0 */ unsigned long dwActualSize
  /* this+0x4 */ unsigned long dwRequiredSize
  /* this+0x8 */ unsigned long dwDevSpecificOffset
  /* this+0xc */ unsigned long dwDevSpecificSize
  /* this+0x10 */ unsigned long dwModemProviderVersion
  /* this+0x14 */ unsigned long dwModemManufacturerOffset
  /* this+0x18 */ unsigned long dwModemManufacturerSize
  /* this+0x1c */ unsigned long dwModemModelOffset
  /* this+0x20 */ unsigned long dwModemModelSize
  /* this+0x24 */ unsigned long dwModemVersionOffset
  /* this+0x28 */ unsigned long dwModemVersionSize
  /* this+0x2c */ unsigned long dwDialOptions
  /* this+0x30 */ unsigned long dwCallSetupFailTimer
  /* this+0x34 */ unsigned long dwInactivityTimeout
  /* this+0x38 */ unsigned long dwSpeakerVolume
  /* this+0x3c */ unsigned long dwSpeakerMode
  /* this+0x40 */ unsigned long dwModemOptions
  /* this+0x44 */ unsigned long dwMaxDTERate
  /* this+0x48 */ unsigned long dwMaxDCERate
  /* this+0x4c */ unsigned char[0x1] abVariablePortion
}

struct _MODEMSETTINGS {
  /* this+0x0 */ unsigned long dwActualSize
  /* this+0x4 */ unsigned long dwRequiredSize
  /* this+0x8 */ unsigned long dwDevSpecificOffset
  /* this+0xc */ unsigned long dwDevSpecificSize
  /* this+0x10 */ unsigned long dwCallSetupFailTimer
  /* this+0x14 */ unsigned long dwInactivityTimeout
  /* this+0x18 */ unsigned long dwSpeakerVolume
  /* this+0x1c */ unsigned long dwSpeakerMode
  /* this+0x20 */ unsigned long dwPreferredModemOptions
  /* this+0x24 */ unsigned long dwNegotiatedModemOptions
  /* this+0x28 */ unsigned long dwNegotiatedDCERate
  /* this+0x2c */ unsigned char[0x1] abVariablePortion
}

struct _MOUSE_EVENT_RECORD {
  /* this+0x0 */ struct _COORD dwMousePosition

  /* this+0x4 */ unsigned long dwButtonState
  /* this+0x8 */ unsigned long dwControlKeyState
  /* this+0xc */ unsigned long dwEventFlags
}

struct _NETCONNECTINFOSTRUCT {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long dwSpeed
  /* this+0xc */ unsigned long dwDelay
  /* this+0x10 */ unsigned long dwOptDataSize
}

struct _NETINFOSTRUCT {
  /* this+0x0 */ unsigned long cbStructure
  /* this+0x4 */ unsigned long dwProviderVersion
  /* this+0x8 */ unsigned long dwStatus
  /* this+0xc */ unsigned long dwCharacteristics
  /* this+0x10 */ unsigned long dwHandle
  /* this+0x14 */ unsigned short wNetType
  /* this+0x18 */ unsigned long dwPrinters
  /* this+0x1c */ unsigned long dwDrives
}

struct _NETRESOURCEA {
  /* this+0x0 */ unsigned long dwScope
  /* this+0x4 */ unsigned long dwType
  /* this+0x8 */ unsigned long dwDisplayType
  /* this+0xc */ unsigned long dwUsage
  /* this+0x10 */ char * lpLocalName
  /* this+0x14 */ char * lpRemoteName
  /* this+0x18 */ char * lpComment
  /* this+0x1c */ char * lpProvider
}

struct _NETRESOURCEW {
  /* this+0x0 */ unsigned long dwScope
  /* this+0x4 */ unsigned long dwType
  /* this+0x8 */ unsigned long dwDisplayType
  /* this+0xc */ unsigned long dwUsage
  /* this+0x10 */ wchar_t * lpLocalName
  /* this+0x14 */ wchar_t * lpRemoteName
  /* this+0x18 */ wchar_t * lpComment
  /* this+0x1c */ wchar_t * lpProvider
}

struct _NLG_INFO {
  /* this+0x0 */ unsigned long dwSig
  /* this+0x4 */ unsigned long uoffDestination
  /* this+0x8 */ unsigned long dwCode
  /* this+0xc */ unsigned long uoffFramePointer
}

struct _NON_PAGED_DEBUG_INFO {
  /* this+0x0 */ unsigned short Signature
  /* this+0x2 */ unsigned short Flags
  /* this+0x4 */ unsigned long Size
  /* this+0x8 */ unsigned short Machine
  /* this+0xa */ unsigned short Characteristics
  /* this+0xc */ unsigned long TimeDateStamp
  /* this+0x10 */ unsigned long CheckSum
  /* this+0x14 */ unsigned long SizeOfImage
  /* this+0x18 */ unsigned __int64 ImageBase
}

struct _NT_TIB {
  /* this+0x0 */ struct _EXCEPTION_REGISTRATION_RECORD * ExceptionList
  /* this+0x4 */ void * StackBase
  /* this+0x8 */ void * StackLimit
  /* this+0xc */ void * SubSystemTib
  /* this+0x10 */ void * FiberData
  /* this+0x10 */ unsigned long Version
  /* this+0x14 */ void * ArbitraryUserPointer
  /* this+0x18 */ struct _NT_TIB * Self
}

struct _NT_TIB32 {
  /* this+0x0 */ unsigned long ExceptionList
  /* this+0x4 */ unsigned long StackBase
  /* this+0x8 */ unsigned long StackLimit
  /* this+0xc */ unsigned long SubSystemTib
  /* this+0x10 */ unsigned long FiberData
  /* this+0x10 */ unsigned long Version
  /* this+0x14 */ unsigned long ArbitraryUserPointer
  /* this+0x18 */ unsigned long Self
}

struct _NT_TIB64 {
  /* this+0x0 */ unsigned __int64 ExceptionList
  /* this+0x8 */ unsigned __int64 StackBase
  /* this+0x10 */ unsigned __int64 StackLimit
  /* this+0x18 */ unsigned __int64 SubSystemTib
  /* this+0x20 */ unsigned __int64 FiberData
  /* this+0x20 */ unsigned long Version
  /* this+0x28 */ unsigned __int64 ArbitraryUserPointer
  /* this+0x30 */ unsigned __int64 Self
}

struct _NUMA_NODE_RELATIONSHIP {
  /* this+0x0 */ unsigned long NodeNumber
  /* this+0x4 */ unsigned char[0x14] Reserved
  /* this+0x18 */ struct _GROUP_AFFINITY GroupMask

}

struct _OBJECTID {
  /* this+0x0 */ struct _GUID Lineage

  /* this+0x10 */ unsigned long Uniquifier
}

struct _OBJECT_TYPE_LIST {
  /* this+0x0 */ unsigned short Level
  /* this+0x2 */ unsigned short Sbz
  /* this+0x4 */ struct _GUID * ObjectType
}

struct _OFSTRUCT {
  /* this+0x0 */ unsigned char cBytes
  /* this+0x1 */ unsigned char fFixedDisk
  /* this+0x2 */ unsigned short nErrCode
  /* this+0x4 */ unsigned short Reserved1
  /* this+0x6 */ unsigned short Reserved2
  /* this+0x8 */ char[0x80] szPathName
}

struct _OSVERSIONINFOA {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize
  /* this+0x4 */ unsigned long dwMajorVersion
  /* this+0x8 */ unsigned long dwMinorVersion
  /* this+0xc */ unsigned long dwBuildNumber
  /* this+0x10 */ unsigned long dwPlatformId
  /* this+0x14 */ char[0x80] szCSDVersion
}

struct _OSVERSIONINFOEXA {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize
  /* this+0x4 */ unsigned long dwMajorVersion
  /* this+0x8 */ unsigned long dwMinorVersion
  /* this+0xc */ unsigned long dwBuildNumber
  /* this+0x10 */ unsigned long dwPlatformId
  /* this+0x14 */ char[0x80] szCSDVersion
  /* this+0x94 */ unsigned short wServicePackMajor
  /* this+0x96 */ unsigned short wServicePackMinor
  /* this+0x98 */ unsigned short wSuiteMask
  /* this+0x9a */ unsigned char wProductType
  /* this+0x9b */ unsigned char wReserved
}

struct _OSVERSIONINFOEXW {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize
  /* this+0x4 */ unsigned long dwMajorVersion
  /* this+0x8 */ unsigned long dwMinorVersion
  /* this+0xc */ unsigned long dwBuildNumber
  /* this+0x10 */ unsigned long dwPlatformId
  /* this+0x14 */ wchar_t[0x80] szCSDVersion
  /* this+0x114 */ unsigned short wServicePackMajor
  /* this+0x116 */ unsigned short wServicePackMinor
  /* this+0x118 */ unsigned short wSuiteMask
  /* this+0x11a */ unsigned char wProductType
  /* this+0x11b */ unsigned char wReserved
}

struct _OSVERSIONINFOW {
  /* this+0x0 */ unsigned long dwOSVersionInfoSize
  /* this+0x4 */ unsigned long dwMajorVersion
  /* this+0x8 */ unsigned long dwMinorVersion
  /* this+0xc */ unsigned long dwBuildNumber
  /* this+0x10 */ unsigned long dwPlatformId
  /* this+0x14 */ wchar_t[0x80] szCSDVersion
}

struct _OUTLINETEXTMETRICA {
  /* this+0x0 */ unsigned int otmSize
  /* this+0x4 */ struct tagTEXTMETRICA otmTextMetrics

  /* this+0x3c */ unsigned char otmFiller
  /* this+0x3d */ struct tagPANOSE otmPanoseNumber

  /* this+0x48 */ unsigned int otmfsSelection
  /* this+0x4c */ unsigned int otmfsType
  /* this+0x50 */ int otmsCharSlopeRise
  /* this+0x54 */ int otmsCharSlopeRun
  /* this+0x58 */ int otmItalicAngle
  /* this+0x5c */ unsigned int otmEMSquare
  /* this+0x60 */ int otmAscent
  /* this+0x64 */ int otmDescent
  /* this+0x68 */ unsigned int otmLineGap
  /* this+0x6c */ unsigned int otmsCapEmHeight
  /* this+0x70 */ unsigned int otmsXHeight
  /* this+0x74 */ struct tagRECT otmrcFontBox

  /* this+0x84 */ int otmMacAscent
  /* this+0x88 */ int otmMacDescent
  /* this+0x8c */ unsigned int otmMacLineGap
  /* this+0x90 */ unsigned int otmusMinimumPPEM
  /* this+0x94 */ struct tagPOINT otmptSubscriptSize

  /* this+0x9c */ struct tagPOINT otmptSubscriptOffset

  /* this+0xa4 */ struct tagPOINT otmptSuperscriptSize

  /* this+0xac */ struct tagPOINT otmptSuperscriptOffset

  /* this+0xb4 */ unsigned int otmsStrikeoutSize
  /* this+0xb8 */ int otmsStrikeoutPosition
  /* this+0xbc */ int otmsUnderscoreSize
  /* this+0xc0 */ int otmsUnderscorePosition
  /* this+0xc4 */ char * otmpFamilyName
  /* this+0xc8 */ char * otmpFaceName
  /* this+0xcc */ char * otmpStyleName
  /* this+0xd0 */ char * otmpFullName
}

struct _OUTLINETEXTMETRICW {
  /* this+0x0 */ unsigned int otmSize
  /* this+0x4 */ struct tagTEXTMETRICW otmTextMetrics

  /* this+0x40 */ unsigned char otmFiller
  /* this+0x41 */ struct tagPANOSE otmPanoseNumber

  /* this+0x4c */ unsigned int otmfsSelection
  /* this+0x50 */ unsigned int otmfsType
  /* this+0x54 */ int otmsCharSlopeRise
  /* this+0x58 */ int otmsCharSlopeRun
  /* this+0x5c */ int otmItalicAngle
  /* this+0x60 */ unsigned int otmEMSquare
  /* this+0x64 */ int otmAscent
  /* this+0x68 */ int otmDescent
  /* this+0x6c */ unsigned int otmLineGap
  /* this+0x70 */ unsigned int otmsCapEmHeight
  /* this+0x74 */ unsigned int otmsXHeight
  /* this+0x78 */ struct tagRECT otmrcFontBox

  /* this+0x88 */ int otmMacAscent
  /* this+0x8c */ int otmMacDescent
  /* this+0x90 */ unsigned int otmMacLineGap
  /* this+0x94 */ unsigned int otmusMinimumPPEM
  /* this+0x98 */ struct tagPOINT otmptSubscriptSize

  /* this+0xa0 */ struct tagPOINT otmptSubscriptOffset

  /* this+0xa8 */ struct tagPOINT otmptSuperscriptSize

  /* this+0xb0 */ struct tagPOINT otmptSuperscriptOffset

  /* this+0xb8 */ unsigned int otmsStrikeoutSize
  /* this+0xbc */ int otmsStrikeoutPosition
  /* this+0xc0 */ int otmsUnderscoreSize
  /* this+0xc4 */ int otmsUnderscorePosition
  /* this+0xc8 */ char * otmpFamilyName
  /* this+0xcc */ char * otmpFaceName
  /* this+0xd0 */ char * otmpStyleName
  /* this+0xd4 */ char * otmpFullName
}

struct _OUTPUT_DEBUG_STRING_INFO {
  /* this+0x0 */ char * lpDebugStringData
  /* this+0x4 */ unsigned short fUnicode
  /* this+0x6 */ unsigned short nDebugStringLength
}

struct _OVERLAPPED {
  /* this+0x0 */ unsigned long Internal
  /* this+0x4 */ unsigned long InternalHigh
  /* this+0x8 */ unsigned long Offset
  /* this+0xc */ unsigned long OffsetHigh
  /* this+0x8 */ void * Pointer
  /* this+0x10 */ void * hEvent
}

struct _OVERLAPPED_ENTRY {
  /* this+0x0 */ unsigned long lpCompletionKey
  /* this+0x4 */ struct _OVERLAPPED * lpOverlapped
  /* this+0x8 */ unsigned long Internal
  /* this+0xc */ unsigned long dwNumberOfBytesTransferred
}

struct _PACKEDEVENTINFO {
  /* this+0x0 */ unsigned long ulSize
  /* this+0x4 */ unsigned long ulNumEventsForLogFile
  /* this+0x8 */ unsigned long[0x0] ulOffsets
}

struct _PEB {
  /* this+0x0 */ unsigned char InheritedAddressSpace
  /* this+0x1 */ unsigned char ReadImageFileExecOptions
  /* this+0x2 */ unsigned char BeingDebugged
  /* this+0x3 */ unsigned char SpareBool
  /* this+0x4 */ void * Mutant
  /* this+0x8 */ void * ImageBaseAddress
  /* this+0xc */ struct _PEB_LDR_DATA * Ldr
  /* this+0x10 */ struct _RTL_USER_PROCESS_PARAMETERS * ProcessParameters
  /* this+0x14 */ void * SubSystemData
  /* this+0x18 */ void * ProcessHeap
  /* this+0x1c */ struct _RTL_CRITICAL_SECTION * FastPebLock
  /* this+0x20 */ void * SparePtr1
  /* this+0x24 */ void * SparePtr2
  /* this+0x28 */ unsigned long EnvironmentUpdateCount
  /* this+0x2c */ void * KernelCallbackTable
  /* this+0x30 */ unsigned long[0x1] SystemReserved
  /* this(bf)+0x34:0x0 len(0x2) */ unsigned long ExecuteOptions
  /* this(bf)+0x34:0x2 len(0x1e) */ unsigned long SpareBits
  /* this+0x38 */ struct _PEB_FREE_BLOCK * FreeList
  /* this+0x3c */ unsigned long TlsExpansionCounter
  /* this+0x40 */ void * TlsBitmap
  /* this+0x44 */ unsigned long[0x2] TlsBitmapBits
  /* this+0x4c */ void * ReadOnlySharedMemoryBase
  /* this+0x50 */ void * ReadOnlySharedMemoryHeap
  /* this+0x54 */ void * * ReadOnlyStaticServerData
  /* this+0x58 */ void * AnsiCodePageData
  /* this+0x5c */ void * OemCodePageData
  /* this+0x60 */ void * UnicodeCaseTableData
  /* this+0x64 */ unsigned long NumberOfProcessors
  /* this+0x68 */ unsigned long NtGlobalFlag
  /* this+0x70 */ union _LARGE_INTEGER CriticalSectionTimeout

  /* this+0x78 */ unsigned long HeapSegmentReserve
  /* this+0x7c */ unsigned long HeapSegmentCommit
  /* this+0x80 */ unsigned long HeapDeCommitTotalFreeThreshold
  /* this+0x84 */ unsigned long HeapDeCommitFreeBlockThreshold
  /* this+0x88 */ unsigned long NumberOfHeaps
  /* this+0x8c */ unsigned long MaximumNumberOfHeaps
  /* this+0x90 */ void * * ProcessHeaps
  /* this+0x94 */ void * GdiSharedHandleTable
  /* this+0x98 */ void * ProcessStarterHelper
  /* this+0x9c */ unsigned long GdiDCAttributeList
  /* this+0xa0 */ struct _RTL_CRITICAL_SECTION * LoaderLock
  /* this+0xa4 */ unsigned long OSMajorVersion
  /* this+0xa8 */ unsigned long OSMinorVersion
  /* this+0xac */ unsigned short OSBuildNumber
  /* this+0xae */ unsigned short OSCSDVersion
  /* this+0xb0 */ unsigned long OSPlatformId
  /* this+0xb4 */ unsigned long ImageSubsystem
  /* this+0xb8 */ unsigned long ImageSubsystemMajorVersion
  /* this+0xbc */ unsigned long ImageSubsystemMinorVersion
  /* this+0xc0 */ unsigned long ImageProcessAffinityMask
  /* this+0xc4 */ unsigned long[0x22] GdiHandleBuffer
  /* this+0x14c */ function  * PostProcessInitRoutine
  /* this+0x150 */ void * TlsExpansionBitmap
  /* this+0x154 */ unsigned long[0x20] TlsExpansionBitmapBits
  /* this+0x1d4 */ unsigned long SessionId
  /* this+0x1d8 */ union _ULARGE_INTEGER AppCompatFlags

  /* this+0x1e0 */ union _ULARGE_INTEGER AppCompatFlagsUser

  /* this+0x1e8 */ void * pShimData
  /* this+0x1ec */ void * AppCompatInfo
  /* this+0x1f0 */ struct _UNICODE_STRING CSDVersion

  /* this+0x1f8 */ const struct _ACTIVATION_CONTEXT_DATA * ActivationContextData
  /* this+0x1fc */ struct _ASSEMBLY_STORAGE_MAP * ProcessAssemblyStorageMap
  /* this+0x200 */ const struct _ACTIVATION_CONTEXT_DATA * SystemDefaultActivationContextData
  /* this+0x204 */ struct _ASSEMBLY_STORAGE_MAP * SystemAssemblyStorageMap
  /* this+0x208 */ unsigned long MinimumStackCommit
  /* this+0x20c */ void * * FlsCallback
  /* this+0x210 */ struct _LIST_ENTRY FlsListHead

  /* this+0x218 */ void * FlsBitmap
  /* this+0x21c */ unsigned long[0x4] FlsBitmapBits
  /* this+0x22c */ unsigned long FlsHighIndex
}

struct _PEB_FREE_BLOCK {
  /* this+0x0 */ struct _PEB_FREE_BLOCK * Next
  /* this+0x4 */ unsigned long Size
}

struct _PEB_LDR_DATA {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ unsigned char Initialized
  /* this+0x8 */ void * SsHandle
  /* this+0xc */ struct _LIST_ENTRY InLoadOrderModuleList

  /* this+0x14 */ struct _LIST_ENTRY InMemoryOrderModuleList

  /* this+0x1c */ struct _LIST_ENTRY InInitializationOrderModuleList

  /* this+0x24 */ void * EntryInProgress
}

struct _PERFORMANCE_DATA {
  /* this+0x0 */ unsigned short Size
  /* this+0x2 */ unsigned char Version
  /* this+0x3 */ unsigned char HwCountersCount
  /* this+0x4 */ unsigned long ContextSwitchCount
  /* this+0x8 */ unsigned __int64 WaitReasonBitMap
  /* this+0x10 */ unsigned __int64 CycleTime
  /* this+0x18 */ unsigned long RetryCount
  /* this+0x1c */ unsigned long Reserved
  /* this+0x20 */ struct _HARDWARE_COUNTER_DATA[0x10] HwCounters
}

struct _PMD {
  /* this+0x0 */ int mdisp
  /* this+0x4 */ int pdisp
  /* this+0x8 */ int vdisp
}

struct _POINTFLOAT {
  /* this+0x0 */ float x
  /* this+0x4 */ float y
}

struct _POINTL {
  /* this+0x0 */ long x
  /* this+0x4 */ long y
}

struct _PRIVILEGE_SET {
  /* this+0x0 */ unsigned long PrivilegeCount
  /* this+0x4 */ unsigned long Control
  /* this+0x8 */ struct _LUID_AND_ATTRIBUTES[0x1] Privilege
}

struct _PROCESSOR_GROUP_INFO {
  /* this+0x0 */ unsigned char MaximumProcessorCount
  /* this+0x1 */ unsigned char ActiveProcessorCount
  /* this+0x2 */ unsigned char[0x26] Reserved
  /* this+0x28 */ unsigned long ActiveProcessorMask
}

struct _PROCESSOR_NUMBER {
  /* this+0x0 */ unsigned short Group
  /* this+0x2 */ unsigned char Number
  /* this+0x3 */ unsigned char Reserved
}

struct _PROCESSOR_POWER_POLICY {
  /* this+0x0 */ unsigned long Revision
  /* this+0x4 */ unsigned char DynamicThrottle
  /* this+0x5 */ unsigned char[0x3] Spare
  /* this(bf)+0x8:0x0 len(0x1) */ unsigned long DisableCStates
  /* this(bf)+0x8:0x1 len(0x1f) */ unsigned long Reserved
  /* this+0xc */ unsigned long PolicyCount
  /* this+0x10 */ struct _PROCESSOR_POWER_POLICY_INFO[0x3] Policy
}

struct _PROCESSOR_POWER_POLICY_INFO {
  /* this+0x0 */ unsigned long TimeCheck
  /* this+0x4 */ unsigned long DemoteLimit
  /* this+0x8 */ unsigned long PromoteLimit
  /* this+0xc */ unsigned char DemotePercent
  /* this+0xd */ unsigned char PromotePercent
  /* this+0xe */ unsigned char[0x2] Spare
  /* this(bf)+0x10:0x0 len(0x1) */ unsigned long AllowDemotion
  /* this(bf)+0x10:0x1 len(0x1) */ unsigned long AllowPromotion
  /* this(bf)+0x10:0x2 len(0x1e) */ unsigned long Reserved
}

struct _PROCESSOR_RELATIONSHIP {
  /* this+0x0 */ unsigned char Flags
  /* this+0x1 */ unsigned char[0x15] Reserved
  /* this+0x16 */ unsigned short GroupCount
  /* this+0x18 */ struct _GROUP_AFFINITY[0x1] GroupMask
}

struct _PROCESS_HEAP_ENTRY {
  /* this+0x0 */ void * lpData
  /* this+0x4 */ unsigned long cbData
  /* this+0x8 */ unsigned char cbOverhead
  /* this+0x9 */ unsigned char iRegionIndex
  /* this+0xa */ unsigned short wFlags
  /* this+0xc */ struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Block> Block

  /* this+0xc */ struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Region> Region

}

struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Block> {
  /* this+0x0 */ void * hMem
  /* this+0x4 */ unsigned long[0x3] dwReserved
}

struct _PROCESS_HEAP_ENTRY::<unnamed-tag>::<unnamed-type-Region> {
  /* this+0x0 */ unsigned long dwCommittedSize
  /* this+0x4 */ unsigned long dwUnCommittedSize
  /* this+0x8 */ void * lpFirstBlock
  /* this+0xc */ void * lpLastBlock
}

struct _PROCESS_INFORMATION {
  /* this+0x0 */ void * hProcess
  /* this+0x4 */ void * hThread
  /* this+0x8 */ unsigned long dwProcessId
  /* this+0xc */ unsigned long dwThreadId
}

struct _PROC_THREAD_ATTRIBUTE_LIST {
}

struct _PSFEATURE_CUSTPAPER {
  /* this+0x0 */ long lOrientation
  /* this+0x4 */ long lWidth
  /* this+0x8 */ long lHeight
  /* this+0xc */ long lWidthOffset
  /* this+0x10 */ long lHeightOffset
}

struct _PSFEATURE_OUTPUT {
  /* this+0x0 */ int bPageIndependent
  /* this+0x4 */ int bSetPageDevice
}

struct _PSINJECTDATA {
  /* this+0x0 */ unsigned long DataBytes
  /* this+0x4 */ unsigned short InjectionPoint
  /* this+0x6 */ unsigned short PageNumber
}

struct _QOS_SD_MODE {
  /* this+0x0 */ struct QOS_OBJECT_HDR ObjectHdr

  /* this+0x8 */ unsigned long ShapeDiscardMode
}

struct _QOS_SHAPING_RATE {
  /* this+0x0 */ struct QOS_OBJECT_HDR ObjectHdr

  /* this+0x8 */ unsigned long ShapingRate
}

struct _QUERY_SERVICE_CONFIGA {
  /* this+0x0 */ unsigned long dwServiceType
  /* this+0x4 */ unsigned long dwStartType
  /* this+0x8 */ unsigned long dwErrorControl
  /* this+0xc */ char * lpBinaryPathName
  /* this+0x10 */ char * lpLoadOrderGroup
  /* this+0x14 */ unsigned long dwTagId
  /* this+0x18 */ char * lpDependencies
  /* this+0x1c */ char * lpServiceStartName
  /* this+0x20 */ char * lpDisplayName
}

struct _QUERY_SERVICE_CONFIGW {
  /* this+0x0 */ unsigned long dwServiceType
  /* this+0x4 */ unsigned long dwStartType
  /* this+0x8 */ unsigned long dwErrorControl
  /* this+0xc */ wchar_t * lpBinaryPathName
  /* this+0x10 */ wchar_t * lpLoadOrderGroup
  /* this+0x14 */ unsigned long dwTagId
  /* this+0x18 */ wchar_t * lpDependencies
  /* this+0x1c */ wchar_t * lpServiceStartName
  /* this+0x20 */ wchar_t * lpDisplayName
}

struct _QUERY_SERVICE_LOCK_STATUSA {
  /* this+0x0 */ unsigned long fIsLocked
  /* this+0x4 */ char * lpLockOwner
  /* this+0x8 */ unsigned long dwLockDuration
}

struct _QUERY_SERVICE_LOCK_STATUSW {
  /* this+0x0 */ unsigned long fIsLocked
  /* this+0x4 */ wchar_t * lpLockOwner
  /* this+0x8 */ unsigned long dwLockDuration
}

struct _QUOTA_LIMITS {
  /* this+0x0 */ unsigned long PagedPoolLimit
  /* this+0x4 */ unsigned long NonPagedPoolLimit
  /* this+0x8 */ unsigned long MinimumWorkingSetSize
  /* this+0xc */ unsigned long MaximumWorkingSetSize
  /* this+0x10 */ unsigned long PagefileLimit
  /* this+0x18 */ union _LARGE_INTEGER TimeLimit

}

struct _QUOTA_LIMITS_EX {
  /* this+0x0 */ unsigned long PagedPoolLimit
  /* this+0x4 */ unsigned long NonPagedPoolLimit
  /* this+0x8 */ unsigned long MinimumWorkingSetSize
  /* this+0xc */ unsigned long MaximumWorkingSetSize
  /* this+0x10 */ unsigned long PagefileLimit
  /* this+0x18 */ union _LARGE_INTEGER TimeLimit

  /* this+0x20 */ unsigned long WorkingSetLimit
  /* this+0x24 */ unsigned long Reserved2
  /* this+0x28 */ unsigned long Reserved3
  /* this+0x2c */ unsigned long Reserved4
  /* this+0x30 */ unsigned long Flags
  /* this+0x34 */ union _RATE_QUOTA_LIMIT CpuRateLimit

}

struct _QualityOfService {
  /* this+0x0 */ struct _flowspec SendingFlowspec

  /* this+0x20 */ struct _flowspec ReceivingFlowspec

  /* this+0x40 */ struct _WSABUF ProviderSpecific

}

struct _RASTERIZER_STATUS {
  /* this+0x0 */ short nSize
  /* this+0x2 */ short wFlags
  /* this+0x4 */ short nLanguageID
}

union _RATE_QUOTA_LIMIT {
  /* this+0x0 */ unsigned long RateData
  /* this(bf)+0x0:0x0 len(0x7) */ unsigned long RatePercent
  /* this(bf)+0x0:0x7 len(0x19) */ unsigned long Reserved0
}

struct _REASON_CONTEXT {
  /* this+0x0 */ unsigned long Version
  /* this+0x4 */ unsigned long Flags
    /* this+0x8 */ union _REASON_CONTEXT::<unnamed-type-Reason> Reason

}

union _REASON_CONTEXT::<unnamed-type-Reason> {
    /* this+0x0 */ struct _REASON_CONTEXT::<unnamed-type-Reason>::<unnamed-type-Detailed> Detailed

  /* this+0x0 */ wchar_t * SimpleReasonString
}

struct _REASON_CONTEXT::<unnamed-type-Reason>::<unnamed-type-Detailed> {
  /* this+0x0 */ struct HINSTANCE__ * LocalizedReasonModule
  /* this+0x4 */ unsigned long LocalizedReasonId
  /* this+0x8 */ unsigned long ReasonStringCount
  /* this+0xc */ wchar_t * * ReasonStrings
}

struct _RECTL {
  /* this+0x0 */ long left
  /* this+0x4 */ long top
  /* this+0x8 */ long right
  /* this+0xc */ long bottom
}

struct _REMOTE_NAME_INFOA {
  /* this+0x0 */ char * lpUniversalName
  /* this+0x4 */ char * lpConnectionName
  /* this+0x8 */ char * lpRemainingPath
}

struct _REMOTE_NAME_INFOW {
  /* this+0x0 */ wchar_t * lpUniversalName
  /* this+0x4 */ wchar_t * lpConnectionName
  /* this+0x8 */ wchar_t * lpRemainingPath
}

struct _REPARSE_GUID_DATA_BUFFER {
  /* this+0x0 */ unsigned long ReparseTag
  /* this+0x4 */ unsigned short ReparseDataLength
  /* this+0x6 */ unsigned short Reserved
  /* this+0x8 */ struct _GUID ReparseGuid

    /* this+0x18 */ struct _REPARSE_GUID_DATA_BUFFER::<unnamed-type-GenericReparseBuffer> GenericReparseBuffer

}

struct _REPARSE_GUID_DATA_BUFFER::<unnamed-type-GenericReparseBuffer> {
  /* this+0x0 */ unsigned char[0x1] DataBuffer
}

struct _RESOURCEMANAGER_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID ResourceManagerId

  /* this+0x10 */ unsigned long DescriptionLength
  /* this+0x14 */ wchar_t[0x1] Description
}

struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
  /* this+0x0 */ void * IoCompletionPortHandle
  /* this+0x4 */ unsigned long CompletionKey
}

struct _RGNDATA {
  /* this+0x0 */ struct _RGNDATAHEADER rdh

  /* this+0x20 */ char[0x1] Buffer
}

struct _RGNDATAHEADER {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long iType
  /* this+0x8 */ unsigned long nCount
  /* this+0xc */ unsigned long nRgnSize
  /* this+0x10 */ struct tagRECT rcBound

}

struct _RIP_INFO {
  /* this+0x0 */ unsigned long dwError
  /* this+0x4 */ unsigned long dwType
}

struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
}

struct _RTL_CONDITION_VARIABLE {
  /* this+0x0 */ void * Ptr
}

struct _RTL_CRITICAL_SECTION {
  /* this+0x0 */ struct _RTL_CRITICAL_SECTION_DEBUG * DebugInfo
  /* this+0x4 */ long LockCount
  /* this+0x8 */ long RecursionCount
  /* this+0xc */ void * OwningThread
  /* this+0x10 */ void * LockSemaphore
  /* this+0x14 */ unsigned long SpinCount
}

struct _RTL_CRITICAL_SECTION_DEBUG {
  /* this+0x0 */ unsigned short Type
  /* this+0x2 */ unsigned short CreatorBackTraceIndex
  /* this+0x4 */ struct _RTL_CRITICAL_SECTION * CriticalSection
  /* this+0x8 */ struct _LIST_ENTRY ProcessLocksList

  /* this+0x10 */ unsigned long EntryCount
  /* this+0x14 */ unsigned long ContentionCount
  /* this+0x18 */ unsigned long Flags
  /* this+0x1c */ unsigned short CreatorBackTraceIndexHigh
  /* this+0x1e */ unsigned short SpareWORD
}

union _RTL_RUN_ONCE {
  /* this+0x0 */ void * Ptr
}

struct _RTL_SRWLOCK {
  /* this+0x0 */ void * Ptr
}

struct _RTL_USER_PROCESS_PARAMETERS {
}

struct _SCOPETABLE_ENTRY {
  /* this+0x0 */ unsigned long enclosing_level
  /* this+0x4 */ unsigned long filter
  /* this+0x8 */ unsigned long specific_handler
}

struct _SC_ACTION {
  /* this+0x0 */ enum _SC_ACTION_TYPE Type
  /* this+0x4 */ unsigned long Delay
}

struct _SECURITY_ATTRIBUTES {
  /* this+0x0 */ unsigned long nLength
  /* this+0x4 */ void * lpSecurityDescriptor
  /* this+0x8 */ int bInheritHandle
}

struct _SECURITY_DESCRIPTOR {
  /* this+0x0 */ unsigned char Revision
  /* this+0x1 */ unsigned char Sbz1
  /* this+0x2 */ unsigned short Control
  /* this+0x4 */ void * Owner
  /* this+0x8 */ void * Group
  /* this+0xc */ struct _ACL * Sacl
  /* this+0x10 */ struct _ACL * Dacl
}

struct _SECURITY_DESCRIPTOR_RELATIVE {
  /* this+0x0 */ unsigned char Revision
  /* this+0x1 */ unsigned char Sbz1
  /* this+0x2 */ unsigned short Control
  /* this+0x4 */ unsigned long Owner
  /* this+0x8 */ unsigned long Group
  /* this+0xc */ unsigned long Sacl
  /* this+0x10 */ unsigned long Dacl
}

struct _SECURITY_QUALITY_OF_SERVICE {
  /* this+0x0 */ unsigned long Length
  /* this+0x4 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
  /* this+0x8 */ unsigned char ContextTrackingMode
  /* this+0x9 */ unsigned char EffectiveOnly
}

struct _SERVERINFO {
  /* this+0x0 */ int SID
  /* this+0x4 */ int Type
  /* this+0x8 */ unsigned long ip
  /* this+0xc */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > IPstr

  /* this+0x28 */ int Port
  /* this+0x2c */ int DestinationOneSID
  /* this+0x30 */ int DestinationTwoSID
  /* this+0x34 */ char[0x14] Name
  /* this+0x48 */ unsigned long PrivateIP
  /* this+0x4c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > PrivateIPstr

  /* this+0x68 */ int PrivatePort
  /* this+0x6c */ bool bReady
  /* this+0x6d */ bool bOverpopulation
  public void _SERVERINFO(const struct _SERVERINFO &)
  public void _SERVERINFO::_SERVERINFO()
  public void _SERVERINFO::~_SERVERINFO()
  public struct _SERVERINFO & operator=(const struct _SERVERINFO &)
  public void * __vecDelDtor(unsigned int)
}

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
  /* this+0x0 */ unsigned long dwReason
  /* this+0x4 */ char * pszComment
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

}

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
  /* this+0x0 */ unsigned long dwReason
  /* this+0x4 */ wchar_t * pszComment
  /* this+0x8 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

}

struct _SERVICE_DELAYED_AUTO_START_INFO {
  /* this+0x0 */ int fDelayedAutostart
}

struct _SERVICE_DESCRIPTIONA {
  /* this+0x0 */ char * lpDescription
}

struct _SERVICE_DESCRIPTIONW {
  /* this+0x0 */ wchar_t * lpDescription
}

struct _SERVICE_FAILURE_ACTIONSA {
  /* this+0x0 */ unsigned long dwResetPeriod
  /* this+0x4 */ char * lpRebootMsg
  /* this+0x8 */ char * lpCommand
  /* this+0xc */ unsigned long cActions
  /* this+0x10 */ struct _SC_ACTION * lpsaActions
}

struct _SERVICE_FAILURE_ACTIONSW {
  /* this+0x0 */ unsigned long dwResetPeriod
  /* this+0x4 */ wchar_t * lpRebootMsg
  /* this+0x8 */ wchar_t * lpCommand
  /* this+0xc */ unsigned long cActions
  /* this+0x10 */ struct _SC_ACTION * lpsaActions
}

struct _SERVICE_FAILURE_ACTIONS_FLAG {
  /* this+0x0 */ int fFailureActionsOnNonCrashFailures
}

struct _SERVICE_NOTIFY_1 {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ function  * pfnNotifyCallback
  /* this+0x8 */ void * pContext
  /* this+0xc */ unsigned long dwNotificationStatus
  /* this+0x10 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

}

struct _SERVICE_NOTIFY_2A {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ function  * pfnNotifyCallback
  /* this+0x8 */ void * pContext
  /* this+0xc */ unsigned long dwNotificationStatus
  /* this+0x10 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

  /* this+0x34 */ unsigned long dwNotificationTriggered
  /* this+0x38 */ char * pszServiceNames
}

struct _SERVICE_NOTIFY_2W {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ function  * pfnNotifyCallback
  /* this+0x8 */ void * pContext
  /* this+0xc */ unsigned long dwNotificationStatus
  /* this+0x10 */ struct _SERVICE_STATUS_PROCESS ServiceStatus

  /* this+0x34 */ unsigned long dwNotificationTriggered
  /* this+0x38 */ wchar_t * pszServiceNames
}

struct _SERVICE_PREFERRED_NODE_INFO {
  /* this+0x0 */ unsigned short usPreferredNode
  /* this+0x2 */ unsigned char fDelete
}

struct _SERVICE_PRESHUTDOWN_INFO {
  /* this+0x0 */ unsigned long dwPreshutdownTimeout
}

struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
  /* this+0x0 */ char * pmszRequiredPrivileges
}

struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
  /* this+0x0 */ wchar_t * pmszRequiredPrivileges
}

struct _SERVICE_SID_INFO {
  /* this+0x0 */ unsigned long dwServiceSidType
}

struct _SERVICE_STATUS {
  /* this+0x0 */ unsigned long dwServiceType
  /* this+0x4 */ unsigned long dwCurrentState
  /* this+0x8 */ unsigned long dwControlsAccepted
  /* this+0xc */ unsigned long dwWin32ExitCode
  /* this+0x10 */ unsigned long dwServiceSpecificExitCode
  /* this+0x14 */ unsigned long dwCheckPoint
  /* this+0x18 */ unsigned long dwWaitHint
}

struct _SERVICE_STATUS_PROCESS {
  /* this+0x0 */ unsigned long dwServiceType
  /* this+0x4 */ unsigned long dwCurrentState
  /* this+0x8 */ unsigned long dwControlsAccepted
  /* this+0xc */ unsigned long dwWin32ExitCode
  /* this+0x10 */ unsigned long dwServiceSpecificExitCode
  /* this+0x14 */ unsigned long dwCheckPoint
  /* this+0x18 */ unsigned long dwWaitHint
  /* this+0x1c */ unsigned long dwProcessId
  /* this+0x20 */ unsigned long dwServiceFlags
}

struct _SERVICE_TABLE_ENTRYA {
  /* this+0x0 */ char * lpServiceName
  /* this+0x4 */ function  * lpServiceProc
}

struct _SERVICE_TABLE_ENTRYW {
  /* this+0x0 */ wchar_t * lpServiceName
  /* this+0x4 */ function  * lpServiceProc
}

struct _SERVICE_TIMECHANGE_INFO {
  /* this+0x0 */ union _LARGE_INTEGER liNewTime

  /* this+0x8 */ union _LARGE_INTEGER liOldTime

}

struct _SERVICE_TRIGGER {
  /* this+0x0 */ unsigned long dwTriggerType
  /* this+0x4 */ unsigned long dwAction
  /* this+0x8 */ struct _GUID * pTriggerSubtype
  /* this+0xc */ unsigned long cDataItems
  /* this+0x10 */ struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM * pDataItems
}

struct _SERVICE_TRIGGER_INFO {
  /* this+0x0 */ unsigned long cTriggers
  /* this+0x4 */ struct _SERVICE_TRIGGER * pTriggers
  /* this+0x8 */ unsigned char * pReserved
}

struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
  /* this+0x0 */ unsigned long dwDataType
  /* this+0x4 */ unsigned long cbData
  /* this+0x8 */ unsigned char * pData
}

struct _SE_ACCESS_REPLY {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ unsigned long ResultListCount
  /* this+0x8 */ unsigned long * GrantedAccess
  /* this+0xc */ unsigned long * AccessStatus
  /* this+0x10 */ struct _ACCESS_REASONS * AccessReason
  /* this+0x14 */ struct _PRIVILEGE_SET * * Privileges
}

struct _SE_ACCESS_REQUEST {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ struct _SE_SECURITY_DESCRIPTOR * SeSecurityDescriptor
  /* this+0x8 */ unsigned long DesiredAccess
  /* this+0xc */ unsigned long PreviouslyGrantedAccess
  /* this+0x10 */ void * PrincipalSelfSid
  /* this+0x14 */ struct _GENERIC_MAPPING * GenericMapping
  /* this+0x18 */ unsigned long ObjectTypeListCount
  /* this+0x1c */ struct _OBJECT_TYPE_LIST * ObjectTypeList
}

struct _SE_IMPERSONATION_STATE {
  /* this+0x0 */ void * Token
  /* this+0x4 */ unsigned char CopyOnOpen
  /* this+0x5 */ unsigned char EffectiveOnly
  /* this+0x8 */ enum _SECURITY_IMPERSONATION_LEVEL Level
}

struct _SE_SECURITY_DESCRIPTOR {
  /* this+0x0 */ unsigned long Size
  /* this+0x4 */ unsigned long Flags
  /* this+0x8 */ void * SecurityDescriptor
}

struct _SID {
  /* this+0x0 */ unsigned char Revision
  /* this+0x1 */ unsigned char SubAuthorityCount
  /* this+0x2 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority

  /* this+0x8 */ unsigned long[0x1] SubAuthority
}

struct _SID_AND_ATTRIBUTES {
  /* this+0x0 */ void * Sid
  /* this+0x4 */ unsigned long Attributes
}

struct _SID_AND_ATTRIBUTES_HASH {
  /* this+0x0 */ unsigned long SidCount
  /* this+0x4 */ struct _SID_AND_ATTRIBUTES * SidAttr
  /* this+0x8 */ unsigned long[0x20] Hash
}

struct _SID_IDENTIFIER_AUTHORITY {
  /* this+0x0 */ unsigned char[0x6] Value
}

struct _SINGLE_LIST_ENTRY {
  /* this+0x0 */ struct _SINGLE_LIST_ENTRY * Next
}

union _SLIST_HEADER {
  /* this+0x0 */ unsigned __int64 Alignment
  /* this+0x0 */ struct _SINGLE_LIST_ENTRY Next

  /* this+0x4 */ unsigned short Depth
  /* this+0x6 */ unsigned short Sequence
}

struct _SMALL_RECT {
  /* this+0x0 */ short Left
  /* this+0x2 */ short Top
  /* this+0x4 */ short Right
  /* this+0x6 */ short Bottom
}

struct _SOCKET_ADDRESS {
  /* this+0x0 */ struct sockaddr * lpSockaddr
  /* this+0x4 */ int iSockaddrLength
}

struct _SOCKET_ADDRESS_LIST {
  /* this+0x0 */ int iAddressCount
  /* this+0x4 */ struct _SOCKET_ADDRESS[0x1] Address
}

struct _STARTUPINFOA {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ char * lpReserved
  /* this+0x8 */ char * lpDesktop
  /* this+0xc */ char * lpTitle
  /* this+0x10 */ unsigned long dwX
  /* this+0x14 */ unsigned long dwY
  /* this+0x18 */ unsigned long dwXSize
  /* this+0x1c */ unsigned long dwYSize
  /* this+0x20 */ unsigned long dwXCountChars
  /* this+0x24 */ unsigned long dwYCountChars
  /* this+0x28 */ unsigned long dwFillAttribute
  /* this+0x2c */ unsigned long dwFlags
  /* this+0x30 */ unsigned short wShowWindow
  /* this+0x32 */ unsigned short cbReserved2
  /* this+0x34 */ unsigned char * lpReserved2
  /* this+0x38 */ void * hStdInput
  /* this+0x3c */ void * hStdOutput
  /* this+0x40 */ void * hStdError
}

struct _STARTUPINFOEXA {
  /* this+0x0 */ struct _STARTUPINFOA StartupInfo

  /* this+0x44 */ struct _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList
}

struct _STARTUPINFOEXW {
  /* this+0x0 */ struct _STARTUPINFOW StartupInfo

  /* this+0x44 */ struct _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList
}

struct _STARTUPINFOW {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ unsigned short * lpReserved
  /* this+0x8 */ unsigned short * lpDesktop
  /* this+0xc */ unsigned short * lpTitle
  /* this+0x10 */ unsigned long dwX
  /* this+0x14 */ unsigned long dwY
  /* this+0x18 */ unsigned long dwXSize
  /* this+0x1c */ unsigned long dwYSize
  /* this+0x20 */ unsigned long dwXCountChars
  /* this+0x24 */ unsigned long dwYCountChars
  /* this+0x28 */ unsigned long dwFillAttribute
  /* this+0x2c */ unsigned long dwFlags
  /* this+0x30 */ unsigned short wShowWindow
  /* this+0x32 */ unsigned short cbReserved2
  /* this+0x34 */ unsigned char * lpReserved2
  /* this+0x38 */ void * hStdInput
  /* this+0x3c */ void * hStdOutput
  /* this+0x40 */ void * hStdError
}

struct _SUPPORTED_OS_INFO {
  /* this+0x0 */ unsigned short OsCount
  /* this+0x2 */ unsigned short MitigationExist
  /* this+0x4 */ unsigned short[0x4] OsList
}

struct _SYSTEMTIME {
  /* this+0x0 */ unsigned short wYear
  /* this+0x2 */ unsigned short wMonth
  /* this+0x4 */ unsigned short wDayOfWeek
  /* this+0x6 */ unsigned short wDay
  /* this+0x8 */ unsigned short wHour
  /* this+0xa */ unsigned short wMinute
  /* this+0xc */ unsigned short wSecond
  /* this+0xe */ unsigned short wMilliseconds
}

struct _SYSTEM_ALARM_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_ALARM_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _SYSTEM_ALARM_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _SYSTEM_AUDIT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_AUDIT_CALLBACK_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _SYSTEM_AUDIT_OBJECT_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long Flags
  /* this+0xc */ struct _GUID ObjectType

  /* this+0x1c */ struct _GUID InheritedObjectType

  /* this+0x2c */ unsigned long SidStart
}

struct _SYSTEM_INFO {
  /* this+0x0 */ unsigned long dwOemId
  /* this+0x0 */ unsigned short wProcessorArchitecture
  /* this+0x2 */ unsigned short wReserved
  /* this+0x4 */ unsigned long dwPageSize
  /* this+0x8 */ void * lpMinimumApplicationAddress
  /* this+0xc */ void * lpMaximumApplicationAddress
  /* this+0x10 */ unsigned long dwActiveProcessorMask
  /* this+0x14 */ unsigned long dwNumberOfProcessors
  /* this+0x18 */ unsigned long dwProcessorType
  /* this+0x1c */ unsigned long dwAllocationGranularity
  /* this+0x20 */ unsigned short wProcessorLevel
  /* this+0x22 */ unsigned short wProcessorRevision
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
  /* this+0x0 */ unsigned long ProcessorMask
  /* this+0x4 */ enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship
  /* this+0x8 */ struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-ProcessorCore> ProcessorCore

  /* this+0x8 */ struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-NumaNode> NumaNode

  /* this+0x8 */ struct _CACHE_DESCRIPTOR Cache

  /* this+0x8 */ unsigned __int64[0x2] Reserved
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-NumaNode> {
  /* this+0x0 */ unsigned long NodeNumber
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed-tag>::<unnamed-type-ProcessorCore> {
  /* this+0x0 */ unsigned char Flags
}

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
  /* this+0x0 */ enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship
  /* this+0x4 */ unsigned long Size
  /* this+0x8 */ struct _PROCESSOR_RELATIONSHIP Processor

  /* this+0x8 */ struct _NUMA_NODE_RELATIONSHIP NumaNode

  /* this+0x8 */ struct _CACHE_RELATIONSHIP Cache

  /* this+0x8 */ struct _GROUP_RELATIONSHIP Group

}

struct _SYSTEM_MANDATORY_LABEL_ACE {
  /* this+0x0 */ struct _ACE_HEADER Header

  /* this+0x4 */ unsigned long Mask
  /* this+0x8 */ unsigned long SidStart
}

struct _SYSTEM_POWER_POLICY {
  /* this+0x0 */ unsigned long Revision
  /* this+0x4 */ struct POWER_ACTION_POLICY PowerButton

  /* this+0x10 */ struct POWER_ACTION_POLICY SleepButton

  /* this+0x1c */ struct POWER_ACTION_POLICY LidClose

  /* this+0x28 */ enum _SYSTEM_POWER_STATE LidOpenWake
  /* this+0x2c */ unsigned long Reserved
  /* this+0x30 */ struct POWER_ACTION_POLICY Idle

  /* this+0x3c */ unsigned long IdleTimeout
  /* this+0x40 */ unsigned char IdleSensitivity
  /* this+0x41 */ unsigned char DynamicThrottle
  /* this+0x42 */ unsigned char[0x2] Spare2
  /* this+0x44 */ enum _SYSTEM_POWER_STATE MinSleep
  /* this+0x48 */ enum _SYSTEM_POWER_STATE MaxSleep
  /* this+0x4c */ enum _SYSTEM_POWER_STATE ReducedLatencySleep
  /* this+0x50 */ unsigned long WinLogonFlags
  /* this+0x54 */ unsigned long Spare3
  /* this+0x58 */ unsigned long DozeS4Timeout
  /* this+0x5c */ unsigned long BroadcastCapacityResolution
  /* this+0x60 */ struct SYSTEM_POWER_LEVEL[0x4] DischargePolicy
  /* this+0xc0 */ unsigned long VideoTimeout
  /* this+0xc4 */ unsigned char VideoDimDisplay
  /* this+0xc8 */ unsigned long[0x3] VideoReserved
  /* this+0xd4 */ unsigned long SpindownTimeout
  /* this+0xd8 */ unsigned char OptimizeForPower
  /* this+0xd9 */ unsigned char FanThrottleTolerance
  /* this+0xda */ unsigned char ForcedThrottle
  /* this+0xdb */ unsigned char MinThrottle
  /* this+0xdc */ struct POWER_ACTION_POLICY OverThrottled

}

struct _SYSTEM_POWER_STATUS {
  /* this+0x0 */ unsigned char ACLineStatus
  /* this+0x1 */ unsigned char BatteryFlag
  /* this+0x2 */ unsigned char BatteryLifePercent
  /* this+0x3 */ unsigned char Reserved1
  /* this+0x4 */ unsigned long BatteryLifeTime
  /* this+0x8 */ unsigned long BatteryFullLifeTime
}

struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
  /* this+0x0 */ unsigned __int64 CycleTime
}

struct _TAPE_CREATE_PARTITION {
  /* this+0x0 */ unsigned long Method
  /* this+0x4 */ unsigned long Count
  /* this+0x8 */ unsigned long Size
}

struct _TAPE_ERASE {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned char Immediate
}

struct _TAPE_GET_DRIVE_PARAMETERS {
  /* this+0x0 */ unsigned char ECC
  /* this+0x1 */ unsigned char Compression
  /* this+0x2 */ unsigned char DataPadding
  /* this+0x3 */ unsigned char ReportSetmarks
  /* this+0x4 */ unsigned long DefaultBlockSize
  /* this+0x8 */ unsigned long MaximumBlockSize
  /* this+0xc */ unsigned long MinimumBlockSize
  /* this+0x10 */ unsigned long MaximumPartitionCount
  /* this+0x14 */ unsigned long FeaturesLow
  /* this+0x18 */ unsigned long FeaturesHigh
  /* this+0x1c */ unsigned long EOTWarningZoneSize
}

struct _TAPE_GET_MEDIA_PARAMETERS {
  /* this+0x0 */ union _LARGE_INTEGER Capacity

  /* this+0x8 */ union _LARGE_INTEGER Remaining

  /* this+0x10 */ unsigned long BlockSize
  /* this+0x14 */ unsigned long PartitionCount
  /* this+0x18 */ unsigned char WriteProtected
}

struct _TAPE_GET_POSITION {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned long Partition
  /* this+0x8 */ union _LARGE_INTEGER Offset

}

struct _TAPE_PREPARE {
  /* this+0x0 */ unsigned long Operation
  /* this+0x4 */ unsigned char Immediate
}

struct _TAPE_SET_DRIVE_PARAMETERS {
  /* this+0x0 */ unsigned char ECC
  /* this+0x1 */ unsigned char Compression
  /* this+0x2 */ unsigned char DataPadding
  /* this+0x3 */ unsigned char ReportSetmarks
  /* this+0x4 */ unsigned long EOTWarningZoneSize
}

struct _TAPE_SET_MEDIA_PARAMETERS {
  /* this+0x0 */ unsigned long BlockSize
}

struct _TAPE_SET_POSITION {
  /* this+0x0 */ unsigned long Method
  /* this+0x4 */ unsigned long Partition
  /* this+0x8 */ union _LARGE_INTEGER Offset

  /* this+0x10 */ unsigned char Immediate
}

struct _TAPE_WMI_OPERATIONS {
  /* this+0x0 */ unsigned long Method
  /* this+0x4 */ unsigned long DataBufferSize
  /* this+0x8 */ void * DataBuffer
}

struct _TAPE_WRITE_MARKS {
  /* this+0x0 */ unsigned long Type
  /* this+0x4 */ unsigned long Count
  /* this+0x8 */ unsigned char Immediate
}

struct _TEB {
  /* this+0x0 */ struct _NT_TIB NtTib

  /* this+0x1c */ void * EnvironmentPointer
  /* this+0x20 */ struct _CLIENT_ID ClientId

  /* this+0x28 */ void * ActiveRpcHandle
  /* this+0x2c */ void * ThreadLocalStoragePointer
  /* this+0x30 */ struct _PEB * ProcessEnvironmentBlock
  /* this+0x34 */ unsigned long LastErrorValue
  /* this+0x38 */ unsigned long CountOfOwnedCriticalSections
  /* this+0x3c */ void * CsrClientThread
  /* this+0x40 */ void * Win32ThreadInfo
  /* this+0x44 */ unsigned long[0x1a] User32Reserved
  /* this+0xac */ unsigned long[0x5] UserReserved
  /* this+0xc0 */ void * WOW32Reserved
  /* this+0xc4 */ unsigned long CurrentLocale
  /* this+0xc8 */ unsigned long FpSoftwareStatusRegister
  /* this+0xcc */ void *[0x36] SystemReserved1
  /* this+0x1a4 */ long ExceptionCode
  /* this+0x1a8 */ struct _ACTIVATION_CONTEXT_STACK ActivationContextStack

  /* this+0x1bc */ unsigned char[0x18] SpareBytes1
  /* this+0x1d4 */ struct _GDI_TEB_BATCH GdiTebBatch

  /* this+0x6b4 */ struct _CLIENT_ID RealClientId

  /* this+0x6bc */ void * GdiCachedProcessHandle
  /* this+0x6c0 */ unsigned long GdiClientPID
  /* this+0x6c4 */ unsigned long GdiClientTID
  /* this+0x6c8 */ void * GdiThreadLocalInfo
  /* this+0x6cc */ unsigned long[0x3e] Win32ClientInfo
  /* this+0x7c4 */ void *[0xe9] glDispatchTable
  /* this+0xb68 */ unsigned long[0x1d] glReserved1
  /* this+0xbdc */ void * glReserved2
  /* this+0xbe0 */ void * glSectionInfo
  /* this+0xbe4 */ void * glSection
  /* this+0xbe8 */ void * glTable
  /* this+0xbec */ void * glCurrentRC
  /* this+0xbf0 */ void * glContext
  /* this+0xbf4 */ unsigned long LastStatusValue
  /* this+0xbf8 */ struct _UNICODE_STRING StaticUnicodeString

  /* this+0xc00 */ wchar_t[0x105] StaticUnicodeBuffer
  /* this+0xe0c */ void * DeallocationStack
  /* this+0xe10 */ void *[0x40] TlsSlots
  /* this+0xf10 */ struct _LIST_ENTRY TlsLinks

  /* this+0xf18 */ void * Vdm
  /* this+0xf1c */ void * ReservedForNtRpc
  /* this+0xf20 */ void *[0x2] DbgSsReserved
  /* this+0xf28 */ unsigned long HardErrorMode
  /* this+0xf2c */ void *[0x10] Instrumentation
  /* this+0xf6c */ void * WinSockData
  /* this+0xf70 */ unsigned long GdiBatchCount
  /* this+0xf74 */ unsigned char InDbgPrint
  /* this+0xf75 */ unsigned char FreeStackOnTermination
  /* this+0xf76 */ unsigned char HasFiberData
  /* this+0xf77 */ unsigned char IdealProcessor
  /* this+0xf78 */ unsigned long Spare3
  /* this+0xf7c */ void * ReservedForPerf
  /* this+0xf80 */ void * ReservedForOle
  /* this+0xf84 */ unsigned long WaitingOnLoaderLock
  /* this+0xf88 */ struct _Wx86ThreadState Wx86Thread

  /* this+0xf94 */ void * * TlsExpansionSlots
  /* this+0xf98 */ unsigned long ImpersonationLocale
  /* this+0xf9c */ unsigned long IsImpersonating
  /* this+0xfa0 */ void * NlsCache
  /* this+0xfa4 */ void * pShimData
  /* this+0xfa8 */ unsigned long HeapVirtualAffinity
  /* this+0xfac */ void * CurrentTransactionHandle
  /* this+0xfb0 */ struct _TEB_ACTIVE_FRAME * ActiveFrame
  /* this+0xfb4 */ void * FlsData
}

struct _TEB_ACTIVE_FRAME {
  /* this+0x0 */ unsigned long Flags
  /* this+0x4 */ struct _TEB_ACTIVE_FRAME * Previous
  /* this+0x8 */ const struct _TEB_ACTIVE_FRAME_CONTEXT * Context
}

struct _TEB_ACTIVE_FRAME_CONTEXT {
  /* this+0x0 */ unsigned long Flags
  /* this+0x4 */ const char * FrameName
}

struct _TIME_DYNAMIC_ZONE_INFORMATION {
  /* this+0x0 */ long Bias
  /* this+0x4 */ wchar_t[0x20] StandardName
  /* this+0x44 */ struct _SYSTEMTIME StandardDate

  /* this+0x54 */ long StandardBias
  /* this+0x58 */ wchar_t[0x20] DaylightName
  /* this+0x98 */ struct _SYSTEMTIME DaylightDate

  /* this+0xa8 */ long DaylightBias
  /* this+0xac */ wchar_t[0x80] TimeZoneKeyName
  /* this+0x1ac */ unsigned char DynamicDaylightTimeDisabled
}

struct _TIME_ZONE_INFORMATION {
  /* this+0x0 */ long Bias
  /* this+0x4 */ wchar_t[0x20] StandardName
  /* this+0x44 */ struct _SYSTEMTIME StandardDate

  /* this+0x54 */ long StandardBias
  /* this+0x58 */ wchar_t[0x20] DaylightName
  /* this+0x98 */ struct _SYSTEMTIME DaylightDate

  /* this+0xa8 */ long DaylightBias
}

struct _TOKEN_ACCESS_INFORMATION {
  /* this+0x0 */ struct _SID_AND_ATTRIBUTES_HASH * SidHash
  /* this+0x4 */ struct _SID_AND_ATTRIBUTES_HASH * RestrictedSidHash
  /* this+0x8 */ struct _TOKEN_PRIVILEGES * Privileges
  /* this+0xc */ struct _LUID AuthenticationId

  /* this+0x14 */ enum _TOKEN_TYPE TokenType
  /* this+0x18 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
  /* this+0x1c */ struct _TOKEN_MANDATORY_POLICY MandatoryPolicy

  /* this+0x20 */ unsigned long Flags
}

struct _TOKEN_AUDIT_POLICY {
  /* this+0x0 */ unsigned char[0x1b] PerUserPolicy
}

struct _TOKEN_CONTROL {
  /* this+0x0 */ struct _LUID TokenId

  /* this+0x8 */ struct _LUID AuthenticationId

  /* this+0x10 */ struct _LUID ModifiedId

  /* this+0x18 */ struct _TOKEN_SOURCE TokenSource

}

struct _TOKEN_DEFAULT_DACL {
  /* this+0x0 */ struct _ACL * DefaultDacl
}

struct _TOKEN_ELEVATION {
  /* this+0x0 */ unsigned long TokenIsElevated
}

struct _TOKEN_GROUPS {
  /* this+0x0 */ unsigned long GroupCount
  /* this+0x4 */ struct _SID_AND_ATTRIBUTES[0x1] Groups
}

struct _TOKEN_GROUPS_AND_PRIVILEGES {
  /* this+0x0 */ unsigned long SidCount
  /* this+0x4 */ unsigned long SidLength
  /* this+0x8 */ struct _SID_AND_ATTRIBUTES * Sids
  /* this+0xc */ unsigned long RestrictedSidCount
  /* this+0x10 */ unsigned long RestrictedSidLength
  /* this+0x14 */ struct _SID_AND_ATTRIBUTES * RestrictedSids
  /* this+0x18 */ unsigned long PrivilegeCount
  /* this+0x1c */ unsigned long PrivilegeLength
  /* this+0x20 */ struct _LUID_AND_ATTRIBUTES * Privileges
  /* this+0x24 */ struct _LUID AuthenticationId

}

struct _TOKEN_LINKED_TOKEN {
  /* this+0x0 */ void * LinkedToken
}

struct _TOKEN_MANDATORY_LABEL {
  /* this+0x0 */ struct _SID_AND_ATTRIBUTES Label

}

struct _TOKEN_MANDATORY_POLICY {
  /* this+0x0 */ unsigned long Policy
}

struct _TOKEN_ORIGIN {
  /* this+0x0 */ struct _LUID OriginatingLogonSession

}

struct _TOKEN_OWNER {
  /* this+0x0 */ void * Owner
}

struct _TOKEN_PRIMARY_GROUP {
  /* this+0x0 */ void * PrimaryGroup
}

struct _TOKEN_PRIVILEGES {
  /* this+0x0 */ unsigned long PrivilegeCount
  /* this+0x4 */ struct _LUID_AND_ATTRIBUTES[0x1] Privileges
}

struct _TOKEN_SOURCE {
  /* this+0x0 */ char[0x8] SourceName
  /* this+0x8 */ struct _LUID SourceIdentifier

}

struct _TOKEN_STATISTICS {
  /* this+0x0 */ struct _LUID TokenId

  /* this+0x8 */ struct _LUID AuthenticationId

  /* this+0x10 */ union _LARGE_INTEGER ExpirationTime

  /* this+0x18 */ enum _TOKEN_TYPE TokenType
  /* this+0x1c */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
  /* this+0x20 */ unsigned long DynamicCharged
  /* this+0x24 */ unsigned long DynamicAvailable
  /* this+0x28 */ unsigned long GroupCount
  /* this+0x2c */ unsigned long PrivilegeCount
  /* this+0x30 */ struct _LUID ModifiedId

}

struct _TOKEN_USER {
  /* this+0x0 */ struct _SID_AND_ATTRIBUTES User

}

struct _TP_CALLBACK_ENVIRON_V1 {
  /* this+0x0 */ unsigned long Version
  /* this+0x4 */ struct _TP_POOL * Pool
  /* this+0x8 */ struct _TP_CLEANUP_GROUP * CleanupGroup
  /* this+0xc */ function  * CleanupGroupCancelCallback
  /* this+0x10 */ void * RaceDll
  /* this+0x14 */ struct _ACTIVATION_CONTEXT * ActivationContext
  /* this+0x18 */ function  * FinalizationCallback
  /* this+0x1c */ union <unnamed-tag> u

}

union _TP_CALLBACK_ENVIRON_V1::<unnamed-type-u> {
  /* this+0x0 */ unsigned long Flags
    /* this+0x0 */ struct _TP_CALLBACK_ENVIRON_V1::<unnamed-type-u>::<unnamed-type-s> s

}

struct _TP_CALLBACK_ENVIRON_V1::<unnamed-type-u>::<unnamed-type-s> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned long LongFunction
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned long Persistent
  /* this(bf)+0x0:0x2 len(0x1e) */ unsigned long Private
}

struct _TP_CALLBACK_ENVIRON_V3 {
  /* this+0x0 */ unsigned long Version
  /* this+0x4 */ struct _TP_POOL * Pool
  /* this+0x8 */ struct _TP_CLEANUP_GROUP * CleanupGroup
  /* this+0xc */ function  * CleanupGroupCancelCallback
  /* this+0x10 */ void * RaceDll
  /* this+0x14 */ struct _ACTIVATION_CONTEXT * ActivationContext
  /* this+0x18 */ function  * FinalizationCallback
    /* this+0x1c */ union _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u> u

  /* this+0x20 */ enum _TP_CALLBACK_PRIORITY CallbackPriority
  /* this+0x24 */ unsigned long Size
}

union _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u> {
  /* this+0x0 */ unsigned long Flags
    /* this+0x0 */ struct _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u>::<unnamed-type-s> s

}

struct _TP_CALLBACK_ENVIRON_V3::<unnamed-type-u>::<unnamed-type-s> {
  /* this(bf)+0x0:0x0 len(0x1) */ unsigned long LongFunction
  /* this(bf)+0x0:0x1 len(0x1) */ unsigned long Persistent
  /* this(bf)+0x0:0x2 len(0x1e) */ unsigned long Private
}

struct _TP_CALLBACK_INSTANCE {
}

struct _TP_CLEANUP_GROUP {
}

struct _TP_IO {
}

struct _TP_POOL {
}

struct _TP_POOL_STACK_INFORMATION {
  /* this+0x0 */ unsigned long StackReserve
  /* this+0x4 */ unsigned long StackCommit
}

struct _TP_TIMER {
}

struct _TP_WAIT {
}

struct _TP_WORK {
}

struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID TmIdentity

  /* this+0x10 */ union _LARGE_INTEGER VirtualClock

}

struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
  /* this+0x0 */ unsigned long LogPathLength
  /* this+0x4 */ wchar_t[0x1] LogPath
}

struct _TRANSACTIONMANAGER_LOG_INFORMATION {
  /* this+0x0 */ struct _GUID LogIdentity

}

struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
  /* this+0x0 */ struct _GUID OldestTransactionGuid

}

struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
  /* this+0x0 */ unsigned __int64 LastRecoveredLsn
}

struct _TRANSACTION_BASIC_INFORMATION {
  /* this+0x0 */ struct _GUID TransactionId

  /* this+0x10 */ unsigned long State
  /* this+0x14 */ unsigned long Outcome
}

struct _TRANSACTION_BIND_INFORMATION {
  /* this+0x0 */ void * TmHandle
}

struct _TRANSACTION_ENLISTMENTS_INFORMATION {
  /* this+0x0 */ unsigned long NumberOfEnlistments
  /* this+0x4 */ struct _TRANSACTION_ENLISTMENT_PAIR[0x1] EnlistmentPair
}

struct _TRANSACTION_ENLISTMENT_PAIR {
  /* this+0x0 */ struct _GUID EnlistmentId

  /* this+0x10 */ struct _GUID ResourceManagerId

}

struct _TRANSACTION_LIST_ENTRY {
  /* this+0x0 */ struct _GUID UOW

}

struct _TRANSACTION_LIST_INFORMATION {
  /* this+0x0 */ unsigned long NumberOfTransactions
  /* this+0x4 */ struct _TRANSACTION_LIST_ENTRY[0x1] TransactionInformation
}

struct _TRANSACTION_NOTIFICATION {
  /* this+0x0 */ void * TransactionKey
  /* this+0x4 */ unsigned long TransactionNotification
  /* this+0x8 */ union _LARGE_INTEGER TmVirtualClock

  /* this+0x10 */ unsigned long ArgumentLength
}

struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
  /* this+0x0 */ unsigned long MarshalCookie
  /* this+0x4 */ struct _GUID UOW

}

struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
  /* this+0x0 */ unsigned long PropagationCookie
  /* this+0x4 */ struct _GUID UOW

  /* this+0x14 */ struct _GUID TmIdentity

  /* this+0x24 */ unsigned long BufferLength
}

struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
  /* this+0x0 */ struct _GUID EnlistmentId

  /* this+0x10 */ struct _GUID UOW

}

struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
  /* this+0x0 */ unsigned long SavepointId
}

struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
  /* this+0x0 */ struct _GUID TmIdentity

  /* this+0x10 */ unsigned long Flags
}

struct _TRANSACTION_PROPERTIES_INFORMATION {
  /* this+0x0 */ unsigned long IsolationLevel
  /* this+0x4 */ unsigned long IsolationFlags
  /* this+0x8 */ union _LARGE_INTEGER Timeout

  /* this+0x10 */ unsigned long Outcome
  /* this+0x14 */ unsigned long DescriptionLength
  /* this+0x18 */ wchar_t[0x1] Description
}

struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
  /* this+0x0 */ struct _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair

}

struct _TRIVERTEX {
  /* this+0x0 */ long x
  /* this+0x4 */ long y
  /* this+0x8 */ unsigned short Red
  /* this+0xa */ unsigned short Green
  /* this+0xc */ unsigned short Blue
  /* this+0xe */ unsigned short Alpha
}

struct _TypeDescriptor {
  /* this+0x0 */ const void * pVFTable
  /* this+0x4 */ void * spare
  /* this+0x8 */ char[0x0] name
}

struct _U32ARRAY {
  /* this+0x0 */ unsigned long[0x4] W
}

struct _U64 {
  /* this+0x0 */ unsigned long[0x2] W
}

union _ULARGE_INTEGER {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ unsigned long HighPart
    /* this+0x0 */ struct _ULARGE_INTEGER::<unnamed-type-u> u

  /* this+0x0 */ unsigned __int64 QuadPart
}

struct _ULARGE_INTEGER::<unnamed-type-u> {
  /* this+0x0 */ unsigned long LowPart
  /* this+0x4 */ unsigned long HighPart
}

struct _UMS_CREATE_THREAD_ATTRIBUTES {
  /* this+0x0 */ unsigned long UmsVersion
  /* this+0x4 */ void * UmsContext
  /* this+0x8 */ void * UmsCompletionList
}

struct _UMS_SCHEDULER_STARTUP_INFO {
  /* this+0x0 */ unsigned long UmsVersion
  /* this+0x4 */ void * CompletionList
  /* this+0x8 */ function  * SchedulerProc
  /* this+0xc */ void * SchedulerParam
}

struct _UNICODE_STRING {
  /* this+0x0 */ unsigned short Length
  /* this+0x2 */ unsigned short MaximumLength
  /* this+0x4 */ unsigned short * Buffer
}

struct _UNIVERSAL_NAME_INFOA {
  /* this+0x0 */ char * lpUniversalName
}

struct _UNIVERSAL_NAME_INFOW {
  /* this+0x0 */ wchar_t * lpUniversalName
}

struct _UNLOAD_DLL_DEBUG_INFO {
  /* this+0x0 */ void * lpBaseOfDll
}

struct _VIDEOPARAMETERS {
  /* this+0x0 */ struct _GUID Guid

  /* this+0x10 */ unsigned long dwOffset
  /* this+0x14 */ unsigned long dwCommand
  /* this+0x18 */ unsigned long dwFlags
  /* this+0x1c */ unsigned long dwMode
  /* this+0x20 */ unsigned long dwTVStandard
  /* this+0x24 */ unsigned long dwAvailableModes
  /* this+0x28 */ unsigned long dwAvailableTVStandard
  /* this+0x2c */ unsigned long dwFlickerFilter
  /* this+0x30 */ unsigned long dwOverScanX
  /* this+0x34 */ unsigned long dwOverScanY
  /* this+0x38 */ unsigned long dwMaxUnscaledX
  /* this+0x3c */ unsigned long dwMaxUnscaledY
  /* this+0x40 */ unsigned long dwPositionX
  /* this+0x44 */ unsigned long dwPositionY
  /* this+0x48 */ unsigned long dwBrightness
  /* this+0x4c */ unsigned long dwContrast
  /* this+0x50 */ unsigned long dwCPType
  /* this+0x54 */ unsigned long dwCPCommand
  /* this+0x58 */ unsigned long dwCPStandard
  /* this+0x5c */ unsigned long dwCPKey
  /* this+0x60 */ unsigned long bCP_APSTriggerBits
  /* this+0x64 */ unsigned char[0x100] bOEMCopyProtection
}

struct _WGLSWAP {
  /* this+0x0 */ struct HDC__ * hdc
  /* this+0x4 */ unsigned int uiFlags
}

struct _WIN32_FILE_ATTRIBUTE_DATA {
  /* this+0x0 */ unsigned long dwFileAttributes
  /* this+0x4 */ struct _FILETIME ftCreationTime

  /* this+0xc */ struct _FILETIME ftLastAccessTime

  /* this+0x14 */ struct _FILETIME ftLastWriteTime

  /* this+0x1c */ unsigned long nFileSizeHigh
  /* this+0x20 */ unsigned long nFileSizeLow
}

struct _WIN32_FIND_DATAA {
  /* this+0x0 */ unsigned long dwFileAttributes
  /* this+0x4 */ struct _FILETIME ftCreationTime

  /* this+0xc */ struct _FILETIME ftLastAccessTime

  /* this+0x14 */ struct _FILETIME ftLastWriteTime

  /* this+0x1c */ unsigned long nFileSizeHigh
  /* this+0x20 */ unsigned long nFileSizeLow
  /* this+0x24 */ unsigned long dwReserved0
  /* this+0x28 */ unsigned long dwReserved1
  /* this+0x2c */ char[0x104] cFileName
  /* this+0x130 */ char[0xe] cAlternateFileName
}

struct _WIN32_FIND_DATAW {
  /* this+0x0 */ unsigned long dwFileAttributes
  /* this+0x4 */ struct _FILETIME ftCreationTime

  /* this+0xc */ struct _FILETIME ftLastAccessTime

  /* this+0x14 */ struct _FILETIME ftLastWriteTime

  /* this+0x1c */ unsigned long nFileSizeHigh
  /* this+0x20 */ unsigned long nFileSizeLow
  /* this+0x24 */ unsigned long dwReserved0
  /* this+0x28 */ unsigned long dwReserved1
  /* this+0x2c */ wchar_t[0x104] cFileName
  /* this+0x234 */ wchar_t[0xe] cAlternateFileName
}

struct _WIN32_FIND_STREAM_DATA {
  /* this+0x0 */ union _LARGE_INTEGER StreamSize

  /* this+0x8 */ wchar_t[0x128] cStreamName
}

struct _WIN32_STREAM_ID {
  /* this+0x0 */ unsigned long dwStreamId
  /* this+0x4 */ unsigned long dwStreamAttributes
  /* this+0x8 */ union _LARGE_INTEGER Size

  /* this+0x10 */ unsigned long dwStreamNameSize
  /* this+0x14 */ wchar_t[0x1] cStreamName
}

struct _WINDOW_BUFFER_SIZE_RECORD {
  /* this+0x0 */ struct _COORD dwSize

}

struct _WOW64_CONTEXT {
  /* this+0x0 */ unsigned long ContextFlags
  /* this+0x4 */ unsigned long Dr0
  /* this+0x8 */ unsigned long Dr1
  /* this+0xc */ unsigned long Dr2
  /* this+0x10 */ unsigned long Dr3
  /* this+0x14 */ unsigned long Dr6
  /* this+0x18 */ unsigned long Dr7
  /* this+0x1c */ struct _WOW64_FLOATING_SAVE_AREA FloatSave

  /* this+0x8c */ unsigned long SegGs
  /* this+0x90 */ unsigned long SegFs
  /* this+0x94 */ unsigned long SegEs
  /* this+0x98 */ unsigned long SegDs
  /* this+0x9c */ unsigned long Edi
  /* this+0xa0 */ unsigned long Esi
  /* this+0xa4 */ unsigned long Ebx
  /* this+0xa8 */ unsigned long Edx
  /* this+0xac */ unsigned long Ecx
  /* this+0xb0 */ unsigned long Eax
  /* this+0xb4 */ unsigned long Ebp
  /* this+0xb8 */ unsigned long Eip
  /* this+0xbc */ unsigned long SegCs
  /* this+0xc0 */ unsigned long EFlags
  /* this+0xc4 */ unsigned long Esp
  /* this+0xc8 */ unsigned long SegSs
  /* this+0xcc */ unsigned char[0x200] ExtendedRegisters
}

struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
  /* this+0x0 */ unsigned long Selector
  /* this+0x4 */ struct _WOW64_LDT_ENTRY Descriptor

}

struct _WOW64_FLOATING_SAVE_AREA {
  /* this+0x0 */ unsigned long ControlWord
  /* this+0x4 */ unsigned long StatusWord
  /* this+0x8 */ unsigned long TagWord
  /* this+0xc */ unsigned long ErrorOffset
  /* this+0x10 */ unsigned long ErrorSelector
  /* this+0x14 */ unsigned long DataOffset
  /* this+0x18 */ unsigned long DataSelector
  /* this+0x1c */ unsigned char[0x50] RegisterArea
  /* this+0x6c */ unsigned long Cr0NpxState
}

struct _WOW64_LDT_ENTRY {
  /* this+0x0 */ unsigned short LimitLow
  /* this+0x2 */ unsigned short BaseLow
    /* this+0x4 */ union _WOW64_LDT_ENTRY::<unnamed-type-HighWord> HighWord

}

union _WOW64_LDT_ENTRY::<unnamed-type-HighWord> {
    /* this+0x0 */ struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> Bytes

    /* this+0x0 */ struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> Bits

}

struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bits> {
  /* this(bf)+0x0:0x0 len(0x8) */ unsigned long BaseMid
  /* this(bf)+0x0:0x8 len(0x5) */ unsigned long Type
  /* this(bf)+0x0:0xd len(0x2) */ unsigned long Dpl
  /* this(bf)+0x0:0xf len(0x1) */ unsigned long Pres
  /* this(bf)+0x0:0x10 len(0x4) */ unsigned long LimitHi
  /* this(bf)+0x0:0x14 len(0x1) */ unsigned long Sys
  /* this(bf)+0x0:0x15 len(0x1) */ unsigned long Reserved_0
  /* this(bf)+0x0:0x16 len(0x1) */ unsigned long Default_Big
  /* this(bf)+0x0:0x17 len(0x1) */ unsigned long Granularity
  /* this(bf)+0x0:0x18 len(0x8) */ unsigned long BaseHi
}

struct _WOW64_LDT_ENTRY::<unnamed-type-HighWord>::<unnamed-type-Bytes> {
  /* this+0x0 */ unsigned char BaseMid
  /* this+0x1 */ unsigned char Flags1
  /* this+0x2 */ unsigned char Flags2
  /* this+0x3 */ unsigned char BaseHi
}

struct _WSABUF {
  /* this+0x0 */ unsigned long len
  /* this+0x4 */ char * buf
}

struct _WSACOMPLETION {
  /* this+0x0 */ enum _WSACOMPLETIONTYPE Type
    /* this+0x4 */ union _WSACOMPLETION::<unnamed-type-Parameters> Parameters

}

union _WSACOMPLETION::<unnamed-type-Parameters> {
    /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-WindowMessage> WindowMessage

    /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Event> Event

    /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Apc> Apc

    /* this+0x0 */ struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Port> Port

}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Apc> {
  /* this+0x0 */ struct _OVERLAPPED * lpOverlapped
  /* this+0x4 */ function  * lpfnCompletionProc
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Event> {
  /* this+0x0 */ struct _OVERLAPPED * lpOverlapped
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-Port> {
  /* this+0x0 */ struct _OVERLAPPED * lpOverlapped
  /* this+0x4 */ void * hPort
  /* this+0x8 */ unsigned long Key
}

struct _WSACOMPLETION::<unnamed-type-Parameters>::<unnamed-type-WindowMessage> {
  /* this+0x0 */ struct HWND__ * hWnd
  /* this+0x4 */ unsigned int uMsg
  /* this+0x8 */ unsigned int context
}

struct _WSAMSG {
  /* this+0x0 */ struct sockaddr * name
  /* this+0x4 */ int namelen
  /* this+0x8 */ struct _WSABUF * lpBuffers
  /* this+0xc */ unsigned long dwBufferCount
  /* this+0x10 */ struct _WSABUF Control

  /* this+0x18 */ unsigned long dwFlags
}

struct _WSANAMESPACE_INFOA {
  /* this+0x0 */ struct _GUID NSProviderId

  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ int fActive
  /* this+0x18 */ unsigned long dwVersion
  /* this+0x1c */ char * lpszIdentifier
}

struct _WSANAMESPACE_INFOEXA {
  /* this+0x0 */ struct _GUID NSProviderId

  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ int fActive
  /* this+0x18 */ unsigned long dwVersion
  /* this+0x1c */ char * lpszIdentifier
  /* this+0x20 */ struct _BLOB ProviderSpecific

}

struct _WSANAMESPACE_INFOEXW {
  /* this+0x0 */ struct _GUID NSProviderId

  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ int fActive
  /* this+0x18 */ unsigned long dwVersion
  /* this+0x1c */ wchar_t * lpszIdentifier
  /* this+0x20 */ struct _BLOB ProviderSpecific

}

struct _WSANAMESPACE_INFOW {
  /* this+0x0 */ struct _GUID NSProviderId

  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ int fActive
  /* this+0x18 */ unsigned long dwVersion
  /* this+0x1c */ wchar_t * lpszIdentifier
}

struct _WSANETWORKEVENTS {
  /* this+0x0 */ long lNetworkEvents
  /* this+0x4 */ int[0xa] iErrorCode
}

struct _WSANSClassInfoA {
  /* this+0x0 */ char * lpszName
  /* this+0x4 */ unsigned long dwNameSpace
  /* this+0x8 */ unsigned long dwValueType
  /* this+0xc */ unsigned long dwValueSize
  /* this+0x10 */ void * lpValue
}

struct _WSANSClassInfoW {
  /* this+0x0 */ wchar_t * lpszName
  /* this+0x4 */ unsigned long dwNameSpace
  /* this+0x8 */ unsigned long dwValueType
  /* this+0xc */ unsigned long dwValueSize
  /* this+0x10 */ void * lpValue
}

struct _WSAPROTOCOLCHAIN {
  /* this+0x0 */ int ChainLen
  /* this+0x4 */ unsigned long[0x7] ChainEntries
}

struct _WSAPROTOCOL_INFOA {
  /* this+0x0 */ unsigned long dwServiceFlags1
  /* this+0x4 */ unsigned long dwServiceFlags2
  /* this+0x8 */ unsigned long dwServiceFlags3
  /* this+0xc */ unsigned long dwServiceFlags4
  /* this+0x10 */ unsigned long dwProviderFlags
  /* this+0x14 */ struct _GUID ProviderId

  /* this+0x24 */ unsigned long dwCatalogEntryId
  /* this+0x28 */ struct _WSAPROTOCOLCHAIN ProtocolChain

  /* this+0x48 */ int iVersion
  /* this+0x4c */ int iAddressFamily
  /* this+0x50 */ int iMaxSockAddr
  /* this+0x54 */ int iMinSockAddr
  /* this+0x58 */ int iSocketType
  /* this+0x5c */ int iProtocol
  /* this+0x60 */ int iProtocolMaxOffset
  /* this+0x64 */ int iNetworkByteOrder
  /* this+0x68 */ int iSecurityScheme
  /* this+0x6c */ unsigned long dwMessageSize
  /* this+0x70 */ unsigned long dwProviderReserved
  /* this+0x74 */ char[0x100] szProtocol
}

struct _WSAPROTOCOL_INFOW {
  /* this+0x0 */ unsigned long dwServiceFlags1
  /* this+0x4 */ unsigned long dwServiceFlags2
  /* this+0x8 */ unsigned long dwServiceFlags3
  /* this+0xc */ unsigned long dwServiceFlags4
  /* this+0x10 */ unsigned long dwProviderFlags
  /* this+0x14 */ struct _GUID ProviderId

  /* this+0x24 */ unsigned long dwCatalogEntryId
  /* this+0x28 */ struct _WSAPROTOCOLCHAIN ProtocolChain

  /* this+0x48 */ int iVersion
  /* this+0x4c */ int iAddressFamily
  /* this+0x50 */ int iMaxSockAddr
  /* this+0x54 */ int iMinSockAddr
  /* this+0x58 */ int iSocketType
  /* this+0x5c */ int iProtocol
  /* this+0x60 */ int iProtocolMaxOffset
  /* this+0x64 */ int iNetworkByteOrder
  /* this+0x68 */ int iSecurityScheme
  /* this+0x6c */ unsigned long dwMessageSize
  /* this+0x70 */ unsigned long dwProviderReserved
  /* this+0x74 */ wchar_t[0x100] szProtocol
}

struct _WSAQuerySet2A {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ char * lpszServiceInstanceName
  /* this+0x8 */ struct _WSAVersion * lpVersion
  /* this+0xc */ char * lpszComment
  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ struct _GUID * lpNSProviderId
  /* this+0x18 */ char * lpszContext
  /* this+0x1c */ unsigned long dwNumberOfProtocols
  /* this+0x20 */ struct _AFPROTOCOLS * lpafpProtocols
  /* this+0x24 */ char * lpszQueryString
  /* this+0x28 */ unsigned long dwNumberOfCsAddrs
  /* this+0x2c */ struct _CSADDR_INFO * lpcsaBuffer
  /* this+0x30 */ unsigned long dwOutputFlags
  /* this+0x34 */ struct _BLOB * lpBlob
}

struct _WSAQuerySet2W {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ wchar_t * lpszServiceInstanceName
  /* this+0x8 */ struct _WSAVersion * lpVersion
  /* this+0xc */ wchar_t * lpszComment
  /* this+0x10 */ unsigned long dwNameSpace
  /* this+0x14 */ struct _GUID * lpNSProviderId
  /* this+0x18 */ wchar_t * lpszContext
  /* this+0x1c */ unsigned long dwNumberOfProtocols
  /* this+0x20 */ struct _AFPROTOCOLS * lpafpProtocols
  /* this+0x24 */ wchar_t * lpszQueryString
  /* this+0x28 */ unsigned long dwNumberOfCsAddrs
  /* this+0x2c */ struct _CSADDR_INFO * lpcsaBuffer
  /* this+0x30 */ unsigned long dwOutputFlags
  /* this+0x34 */ struct _BLOB * lpBlob
}

struct _WSAQuerySetA {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ char * lpszServiceInstanceName
  /* this+0x8 */ struct _GUID * lpServiceClassId
  /* this+0xc */ struct _WSAVersion * lpVersion
  /* this+0x10 */ char * lpszComment
  /* this+0x14 */ unsigned long dwNameSpace
  /* this+0x18 */ struct _GUID * lpNSProviderId
  /* this+0x1c */ char * lpszContext
  /* this+0x20 */ unsigned long dwNumberOfProtocols
  /* this+0x24 */ struct _AFPROTOCOLS * lpafpProtocols
  /* this+0x28 */ char * lpszQueryString
  /* this+0x2c */ unsigned long dwNumberOfCsAddrs
  /* this+0x30 */ struct _CSADDR_INFO * lpcsaBuffer
  /* this+0x34 */ unsigned long dwOutputFlags
  /* this+0x38 */ struct _BLOB * lpBlob
}

struct _WSAQuerySetW {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ wchar_t * lpszServiceInstanceName
  /* this+0x8 */ struct _GUID * lpServiceClassId
  /* this+0xc */ struct _WSAVersion * lpVersion
  /* this+0x10 */ wchar_t * lpszComment
  /* this+0x14 */ unsigned long dwNameSpace
  /* this+0x18 */ struct _GUID * lpNSProviderId
  /* this+0x1c */ wchar_t * lpszContext
  /* this+0x20 */ unsigned long dwNumberOfProtocols
  /* this+0x24 */ struct _AFPROTOCOLS * lpafpProtocols
  /* this+0x28 */ wchar_t * lpszQueryString
  /* this+0x2c */ unsigned long dwNumberOfCsAddrs
  /* this+0x30 */ struct _CSADDR_INFO * lpcsaBuffer
  /* this+0x34 */ unsigned long dwOutputFlags
  /* this+0x38 */ struct _BLOB * lpBlob
}

struct _WSAServiceClassInfoA {
  /* this+0x0 */ struct _GUID * lpServiceClassId
  /* this+0x4 */ char * lpszServiceClassName
  /* this+0x8 */ unsigned long dwCount
  /* this+0xc */ struct _WSANSClassInfoA * lpClassInfos
}

struct _WSAServiceClassInfoW {
  /* this+0x0 */ struct _GUID * lpServiceClassId
  /* this+0x4 */ wchar_t * lpszServiceClassName
  /* this+0x8 */ unsigned long dwCount
  /* this+0xc */ struct _WSANSClassInfoW * lpClassInfos
}

struct _WSAVersion {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ enum _WSAEcomparator ecHow
}

struct _Wx86ThreadState {
  /* this+0x0 */ unsigned long * CallBx86Eip
  /* this+0x4 */ void * DeallocationCpu
  /* this+0x8 */ unsigned char UseKnownWx86Dll
  /* this+0x9 */ char OleStubInvoked
}

struct _XCPT_ACTION {
  /* this+0x0 */ unsigned long XcptNum
  /* this+0x4 */ int SigNum
  /* this+0x8 */ function  * XcptAction
}

struct _XSAVE_AREA {
  /* this+0x0 */ struct _XSAVE_FORMAT LegacyState

  /* this+0x200 */ struct _XSAVE_AREA_HEADER Header

}

struct _XSAVE_AREA_HEADER {
  /* this+0x0 */ unsigned __int64 Mask
  /* this+0x8 */ unsigned __int64[0x7] Reserved
}

struct _XSAVE_FORMAT {
  /* this+0x0 */ unsigned short ControlWord
  /* this+0x2 */ unsigned short StatusWord
  /* this+0x4 */ unsigned char TagWord
  /* this+0x5 */ unsigned char Reserved1
  /* this+0x6 */ unsigned short ErrorOpcode
  /* this+0x8 */ unsigned long ErrorOffset
  /* this+0xc */ unsigned short ErrorSelector
  /* this+0xe */ unsigned short Reserved2
  /* this+0x10 */ unsigned long DataOffset
  /* this+0x14 */ unsigned short DataSelector
  /* this+0x16 */ unsigned short Reserved3
  /* this+0x18 */ unsigned long MxCsr
  /* this+0x1c */ unsigned long MxCsr_Mask
  /* this+0x20 */ struct _M128A[0x8] FloatRegisters
  /* this+0xa0 */ struct _M128A[0x8] XmmRegisters
  /* this+0x120 */ unsigned char[0xc0] Reserved4
  /* this+0x1e0 */ unsigned long[0x7] StackControl
  /* this+0x1fc */ unsigned long Cr0NpxState
}

struct _XSTATE_CONFIGURATION {
  /* this+0x0 */ unsigned __int64 EnabledFeatures
  /* this+0x8 */ unsigned long Size
  /* this(bf)+0xc:0x0 len(0x1) */ unsigned long OptimizedSave
  /* this+0x10 */ struct _XSTATE_FEATURE[0x40] Features
}

struct _XSTATE_CONTEXT {
  /* this+0x0 */ unsigned __int64 Mask
  /* this+0x8 */ unsigned long Length
  /* this+0xc */ unsigned long Reserved1
  /* this+0x10 */ struct _XSAVE_AREA * Area
  /* this+0x14 */ unsigned long Reserved2
  /* this+0x18 */ void * Buffer
  /* this+0x1c */ unsigned long Reserved3
}

struct _XSTATE_FEATURE {
  /* this+0x0 */ unsigned long Offset
  /* this+0x4 */ unsigned long Size
}

struct __JUMP_BUFFER {
  /* this+0x0 */ unsigned long Ebp
  /* this+0x4 */ unsigned long Ebx
  /* this+0x8 */ unsigned long Edi
  /* this+0xc */ unsigned long Esi
  /* this+0x10 */ unsigned long Esp
  /* this+0x14 */ unsigned long Eip
  /* this+0x18 */ unsigned long Registration
  /* this+0x1c */ unsigned long TryLevel
  /* this+0x20 */ unsigned long Cookie
  /* this+0x24 */ unsigned long UnwindFunc
  /* this+0x28 */ unsigned long[0x6] UnwindData
}

struct __lc_time_data {
  /* this+0x0 */ char *[0x7] wday_abbr
  /* this+0x1c */ char *[0x7] wday
  /* this+0x38 */ char *[0xc] month_abbr
  /* this+0x68 */ char *[0xc] month
  /* this+0x98 */ char *[0x2] ampm
  /* this+0xa0 */ char * ww_sdatefmt
  /* this+0xa4 */ char * ww_ldatefmt
  /* this+0xa8 */ char * ww_timefmt
  /* this+0xac */ unsigned long ww_lcid
  /* this+0xb0 */ int ww_caltype
  /* this+0xb4 */ int refcount
  /* this+0xb8 */ wchar_t *[0x7] _W_wday_abbr
  /* this+0xd4 */ wchar_t *[0x7] _W_wday
  /* this+0xf0 */ wchar_t *[0xc] _W_month_abbr
  /* this+0x120 */ wchar_t *[0xc] _W_month
  /* this+0x150 */ wchar_t *[0x2] _W_ampm
  /* this+0x158 */ wchar_t * _W_ww_sdatefmt
  /* this+0x15c */ wchar_t * _W_ww_ldatefmt
  /* this+0x160 */ wchar_t * _W_ww_timefmt
}

union __m128 {
  /* this+0x0 */ float[0x4] m128_f32
  /* this+0x0 */ unsigned __int64[0x2] m128_u64
  /* this+0x0 */ char[0x10] m128_i8
  /* this+0x0 */ short[0x8] m128_i16
  /* this+0x0 */ int[0x4] m128_i32
  /* this+0x0 */ __int64[0x2] m128_i64
  /* this+0x0 */ unsigned char[0x10] m128_u8
  /* this+0x0 */ unsigned short[0x8] m128_u16
  /* this+0x0 */ unsigned int[0x4] m128_u32
}

struct __m128d {
  /* this+0x0 */ double[0x2] m128d_f64
}

union __m128i {
  /* this+0x0 */ char[0x10] m128i_i8
  /* this+0x0 */ short[0x8] m128i_i16
  /* this+0x0 */ int[0x4] m128i_i32
  /* this+0x0 */ __int64[0x2] m128i_i64
  /* this+0x0 */ unsigned char[0x10] m128i_u8
  /* this+0x0 */ unsigned short[0x8] m128i_u16
  /* this+0x0 */ unsigned int[0x4] m128i_u32
  /* this+0x0 */ unsigned __int64[0x2] m128i_u64
}

union __m256 {
  /* this+0x0 */ float[0x8] m256_f32
}

struct __m256d {
  /* this+0x0 */ double[0x4] m256d_f64
}

union __m256i {
  /* this+0x0 */ char[0x20] m256i_i8
  /* this+0x0 */ short[0x10] m256i_i16
  /* this+0x0 */ int[0x8] m256i_i32
  /* this+0x0 */ __int64[0x4] m256i_i64
  /* this+0x0 */ unsigned char[0x20] m256i_u8
  /* this+0x0 */ unsigned short[0x10] m256i_u16
  /* this+0x0 */ unsigned int[0x8] m256i_u32
  /* this+0x0 */ unsigned __int64[0x4] m256i_u64
}

union __m64 {
  /* this+0x0 */ unsigned __int64 m64_u64
  /* this+0x0 */ float[0x2] m64_f32
  /* this+0x0 */ char[0x8] m64_i8
  /* this+0x0 */ short[0x4] m64_i16
  /* this+0x0 */ int[0x2] m64_i32
  /* this+0x0 */ __int64 m64_i64
  /* this+0x0 */ unsigned char[0x8] m64_u8
  /* this+0x0 */ unsigned short[0x4] m64_u16
  /* this+0x0 */ unsigned int[0x2] m64_u32
}

struct __s_GUID {
  /* this+0x0 */ unsigned long Data1
  /* this+0x4 */ unsigned short Data2
  /* this+0x6 */ unsigned short Data3
  /* this+0x8 */ unsigned char[0x8] Data4
}

struct __timeb64 {
  /* this+0x0 */ __int64 time
  /* this+0x8 */ unsigned short millitm
  /* this+0xa */ short timezone
  /* this+0xc */ short dstflag
}

struct __type_info_node {
  /* this+0x0 */ void * _MemPtr
  /* this+0x4 */ struct __type_info_node * _Next
}

struct __vc_attributes::aggregatableAttribute {
    public void aggregatableAttribute(enum __vc_attributes::aggregatableAttribute::type_e)
  public void aggregatableAttribute()
  /* this+0x0 */ enum __vc_attributes::aggregatableAttribute::type_e type
}

struct __vc_attributes::appobjectAttribute {
  public void appobjectAttribute()
}

struct __vc_attributes::async_uuidAttribute {
  public void async_uuidAttribute(const char *)
  /* this+0x0 */ const char * uuid
}

struct __vc_attributes::atl::aggregatesAttribute {
  public void aggregatesAttribute(const char *)
  public void aggregatesAttribute()
  /* this+0x0 */ const char * clsid
}

struct __vc_attributes::atl::com_interface_entryAttribute {
  public void com_interface_entryAttribute(const char *)
  public void com_interface_entryAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::atl::db_accessorAttribute {
  public void db_accessorAttribute(int, bool)
  public void db_accessorAttribute()
  /* this+0x0 */ int id
  /* this+0x4 */ bool auto_
}

struct __vc_attributes::atl::db_columnAttribute {
  public void db_columnAttribute(const char *, const char *, const char *, const char *, const char *, const char *)
  public void db_columnAttribute(const char *)
  public void db_columnAttribute()
  /* this+0x0 */ const char * ordinal
  /* this+0x4 */ const char * dbtype
  /* this+0x8 */ const char * precision
  /* this+0xc */ const char * scale
  /* this+0x10 */ const char * status
  /* this+0x14 */ const char * length
}

struct __vc_attributes::atl::db_commandAttribute {
  public void db_commandAttribute(const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)
  public void db_commandAttribute(const wchar_t *)
  public void db_commandAttribute(const char *, const char *, const char *, const char *, const char *, const char *)
  public void db_commandAttribute(const char *)
  public void db_commandAttribute()
  /* this+0x0 */ const char * command
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * source_name
  /* this+0xc */ const char * hresult
  /* this+0x10 */ const char * bindings
  /* this+0x14 */ const char * bulk_fetch
}

struct __vc_attributes::atl::db_paramAttribute {
  public void db_paramAttribute(const char *, const char *, const char *, const char *, const char *, const char *, const char *)
  public void db_paramAttribute(const char *)
  public void db_paramAttribute()
  /* this+0x0 */ const char * ordinal
  /* this+0x4 */ const char * paramtype
  /* this+0x8 */ const char * dbtype
  /* this+0xc */ const char * precision
  /* this+0x10 */ const char * scale
  /* this+0x14 */ const char * status
  /* this+0x18 */ const char * length
}

struct __vc_attributes::atl::db_sourceAttribute {
  public void db_sourceAttribute(const wchar_t *, const wchar_t *, const wchar_t *)
  public void db_sourceAttribute(const wchar_t *)
  public void db_sourceAttribute(const char *, const char *, const char *)
  public void db_sourceAttribute(const char *)
  public void db_sourceAttribute()
  /* this+0x0 */ const char * source
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * hresult
}

struct __vc_attributes::atl::db_tableAttribute {
  public void db_tableAttribute(const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *)
  public void db_tableAttribute(const wchar_t *)
  public void db_tableAttribute(const char *, const char *, const char *, const char *, const char *)
  public void db_tableAttribute(const char *)
  public void db_tableAttribute()
  /* this+0x0 */ const char * table
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * source_name
  /* this+0xc */ const char * hresult
  /* this+0x10 */ const char * bulk_fetch
}

struct __vc_attributes::atl::implements_categoryAttribute {
  public void implements_categoryAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::atl::perf_counterAttribute {
  public void perf_counterAttribute(const char *, const char *, int, int, int, int, bool, int, int, const char *)
  public void perf_counterAttribute()
  /* this+0x0 */ const char * namestring
  /* this+0x4 */ const char * helpstring
  /* this+0x8 */ int name_res
  /* this+0xc */ int help_res
  /* this+0x10 */ int countertype
  /* this+0x14 */ int defscale
  /* this+0x18 */ bool default_counter
  /* this+0x1c */ int detail
  /* this+0x20 */ int max_counter_size
  /* this+0x24 */ const char * countertype_string
}

struct __vc_attributes::atl::perf_objectAttribute {
  public void perf_objectAttribute(int, int, const char *, const char *, int, bool, const char *, int)
  public void perf_objectAttribute()
  /* this+0x0 */ int name_res
  /* this+0x4 */ int help_res
  /* this+0x8 */ const char * namestring
  /* this+0xc */ const char * helpstring
  /* this+0x10 */ int detail
  /* this+0x14 */ bool no_instances
  /* this+0x18 */ const char * class_
  /* this+0x1c */ int maxinstnamelen
}

struct __vc_attributes::atl::perfmonAttribute {
  public void perfmonAttribute(const char *, bool)
  public void perfmonAttribute(const char *)
  public void perfmonAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ bool register
}

struct __vc_attributes::atl::rdxAttribute {
  public void rdxAttribute(const char *, const char *, const char *)
  public void rdxAttribute(const char *, const char *)
  public void rdxAttribute()
  /* this+0x0 */ const char * key
  /* this+0x4 */ const char * valuename
  /* this+0x8 */ const char * regtype
}

struct __vc_attributes::atl::registration_scriptAttribute {
  public void registration_scriptAttribute(const char *)
  public void registration_scriptAttribute()
  /* this+0x0 */ const char * script
}

struct __vc_attributes::atl::request_handlerAttribute {
  public void request_handlerAttribute(const char *, const char *)
  public void request_handlerAttribute(const char *)
  public void request_handlerAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * sdl
}

struct __vc_attributes::atl::requires_categoryAttribute {
  public void requires_categoryAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::atl::soap_handlerAttribute {
  public void soap_handlerAttribute(const char *, const char *, const char *, const char *, const char *)
  public void soap_handlerAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * namespace
  /* this+0x8 */ const char * protocol
  /* this+0xc */ const char * style
  /* this+0x10 */ const char * use
}

struct __vc_attributes::atl::soap_headerAttribute {
  public void soap_headerAttribute(const char *, bool, bool, bool)
  public void soap_headerAttribute(const char *)
  public void soap_headerAttribute()
  /* this+0x0 */ const char * value
  /* this+0x4 */ bool required
  /* this+0x5 */ bool in
  /* this+0x6 */ bool out
}

struct __vc_attributes::atl::soap_methodAttribute {
  public void soap_methodAttribute(const char *)
  public void soap_methodAttribute()
  /* this+0x0 */ const char * name
}

struct __vc_attributes::atl::soap_namespaceAttribute {
  public void soap_namespaceAttribute(const char *)
  public void soap_namespaceAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::atl::support_error_infoAttribute {
  public void support_error_infoAttribute(const char *)
  /* this+0x0 */ const char * error_interface
}

struct __vc_attributes::atl::synchronizeAttribute {
  public void synchronizeAttribute()
}

struct __vc_attributes::atl::tag_nameAttribute {
  public void tag_nameAttribute(const char *, const char *)
  public void tag_nameAttribute(const char *)
  public void tag_nameAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * parse_func
}

struct __vc_attributes::bindableAttribute {
  public void bindableAttribute()
}

struct __vc_attributes::call_asAttribute {
  public void call_asAttribute(void *)
  /* this+0x0 */ void * local_proc
}

struct __vc_attributes::caseAttribute {
  public void caseAttribute(int)
  /* this+0x0 */ int value
}

struct __vc_attributes::coclassAttribute {
  public void coclassAttribute()
}

struct __vc_attributes::controlAttribute {
  public void controlAttribute()
}

struct __vc_attributes::cpp_quoteAttribute {
  public void cpp_quoteAttribute(const char *)
  /* this+0x0 */ const char * string
}

struct __vc_attributes::customAttribute {
  public void customAttribute(const char *)
  /* this+0x0 */ char * value
}

struct __vc_attributes::defaultAttribute {
  public void defaultAttribute(const char *)
  public void defaultAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::defaultbindAttribute {
  public void defaultbindAttribute()
}

struct __vc_attributes::defaultcollelemAttribute {
  public void defaultcollelemAttribute()
}

struct __vc_attributes::defaultvalueAttribute {
  public void defaultvalueAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::defaultvtableAttribute {
  public void defaultvtableAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::dispinterfaceAttribute {
  public void dispinterfaceAttribute()
}

struct __vc_attributes::displaybindAttribute {
  public void displaybindAttribute()
}

struct __vc_attributes::dualAttribute {
  public void dualAttribute()
}

struct __vc_attributes::emitidlAttribute {
  /* [0x0000:0x00000000] */ static  const int restricted
  /* [0x0000:0x00000000] */ static  const int forced
  /* [0x0000:0x00000000] */ static  const int push
  /* [0x0000:0x00000000] */ static  const int pop
  public void emitidlAttribute(int, bool)
  public void emitidlAttribute(int)
  public void emitidlAttribute()
  /* this+0x0 */ int value
  /* this+0x4 */ bool defaultimports
}

struct __vc_attributes::entryAttribute {
  public void entryAttribute(const char *)
  /* this+0x0 */ const char * entry_id
}

struct __vc_attributes::event_receiverAttribute {
    public void event_receiverAttribute(enum __vc_attributes::event_receiverAttribute::type_e, bool)
  public void event_receiverAttribute(enum __vc_attributes::event_receiverAttribute::type_e)
  public void event_receiverAttribute()
  /* this+0x0 */ enum __vc_attributes::event_receiverAttribute::type_e type
  /* this+0x4 */ bool layout_dependent
}

struct __vc_attributes::event_sourceAttribute {
      public void event_sourceAttribute(enum __vc_attributes::event_sourceAttribute::type_e)
  public void event_sourceAttribute()
  /* this+0x0 */ enum __vc_attributes::event_sourceAttribute::type_e type
  /* this+0x4 */ enum __vc_attributes::event_sourceAttribute::optimize_e optimize
  /* this+0x8 */ bool decorate
}

struct __vc_attributes::exportAttribute {
  public void exportAttribute()
}

struct __vc_attributes::first_isAttribute {
  public void first_isAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::helpcontextAttribute {
  public void helpcontextAttribute(const char *)
  /* this+0x0 */ const char * helpcontext_value
}

struct __vc_attributes::helper_attributes::as_stringAttribute {
  public void as_stringAttribute()
}

struct __vc_attributes::helper_attributes::attributeAttribute {
  /* [0x0000:0x00000000] */ static  const int All
  /* [0x0000:0x00000000] */ static  const int Assembly
  /* [0x0000:0x00000000] */ static  const int Class
  /* [0x0000:0x00000000] */ static  const int Constructor
  /* [0x0000:0x00000000] */ static  const int Delegate
  /* [0x0000:0x00000000] */ static  const int Enum
  /* [0x0000:0x00000000] */ static  const int Event
  /* [0x0000:0x00000000] */ static  const int Field
  /* [0x0000:0x00000000] */ static  const int GenericParameter
  /* [0x0000:0x00000000] */ static  const int Interface
  /* [0x0000:0x00000000] */ static  const int Method
  /* [0x0000:0x00000000] */ static  const int Module
  /* [0x0000:0x00000000] */ static  const int Parameter
  /* [0x0000:0x00000000] */ static  const int Property
  /* [0x0000:0x00000000] */ static  const int ReturnValue
  /* [0x0000:0x00000000] */ static  const int Struct
  public void attributeAttribute(int)
  public void attributeAttribute()
  /* this+0x0 */ int ValidOn
  /* this+0x4 */ bool AllowMultiple
  /* this+0x5 */ bool Inherited
}

struct __vc_attributes::helper_attributes::default_valueAttribute {
  public void default_valueAttribute(<NoType>)
  /* this+0x0 */ void * value
}

struct __vc_attributes::helper_attributes::help_stringAttribute {
  public void help_stringAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::helper_attributes::multi_valueAttribute {
  public void multi_valueAttribute()
}

struct __vc_attributes::helper_attributes::notify_atlprovAttribute {
  public void notify_atlprovAttribute()
}

struct __vc_attributes::helper_attributes::process_earlyAttribute {
  public void process_earlyAttribute()
}

struct __vc_attributes::helper_attributes::repeatableAttribute {
  public void repeatableAttribute()
}

struct __vc_attributes::helper_attributes::requires_valueAttribute {
  public void requires_valueAttribute()
}

struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute {
  /* [0x0000:0x00000000] */ static  const int All
  /* [0x0000:0x00000000] */ static  const int Assembly
  /* [0x0000:0x00000000] */ static  const int Class
  /* [0x0000:0x00000000] */ static  const int Constructor
  /* [0x0000:0x00000000] */ static  const int Delegate
  /* [0x0000:0x00000000] */ static  const int Enum
  /* [0x0000:0x00000000] */ static  const int Event
  /* [0x0000:0x00000000] */ static  const int Field
  /* [0x0000:0x00000000] */ static  const int GenericParameter
  /* [0x0000:0x00000000] */ static  const int Interface
  /* [0x0000:0x00000000] */ static  const int Method
  /* [0x0000:0x00000000] */ static  const int Module
  /* [0x0000:0x00000000] */ static  const int Parameter
  /* [0x0000:0x00000000] */ static  const int Property
  /* [0x0000:0x00000000] */ static  const int ReturnValue
  /* [0x0000:0x00000000] */ static  const int Struct
  public void source_annotation_attributeAttribute(int)
  public void source_annotation_attributeAttribute()
  /* this+0x0 */ int ValidOn
  /* this+0x4 */ bool AllowMultiple
}

struct __vc_attributes::helper_attributes::usageAttribute {
    public void usageAttribute(unsigned int)
  /* this+0x0 */ unsigned int value
}

struct __vc_attributes::helper_attributes::v1_alttypeAttribute {
    public void v1_alttypeAttribute(enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e)
  /* this+0x0 */ enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type
}

struct __vc_attributes::helper_attributes::v1_earlyAttribute {
  public void v1_earlyAttribute()
}

struct __vc_attributes::helper_attributes::v1_nameAttribute {
  public void v1_nameAttribute(const char *)
  /* this+0x0 */ const char * name
}

struct __vc_attributes::helpfileAttribute {
  public void helpfileAttribute(const char *)
  /* this+0x0 */ const char * filename
}

struct __vc_attributes::helpstringAttribute {
  public void helpstringAttribute(const char *)
  /* this+0x0 */ const char * help_text_string
}

struct __vc_attributes::helpstringcontextAttribute {
  public void helpstringcontextAttribute(int)
  /* this+0x0 */ int contextid
}

struct __vc_attributes::helpstringdllAttribute {
  public void helpstringdllAttribute(const char *)
  /* this+0x0 */ const char * dllname
}

struct __vc_attributes::hiddenAttribute {
  public void hiddenAttribute()
}

struct __vc_attributes::hookAttribute {
  public void hookAttribute(const char *, const char *, const char *, const char *)
  public void hookAttribute(const char *, const char *, const char *)
  public void hookAttribute(const char *, const char *)
  public void hookAttribute()
  /* this+0x0 */ const char * event
  /* this+0x4 */ const char * source
  /* this+0x8 */ const char * handler
  /* this+0xc */ const char * receiver
}

struct __vc_attributes::idAttribute {
  public void idAttribute(int)
  /* this+0x0 */ int id_num
}

struct __vc_attributes::idl_moduleAttribute {
  public void idl_moduleAttribute(const char *, const char *, const char *, const char *, const char *, int, int, bool, bool)
  public void idl_moduleAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * dllname
  /* this+0x8 */ const char * version
  /* this+0xc */ const char * uuid
  /* this+0x10 */ const char * helpstring
  /* this+0x14 */ int helpstringcontext
  /* this+0x18 */ int helpcontext
  /* this+0x1c */ bool hidden
  /* this+0x1d */ bool restricted
}

struct __vc_attributes::idl_quoteAttribute {
  public void idl_quoteAttribute(const char *)
  public void idl_quoteAttribute()
  /* this+0x0 */ const char * text
}

struct __vc_attributes::iid_isAttribute {
  public void iid_isAttribute(const char *)
  /* this+0x0 */ const char * limited_expression
}

struct __vc_attributes::immediatebindAttribute {
  public void immediatebindAttribute()
}

struct __vc_attributes::implementsAttribute {
  public void implementsAttribute(const char *)
  public void implementsAttribute()
  /* this+0x0 */ const char * interfaces
  /* this+0x4 */ const char * dispinterfaces
}

struct __vc_attributes::importAttribute {
  public void importAttribute(const char *)
  /* this+0x0 */ const char * idl_file
}

struct __vc_attributes::importidlAttribute {
  public void importidlAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::importlibAttribute {
  public void importlibAttribute(const char *)
  /* this+0x0 */ const char * tlb_file
}

struct __vc_attributes::inAttribute {
  public void inAttribute()
}

struct __vc_attributes::includeAttribute {
  public void includeAttribute(const char *)
  /* this+0x0 */ const char * include_file
}

struct __vc_attributes::includelibAttribute {
  public void includelibAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::last_isAttribute {
  public void last_isAttribute(const char *)
  /* this+0x0 */ const char * expression
}

struct __vc_attributes::lcidAttribute {
  public void lcidAttribute()
}

struct __vc_attributes::length_isAttribute {
  public void length_isAttribute(const char *)
  /* this+0x0 */ const char * expression
}

struct __vc_attributes::library_blockAttribute {
  public void library_blockAttribute()
}

struct __vc_attributes::licensedAttribute {
  public void licensedAttribute()
}

struct __vc_attributes::localAttribute {
  public void localAttribute()
}

struct __vc_attributes::max_isAttribute {
  public void max_isAttribute(const char *)
  /* this+0x0 */ const char * expression
}

struct __vc_attributes::moduleAttribute {
    public void moduleAttribute(enum __vc_attributes::moduleAttribute::type_e, const char *, const char *, const char *, int, bool, const char *, int, const char *, const char *, int, bool, bool, const char *, const char *)
  public void moduleAttribute(enum __vc_attributes::moduleAttribute::type_e)
  public void moduleAttribute()
  /* this+0x0 */ enum __vc_attributes::moduleAttribute::type_e type
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * version
  /* this+0xc */ const char * uuid
  /* this+0x10 */ int lcid
  /* this+0x14 */ bool control
  /* this+0x18 */ const char * helpstring
  /* this+0x1c */ int helpstringcontext
  /* this+0x20 */ const char * helpstringdll
  /* this+0x24 */ const char * helpfile
  /* this+0x28 */ int helpcontext
  /* this+0x2c */ bool hidden
  /* this+0x2d */ bool restricted
  /* this+0x30 */ const char * custom
  /* this+0x34 */ const char * resource_name
}

struct __vc_attributes::ms_unionAttribute {
  public void ms_unionAttribute()
}

struct __vc_attributes::no_injected_textAttribute {
  public void no_injected_textAttribute(bool)
  public void no_injected_textAttribute()
  /* this+0x0 */ bool value
}

struct __vc_attributes::nonbrowsableAttribute {
  public void nonbrowsableAttribute()
}

struct __vc_attributes::noncreatableAttribute {
  public void noncreatableAttribute()
}

struct __vc_attributes::nonextensibleAttribute {
  public void nonextensibleAttribute()
}

struct __vc_attributes::objectAttribute {
  public void objectAttribute()
}

struct __vc_attributes::odlAttribute {
  public void odlAttribute()
}

struct __vc_attributes::oleautomationAttribute {
  public void oleautomationAttribute()
}

struct __vc_attributes::optionalAttribute {
  public void optionalAttribute()
}

struct __vc_attributes::outAttribute {
  public void outAttribute()
}

struct __vc_attributes::pointer_defaultAttribute {
    public void pointer_defaultAttribute(enum __vc_attributes::pointer_defaultAttribute::type_e)
  /* this+0x0 */ enum __vc_attributes::pointer_defaultAttribute::type_e type
}

struct __vc_attributes::pragmaAttribute {
  public void pragmaAttribute(const char *)
  /* this+0x0 */ const char * token_sequence
}

struct __vc_attributes::progidAttribute {
  public void progidAttribute(const char *)
  /* this+0x0 */ const char * name
}

struct __vc_attributes::propgetAttribute {
  public void propgetAttribute()
}

struct __vc_attributes::propputAttribute {
  public void propputAttribute()
}

struct __vc_attributes::propputrefAttribute {
  public void propputrefAttribute()
}

struct __vc_attributes::providerAttribute {
  public void providerAttribute(const char *, const char *, int)
  public void providerAttribute()
  /* this+0x0 */ const char * name
  /* this+0x4 */ const char * uuid
  /* this+0x8 */ int cookies
}

struct __vc_attributes::ptrAttribute {
  public void ptrAttribute()
}

struct __vc_attributes::publicAttribute {
  public void publicAttribute()
}

struct __vc_attributes::rangeAttribute {
  public void rangeAttribute(int, int)
  /* this+0x0 */ int low_val
  /* this+0x4 */ int high_val
}

struct __vc_attributes::readonlyAttribute {
  public void readonlyAttribute()
}

struct __vc_attributes::refAttribute {
  public void refAttribute()
}

struct __vc_attributes::requesteditAttribute {
  public void requesteditAttribute()
}

struct __vc_attributes::restrictedAttribute {
  public void restrictedAttribute(const char *)
  public void restrictedAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::retvalAttribute {
  public void retvalAttribute()
}

struct __vc_attributes::satypeAttribute {
  public void satypeAttribute(const char *)
  public void satypeAttribute()
  /* this+0x0 */ const char * type
}

struct __vc_attributes::size_isAttribute {
  public void size_isAttribute(const char *)
  /* this+0x0 */ const char * expression
}

struct __vc_attributes::sourceAttribute {
  public void sourceAttribute(const char *)
  public void sourceAttribute()
  /* this+0x0 */ const char * value
}

struct __vc_attributes::stringAttribute {
  public void stringAttribute()
}

struct __vc_attributes::switch_isAttribute {
  public void switch_isAttribute(const char *)
  /* this+0x0 */ const char * limited_expression
}

struct __vc_attributes::switch_typeAttribute {
  public void switch_typeAttribute(const char *)
  /* this+0x0 */ const char * switch_type_specifier
}

struct __vc_attributes::threadingAttribute {
    public void threadingAttribute(enum __vc_attributes::threadingAttribute::threading_e)
  public void threadingAttribute()
  /* this+0x0 */ enum __vc_attributes::threadingAttribute::threading_e value
}

struct __vc_attributes::transmit_asAttribute {
  public void transmit_asAttribute(const char *)
  /* this+0x0 */ const char * xmit_type
}

struct __vc_attributes::uidefaultAttribute {
  public void uidefaultAttribute()
}

struct __vc_attributes::unhookAttribute {
  public void unhookAttribute(const char *, const char *, const char *, const char *)
  public void unhookAttribute(const char *, const char *, const char *)
  public void unhookAttribute(const char *, const char *)
  public void unhookAttribute()
  /* this+0x0 */ const char * event
  /* this+0x4 */ const char * source
  /* this+0x8 */ const char * handler
  /* this+0xc */ const char * receiver
}

struct __vc_attributes::uniqueAttribute {
  public void uniqueAttribute()
}

struct __vc_attributes::usesgetlasterrorAttribute {
  public void usesgetlasterrorAttribute()
}

struct __vc_attributes::uuidAttribute {
  public void uuidAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::v1_enumAttribute {
  public void v1_enumAttribute()
}

struct __vc_attributes::varargAttribute {
  public void varargAttribute()
}

struct __vc_attributes::versionAttribute {
  public void versionAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::vi_progidAttribute {
  public void vi_progidAttribute(const char *)
  /* this+0x0 */ const char * value
}

struct __vc_attributes::wire_marshalAttribute {
  public void wire_marshalAttribute(const char *)
  /* this+0x0 */ const char * wire_type
}

struct _complex {
  /* this+0x0 */ double x
  /* this+0x8 */ double y
}

struct _cpinfo {
  /* this+0x0 */ unsigned int MaxCharSize
  /* this+0x4 */ unsigned char[0x2] DefaultChar
  /* this+0x6 */ unsigned char[0xc] LeadByte
}

struct _cpinfoexA {
  /* this+0x0 */ unsigned int MaxCharSize
  /* this+0x4 */ unsigned char[0x2] DefaultChar
  /* this+0x6 */ unsigned char[0xc] LeadByte
  /* this+0x12 */ wchar_t UnicodeDefaultChar
  /* this+0x14 */ unsigned int CodePage
  /* this+0x18 */ char[0x104] CodePageName
}

struct _cpinfoexW {
  /* this+0x0 */ unsigned int MaxCharSize
  /* this+0x4 */ unsigned char[0x2] DefaultChar
  /* this+0x6 */ unsigned char[0xc] LeadByte
  /* this+0x12 */ wchar_t UnicodeDefaultChar
  /* this+0x14 */ unsigned int CodePage
  /* this+0x18 */ wchar_t[0x104] CodePageName
}

struct _currencyfmtA {
  /* this+0x0 */ unsigned int NumDigits
  /* this+0x4 */ unsigned int LeadingZero
  /* this+0x8 */ unsigned int Grouping
  /* this+0xc */ char * lpDecimalSep
  /* this+0x10 */ char * lpThousandSep
  /* this+0x14 */ unsigned int NegativeOrder
  /* this+0x18 */ unsigned int PositiveOrder
  /* this+0x1c */ char * lpCurrencySymbol
}

struct _currencyfmtW {
  /* this+0x0 */ unsigned int NumDigits
  /* this+0x4 */ unsigned int LeadingZero
  /* this+0x8 */ unsigned int Grouping
  /* this+0xc */ wchar_t * lpDecimalSep
  /* this+0x10 */ wchar_t * lpThousandSep
  /* this+0x14 */ unsigned int NegativeOrder
  /* this+0x18 */ unsigned int PositiveOrder
  /* this+0x1c */ wchar_t * lpCurrencySymbol
}

union _dbl {
  /* this+0x0 */ long[0x2] lng
  /* this+0x0 */ double dbl
}

struct _devicemodeA {
  /* this+0x0 */ unsigned char[0x20] dmDeviceName
  /* this+0x20 */ unsigned short dmSpecVersion
  /* this+0x22 */ unsigned short dmDriverVersion
  /* this+0x24 */ unsigned short dmSize
  /* this+0x26 */ unsigned short dmDriverExtra
  /* this+0x28 */ unsigned long dmFields
  /* this+0x2c */ short dmOrientation
  /* this+0x2e */ short dmPaperSize
  /* this+0x30 */ short dmPaperLength
  /* this+0x32 */ short dmPaperWidth
  /* this+0x34 */ short dmScale
  /* this+0x36 */ short dmCopies
  /* this+0x38 */ short dmDefaultSource
  /* this+0x3a */ short dmPrintQuality
  /* this+0x2c */ struct _POINTL dmPosition

  /* this+0x34 */ unsigned long dmDisplayOrientation
  /* this+0x38 */ unsigned long dmDisplayFixedOutput
  /* this+0x3c */ short dmColor
  /* this+0x3e */ short dmDuplex
  /* this+0x40 */ short dmYResolution
  /* this+0x42 */ short dmTTOption
  /* this+0x44 */ short dmCollate
  /* this+0x46 */ unsigned char[0x20] dmFormName
  /* this+0x66 */ unsigned short dmLogPixels
  /* this+0x68 */ unsigned long dmBitsPerPel
  /* this+0x6c */ unsigned long dmPelsWidth
  /* this+0x70 */ unsigned long dmPelsHeight
  /* this+0x74 */ unsigned long dmDisplayFlags
  /* this+0x74 */ unsigned long dmNup
  /* this+0x78 */ unsigned long dmDisplayFrequency
  /* this+0x7c */ unsigned long dmICMMethod
  /* this+0x80 */ unsigned long dmICMIntent
  /* this+0x84 */ unsigned long dmMediaType
  /* this+0x88 */ unsigned long dmDitherType
  /* this+0x8c */ unsigned long dmReserved1
  /* this+0x90 */ unsigned long dmReserved2
  /* this+0x94 */ unsigned long dmPanningWidth
  /* this+0x98 */ unsigned long dmPanningHeight
}

struct _devicemodeW {
  /* this+0x0 */ wchar_t[0x20] dmDeviceName
  /* this+0x40 */ unsigned short dmSpecVersion
  /* this+0x42 */ unsigned short dmDriverVersion
  /* this+0x44 */ unsigned short dmSize
  /* this+0x46 */ unsigned short dmDriverExtra
  /* this+0x48 */ unsigned long dmFields
  /* this+0x4c */ short dmOrientation
  /* this+0x4e */ short dmPaperSize
  /* this+0x50 */ short dmPaperLength
  /* this+0x52 */ short dmPaperWidth
  /* this+0x54 */ short dmScale
  /* this+0x56 */ short dmCopies
  /* this+0x58 */ short dmDefaultSource
  /* this+0x5a */ short dmPrintQuality
  /* this+0x4c */ struct _POINTL dmPosition

  /* this+0x54 */ unsigned long dmDisplayOrientation
  /* this+0x58 */ unsigned long dmDisplayFixedOutput
  /* this+0x5c */ short dmColor
  /* this+0x5e */ short dmDuplex
  /* this+0x60 */ short dmYResolution
  /* this+0x62 */ short dmTTOption
  /* this+0x64 */ short dmCollate
  /* this+0x66 */ wchar_t[0x20] dmFormName
  /* this+0xa6 */ unsigned short dmLogPixels
  /* this+0xa8 */ unsigned long dmBitsPerPel
  /* this+0xac */ unsigned long dmPelsWidth
  /* this+0xb0 */ unsigned long dmPelsHeight
  /* this+0xb4 */ unsigned long dmDisplayFlags
  /* this+0xb4 */ unsigned long dmNup
  /* this+0xb8 */ unsigned long dmDisplayFrequency
  /* this+0xbc */ unsigned long dmICMMethod
  /* this+0xc0 */ unsigned long dmICMIntent
  /* this+0xc4 */ unsigned long dmMediaType
  /* this+0xc8 */ unsigned long dmDitherType
  /* this+0xcc */ unsigned long dmReserved1
  /* this+0xd0 */ unsigned long dmReserved2
  /* this+0xd4 */ unsigned long dmPanningWidth
  /* this+0xd8 */ unsigned long dmPanningHeight
}

struct _div_t {
  /* this+0x0 */ int quot
  /* this+0x4 */ int rem
}

struct _exception {
  /* this+0x0 */ int type
  /* this+0x4 */ char * name
  /* this+0x8 */ double arg1
  /* this+0x10 */ double arg2
  /* this+0x18 */ double retval
}

struct _flowspec {
  /* this+0x0 */ unsigned long TokenRate
  /* this+0x4 */ unsigned long TokenBucketSize
  /* this+0x8 */ unsigned long PeakBandwidth
  /* this+0xc */ unsigned long Latency
  /* this+0x10 */ unsigned long DelayVariation
  /* this+0x14 */ unsigned long ServiceType
  /* this+0x18 */ unsigned long MaxSduSize
  /* this+0x1c */ unsigned long MinimumPolicedSize
}

struct _flt {
  /* this+0x0 */ int flags
  /* this+0x4 */ int nbytes
  /* this+0x8 */ long lval
  /* this+0x10 */ double dval
}

struct _heapinfo {
  /* this+0x0 */ int * _pentry
  /* this+0x4 */ unsigned int _size
  /* this+0x8 */ int _useflag
}

struct _iobuf {
  /* this+0x0 */ char * _ptr
  /* this+0x4 */ int _cnt
  /* this+0x8 */ char * _base
  /* this+0xc */ int _flag
  /* this+0x10 */ int _file
  /* this+0x14 */ int _charbuf
  /* this+0x18 */ int _bufsiz
  /* this+0x1c */ char * _tmpfname
}

struct _is_ctype_compatible {
  /* this+0x0 */ unsigned long id
  /* this+0x4 */ int is_clike
}

struct _ldiv_t {
  /* this+0x0 */ long quot
  /* this+0x4 */ long rem
}

struct _lldiv_t {
  /* this+0x0 */ __int64 quot
  /* this+0x8 */ __int64 rem
}

struct _nlsversioninfo {
  /* this+0x0 */ unsigned long dwNLSVersionInfoSize
  /* this+0x4 */ unsigned long dwNLSVersion
  /* this+0x8 */ unsigned long dwDefinedVersion
}

struct _nlsversioninfoex {
  /* this+0x0 */ unsigned long dwNLSVersionInfoSize
  /* this+0x4 */ unsigned long dwNLSVersion
  /* this+0x8 */ unsigned long dwDefinedVersion
  /* this+0xc */ unsigned long dwEffectiveId
  /* this+0x10 */ struct _GUID guidCustomVersion

}

struct _numberfmtA {
  /* this+0x0 */ unsigned int NumDigits
  /* this+0x4 */ unsigned int LeadingZero
  /* this+0x8 */ unsigned int Grouping
  /* this+0xc */ char * lpDecimalSep
  /* this+0x10 */ char * lpThousandSep
  /* this+0x14 */ unsigned int NegativeOrder
}

struct _numberfmtW {
  /* this+0x0 */ unsigned int NumDigits
  /* this+0x4 */ unsigned int LeadingZero
  /* this+0x8 */ unsigned int Grouping
  /* this+0xc */ wchar_t * lpDecimalSep
  /* this+0x10 */ wchar_t * lpThousandSep
  /* this+0x14 */ unsigned int NegativeOrder
}

union _output_l::__l2::<unnamed-type-buffer> {
  /* this+0x0 */ char[0x200] sz
}

union _output_l::__l2::<unnamed-type-text> {
  /* this+0x0 */ char * sz
  /* this+0x0 */ wchar_t * wz
}

struct _output_l::__l77::_count_string {
}

union _output_s_l::__l2::<unnamed-type-buffer> {
  /* this+0x0 */ char[0x200] sz
}

union _output_s_l::__l2::<unnamed-type-text> {
  /* this+0x0 */ char * sz
  /* this+0x0 */ wchar_t * wz
}

struct _output_s_l::__l83::_count_string {
}

struct _s_CatchableType {
  /* this+0x0 */ unsigned int properties
  /* this+0x4 */ struct TypeDescriptor * pType
  /* this+0x8 */ struct PMD thisDisplacement

  /* this+0x14 */ int sizeOrOffset
  /* this+0x18 */ function  * copyFunction
}

struct _s_CatchableTypeArray {
  /* this+0x0 */ int nCatchableTypes
  /* this+0x4 */ const struct _s_CatchableType *[0x0] arrayOfCatchableTypes
}

struct _s_ESTypeList {
  /* this+0x0 */ int nCount
  /* this+0x4 */ const struct _s_HandlerType * pTypeArray
}

struct _s_FuncInfo {
  /* this(bf)+0x0:0x0 len(0x1d) */ unsigned int magicNumber
  /* this(bf)+0x0:0x1d len(0x3) */ unsigned int bbtFlags
  /* this+0x4 */ int maxState
  /* this+0x8 */ const struct _s_UnwindMapEntry * pUnwindMap
  /* this+0xc */ unsigned int nTryBlocks
  /* this+0x10 */ const struct _s_TryBlockMapEntry * pTryBlockMap
  /* this+0x14 */ unsigned int nIPMapEntries
  /* this+0x18 */ void * pIPtoStateMap
  /* this+0x1c */ const struct _s_ESTypeList * pESTypeList
  /* this+0x20 */ int EHFlags
}

struct _s_HandlerType {
  /* this+0x0 */ unsigned int adjectives
  /* this+0x4 */ struct TypeDescriptor * pType
  /* this+0x8 */ int dispCatchObj
  /* this+0xc */ void * addressOfHandler
}

struct _s_ThrowInfo {
  /* this+0x0 */ unsigned int attributes
  /* this+0x4 */ function  * pmfnUnwind
  /* this+0x8 */ function  * pForwardCompat
  /* this+0xc */ const struct _s_CatchableTypeArray * pCatchableTypeArray
}

struct _s_TryBlockMapEntry {
  /* this+0x0 */ int tryLow
  /* this+0x4 */ int tryHigh
  /* this+0x8 */ int catchHigh
  /* this+0xc */ int nCatches
  /* this+0x10 */ const struct _s_HandlerType * pHandlerArray
}

struct _s_UnwindMapEntry {
  /* this+0x0 */ int toState
  /* this+0x4 */ function  * action
}

struct _s__CatchableType {
  /* this+0x0 */ unsigned int properties
  /* this+0x4 */ struct _TypeDescriptor * pType
  /* this+0x8 */ struct _PMD thisDisplacement

  /* this+0x14 */ int sizeOrOffset
  /* this+0x18 */ function  * copyFunction
}

struct _s__CatchableTypeArray {
  /* this+0x0 */ int nCatchableTypes
  /* this+0x4 */ const struct _s__CatchableType *[0x0] arrayOfCatchableTypes
}

struct _s__RTTIBaseClassArray {
  /* this+0x0 */ const struct _s__RTTIBaseClassDescriptor2 *[0x0] arrayOfBaseClassDescriptors
}

struct _s__RTTIBaseClassDescriptor2 {
  /* this+0x0 */ struct _TypeDescriptor * pTypeDescriptor
  /* this+0x4 */ unsigned long numContainedBases
  /* this+0x8 */ struct _PMD where

  /* this+0x14 */ unsigned long attributes
  /* this+0x18 */ const struct _s__RTTIClassHierarchyDescriptor * pClassDescriptor
}

struct _s__RTTIClassHierarchyDescriptor {
  /* this+0x0 */ unsigned long signature
  /* this+0x4 */ unsigned long attributes
  /* this+0x8 */ unsigned long numBaseClasses
  /* this+0xc */ const struct _s__RTTIBaseClassArray * pBaseClassArray
}

struct _s__RTTICompleteObjectLocator {
  /* this+0x0 */ unsigned long signature
  /* this+0x4 */ unsigned long offset
  /* this+0x8 */ unsigned long cdOffset
  /* this+0xc */ struct _TypeDescriptor * pTypeDescriptor
  /* this+0x10 */ const struct _s__RTTIClassHierarchyDescriptor * pClassDescriptor
}

struct _s__ThrowInfo {
  /* this+0x0 */ unsigned int attributes
  /* this+0x4 */ function  * pmfnUnwind
  /* this+0x8 */ function  * pForwardCompat
  /* this+0xc */ const struct _s__CatchableTypeArray * pCatchableTypeArray
}

struct _stat32 {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x14 */ long st_size
  /* this+0x18 */ long st_atime
  /* this+0x1c */ long st_mtime
  /* this+0x20 */ long st_ctime
}

struct _stat32i64 {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x18 */ __int64 st_size
  /* this+0x20 */ long st_atime
  /* this+0x24 */ long st_mtime
  /* this+0x28 */ long st_ctime
}

struct _stat64 {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x18 */ __int64 st_size
  /* this+0x20 */ __int64 st_atime
  /* this+0x28 */ __int64 st_mtime
  /* this+0x30 */ __int64 st_ctime
}

struct _stat64i32 {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x14 */ long st_size
  /* this+0x18 */ __int64 st_atime
  /* this+0x20 */ __int64 st_mtime
  /* this+0x28 */ __int64 st_ctime
}

struct _strflt {
  /* this+0x0 */ int sign
  /* this+0x4 */ int decpt
  /* this+0x8 */ int flag
  /* this+0xc */ char * mantissa
}

struct _tagADDRESS {
  /* this+0x0 */ unsigned long Offset
  /* this+0x4 */ unsigned short Segment
  /* this+0x8 */ enum ADDRESS_MODE Mode
}

struct _tagADDRESS64 {
  /* this+0x0 */ unsigned __int64 Offset
  /* this+0x8 */ unsigned short Segment
  /* this+0xc */ enum ADDRESS_MODE Mode
}

struct _tagSTACKFRAME {
  /* this+0x0 */ struct _tagADDRESS AddrPC

  /* this+0xc */ struct _tagADDRESS AddrReturn

  /* this+0x18 */ struct _tagADDRESS AddrFrame

  /* this+0x24 */ struct _tagADDRESS AddrStack

  /* this+0x30 */ void * FuncTableEntry
  /* this+0x34 */ unsigned long[0x4] Params
  /* this+0x44 */ int Far
  /* this+0x48 */ int Virtual
  /* this+0x4c */ unsigned long[0x3] Reserved
  /* this+0x58 */ struct _KDHELP KdHelp

  /* this+0x98 */ struct _tagADDRESS AddrBStore

}

struct _tiddata {
  /* this+0x0 */ unsigned long _tid
  /* this+0x4 */ unsigned int _thandle
  /* this+0x8 */ int _terrno
  /* this+0xc */ unsigned long _tdoserrno
  /* this+0x10 */ unsigned int _fpds
  /* this+0x14 */ unsigned long _holdrand
  /* this+0x18 */ char * _token
  /* this+0x1c */ wchar_t * _wtoken
  /* this+0x20 */ unsigned char * _mtoken
  /* this+0x24 */ char * _errmsg
  /* this+0x28 */ wchar_t * _werrmsg
  /* this+0x2c */ char * _namebuf0
  /* this+0x30 */ wchar_t * _wnamebuf0
  /* this+0x34 */ char * _namebuf1
  /* this+0x38 */ wchar_t * _wnamebuf1
  /* this+0x3c */ char * _asctimebuf
  /* this+0x40 */ wchar_t * _wasctimebuf
  /* this+0x44 */ void * _gmtimebuf
  /* this+0x48 */ char * _cvtbuf
  /* this+0x4c */ unsigned char[0x5] _con_ch_buf
  /* this+0x52 */ unsigned short _ch_buf_used
  /* this+0x54 */ void * _initaddr
  /* this+0x58 */ void * _initarg
  /* this+0x5c */ void * _pxcptacttab
  /* this+0x60 */ void * _tpxcptinfoptrs
  /* this+0x64 */ int _tfpecode
  /* this+0x68 */ struct threadmbcinfostruct * ptmbcinfo
  /* this+0x6c */ struct threadlocaleinfostruct * ptlocinfo
  /* this+0x70 */ int _ownlocale
  /* this+0x74 */ unsigned long _NLG_dwCode
  /* this+0x78 */ void * _terminate
  /* this+0x7c */ void * _unexpected
  /* this+0x80 */ void * _translator
  /* this+0x84 */ void * _purecall
  /* this+0x88 */ void * _curexception
  /* this+0x8c */ void * _curcontext
  /* this+0x90 */ int _ProcessingThrow
  /* this+0x94 */ void * _curexcspec
  /* this+0x98 */ void * _pFrameInfoChain
  /* this+0x9c */ struct setloc_struct _setloc_data

  /* this+0x1f8 */ void * _reserved1
  /* this+0x1fc */ void * _reserved2
  /* this+0x200 */ void * _reserved3
  /* this+0x204 */ void * _reserved4
  /* this+0x208 */ void * _reserved5
  /* this+0x20c */ int _cxxReThrow
  /* this+0x210 */ unsigned long __initDomain
}

struct _wfinddata32_t {
  /* this+0x0 */ unsigned int attrib
  /* this+0x4 */ long time_create
  /* this+0x8 */ long time_access
  /* this+0xc */ long time_write
  /* this+0x10 */ unsigned long size
  /* this+0x14 */ wchar_t[0x104] name
}

struct _wfinddata32i64_t {
  /* this+0x0 */ unsigned int attrib
  /* this+0x4 */ long time_create
  /* this+0x8 */ long time_access
  /* this+0xc */ long time_write
  /* this+0x10 */ __int64 size
  /* this+0x18 */ wchar_t[0x104] name
}

struct _wfinddata64_t {
  /* this+0x0 */ unsigned int attrib
  /* this+0x8 */ __int64 time_create
  /* this+0x10 */ __int64 time_access
  /* this+0x18 */ __int64 time_write
  /* this+0x20 */ __int64 size
  /* this+0x28 */ wchar_t[0x104] name
}

struct _wfinddata64i32_t {
  /* this+0x0 */ unsigned int attrib
  /* this+0x8 */ __int64 time_create
  /* this+0x10 */ __int64 time_access
  /* this+0x18 */ __int64 time_write
  /* this+0x20 */ unsigned long size
  /* this+0x24 */ wchar_t[0x104] name
}

class `anonymous-namespace'::CAutoLuaClose {
  public void CAutoLuaClose(struct lua_State *)
  public void ~CAutoLuaClose()
  /* this+0x0 */ struct lua_State * m_L
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CBoxIDGernator {
  public void CBoxIDGernator()
  public void ~CBoxIDGernator()
  public unsigned int operator()()
  /* this+0x0 */ unsigned int m_BoxID
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::CMyFile {
  public void CMyFile(void *)
  public void ~CMyFile()
  public void * operator void *()
  public int Write(const char *, <NoType>)
  /* this+0x0 */ void * m_hFile
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::N3ObjectIDGenerator {
    *
  public unsigned int operator()()
  public void N3ObjectIDGenerator(const class `anonymous-namespace'::N3ObjectIDGenerator &)
  public void N3ObjectIDGenerator()
  public void ~N3ObjectIDGenerator()
  /* this+0x4 */ unsigned int m_Num
  public class `anonymous-namespace'::N3ObjectIDGenerator & operator=(const class `anonymous-namespace'::N3ObjectIDGenerator &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcDBHandler {
  public void lcDBHandler(void * const)
  public void ~lcDBHandler()
  public void * operator void *()
  public bool isOK()
  /* this+0x0 */ void * m_hstmt
  /* this+0x4 */ bool m_bOK
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcDataTransferKeyGenerator {
    *
  public void lcDataTransferKeyGenerator(const class `anonymous-namespace'::lcDataTransferKeyGenerator &)
  public void lcDataTransferKeyGenerator()
  public void ~lcDataTransferKeyGenerator()
  public unsigned int operator()()
  /* this+0x4 */ unsigned int m_Cnt
  public class `anonymous-namespace'::lcDataTransferKeyGenerator & operator=(const class `anonymous-namespace'::lcDataTransferKeyGenerator &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class `anonymous-namespace'::lcZSVRLivePing {
  N3SchedulerTask<CZServer>, offset = 0x0

  public bool operator()(class CZServer *)
  public void lcZSVRLivePing(const class `anonymous-namespace'::lcZSVRLivePing &)
  public void lcZSVRLivePing()
  public void ~lcZSVRLivePing()
    public class `anonymous-namespace'::lcZSVRLivePing & operator=(class `anonymous-namespace'::lcZSVRLivePing &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class addrCompare {
  public bool operator()(const struct Addr &, const struct Addr &)
}

struct addrinfo {
  /* this+0x0 */ int ai_flags
  /* this+0x4 */ int ai_family
  /* this+0x8 */ int ai_socktype
  /* this+0xc */ int ai_protocol
  /* this+0x10 */ unsigned int ai_addrlen
  /* this+0x14 */ char * ai_canonname
  /* this+0x18 */ struct sockaddr * ai_addr
  /* this+0x1c */ struct addrinfo * ai_next
}

struct addrinfoW {
  /* this+0x0 */ int ai_flags
  /* this+0x4 */ int ai_family
  /* this+0x8 */ int ai_socktype
  /* this+0xc */ int ai_protocol
  /* this+0x10 */ unsigned int ai_addrlen
  /* this+0x14 */ wchar_t * ai_canonname
  /* this+0x18 */ struct sockaddr * ai_addr
  /* this+0x1c */ struct addrinfoW * ai_next
}

struct addrinfoexA {
  /* this+0x0 */ int ai_flags
  /* this+0x4 */ int ai_family
  /* this+0x8 */ int ai_socktype
  /* this+0xc */ int ai_protocol
  /* this+0x10 */ unsigned int ai_addrlen
  /* this+0x14 */ char * ai_canonname
  /* this+0x18 */ struct sockaddr * ai_addr
  /* this+0x1c */ void * ai_blob
  /* this+0x20 */ unsigned int ai_bloblen
  /* this+0x24 */ struct _GUID * ai_provider
  /* this+0x28 */ struct addrinfoexA * ai_next
}

struct addrinfoexW {
  /* this+0x0 */ int ai_flags
  /* this+0x4 */ int ai_family
  /* this+0x8 */ int ai_socktype
  /* this+0xc */ int ai_protocol
  /* this+0x10 */ unsigned int ai_addrlen
  /* this+0x14 */ wchar_t * ai_canonname
  /* this+0x18 */ struct sockaddr * ai_addr
  /* this+0x1c */ void * ai_blob
  /* this+0x20 */ unsigned int ai_bloblen
  /* this+0x24 */ struct _GUID * ai_provider
  /* this+0x28 */ struct addrinfoexW * ai_next
}

class charNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ char me
  public void charNode(const class charNode &)
  public void charNode(char)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class charNode & operator=(const class charNode &)
}

struct cmsghdr {
  /* this+0x0 */ unsigned long cmsg_len
  /* this+0x4 */ int cmsg_level
  /* this+0x8 */ int cmsg_type
}

struct code_page_info {
  /* this+0x0 */ int code_page
  /* this+0x4 */ unsigned short[0x6] mbulinfo
  /* this+0x10 */ unsigned char[0x8][0x4] rgrange
}

union doubleint {
  /* this+0x0 */ __int64 bigint
  /* this+0x0 */ struct <unnamed-tag> twoints

}

struct errentry {
  /* this+0x0 */ unsigned long oscode
  /* this+0x4 */ int errnocode
}

struct expdesc {
  /* this+0x0 */ enum expkind k
  /* this+0x8 */ union <unnamed-tag> u

  /* this+0x10 */ int t
  /* this+0x14 */ int f
}

struct fd_set {
  /* this+0x0 */ unsigned int fd_count
  /* this+0x4 */ unsigned int[0x40] fd_array
}

struct funtab {
  /* this+0x0 */ unsigned char fnamlen
  /* this+0x1 */ unsigned char fnam
  /* this+0x7 */ unsigned char fuseval
  /* this+0xd */ unsigned char fnumarg
  /* this+0xe */ unsigned char fnumber
}

struct global_State {
  /* this+0x0 */ struct stringtable strt

  /* this+0xc */ function  * frealloc
  /* this+0x10 */ void * ud
  /* this+0x14 */ unsigned char currentwhite
  /* this+0x15 */ unsigned char gcstate
  /* this+0x18 */ int sweepstrgc
  /* this+0x1c */ union GCObject * rootgc
  /* this+0x20 */ union GCObject * * sweepgc
  /* this+0x24 */ union GCObject * gray
  /* this+0x28 */ union GCObject * grayagain
  /* this+0x2c */ union GCObject * weak
  /* this+0x30 */ union GCObject * tmudata
  /* this+0x34 */ struct Mbuffer buff

  /* this+0x40 */ unsigned int GCthreshold
  /* this+0x44 */ unsigned int totalbytes
  /* this+0x48 */ unsigned int estimate
  /* this+0x4c */ unsigned int gcdept
  /* this+0x50 */ int gcpause
  /* this+0x54 */ int gcstepmul
  /* this+0x58 */ function  * panic
  /* this+0x60 */ struct lua_TValue l_registry

  /* this+0x70 */ struct lua_State * mainthread
  /* this+0x78 */ struct UpVal uvhead

  /* this+0x98 */ struct Table *[0x9] mt
  /* this+0xbc */ union TString *[0x11] tmname
}

struct hostent {
  /* this+0x0 */ char * h_name
  /* this+0x4 */ char * * h_aliases
  /* this+0x8 */ short h_addrtype
  /* this+0xa */ short h_length
  /* this+0xc */ char * * h_addr_list
}

struct in_addr {
    /* this+0x0 */ union in_addr::<unnamed-type-S_un> S_un

}

union in_addr::<unnamed-type-S_un> {
    /* this+0x0 */ struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b> S_un_b

    /* this+0x0 */ struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w> S_un_w

  /* this+0x0 */ unsigned long S_addr
}

struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b> {
  /* this+0x0 */ unsigned char s_b1
  /* this+0x1 */ unsigned char s_b2
  /* this+0x2 */ unsigned char s_b3
  /* this+0x3 */ unsigned char s_b4
}

struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w> {
  /* this+0x0 */ unsigned short s_w1
  /* this+0x2 */ unsigned short s_w2
}

struct ioinfo {
  /* this+0x0 */ int osfhnd
  /* this+0x4 */ char osfile
  /* this+0x5 */ char pipech
  /* this+0x8 */ int lockinitflag
  /* this+0xc */ struct _RTL_CRITICAL_SECTION lock

  /* this(bf)+0x24:0x0 len(0x7) */ char textmode
  /* this(bf)+0x24:0x7 len(0x1) */ char unicode
  /* this+0x25 */ char[0x2] pipech2
  /* this+0x28 */ __int64 startpos
  /* this+0x30 */ int utf8translations
  /* this+0x34 */ char dbcsBuffer
  /* this+0x38 */ int dbcsBufferUsed
}

struct joyinfo_tag {
  /* this+0x0 */ unsigned int wXpos
  /* this+0x4 */ unsigned int wYpos
  /* this+0x8 */ unsigned int wZpos
  /* this+0xc */ unsigned int wButtons
}

struct joyinfoex_tag {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long dwXpos
  /* this+0xc */ unsigned long dwYpos
  /* this+0x10 */ unsigned long dwZpos
  /* this+0x14 */ unsigned long dwRpos
  /* this+0x18 */ unsigned long dwUpos
  /* this+0x1c */ unsigned long dwVpos
  /* this+0x20 */ unsigned long dwButtons
  /* this+0x24 */ unsigned long dwButtonNumber
  /* this+0x28 */ unsigned long dwPOV
  /* this+0x2c */ unsigned long dwReserved1
  /* this+0x30 */ unsigned long dwReserved2
}

struct lconv {
  /* this+0x0 */ char * decimal_point
  /* this+0x4 */ char * thousands_sep
  /* this+0x8 */ char * grouping
  /* this+0xc */ char * int_curr_symbol
  /* this+0x10 */ char * currency_symbol
  /* this+0x14 */ char * mon_decimal_point
  /* this+0x18 */ char * mon_thousands_sep
  /* this+0x1c */ char * mon_grouping
  /* this+0x20 */ char * positive_sign
  /* this+0x24 */ char * negative_sign
  /* this+0x28 */ char int_frac_digits
  /* this+0x29 */ char frac_digits
  /* this+0x2a */ char p_cs_precedes
  /* this+0x2b */ char p_sep_by_space
  /* this+0x2c */ char n_cs_precedes
  /* this+0x2d */ char n_sep_by_space
  /* this+0x2e */ char p_sign_posn
  /* this+0x2f */ char n_sign_posn
  /* this+0x30 */ wchar_t * _W_decimal_point
  /* this+0x34 */ wchar_t * _W_thousands_sep
  /* this+0x38 */ wchar_t * _W_int_curr_symbol
  /* this+0x3c */ wchar_t * _W_currency_symbol
  /* this+0x40 */ wchar_t * _W_mon_decimal_point
  /* this+0x44 */ wchar_t * _W_mon_thousands_sep
  /* this+0x48 */ wchar_t * _W_positive_sign
  /* this+0x4c */ wchar_t * _W_negative_sign
}

struct linger {
  /* this+0x0 */ unsigned short l_onoff
  /* this+0x2 */ unsigned short l_linger
}

struct localeinfo_struct {
  /* this+0x0 */ struct threadlocaleinfostruct * locinfo
  /* this+0x4 */ struct threadmbcinfostruct * mbcinfo
}

class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer> {
    *
            /* this+0x4 */ class std::map<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> > > m_DataMap

  /* this+0x14 */ class std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > > m_IndexMap

    public class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::begin()
  public class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::end()
  public class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::findPrimaryKey(const unsigned long)
  public class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::findSecondaryKey(const unsigned long)
  public class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::erase(class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator)
  public bool N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::insert(unsigned long, unsigned long, class CMemorialDungeonReservedPlayer)
  public bool empty()
  public int size()
  public void clear()
  public void N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>(const class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer> &)
  public void N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>()
  public void N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::~N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>()
  public class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer> & operator=(const class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer> &)
  public void __local_vftable_ctor_closure()
  public void * __vecDelDtor(unsigned int)
}

class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject {
    *
  /* this+0x4 */ class CMemorialDungeonReservedPlayer m_Object

  /* this+0x74 */ unsigned long m_SecondaryKey
  public void N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject::CObject(const class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject &)
  public void CObject(class CMemorialDungeonReservedPlayer, unsigned long)
  public void N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject::~CObject()
  public class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject & operator=(const class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject &)
  public void * __vecDelDtor(unsigned int)
}

class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator {
    *
  /* this+0x4 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > m_Iter

  public bool operator!=(const class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator &)
  public bool operator==(const class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator &)
  public void operator++()
  public class CMemorialDungeonReservedPlayer & GetObj()
  public void Iterator(const class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator &)
  public void Iterator(class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned long,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::CObject> >,0> > > &)
  public void N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator::~Iterator()
  public class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator & operator=(const class N2DualKeyMap<unsigned long,unsigned long,CMemorialDungeonReservedPlayer>::Iterator &)
  public void * __vecDelDtor(unsigned int)
}

struct luaL_Buffer {
  /* this+0x0 */ char * p
  /* this+0x4 */ int lvl
  /* this+0x8 */ struct lua_State * L
  /* this+0xc */ char[0x200] buffer
}

struct luaL_Reg {
  /* this+0x0 */ const char * name
  /* this+0x4 */ function  * func
}

struct lua_Debug {
  /* this+0x0 */ int event
  /* this+0x4 */ const char * name
  /* this+0x8 */ const char * namewhat
  /* this+0xc */ const char * what
  /* this+0x10 */ const char * source
  /* this+0x14 */ int currentline
  /* this+0x18 */ int nups
  /* this+0x1c */ int linedefined
  /* this+0x20 */ int lastlinedefined
  /* this+0x24 */ char[0x3c] short_src
  /* this+0x60 */ int i_ci
}

struct lua_State {
  /* this+0x0 */ union GCObject * next
  /* this+0x4 */ unsigned char tt
  /* this+0x5 */ unsigned char marked
  /* this+0x6 */ unsigned char status
  /* this+0x8 */ struct lua_TValue * top
  /* this+0xc */ struct lua_TValue * base
  /* this+0x10 */ struct global_State * l_G
  /* this+0x14 */ struct CallInfo * ci
  /* this+0x18 */ const unsigned int * savedpc
  /* this+0x1c */ struct lua_TValue * stack_last
  /* this+0x20 */ struct lua_TValue * stack
  /* this+0x24 */ struct CallInfo * end_ci
  /* this+0x28 */ struct CallInfo * base_ci
  /* this+0x2c */ int stacksize
  /* this+0x30 */ int size_ci
  /* this+0x34 */ unsigned short nCcalls
  /* this+0x36 */ unsigned short baseCcalls
  /* this+0x38 */ unsigned char hookmask
  /* this+0x39 */ unsigned char allowhook
  /* this+0x3c */ int basehookcount
  /* this+0x40 */ int hookcount
  /* this+0x44 */ function  * hook
  /* this+0x48 */ struct lua_TValue l_gt

  /* this+0x58 */ struct lua_TValue env

  /* this+0x68 */ union GCObject * openupval
  /* this+0x6c */ union GCObject * gclist
  /* this+0x70 */ struct lua_longjmp * errorJmp
  /* this+0x74 */ int errfunc
}

struct lua_TValue {
  /* this+0x0 */ union Value value

  /* this+0x8 */ int tt
}

struct lua_longjmp {
  /* this+0x0 */ struct lua_longjmp * previous
  /* this+0x4 */ int[0x10] b
  /* this+0x44 */ volatile int status
}

struct midievent_tag {
  /* this+0x0 */ unsigned long dwDeltaTime
  /* this+0x4 */ unsigned long dwStreamID
  /* this+0x8 */ unsigned long dwEvent
  /* this+0xc */ unsigned long[0x1] dwParms
}

struct midihdr_tag {
  /* this+0x0 */ char * lpData
  /* this+0x4 */ unsigned long dwBufferLength
  /* this+0x8 */ unsigned long dwBytesRecorded
  /* this+0xc */ unsigned long dwUser
  /* this+0x10 */ unsigned long dwFlags
  /* this+0x14 */ struct midihdr_tag * lpNext
  /* this+0x18 */ unsigned long reserved
  /* this+0x1c */ unsigned long dwOffset
  /* this+0x20 */ unsigned long[0x8] dwReserved
}

struct midiproptempo_tag {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwTempo
}

struct midiproptimediv_tag {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwTimeDiv
}

struct midistrmbuffver_tag {
  /* this+0x0 */ unsigned long dwVersion
  /* this+0x4 */ unsigned long dwMid
  /* this+0x8 */ unsigned long dwOEMVersion
}

struct mmtime_tag {
  /* this+0x0 */ unsigned int wType
    /* this+0x4 */ union mmtime_tag::<unnamed-type-u> u

}

union mmtime_tag::<unnamed-type-u> {
  /* this+0x0 */ unsigned long ms
  /* this+0x0 */ unsigned long sample
  /* this+0x0 */ unsigned long cb
  /* this+0x0 */ unsigned long ticks
    /* this+0x0 */ struct mmtime_tag::<unnamed-type-u>::<unnamed-type-smpte> smpte

    /* this+0x0 */ struct mmtime_tag::<unnamed-type-u>::<unnamed-type-midi> midi

}

struct mmtime_tag::<unnamed-type-u>::<unnamed-type-midi> {
  /* this+0x0 */ unsigned long songptrpos
}

struct mmtime_tag::<unnamed-type-u>::<unnamed-type-smpte> {
  /* this+0x0 */ unsigned char hour
  /* this+0x1 */ unsigned char min
  /* this+0x2 */ unsigned char sec
  /* this+0x3 */ unsigned char frame
  /* this+0x4 */ unsigned char fps
  /* this+0x5 */ unsigned char dummy
  /* this+0x6 */ unsigned char[0x2] pad
}

struct netent {
  /* this+0x0 */ char * n_name
  /* this+0x4 */ char * * n_aliases
  /* this+0x8 */ short n_addrtype
  /* this+0xc */ unsigned long n_net
}

class pDNameNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ class DName * me
  public void pDNameNode(const class pDNameNode &)
  public void pDNameNode(class DName *)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class pDNameNode & operator=(const class pDNameNode &)
}

class pairNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ class DNameNode * left
  /* this+0x8 */ class DNameNode * right
  /* this+0xc */ int myLen
  public void pairNode(const class pairNode &)
  public void pairNode(class DNameNode *, class DNameNode *)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class pairNode & operator=(const class pairNode &)
}

class pcharNode {
  DNameNode, offset = 0x0

  /* this+0x4 */ char * me
  /* this+0x8 */ int myLen
  public void pcharNode(const class pcharNode &)
  public void pcharNode(const char *, int)
  public int length()
  public char getLastChar()
  public char * getString(char *, char *)
  public class pcharNode & operator=(const class pcharNode &)
}

struct pcmwaveformat_tag {
  /* this+0x0 */ struct waveformat_tag wf

  /* this+0xe */ unsigned short wBitsPerSample
}

struct pollfd {
  /* this+0x0 */ unsigned int fd
  /* this+0x4 */ short events
  /* this+0x6 */ short revents
}

struct positional_param {
  /* this+0x0 */ enum ARG_TYPE arg_type
  /* this+0x4 */ char * arg_ptr
  /* this+0x8 */ char type
  /* this+0xc */ int flags
}

struct protoent {
  /* this+0x0 */ char * p_name
  /* this+0x4 */ char * * p_aliases
  /* this+0x8 */ short p_proto
}

struct provider_info {
  /* this+0x0 */ function  * pi_R0_1val
  /* this+0x4 */ function  * pi_R0_allvals
  /* this+0x8 */ function  * pi_R3_1val
  /* this+0xc */ function  * pi_R3_allvals
  /* this+0x10 */ unsigned long pi_flags
  /* this+0x14 */ void * pi_key_context
}

struct pvalueA {
  /* this+0x0 */ char * pv_valuename
  /* this+0x4 */ int pv_valuelen
  /* this+0x8 */ void * pv_value_context
  /* this+0xc */ unsigned long pv_type
}

struct pvalueW {
  /* this+0x0 */ wchar_t * pv_valuename
  /* this+0x4 */ int pv_valuelen
  /* this+0x8 */ void * pv_value_context
  /* this+0xc */ unsigned long pv_type
}

struct rterrmsgs {
  /* this+0x0 */ int rterrno
  /* this+0x4 */ const wchar_t * rterrtxt
}

struct servent {
  /* this+0x0 */ char * s_name
  /* this+0x4 */ char * * s_aliases
  /* this+0x8 */ short s_port
  /* this+0xc */ char * s_proto
}

struct setloc_struct {
  /* this+0x0 */ char * pchLanguage
  /* this+0x4 */ char * pchCountry
  /* this+0x8 */ int iLcidState
  /* this+0xc */ int iPrimaryLen
  /* this+0x10 */ int bAbbrevLanguage
  /* this+0x14 */ int bAbbrevCountry
  /* this+0x18 */ unsigned long lcidLanguage
  /* this+0x1c */ unsigned long lcidCountry
  /* this+0x20 */ struct tagLC_ID _cacheid

  /* this+0x28 */ unsigned int _cachecp
  /* this+0x2c */ char[0x83] _cachein
  /* this+0xaf */ char[0x83] _cacheout
  /* this+0x134 */ struct _is_ctype_compatible[0x5] _Lcid_c
}

struct sockaddr {
  /* this+0x0 */ unsigned short sa_family
  /* this+0x2 */ char[0xe] sa_data
}

struct sockaddr_dl {
  /* this+0x0 */ unsigned short sdl_family
  /* this+0x2 */ unsigned char[0x8] sdl_data
  /* this+0xa */ unsigned char[0x4] sdl_zero
}

struct sockaddr_in {
  /* this+0x0 */ unsigned short sin_family
  /* this+0x2 */ unsigned short sin_port
  /* this+0x4 */ struct in_addr sin_addr

  /* this+0x8 */ char[0x8] sin_zero
}

struct sockaddr_storage {
  /* this+0x0 */ unsigned short ss_family
  /* this+0x2 */ char[0x6] __ss_pad1
  /* this+0x8 */ __int64 __ss_align
  /* this+0x10 */ char[0x70] __ss_pad2
}

struct sockaddr_storage_xp {
  /* this+0x0 */ short ss_family
  /* this+0x2 */ char[0x6] __ss_pad1
  /* this+0x8 */ __int64 __ss_align
  /* this+0x10 */ char[0x70] __ss_pad2
}

struct sockproto {
  /* this+0x0 */ unsigned short sp_family
  /* this+0x2 */ unsigned short sp_protocol
}

struct stat {
  /* this+0x0 */ unsigned int st_dev
  /* this+0x4 */ unsigned short st_ino
  /* this+0x6 */ unsigned short st_mode
  /* this+0x8 */ short st_nlink
  /* this+0xa */ short st_uid
  /* this+0xc */ short st_gid
  /* this+0x10 */ unsigned int st_rdev
  /* this+0x14 */ long st_size
  /* this+0x18 */ long st_atime
  /* this+0x1c */ long st_mtime
  /* this+0x20 */ long st_ctime
}

struct stringtable {
  /* this+0x0 */ union GCObject * * hash
  /* this+0x4 */ unsigned int nuse
  /* this+0x8 */ int size
}

struct tMIXERCONTROLDETAILS {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long cChannels
  /* this+0xc */ struct HWND__ * hwndOwner
  /* this+0xc */ unsigned long cMultipleItems
  /* this+0x10 */ unsigned long cbDetails
  /* this+0x14 */ void * paDetails
}

struct tMIXERCONTROLDETAILS_BOOLEAN {
  /* this+0x0 */ long fValue
}

struct tMIXERCONTROLDETAILS_SIGNED {
  /* this+0x0 */ long lValue
}

struct tMIXERCONTROLDETAILS_UNSIGNED {
  /* this+0x0 */ unsigned long dwValue
}

struct tWAVEFORMATEX {
  /* this+0x0 */ unsigned short wFormatTag
  /* this+0x2 */ unsigned short nChannels
  /* this+0x4 */ unsigned long nSamplesPerSec
  /* this+0x8 */ unsigned long nAvgBytesPerSec
  /* this+0xc */ unsigned short nBlockAlign
  /* this+0xe */ unsigned short wBitsPerSample
  /* this+0x10 */ unsigned short cbSize
}

struct tagABORTPATH {
  /* this+0x0 */ struct tagEMR emr

}

struct tagACCEL {
  /* this+0x0 */ unsigned char fVirt
  /* this+0x2 */ unsigned short key
  /* this+0x4 */ unsigned short cmd
}

struct tagACCESSTIMEOUT {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iTimeOutMSec
}

struct tagACTCTXA {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ const char * lpSource
  /* this+0xc */ unsigned short wProcessorArchitecture
  /* this+0xe */ unsigned short wLangId
  /* this+0x10 */ const char * lpAssemblyDirectory
  /* this+0x14 */ const char * lpResourceName
  /* this+0x18 */ const char * lpApplicationName
  /* this+0x1c */ struct HINSTANCE__ * hModule
}

struct tagACTCTXW {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ const wchar_t * lpSource
  /* this+0xc */ unsigned short wProcessorArchitecture
  /* this+0xe */ unsigned short wLangId
  /* this+0x10 */ const wchar_t * lpAssemblyDirectory
  /* this+0x14 */ const wchar_t * lpResourceName
  /* this+0x18 */ const wchar_t * lpApplicationName
  /* this+0x1c */ struct HINSTANCE__ * hModule
}

struct tagACTCTX_SECTION_KEYED_DATA {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long ulDataFormatVersion
  /* this+0x8 */ void * lpData
  /* this+0xc */ unsigned long ulLength
  /* this+0x10 */ void * lpSectionGlobalData
  /* this+0x14 */ unsigned long ulSectionGlobalDataLength
  /* this+0x18 */ void * lpSectionBase
  /* this+0x1c */ unsigned long ulSectionTotalLength
  /* this+0x20 */ void * hActCtx
  /* this+0x24 */ unsigned long ulAssemblyRosterIndex
  /* this+0x28 */ unsigned long ulFlags
  /* this+0x2c */ struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata

}

struct tagACTCTX_SECTION_KEYED_DATA_2600 {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long ulDataFormatVersion
  /* this+0x8 */ void * lpData
  /* this+0xc */ unsigned long ulLength
  /* this+0x10 */ void * lpSectionGlobalData
  /* this+0x14 */ unsigned long ulSectionGlobalDataLength
  /* this+0x18 */ void * lpSectionBase
  /* this+0x1c */ unsigned long ulSectionTotalLength
  /* this+0x20 */ void * hActCtx
  /* this+0x24 */ unsigned long ulAssemblyRosterIndex
}

struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
  /* this+0x0 */ void * lpInformation
  /* this+0x4 */ void * lpSectionBase
  /* this+0x8 */ unsigned long ulSectionLength
  /* this+0xc */ void * lpSectionGlobalDataBase
  /* this+0x10 */ unsigned long ulSectionGlobalDataLength
}

struct tagALTTABINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ int cItems
  /* this+0x8 */ int cColumns
  /* this+0xc */ int cRows
  /* this+0x10 */ int iColFocus
  /* this+0x14 */ int iRowFocus
  /* this+0x18 */ int cxItem
  /* this+0x1c */ int cyItem
  /* this+0x20 */ struct tagPOINT ptStart

}

struct tagANIMATIONINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iMinAnimate
}

struct tagAUDIODESCRIPTION {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int Enabled
  /* this+0x8 */ unsigned long Locale
}

struct tagAUXCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned short wTechnology
  /* this+0x2a */ unsigned short wReserved1
  /* this+0x2c */ unsigned long dwSupport
  /* this+0x30 */ struct _GUID ManufacturerGuid

  /* this+0x40 */ struct _GUID ProductGuid

  /* this+0x50 */ struct _GUID NameGuid

}

struct tagAUXCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned short wTechnology
  /* this+0x4a */ unsigned short wReserved1
  /* this+0x4c */ unsigned long dwSupport
  /* this+0x50 */ struct _GUID ManufacturerGuid

  /* this+0x60 */ struct _GUID ProductGuid

  /* this+0x70 */ struct _GUID NameGuid

}

struct tagAUXCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned short wTechnology
  /* this+0x2a */ unsigned short wReserved1
  /* this+0x2c */ unsigned long dwSupport
}

struct tagAUXCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned short wTechnology
  /* this+0x4a */ unsigned short wReserved1
  /* this+0x4c */ unsigned long dwSupport
}

struct tagAXESLISTA {
  /* this+0x0 */ unsigned long axlReserved
  /* this+0x4 */ unsigned long axlNumAxes
  /* this+0x8 */ struct tagAXISINFOA[0x10] axlAxisInfo
}

struct tagAXESLISTW {
  /* this+0x0 */ unsigned long axlReserved
  /* this+0x4 */ unsigned long axlNumAxes
  /* this+0x8 */ struct tagAXISINFOW[0x10] axlAxisInfo
}

struct tagAXISINFOA {
  /* this+0x0 */ long axMinValue
  /* this+0x4 */ long axMaxValue
  /* this+0x8 */ unsigned char[0x10] axAxisName
}

struct tagAXISINFOW {
  /* this+0x0 */ long axMinValue
  /* this+0x4 */ long axMaxValue
  /* this+0x8 */ wchar_t[0x10] axAxisName
}

struct tagBITMAP {
  /* this+0x0 */ long bmType
  /* this+0x4 */ long bmWidth
  /* this+0x8 */ long bmHeight
  /* this+0xc */ long bmWidthBytes
  /* this+0x10 */ unsigned short bmPlanes
  /* this+0x12 */ unsigned short bmBitsPixel
  /* this+0x14 */ void * bmBits
}

struct tagBITMAPCOREHEADER {
  /* this+0x0 */ unsigned long bcSize
  /* this+0x4 */ unsigned short bcWidth
  /* this+0x6 */ unsigned short bcHeight
  /* this+0x8 */ unsigned short bcPlanes
  /* this+0xa */ unsigned short bcBitCount
}

struct tagBITMAPCOREINFO {
  /* this+0x0 */ struct tagBITMAPCOREHEADER bmciHeader

  /* this+0xc */ struct tagRGBTRIPLE[0x1] bmciColors
}

struct tagBITMAPFILEHEADER {
  /* this+0x0 */ unsigned short bfType
  /* this+0x2 */ unsigned long bfSize
  /* this+0x6 */ unsigned short bfReserved1
  /* this+0x8 */ unsigned short bfReserved2
  /* this+0xa */ unsigned long bfOffBits
}

struct tagBITMAPINFO {
  /* this+0x0 */ struct tagBITMAPINFOHEADER bmiHeader

  /* this+0x28 */ struct tagRGBQUAD[0x1] bmiColors
}

struct tagBITMAPINFOHEADER {
  /* this+0x0 */ unsigned long biSize
  /* this+0x4 */ long biWidth
  /* this+0x8 */ long biHeight
  /* this+0xc */ unsigned short biPlanes
  /* this+0xe */ unsigned short biBitCount
  /* this+0x10 */ unsigned long biCompression
  /* this+0x14 */ unsigned long biSizeImage
  /* this+0x18 */ long biXPelsPerMeter
  /* this+0x1c */ long biYPelsPerMeter
  /* this+0x20 */ unsigned long biClrUsed
  /* this+0x24 */ unsigned long biClrImportant
}

struct tagCANDIDATEFORM {
  /* this+0x0 */ unsigned long dwIndex
  /* this+0x4 */ unsigned long dwStyle
  /* this+0x8 */ struct tagPOINT ptCurrentPos

  /* this+0x10 */ struct tagRECT rcArea

}

struct tagCANDIDATELIST {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwStyle
  /* this+0x8 */ unsigned long dwCount
  /* this+0xc */ unsigned long dwSelection
  /* this+0x10 */ unsigned long dwPageStart
  /* this+0x14 */ unsigned long dwPageSize
  /* this+0x18 */ unsigned long[0x1] dwOffset
}

struct tagCBTACTIVATESTRUCT {
  /* this+0x0 */ int fMouse
  /* this+0x4 */ struct HWND__ * hWndActive
}

struct tagCBT_CREATEWNDA {
  /* this+0x0 */ struct tagCREATESTRUCTA * lpcs
  /* this+0x4 */ struct HWND__ * hwndInsertAfter
}

struct tagCBT_CREATEWNDW {
  /* this+0x0 */ struct tagCREATESTRUCTW * lpcs
  /* this+0x4 */ struct HWND__ * hwndInsertAfter
}

struct tagCHANGEFILTERSTRUCT {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long ExtStatus
}

struct tagCHARSETINFO {
  /* this+0x0 */ unsigned int ciCharset
  /* this+0x4 */ unsigned int ciACP
  /* this+0x8 */ struct tagFONTSIGNATURE fs

}

struct tagCIEXYZ {
  /* this+0x0 */ long ciexyzX
  /* this+0x4 */ long ciexyzY
  /* this+0x8 */ long ciexyzZ
}

struct tagCLIENTCREATESTRUCT {
  /* this+0x0 */ void * hWindowMenu
  /* this+0x4 */ unsigned int idFirstChild
}

struct tagCOLORADJUSTMENT {
  /* this+0x0 */ unsigned short caSize
  /* this+0x2 */ unsigned short caFlags
  /* this+0x4 */ unsigned short caIlluminantIndex
  /* this+0x6 */ unsigned short caRedGamma
  /* this+0x8 */ unsigned short caGreenGamma
  /* this+0xa */ unsigned short caBlueGamma
  /* this+0xc */ unsigned short caReferenceBlack
  /* this+0xe */ unsigned short caReferenceWhite
  /* this+0x10 */ short caContrast
  /* this+0x12 */ short caBrightness
  /* this+0x14 */ short caColorfulness
  /* this+0x16 */ short caRedGreenTint
}

struct tagCOLORCORRECTPALETTE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPalette
  /* this+0xc */ unsigned long nFirstEntry
  /* this+0x10 */ unsigned long nPalEntries
  /* this+0x14 */ unsigned long nReserved
}

struct tagCOLORMATCHTOTARGET {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long dwAction
  /* this+0xc */ unsigned long dwFlags
  /* this+0x10 */ unsigned long cbName
  /* this+0x14 */ unsigned long cbData
  /* this+0x18 */ unsigned char[0x1] Data
}

struct tagCOMBOBOXINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcItem

  /* this+0x14 */ struct tagRECT rcButton

  /* this+0x24 */ unsigned long stateButton
  /* this+0x28 */ struct HWND__ * hwndCombo
  /* this+0x2c */ struct HWND__ * hwndItem
  /* this+0x30 */ struct HWND__ * hwndList
}

struct tagCOMPAREITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType
  /* this+0x4 */ unsigned int CtlID
  /* this+0x8 */ struct HWND__ * hwndItem
  /* this+0xc */ unsigned int itemID1
  /* this+0x10 */ unsigned long itemData1
  /* this+0x14 */ unsigned int itemID2
  /* this+0x18 */ unsigned long itemData2
  /* this+0x1c */ unsigned long dwLocaleId
}

struct tagCOMPOSITIONFORM {
  /* this+0x0 */ unsigned long dwStyle
  /* this+0x4 */ struct tagPOINT ptCurrentPos

  /* this+0xc */ struct tagRECT rcArea

}

struct tagCOPYDATASTRUCT {
  /* this+0x0 */ unsigned long dwData
  /* this+0x4 */ unsigned long cbData
  /* this+0x8 */ void * lpData
}

struct tagCREATESTRUCTA {
  /* this+0x0 */ void * lpCreateParams
  /* this+0x4 */ struct HINSTANCE__ * hInstance
  /* this+0x8 */ struct HMENU__ * hMenu
  /* this+0xc */ struct HWND__ * hwndParent
  /* this+0x10 */ int cy
  /* this+0x14 */ int cx
  /* this+0x18 */ int y
  /* this+0x1c */ int x
  /* this+0x20 */ long style
  /* this+0x24 */ const char * lpszName
  /* this+0x28 */ const char * lpszClass
  /* this+0x2c */ unsigned long dwExStyle
}

struct tagCREATESTRUCTW {
  /* this+0x0 */ void * lpCreateParams
  /* this+0x4 */ struct HINSTANCE__ * hInstance
  /* this+0x8 */ struct HMENU__ * hMenu
  /* this+0xc */ struct HWND__ * hwndParent
  /* this+0x10 */ int cy
  /* this+0x14 */ int cx
  /* this+0x18 */ int y
  /* this+0x1c */ int x
  /* this+0x20 */ long style
  /* this+0x24 */ const wchar_t * lpszName
  /* this+0x28 */ const wchar_t * lpszClass
  /* this+0x2c */ unsigned long dwExStyle
}

struct tagCURSORINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long flags
  /* this+0x8 */ struct HICON__ * hCursor
  /* this+0xc */ struct tagPOINT ptScreenPos

}

struct tagCURSORSHAPE {
  /* this+0x0 */ int xHotSpot
  /* this+0x4 */ int yHotSpot
  /* this+0x8 */ int cx
  /* this+0xc */ int cy
  /* this+0x10 */ int cbWidth
  /* this+0x14 */ unsigned char Planes
  /* this+0x15 */ unsigned char BitsPixel
}

struct tagCWPRETSTRUCT {
  /* this+0x0 */ long lResult
  /* this+0x4 */ long lParam
  /* this+0x8 */ unsigned int wParam
  /* this+0xc */ unsigned int message
  /* this+0x10 */ struct HWND__ * hwnd
}

struct tagCWPSTRUCT {
  /* this+0x0 */ long lParam
  /* this+0x4 */ unsigned int wParam
  /* this+0x8 */ unsigned int message
  /* this+0xc */ struct HWND__ * hwnd
}

struct tagDATE_STRUCT {
  /* this+0x0 */ short year
  /* this+0x2 */ unsigned short month
  /* this+0x4 */ unsigned short day
}

struct tagDEBUGHOOKINFO {
  /* this+0x0 */ unsigned long idThread
  /* this+0x4 */ unsigned long idThreadInstaller
  /* this+0x8 */ long lParam
  /* this+0xc */ unsigned int wParam
  /* this+0x10 */ int code
}

struct tagDELETEITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType
  /* this+0x4 */ unsigned int CtlID
  /* this+0x8 */ unsigned int itemID
  /* this+0xc */ struct HWND__ * hwndItem
  /* this+0x10 */ unsigned long itemData
}

struct tagDESIGNVECTOR {
  /* this+0x0 */ unsigned long dvReserved
  /* this+0x4 */ unsigned long dvNumAxes
  /* this+0x8 */ long[0x10] dvValues
}

struct tagDIBSECTION {
  /* this+0x0 */ struct tagBITMAP dsBm

  /* this+0x18 */ struct tagBITMAPINFOHEADER dsBmih

  /* this+0x40 */ unsigned long[0x3] dsBitfields
  /* this+0x4c */ void * dshSection
  /* this+0x50 */ unsigned long dsOffset
}

struct tagDRAWITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType
  /* this+0x4 */ unsigned int CtlID
  /* this+0x8 */ unsigned int itemID
  /* this+0xc */ unsigned int itemAction
  /* this+0x10 */ unsigned int itemState
  /* this+0x14 */ struct HWND__ * hwndItem
  /* this+0x18 */ struct HDC__ * hDC
  /* this+0x1c */ struct tagRECT rcItem

  /* this+0x2c */ unsigned long itemData
}

struct tagDRAWTEXTPARAMS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iTabLength
  /* this+0x8 */ int iLeftMargin
  /* this+0xc */ int iRightMargin
  /* this+0x10 */ unsigned int uiLengthDrawn
}

struct tagDROPSTRUCT {
  /* this+0x0 */ struct HWND__ * hwndSource
  /* this+0x4 */ struct HWND__ * hwndSink
  /* this+0x8 */ unsigned long wFmt
  /* this+0xc */ unsigned long dwData
  /* this+0x10 */ struct tagPOINT ptDrop

  /* this+0x18 */ unsigned long dwControlData
}

struct tagDRVCONFIGINFO {
  /* this+0x0 */ unsigned long dwDCISize
  /* this+0x4 */ const wchar_t * lpszDCISectionName
  /* this+0x8 */ const wchar_t * lpszDCIAliasName
}

struct tagEMR {
  /* this+0x0 */ unsigned long iType
  /* this+0x4 */ unsigned long nSize
}

struct tagEMRALPHABLEND {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
  /* this+0x64 */ long cxSrc
  /* this+0x68 */ long cySrc
}

struct tagEMRANGLEARC {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlCenter

  /* this+0x10 */ unsigned long nRadius
  /* this+0x14 */ float eStartAngle
  /* this+0x18 */ float eSweepAngle
}

struct tagEMRARC {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBox

  /* this+0x18 */ struct _POINTL ptlStart

  /* this+0x20 */ struct _POINTL ptlEnd

}

struct tagEMRBITBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
}

struct tagEMRCREATEBRUSHINDIRECT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihBrush
  /* this+0xc */ struct tagLOGBRUSH32 lb

}

struct tagEMRCREATECOLORSPACE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihCS
  /* this+0xc */ struct tagLOGCOLORSPACEA lcs

}

struct tagEMRCREATECOLORSPACEW {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihCS
  /* this+0xc */ struct tagLOGCOLORSPACEW lcs

  /* this+0x258 */ unsigned long dwFlags
  /* this+0x25c */ unsigned long cbData
  /* this+0x260 */ unsigned char[0x1] Data
}

struct tagEMRCREATEDIBPATTERNBRUSHPT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihBrush
  /* this+0xc */ unsigned long iUsage
  /* this+0x10 */ unsigned long offBmi
  /* this+0x14 */ unsigned long cbBmi
  /* this+0x18 */ unsigned long offBits
  /* this+0x1c */ unsigned long cbBits
}

struct tagEMRCREATEMONOBRUSH {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihBrush
  /* this+0xc */ unsigned long iUsage
  /* this+0x10 */ unsigned long offBmi
  /* this+0x14 */ unsigned long cbBmi
  /* this+0x18 */ unsigned long offBits
  /* this+0x1c */ unsigned long cbBits
}

struct tagEMRCREATEPALETTE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPal
  /* this+0xc */ struct tagLOGPALETTE lgpl

}

struct tagEMRCREATEPEN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPen
  /* this+0xc */ struct tagLOGPEN lopn

}

struct tagEMRELLIPSE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBox

}

struct tagEMREOF {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long nPalEntries
  /* this+0xc */ unsigned long offPalEntries
  /* this+0x10 */ unsigned long nSizeLast
}

struct tagEMREXCLUDECLIPRECT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclClip

}

struct tagEMREXTCREATEFONTINDIRECTW {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihFont
  /* this+0xc */ struct tagEXTLOGFONTW elfw

}

struct tagEMREXTCREATEPEN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPen
  /* this+0xc */ unsigned long offBmi
  /* this+0x10 */ unsigned long cbBmi
  /* this+0x14 */ unsigned long offBits
  /* this+0x18 */ unsigned long cbBits
  /* this+0x1c */ struct tagEXTLOGPEN32 elp

}

struct tagEMREXTESCAPE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ int iEscape
  /* this+0xc */ int cbEscData
  /* this+0x10 */ unsigned char[0x1] EscData
}

struct tagEMREXTFLOODFILL {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlStart

  /* this+0x10 */ unsigned long crColor
  /* this+0x14 */ unsigned long iMode
}

struct tagEMREXTSELECTCLIPRGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long cbRgnData
  /* this+0xc */ unsigned long iMode
  /* this+0x10 */ unsigned char[0x1] RgnData
}

struct tagEMREXTTEXTOUTA {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long iGraphicsMode
  /* this+0x1c */ float exScale
  /* this+0x20 */ float eyScale
  /* this+0x24 */ struct tagEMRTEXT emrtext

}

struct tagEMRFILLPATH {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

}

struct tagEMRFILLRGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cbRgnData
  /* this+0x1c */ unsigned long ihBrush
  /* this+0x20 */ unsigned char[0x1] RgnData
}

struct tagEMRFORMAT {
  /* this+0x0 */ unsigned long dSignature
  /* this+0x4 */ unsigned long nVersion
  /* this+0x8 */ unsigned long cbData
  /* this+0xc */ unsigned long offData
}

struct tagEMRFRAMERGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cbRgnData
  /* this+0x1c */ unsigned long ihBrush
  /* this+0x20 */ struct tagSIZE szlStroke

  /* this+0x28 */ unsigned char[0x1] RgnData
}

struct tagEMRGDICOMMENT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long cbData
  /* this+0xc */ unsigned char[0x1] Data
}

struct tagEMRGLSBOUNDEDRECORD {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cbData
  /* this+0x1c */ unsigned char[0x1] Data
}

struct tagEMRGLSRECORD {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long cbData
  /* this+0xc */ unsigned char[0x1] Data
}

struct tagEMRGRADIENTFILL {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long nVer
  /* this+0x1c */ unsigned long nTri
  /* this+0x20 */ unsigned long ulMode
  /* this+0x24 */ struct _TRIVERTEX[0x1] Ver
}

struct tagEMRINVERTRGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cbRgnData
  /* this+0x1c */ unsigned char[0x1] RgnData
}

struct tagEMRLINETO {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptl

}

struct tagEMRMASKBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
  /* this+0x64 */ long xMask
  /* this+0x68 */ long yMask
  /* this+0x6c */ unsigned long iUsageMask
  /* this+0x70 */ unsigned long offBmiMask
  /* this+0x74 */ unsigned long cbBmiMask
  /* this+0x78 */ unsigned long offBitsMask
  /* this+0x7c */ unsigned long cbBitsMask
}

struct tagEMRMODIFYWORLDTRANSFORM {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagXFORM xform

  /* this+0x20 */ unsigned long iMode
}

struct tagEMRNAMEDESCAPE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ int iEscape
  /* this+0xc */ int cbDriver
  /* this+0x10 */ int cbEscData
  /* this+0x14 */ unsigned char[0x1] EscData
}

struct tagEMROFFSETCLIPRGN {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlOffset

}

struct tagEMRPIXELFORMAT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagPIXELFORMATDESCRIPTOR pfd

}

struct tagEMRPLGBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ struct _POINTL[0x3] aptlDest
  /* this+0x30 */ long xSrc
  /* this+0x34 */ long ySrc
  /* this+0x38 */ long cxSrc
  /* this+0x3c */ long cySrc
  /* this+0x40 */ struct tagXFORM xformSrc

  /* this+0x58 */ unsigned long crBkColorSrc
  /* this+0x5c */ unsigned long iUsageSrc
  /* this+0x60 */ unsigned long offBmiSrc
  /* this+0x64 */ unsigned long cbBmiSrc
  /* this+0x68 */ unsigned long offBitsSrc
  /* this+0x6c */ unsigned long cbBitsSrc
  /* this+0x70 */ long xMask
  /* this+0x74 */ long yMask
  /* this+0x78 */ unsigned long iUsageMask
  /* this+0x7c */ unsigned long offBmiMask
  /* this+0x80 */ unsigned long cbBmiMask
  /* this+0x84 */ unsigned long offBitsMask
  /* this+0x88 */ unsigned long cbBitsMask
}

struct tagEMRPOLYDRAW {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cptl
  /* this+0x1c */ struct _POINTL[0x1] aptl
  /* this+0x24 */ unsigned char[0x1] abTypes
}

struct tagEMRPOLYDRAW16 {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cpts
  /* this+0x1c */ struct tagPOINTS[0x1] apts
  /* this+0x20 */ unsigned char[0x1] abTypes
}

struct tagEMRPOLYLINE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cptl
  /* this+0x1c */ struct _POINTL[0x1] aptl
}

struct tagEMRPOLYLINE16 {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long cpts
  /* this+0x1c */ struct tagPOINTS[0x1] apts
}

struct tagEMRPOLYPOLYLINE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long nPolys
  /* this+0x1c */ unsigned long cptl
  /* this+0x20 */ unsigned long[0x1] aPolyCounts
  /* this+0x24 */ struct _POINTL[0x1] aptl
}

struct tagEMRPOLYPOLYLINE16 {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long nPolys
  /* this+0x1c */ unsigned long cpts
  /* this+0x20 */ unsigned long[0x1] aPolyCounts
  /* this+0x24 */ struct tagPOINTS[0x1] apts
}

struct tagEMRPOLYTEXTOUTA {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ unsigned long iGraphicsMode
  /* this+0x1c */ float exScale
  /* this+0x20 */ float eyScale
  /* this+0x24 */ long cStrings
  /* this+0x28 */ struct tagEMRTEXT[0x1] aemrtext
}

struct tagEMRRESIZEPALETTE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPal
  /* this+0xc */ unsigned long cEntries
}

struct tagEMRRESTOREDC {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ long iRelative
}

struct tagEMRROUNDRECT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBox

  /* this+0x18 */ struct tagSIZE szlCorner

}

struct tagEMRSCALEVIEWPORTEXTEX {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ long xNum
  /* this+0xc */ long xDenom
  /* this+0x10 */ long yNum
  /* this+0x14 */ long yDenom
}

struct tagEMRSELECTCLIPPATH {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long iMode
}

struct tagEMRSELECTOBJECT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihObject
}

struct tagEMRSELECTPALETTE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPal
}

struct tagEMRSETARCDIRECTION {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long iArcDirection
}

struct tagEMRSETCOLORADJUSTMENT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagCOLORADJUSTMENT ColorAdjustment

}

struct tagEMRSETCOLORSPACE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihCS
}

struct tagEMRSETDIBITSTODEVICE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long xSrc
  /* this+0x24 */ long ySrc
  /* this+0x28 */ long cxSrc
  /* this+0x2c */ long cySrc
  /* this+0x30 */ unsigned long offBmiSrc
  /* this+0x34 */ unsigned long cbBmiSrc
  /* this+0x38 */ unsigned long offBitsSrc
  /* this+0x3c */ unsigned long cbBitsSrc
  /* this+0x40 */ unsigned long iUsageSrc
  /* this+0x44 */ unsigned long iStartScan
  /* this+0x48 */ unsigned long cScans
}

struct tagEMRSETICMPROFILE {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long dwFlags
  /* this+0xc */ unsigned long cbName
  /* this+0x10 */ unsigned long cbData
  /* this+0x14 */ unsigned char[0x1] Data
}

struct tagEMRSETMAPPERFLAGS {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long dwFlags
}

struct tagEMRSETMITERLIMIT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ float eMiterLimit
}

struct tagEMRSETPALETTEENTRIES {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long ihPal
  /* this+0xc */ unsigned long iStart
  /* this+0x10 */ unsigned long cEntries
  /* this+0x14 */ struct tagPALETTEENTRY[0x1] aPalEntries
}

struct tagEMRSETPIXELV {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlPixel

  /* this+0x10 */ unsigned long crColor
}

struct tagEMRSETTEXTCOLOR {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ unsigned long crColor
}

struct tagEMRSETVIEWPORTEXTEX {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagSIZE szlExtent

}

struct tagEMRSETVIEWPORTORGEX {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _POINTL ptlOrigin

}

struct tagEMRSETWORLDTRANSFORM {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct tagXFORM xform

}

struct tagEMRSTRETCHBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
  /* this+0x64 */ long cxSrc
  /* this+0x68 */ long cySrc
}

struct tagEMRSTRETCHDIBITS {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long xSrc
  /* this+0x24 */ long ySrc
  /* this+0x28 */ long cxSrc
  /* this+0x2c */ long cySrc
  /* this+0x30 */ unsigned long offBmiSrc
  /* this+0x34 */ unsigned long cbBmiSrc
  /* this+0x38 */ unsigned long offBitsSrc
  /* this+0x3c */ unsigned long cbBitsSrc
  /* this+0x40 */ unsigned long iUsageSrc
  /* this+0x44 */ unsigned long dwRop
  /* this+0x48 */ long cxDest
  /* this+0x4c */ long cyDest
}

struct tagEMRTEXT {
  /* this+0x0 */ struct _POINTL ptlReference

  /* this+0x8 */ unsigned long nChars
  /* this+0xc */ unsigned long offString
  /* this+0x10 */ unsigned long fOptions
  /* this+0x14 */ struct _RECTL rcl

  /* this+0x24 */ unsigned long offDx
}

struct tagEMRTRANSPARENTBLT {
  /* this+0x0 */ struct tagEMR emr

  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ long xDest
  /* this+0x1c */ long yDest
  /* this+0x20 */ long cxDest
  /* this+0x24 */ long cyDest
  /* this+0x28 */ unsigned long dwRop
  /* this+0x2c */ long xSrc
  /* this+0x30 */ long ySrc
  /* this+0x34 */ struct tagXFORM xformSrc

  /* this+0x4c */ unsigned long crBkColorSrc
  /* this+0x50 */ unsigned long iUsageSrc
  /* this+0x54 */ unsigned long offBmiSrc
  /* this+0x58 */ unsigned long cbBmiSrc
  /* this+0x5c */ unsigned long offBitsSrc
  /* this+0x60 */ unsigned long cbBitsSrc
  /* this+0x64 */ long cxSrc
  /* this+0x68 */ long cySrc
}

struct tagENHMETAHEADER {
  /* this+0x0 */ unsigned long iType
  /* this+0x4 */ unsigned long nSize
  /* this+0x8 */ struct _RECTL rclBounds

  /* this+0x18 */ struct _RECTL rclFrame

  /* this+0x28 */ unsigned long dSignature
  /* this+0x2c */ unsigned long nVersion
  /* this+0x30 */ unsigned long nBytes
  /* this+0x34 */ unsigned long nRecords
  /* this+0x38 */ unsigned short nHandles
  /* this+0x3a */ unsigned short sReserved
  /* this+0x3c */ unsigned long nDescription
  /* this+0x40 */ unsigned long offDescription
  /* this+0x44 */ unsigned long nPalEntries
  /* this+0x48 */ struct tagSIZE szlDevice

  /* this+0x50 */ struct tagSIZE szlMillimeters

  /* this+0x58 */ unsigned long cbPixelFormat
  /* this+0x5c */ unsigned long offPixelFormat
  /* this+0x60 */ unsigned long bOpenGL
  /* this+0x64 */ struct tagSIZE szlMicrometers

}

struct tagENHMETARECORD {
  /* this+0x0 */ unsigned long iType
  /* this+0x4 */ unsigned long nSize
  /* this+0x8 */ unsigned long[0x1] dParm
}

struct tagENUMLOGFONTA {
  /* this+0x0 */ struct tagLOGFONTA elfLogFont

  /* this+0x3c */ unsigned char[0x40] elfFullName
  /* this+0x7c */ unsigned char[0x20] elfStyle
}

struct tagENUMLOGFONTEXA {
  /* this+0x0 */ struct tagLOGFONTA elfLogFont

  /* this+0x3c */ unsigned char[0x40] elfFullName
  /* this+0x7c */ unsigned char[0x20] elfStyle
  /* this+0x9c */ unsigned char[0x20] elfScript
}

struct tagENUMLOGFONTEXDVA {
  /* this+0x0 */ struct tagENUMLOGFONTEXA elfEnumLogfontEx

  /* this+0xbc */ struct tagDESIGNVECTOR elfDesignVector

}

struct tagENUMLOGFONTEXDVW {
  /* this+0x0 */ struct tagENUMLOGFONTEXW elfEnumLogfontEx

  /* this+0x15c */ struct tagDESIGNVECTOR elfDesignVector

}

struct tagENUMLOGFONTEXW {
  /* this+0x0 */ struct tagLOGFONTW elfLogFont

  /* this+0x5c */ wchar_t[0x40] elfFullName
  /* this+0xdc */ wchar_t[0x20] elfStyle
  /* this+0x11c */ wchar_t[0x20] elfScript
}

struct tagENUMLOGFONTW {
  /* this+0x0 */ struct tagLOGFONTW elfLogFont

  /* this+0x5c */ wchar_t[0x40] elfFullName
  /* this+0xdc */ wchar_t[0x20] elfStyle
}

struct tagENUMTEXTMETRICA {
  /* this+0x0 */ struct tagNEWTEXTMETRICEXA etmNewTextMetricEx

  /* this+0x60 */ struct tagAXESLISTA etmAxesList

}

struct tagENUMTEXTMETRICW {
  /* this+0x0 */ struct tagNEWTEXTMETRICEXW etmNewTextMetricEx

  /* this+0x64 */ struct tagAXESLISTW etmAxesList

}

struct tagEVENTMSG {
  /* this+0x0 */ unsigned int message
  /* this+0x4 */ unsigned int paramL
  /* this+0x8 */ unsigned int paramH
  /* this+0xc */ unsigned long time
  /* this+0x10 */ struct HWND__ * hwnd
}

struct tagEXTLOGFONTA {
  /* this+0x0 */ struct tagLOGFONTA elfLogFont

  /* this+0x3c */ unsigned char[0x40] elfFullName
  /* this+0x7c */ unsigned char[0x20] elfStyle
  /* this+0x9c */ unsigned long elfVersion
  /* this+0xa0 */ unsigned long elfStyleSize
  /* this+0xa4 */ unsigned long elfMatch
  /* this+0xa8 */ unsigned long elfReserved
  /* this+0xac */ unsigned char[0x4] elfVendorId
  /* this+0xb0 */ unsigned long elfCulture
  /* this+0xb4 */ struct tagPANOSE elfPanose

}

struct tagEXTLOGFONTW {
  /* this+0x0 */ struct tagLOGFONTW elfLogFont

  /* this+0x5c */ wchar_t[0x40] elfFullName
  /* this+0xdc */ wchar_t[0x20] elfStyle
  /* this+0x11c */ unsigned long elfVersion
  /* this+0x120 */ unsigned long elfStyleSize
  /* this+0x124 */ unsigned long elfMatch
  /* this+0x128 */ unsigned long elfReserved
  /* this+0x12c */ unsigned char[0x4] elfVendorId
  /* this+0x130 */ unsigned long elfCulture
  /* this+0x134 */ struct tagPANOSE elfPanose

}

struct tagEXTLOGPEN {
  /* this+0x0 */ unsigned long elpPenStyle
  /* this+0x4 */ unsigned long elpWidth
  /* this+0x8 */ unsigned int elpBrushStyle
  /* this+0xc */ unsigned long elpColor
  /* this+0x10 */ unsigned long elpHatch
  /* this+0x14 */ unsigned long elpNumEntries
  /* this+0x18 */ unsigned long[0x1] elpStyleEntry
}

struct tagEXTLOGPEN32 {
  /* this+0x0 */ unsigned long elpPenStyle
  /* this+0x4 */ unsigned long elpWidth
  /* this+0x8 */ unsigned int elpBrushStyle
  /* this+0xc */ unsigned long elpColor
  /* this+0x10 */ unsigned long elpHatch
  /* this+0x14 */ unsigned long elpNumEntries
  /* this+0x18 */ unsigned long[0x1] elpStyleEntry
}

struct tagFILTERKEYS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iWaitMSec
  /* this+0xc */ unsigned long iDelayMSec
  /* this+0x10 */ unsigned long iRepeatMSec
  /* this+0x14 */ unsigned long iBounceMSec
}

struct tagFONTSIGNATURE {
  /* this+0x0 */ unsigned long[0x4] fsUsb
  /* this+0x10 */ unsigned long[0x2] fsCsb
}

struct tagGCP_RESULTSA {
  /* this+0x0 */ unsigned long lStructSize
  /* this+0x4 */ char * lpOutString
  /* this+0x8 */ unsigned int * lpOrder
  /* this+0xc */ int * lpDx
  /* this+0x10 */ int * lpCaretPos
  /* this+0x14 */ char * lpClass
  /* this+0x18 */ wchar_t * lpGlyphs
  /* this+0x1c */ unsigned int nGlyphs
  /* this+0x20 */ int nMaxFit
}

struct tagGCP_RESULTSW {
  /* this+0x0 */ unsigned long lStructSize
  /* this+0x4 */ wchar_t * lpOutString
  /* this+0x8 */ unsigned int * lpOrder
  /* this+0xc */ int * lpDx
  /* this+0x10 */ int * lpCaretPos
  /* this+0x14 */ char * lpClass
  /* this+0x18 */ wchar_t * lpGlyphs
  /* this+0x1c */ unsigned int nGlyphs
  /* this+0x20 */ int nMaxFit
}

struct tagGESTURECONFIG {
  /* this+0x0 */ unsigned long dwID
  /* this+0x4 */ unsigned long dwWant
  /* this+0x8 */ unsigned long dwBlock
}

struct tagGESTUREINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long dwID
  /* this+0xc */ struct HWND__ * hwndTarget
  /* this+0x10 */ struct tagPOINTS ptsLocation

  /* this+0x14 */ unsigned long dwInstanceID
  /* this+0x18 */ unsigned long dwSequenceID
  /* this+0x20 */ unsigned __int64 ullArguments
  /* this+0x28 */ unsigned int cbExtraArgs
}

struct tagGESTURENOTIFYSTRUCT {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ struct HWND__ * hwndTarget
  /* this+0xc */ struct tagPOINTS ptsLocation

  /* this+0x10 */ unsigned long dwInstanceID
}

struct tagGLYPHSET {
  /* this+0x0 */ unsigned long cbThis
  /* this+0x4 */ unsigned long flAccel
  /* this+0x8 */ unsigned long cGlyphsSupported
  /* this+0xc */ unsigned long cRanges
  /* this+0x10 */ struct tagWCRANGE[0x1] ranges
}

struct tagGUITHREADINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long flags
  /* this+0x8 */ struct HWND__ * hwndActive
  /* this+0xc */ struct HWND__ * hwndFocus
  /* this+0x10 */ struct HWND__ * hwndCapture
  /* this+0x14 */ struct HWND__ * hwndMenuOwner
  /* this+0x18 */ struct HWND__ * hwndMoveSize
  /* this+0x1c */ struct HWND__ * hwndCaret
  /* this+0x20 */ struct tagRECT rcCaret

}

struct tagHANDLETABLE {
  /* this+0x0 */ void *[0x1] objectHandle
}

struct tagHARDWAREHOOKSTRUCT {
  /* this+0x0 */ struct HWND__ * hwnd
  /* this+0x4 */ unsigned int message
  /* this+0x8 */ unsigned int wParam
  /* this+0xc */ long lParam
}

struct tagHARDWAREINPUT {
  /* this+0x0 */ unsigned long uMsg
  /* this+0x4 */ unsigned short wParamL
  /* this+0x6 */ unsigned short wParamH
}

struct tagHELPINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iContextType
  /* this+0x8 */ int iCtrlId
  /* this+0xc */ void * hItemHandle
  /* this+0x10 */ unsigned long dwContextId
  /* this+0x14 */ struct tagPOINT MousePos

}

struct tagHELPWININFOA {
  /* this+0x0 */ int wStructSize
  /* this+0x4 */ int x
  /* this+0x8 */ int y
  /* this+0xc */ int dx
  /* this+0x10 */ int dy
  /* this+0x14 */ int wMax
  /* this+0x18 */ char[0x2] rgchMember
}

struct tagHELPWININFOW {
  /* this+0x0 */ int wStructSize
  /* this+0x4 */ int x
  /* this+0x8 */ int y
  /* this+0xc */ int dx
  /* this+0x10 */ int dy
  /* this+0x14 */ int wMax
  /* this+0x18 */ wchar_t[0x2] rgchMember
}

struct tagHIGHCONTRASTA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ char * lpszDefaultScheme
}

struct tagHIGHCONTRASTW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ wchar_t * lpszDefaultScheme
}

struct tagHW_PROFILE_INFOA {
  /* this+0x0 */ unsigned long dwDockInfo
  /* this+0x4 */ char[0x27] szHwProfileGuid
  /* this+0x2b */ char[0x50] szHwProfileName
}

struct tagHW_PROFILE_INFOW {
  /* this+0x0 */ unsigned long dwDockInfo
  /* this+0x4 */ wchar_t[0x27] szHwProfileGuid
  /* this+0x52 */ wchar_t[0x50] szHwProfileName
}

struct tagICEXYZTRIPLE {
  /* this+0x0 */ struct tagCIEXYZ ciexyzRed

  /* this+0xc */ struct tagCIEXYZ ciexyzGreen

  /* this+0x18 */ struct tagCIEXYZ ciexyzBlue

}

struct tagICONMETRICSA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iHorzSpacing
  /* this+0x8 */ int iVertSpacing
  /* this+0xc */ int iTitleWrap
  /* this+0x10 */ struct tagLOGFONTA lfFont

}

struct tagICONMETRICSW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iHorzSpacing
  /* this+0x8 */ int iVertSpacing
  /* this+0xc */ int iTitleWrap
  /* this+0x10 */ struct tagLOGFONTW lfFont

}

struct tagIMECHARPOSITION {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwCharPos
  /* this+0x8 */ struct tagPOINT pt

  /* this+0x10 */ unsigned int cLineHeight
  /* this+0x14 */ struct tagRECT rcDocument

}

struct tagIMEMENUITEMINFOA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fType
  /* this+0x8 */ unsigned int fState
  /* this+0xc */ unsigned int wID
  /* this+0x10 */ struct HBITMAP__ * hbmpChecked
  /* this+0x14 */ struct HBITMAP__ * hbmpUnchecked
  /* this+0x18 */ unsigned long dwItemData
  /* this+0x1c */ char[0x50] szString
  /* this+0x6c */ struct HBITMAP__ * hbmpItem
}

struct tagIMEMENUITEMINFOW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fType
  /* this+0x8 */ unsigned int fState
  /* this+0xc */ unsigned int wID
  /* this+0x10 */ struct HBITMAP__ * hbmpChecked
  /* this+0x14 */ struct HBITMAP__ * hbmpUnchecked
  /* this+0x18 */ unsigned long dwItemData
  /* this+0x1c */ wchar_t[0x50] szString
  /* this+0xbc */ struct HBITMAP__ * hbmpItem
}

struct tagINPUT {
  /* this+0x0 */ unsigned long type
  /* this+0x4 */ struct tagMOUSEINPUT mi

  /* this+0x4 */ struct tagKEYBDINPUT ki

  /* this+0x4 */ struct tagHARDWAREINPUT hi

}

struct tagJOYCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ char[0x20] szPname
  /* this+0x24 */ unsigned int wXmin
  /* this+0x28 */ unsigned int wXmax
  /* this+0x2c */ unsigned int wYmin
  /* this+0x30 */ unsigned int wYmax
  /* this+0x34 */ unsigned int wZmin
  /* this+0x38 */ unsigned int wZmax
  /* this+0x3c */ unsigned int wNumButtons
  /* this+0x40 */ unsigned int wPeriodMin
  /* this+0x44 */ unsigned int wPeriodMax
  /* this+0x48 */ unsigned int wRmin
  /* this+0x4c */ unsigned int wRmax
  /* this+0x50 */ unsigned int wUmin
  /* this+0x54 */ unsigned int wUmax
  /* this+0x58 */ unsigned int wVmin
  /* this+0x5c */ unsigned int wVmax
  /* this+0x60 */ unsigned int wCaps
  /* this+0x64 */ unsigned int wMaxAxes
  /* this+0x68 */ unsigned int wNumAxes
  /* this+0x6c */ unsigned int wMaxButtons
  /* this+0x70 */ char[0x20] szRegKey
  /* this+0x90 */ char[0x104] szOEMVxD
  /* this+0x194 */ struct _GUID ManufacturerGuid

  /* this+0x1a4 */ struct _GUID ProductGuid

  /* this+0x1b4 */ struct _GUID NameGuid

}

struct tagJOYCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ wchar_t[0x20] szPname
  /* this+0x44 */ unsigned int wXmin
  /* this+0x48 */ unsigned int wXmax
  /* this+0x4c */ unsigned int wYmin
  /* this+0x50 */ unsigned int wYmax
  /* this+0x54 */ unsigned int wZmin
  /* this+0x58 */ unsigned int wZmax
  /* this+0x5c */ unsigned int wNumButtons
  /* this+0x60 */ unsigned int wPeriodMin
  /* this+0x64 */ unsigned int wPeriodMax
  /* this+0x68 */ unsigned int wRmin
  /* this+0x6c */ unsigned int wRmax
  /* this+0x70 */ unsigned int wUmin
  /* this+0x74 */ unsigned int wUmax
  /* this+0x78 */ unsigned int wVmin
  /* this+0x7c */ unsigned int wVmax
  /* this+0x80 */ unsigned int wCaps
  /* this+0x84 */ unsigned int wMaxAxes
  /* this+0x88 */ unsigned int wNumAxes
  /* this+0x8c */ unsigned int wMaxButtons
  /* this+0x90 */ wchar_t[0x20] szRegKey
  /* this+0xd0 */ wchar_t[0x104] szOEMVxD
  /* this+0x2d8 */ struct _GUID ManufacturerGuid

  /* this+0x2e8 */ struct _GUID ProductGuid

  /* this+0x2f8 */ struct _GUID NameGuid

}

struct tagJOYCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ char[0x20] szPname
  /* this+0x24 */ unsigned int wXmin
  /* this+0x28 */ unsigned int wXmax
  /* this+0x2c */ unsigned int wYmin
  /* this+0x30 */ unsigned int wYmax
  /* this+0x34 */ unsigned int wZmin
  /* this+0x38 */ unsigned int wZmax
  /* this+0x3c */ unsigned int wNumButtons
  /* this+0x40 */ unsigned int wPeriodMin
  /* this+0x44 */ unsigned int wPeriodMax
  /* this+0x48 */ unsigned int wRmin
  /* this+0x4c */ unsigned int wRmax
  /* this+0x50 */ unsigned int wUmin
  /* this+0x54 */ unsigned int wUmax
  /* this+0x58 */ unsigned int wVmin
  /* this+0x5c */ unsigned int wVmax
  /* this+0x60 */ unsigned int wCaps
  /* this+0x64 */ unsigned int wMaxAxes
  /* this+0x68 */ unsigned int wNumAxes
  /* this+0x6c */ unsigned int wMaxButtons
  /* this+0x70 */ char[0x20] szRegKey
  /* this+0x90 */ char[0x104] szOEMVxD
}

struct tagJOYCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ wchar_t[0x20] szPname
  /* this+0x44 */ unsigned int wXmin
  /* this+0x48 */ unsigned int wXmax
  /* this+0x4c */ unsigned int wYmin
  /* this+0x50 */ unsigned int wYmax
  /* this+0x54 */ unsigned int wZmin
  /* this+0x58 */ unsigned int wZmax
  /* this+0x5c */ unsigned int wNumButtons
  /* this+0x60 */ unsigned int wPeriodMin
  /* this+0x64 */ unsigned int wPeriodMax
  /* this+0x68 */ unsigned int wRmin
  /* this+0x6c */ unsigned int wRmax
  /* this+0x70 */ unsigned int wUmin
  /* this+0x74 */ unsigned int wUmax
  /* this+0x78 */ unsigned int wVmin
  /* this+0x7c */ unsigned int wVmax
  /* this+0x80 */ unsigned int wCaps
  /* this+0x84 */ unsigned int wMaxAxes
  /* this+0x88 */ unsigned int wNumAxes
  /* this+0x8c */ unsigned int wMaxButtons
  /* this+0x90 */ wchar_t[0x20] szRegKey
  /* this+0xd0 */ wchar_t[0x104] szOEMVxD
}

struct tagKBDLLHOOKSTRUCT {
  /* this+0x0 */ unsigned long vkCode
  /* this+0x4 */ unsigned long scanCode
  /* this+0x8 */ unsigned long flags
  /* this+0xc */ unsigned long time
  /* this+0x10 */ unsigned long dwExtraInfo
}

struct tagKERNINGPAIR {
  /* this+0x0 */ unsigned short wFirst
  /* this+0x2 */ unsigned short wSecond
  /* this+0x4 */ int iKernAmount
}

struct tagKEYBDINPUT {
  /* this+0x0 */ unsigned short wVk
  /* this+0x2 */ unsigned short wScan
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long time
  /* this+0xc */ unsigned long dwExtraInfo
}

struct tagLASTINPUTINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwTime
}

struct tagLAYERPLANEDESCRIPTOR {
  /* this+0x0 */ unsigned short nSize
  /* this+0x2 */ unsigned short nVersion
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned char iPixelType
  /* this+0x9 */ unsigned char cColorBits
  /* this+0xa */ unsigned char cRedBits
  /* this+0xb */ unsigned char cRedShift
  /* this+0xc */ unsigned char cGreenBits
  /* this+0xd */ unsigned char cGreenShift
  /* this+0xe */ unsigned char cBlueBits
  /* this+0xf */ unsigned char cBlueShift
  /* this+0x10 */ unsigned char cAlphaBits
  /* this+0x11 */ unsigned char cAlphaShift
  /* this+0x12 */ unsigned char cAccumBits
  /* this+0x13 */ unsigned char cAccumRedBits
  /* this+0x14 */ unsigned char cAccumGreenBits
  /* this+0x15 */ unsigned char cAccumBlueBits
  /* this+0x16 */ unsigned char cAccumAlphaBits
  /* this+0x17 */ unsigned char cDepthBits
  /* this+0x18 */ unsigned char cStencilBits
  /* this+0x19 */ unsigned char cAuxBuffers
  /* this+0x1a */ unsigned char iLayerPlane
  /* this+0x1b */ unsigned char bReserved
  /* this+0x1c */ unsigned long crTransparent
}

struct tagLC_ID {
  /* this+0x0 */ unsigned short wLanguage
  /* this+0x2 */ unsigned short wCountry
  /* this+0x4 */ unsigned short wCodePage
}

struct tagLC_STRINGS {
  /* this+0x0 */ char[0x40] szLanguage
  /* this+0x40 */ char[0x40] szCountry
  /* this+0x80 */ char[0x10] szCodePage
}

struct tagLOCALESIGNATURE {
  /* this+0x0 */ unsigned long[0x4] lsUsb
  /* this+0x10 */ unsigned long[0x2] lsCsbDefault
  /* this+0x18 */ unsigned long[0x2] lsCsbSupported
}

struct tagLOCALETAB {
  /* this+0x0 */ char * szName
  /* this+0x4 */ char[0x4] chAbbrev
}

struct tagLOGBRUSH {
  /* this+0x0 */ unsigned int lbStyle
  /* this+0x4 */ unsigned long lbColor
  /* this+0x8 */ unsigned long lbHatch
}

struct tagLOGBRUSH32 {
  /* this+0x0 */ unsigned int lbStyle
  /* this+0x4 */ unsigned long lbColor
  /* this+0x8 */ unsigned long lbHatch
}

struct tagLOGCOLORSPACEA {
  /* this+0x0 */ unsigned long lcsSignature
  /* this+0x4 */ unsigned long lcsVersion
  /* this+0x8 */ unsigned long lcsSize
  /* this+0xc */ long lcsCSType
  /* this+0x10 */ long lcsIntent
  /* this+0x14 */ struct tagICEXYZTRIPLE lcsEndpoints

  /* this+0x38 */ unsigned long lcsGammaRed
  /* this+0x3c */ unsigned long lcsGammaGreen
  /* this+0x40 */ unsigned long lcsGammaBlue
  /* this+0x44 */ char[0x104] lcsFilename
}

struct tagLOGCOLORSPACEW {
  /* this+0x0 */ unsigned long lcsSignature
  /* this+0x4 */ unsigned long lcsVersion
  /* this+0x8 */ unsigned long lcsSize
  /* this+0xc */ long lcsCSType
  /* this+0x10 */ long lcsIntent
  /* this+0x14 */ struct tagICEXYZTRIPLE lcsEndpoints

  /* this+0x38 */ unsigned long lcsGammaRed
  /* this+0x3c */ unsigned long lcsGammaGreen
  /* this+0x40 */ unsigned long lcsGammaBlue
  /* this+0x44 */ wchar_t[0x104] lcsFilename
}

struct tagLOGFONTA {
  /* this+0x0 */ long lfHeight
  /* this+0x4 */ long lfWidth
  /* this+0x8 */ long lfEscapement
  /* this+0xc */ long lfOrientation
  /* this+0x10 */ long lfWeight
  /* this+0x14 */ unsigned char lfItalic
  /* this+0x15 */ unsigned char lfUnderline
  /* this+0x16 */ unsigned char lfStrikeOut
  /* this+0x17 */ unsigned char lfCharSet
  /* this+0x18 */ unsigned char lfOutPrecision
  /* this+0x19 */ unsigned char lfClipPrecision
  /* this+0x1a */ unsigned char lfQuality
  /* this+0x1b */ unsigned char lfPitchAndFamily
  /* this+0x1c */ char[0x20] lfFaceName
}

struct tagLOGFONTW {
  /* this+0x0 */ long lfHeight
  /* this+0x4 */ long lfWidth
  /* this+0x8 */ long lfEscapement
  /* this+0xc */ long lfOrientation
  /* this+0x10 */ long lfWeight
  /* this+0x14 */ unsigned char lfItalic
  /* this+0x15 */ unsigned char lfUnderline
  /* this+0x16 */ unsigned char lfStrikeOut
  /* this+0x17 */ unsigned char lfCharSet
  /* this+0x18 */ unsigned char lfOutPrecision
  /* this+0x19 */ unsigned char lfClipPrecision
  /* this+0x1a */ unsigned char lfQuality
  /* this+0x1b */ unsigned char lfPitchAndFamily
  /* this+0x1c */ wchar_t[0x20] lfFaceName
}

struct tagLOGPALETTE {
  /* this+0x0 */ unsigned short palVersion
  /* this+0x2 */ unsigned short palNumEntries
  /* this+0x4 */ struct tagPALETTEENTRY[0x1] palPalEntry
}

struct tagLOGPEN {
  /* this+0x0 */ unsigned int lopnStyle
  /* this+0x4 */ struct tagPOINT lopnWidth

  /* this+0xc */ unsigned long lopnColor
}

struct tagMCI_ANIM_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const char * lpstrDeviceType
  /* this+0xc */ const char * lpstrElementName
  /* this+0x10 */ const char * lpstrAlias
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ struct HWND__ * hWndParent
}

struct tagMCI_ANIM_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const wchar_t * lpstrDeviceType
  /* this+0xc */ const wchar_t * lpstrElementName
  /* this+0x10 */ const wchar_t * lpstrAlias
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ struct HWND__ * hWndParent
}

struct tagMCI_ANIM_PLAY_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
  /* this+0xc */ unsigned long dwSpeed
}

struct tagMCI_ANIM_RECT_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct tagRECT rc

}

struct tagMCI_ANIM_STEP_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrames
}

struct tagMCI_ANIM_UPDATE_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct tagRECT rc

  /* this+0x14 */ struct HDC__ * hDC
}

struct tagMCI_ANIM_WINDOW_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct HWND__ * hWnd
  /* this+0x8 */ unsigned int nCmdShow
  /* this+0xc */ const char * lpstrText
}

struct tagMCI_ANIM_WINDOW_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct HWND__ * hWnd
  /* this+0x8 */ unsigned int nCmdShow
  /* this+0xc */ const wchar_t * lpstrText
}

struct tagMCI_BREAK_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ int nVirtKey
  /* this+0x8 */ struct HWND__ * hwndBreak
}

struct tagMCI_GENERIC_PARMS {
  /* this+0x0 */ unsigned long dwCallback
}

struct tagMCI_GETDEVCAPS_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwReturn
  /* this+0x8 */ unsigned long dwItem
}

struct tagMCI_INFO_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ char * lpstrReturn
  /* this+0x8 */ unsigned long dwRetSize
}

struct tagMCI_INFO_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ wchar_t * lpstrReturn
  /* this+0x8 */ unsigned long dwRetSize
}

struct tagMCI_LOAD_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpfilename
}

struct tagMCI_LOAD_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpfilename
}

struct tagMCI_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const char * lpstrDeviceType
  /* this+0xc */ const char * lpstrElementName
  /* this+0x10 */ const char * lpstrAlias
}

struct tagMCI_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const wchar_t * lpstrDeviceType
  /* this+0xc */ const wchar_t * lpstrElementName
  /* this+0x10 */ const wchar_t * lpstrAlias
}

struct tagMCI_OVLY_LOAD_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpfilename
  /* this+0x8 */ struct tagRECT rc

}

struct tagMCI_OVLY_LOAD_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpfilename
  /* this+0x8 */ struct tagRECT rc

}

struct tagMCI_OVLY_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const char * lpstrDeviceType
  /* this+0xc */ const char * lpstrElementName
  /* this+0x10 */ const char * lpstrAlias
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ struct HWND__ * hWndParent
}

struct tagMCI_OVLY_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const wchar_t * lpstrDeviceType
  /* this+0xc */ const wchar_t * lpstrElementName
  /* this+0x10 */ const wchar_t * lpstrAlias
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ struct HWND__ * hWndParent
}

struct tagMCI_OVLY_RECT_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct tagRECT rc

}

struct tagMCI_OVLY_SAVE_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpfilename
  /* this+0x8 */ struct tagRECT rc

}

struct tagMCI_OVLY_SAVE_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpfilename
  /* this+0x8 */ struct tagRECT rc

}

struct tagMCI_OVLY_WINDOW_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct HWND__ * hWnd
  /* this+0x8 */ unsigned int nCmdShow
  /* this+0xc */ const char * lpstrText
}

struct tagMCI_OVLY_WINDOW_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ struct HWND__ * hWnd
  /* this+0x8 */ unsigned int nCmdShow
  /* this+0xc */ const wchar_t * lpstrText
}

struct tagMCI_PLAY_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
}

struct tagMCI_RECORD_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
}

struct tagMCI_SAVE_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpfilename
}

struct tagMCI_SAVE_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpfilename
}

struct tagMCI_SEEK_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwTo
}

struct tagMCI_SEQ_SET_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwTimeFormat
  /* this+0x8 */ unsigned long dwAudio
  /* this+0xc */ unsigned long dwTempo
  /* this+0x10 */ unsigned long dwPort
  /* this+0x14 */ unsigned long dwSlave
  /* this+0x18 */ unsigned long dwMaster
  /* this+0x1c */ unsigned long dwOffset
}

struct tagMCI_SET_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwTimeFormat
  /* this+0x8 */ unsigned long dwAudio
}

struct tagMCI_STATUS_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwReturn
  /* this+0x8 */ unsigned long dwItem
  /* this+0xc */ unsigned long dwTrack
}

struct tagMCI_SYSINFO_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ char * lpstrReturn
  /* this+0x8 */ unsigned long dwRetSize
  /* this+0xc */ unsigned long dwNumber
  /* this+0x10 */ unsigned int wDeviceType
}

struct tagMCI_SYSINFO_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ wchar_t * lpstrReturn
  /* this+0x8 */ unsigned long dwRetSize
  /* this+0xc */ unsigned long dwNumber
  /* this+0x10 */ unsigned int wDeviceType
}

struct tagMCI_VD_ESCAPE_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const char * lpstrCommand
}

struct tagMCI_VD_ESCAPE_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ const wchar_t * lpstrCommand
}

struct tagMCI_VD_PLAY_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
  /* this+0xc */ unsigned long dwSpeed
}

struct tagMCI_VD_STEP_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrames
}

struct tagMCI_WAVE_DELETE_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwFrom
  /* this+0x8 */ unsigned long dwTo
}

struct tagMCI_WAVE_OPEN_PARMSA {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const char * lpstrDeviceType
  /* this+0xc */ const char * lpstrElementName
  /* this+0x10 */ const char * lpstrAlias
  /* this+0x14 */ unsigned long dwBufferSeconds
}

struct tagMCI_WAVE_OPEN_PARMSW {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned int wDeviceID
  /* this+0x8 */ const wchar_t * lpstrDeviceType
  /* this+0xc */ const wchar_t * lpstrElementName
  /* this+0x10 */ const wchar_t * lpstrAlias
  /* this+0x14 */ unsigned long dwBufferSeconds
}

struct tagMCI_WAVE_SET_PARMS {
  /* this+0x0 */ unsigned long dwCallback
  /* this+0x4 */ unsigned long dwTimeFormat
  /* this+0x8 */ unsigned long dwAudio
  /* this+0xc */ unsigned int wInput
  /* this+0x10 */ unsigned int wOutput
  /* this+0x14 */ unsigned short wFormatTag
  /* this+0x16 */ unsigned short wReserved2
  /* this+0x18 */ unsigned short nChannels
  /* this+0x1a */ unsigned short wReserved3
  /* this+0x1c */ unsigned long nSamplesPerSec
  /* this+0x20 */ unsigned long nAvgBytesPerSec
  /* this+0x24 */ unsigned short nBlockAlign
  /* this+0x26 */ unsigned short wReserved4
  /* this+0x28 */ unsigned short wBitsPerSample
  /* this+0x2a */ unsigned short wReserved5
}

struct tagMDICREATESTRUCTA {
  /* this+0x0 */ const char * szClass
  /* this+0x4 */ const char * szTitle
  /* this+0x8 */ void * hOwner
  /* this+0xc */ int x
  /* this+0x10 */ int y
  /* this+0x14 */ int cx
  /* this+0x18 */ int cy
  /* this+0x1c */ unsigned long style
  /* this+0x20 */ long lParam
}

struct tagMDICREATESTRUCTW {
  /* this+0x0 */ const wchar_t * szClass
  /* this+0x4 */ const wchar_t * szTitle
  /* this+0x8 */ void * hOwner
  /* this+0xc */ int x
  /* this+0x10 */ int y
  /* this+0x14 */ int cx
  /* this+0x18 */ int cy
  /* this+0x1c */ unsigned long style
  /* this+0x20 */ long lParam
}

struct tagMDINEXTMENU {
  /* this+0x0 */ struct HMENU__ * hmenuIn
  /* this+0x4 */ struct HMENU__ * hmenuNext
  /* this+0x8 */ struct HWND__ * hwndNext
}

struct tagMEASUREITEMSTRUCT {
  /* this+0x0 */ unsigned int CtlType
  /* this+0x4 */ unsigned int CtlID
  /* this+0x8 */ unsigned int itemID
  /* this+0xc */ unsigned int itemWidth
  /* this+0x10 */ unsigned int itemHeight
  /* this+0x14 */ unsigned long itemData
}

struct tagMENUBARINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcBar

  /* this+0x14 */ struct HMENU__ * hMenu
  /* this+0x18 */ struct HWND__ * hwndMenu
  /* this(bf)+0x1c:0x0 len(0x1) */ int fBarFocused
  /* this(bf)+0x1c:0x1 len(0x1) */ int fFocused
}

struct tagMENUGETOBJECTINFO {
  /* this+0x0 */ unsigned long dwFlags
  /* this+0x4 */ unsigned int uPos
  /* this+0x8 */ struct HMENU__ * hmenu
  /* this+0xc */ void * riid
  /* this+0x10 */ void * pvObj
}

struct tagMENUINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long fMask
  /* this+0x8 */ unsigned long dwStyle
  /* this+0xc */ unsigned int cyMax
  /* this+0x10 */ struct HBRUSH__ * hbrBack
  /* this+0x14 */ unsigned long dwContextHelpID
  /* this+0x18 */ unsigned long dwMenuData
}

struct tagMENUITEMINFOA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fMask
  /* this+0x8 */ unsigned int fType
  /* this+0xc */ unsigned int fState
  /* this+0x10 */ unsigned int wID
  /* this+0x14 */ struct HMENU__ * hSubMenu
  /* this+0x18 */ struct HBITMAP__ * hbmpChecked
  /* this+0x1c */ struct HBITMAP__ * hbmpUnchecked
  /* this+0x20 */ unsigned long dwItemData
  /* this+0x24 */ char * dwTypeData
  /* this+0x28 */ unsigned int cch
  /* this+0x2c */ struct HBITMAP__ * hbmpItem
}

struct tagMENUITEMINFOW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fMask
  /* this+0x8 */ unsigned int fType
  /* this+0xc */ unsigned int fState
  /* this+0x10 */ unsigned int wID
  /* this+0x14 */ struct HMENU__ * hSubMenu
  /* this+0x18 */ struct HBITMAP__ * hbmpChecked
  /* this+0x1c */ struct HBITMAP__ * hbmpUnchecked
  /* this+0x20 */ unsigned long dwItemData
  /* this+0x24 */ wchar_t * dwTypeData
  /* this+0x28 */ unsigned int cch
  /* this+0x2c */ struct HBITMAP__ * hbmpItem
}

struct tagMETAFILEPICT {
  /* this+0x0 */ long mm
  /* this+0x4 */ long xExt
  /* this+0x8 */ long yExt
  /* this+0xc */ struct HMETAFILE__ * hMF
}

struct tagMETAHEADER {
  /* this+0x0 */ unsigned short mtType
  /* this+0x2 */ unsigned short mtHeaderSize
  /* this+0x4 */ unsigned short mtVersion
  /* this+0x6 */ unsigned long mtSize
  /* this+0xa */ unsigned short mtNoObjects
  /* this+0xc */ unsigned long mtMaxRecord
  /* this+0x10 */ unsigned short mtNoParameters
}

struct tagMETARECORD {
  /* this+0x0 */ unsigned long rdSize
  /* this+0x4 */ unsigned short rdFunction
  /* this+0x6 */ unsigned short[0x1] rdParm
}

struct tagMIDIINCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwSupport
  /* this+0x2c */ struct _GUID ManufacturerGuid

  /* this+0x3c */ struct _GUID ProductGuid

  /* this+0x4c */ struct _GUID NameGuid

}

struct tagMIDIINCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwSupport
  /* this+0x4c */ struct _GUID ManufacturerGuid

  /* this+0x5c */ struct _GUID ProductGuid

  /* this+0x6c */ struct _GUID NameGuid

}

struct tagMIDIINCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwSupport
}

struct tagMIDIINCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwSupport
}

struct tagMIDIOUTCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned short wTechnology
  /* this+0x2a */ unsigned short wVoices
  /* this+0x2c */ unsigned short wNotes
  /* this+0x2e */ unsigned short wChannelMask
  /* this+0x30 */ unsigned long dwSupport
  /* this+0x34 */ struct _GUID ManufacturerGuid

  /* this+0x44 */ struct _GUID ProductGuid

  /* this+0x54 */ struct _GUID NameGuid

}

struct tagMIDIOUTCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned short wTechnology
  /* this+0x4a */ unsigned short wVoices
  /* this+0x4c */ unsigned short wNotes
  /* this+0x4e */ unsigned short wChannelMask
  /* this+0x50 */ unsigned long dwSupport
  /* this+0x54 */ struct _GUID ManufacturerGuid

  /* this+0x64 */ struct _GUID ProductGuid

  /* this+0x74 */ struct _GUID NameGuid

}

struct tagMIDIOUTCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned short wTechnology
  /* this+0x2a */ unsigned short wVoices
  /* this+0x2c */ unsigned short wNotes
  /* this+0x2e */ unsigned short wChannelMask
  /* this+0x30 */ unsigned long dwSupport
}

struct tagMIDIOUTCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned short wTechnology
  /* this+0x4a */ unsigned short wVoices
  /* this+0x4c */ unsigned short wNotes
  /* this+0x4e */ unsigned short wChannelMask
  /* this+0x50 */ unsigned long dwSupport
}

struct tagMINIMIZEDMETRICS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iWidth
  /* this+0x8 */ int iHorzGap
  /* this+0xc */ int iVertGap
  /* this+0x10 */ int iArrange
}

struct tagMINMAXINFO {
  /* this+0x0 */ struct tagPOINT ptReserved

  /* this+0x8 */ struct tagPOINT ptMaxSize

  /* this+0x10 */ struct tagPOINT ptMaxPosition

  /* this+0x18 */ struct tagPOINT ptMinTrackSize

  /* this+0x20 */ struct tagPOINT ptMaxTrackSize

}

struct tagMIXERCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long fdwSupport
  /* this+0x2c */ unsigned long cDestinations
  /* this+0x30 */ struct _GUID ManufacturerGuid

  /* this+0x40 */ struct _GUID ProductGuid

  /* this+0x50 */ struct _GUID NameGuid

}

struct tagMIXERCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long fdwSupport
  /* this+0x4c */ unsigned long cDestinations
  /* this+0x50 */ struct _GUID ManufacturerGuid

  /* this+0x60 */ struct _GUID ProductGuid

  /* this+0x70 */ struct _GUID NameGuid

}

struct tagMIXERCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long fdwSupport
  /* this+0x2c */ unsigned long cDestinations
}

struct tagMIXERCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long fdwSupport
  /* this+0x4c */ unsigned long cDestinations
}

struct tagMIXERCONTROLA {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long dwControlType
  /* this+0xc */ unsigned long fdwControl
  /* this+0x10 */ unsigned long cMultipleItems
  /* this+0x14 */ char[0x10] szShortName
  /* this+0x24 */ char[0x40] szName
    /* this+0x64 */ union tagMIXERCONTROLA::<unnamed-type-Bounds> Bounds

    /* this+0x7c */ union tagMIXERCONTROLA::<unnamed-type-Metrics> Metrics

}

union tagMIXERCONTROLA::<unnamed-type-Bounds> {
  /* this+0x0 */ long lMinimum
  /* this+0x4 */ long lMaximum
  /* this+0x0 */ unsigned long dwMinimum
  /* this+0x4 */ unsigned long dwMaximum
  /* this+0x0 */ unsigned long[0x6] dwReserved
}

union tagMIXERCONTROLA::<unnamed-type-Metrics> {
  /* this+0x0 */ unsigned long cSteps
  /* this+0x0 */ unsigned long cbCustomData
  /* this+0x0 */ unsigned long[0x6] dwReserved
}

struct tagMIXERCONTROLDETAILS_LISTTEXTA {
  /* this+0x0 */ unsigned long dwParam1
  /* this+0x4 */ unsigned long dwParam2
  /* this+0x8 */ char[0x40] szName
}

struct tagMIXERCONTROLDETAILS_LISTTEXTW {
  /* this+0x0 */ unsigned long dwParam1
  /* this+0x4 */ unsigned long dwParam2
  /* this+0x8 */ wchar_t[0x40] szName
}

struct tagMIXERCONTROLW {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long dwControlType
  /* this+0xc */ unsigned long fdwControl
  /* this+0x10 */ unsigned long cMultipleItems
  /* this+0x14 */ wchar_t[0x10] szShortName
  /* this+0x34 */ wchar_t[0x40] szName
    /* this+0xb4 */ union tagMIXERCONTROLW::<unnamed-type-Bounds> Bounds

    /* this+0xcc */ union tagMIXERCONTROLW::<unnamed-type-Metrics> Metrics

}

union tagMIXERCONTROLW::<unnamed-type-Bounds> {
  /* this+0x0 */ long lMinimum
  /* this+0x4 */ long lMaximum
  /* this+0x0 */ unsigned long dwMinimum
  /* this+0x4 */ unsigned long dwMaximum
  /* this+0x0 */ unsigned long[0x6] dwReserved
}

union tagMIXERCONTROLW::<unnamed-type-Metrics> {
  /* this+0x0 */ unsigned long cSteps
  /* this+0x0 */ unsigned long cbCustomData
  /* this+0x0 */ unsigned long[0x6] dwReserved
}

struct tagMIXERLINEA {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwDestination
  /* this+0x8 */ unsigned long dwSource
  /* this+0xc */ unsigned long dwLineID
  /* this+0x10 */ unsigned long fdwLine
  /* this+0x14 */ unsigned long dwUser
  /* this+0x18 */ unsigned long dwComponentType
  /* this+0x1c */ unsigned long cChannels
  /* this+0x20 */ unsigned long cConnections
  /* this+0x24 */ unsigned long cControls
  /* this+0x28 */ char[0x10] szShortName
  /* this+0x38 */ char[0x40] szName
    /* this+0x78 */ struct tagMIXERLINEA::<unnamed-type-Target> Target

}

struct tagMIXERLINEA::<unnamed-type-Target> {
  /* this+0x0 */ unsigned long dwType
  /* this+0x4 */ unsigned long dwDeviceID
  /* this+0x8 */ unsigned short wMid
  /* this+0xa */ unsigned short wPid
  /* this+0xc */ unsigned int vDriverVersion
  /* this+0x10 */ char[0x20] szPname
}

struct tagMIXERLINECONTROLSA {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwLineID
  /* this+0x8 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long dwControlType
  /* this+0xc */ unsigned long cControls
  /* this+0x10 */ unsigned long cbmxctrl
  /* this+0x14 */ struct tagMIXERCONTROLA * pamxctrl
}

struct tagMIXERLINECONTROLSW {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwLineID
  /* this+0x8 */ unsigned long dwControlID
  /* this+0x8 */ unsigned long dwControlType
  /* this+0xc */ unsigned long cControls
  /* this+0x10 */ unsigned long cbmxctrl
  /* this+0x14 */ struct tagMIXERCONTROLW * pamxctrl
}

struct tagMIXERLINEW {
  /* this+0x0 */ unsigned long cbStruct
  /* this+0x4 */ unsigned long dwDestination
  /* this+0x8 */ unsigned long dwSource
  /* this+0xc */ unsigned long dwLineID
  /* this+0x10 */ unsigned long fdwLine
  /* this+0x14 */ unsigned long dwUser
  /* this+0x18 */ unsigned long dwComponentType
  /* this+0x1c */ unsigned long cChannels
  /* this+0x20 */ unsigned long cConnections
  /* this+0x24 */ unsigned long cControls
  /* this+0x28 */ wchar_t[0x10] szShortName
  /* this+0x48 */ wchar_t[0x40] szName
    /* this+0xc8 */ struct tagMIXERLINEW::<unnamed-type-Target> Target

}

struct tagMIXERLINEW::<unnamed-type-Target> {
  /* this+0x0 */ unsigned long dwType
  /* this+0x4 */ unsigned long dwDeviceID
  /* this+0x8 */ unsigned short wMid
  /* this+0xa */ unsigned short wPid
  /* this+0xc */ unsigned int vDriverVersion
  /* this+0x10 */ wchar_t[0x20] szPname
}

struct tagMONITORINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcMonitor

  /* this+0x14 */ struct tagRECT rcWork

  /* this+0x24 */ unsigned long dwFlags
}

struct tagMONITORINFOEXA {
  tagMONITORINFO, offset = 0x0

  /* this+0x28 */ char[0x20] szDevice
}

struct tagMONITORINFOEXW {
  tagMONITORINFO, offset = 0x0

  /* this+0x28 */ wchar_t[0x20] szDevice
}

struct tagMOUSEHOOKSTRUCT {
  /* this+0x0 */ struct tagPOINT pt

  /* this+0x8 */ struct HWND__ * hwnd
  /* this+0xc */ unsigned int wHitTestCode
  /* this+0x10 */ unsigned long dwExtraInfo
}

struct tagMOUSEHOOKSTRUCTEX {
  tagMOUSEHOOKSTRUCT, offset = 0x0

  /* this+0x14 */ unsigned long mouseData
}

struct tagMOUSEINPUT {
  /* this+0x0 */ long dx
  /* this+0x4 */ long dy
  /* this+0x8 */ unsigned long mouseData
  /* this+0xc */ unsigned long dwFlags
  /* this+0x10 */ unsigned long time
  /* this+0x14 */ unsigned long dwExtraInfo
}

struct tagMOUSEKEYS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iMaxSpeed
  /* this+0xc */ unsigned long iTimeToMaxSpeed
  /* this+0x10 */ unsigned long iCtrlSpeed
  /* this+0x14 */ unsigned long dwReserved1
  /* this+0x18 */ unsigned long dwReserved2
}

struct tagMOUSEMOVEPOINT {
  /* this+0x0 */ int x
  /* this+0x4 */ int y
  /* this+0x8 */ unsigned long time
  /* this+0xc */ unsigned long dwExtraInfo
}

struct tagMSG {
  /* this+0x0 */ struct HWND__ * hwnd
  /* this+0x4 */ unsigned int message
  /* this+0x8 */ unsigned int wParam
  /* this+0xc */ long lParam
  /* this+0x10 */ unsigned long time
  /* this+0x14 */ struct tagPOINT pt

}

struct tagMSGBOXPARAMSA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ struct HINSTANCE__ * hInstance
  /* this+0xc */ const char * lpszText
  /* this+0x10 */ const char * lpszCaption
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ const char * lpszIcon
  /* this+0x1c */ unsigned long dwContextHelpId
  /* this+0x20 */ function  * lpfnMsgBoxCallback
  /* this+0x24 */ unsigned long dwLanguageId
}

struct tagMSGBOXPARAMSW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct HWND__ * hwndOwner
  /* this+0x8 */ struct HINSTANCE__ * hInstance
  /* this+0xc */ const wchar_t * lpszText
  /* this+0x10 */ const wchar_t * lpszCaption
  /* this+0x14 */ unsigned long dwStyle
  /* this+0x18 */ const wchar_t * lpszIcon
  /* this+0x1c */ unsigned long dwContextHelpId
  /* this+0x20 */ function  * lpfnMsgBoxCallback
  /* this+0x24 */ unsigned long dwLanguageId
}

struct tagMSLLHOOKSTRUCT {
  /* this+0x0 */ struct tagPOINT pt

  /* this+0x8 */ unsigned long mouseData
  /* this+0xc */ unsigned long flags
  /* this+0x10 */ unsigned long time
  /* this+0x14 */ unsigned long dwExtraInfo
}

struct tagMULTIKEYHELPA {
  /* this+0x0 */ unsigned long mkSize
  /* this+0x4 */ char mkKeylist
  /* this+0x5 */ char[0x1] szKeyphrase
}

struct tagMULTIKEYHELPW {
  /* this+0x0 */ unsigned long mkSize
  /* this+0x4 */ wchar_t mkKeylist
  /* this+0x6 */ wchar_t[0x1] szKeyphrase
}

struct tagNCCALCSIZE_PARAMS {
  /* this+0x0 */ struct tagRECT[0x3] rgrc
  /* this+0x30 */ struct tagWINDOWPOS * lppos
}

struct tagNEWTEXTMETRICA {
  /* this+0x0 */ long tmHeight
  /* this+0x4 */ long tmAscent
  /* this+0x8 */ long tmDescent
  /* this+0xc */ long tmInternalLeading
  /* this+0x10 */ long tmExternalLeading
  /* this+0x14 */ long tmAveCharWidth
  /* this+0x18 */ long tmMaxCharWidth
  /* this+0x1c */ long tmWeight
  /* this+0x20 */ long tmOverhang
  /* this+0x24 */ long tmDigitizedAspectX
  /* this+0x28 */ long tmDigitizedAspectY
  /* this+0x2c */ unsigned char tmFirstChar
  /* this+0x2d */ unsigned char tmLastChar
  /* this+0x2e */ unsigned char tmDefaultChar
  /* this+0x2f */ unsigned char tmBreakChar
  /* this+0x30 */ unsigned char tmItalic
  /* this+0x31 */ unsigned char tmUnderlined
  /* this+0x32 */ unsigned char tmStruckOut
  /* this+0x33 */ unsigned char tmPitchAndFamily
  /* this+0x34 */ unsigned char tmCharSet
  /* this+0x38 */ unsigned long ntmFlags
  /* this+0x3c */ unsigned int ntmSizeEM
  /* this+0x40 */ unsigned int ntmCellHeight
  /* this+0x44 */ unsigned int ntmAvgWidth
}

struct tagNEWTEXTMETRICEXA {
  /* this+0x0 */ struct tagNEWTEXTMETRICA ntmTm

  /* this+0x48 */ struct tagFONTSIGNATURE ntmFontSig

}

struct tagNEWTEXTMETRICEXW {
  /* this+0x0 */ struct tagNEWTEXTMETRICW ntmTm

  /* this+0x4c */ struct tagFONTSIGNATURE ntmFontSig

}

struct tagNEWTEXTMETRICW {
  /* this+0x0 */ long tmHeight
  /* this+0x4 */ long tmAscent
  /* this+0x8 */ long tmDescent
  /* this+0xc */ long tmInternalLeading
  /* this+0x10 */ long tmExternalLeading
  /* this+0x14 */ long tmAveCharWidth
  /* this+0x18 */ long tmMaxCharWidth
  /* this+0x1c */ long tmWeight
  /* this+0x20 */ long tmOverhang
  /* this+0x24 */ long tmDigitizedAspectX
  /* this+0x28 */ long tmDigitizedAspectY
  /* this+0x2c */ wchar_t tmFirstChar
  /* this+0x2e */ wchar_t tmLastChar
  /* this+0x30 */ wchar_t tmDefaultChar
  /* this+0x32 */ wchar_t tmBreakChar
  /* this+0x34 */ unsigned char tmItalic
  /* this+0x35 */ unsigned char tmUnderlined
  /* this+0x36 */ unsigned char tmStruckOut
  /* this+0x37 */ unsigned char tmPitchAndFamily
  /* this+0x38 */ unsigned char tmCharSet
  /* this+0x3c */ unsigned long ntmFlags
  /* this+0x40 */ unsigned int ntmSizeEM
  /* this+0x44 */ unsigned int ntmCellHeight
  /* this+0x48 */ unsigned int ntmAvgWidth
}

struct tagNMHDR {
  /* this+0x0 */ struct HWND__ * hwndFrom
  /* this+0x4 */ unsigned int idFrom
  /* this+0x8 */ unsigned int code
}

struct tagNONCLIENTMETRICSA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iBorderWidth
  /* this+0x8 */ int iScrollWidth
  /* this+0xc */ int iScrollHeight
  /* this+0x10 */ int iCaptionWidth
  /* this+0x14 */ int iCaptionHeight
  /* this+0x18 */ struct tagLOGFONTA lfCaptionFont

  /* this+0x54 */ int iSmCaptionWidth
  /* this+0x58 */ int iSmCaptionHeight
  /* this+0x5c */ struct tagLOGFONTA lfSmCaptionFont

  /* this+0x98 */ int iMenuWidth
  /* this+0x9c */ int iMenuHeight
  /* this+0xa0 */ struct tagLOGFONTA lfMenuFont

  /* this+0xdc */ struct tagLOGFONTA lfStatusFont

  /* this+0x118 */ struct tagLOGFONTA lfMessageFont

  /* this+0x154 */ int iPaddedBorderWidth
}

struct tagNONCLIENTMETRICSW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ int iBorderWidth
  /* this+0x8 */ int iScrollWidth
  /* this+0xc */ int iScrollHeight
  /* this+0x10 */ int iCaptionWidth
  /* this+0x14 */ int iCaptionHeight
  /* this+0x18 */ struct tagLOGFONTW lfCaptionFont

  /* this+0x74 */ int iSmCaptionWidth
  /* this+0x78 */ int iSmCaptionHeight
  /* this+0x7c */ struct tagLOGFONTW lfSmCaptionFont

  /* this+0xd8 */ int iMenuWidth
  /* this+0xdc */ int iMenuHeight
  /* this+0xe0 */ struct tagLOGFONTW lfMenuFont

  /* this+0x13c */ struct tagLOGFONTW lfStatusFont

  /* this+0x198 */ struct tagLOGFONTW lfMessageFont

  /* this+0x1f4 */ int iPaddedBorderWidth
}

struct tagODBC_VS_ARGS {
  /* this+0x0 */ const struct _GUID * pguidEvent
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ wchar_t * wszArg
  /* this+0x8 */ char * szArg
  /* this+0xc */ wchar_t * wszCorrelation
  /* this+0xc */ char * szCorrelation
  /* this+0x10 */ short RetCode
}

struct tagPAINTSTRUCT {
  /* this+0x0 */ struct HDC__ * hdc
  /* this+0x4 */ int fErase
  /* this+0x8 */ struct tagRECT rcPaint

  /* this+0x18 */ int fRestore
  /* this+0x1c */ int fIncUpdate
  /* this+0x20 */ unsigned char[0x20] rgbReserved
}

struct tagPALETTEENTRY {
  /* this+0x0 */ unsigned char peRed
  /* this+0x1 */ unsigned char peGreen
  /* this+0x2 */ unsigned char peBlue
  /* this+0x3 */ unsigned char peFlags
}

struct tagPANOSE {
  /* this+0x0 */ unsigned char bFamilyType
  /* this+0x1 */ unsigned char bSerifStyle
  /* this+0x2 */ unsigned char bWeight
  /* this+0x3 */ unsigned char bProportion
  /* this+0x4 */ unsigned char bContrast
  /* this+0x5 */ unsigned char bStrokeVariation
  /* this+0x6 */ unsigned char bArmStyle
  /* this+0x7 */ unsigned char bLetterform
  /* this+0x8 */ unsigned char bMidline
  /* this+0x9 */ unsigned char bXHeight
}

struct tagPELARRAY {
  /* this+0x0 */ long paXCount
  /* this+0x4 */ long paYCount
  /* this+0x8 */ long paXExt
  /* this+0xc */ long paYExt
  /* this+0x10 */ unsigned char paRGBs
}

struct tagPIXELFORMATDESCRIPTOR {
  /* this+0x0 */ unsigned short nSize
  /* this+0x2 */ unsigned short nVersion
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned char iPixelType
  /* this+0x9 */ unsigned char cColorBits
  /* this+0xa */ unsigned char cRedBits
  /* this+0xb */ unsigned char cRedShift
  /* this+0xc */ unsigned char cGreenBits
  /* this+0xd */ unsigned char cGreenShift
  /* this+0xe */ unsigned char cBlueBits
  /* this+0xf */ unsigned char cBlueShift
  /* this+0x10 */ unsigned char cAlphaBits
  /* this+0x11 */ unsigned char cAlphaShift
  /* this+0x12 */ unsigned char cAccumBits
  /* this+0x13 */ unsigned char cAccumRedBits
  /* this+0x14 */ unsigned char cAccumGreenBits
  /* this+0x15 */ unsigned char cAccumBlueBits
  /* this+0x16 */ unsigned char cAccumAlphaBits
  /* this+0x17 */ unsigned char cDepthBits
  /* this+0x18 */ unsigned char cStencilBits
  /* this+0x19 */ unsigned char cAuxBuffers
  /* this+0x1a */ unsigned char iLayerType
  /* this+0x1b */ unsigned char bReserved
  /* this+0x1c */ unsigned long dwLayerMask
  /* this+0x20 */ unsigned long dwVisibleMask
  /* this+0x24 */ unsigned long dwDamageMask
}

struct tagPOINT {
  /* this+0x0 */ long x
  /* this+0x4 */ long y
}

struct tagPOINTFX {
  /* this+0x0 */ struct _FIXED x

  /* this+0x4 */ struct _FIXED y

}

struct tagPOINTS {
  /* this+0x0 */ short x
  /* this+0x2 */ short y
}

struct tagPOLYTEXTA {
  /* this+0x0 */ int x
  /* this+0x4 */ int y
  /* this+0x8 */ unsigned int n
  /* this+0xc */ const char * lpstr
  /* this+0x10 */ unsigned int uiFlags
  /* this+0x14 */ struct tagRECT rcl

  /* this+0x24 */ int * pdx
}

struct tagPOLYTEXTW {
  /* this+0x0 */ int x
  /* this+0x4 */ int y
  /* this+0x8 */ unsigned int n
  /* this+0xc */ const wchar_t * lpstr
  /* this+0x10 */ unsigned int uiFlags
  /* this+0x14 */ struct tagRECT rcl

  /* this+0x24 */ int * pdx
}

struct tagRAWHID {
  /* this+0x0 */ unsigned long dwSizeHid
  /* this+0x4 */ unsigned long dwCount
  /* this+0x8 */ unsigned char[0x1] bRawData
}

struct tagRAWINPUT {
  /* this+0x0 */ struct tagRAWINPUTHEADER header

    /* this+0x10 */ union tagRAWINPUT::<unnamed-type-data> data

}

union tagRAWINPUT::<unnamed-type-data> {
  /* this+0x0 */ struct tagRAWMOUSE mouse

  /* this+0x0 */ struct tagRAWKEYBOARD keyboard

  /* this+0x0 */ struct tagRAWHID hid

}

struct tagRAWINPUTDEVICE {
  /* this+0x0 */ unsigned short usUsagePage
  /* this+0x2 */ unsigned short usUsage
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ struct HWND__ * hwndTarget
}

struct tagRAWINPUTDEVICELIST {
  /* this+0x0 */ void * hDevice
  /* this+0x4 */ unsigned long dwType
}

struct tagRAWINPUTHEADER {
  /* this+0x0 */ unsigned long dwType
  /* this+0x4 */ unsigned long dwSize
  /* this+0x8 */ void * hDevice
  /* this+0xc */ unsigned int wParam
}

struct tagRAWKEYBOARD {
  /* this+0x0 */ unsigned short MakeCode
  /* this+0x2 */ unsigned short Flags
  /* this+0x4 */ unsigned short Reserved
  /* this+0x6 */ unsigned short VKey
  /* this+0x8 */ unsigned int Message
  /* this+0xc */ unsigned long ExtraInformation
}

struct tagRAWMOUSE {
  /* this+0x0 */ unsigned short usFlags
  /* this+0x4 */ unsigned long ulButtons
  /* this+0x4 */ unsigned short usButtonFlags
  /* this+0x6 */ unsigned short usButtonData
  /* this+0x8 */ unsigned long ulRawButtons
  /* this+0xc */ long lLastX
  /* this+0x10 */ long lLastY
  /* this+0x14 */ unsigned long ulExtraInformation
}

struct tagRECONVERTSTRING {
  /* this+0x0 */ unsigned long dwSize
  /* this+0x4 */ unsigned long dwVersion
  /* this+0x8 */ unsigned long dwStrLen
  /* this+0xc */ unsigned long dwStrOffset
  /* this+0x10 */ unsigned long dwCompStrLen
  /* this+0x14 */ unsigned long dwCompStrOffset
  /* this+0x18 */ unsigned long dwTargetStrLen
  /* this+0x1c */ unsigned long dwTargetStrOffset
}

struct tagRECT {
  /* this+0x0 */ long left
  /* this+0x4 */ long top
  /* this+0x8 */ long right
  /* this+0xc */ long bottom
}

struct tagREGISTERWORDA {
  /* this+0x0 */ char * lpReading
  /* this+0x4 */ char * lpWord
}

struct tagREGISTERWORDW {
  /* this+0x0 */ wchar_t * lpReading
  /* this+0x4 */ wchar_t * lpWord
}

struct tagRGBQUAD {
  /* this+0x0 */ unsigned char rgbBlue
  /* this+0x1 */ unsigned char rgbGreen
  /* this+0x2 */ unsigned char rgbRed
  /* this+0x3 */ unsigned char rgbReserved
}

struct tagRGBTRIPLE {
  /* this+0x0 */ unsigned char rgbtBlue
  /* this+0x1 */ unsigned char rgbtGreen
  /* this+0x2 */ unsigned char rgbtRed
}

struct tagRID_DEVICE_INFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwType
  /* this+0x8 */ struct tagRID_DEVICE_INFO_MOUSE mouse

  /* this+0x8 */ struct tagRID_DEVICE_INFO_KEYBOARD keyboard

  /* this+0x8 */ struct tagRID_DEVICE_INFO_HID hid

}

struct tagRID_DEVICE_INFO_HID {
  /* this+0x0 */ unsigned long dwVendorId
  /* this+0x4 */ unsigned long dwProductId
  /* this+0x8 */ unsigned long dwVersionNumber
  /* this+0xc */ unsigned short usUsagePage
  /* this+0xe */ unsigned short usUsage
}

struct tagRID_DEVICE_INFO_KEYBOARD {
  /* this+0x0 */ unsigned long dwType
  /* this+0x4 */ unsigned long dwSubType
  /* this+0x8 */ unsigned long dwKeyboardMode
  /* this+0xc */ unsigned long dwNumberOfFunctionKeys
  /* this+0x10 */ unsigned long dwNumberOfIndicators
  /* this+0x14 */ unsigned long dwNumberOfKeysTotal
}

struct tagRID_DEVICE_INFO_MOUSE {
  /* this+0x0 */ unsigned long dwId
  /* this+0x4 */ unsigned long dwNumberOfButtons
  /* this+0x8 */ unsigned long dwSampleRate
  /* this+0xc */ int fHasHorizontalWheel
}

struct tagSCROLLBARINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcScrollBar

  /* this+0x14 */ int dxyLineButton
  /* this+0x18 */ int xyThumbTop
  /* this+0x1c */ int xyThumbBottom
  /* this+0x20 */ int reserved
  /* this+0x24 */ unsigned long[0x6] rgstate
}

struct tagSCROLLINFO {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int fMask
  /* this+0x8 */ int nMin
  /* this+0xc */ int nMax
  /* this+0x10 */ unsigned int nPage
  /* this+0x14 */ int nPos
  /* this+0x18 */ int nTrackPos
}

struct tagSERIALKEYSA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ char * lpszActivePort
  /* this+0xc */ char * lpszPort
  /* this+0x10 */ unsigned int iBaudRate
  /* this+0x14 */ unsigned int iPortState
  /* this+0x18 */ unsigned int iActive
}

struct tagSERIALKEYSW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ wchar_t * lpszActivePort
  /* this+0xc */ wchar_t * lpszPort
  /* this+0x10 */ unsigned int iBaudRate
  /* this+0x14 */ unsigned int iPortState
  /* this+0x18 */ unsigned int iActive
}

struct tagSIZE {
  /* this+0x0 */ long cx
  /* this+0x4 */ long cy
}

struct tagSOUNDSENTRYA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iFSTextEffect
  /* this+0xc */ unsigned long iFSTextEffectMSec
  /* this+0x10 */ unsigned long iFSTextEffectColorBits
  /* this+0x14 */ unsigned long iFSGrafEffect
  /* this+0x18 */ unsigned long iFSGrafEffectMSec
  /* this+0x1c */ unsigned long iFSGrafEffectColor
  /* this+0x20 */ unsigned long iWindowsEffect
  /* this+0x24 */ unsigned long iWindowsEffectMSec
  /* this+0x28 */ char * lpszWindowsEffectDLL
  /* this+0x2c */ unsigned long iWindowsEffectOrdinal
}

struct tagSOUNDSENTRYW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ unsigned long iFSTextEffect
  /* this+0xc */ unsigned long iFSTextEffectMSec
  /* this+0x10 */ unsigned long iFSTextEffectColorBits
  /* this+0x14 */ unsigned long iFSGrafEffect
  /* this+0x18 */ unsigned long iFSGrafEffectMSec
  /* this+0x1c */ unsigned long iFSGrafEffectColor
  /* this+0x20 */ unsigned long iWindowsEffect
  /* this+0x24 */ unsigned long iWindowsEffectMSec
  /* this+0x28 */ wchar_t * lpszWindowsEffectDLL
  /* this+0x2c */ unsigned long iWindowsEffectOrdinal
}

struct tagSQL_DAY_SECOND {
  /* this+0x0 */ unsigned long day
  /* this+0x4 */ unsigned long hour
  /* this+0x8 */ unsigned long minute
  /* this+0xc */ unsigned long second
  /* this+0x10 */ unsigned long fraction
}

struct tagSQL_INTERVAL_STRUCT {
  /* this+0x0 */ enum SQLINTERVAL interval_type
  /* this+0x4 */ short interval_sign
    /* this+0x8 */ union tagSQL_INTERVAL_STRUCT::<unnamed-type-intval> intval

}

union tagSQL_INTERVAL_STRUCT::<unnamed-type-intval> {
  /* this+0x0 */ struct tagSQL_YEAR_MONTH year_month

  /* this+0x0 */ struct tagSQL_DAY_SECOND day_second

}

struct tagSQL_NUMERIC_STRUCT {
  /* this+0x0 */ unsigned char precision
  /* this+0x1 */ signed char scale
  /* this+0x2 */ unsigned char sign
  /* this+0x3 */ unsigned char[0x10] val
}

struct tagSQL_YEAR_MONTH {
  /* this+0x0 */ unsigned long year
  /* this+0x4 */ unsigned long month
}

struct tagSTICKYKEYS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
}

struct tagSTYLEBUFA {
  /* this+0x0 */ unsigned long dwStyle
  /* this+0x4 */ char[0x20] szDescription
}

struct tagSTYLEBUFW {
  /* this+0x0 */ unsigned long dwStyle
  /* this+0x4 */ wchar_t[0x20] szDescription
}

struct tagSTYLESTRUCT {
  /* this+0x0 */ unsigned long styleOld
  /* this+0x4 */ unsigned long styleNew
}

struct tagShortCutKey {
  /* this+0x0 */ char isSkill
  /* this+0x1 */ unsigned long ID
  /* this+0x5 */ short count
}

struct tagTEXTMETRICA {
  /* this+0x0 */ long tmHeight
  /* this+0x4 */ long tmAscent
  /* this+0x8 */ long tmDescent
  /* this+0xc */ long tmInternalLeading
  /* this+0x10 */ long tmExternalLeading
  /* this+0x14 */ long tmAveCharWidth
  /* this+0x18 */ long tmMaxCharWidth
  /* this+0x1c */ long tmWeight
  /* this+0x20 */ long tmOverhang
  /* this+0x24 */ long tmDigitizedAspectX
  /* this+0x28 */ long tmDigitizedAspectY
  /* this+0x2c */ unsigned char tmFirstChar
  /* this+0x2d */ unsigned char tmLastChar
  /* this+0x2e */ unsigned char tmDefaultChar
  /* this+0x2f */ unsigned char tmBreakChar
  /* this+0x30 */ unsigned char tmItalic
  /* this+0x31 */ unsigned char tmUnderlined
  /* this+0x32 */ unsigned char tmStruckOut
  /* this+0x33 */ unsigned char tmPitchAndFamily
  /* this+0x34 */ unsigned char tmCharSet
}

struct tagTEXTMETRICW {
  /* this+0x0 */ long tmHeight
  /* this+0x4 */ long tmAscent
  /* this+0x8 */ long tmDescent
  /* this+0xc */ long tmInternalLeading
  /* this+0x10 */ long tmExternalLeading
  /* this+0x14 */ long tmAveCharWidth
  /* this+0x18 */ long tmMaxCharWidth
  /* this+0x1c */ long tmWeight
  /* this+0x20 */ long tmOverhang
  /* this+0x24 */ long tmDigitizedAspectX
  /* this+0x28 */ long tmDigitizedAspectY
  /* this+0x2c */ wchar_t tmFirstChar
  /* this+0x2e */ wchar_t tmLastChar
  /* this+0x30 */ wchar_t tmDefaultChar
  /* this+0x32 */ wchar_t tmBreakChar
  /* this+0x34 */ unsigned char tmItalic
  /* this+0x35 */ unsigned char tmUnderlined
  /* this+0x36 */ unsigned char tmStruckOut
  /* this+0x37 */ unsigned char tmPitchAndFamily
  /* this+0x38 */ unsigned char tmCharSet
}

struct tagTIMESTAMP_STRUCT {
  /* this+0x0 */ short year
  /* this+0x2 */ unsigned short month
  /* this+0x4 */ unsigned short day
  /* this+0x6 */ unsigned short hour
  /* this+0x8 */ unsigned short minute
  /* this+0xa */ unsigned short second
  /* this+0xc */ unsigned long fraction
}

struct tagTIME_STRUCT {
  /* this+0x0 */ unsigned short hour
  /* this+0x2 */ unsigned short minute
  /* this+0x4 */ unsigned short second
}

struct tagTITLEBARINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcTitleBar

  /* this+0x14 */ unsigned long[0x6] rgstate
}

struct tagTITLEBARINFOEX {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcTitleBar

  /* this+0x14 */ unsigned long[0x6] rgstate
  /* this+0x2c */ struct tagRECT[0x6] rgrect
}

struct tagTOGGLEKEYS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned long dwFlags
}

struct tagTOUCHINPUT {
  /* this+0x0 */ long x
  /* this+0x4 */ long y
  /* this+0x8 */ void * hSource
  /* this+0xc */ unsigned long dwID
  /* this+0x10 */ unsigned long dwFlags
  /* this+0x14 */ unsigned long dwMask
  /* this+0x18 */ unsigned long dwTime
  /* this+0x1c */ unsigned long dwExtraInfo
  /* this+0x20 */ unsigned long cxContact
  /* this+0x24 */ unsigned long cyContact
}

struct tagTPMPARAMS {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ struct tagRECT rcExclude

}

struct tagTRACKMOUSEEVENT {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwFlags
  /* this+0x8 */ struct HWND__ * hwndTrack
  /* this+0xc */ unsigned long dwHoverTime
}

struct tagTTPOLYCURVE {
  /* this+0x0 */ unsigned short wType
  /* this+0x2 */ unsigned short cpfx
  /* this+0x4 */ struct tagPOINTFX[0x1] apfx
}

struct tagTTPOLYGONHEADER {
  /* this+0x0 */ unsigned long cb
  /* this+0x4 */ unsigned long dwType
  /* this+0x8 */ struct tagPOINTFX pfxStart

}

struct tagUPDATELAYEREDWINDOWINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct HDC__ * hdcDst
  /* this+0x8 */ const struct tagPOINT * pptDst
  /* this+0xc */ const struct tagSIZE * psize
  /* this+0x10 */ struct HDC__ * hdcSrc
  /* this+0x14 */ const struct tagPOINT * pptSrc
  /* this+0x18 */ unsigned long crKey
  /* this+0x1c */ const struct _BLENDFUNCTION * pblend
  /* this+0x20 */ unsigned long dwFlags
  /* this+0x24 */ const struct tagRECT * prcDirty
}

struct tagUSEROBJECTFLAGS {
  /* this+0x0 */ int fInherit
  /* this+0x4 */ int fReserved
  /* this+0x8 */ unsigned long dwFlags
}

struct tagVS_FIXEDFILEINFO {
  /* this+0x0 */ unsigned long dwSignature
  /* this+0x4 */ unsigned long dwStrucVersion
  /* this+0x8 */ unsigned long dwFileVersionMS
  /* this+0xc */ unsigned long dwFileVersionLS
  /* this+0x10 */ unsigned long dwProductVersionMS
  /* this+0x14 */ unsigned long dwProductVersionLS
  /* this+0x18 */ unsigned long dwFileFlagsMask
  /* this+0x1c */ unsigned long dwFileFlags
  /* this+0x20 */ unsigned long dwFileOS
  /* this+0x24 */ unsigned long dwFileType
  /* this+0x28 */ unsigned long dwFileSubtype
  /* this+0x2c */ unsigned long dwFileDateMS
  /* this+0x30 */ unsigned long dwFileDateLS
}

struct tagWAVEINCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwFormats
  /* this+0x2c */ unsigned short wChannels
  /* this+0x2e */ unsigned short wReserved1
  /* this+0x30 */ struct _GUID ManufacturerGuid

  /* this+0x40 */ struct _GUID ProductGuid

  /* this+0x50 */ struct _GUID NameGuid

}

struct tagWAVEINCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwFormats
  /* this+0x4c */ unsigned short wChannels
  /* this+0x4e */ unsigned short wReserved1
  /* this+0x50 */ struct _GUID ManufacturerGuid

  /* this+0x60 */ struct _GUID ProductGuid

  /* this+0x70 */ struct _GUID NameGuid

}

struct tagWAVEINCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwFormats
  /* this+0x2c */ unsigned short wChannels
  /* this+0x2e */ unsigned short wReserved1
}

struct tagWAVEINCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwFormats
  /* this+0x4c */ unsigned short wChannels
  /* this+0x4e */ unsigned short wReserved1
}

struct tagWAVEOUTCAPS2A {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwFormats
  /* this+0x2c */ unsigned short wChannels
  /* this+0x2e */ unsigned short wReserved1
  /* this+0x30 */ unsigned long dwSupport
  /* this+0x34 */ struct _GUID ManufacturerGuid

  /* this+0x44 */ struct _GUID ProductGuid

  /* this+0x54 */ struct _GUID NameGuid

}

struct tagWAVEOUTCAPS2W {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwFormats
  /* this+0x4c */ unsigned short wChannels
  /* this+0x4e */ unsigned short wReserved1
  /* this+0x50 */ unsigned long dwSupport
  /* this+0x54 */ struct _GUID ManufacturerGuid

  /* this+0x64 */ struct _GUID ProductGuid

  /* this+0x74 */ struct _GUID NameGuid

}

struct tagWAVEOUTCAPSA {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ char[0x20] szPname
  /* this+0x28 */ unsigned long dwFormats
  /* this+0x2c */ unsigned short wChannels
  /* this+0x2e */ unsigned short wReserved1
  /* this+0x30 */ unsigned long dwSupport
}

struct tagWAVEOUTCAPSW {
  /* this+0x0 */ unsigned short wMid
  /* this+0x2 */ unsigned short wPid
  /* this+0x4 */ unsigned int vDriverVersion
  /* this+0x8 */ wchar_t[0x20] szPname
  /* this+0x48 */ unsigned long dwFormats
  /* this+0x4c */ unsigned short wChannels
  /* this+0x4e */ unsigned short wReserved1
  /* this+0x50 */ unsigned long dwSupport
}

struct tagWCRANGE {
  /* this+0x0 */ wchar_t wcLow
  /* this+0x2 */ unsigned short cGlyphs
}

struct tagWINDOWINFO {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ struct tagRECT rcWindow

  /* this+0x14 */ struct tagRECT rcClient

  /* this+0x24 */ unsigned long dwStyle
  /* this+0x28 */ unsigned long dwExStyle
  /* this+0x2c */ unsigned long dwWindowStatus
  /* this+0x30 */ unsigned int cxWindowBorders
  /* this+0x34 */ unsigned int cyWindowBorders
  /* this+0x38 */ unsigned short atomWindowType
  /* this+0x3a */ unsigned short wCreatorVersion
}

struct tagWINDOWPLACEMENT {
  /* this+0x0 */ unsigned int length
  /* this+0x4 */ unsigned int flags
  /* this+0x8 */ unsigned int showCmd
  /* this+0xc */ struct tagPOINT ptMinPosition

  /* this+0x14 */ struct tagPOINT ptMaxPosition

  /* this+0x1c */ struct tagRECT rcNormalPosition

}

struct tagWINDOWPOS {
  /* this+0x0 */ struct HWND__ * hwnd
  /* this+0x4 */ struct HWND__ * hwndInsertAfter
  /* this+0x8 */ int x
  /* this+0xc */ int y
  /* this+0x10 */ int cx
  /* this+0x14 */ int cy
  /* this+0x18 */ unsigned int flags
}

struct tagWNDCLASSA {
  /* this+0x0 */ unsigned int style
  /* this+0x4 */ function  * lpfnWndProc
  /* this+0x8 */ int cbClsExtra
  /* this+0xc */ int cbWndExtra
  /* this+0x10 */ struct HINSTANCE__ * hInstance
  /* this+0x14 */ struct HICON__ * hIcon
  /* this+0x18 */ struct HICON__ * hCursor
  /* this+0x1c */ struct HBRUSH__ * hbrBackground
  /* this+0x20 */ const char * lpszMenuName
  /* this+0x24 */ const char * lpszClassName
}

struct tagWNDCLASSEXA {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int style
  /* this+0x8 */ function  * lpfnWndProc
  /* this+0xc */ int cbClsExtra
  /* this+0x10 */ int cbWndExtra
  /* this+0x14 */ struct HINSTANCE__ * hInstance
  /* this+0x18 */ struct HICON__ * hIcon
  /* this+0x1c */ struct HICON__ * hCursor
  /* this+0x20 */ struct HBRUSH__ * hbrBackground
  /* this+0x24 */ const char * lpszMenuName
  /* this+0x28 */ const char * lpszClassName
  /* this+0x2c */ struct HICON__ * hIconSm
}

struct tagWNDCLASSEXW {
  /* this+0x0 */ unsigned int cbSize
  /* this+0x4 */ unsigned int style
  /* this+0x8 */ function  * lpfnWndProc
  /* this+0xc */ int cbClsExtra
  /* this+0x10 */ int cbWndExtra
  /* this+0x14 */ struct HINSTANCE__ * hInstance
  /* this+0x18 */ struct HICON__ * hIcon
  /* this+0x1c */ struct HICON__ * hCursor
  /* this+0x20 */ struct HBRUSH__ * hbrBackground
  /* this+0x24 */ const wchar_t * lpszMenuName
  /* this+0x28 */ const wchar_t * lpszClassName
  /* this+0x2c */ struct HICON__ * hIconSm
}

struct tagWNDCLASSW {
  /* this+0x0 */ unsigned int style
  /* this+0x4 */ function  * lpfnWndProc
  /* this+0x8 */ int cbClsExtra
  /* this+0xc */ int cbWndExtra
  /* this+0x10 */ struct HINSTANCE__ * hInstance
  /* this+0x14 */ struct HICON__ * hIcon
  /* this+0x18 */ struct HICON__ * hCursor
  /* this+0x1c */ struct HBRUSH__ * hbrBackground
  /* this+0x20 */ const wchar_t * lpszMenuName
  /* this+0x24 */ const wchar_t * lpszClassName
}

struct tagWTSSESSION_NOTIFICATION {
  /* this+0x0 */ unsigned long cbSize
  /* this+0x4 */ unsigned long dwSessionId
}

struct tagXFORM {
  /* this+0x0 */ float eM11
  /* this+0x4 */ float eM12
  /* this+0x8 */ float eM21
  /* this+0xc */ float eM22
  /* this+0x10 */ float eDx
  /* this+0x14 */ float eDy
}

struct threadlocaleinfostruct {
  /* this+0x0 */ int refcount
  /* this+0x4 */ unsigned int lc_codepage
  /* this+0x8 */ unsigned int lc_collate_cp
  /* this+0xc */ unsigned long[0x6] lc_handle
  /* this+0x24 */ struct tagLC_ID[0x6] lc_id
    /* this+0x48 */ struct threadlocaleinfostruct::<unnamed-type-lc_category>[0x6] lc_category
  /* this+0xa8 */ int lc_clike
  /* this+0xac */ int mb_cur_max
  /* this+0xb0 */ int * lconv_intl_refcount
  /* this+0xb4 */ int * lconv_num_refcount
  /* this+0xb8 */ int * lconv_mon_refcount
  /* this+0xbc */ struct lconv * lconv
  /* this+0xc0 */ int * ctype1_refcount
  /* this+0xc4 */ unsigned short * ctype1
  /* this+0xc8 */ const unsigned short * pctype
  /* this+0xcc */ const unsigned char * pclmap
  /* this+0xd0 */ const unsigned char * pcumap
  /* this+0xd4 */ struct __lc_time_data * lc_time_curr
}

struct threadlocaleinfostruct::<unnamed-type-lc_category> {
  /* this+0x0 */ char * locale
  /* this+0x4 */ wchar_t * wlocale
  /* this+0x8 */ int * refcount
  /* this+0xc */ int * wrefcount
}

struct threadmbcinfostruct {
  /* this+0x0 */ int refcount
  /* this+0x4 */ int mbcodepage
  /* this+0x8 */ int ismbcodepage
  /* this+0xc */ int mblcid
  /* this+0x10 */ unsigned short[0x6] mbulinfo
  /* this+0x1c */ unsigned char[0x101] mbctype
  /* this+0x11d */ unsigned char[0x100] mbcasemap
}

struct timeb {
  /* this+0x0 */ __int64 time
  /* this+0x8 */ unsigned short millitm
  /* this+0xa */ short timezone
  /* this+0xc */ short dstflag
}

struct timecaps_tag {
  /* this+0x0 */ unsigned int wPeriodMin
  /* this+0x4 */ unsigned int wPeriodMax
}

struct timeval {
  /* this+0x0 */ long tv_sec
  /* this+0x4 */ long tv_usec
}

struct tm {
  /* this+0x0 */ int tm_sec
  /* this+0x4 */ int tm_min
  /* this+0x8 */ int tm_hour
  /* this+0xc */ int tm_mday
  /* this+0x10 */ int tm_mon
  /* this+0x14 */ int tm_year
  /* this+0x18 */ int tm_wday
  /* this+0x1c */ int tm_yday
  /* this+0x20 */ int tm_isdst
}

struct transitiondate {
  /* this+0x0 */ int yr
  /* this+0x4 */ int yd
  /* this+0x8 */ int ms
}

class type_info {
    *
  public unsigned int hash_code()
  public void type_info::~type_info()
  public bool type_info::operator==(const class type_info &)
  public bool operator!=(const class type_info &)
  public int before(const class type_info &)
  public const char * name(struct __type_info_node *)
  public const char * raw_name()
  /* this+0x4 */ void * _M_data
  /* this+0x8 */ char[0x1] _M_d_name
  private void type_info(const class type_info &)
  private class type_info & operator=(const class type_info &)
  private static const char * _Name_base(const class type_info *, struct __type_info_node *)
  private static void type_info::_Type_info_dtor(class type_info *)
  private static const char * _Name_base_internal(const class type_info *, struct __type_info_node *)
  private static void _Type_info_dtor_internal(class type_info *)
  public void _type_info_dtor_internal_method()
  public const char * _name_internal_method(struct __type_info_node *)
  public void * __vecDelDtor(unsigned int)
}

struct upvaldesc {
  /* this+0x0 */ unsigned char k
  /* this+0x1 */ unsigned char info
}

struct val_context {
  /* this+0x0 */ int valuelen
  /* this+0x4 */ void * value_context
  /* this+0x8 */ void * val_buff_ptr
}

struct value_entA {
  /* this+0x0 */ char * ve_valuename
  /* this+0x4 */ unsigned long ve_valuelen
  /* this+0x8 */ unsigned long ve_valueptr
  /* this+0xc */ unsigned long ve_type
}

struct value_entW {
  /* this+0x0 */ wchar_t * ve_valuename
  /* this+0x4 */ unsigned long ve_valuelen
  /* this+0x8 */ unsigned long ve_valueptr
  /* this+0xc */ unsigned long ve_type
}

struct vc_attributes::FormatStringAttribute {
  public void FormatStringAttribute()
  /* this+0x0 */ const wchar_t * Style
  /* this+0x4 */ const wchar_t * UnformattedAlternative
}

struct vc_attributes::InvalidCheckAttribute {
  public void InvalidCheckAttribute()
  /* this+0x0 */ long Value
}

struct vc_attributes::PostAttribute {
  public void PostAttribute()
  /* this+0x0 */ unsigned int Deref
  /* this+0x4 */ enum vc_attributes::YesNoMaybe Valid
  /* this+0x8 */ enum vc_attributes::YesNoMaybe Null
  /* this+0xc */ enum vc_attributes::YesNoMaybe Tainted
  /* this+0x10 */ enum vc_attributes::AccessType Access
  /* this+0x14 */ unsigned int ValidElementsConst
  /* this+0x18 */ unsigned int ValidBytesConst
  /* this+0x1c */ const wchar_t * ValidElements
  /* this+0x20 */ const wchar_t * ValidBytes
  /* this+0x24 */ const wchar_t * ValidElementsLength
  /* this+0x28 */ const wchar_t * ValidBytesLength
  /* this+0x2c */ unsigned int WritableElementsConst
  /* this+0x30 */ unsigned int WritableBytesConst
  /* this+0x34 */ const wchar_t * WritableElements
  /* this+0x38 */ const wchar_t * WritableBytes
  /* this+0x3c */ const wchar_t * WritableElementsLength
  /* this+0x40 */ const wchar_t * WritableBytesLength
  /* this+0x44 */ unsigned int ElementSizeConst
  /* this+0x48 */ const wchar_t * ElementSize
  /* this+0x4c */ enum vc_attributes::YesNoMaybe NullTerminated
  /* this+0x50 */ enum vc_attributes::YesNoMaybe MustCheck
  /* this+0x54 */ const wchar_t * Condition
}

struct vc_attributes::PostBoundAttribute {
  public void PostBoundAttribute()
  /* this+0x0 */ unsigned int Deref
}

struct vc_attributes::PostRangeAttribute {
  public void PostRangeAttribute()
  /* this+0x0 */ unsigned int Deref
  /* this+0x4 */ const char * MinVal
  /* this+0x8 */ const char * MaxVal
}

struct vc_attributes::PreAttribute {
  public void PreAttribute()
  /* this+0x0 */ unsigned int Deref
  /* this+0x4 */ enum vc_attributes::YesNoMaybe Valid
  /* this+0x8 */ enum vc_attributes::YesNoMaybe Null
  /* this+0xc */ enum vc_attributes::YesNoMaybe Tainted
  /* this+0x10 */ enum vc_attributes::AccessType Access
  /* this+0x14 */ unsigned int ValidElementsConst
  /* this+0x18 */ unsigned int ValidBytesConst
  /* this+0x1c */ const wchar_t * ValidElements
  /* this+0x20 */ const wchar_t * ValidBytes
  /* this+0x24 */ const wchar_t * ValidElementsLength
  /* this+0x28 */ const wchar_t * ValidBytesLength
  /* this+0x2c */ unsigned int WritableElementsConst
  /* this+0x30 */ unsigned int WritableBytesConst
  /* this+0x34 */ const wchar_t * WritableElements
  /* this+0x38 */ const wchar_t * WritableBytes
  /* this+0x3c */ const wchar_t * WritableElementsLength
  /* this+0x40 */ const wchar_t * WritableBytesLength
  /* this+0x44 */ unsigned int ElementSizeConst
  /* this+0x48 */ const wchar_t * ElementSize
  /* this+0x4c */ enum vc_attributes::YesNoMaybe NullTerminated
  /* this+0x50 */ const wchar_t * Condition
}

struct vc_attributes::PreBoundAttribute {
  public void PreBoundAttribute()
  /* this+0x0 */ unsigned int Deref
}

struct vc_attributes::PreRangeAttribute {
  public void PreRangeAttribute()
  /* this+0x0 */ unsigned int Deref
  /* this+0x4 */ const char * MinVal
  /* this+0x8 */ const char * MaxVal
}

struct vc_attributes::SuccessAttribute {
  public void SuccessAttribute()
  /* this+0x0 */ const wchar_t * Condition
}

struct waveformat_tag {
  /* this+0x0 */ unsigned short wFormatTag
  /* this+0x2 */ unsigned short nChannels
  /* this+0x4 */ unsigned long nSamplesPerSec
  /* this+0x8 */ unsigned long nAvgBytesPerSec
  /* this+0xc */ unsigned short nBlockAlign
}

struct wavehdr_tag {
  /* this+0x0 */ char * lpData
  /* this+0x4 */ unsigned long dwBufferLength
  /* this+0x8 */ unsigned long dwBytesRecorded
  /* this+0xc */ unsigned long dwUser
  /* this+0x10 */ unsigned long dwFlags
  /* this+0x14 */ unsigned long dwLoops
  /* this+0x18 */ struct wavehdr_tag * lpNext
  /* this+0x1c */ unsigned long reserved
}

